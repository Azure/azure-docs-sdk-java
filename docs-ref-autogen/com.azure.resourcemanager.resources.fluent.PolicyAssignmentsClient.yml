### YamlMime:JavaType
uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient"
fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient"
name: "PolicyAssignmentsClient"
nameWithType: "PolicyAssignmentsClient"
summary: "An instance of this class provides access to all the operations defined in Policy<wbr>Assignments<wbr>Client."
syntax: "public interface PolicyAssignmentsClient extends InnerSupportsListing<PolicyAssignmentInner>, InnerSupportsDelete<PolicyAssignmentInner>"
methods:
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.create(java.lang.String,java.lang.String,com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.create(String scope, String policyAssignmentName, PolicyAssignmentInner parameters)"
  name: "create(String scope, String policyAssignmentName, PolicyAssignmentInner parameters)"
  nameWithType: "PolicyAssignmentsClient.create(String scope, String policyAssignmentName, PolicyAssignmentInner parameters)"
  summary: "This operation creates or updates a policy assignment with the given scope and name."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy assignment. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy assignment."
    name: "policyAssignmentName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameters for the policy assignment."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PolicyAssignmentInner create(String scope, String policyAssignmentName, PolicyAssignmentInner parameters)"
  desc: "This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group."
  returns:
    description: "the policy assignment."
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.createAsync(java.lang.String,java.lang.String,com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.createAsync(String scope, String policyAssignmentName, PolicyAssignmentInner parameters)"
  name: "createAsync(String scope, String policyAssignmentName, PolicyAssignmentInner parameters)"
  nameWithType: "PolicyAssignmentsClient.createAsync(String scope, String policyAssignmentName, PolicyAssignmentInner parameters)"
  summary: "This operation creates or updates a policy assignment with the given scope and name."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy assignment. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy assignment."
    name: "policyAssignmentName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameters for the policy assignment."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Mono<PolicyAssignmentInner> createAsync(String scope, String policyAssignmentName, PolicyAssignmentInner parameters)"
  desc: "This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group."
  returns:
    description: "the policy assignment on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.createById(java.lang.String,com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.createById(String policyAssignmentId, PolicyAssignmentInner parameters)"
  name: "createById(String policyAssignmentId, PolicyAssignmentInner parameters)"
  nameWithType: "PolicyAssignmentsClient.createById(String policyAssignmentId, PolicyAssignmentInner parameters)"
  summary: "This operation creates or updates the policy assignment with the given ID."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the policy assignment to create. Use the format\n     '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'."
    name: "policyAssignmentId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameters for policy assignment."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PolicyAssignmentInner createById(String policyAssignmentId, PolicyAssignmentInner parameters)"
  desc: "This operation creates or updates the policy assignment with the given ID. Policy assignments made on a scope apply to all resources contained in that scope. For example, when you assign a policy to a resource group that policy applies to all resources in the group. Policy assignment IDs have this format: '\\{scope\\}/providers/Microsoft.Authorization/policyAssignments/\\{policyAssignmentName\\}'. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/\\{managementGroup\\}'), subscription (format: '/subscriptions/\\{subscriptionId\\}'), resource group (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}', or resource (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}/providers/\\{resourceProviderNamespace\\}/\\[\\{parentResourcePath\\}/\\]\\{resourceType\\}/\\{resourceName\\}'."
  returns:
    description: "the policy assignment."
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.createByIdAsync(java.lang.String,com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.createByIdAsync(String policyAssignmentId, PolicyAssignmentInner parameters)"
  name: "createByIdAsync(String policyAssignmentId, PolicyAssignmentInner parameters)"
  nameWithType: "PolicyAssignmentsClient.createByIdAsync(String policyAssignmentId, PolicyAssignmentInner parameters)"
  summary: "This operation creates or updates the policy assignment with the given ID."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the policy assignment to create. Use the format\n     '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'."
    name: "policyAssignmentId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameters for policy assignment."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Mono<PolicyAssignmentInner> createByIdAsync(String policyAssignmentId, PolicyAssignmentInner parameters)"
  desc: "This operation creates or updates the policy assignment with the given ID. Policy assignments made on a scope apply to all resources contained in that scope. For example, when you assign a policy to a resource group that policy applies to all resources in the group. Policy assignment IDs have this format: '\\{scope\\}/providers/Microsoft.Authorization/policyAssignments/\\{policyAssignmentName\\}'. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/\\{managementGroup\\}'), subscription (format: '/subscriptions/\\{subscriptionId\\}'), resource group (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}', or resource (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}/providers/\\{resourceProviderNamespace\\}/\\[\\{parentResourcePath\\}/\\]\\{resourceType\\}/\\{resourceName\\}'."
  returns:
    description: "the policy assignment on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.createByIdWithResponse(java.lang.String,com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.createByIdWithResponse(String policyAssignmentId, PolicyAssignmentInner parameters, Context context)"
  name: "createByIdWithResponse(String policyAssignmentId, PolicyAssignmentInner parameters, Context context)"
  nameWithType: "PolicyAssignmentsClient.createByIdWithResponse(String policyAssignmentId, PolicyAssignmentInner parameters, Context context)"
  summary: "This operation creates or updates the policy assignment with the given ID."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the policy assignment to create. Use the format\n     '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'."
    name: "policyAssignmentId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameters for policy assignment."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<PolicyAssignmentInner> createByIdWithResponse(String policyAssignmentId, PolicyAssignmentInner parameters, Context context)"
  desc: "This operation creates or updates the policy assignment with the given ID. Policy assignments made on a scope apply to all resources contained in that scope. For example, when you assign a policy to a resource group that policy applies to all resources in the group. Policy assignment IDs have this format: '\\{scope\\}/providers/Microsoft.Authorization/policyAssignments/\\{policyAssignmentName\\}'. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/\\{managementGroup\\}'), subscription (format: '/subscriptions/\\{subscriptionId\\}'), resource group (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}', or resource (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}/providers/\\{resourceProviderNamespace\\}/\\[\\{parentResourcePath\\}/\\]\\{resourceType\\}/\\{resourceName\\}'."
  returns:
    description: "the policy assignment along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.createByIdWithResponseAsync(java.lang.String,com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.createByIdWithResponseAsync(String policyAssignmentId, PolicyAssignmentInner parameters)"
  name: "createByIdWithResponseAsync(String policyAssignmentId, PolicyAssignmentInner parameters)"
  nameWithType: "PolicyAssignmentsClient.createByIdWithResponseAsync(String policyAssignmentId, PolicyAssignmentInner parameters)"
  summary: "This operation creates or updates the policy assignment with the given ID."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the policy assignment to create. Use the format\n     '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'."
    name: "policyAssignmentId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameters for policy assignment."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Mono<Response<PolicyAssignmentInner>> createByIdWithResponseAsync(String policyAssignmentId, PolicyAssignmentInner parameters)"
  desc: "This operation creates or updates the policy assignment with the given ID. Policy assignments made on a scope apply to all resources contained in that scope. For example, when you assign a policy to a resource group that policy applies to all resources in the group. Policy assignment IDs have this format: '\\{scope\\}/providers/Microsoft.Authorization/policyAssignments/\\{policyAssignmentName\\}'. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/\\{managementGroup\\}'), subscription (format: '/subscriptions/\\{subscriptionId\\}'), resource group (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}', or resource (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}/providers/\\{resourceProviderNamespace\\}/\\[\\{parentResourcePath\\}/\\]\\{resourceType\\}/\\{resourceName\\}'."
  returns:
    description: "the policy assignment along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.createWithResponse(java.lang.String,java.lang.String,com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.createWithResponse(String scope, String policyAssignmentName, PolicyAssignmentInner parameters, Context context)"
  name: "createWithResponse(String scope, String policyAssignmentName, PolicyAssignmentInner parameters, Context context)"
  nameWithType: "PolicyAssignmentsClient.createWithResponse(String scope, String policyAssignmentName, PolicyAssignmentInner parameters, Context context)"
  summary: "This operation creates or updates a policy assignment with the given scope and name."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy assignment. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy assignment."
    name: "policyAssignmentName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameters for the policy assignment."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<PolicyAssignmentInner> createWithResponse(String scope, String policyAssignmentName, PolicyAssignmentInner parameters, Context context)"
  desc: "This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group."
  returns:
    description: "the policy assignment along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.createWithResponseAsync(java.lang.String,java.lang.String,com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.createWithResponseAsync(String scope, String policyAssignmentName, PolicyAssignmentInner parameters)"
  name: "createWithResponseAsync(String scope, String policyAssignmentName, PolicyAssignmentInner parameters)"
  nameWithType: "PolicyAssignmentsClient.createWithResponseAsync(String scope, String policyAssignmentName, PolicyAssignmentInner parameters)"
  summary: "This operation creates or updates a policy assignment with the given scope and name."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy assignment. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy assignment."
    name: "policyAssignmentName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameters for the policy assignment."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Mono<Response<PolicyAssignmentInner>> createWithResponseAsync(String scope, String policyAssignmentName, PolicyAssignmentInner parameters)"
  desc: "This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group."
  returns:
    description: "the policy assignment along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.delete(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.delete(String scope, String policyAssignmentName)"
  name: "delete(String scope, String policyAssignmentName)"
  nameWithType: "PolicyAssignmentsClient.delete(String scope, String policyAssignmentName)"
  summary: "This operation deletes a policy assignment, given its name and the scope it was created in."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy assignment. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy assignment to delete."
    name: "policyAssignmentName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PolicyAssignmentInner delete(String scope, String policyAssignmentName)"
  desc: "This operation deletes a policy assignment, given its name and the scope it was created in. The scope of a policy assignment is the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/\\{policyAssignmentName\\}'."
  returns:
    description: "the policy assignment."
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.deleteAsync(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.deleteAsync(String scope, String policyAssignmentName)"
  name: "deleteAsync(String scope, String policyAssignmentName)"
  nameWithType: "PolicyAssignmentsClient.deleteAsync(String scope, String policyAssignmentName)"
  summary: "This operation deletes a policy assignment, given its name and the scope it was created in."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy assignment. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy assignment to delete."
    name: "policyAssignmentName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract Mono<PolicyAssignmentInner> deleteAsync(String scope, String policyAssignmentName)"
  desc: "This operation deletes a policy assignment, given its name and the scope it was created in. The scope of a policy assignment is the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/\\{policyAssignmentName\\}'."
  returns:
    description: "the policy assignment on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.deleteById(java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.deleteById(String policyAssignmentId)"
  name: "deleteById(String policyAssignmentId)"
  nameWithType: "PolicyAssignmentsClient.deleteById(String policyAssignmentId)"
  summary: "This operation deletes the policy with the given ID."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the policy assignment to delete. Use the format\n     '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'."
    name: "policyAssignmentId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PolicyAssignmentInner deleteById(String policyAssignmentId)"
  desc: "This operation deletes the policy with the given ID. Policy assignment IDs have this format: '\\{scope\\}/providers/Microsoft.Authorization/policyAssignments/\\{policyAssignmentName\\}'. Valid formats for \\{scope\\} are: '/providers/Microsoft.Management/managementGroups/\\{managementGroup\\}' (management group), '/subscriptions/\\{subscriptionId\\}' (subscription), '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}' (resource group), or '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}/providers/\\{resourceProviderNamespace\\}/\\[\\{parentResourcePath\\}/\\]\\{resourceType\\}/\\{resourceName\\}' (resource)."
  returns:
    description: "the policy assignment."
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.deleteByIdAsync(java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.deleteByIdAsync(String policyAssignmentId)"
  name: "deleteByIdAsync(String policyAssignmentId)"
  nameWithType: "PolicyAssignmentsClient.deleteByIdAsync(String policyAssignmentId)"
  summary: "This operation deletes the policy with the given ID."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the policy assignment to delete. Use the format\n     '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'."
    name: "policyAssignmentId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract Mono<PolicyAssignmentInner> deleteByIdAsync(String policyAssignmentId)"
  desc: "This operation deletes the policy with the given ID. Policy assignment IDs have this format: '\\{scope\\}/providers/Microsoft.Authorization/policyAssignments/\\{policyAssignmentName\\}'. Valid formats for \\{scope\\} are: '/providers/Microsoft.Management/managementGroups/\\{managementGroup\\}' (management group), '/subscriptions/\\{subscriptionId\\}' (subscription), '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}' (resource group), or '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}/providers/\\{resourceProviderNamespace\\}/\\[\\{parentResourcePath\\}/\\]\\{resourceType\\}/\\{resourceName\\}' (resource)."
  returns:
    description: "the policy assignment on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.deleteByIdWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.deleteByIdWithResponse(String policyAssignmentId, Context context)"
  name: "deleteByIdWithResponse(String policyAssignmentId, Context context)"
  nameWithType: "PolicyAssignmentsClient.deleteByIdWithResponse(String policyAssignmentId, Context context)"
  summary: "This operation deletes the policy with the given ID."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the policy assignment to delete. Use the format\n     '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'."
    name: "policyAssignmentId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<PolicyAssignmentInner> deleteByIdWithResponse(String policyAssignmentId, Context context)"
  desc: "This operation deletes the policy with the given ID. Policy assignment IDs have this format: '\\{scope\\}/providers/Microsoft.Authorization/policyAssignments/\\{policyAssignmentName\\}'. Valid formats for \\{scope\\} are: '/providers/Microsoft.Management/managementGroups/\\{managementGroup\\}' (management group), '/subscriptions/\\{subscriptionId\\}' (subscription), '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}' (resource group), or '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}/providers/\\{resourceProviderNamespace\\}/\\[\\{parentResourcePath\\}/\\]\\{resourceType\\}/\\{resourceName\\}' (resource)."
  returns:
    description: "the policy assignment along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.deleteByIdWithResponseAsync(java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.deleteByIdWithResponseAsync(String policyAssignmentId)"
  name: "deleteByIdWithResponseAsync(String policyAssignmentId)"
  nameWithType: "PolicyAssignmentsClient.deleteByIdWithResponseAsync(String policyAssignmentId)"
  summary: "This operation deletes the policy with the given ID."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the policy assignment to delete. Use the format\n     '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'."
    name: "policyAssignmentId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract Mono<Response<PolicyAssignmentInner>> deleteByIdWithResponseAsync(String policyAssignmentId)"
  desc: "This operation deletes the policy with the given ID. Policy assignment IDs have this format: '\\{scope\\}/providers/Microsoft.Authorization/policyAssignments/\\{policyAssignmentName\\}'. Valid formats for \\{scope\\} are: '/providers/Microsoft.Management/managementGroups/\\{managementGroup\\}' (management group), '/subscriptions/\\{subscriptionId\\}' (subscription), '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}' (resource group), or '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}/providers/\\{resourceProviderNamespace\\}/\\[\\{parentResourcePath\\}/\\]\\{resourceType\\}/\\{resourceName\\}' (resource)."
  returns:
    description: "the policy assignment along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.deleteWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.deleteWithResponse(String scope, String policyAssignmentName, Context context)"
  name: "deleteWithResponse(String scope, String policyAssignmentName, Context context)"
  nameWithType: "PolicyAssignmentsClient.deleteWithResponse(String scope, String policyAssignmentName, Context context)"
  summary: "This operation deletes a policy assignment, given its name and the scope it was created in."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy assignment. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy assignment to delete."
    name: "policyAssignmentName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<PolicyAssignmentInner> deleteWithResponse(String scope, String policyAssignmentName, Context context)"
  desc: "This operation deletes a policy assignment, given its name and the scope it was created in. The scope of a policy assignment is the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/\\{policyAssignmentName\\}'."
  returns:
    description: "the policy assignment along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.deleteWithResponseAsync(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.deleteWithResponseAsync(String scope, String policyAssignmentName)"
  name: "deleteWithResponseAsync(String scope, String policyAssignmentName)"
  nameWithType: "PolicyAssignmentsClient.deleteWithResponseAsync(String scope, String policyAssignmentName)"
  summary: "This operation deletes a policy assignment, given its name and the scope it was created in."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy assignment. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy assignment to delete."
    name: "policyAssignmentName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract Mono<Response<PolicyAssignmentInner>> deleteWithResponseAsync(String scope, String policyAssignmentName)"
  desc: "This operation deletes a policy assignment, given its name and the scope it was created in. The scope of a policy assignment is the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/\\{policyAssignmentName\\}'."
  returns:
    description: "the policy assignment along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.get(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.get(String scope, String policyAssignmentName)"
  name: "get(String scope, String policyAssignmentName)"
  nameWithType: "PolicyAssignmentsClient.get(String scope, String policyAssignmentName)"
  summary: "This operation retrieves a single policy assignment, given its name and the scope it was created at."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy assignment. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy assignment to get."
    name: "policyAssignmentName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PolicyAssignmentInner get(String scope, String policyAssignmentName)"
  desc: "This operation retrieves a single policy assignment, given its name and the scope it was created at."
  returns:
    description: "the policy assignment."
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.getAsync(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.getAsync(String scope, String policyAssignmentName)"
  name: "getAsync(String scope, String policyAssignmentName)"
  nameWithType: "PolicyAssignmentsClient.getAsync(String scope, String policyAssignmentName)"
  summary: "This operation retrieves a single policy assignment, given its name and the scope it was created at."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy assignment. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy assignment to get."
    name: "policyAssignmentName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract Mono<PolicyAssignmentInner> getAsync(String scope, String policyAssignmentName)"
  desc: "This operation retrieves a single policy assignment, given its name and the scope it was created at."
  returns:
    description: "the policy assignment on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.getById(java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.getById(String policyAssignmentId)"
  name: "getById(String policyAssignmentId)"
  nameWithType: "PolicyAssignmentsClient.getById(String policyAssignmentId)"
  summary: "The operation retrieves the policy assignment with the given ID."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the policy assignment to get. Use the format\n     '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'."
    name: "policyAssignmentId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PolicyAssignmentInner getById(String policyAssignmentId)"
  desc: "The operation retrieves the policy assignment with the given ID. Policy assignment IDs have this format: '\\{scope\\}/providers/Microsoft.Authorization/policyAssignments/\\{policyAssignmentName\\}'. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/\\{managementGroup\\}'), subscription (format: '/subscriptions/\\{subscriptionId\\}'), resource group (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}', or resource (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}/providers/\\{resourceProviderNamespace\\}/\\[\\{parentResourcePath\\}/\\]\\{resourceType\\}/\\{resourceName\\}'."
  returns:
    description: "the policy assignment."
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.getByIdAsync(java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.getByIdAsync(String policyAssignmentId)"
  name: "getByIdAsync(String policyAssignmentId)"
  nameWithType: "PolicyAssignmentsClient.getByIdAsync(String policyAssignmentId)"
  summary: "The operation retrieves the policy assignment with the given ID."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the policy assignment to get. Use the format\n     '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'."
    name: "policyAssignmentId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract Mono<PolicyAssignmentInner> getByIdAsync(String policyAssignmentId)"
  desc: "The operation retrieves the policy assignment with the given ID. Policy assignment IDs have this format: '\\{scope\\}/providers/Microsoft.Authorization/policyAssignments/\\{policyAssignmentName\\}'. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/\\{managementGroup\\}'), subscription (format: '/subscriptions/\\{subscriptionId\\}'), resource group (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}', or resource (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}/providers/\\{resourceProviderNamespace\\}/\\[\\{parentResourcePath\\}/\\]\\{resourceType\\}/\\{resourceName\\}'."
  returns:
    description: "the policy assignment on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.getByIdWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.getByIdWithResponse(String policyAssignmentId, Context context)"
  name: "getByIdWithResponse(String policyAssignmentId, Context context)"
  nameWithType: "PolicyAssignmentsClient.getByIdWithResponse(String policyAssignmentId, Context context)"
  summary: "The operation retrieves the policy assignment with the given ID."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the policy assignment to get. Use the format\n     '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'."
    name: "policyAssignmentId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<PolicyAssignmentInner> getByIdWithResponse(String policyAssignmentId, Context context)"
  desc: "The operation retrieves the policy assignment with the given ID. Policy assignment IDs have this format: '\\{scope\\}/providers/Microsoft.Authorization/policyAssignments/\\{policyAssignmentName\\}'. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/\\{managementGroup\\}'), subscription (format: '/subscriptions/\\{subscriptionId\\}'), resource group (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}', or resource (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}/providers/\\{resourceProviderNamespace\\}/\\[\\{parentResourcePath\\}/\\]\\{resourceType\\}/\\{resourceName\\}'."
  returns:
    description: "the policy assignment along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.getByIdWithResponseAsync(java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.getByIdWithResponseAsync(String policyAssignmentId)"
  name: "getByIdWithResponseAsync(String policyAssignmentId)"
  nameWithType: "PolicyAssignmentsClient.getByIdWithResponseAsync(String policyAssignmentId)"
  summary: "The operation retrieves the policy assignment with the given ID."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the policy assignment to get. Use the format\n     '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'."
    name: "policyAssignmentId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract Mono<Response<PolicyAssignmentInner>> getByIdWithResponseAsync(String policyAssignmentId)"
  desc: "The operation retrieves the policy assignment with the given ID. Policy assignment IDs have this format: '\\{scope\\}/providers/Microsoft.Authorization/policyAssignments/\\{policyAssignmentName\\}'. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/\\{managementGroup\\}'), subscription (format: '/subscriptions/\\{subscriptionId\\}'), resource group (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}', or resource (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}/providers/\\{resourceProviderNamespace\\}/\\[\\{parentResourcePath\\}/\\]\\{resourceType\\}/\\{resourceName\\}'."
  returns:
    description: "the policy assignment along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.getWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.getWithResponse(String scope, String policyAssignmentName, Context context)"
  name: "getWithResponse(String scope, String policyAssignmentName, Context context)"
  nameWithType: "PolicyAssignmentsClient.getWithResponse(String scope, String policyAssignmentName, Context context)"
  summary: "This operation retrieves a single policy assignment, given its name and the scope it was created at."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy assignment. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy assignment to get."
    name: "policyAssignmentName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<PolicyAssignmentInner> getWithResponse(String scope, String policyAssignmentName, Context context)"
  desc: "This operation retrieves a single policy assignment, given its name and the scope it was created at."
  returns:
    description: "the policy assignment along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.getWithResponseAsync(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.getWithResponseAsync(String scope, String policyAssignmentName)"
  name: "getWithResponseAsync(String scope, String policyAssignmentName)"
  nameWithType: "PolicyAssignmentsClient.getWithResponseAsync(String scope, String policyAssignmentName)"
  summary: "This operation retrieves a single policy assignment, given its name and the scope it was created at."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy assignment. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy assignment to get."
    name: "policyAssignmentName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract Mono<Response<PolicyAssignmentInner>> getWithResponseAsync(String scope, String policyAssignmentName)"
  desc: "This operation retrieves a single policy assignment, given its name and the scope it was created at."
  returns:
    description: "the policy assignment along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.list()"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.list()"
  name: "list()"
  nameWithType: "PolicyAssignmentsClient.list()"
  summary: "This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  syntax: "public abstract PagedIterable<PolicyAssignmentInner> list()"
  desc: "This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the subscription, including those that apply directly or from management groups that contain the given subscription, as well as any applied to objects contained within the subscription. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the subscription, which is everything in the unfiltered list except those applied to objects contained within the subscription. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the subscription. If $filter=policyDefinitionId eq '\\{value\\}' is provided, the returned list includes all policy assignments of the policy definition whose id is \\{value\\}."
  returns:
    description: "list of policy assignments as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.list(java.lang.String,java.lang.Integer,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.list(String filter, Integer top, Context context)"
  name: "list(String filter, Integer top, Context context)"
  nameWithType: "PolicyAssignmentsClient.list(String filter, Integer top, Context context)"
  summary: "This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()'\n     or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If\n     $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the\n     scope, which is everything in the unfiltered list except those applied to sub scopes contained within the\n     given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments\n     that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes\n     all policy assignments of the policy definition whose id is {value}."
    name: "filter"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Maximum number of records to return. When the $top filter is not provided, it will return 500 records."
    name: "top"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<PolicyAssignmentInner> list(String filter, Integer top, Context context)"
  desc: "This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the subscription, including those that apply directly or from management groups that contain the given subscription, as well as any applied to objects contained within the subscription. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the subscription, which is everything in the unfiltered list except those applied to objects contained within the subscription. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the subscription. If $filter=policyDefinitionId eq '\\{value\\}' is provided, the returned list includes all policy assignments of the policy definition whose id is \\{value\\}."
  returns:
    description: "list of policy assignments as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listAsync()"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listAsync()"
  name: "listAsync()"
  nameWithType: "PolicyAssignmentsClient.listAsync()"
  summary: "This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  syntax: "public abstract PagedFlux<PolicyAssignmentInner> listAsync()"
  desc: "This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the subscription, including those that apply directly or from management groups that contain the given subscription, as well as any applied to objects contained within the subscription. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the subscription, which is everything in the unfiltered list except those applied to objects contained within the subscription. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the subscription. If $filter=policyDefinitionId eq '\\{value\\}' is provided, the returned list includes all policy assignments of the policy definition whose id is \\{value\\}."
  returns:
    description: "list of policy assignments as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listAsync(java.lang.String,java.lang.Integer)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listAsync(String filter, Integer top)"
  name: "listAsync(String filter, Integer top)"
  nameWithType: "PolicyAssignmentsClient.listAsync(String filter, Integer top)"
  summary: "This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()'\n     or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If\n     $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the\n     scope, which is everything in the unfiltered list except those applied to sub scopes contained within the\n     given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments\n     that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes\n     all policy assignments of the policy definition whose id is {value}."
    name: "filter"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Maximum number of records to return. When the $top filter is not provided, it will return 500 records."
    name: "top"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  syntax: "public abstract PagedFlux<PolicyAssignmentInner> listAsync(String filter, Integer top)"
  desc: "This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the subscription, including those that apply directly or from management groups that contain the given subscription, as well as any applied to objects contained within the subscription. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the subscription, which is everything in the unfiltered list except those applied to objects contained within the subscription. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the subscription. If $filter=policyDefinitionId eq '\\{value\\}' is provided, the returned list includes all policy assignments of the policy definition whose id is \\{value\\}."
  returns:
    description: "list of policy assignments as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listByResourceGroup(java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listByResourceGroup(String resourceGroupName)"
  name: "listByResourceGroup(String resourceGroupName)"
  nameWithType: "PolicyAssignmentsClient.listByResourceGroup(String resourceGroupName)"
  summary: "This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the resource group that contains policy assignments."
    name: "resourceGroupName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PagedIterable<PolicyAssignmentInner> listByResourceGroup(String resourceGroupName)"
  desc: "This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource group, which is everything in the unfiltered list except those applied to resources contained within the resource group. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource group. If $filter=policyDefinitionId eq '\\{value\\}' is provided, the returned list includes all policy assignments of the policy definition whose id is \\{value\\} that apply to the resource group."
  returns:
    description: "list of policy assignments as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listByResourceGroup(java.lang.String,java.lang.String,java.lang.Integer,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listByResourceGroup(String resourceGroupName, String filter, Integer top, Context context)"
  name: "listByResourceGroup(String resourceGroupName, String filter, Integer top, Context context)"
  nameWithType: "PolicyAssignmentsClient.listByResourceGroup(String resourceGroupName, String filter, Integer top, Context context)"
  summary: "This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the resource group that contains policy assignments."
    name: "resourceGroupName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()'\n     or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If\n     $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the\n     scope, which is everything in the unfiltered list except those applied to sub scopes contained within the\n     given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments\n     that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes\n     all policy assignments of the policy definition whose id is {value}."
    name: "filter"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Maximum number of records to return. When the $top filter is not provided, it will return 500 records."
    name: "top"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<PolicyAssignmentInner> listByResourceGroup(String resourceGroupName, String filter, Integer top, Context context)"
  desc: "This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource group, which is everything in the unfiltered list except those applied to resources contained within the resource group. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource group. If $filter=policyDefinitionId eq '\\{value\\}' is provided, the returned list includes all policy assignments of the policy definition whose id is \\{value\\} that apply to the resource group."
  returns:
    description: "list of policy assignments as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listByResourceGroupAsync(java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listByResourceGroupAsync(String resourceGroupName)"
  name: "listByResourceGroupAsync(String resourceGroupName)"
  nameWithType: "PolicyAssignmentsClient.listByResourceGroupAsync(String resourceGroupName)"
  summary: "This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the resource group that contains policy assignments."
    name: "resourceGroupName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PagedFlux<PolicyAssignmentInner> listByResourceGroupAsync(String resourceGroupName)"
  desc: "This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource group, which is everything in the unfiltered list except those applied to resources contained within the resource group. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource group. If $filter=policyDefinitionId eq '\\{value\\}' is provided, the returned list includes all policy assignments of the policy definition whose id is \\{value\\} that apply to the resource group."
  returns:
    description: "list of policy assignments as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listByResourceGroupAsync(java.lang.String,java.lang.String,java.lang.Integer)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listByResourceGroupAsync(String resourceGroupName, String filter, Integer top)"
  name: "listByResourceGroupAsync(String resourceGroupName, String filter, Integer top)"
  nameWithType: "PolicyAssignmentsClient.listByResourceGroupAsync(String resourceGroupName, String filter, Integer top)"
  summary: "This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the resource group that contains policy assignments."
    name: "resourceGroupName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()'\n     or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If\n     $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the\n     scope, which is everything in the unfiltered list except those applied to sub scopes contained within the\n     given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments\n     that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes\n     all policy assignments of the policy definition whose id is {value}."
    name: "filter"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Maximum number of records to return. When the $top filter is not provided, it will return 500 records."
    name: "top"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  syntax: "public abstract PagedFlux<PolicyAssignmentInner> listByResourceGroupAsync(String resourceGroupName, String filter, Integer top)"
  desc: "This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource group, which is everything in the unfiltered list except those applied to resources contained within the resource group. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource group. If $filter=policyDefinitionId eq '\\{value\\}' is provided, the returned list includes all policy assignments of the policy definition whose id is \\{value\\} that apply to the resource group."
  returns:
    description: "list of policy assignments as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listForManagementGroup(java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listForManagementGroup(String managementGroupId)"
  name: "listForManagementGroup(String managementGroupId)"
  nameWithType: "PolicyAssignmentsClient.listForManagementGroup(String managementGroupId)"
  summary: "This operation retrieves the list of all policy assignments applicable to the management group that match the given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the management group."
    name: "managementGroupId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PagedIterable<PolicyAssignmentInner> listForManagementGroup(String managementGroupId)"
  desc: "This operation retrieves the list of all policy assignments applicable to the management group that match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '\\{value\\}''. If $filter=atScope() is provided, the returned list includes all policy assignments that are assigned to the management group or the management group's ancestors. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the management group. If $filter=policyDefinitionId eq '\\{value\\}' is provided, the returned list includes all policy assignments of the policy definition whose id is \\{value\\} that apply to the management group."
  returns:
    description: "list of policy assignments as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listForManagementGroup(java.lang.String,java.lang.String,java.lang.Integer,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listForManagementGroup(String managementGroupId, String filter, Integer top, Context context)"
  name: "listForManagementGroup(String managementGroupId, String filter, Integer top, Context context)"
  nameWithType: "PolicyAssignmentsClient.listForManagementGroup(String managementGroupId, String filter, Integer top, Context context)"
  summary: "This operation retrieves the list of all policy assignments applicable to the management group that match the given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the management group."
    name: "managementGroupId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()'\n     or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If\n     $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the\n     scope, which is everything in the unfiltered list except those applied to sub scopes contained within the\n     given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments\n     that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes\n     all policy assignments of the policy definition whose id is {value}."
    name: "filter"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Maximum number of records to return. When the $top filter is not provided, it will return 500 records."
    name: "top"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<PolicyAssignmentInner> listForManagementGroup(String managementGroupId, String filter, Integer top, Context context)"
  desc: "This operation retrieves the list of all policy assignments applicable to the management group that match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '\\{value\\}''. If $filter=atScope() is provided, the returned list includes all policy assignments that are assigned to the management group or the management group's ancestors. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the management group. If $filter=policyDefinitionId eq '\\{value\\}' is provided, the returned list includes all policy assignments of the policy definition whose id is \\{value\\} that apply to the management group."
  returns:
    description: "list of policy assignments as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listForManagementGroupAsync(java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listForManagementGroupAsync(String managementGroupId)"
  name: "listForManagementGroupAsync(String managementGroupId)"
  nameWithType: "PolicyAssignmentsClient.listForManagementGroupAsync(String managementGroupId)"
  summary: "This operation retrieves the list of all policy assignments applicable to the management group that match the given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the management group."
    name: "managementGroupId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PagedFlux<PolicyAssignmentInner> listForManagementGroupAsync(String managementGroupId)"
  desc: "This operation retrieves the list of all policy assignments applicable to the management group that match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '\\{value\\}''. If $filter=atScope() is provided, the returned list includes all policy assignments that are assigned to the management group or the management group's ancestors. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the management group. If $filter=policyDefinitionId eq '\\{value\\}' is provided, the returned list includes all policy assignments of the policy definition whose id is \\{value\\} that apply to the management group."
  returns:
    description: "list of policy assignments as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listForManagementGroupAsync(java.lang.String,java.lang.String,java.lang.Integer)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listForManagementGroupAsync(String managementGroupId, String filter, Integer top)"
  name: "listForManagementGroupAsync(String managementGroupId, String filter, Integer top)"
  nameWithType: "PolicyAssignmentsClient.listForManagementGroupAsync(String managementGroupId, String filter, Integer top)"
  summary: "This operation retrieves the list of all policy assignments applicable to the management group that match the given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the management group."
    name: "managementGroupId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()'\n     or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If\n     $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the\n     scope, which is everything in the unfiltered list except those applied to sub scopes contained within the\n     given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments\n     that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes\n     all policy assignments of the policy definition whose id is {value}."
    name: "filter"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Maximum number of records to return. When the $top filter is not provided, it will return 500 records."
    name: "top"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  syntax: "public abstract PagedFlux<PolicyAssignmentInner> listForManagementGroupAsync(String managementGroupId, String filter, Integer top)"
  desc: "This operation retrieves the list of all policy assignments applicable to the management group that match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '\\{value\\}''. If $filter=atScope() is provided, the returned list includes all policy assignments that are assigned to the management group or the management group's ancestors. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the management group. If $filter=policyDefinitionId eq '\\{value\\}' is provided, the returned list includes all policy assignments of the policy definition whose id is \\{value\\} that apply to the management group."
  returns:
    description: "list of policy assignments as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listForResource(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName)"
  name: "listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName)"
  nameWithType: "PolicyAssignmentsClient.listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName)"
  summary: "This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the resource group containing the resource."
    name: "resourceGroupName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The namespace of the resource provider. For example, the namespace of a virtual\n     machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)."
    name: "resourceProviderNamespace"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The parent resource path. Use empty string if there is none."
    name: "parentResourcePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The resource type name. For example the type name of a web app is 'sites' (from\n     Microsoft.Web/sites)."
    name: "resourceType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the resource."
    name: "resourceName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PagedIterable<PolicyAssignmentInner> listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName)"
  desc: "This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource, which is everything in the unfiltered list except those applied to resources contained within the resource. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource level. If $filter=policyDefinitionId eq '\\{value\\}' is provided, the returned list includes all policy assignments of the policy definition whose id is \\{value\\} that apply to the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as ''). For example a web app could be specified as (\\{resourceProviderNamespace\\} == 'Microsoft.Web', \\{parentResourcePath\\} == '', \\{resourceType\\} == 'sites', \\{resourceName\\} == 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as (\\{resourceProviderNamespace\\} == 'Microsoft.Compute', \\{parentResourcePath\\} == 'virtualMachines/MyVirtualMachine', \\{resourceType\\} == 'domainNames', \\{resourceName\\} == 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is to provide both in the \\{resourceType\\} parameter, format: (\\{resourceProviderNamespace\\} == '', \\{parentResourcePath\\} == '', \\{resourceType\\} == 'Microsoft.Web/sites', \\{resourceName\\} == 'MyWebApp')."
  returns:
    description: "list of policy assignments as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listForResource(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String filter, Integer top, Context context)"
  name: "listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String filter, Integer top, Context context)"
  nameWithType: "PolicyAssignmentsClient.listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String filter, Integer top, Context context)"
  summary: "This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the resource group containing the resource."
    name: "resourceGroupName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The namespace of the resource provider. For example, the namespace of a virtual\n     machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)."
    name: "resourceProviderNamespace"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The parent resource path. Use empty string if there is none."
    name: "parentResourcePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The resource type name. For example the type name of a web app is 'sites' (from\n     Microsoft.Web/sites)."
    name: "resourceType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the resource."
    name: "resourceName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()'\n     or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If\n     $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the\n     scope, which is everything in the unfiltered list except those applied to sub scopes contained within the\n     given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments\n     that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes\n     all policy assignments of the policy definition whose id is {value}."
    name: "filter"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Maximum number of records to return. When the $top filter is not provided, it will return 500 records."
    name: "top"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<PolicyAssignmentInner> listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String filter, Integer top, Context context)"
  desc: "This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource, which is everything in the unfiltered list except those applied to resources contained within the resource. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource level. If $filter=policyDefinitionId eq '\\{value\\}' is provided, the returned list includes all policy assignments of the policy definition whose id is \\{value\\} that apply to the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as ''). For example a web app could be specified as (\\{resourceProviderNamespace\\} == 'Microsoft.Web', \\{parentResourcePath\\} == '', \\{resourceType\\} == 'sites', \\{resourceName\\} == 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as (\\{resourceProviderNamespace\\} == 'Microsoft.Compute', \\{parentResourcePath\\} == 'virtualMachines/MyVirtualMachine', \\{resourceType\\} == 'domainNames', \\{resourceName\\} == 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is to provide both in the \\{resourceType\\} parameter, format: (\\{resourceProviderNamespace\\} == '', \\{parentResourcePath\\} == '', \\{resourceType\\} == 'Microsoft.Web/sites', \\{resourceName\\} == 'MyWebApp')."
  returns:
    description: "list of policy assignments as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listForResourceAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listForResourceAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName)"
  name: "listForResourceAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName)"
  nameWithType: "PolicyAssignmentsClient.listForResourceAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName)"
  summary: "This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the resource group containing the resource."
    name: "resourceGroupName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The namespace of the resource provider. For example, the namespace of a virtual\n     machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)."
    name: "resourceProviderNamespace"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The parent resource path. Use empty string if there is none."
    name: "parentResourcePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The resource type name. For example the type name of a web app is 'sites' (from\n     Microsoft.Web/sites)."
    name: "resourceType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the resource."
    name: "resourceName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PagedFlux<PolicyAssignmentInner> listForResourceAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName)"
  desc: "This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource, which is everything in the unfiltered list except those applied to resources contained within the resource. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource level. If $filter=policyDefinitionId eq '\\{value\\}' is provided, the returned list includes all policy assignments of the policy definition whose id is \\{value\\} that apply to the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as ''). For example a web app could be specified as (\\{resourceProviderNamespace\\} == 'Microsoft.Web', \\{parentResourcePath\\} == '', \\{resourceType\\} == 'sites', \\{resourceName\\} == 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as (\\{resourceProviderNamespace\\} == 'Microsoft.Compute', \\{parentResourcePath\\} == 'virtualMachines/MyVirtualMachine', \\{resourceType\\} == 'domainNames', \\{resourceName\\} == 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is to provide both in the \\{resourceType\\} parameter, format: (\\{resourceProviderNamespace\\} == '', \\{parentResourcePath\\} == '', \\{resourceType\\} == 'Microsoft.Web/sites', \\{resourceName\\} == 'MyWebApp')."
  returns:
    description: "list of policy assignments as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listForResourceAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.listForResourceAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String filter, Integer top)"
  name: "listForResourceAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String filter, Integer top)"
  nameWithType: "PolicyAssignmentsClient.listForResourceAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String filter, Integer top)"
  summary: "This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the resource group containing the resource."
    name: "resourceGroupName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The namespace of the resource provider. For example, the namespace of a virtual\n     machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)."
    name: "resourceProviderNamespace"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The parent resource path. Use empty string if there is none."
    name: "parentResourcePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The resource type name. For example the type name of a web app is 'sites' (from\n     Microsoft.Web/sites)."
    name: "resourceType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the resource."
    name: "resourceName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()'\n     or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If\n     $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the\n     scope, which is everything in the unfiltered list except those applied to sub scopes contained within the\n     given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments\n     that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes\n     all policy assignments of the policy definition whose id is {value}."
    name: "filter"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Maximum number of records to return. When the $top filter is not provided, it will return 500 records."
    name: "top"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  syntax: "public abstract PagedFlux<PolicyAssignmentInner> listForResourceAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String filter, Integer top)"
  desc: "This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource, which is everything in the unfiltered list except those applied to resources contained within the resource. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource level. If $filter=policyDefinitionId eq '\\{value\\}' is provided, the returned list includes all policy assignments of the policy definition whose id is \\{value\\} that apply to the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as ''). For example a web app could be specified as (\\{resourceProviderNamespace\\} == 'Microsoft.Web', \\{parentResourcePath\\} == '', \\{resourceType\\} == 'sites', \\{resourceName\\} == 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as (\\{resourceProviderNamespace\\} == 'Microsoft.Compute', \\{parentResourcePath\\} == 'virtualMachines/MyVirtualMachine', \\{resourceType\\} == 'domainNames', \\{resourceName\\} == 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is to provide both in the \\{resourceType\\} parameter, format: (\\{resourceProviderNamespace\\} == '', \\{parentResourcePath\\} == '', \\{resourceType\\} == 'Microsoft.Web/sites', \\{resourceName\\} == 'MyWebApp')."
  returns:
    description: "list of policy assignments as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.update(java.lang.String,java.lang.String,com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.update(String scope, String policyAssignmentName, PolicyAssignmentUpdate parameters)"
  name: "update(String scope, String policyAssignmentName, PolicyAssignmentUpdate parameters)"
  nameWithType: "PolicyAssignmentsClient.update(String scope, String policyAssignmentName, PolicyAssignmentUpdate parameters)"
  summary: "This operation updates a policy assignment with the given scope and name."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy assignment. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy assignment."
    name: "policyAssignmentName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameters for policy assignment patch request."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate?alt=com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate&text=PolicyAssignmentUpdate\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PolicyAssignmentInner update(String scope, String policyAssignmentName, PolicyAssignmentUpdate parameters)"
  desc: "This operation updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group."
  returns:
    description: "the policy assignment."
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.updateAsync(java.lang.String,java.lang.String,com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.updateAsync(String scope, String policyAssignmentName, PolicyAssignmentUpdate parameters)"
  name: "updateAsync(String scope, String policyAssignmentName, PolicyAssignmentUpdate parameters)"
  nameWithType: "PolicyAssignmentsClient.updateAsync(String scope, String policyAssignmentName, PolicyAssignmentUpdate parameters)"
  summary: "This operation updates a policy assignment with the given scope and name."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy assignment. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy assignment."
    name: "policyAssignmentName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameters for policy assignment patch request."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate?alt=com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate&text=PolicyAssignmentUpdate\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Mono<PolicyAssignmentInner> updateAsync(String scope, String policyAssignmentName, PolicyAssignmentUpdate parameters)"
  desc: "This operation updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group."
  returns:
    description: "the policy assignment on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.updateById(java.lang.String,com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.updateById(String policyAssignmentId, PolicyAssignmentUpdate parameters)"
  name: "updateById(String policyAssignmentId, PolicyAssignmentUpdate parameters)"
  nameWithType: "PolicyAssignmentsClient.updateById(String policyAssignmentId, PolicyAssignmentUpdate parameters)"
  summary: "This operation updates the policy assignment with the given ID."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the policy assignment to update. Use the format\n     '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'."
    name: "policyAssignmentId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameters for policy assignment patch request."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate?alt=com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate&text=PolicyAssignmentUpdate\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PolicyAssignmentInner updateById(String policyAssignmentId, PolicyAssignmentUpdate parameters)"
  desc: "This operation updates the policy assignment with the given ID. Policy assignments made on a scope apply to all resources contained in that scope. For example, when you assign a policy to a resource group that policy applies to all resources in the group. Policy assignment IDs have this format: '\\{scope\\}/providers/Microsoft.Authorization/policyAssignments/\\{policyAssignmentName\\}'. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/\\{managementGroup\\}'), subscription (format: '/subscriptions/\\{subscriptionId\\}'), resource group (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}', or resource (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}/providers/\\{resourceProviderNamespace\\}/\\[\\{parentResourcePath\\}/\\]\\{resourceType\\}/\\{resourceName\\}'."
  returns:
    description: "the policy assignment."
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.updateByIdAsync(java.lang.String,com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.updateByIdAsync(String policyAssignmentId, PolicyAssignmentUpdate parameters)"
  name: "updateByIdAsync(String policyAssignmentId, PolicyAssignmentUpdate parameters)"
  nameWithType: "PolicyAssignmentsClient.updateByIdAsync(String policyAssignmentId, PolicyAssignmentUpdate parameters)"
  summary: "This operation updates the policy assignment with the given ID."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the policy assignment to update. Use the format\n     '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'."
    name: "policyAssignmentId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameters for policy assignment patch request."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate?alt=com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate&text=PolicyAssignmentUpdate\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Mono<PolicyAssignmentInner> updateByIdAsync(String policyAssignmentId, PolicyAssignmentUpdate parameters)"
  desc: "This operation updates the policy assignment with the given ID. Policy assignments made on a scope apply to all resources contained in that scope. For example, when you assign a policy to a resource group that policy applies to all resources in the group. Policy assignment IDs have this format: '\\{scope\\}/providers/Microsoft.Authorization/policyAssignments/\\{policyAssignmentName\\}'. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/\\{managementGroup\\}'), subscription (format: '/subscriptions/\\{subscriptionId\\}'), resource group (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}', or resource (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}/providers/\\{resourceProviderNamespace\\}/\\[\\{parentResourcePath\\}/\\]\\{resourceType\\}/\\{resourceName\\}'."
  returns:
    description: "the policy assignment on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.updateByIdWithResponse(java.lang.String,com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.updateByIdWithResponse(String policyAssignmentId, PolicyAssignmentUpdate parameters, Context context)"
  name: "updateByIdWithResponse(String policyAssignmentId, PolicyAssignmentUpdate parameters, Context context)"
  nameWithType: "PolicyAssignmentsClient.updateByIdWithResponse(String policyAssignmentId, PolicyAssignmentUpdate parameters, Context context)"
  summary: "This operation updates the policy assignment with the given ID."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the policy assignment to update. Use the format\n     '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'."
    name: "policyAssignmentId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameters for policy assignment patch request."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate?alt=com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate&text=PolicyAssignmentUpdate\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<PolicyAssignmentInner> updateByIdWithResponse(String policyAssignmentId, PolicyAssignmentUpdate parameters, Context context)"
  desc: "This operation updates the policy assignment with the given ID. Policy assignments made on a scope apply to all resources contained in that scope. For example, when you assign a policy to a resource group that policy applies to all resources in the group. Policy assignment IDs have this format: '\\{scope\\}/providers/Microsoft.Authorization/policyAssignments/\\{policyAssignmentName\\}'. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/\\{managementGroup\\}'), subscription (format: '/subscriptions/\\{subscriptionId\\}'), resource group (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}', or resource (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}/providers/\\{resourceProviderNamespace\\}/\\[\\{parentResourcePath\\}/\\]\\{resourceType\\}/\\{resourceName\\}'."
  returns:
    description: "the policy assignment along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.updateByIdWithResponseAsync(java.lang.String,com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.updateByIdWithResponseAsync(String policyAssignmentId, PolicyAssignmentUpdate parameters)"
  name: "updateByIdWithResponseAsync(String policyAssignmentId, PolicyAssignmentUpdate parameters)"
  nameWithType: "PolicyAssignmentsClient.updateByIdWithResponseAsync(String policyAssignmentId, PolicyAssignmentUpdate parameters)"
  summary: "This operation updates the policy assignment with the given ID."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the policy assignment to update. Use the format\n     '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'."
    name: "policyAssignmentId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameters for policy assignment patch request."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate?alt=com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate&text=PolicyAssignmentUpdate\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Mono<Response<PolicyAssignmentInner>> updateByIdWithResponseAsync(String policyAssignmentId, PolicyAssignmentUpdate parameters)"
  desc: "This operation updates the policy assignment with the given ID. Policy assignments made on a scope apply to all resources contained in that scope. For example, when you assign a policy to a resource group that policy applies to all resources in the group. Policy assignment IDs have this format: '\\{scope\\}/providers/Microsoft.Authorization/policyAssignments/\\{policyAssignmentName\\}'. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/\\{managementGroup\\}'), subscription (format: '/subscriptions/\\{subscriptionId\\}'), resource group (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}', or resource (format: '/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}/providers/\\{resourceProviderNamespace\\}/\\[\\{parentResourcePath\\}/\\]\\{resourceType\\}/\\{resourceName\\}'."
  returns:
    description: "the policy assignment along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.updateWithResponse(java.lang.String,java.lang.String,com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.updateWithResponse(String scope, String policyAssignmentName, PolicyAssignmentUpdate parameters, Context context)"
  name: "updateWithResponse(String scope, String policyAssignmentName, PolicyAssignmentUpdate parameters, Context context)"
  nameWithType: "PolicyAssignmentsClient.updateWithResponse(String scope, String policyAssignmentName, PolicyAssignmentUpdate parameters, Context context)"
  summary: "This operation updates a policy assignment with the given scope and name."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy assignment. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy assignment."
    name: "policyAssignmentName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameters for policy assignment patch request."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate?alt=com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate&text=PolicyAssignmentUpdate\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<PolicyAssignmentInner> updateWithResponse(String scope, String policyAssignmentName, PolicyAssignmentUpdate parameters, Context context)"
  desc: "This operation updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group."
  returns:
    description: "the policy assignment along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.updateWithResponseAsync(java.lang.String,java.lang.String,com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyAssignmentsClient.updateWithResponseAsync(String scope, String policyAssignmentName, PolicyAssignmentUpdate parameters)"
  name: "updateWithResponseAsync(String scope, String policyAssignmentName, PolicyAssignmentUpdate parameters)"
  nameWithType: "PolicyAssignmentsClient.updateWithResponseAsync(String scope, String policyAssignmentName, PolicyAssignmentUpdate parameters)"
  summary: "This operation updates a policy assignment with the given scope and name."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy assignment. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy assignment."
    name: "policyAssignmentName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameters for policy assignment patch request."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate?alt=com.azure.resourcemanager.resources.models.PolicyAssignmentUpdate&text=PolicyAssignmentUpdate\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Mono<Response<PolicyAssignmentInner>> updateWithResponseAsync(String scope, String policyAssignmentName, PolicyAssignmentUpdate parameters)"
  desc: "This operation updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group."
  returns:
    description: "the policy assignment along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "interface"
desc: "An instance of this class provides access to all the operations defined in PolicyAssignmentsClient."
implements:
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.collection.InnerSupportsDelete?alt=com.azure.resourcemanager.resources.fluentcore.collection.InnerSupportsDelete&text=InnerSupportsDelete\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.collection.InnerSupportsListing?alt=com.azure.resourcemanager.resources.fluentcore.collection.InnerSupportsListing&text=InnerSupportsListing\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyAssignmentInner&text=PolicyAssignmentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.resourcemanager.resources.fluent"
artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.19.0
