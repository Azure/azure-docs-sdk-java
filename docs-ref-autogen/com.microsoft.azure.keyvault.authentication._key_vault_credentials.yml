items:
- uid: com.microsoft.azure.keyvault.authentication._key_vault_credentials
  id: _key_vault_credentials
  parent: com.microsoft.azure.keyvault.authentication
  children:
  - com.microsoft.azure.keyvault.authentication._key_vault_credentials.applyCredentialsFilter(OkHttpClient.Builder)
  - com.microsoft.azure.keyvault.authentication._key_vault_credentials.doAuthenticate(String,String,String)
  href: com.microsoft.azure.keyvault.authentication._key_vault_credentials.yml
  langs:
  - java
  name: KeyVaultCredentials
  nameWithType: KeyVaultCredentials
  fullName: com.microsoft.azure.keyvault.authentication.KeyVaultCredentials
  type: Class
  source:
    remote: &o0
      path: azure-keyvault/src/main/java/com/microsoft/azure/keyvault/authentication/KeyVaultCredentials.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java
    path: azure-keyvault/src/main/java/com/microsoft/azure/keyvault/authentication/KeyVaultCredentials.java
    startLine: 26
  package: com.microsoft.azure.keyvault.authentication
  summary: <p>An implementation of <ref refid="" kindref="compound">ServiceClientCredentials</ref> that supports automatic bearer token refresh. </p>
  syntax:
    content: public class KeyVaultCredentials
  inheritance:
  - java.lang.Object
  - ServiceClientCredentials
- uid: com.microsoft.azure.keyvault.authentication._key_vault_credentials.applyCredentialsFilter(OkHttpClient.Builder)
  id: Builder)
  parent: com.microsoft.azure.keyvault.authentication._key_vault_credentials
  href: com.microsoft.azure.keyvault.authentication._key_vault_credentials.yml
  langs:
  - java
  name: applyCredentialsFilter(OkHttpClient.Builder clientBuilder)
  nameWithType: KeyVaultCredentials.applyCredentialsFilter(OkHttpClient.Builder clientBuilder)
  fullName: void com.microsoft.azure.keyvault.authentication.KeyVaultCredentials.applyCredentialsFilter(OkHttpClient.Builder clientBuilder)
  overload: com.microsoft.azure.keyvault.authentication._key_vault_credentials.applyCredentialsFilter*
  type: Method
  source:
    remote: *o0
    path: azure-keyvault/src/main/java/com/microsoft/azure/keyvault/authentication/KeyVaultCredentials.java
    startLine: 35
  package: com.microsoft.azure.keyvault.authentication
  syntax:
    content: public void applyCredentialsFilter(OkHttpClient.Builder clientBuilder)
    parameters:
    - id: clientBuilder
      type: 2c0be77c
- uid: com.microsoft.azure.keyvault.authentication._key_vault_credentials.doAuthenticate(String,String,String)
  id: doAuthenticate(String,String,String)
  parent: com.microsoft.azure.keyvault.authentication._key_vault_credentials
  href: com.microsoft.azure.keyvault.authentication._key_vault_credentials.yml
  langs:
  - java
  name: doAuthenticate(String authorization, String resource, String scope)
  nameWithType: KeyVaultCredentials.doAuthenticate(String authorization, String resource, String scope)
  fullName: abstract String com.microsoft.azure.keyvault.authentication.KeyVaultCredentials.doAuthenticate(String authorization, String resource, String scope)
  overload: com.microsoft.azure.keyvault.authentication._key_vault_credentials.doAuthenticate*
  type: Method
  source:
    remote: *o0
    path: azure-keyvault/src/main/java/com/microsoft/azure/keyvault/authentication/KeyVaultCredentials.java
    startLine: 215
  package: com.microsoft.azure.keyvault.authentication
  summary: >-
    <p>Abstract method to be implemented.</p>

    <p>

    private static AuthenticationResult getAccessTokenFromClientCredentials(String authorization, String resource, String clientId, String clientKey) { AuthenticationContext context = null; AuthenticationResult result = null; ExecutorService service = null; try { service = Executors.newFixedThreadPool(1); context = new AuthenticationContext(authorization, false, service); ClientCredential credentials = new ClientCredential(clientId, clientKey); Future&lt;AuthenticationResult&gt; future = context.acquireToken(resource, credentials, null); result = future.get(); } catch (Exception e) { throw new RuntimeException(e); } finally { service.shutdown(); }</p>

    <p>if (result == null) { throw new RuntimeException("authentication result was null"); } return result; } </p>

    <p>

      <bold>Note: The client key must be securely stored. It's advised to use two client applications - one for development and other for production - managed by separate parties.</bold>

    </p>
  syntax: &o1
    content: public abstract String doAuthenticate(String authorization, String resource, String scope)
    parameters:
    - id: authorization
      type: "26831127"
      description: <p>Identifier of the authority, a URL. </p>
    - id: resource
      type: "26831127"
      description: <p>Identifier of the target resource that is the recipient of the requested token, a URL. </p>
    - id: scope
      type: "26831127"
      description: <p>The scope of the authentication request.</p>
    return:
      type: 9065866d
      description: >-
        <p>The access token <verbatim>    Answers a server challenge with a token header.

            &lt;p&gt;

            Implementations typically use ADAL to get a token, as performed

            in the sample below:

            &lt;/p&gt;



            &lt;pre&gt;

        </verbatim> &amp;#064;Override public String <xref href="com.microsoft.azure.keyvault.authentication._key_vault_credentials.doAuthenticate(String,String,String)" data-throw-if-not-resolved="false"></xref> { String clientId = ...; // client GUID as shown in Azure portal. String clientKey = ...; // client key as provided by Azure portal. AuthenticationResult token = getAccessTokenFromClientCredentials(authorization, resource, clientId, clientKey); return token.getAccessToken();; }</p>
references:
- uid: 2c0be77c
  spec.java:
  - name: OkHttpClient.Builder
    fullName: OkHttpClient.Builder
- uid: com.microsoft.azure.keyvault.authentication._key_vault_credentials.applyCredentialsFilter*
  name: applyCredentialsFilter
  nameWithType: KeyVaultCredentials.applyCredentialsFilter
  fullName: void com.microsoft.azure.keyvault.authentication.KeyVaultCredentials.applyCredentialsFilter
  package: com.microsoft.azure.keyvault.authentication
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: 9065866d
  spec.java:
  - name: abstract String
    fullName: abstract String
- uid: com.microsoft.azure.keyvault.authentication._key_vault_credentials.doAuthenticate*
  name: doAuthenticate
  nameWithType: KeyVaultCredentials.doAuthenticate
  fullName: abstract String com.microsoft.azure.keyvault.authentication.KeyVaultCredentials.doAuthenticate
  package: com.microsoft.azure.keyvault.authentication
- uid: com.microsoft.azure.keyvault.authentication._key_vault_credentials.doAuthenticate(String,String,String)
  parent: com.microsoft.azure.keyvault.authentication._key_vault_credentials
  href: com.microsoft.azure.keyvault.authentication._key_vault_credentials.yml
  name: doAuthenticate(String authorization, String resource, String scope)
  nameWithType: KeyVaultCredentials.doAuthenticate(String authorization, String resource, String scope)
  fullName: abstract String com.microsoft.azure.keyvault.authentication.KeyVaultCredentials.doAuthenticate(String authorization, String resource, String scope)
  type: Method
  summary: >-
    <p>Abstract method to be implemented.</p>

    <p>

    private static AuthenticationResult getAccessTokenFromClientCredentials(String authorization, String resource, String clientId, String clientKey) { AuthenticationContext context = null; AuthenticationResult result = null; ExecutorService service = null; try { service = Executors.newFixedThreadPool(1); context = new AuthenticationContext(authorization, false, service); ClientCredential credentials = new ClientCredential(clientId, clientKey); Future&lt;AuthenticationResult&gt; future = context.acquireToken(resource, credentials, null); result = future.get(); } catch (Exception e) { throw new RuntimeException(e); } finally { service.shutdown(); }</p>

    <p>if (result == null) { throw new RuntimeException("authentication result was null"); } return result; } </p>

    <p>

      <bold>Note: The client key must be securely stored. It's advised to use two client applications - one for development and other for production - managed by separate parties.</bold>

    </p>
  syntax: *o1
