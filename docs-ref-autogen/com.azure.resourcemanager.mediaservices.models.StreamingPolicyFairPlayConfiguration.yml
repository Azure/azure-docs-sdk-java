### YamlMime:JavaType
uid: "com.azure.resourcemanager.mediaservices.models.StreamingPolicyFairPlayConfiguration"
fullName: "com.azure.resourcemanager.mediaservices.models.StreamingPolicyFairPlayConfiguration"
name: "StreamingPolicyFairPlayConfiguration"
nameWithType: "StreamingPolicyFairPlayConfiguration"
summary: "Class to specify configurations of Fair<wbr>Play in Streaming Policy."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"java.lang.Object.clone()?alt=java.lang.Object.clone&text=clone\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.equals(java.lang.Object)?alt=java.lang.Object.equals&text=equals\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.finalize()?alt=java.lang.Object.finalize&text=finalize\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.getClass()?alt=java.lang.Object.getClass&text=getClass\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.hashCode()?alt=java.lang.Object.hashCode&text=hashCode\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.notify()?alt=java.lang.Object.notify&text=notify\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.notifyAll()?alt=java.lang.Object.notifyAll&text=notifyAll\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.toString()?alt=java.lang.Object.toString&text=toString\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait()?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait(long)?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait(long,int)?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
syntax: "public final class **StreamingPolicyFairPlayConfiguration**"
constructors:
- uid: "com.azure.resourcemanager.mediaservices.models.StreamingPolicyFairPlayConfiguration.StreamingPolicyFairPlayConfiguration()"
  fullName: "com.azure.resourcemanager.mediaservices.models.StreamingPolicyFairPlayConfiguration.StreamingPolicyFairPlayConfiguration()"
  name: "StreamingPolicyFairPlayConfiguration()"
  nameWithType: "StreamingPolicyFairPlayConfiguration.StreamingPolicyFairPlayConfiguration()"
  summary: "Creates an instance of Streaming<wbr>Policy<wbr>Fair<wbr>Play<wbr>Configuration class."
  syntax: "public StreamingPolicyFairPlayConfiguration()"
  desc: "Creates an instance of StreamingPolicyFairPlayConfiguration class."
methods:
- uid: "com.azure.resourcemanager.mediaservices.models.StreamingPolicyFairPlayConfiguration.allowPersistentLicense()"
  fullName: "com.azure.resourcemanager.mediaservices.models.StreamingPolicyFairPlayConfiguration.allowPersistentLicense()"
  name: "allowPersistentLicense()"
  nameWithType: "StreamingPolicyFairPlayConfiguration.allowPersistentLicense()"
  summary: "Get the allow<wbr>Persistent<wbr>License property: All license to be persistent or not."
  syntax: "public boolean allowPersistentLicense()"
  desc: "Get the allowPersistentLicense property: All license to be persistent or not."
  returns:
    description: "the allowPersistentLicense value."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.models.StreamingPolicyFairPlayConfiguration.customLicenseAcquisitionUrlTemplate()"
  fullName: "com.azure.resourcemanager.mediaservices.models.StreamingPolicyFairPlayConfiguration.customLicenseAcquisitionUrlTemplate()"
  name: "customLicenseAcquisitionUrlTemplate()"
  nameWithType: "StreamingPolicyFairPlayConfiguration.customLicenseAcquisitionUrlTemplate()"
  summary: "Get the custom<wbr>License<wbr>Acquisition<wbr>Url<wbr>Template property: Template for the URL of the custom service delivering licenses to end user players."
  syntax: "public String customLicenseAcquisitionUrlTemplate()"
  desc: "Get the customLicenseAcquisitionUrlTemplate property: Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are \\{AlternativeMediaId\\}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and \\{ContentKeyId\\}, which is replaced with the value of identifier of the key being requested."
  returns:
    description: "the customLicenseAcquisitionUrlTemplate value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.models.StreamingPolicyFairPlayConfiguration.validate()"
  fullName: "com.azure.resourcemanager.mediaservices.models.StreamingPolicyFairPlayConfiguration.validate()"
  name: "validate()"
  nameWithType: "StreamingPolicyFairPlayConfiguration.validate()"
  summary: "Validates the instance."
  syntax: "public void validate()"
  desc: "Validates the instance."
- uid: "com.azure.resourcemanager.mediaservices.models.StreamingPolicyFairPlayConfiguration.withAllowPersistentLicense(boolean)"
  fullName: "com.azure.resourcemanager.mediaservices.models.StreamingPolicyFairPlayConfiguration.withAllowPersistentLicense(boolean allowPersistentLicense)"
  name: "withAllowPersistentLicense(boolean allowPersistentLicense)"
  nameWithType: "StreamingPolicyFairPlayConfiguration.withAllowPersistentLicense(boolean allowPersistentLicense)"
  summary: "Set the allow<wbr>Persistent<wbr>License property: All license to be persistent or not."
  parameters:
  - description: "the allowPersistentLicense value to set."
    name: "allowPersistentLicense"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public StreamingPolicyFairPlayConfiguration withAllowPersistentLicense(boolean allowPersistentLicense)"
  desc: "Set the allowPersistentLicense property: All license to be persistent or not."
  returns:
    description: "the StreamingPolicyFairPlayConfiguration object itself."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.StreamingPolicyFairPlayConfiguration?alt=com.azure.resourcemanager.mediaservices.models.StreamingPolicyFairPlayConfiguration&text=StreamingPolicyFairPlayConfiguration\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.models.StreamingPolicyFairPlayConfiguration.withCustomLicenseAcquisitionUrlTemplate(java.lang.String)"
  fullName: "com.azure.resourcemanager.mediaservices.models.StreamingPolicyFairPlayConfiguration.withCustomLicenseAcquisitionUrlTemplate(String customLicenseAcquisitionUrlTemplate)"
  name: "withCustomLicenseAcquisitionUrlTemplate(String customLicenseAcquisitionUrlTemplate)"
  nameWithType: "StreamingPolicyFairPlayConfiguration.withCustomLicenseAcquisitionUrlTemplate(String customLicenseAcquisitionUrlTemplate)"
  summary: "Set the custom<wbr>License<wbr>Acquisition<wbr>Url<wbr>Template property: Template for the URL of the custom service delivering licenses to end user players."
  parameters:
  - description: "the customLicenseAcquisitionUrlTemplate value to set."
    name: "customLicenseAcquisitionUrlTemplate"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public StreamingPolicyFairPlayConfiguration withCustomLicenseAcquisitionUrlTemplate(String customLicenseAcquisitionUrlTemplate)"
  desc: "Set the customLicenseAcquisitionUrlTemplate property: Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are \\{AlternativeMediaId\\}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and \\{ContentKeyId\\}, which is replaced with the value of identifier of the key being requested."
  returns:
    description: "the StreamingPolicyFairPlayConfiguration object itself."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.StreamingPolicyFairPlayConfiguration?alt=com.azure.resourcemanager.mediaservices.models.StreamingPolicyFairPlayConfiguration&text=StreamingPolicyFairPlayConfiguration\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Class to specify configurations of FairPlay in Streaming Policy."
metadata: {}
package: "com.azure.resourcemanager.mediaservices.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-mediaservices:2.3.0
