### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.actors.ActorId.ActorId(long id)
  name: ActorId(long id)
  nameWithType: ActorId.ActorId(long id)
  parameters:
  - description: <p>Value for actor id. </p>
    name: id
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of ActorId class with Id value of type long</p>

    <p></p>
  syntax: public ActorId(long id)
  uid: microsoft.servicefabric.actors.ActorId.ActorId(long)
- fullName: microsoft.servicefabric.actors.ActorId.ActorId(String id)
  name: ActorId(String id)
  nameWithType: ActorId.ActorId(String id)
  parameters:
  - description: <p>Value for actor id. </p>
    name: id
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of ActorId class with Id value of type <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.lang.String"></xref>.</p>

    <p></p>
  syntax: public ActorId(String id)
  uid: microsoft.servicefabric.actors.ActorId.ActorId(String)
- fullName: microsoft.servicefabric.actors.ActorId.ActorId(UUID id)
  name: ActorId(UUID id)
  nameWithType: ActorId.ActorId(UUID id)
  parameters:
  - description: <p>Value for actor id. </p>
    name: id
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of ActorId class with Id value of type <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.util.UUID"></xref></p>

    <p></p>
  syntax: public ActorId(UUID id)
  uid: microsoft.servicefabric.actors.ActorId.ActorId(UUID)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="Comparable&lt;ActorId&gt;" data-throw-if-not-resolved="False"/>
methods:
- fullName: microsoft.servicefabric.actors.ActorId.compareTo(ActorId o)
  name: compareTo(ActorId o)
  nameWithType: ActorId.compareTo(ActorId o)
  parameters:
  - description: <p>The actorId to compare with this instance. </p>
    name: o
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the other parameter. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Compares this instance with a specified <xref uid="microsoft.servicefabric.actors.ActorId" data-throw-if-not-resolved="false" data-raw-source="ActorId"></xref> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified actorId.</p>

    <p>

      <b>Remarks:</b>The comparison is done based on the id if both the instances have same <xref uid="microsoft.servicefabric.actors.ActorIdKind" data-throw-if-not-resolved="false" data-raw-source="ActorIdKind"></xref>. If <xref uid="microsoft.servicefabric.actors.ActorIdKind" data-throw-if-not-resolved="false" data-raw-source="ActorIdKind"></xref> is different, then comparison is done based on string representation of the actor id. </p>
  syntax: public int compareTo(ActorId o)
  uid: microsoft.servicefabric.actors.ActorId.compareTo(ActorId)
- fullName: microsoft.servicefabric.actors.ActorId.equals(Object obj)
  name: equals(Object obj)
  nameWithType: ActorId.equals(Object obj)
  parameters:
  - description: <p>The actorId to compare to this instance. </p>
    name: obj
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>true if obj is a <xref uid="microsoft.servicefabric.actors.ActorId" data-throw-if-not-resolved="false" data-raw-source="ActorId"></xref> and its value is the same as this instance; otherwise, false. If obj is null, the method returns false. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Determines whether this instance and a specified object, which must also be a <xref uid="microsoft.servicefabric.actors.ActorId" data-throw-if-not-resolved="false" data-raw-source="ActorId"></xref> object, have the same value.</p>

    <p></p>
  syntax: public boolean equals(Object obj)
  uid: microsoft.servicefabric.actors.ActorId.equals(Object)
- fullName: microsoft.servicefabric.actors.ActorId.getKind()
  name: getKind()
  nameWithType: ActorId.getKind()
  returns:
    description: >-
      <p>

        <xref uid="microsoft.servicefabric.actors.ActorIdKind" data-throw-if-not-resolved="false" data-raw-source="ActorIdKind"></xref> for the ActorId. </p>
    type: <xref href="microsoft.servicefabric.actors.ActorIdKind?alt=microsoft.servicefabric.actors.ActorIdKind&text=ActorIdKind" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the <xref uid="microsoft.servicefabric.actors.ActorIdKind" data-throw-if-not-resolved="false" data-raw-source="ActorIdKind"></xref> for the ActorId.</p>

    <p></p>
  syntax: public ActorIdKind getKind()
  uid: microsoft.servicefabric.actors.ActorId.getKind()
- fullName: microsoft.servicefabric.actors.ActorId.getLongId()
  name: getLongId()
  nameWithType: ActorId.getLongId()
  returns:
    description: <p>long id value for AcotrId. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets id for ActorId whose <xref uid="microsoft.servicefabric.actors.ActorIdKind" data-throw-if-not-resolved="false" data-raw-source="ActorIdKind"></xref> is <xref uid="microsoft.servicefabric.actors.ActorIdKind.Long" data-throw-if-not-resolved="false" data-raw-source="ActorIdKind#Long"></xref>.</p>

    <p></p>
  syntax: public long getLongId()
  uid: microsoft.servicefabric.actors.ActorId.getLongId()
- fullName: microsoft.servicefabric.actors.ActorId.getPartitionKey()
  name: getPartitionKey()
  nameWithType: ActorId.getPartitionKey()
  returns:
    description: <p>The key for locating the partition of the actor service that is responsible for this ActorId. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets partition key for the ActorId.</p>

    <p>

      <b>Remarks:</b>

    </p>

    <p>

      <ul>

        <li>

          <p>The actor service is always partitioned using uniform Integer64 partition scheme. Therefore the partition key is of long type. </p>

        </li>

        <li>

          <p>The partition key is generated based on the <xref uid="microsoft.servicefabric.actors.ActorIdKind" data-throw-if-not-resolved="false" data-raw-source="ActorIdKind"></xref> and the id value as follows: <ul><li><p>a. ActorIdKind.String : CRC64 hash of the UTF8 bytes of the string id. </p></li><li><p>ActorIdKind.Guid: CRC64 hash of the bytes of the guid id. </p></li><li><p>ActorIdKind.Long: Actual value of the long id. </p></li></ul></p>

        </li>

      </ul>

    </p>
  syntax: public long getPartitionKey()
  uid: microsoft.servicefabric.actors.ActorId.getPartitionKey()
- fullName: microsoft.servicefabric.actors.ActorId.getStringId()
  name: getStringId()
  nameWithType: ActorId.getStringId()
  returns:
    description: <p>String id value for AcotrId. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets id for ActorId whose <xref uid="microsoft.servicefabric.actors.ActorIdKind" data-throw-if-not-resolved="false" data-raw-source="ActorIdKind"></xref> is <xref uid="microsoft.servicefabric.actors.ActorIdKind.String" data-throw-if-not-resolved="false" data-raw-source="ActorIdKind#String"></xref>.</p>

    <p></p>
  syntax: public String getStringId()
  uid: microsoft.servicefabric.actors.ActorId.getStringId()
- fullName: microsoft.servicefabric.actors.ActorId.getUUIDId()
  name: getUUIDId()
  nameWithType: ActorId.getUUIDId()
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.util.UUID"></xref> id value for ActorId. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets id for ActorId whose <xref uid="microsoft.servicefabric.actors.ActorIdKind" data-throw-if-not-resolved="false" data-raw-source="ActorIdKind"></xref> is <xref uid="microsoft.servicefabric.actors.ActorIdKind.UUID" data-throw-if-not-resolved="false" data-raw-source="ActorIdKind#UUID"></xref>.</p>

    <p></p>
  syntax: public UUID getUUIDId()
  uid: microsoft.servicefabric.actors.ActorId.getUUIDId()
- fullName: microsoft.servicefabric.actors.ActorId.hashCode()
  name: hashCode()
  nameWithType: ActorId.hashCode()
  returns:
    description: <p>Hash code for the current object. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int hashCode()
  uid: microsoft.servicefabric.actors.ActorId.hashCode()
- fullName: microsoft.servicefabric.actors.ActorId.newId()
  name: newId()
  nameWithType: ActorId.newId()
  returns:
    description: <p>new actor Id. </p>
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  summary: <p>creates a random actor Id. </p>
  syntax: public static ActorId newId()
  uid: microsoft.servicefabric.actors.ActorId.newId()
- fullName: microsoft.servicefabric.actors.ActorId.toString()
  name: toString()
  nameWithType: ActorId.toString()
  returns:
    description: <p>Returns a string that represents the current object. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String toString()
  uid: microsoft.servicefabric.actors.ActorId.toString()
nameWithType: ActorId
syntax: public class ActorId
type: class
uid: microsoft.servicefabric.actors.ActorId
fullName: microsoft.servicefabric.actors.ActorId
name: ActorId
package: microsoft.servicefabric.actors
summary: <p>ActorId represents identity of an actor within an actor service. The actors can be identified by <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.lang.String"></xref>, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.util.UUID"></xref> or long. </p>
metadata: {}
