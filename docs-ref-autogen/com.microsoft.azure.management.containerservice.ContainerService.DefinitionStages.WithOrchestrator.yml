### YamlMime:JavaType
uid: "com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator"
fullName: "com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator"
name: "ContainerService.DefinitionStages.WithOrchestrator"
nameWithType: "ContainerService.DefinitionStages.WithOrchestrator"
summary: "The stage of the container service definition allowing to specify orchestration type."
syntax: "public static interface ContainerService.DefinitionStages.WithOrchestrator"
methods:
- uid: "com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withDcosOrchestration()"
  fullName: "com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withDcosOrchestration()"
  name: "withDcosOrchestration()"
  nameWithType: "ContainerService.DefinitionStages.WithOrchestrator.withDcosOrchestration()"
  summary: "Specifies the DCOS orchestration type for the container service."
  modifiers:
  - "abstract"
  syntax: "public abstract ContainerService.DefinitionStages.WithLinux withDcosOrchestration()"
  desc: "Specifies the DCOS orchestration type for the container service."
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithLinux?alt=com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithLinux&text=WithLinux\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withKubernetesOrchestration()"
  fullName: "com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withKubernetesOrchestration()"
  name: "withKubernetesOrchestration()"
  nameWithType: "ContainerService.DefinitionStages.WithOrchestrator.withKubernetesOrchestration()"
  summary: "Specifies the Kubernetes orchestration type for the container service."
  modifiers:
  - "abstract"
  syntax: "public abstract ContainerService.DefinitionStages.WithServicePrincipalProfile withKubernetesOrchestration()"
  desc: "Specifies the Kubernetes orchestration type for the container service."
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithServicePrincipalProfile?alt=com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithServicePrincipalProfile&text=WithServicePrincipalProfile\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withSwarmOrchestration()"
  fullName: "com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withSwarmOrchestration()"
  name: "withSwarmOrchestration()"
  nameWithType: "ContainerService.DefinitionStages.WithOrchestrator.withSwarmOrchestration()"
  summary: "Specifies the Swarm orchestration type for the container service."
  modifiers:
  - "abstract"
  syntax: "public abstract ContainerService.DefinitionStages.WithLinux withSwarmOrchestration()"
  desc: "Specifies the Swarm orchestration type for the container service."
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithLinux?alt=com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithLinux&text=WithLinux\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
desc: "The stage of the container service definition allowing to specify orchestration type."
metadata: {}
package: "com.microsoft.azure.management.containerservice"
artifact: com.microsoft.azure:azure-mgmt-containerservice:1.41.4
