### YamlMime:JavaType
uid: "com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod"
fullName: "com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod"
name: "CosmosQueryMethod"
nameWithType: "CosmosQueryMethod"
summary: "Inherit Query<wbr>Method class to generate a method that is designated to execute a finder query."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"org.springframework.data.repository.query.QueryMethod?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
- classRef: "<xref href=\"org.springframework.data.repository.query.QueryMethod?alt=org.springframework.data.repository.query.QueryMethod&text=QueryMethod\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"org.springframework.data.repository.query.QueryMethod.createParameters(java.lang.reflect.Method)?alt=org.springframework.data.repository.query.QueryMethod.createParameters&text=createParameters\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.query.QueryMethod.getDomainClass()?alt=org.springframework.data.repository.query.QueryMethod.getDomainClass&text=getDomainClass\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.query.QueryMethod.getEntityInformation()?alt=org.springframework.data.repository.query.QueryMethod.getEntityInformation&text=getEntityInformation\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.query.QueryMethod.getName()?alt=org.springframework.data.repository.query.QueryMethod.getName&text=getName\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.query.QueryMethod.getNamedQueryName()?alt=org.springframework.data.repository.query.QueryMethod.getNamedQueryName&text=getNamedQueryName\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.query.QueryMethod.getParameters()?alt=org.springframework.data.repository.query.QueryMethod.getParameters&text=getParameters\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.query.QueryMethod.getResultProcessor()?alt=org.springframework.data.repository.query.QueryMethod.getResultProcessor&text=getResultProcessor\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.query.QueryMethod.getReturnedObjectType()?alt=org.springframework.data.repository.query.QueryMethod.getReturnedObjectType&text=getReturnedObjectType\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.query.QueryMethod.isCollectionQuery()?alt=org.springframework.data.repository.query.QueryMethod.isCollectionQuery&text=isCollectionQuery\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.query.QueryMethod.isModifyingQuery()?alt=org.springframework.data.repository.query.QueryMethod.isModifyingQuery&text=isModifyingQuery\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.query.QueryMethod.isPageQuery()?alt=org.springframework.data.repository.query.QueryMethod.isPageQuery&text=isPageQuery\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.query.QueryMethod.isQueryForEntity()?alt=org.springframework.data.repository.query.QueryMethod.isQueryForEntity&text=isQueryForEntity\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.query.QueryMethod.isSliceQuery()?alt=org.springframework.data.repository.query.QueryMethod.isSliceQuery&text=isSliceQuery\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.query.QueryMethod.isStreamQuery()?alt=org.springframework.data.repository.query.QueryMethod.isStreamQuery&text=isStreamQuery\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.query.QueryMethod.toString()?alt=org.springframework.data.repository.query.QueryMethod.toString&text=toString\" data-throw-if-not-resolved=\"False\" />"
syntax: "public class **CosmosQueryMethod**</br> extends <xref href=\"org.springframework.data.repository.query.QueryMethod?alt=org.springframework.data.repository.query.QueryMethod&text=QueryMethod\" data-throw-if-not-resolved=\"False\" />"
constructors:
- uid: "com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod.CosmosQueryMethod(java.lang.reflect.Method,org.springframework.data.repository.core.RepositoryMetadata,org.springframework.data.projection.ProjectionFactory)"
  fullName: "com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod.CosmosQueryMethod(Method method, RepositoryMetadata metadata, ProjectionFactory factory)"
  name: "CosmosQueryMethod(Method method, RepositoryMetadata metadata, ProjectionFactory factory)"
  nameWithType: "CosmosQueryMethod.CosmosQueryMethod(Method method, RepositoryMetadata metadata, ProjectionFactory factory)"
  summary: "Creates a new <xref uid=\"com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosQueryMethod\"></xref> from the given parameters."
  parameters:
  - description: "must not be null."
    name: "method"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html\">Method</a>"
  - description: "must not be null."
    name: "metadata"
    type: "<xref href=\"org.springframework.data.repository.core.RepositoryMetadata?alt=org.springframework.data.repository.core.RepositoryMetadata&text=RepositoryMetadata\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null."
    name: "factory"
    type: "<xref href=\"org.springframework.data.projection.ProjectionFactory?alt=org.springframework.data.projection.ProjectionFactory&text=ProjectionFactory\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosQueryMethod(Method method, RepositoryMetadata metadata, ProjectionFactory factory)"
  desc: "Creates a new <xref uid=\"com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosQueryMethod\"></xref> from the given parameters. Looks up the correct query to use for following invocations of the method given."
methods:
- uid: "com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod.getEntityInformation()"
  fullName: "com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod.getEntityInformation()"
  name: "getEntityInformation()"
  nameWithType: "CosmosQueryMethod.getEntityInformation()"
  overridden: "org.springframework.data.repository.query.QueryMethod.getEntityInformation()"
  syntax: "public EntityMetadata<?> getEntityInformation()"
  returns:
    type: "<xref href=\"org.springframework.data.repository.core.EntityMetadata?alt=org.springframework.data.repository.core.EntityMetadata&text=EntityMetadata\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
- uid: "com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod.getQueryAnnotation()"
  fullName: "com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod.getQueryAnnotation()"
  name: "getQueryAnnotation()"
  nameWithType: "CosmosQueryMethod.getQueryAnnotation()"
  summary: "Returns the query string declared in a <xref uid=\"com.azure.spring.data.cosmos.repository.Query\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Query\"></xref> annotation or null if neither the annotation found nor the attribute was specified."
  syntax: "public String getQueryAnnotation()"
  desc: "Returns the query string declared in a <xref uid=\"com.azure.spring.data.cosmos.repository.Query\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Query\"></xref> annotation or null if neither the annotation found nor the attribute was specified."
  returns:
    description: "the query string or null"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod.hasAnnotatedQuery()"
  fullName: "com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod.hasAnnotatedQuery()"
  name: "hasAnnotatedQuery()"
  nameWithType: "CosmosQueryMethod.hasAnnotatedQuery()"
  summary: "Returns whether the method has an annotated query."
  syntax: "public boolean hasAnnotatedQuery()"
  desc: "Returns whether the method has an annotated query."
  returns:
    description: "if the query method has an annotated query"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Inherit QueryMethod class to generate a method that is designated to execute a finder query."
metadata: {}
package: "com.azure.spring.data.cosmos.repository.query"
artifact: com.azure:azure-spring-data-cosmos:3.46.0
