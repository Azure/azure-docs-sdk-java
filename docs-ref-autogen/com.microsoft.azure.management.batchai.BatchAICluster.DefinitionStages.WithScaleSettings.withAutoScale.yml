### YamlMime:JavaMember
nameWithType: BatchAICluster.DefinitionStages.WithScaleSettings.withAutoScale
type: method
members:
- fullName: com.microsoft.azure.management.batchai.BatchAICluster.DefinitionStages.WithScaleSettings.withAutoScale(int minimumNodeCount, int maximumNodeCount)
  name: withAutoScale(int minimumNodeCount, int maximumNodeCount)
  nameWithType: BatchAICluster.DefinitionStages.WithScaleSettings.withAutoScale(int minimumNodeCount, int maximumNodeCount)
  parameters:
  - description: <p>the minimum number of compute nodes the cluster can have </p>
    name: minimumNodeCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>the maximum number of compute nodes the cluster can have </p>
    name: maximumNodeCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.batchai.BatchAICluster.DefinitionStages.WithCreate?alt=com.microsoft.azure.management.batchai.BatchAICluster.DefinitionStages.WithCreate&text=BatchAICluster.DefinitionStages.WithCreate" data-throw-if-not-resolved="False"/>
  summary: <p>If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster. </p>
  syntax: public WithCreate withAutoScale(int minimumNodeCount, int maximumNodeCount)
  uid: com.microsoft.azure.management.batchai.BatchAICluster.DefinitionStages.WithScaleSettings.withAutoScale(int,int)
- fullName: com.microsoft.azure.management.batchai.BatchAICluster.DefinitionStages.WithScaleSettings.withAutoScale(int minimumNodeCount, int maximumNodeCount, int initialNodeCount)
  name: withAutoScale(int minimumNodeCount, int maximumNodeCount, int initialNodeCount)
  nameWithType: BatchAICluster.DefinitionStages.WithScaleSettings.withAutoScale(int minimumNodeCount, int maximumNodeCount, int initialNodeCount)
  parameters:
  - description: <p>the minimum number of compute nodes the cluster can have </p>
    name: minimumNodeCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>the maximum number of compute nodes the cluster can have </p>
    name: maximumNodeCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>the number of compute nodes to allocate on cluster creation. Note that this value is used only during cluster creation. </p>
    name: initialNodeCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.batchai.BatchAICluster.DefinitionStages.WithCreate?alt=com.microsoft.azure.management.batchai.BatchAICluster.DefinitionStages.WithCreate&text=BatchAICluster.DefinitionStages.WithCreate" data-throw-if-not-resolved="False"/>
  summary: <p>If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster. </p>
  syntax: public WithCreate withAutoScale(int minimumNodeCount, int maximumNodeCount, int initialNodeCount)
  uid: com.microsoft.azure.management.batchai.BatchAICluster.DefinitionStages.WithScaleSettings.withAutoScale(int,int,int)
uid: com.microsoft.azure.management.batchai.BatchAICluster.DefinitionStages.WithScaleSettings.withAutoScale*
fullName: com.microsoft.azure.management.batchai.BatchAICluster.DefinitionStages.WithScaleSettings.withAutoScale(int minimumNodeCount, int maximumNodeCount)
name: withAutoScale(int minimumNodeCount, int maximumNodeCount)
package: com.microsoft.azure.management.batchai
metadata: {}
