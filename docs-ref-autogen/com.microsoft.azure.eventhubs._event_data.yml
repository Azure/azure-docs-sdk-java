items:
- uid: com.microsoft.azure.eventhubs._event_data
  id: _event_data
  parent: com.microsoft.azure.eventhubs
  children:
  - com.microsoft.azure.eventhubs._event_data.EventData(byte [])
  - com.microsoft.azure.eventhubs._event_data.EventData(byte [],final int,final int)
  - com.microsoft.azure.eventhubs._event_data.EventData(ByteBuffer)
  - com.microsoft.azure.eventhubs._event_data.getBody()
  - com.microsoft.azure.eventhubs._event_data.getBodyLength()
  - com.microsoft.azure.eventhubs._event_data.getBodyOffset()
  - com.microsoft.azure.eventhubs._event_data.getBytes()
  - com.microsoft.azure.eventhubs._event_data.getObject()
  - com.microsoft.azure.eventhubs._event_data.getProperties()
  - com.microsoft.azure.eventhubs._event_data.getSystemProperties()
  - com.microsoft.azure.eventhubs._event_data.setProperties(final Map<String, Object>)
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: EventData
  nameWithType: EventData
  fullName: com.microsoft.azure.eventhubs.EventData
  type: Class
  source:
    remote: &o0
      path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-java
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 47
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>The data structure encapsulating the Event being sent-to and received-from EventHubs. Each EventHubs partition can be visualized as a Stream of <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. </p>

    <p>Serializing a received <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> with AMQP sections other than ApplicationProperties (with primitive java types) and Data section is not supported. </p>

    <p>Here's how AMQP message sections map to <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. Here's the reference used for AMQP 1.0 specification: <ulink url="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf">http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf</ulink><preformatted>

    i.   <xref href="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false"></xref> - AMQPMessage.ApplicationProperties section

    ii.  <xref href="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false"></xref> - if AMQPMessage.Body has Data section

    iii. <xref href="com.microsoft.azure.eventhubs._event_data.getObject()" data-throw-if-not-resolved="false"></xref> - if AMQPMessage.Body has AMQPValue or AMQPSequence sections

    </preformatted> While using client libraries released by Microsoft Azure EventHubs, sections (i) and (ii) alone are sufficient. Section (iii) is used for advanced scenarios, where the sending application uses third-party AMQP library to send the message to EventHubs and the receiving application uses this client library to receive <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. </p>
  syntax: &o1
    content: public class EventData
  inheritance:
  - java.lang.Object
  - Serializable
  inheritedMembers:
  - com.microsoft.azure.eventhubs._event_data.EventData(Message)
  - com.microsoft.azure.eventhubs._event_data.toAmqpMessage()
  - com.microsoft.azure.eventhubs._event_data.toAmqpMessage(final String)
- uid: com.microsoft.azure.eventhubs._event_data.EventData(byte [])
  id: EventData(byte [])
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: EventData(byte[] data)
  nameWithType: EventData.EventData(byte[] data)
  fullName: com.microsoft.azure.eventhubs.EventData.EventData(byte[] data)
  overload: com.microsoft.azure.eventhubs._event_data.EventData*
  type: Constructor
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 141
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Construct <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> to Send to EventHubs. Typical pattern to create a Sending <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> is: <preformatted>

    i.  Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.

    ii. If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the <xref href="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false"></xref> for the Consumer.

    </preformatted></p>

    <p>Sample Code: <preformatted><xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> eventData = new EventData(telemetryEventBytes);

    eventData.getProperties().put("eventType", "com.microsoft.azure.monitoring.EtlEvent");

    partitionSender.Send(eventData);

    </preformatted></p>

    <p></p>
  syntax:
    content: public EventData(byte[] data)
    parameters:
    - id: data
      type: ccd9418d
      description: <p>the actual payload of data in bytes to be Sent to EventHubs. </p>
  see:
  - type: com.microsoft.azure.eventhubs._event_hub_client.createFromConnectionString(final String)
    description: ''
- uid: com.microsoft.azure.eventhubs._event_data.EventData(byte [],final int,final int)
  id: EventData(byte [],final int,final int)
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: EventData(byte[] data, final int offset, final int length)
  nameWithType: EventData.EventData(byte[] data, final int offset, final int length)
  fullName: com.microsoft.azure.eventhubs.EventData.EventData(byte[] data, final int offset, final int length)
  overload: com.microsoft.azure.eventhubs._event_data.EventData*
  type: Constructor
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 170
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Construct <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> to Send to EventHubs. Typical pattern to create a Sending <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> is: <preformatted>

    i.  Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.

    ii. If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the <xref href="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false"></xref> for the Consumer.

     </preformatted></p>

    <p>Illustration: <preformatted><programlisting><codeline><highlight class="normal">EventData<sp></sp>eventData<sp></sp>=<sp></sp>new<sp></sp>EventData(telemetryEventBytes,<sp></sp>offset,<sp></sp>length);</highlight></codeline><codeline><highlight class="normal">eventData.getProperties().put("eventType",<sp></sp>"com.microsoft.azure.monitoring.EtlEvent");</highlight></codeline><codeline><highlight class="normal">partitionSender.Send(eventData);</highlight></codeline></programlisting></preformatted></p>

    <p></p>
  syntax:
    content: public EventData(byte[] data, final int offset, final int length)
    parameters:
    - id: data
      type: ccd9418d
      description: <p>the byte[] where the payload of the Event to be sent to EventHubs is present </p>
    - id: offset
      type: cd225469
      description: <p>Offset in the byte[] to read from ; inclusive index </p>
    - id: length
      type: cd225469
      description: <p>length of the byte[] to be read, starting from offset </p>
  see:
  - type: com.microsoft.azure.eventhubs._event_hub_client.createFromConnectionString(final String)
    description: ''
- uid: com.microsoft.azure.eventhubs._event_data.EventData(ByteBuffer)
  id: EventData(ByteBuffer)
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: EventData(ByteBuffer buffer)
  nameWithType: EventData.EventData(ByteBuffer buffer)
  fullName: com.microsoft.azure.eventhubs.EventData.EventData(ByteBuffer buffer)
  overload: com.microsoft.azure.eventhubs._event_data.EventData*
  type: Constructor
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 197
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Construct <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> to Send to EventHubs. Typical pattern to create a Sending <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> is: <preformatted>

    i.  Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.

    ii. If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the <xref href="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false"></xref> for the Consumer.

     </preformatted></p>

    <p>Illustration: <preformatted><programlisting><codeline><highlight class="normal">EventData<sp></sp>eventData<sp></sp>=<sp></sp>new<sp></sp>EventData(telemetryEventByteBuffer);</highlight></codeline><codeline><highlight class="normal">eventData.getProperties().put("eventType",<sp></sp>"com.microsoft.azure.monitoring.EtlEvent");</highlight></codeline><codeline><highlight class="normal"><sp></sp><sp></sp><sp></sp>partitionSender.Send(eventData);</highlight></codeline></programlisting></preformatted></p>

    <p></p>
  syntax:
    content: public EventData(ByteBuffer buffer)
    parameters:
    - id: buffer
      type: 85310d28
      description: <p>ByteBuffer which references the payload of the Event to be sent to EventHubs </p>
  see:
  - type: com.microsoft.azure.eventhubs._event_hub_client.createFromConnectionString(final String)
    description: ''
- uid: com.microsoft.azure.eventhubs._event_data.getBody()
  id: getBody()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: getBody()
  nameWithType: EventData.getBody()
  fullName: byte [] com.microsoft.azure.eventhubs.EventData.getBody()
  overload: com.microsoft.azure.eventhubs._event_data.getBody*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 230
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Get Actual Payload/Data wrapped by <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. This is the underlying array and should be used in conjunction with <xref href="com.microsoft.azure.eventhubs._event_data.getBodyOffset()" data-throw-if-not-resolved="false"></xref> and <xref href="com.microsoft.azure.eventhubs._event_data.getBodyLength()" data-throw-if-not-resolved="false"></xref>.</p>

    <p>

    null if the body of the AMQP message doesn't have Data section <xrefsect id="deprecated_1_deprecated000005"><xreftitle>Deprecated</xreftitle><xrefdescription><p>use <xref href="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false"></xref></p></xrefdescription></xrefsect></p>
  syntax: &o6
    content: public byte [] getBody()
    return:
      type: ccd9418d
      description: <p>byte[] of the actual data </p>
- uid: com.microsoft.azure.eventhubs._event_data.getBodyLength()
  id: getBodyLength()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: getBodyLength()
  nameWithType: EventData.getBodyLength()
  fullName: int com.microsoft.azure.eventhubs.EventData.getBodyLength()
  overload: com.microsoft.azure.eventhubs._event_data.getBodyLength*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 256
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Get the length of the Actual Payload/Data in the byte array returned by <xref href="com.microsoft.azure.eventhubs._event_data.getBody()" data-throw-if-not-resolved="false"></xref>.</p>

    <p>

      <xrefsect id="deprecated_1_deprecated000007">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>use <xref href="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false"></xref></p>

        </xrefdescription>

      </xrefsect>

    </p>
  syntax: &o5
    content: public int getBodyLength()
    return:
      type: f75371fa
      description: <p>returns the byte[] of the actual data </p>
  see:
  - type: com.microsoft.azure.eventhubs._event_data.getBody()
    description: ''
  - type: com.microsoft.azure.eventhubs._event_data.getBodyOffset()
    description: ''
- uid: com.microsoft.azure.eventhubs._event_data.getBodyOffset()
  id: getBodyOffset()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: getBodyOffset()
  nameWithType: EventData.getBodyOffset()
  fullName: int com.microsoft.azure.eventhubs.EventData.getBodyOffset()
  overload: com.microsoft.azure.eventhubs._event_data.getBodyOffset*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 243
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Get the offset of the current Payload/Data in the byte array returned by <xref href="com.microsoft.azure.eventhubs._event_data.getBody()" data-throw-if-not-resolved="false"></xref>.</p>

    <p>

      <xrefsect id="deprecated_1_deprecated000006">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>use <xref href="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false"></xref></p>

        </xrefdescription>

      </xrefsect>

    </p>
  syntax: &o4
    content: public int getBodyOffset()
    return:
      type: f75371fa
      description: <p>returns the byte[] of the actual data </p>
  see:
  - type: com.microsoft.azure.eventhubs._event_data.getBodyLength()
    description: ''
  - type: com.microsoft.azure.eventhubs._event_data.getBody()
    description: ''
- uid: com.microsoft.azure.eventhubs._event_data.getBytes()
  id: getBytes()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: getBytes()
  nameWithType: EventData.getBytes()
  fullName: byte [] com.microsoft.azure.eventhubs.EventData.getBytes()
  overload: com.microsoft.azure.eventhubs._event_data.getBytes*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 267
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Get Actual Payload/Data wrapped by <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>.</p>

    <p>

    null if the body of the message has other inter-operable AMQP messages, whose body does not represent byte[]. In that case use <xref href="com.microsoft.azure.eventhubs._event_data.getObject()" data-throw-if-not-resolved="false"></xref>. </p>
  syntax: &o3
    content: public byte [] getBytes()
    return:
      type: ccd9418d
      description: <p>byte[] of the actual data </p>
- uid: com.microsoft.azure.eventhubs._event_data.getObject()
  id: getObject()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: getObject()
  nameWithType: EventData.getObject()
  fullName: Object com.microsoft.azure.eventhubs.EventData.getObject()
  overload: com.microsoft.azure.eventhubs._event_data.getObject*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 218
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Use this method only if, the sender could be sending messages using third-party AMQP libraries. </p>

    <p>If all the senders of EventHub use client libraries released and maintained by Microsoft Azure EventHubs, use <xref href="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false"></xref> method. </p>

    <p>Get the value of AMQP messages' Body section on the received <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. </p>

    <p>If the AMQP message Body is always guaranteed to have Data section, use <xref href="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false"></xref> method.</p>

    <p>

      <ref refid="" kindref="compound">Binary</ref> if the Body is Data section </p>

    <p>

      <ref refid="" kindref="compound">List</ref> if the Body is AmqpSequence </p>

    <p>package org.apache.qpid.proton.amqp contains various AMQP types that could be returned. </p>
  syntax: &o7
    content: public Object getObject()
    return:
      type: "79317049"
      description: <p>returns the Object which could represent either Data or AmqpValue or AmqpSequence. </p>
- uid: com.microsoft.azure.eventhubs._event_data.getProperties()
  id: getProperties()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: getProperties()
  nameWithType: EventData.getProperties()
  fullName: Map<String, Object> com.microsoft.azure.eventhubs.EventData.getProperties()
  overload: com.microsoft.azure.eventhubs._event_data.getProperties*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 280
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Application property bag</p>

    <p></p>
  syntax: &o2
    content: public Map<String, Object> getProperties()
    return:
      type: e7b06046
      description: <p>returns Application properties </p>
- uid: com.microsoft.azure.eventhubs._event_data.getSystemProperties()
  id: getSystemProperties()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: getSystemProperties()
  nameWithType: EventData.getSystemProperties()
  fullName: SystemProperties com.microsoft.azure.eventhubs.EventData.getSystemProperties()
  overload: com.microsoft.azure.eventhubs._event_data.getSystemProperties*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 314
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>SystemProperties that are populated by EventHubService. </p>

    <p>As these are populated by Service, they are only present on a Received <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. </p>

    <p>Usage:</p>

    <p></p>

    <p></p>
  syntax:
    content: public SystemProperties getSystemProperties()
    return:
      type: a4d677af
      description: <p>an encapsulation of all SystemProperties appended by EventHubs service into <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. <code>null</code> if the <ref refid="" kindref="compound">EventData()</ref> is not received and is created by the public constructors. </p>
- uid: com.microsoft.azure.eventhubs._event_data.setProperties(final Map<String, Object>)
  id: setProperties(final Map<String, Object>)
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: setProperties(final Map<String, Object> applicationProperties)
  nameWithType: EventData.setProperties(final Map<String, Object> applicationProperties)
  fullName: void com.microsoft.azure.eventhubs.EventData.setProperties(final Map<String, Object> applicationProperties)
  overload: com.microsoft.azure.eventhubs._event_data.setProperties*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 295
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Set Application Properties</p>

    <p>

      <xrefsect id="deprecated_1_deprecated000008">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>use <xref href="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false"></xref> and add properties to the bag. </p>

        </xrefdescription>

      </xrefsect>

    </p>
  syntax:
    content: public void setProperties(final Map<String, Object> applicationProperties)
    parameters:
    - id: applicationProperties
      type: 0ef16036
      description: <p>the Application Properties bag </p>
references:
- uid: ccd9418d
  spec.java:
  - name: byte []
    fullName: byte []
- uid: com.microsoft.azure.eventhubs._event_data.EventData*
  name: EventData
  nameWithType: EventData.EventData
  fullName: com.microsoft.azure.eventhubs.EventData.EventData
  package: com.microsoft.azure.eventhubs
- uid: cd225469
  spec.java:
  - name: final int
    fullName: final int
- uid: 85310d28
  spec.java:
  - name: ByteBuffer
    fullName: ByteBuffer
- uid: "79317049"
  spec.java:
  - name: Object
    fullName: Object
- uid: com.microsoft.azure.eventhubs._event_data.getObject*
  name: getObject
  nameWithType: EventData.getObject
  fullName: Object com.microsoft.azure.eventhubs.EventData.getObject
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs._event_data.getBody*
  name: getBody
  nameWithType: EventData.getBody
  fullName: byte [] com.microsoft.azure.eventhubs.EventData.getBody
  package: com.microsoft.azure.eventhubs
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: com.microsoft.azure.eventhubs._event_data.getBodyOffset*
  name: getBodyOffset
  nameWithType: EventData.getBodyOffset
  fullName: int com.microsoft.azure.eventhubs.EventData.getBodyOffset
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs._event_data.getBodyLength*
  name: getBodyLength
  nameWithType: EventData.getBodyLength
  fullName: int com.microsoft.azure.eventhubs.EventData.getBodyLength
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs._event_data.getBytes*
  name: getBytes
  nameWithType: EventData.getBytes
  fullName: byte [] com.microsoft.azure.eventhubs.EventData.getBytes
  package: com.microsoft.azure.eventhubs
- uid: e7b06046
  spec.java:
  - name: Map<String, Object>
    fullName: Map<String, Object>
- uid: com.microsoft.azure.eventhubs._event_data.getProperties*
  name: getProperties
  nameWithType: EventData.getProperties
  fullName: Map<String, Object> com.microsoft.azure.eventhubs.EventData.getProperties
  package: com.microsoft.azure.eventhubs
- uid: 0ef16036
  spec.java:
  - name: final Map<String, Object>
    fullName: final Map<String, Object>
- uid: com.microsoft.azure.eventhubs._event_data.setProperties*
  name: setProperties
  nameWithType: EventData.setProperties
  fullName: void com.microsoft.azure.eventhubs.EventData.setProperties
  package: com.microsoft.azure.eventhubs
- uid: a4d677af
  spec.java:
  - name: SystemProperties
    fullName: SystemProperties
- uid: com.microsoft.azure.eventhubs._event_data.getSystemProperties*
  name: getSystemProperties
  nameWithType: EventData.getSystemProperties
  fullName: SystemProperties com.microsoft.azure.eventhubs.EventData.getSystemProperties
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs._event_data.EventData(Message)
- uid: com.microsoft.azure.eventhubs._event_data.toAmqpMessage()
- uid: com.microsoft.azure.eventhubs._event_data.toAmqpMessage(final String)
- uid: com.microsoft.azure.eventhubs._partition_receiver
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  name: PartitionReceiver
  nameWithType: PartitionReceiver
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver
  type: Class
  summary: >-
    <p>This is a logical representation of receiving from a EventHub partition. </p>

    <p>A <xref href="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false"></xref> is tied to a ConsumerGroup + EventHub Partition combination. <itemizedlist><listitem><p>If an epoch based <xref href="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false"></xref> (i.e., <xref href="com.microsoft.azure.eventhubs._partition_receiver.getEpoch()" data-throw-if-not-resolved="false"></xref> != 0) is created, EventHubs service will guarantee only 1 active receiver exists per ConsumerGroup + Partition combo. This is the recommended approach to create a <xref href="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false"></xref>. </p></listitem><listitem><p>Multiple receivers per ConsumerGroup + Partition combo can be created using non-epoch receivers. </p></listitem></itemizedlist></p>

    <p></p>
  syntax:
    content: public class PartitionReceiver
- uid: com.microsoft.azure.eventhubs._event_data
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: EventData
  nameWithType: EventData
  fullName: com.microsoft.azure.eventhubs.EventData
  type: Class
  summary: >-
    <p>The data structure encapsulating the Event being sent-to and received-from EventHubs. Each EventHubs partition can be visualized as a Stream of <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. </p>

    <p>Serializing a received <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> with AMQP sections other than ApplicationProperties (with primitive java types) and Data section is not supported. </p>

    <p>Here's how AMQP message sections map to <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. Here's the reference used for AMQP 1.0 specification: <ulink url="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf">http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf</ulink><preformatted>

    i.   <xref href="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false"></xref> - AMQPMessage.ApplicationProperties section

    ii.  <xref href="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false"></xref> - if AMQPMessage.Body has Data section

    iii. <xref href="com.microsoft.azure.eventhubs._event_data.getObject()" data-throw-if-not-resolved="false"></xref> - if AMQPMessage.Body has AMQPValue or AMQPSequence sections

    </preformatted> While using client libraries released by Microsoft Azure EventHubs, sections (i) and (ii) alone are sufficient. Section (iii) is used for advanced scenarios, where the sending application uses third-party AMQP library to send the message to EventHubs and the receiving application uses this client library to receive <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. </p>
  syntax: *o1
- uid: com.microsoft.azure.eventhubs._event_data.getProperties()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: getProperties()
  nameWithType: EventData.getProperties()
  fullName: Map<String, Object> com.microsoft.azure.eventhubs.EventData.getProperties()
  type: Method
  summary: >-
    <p>Application property bag</p>

    <p></p>
  syntax: *o2
- uid: com.microsoft.azure.eventhubs._event_hub_client.createFromConnectionString(final String)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createFromConnectionString(final String connectionString)
  nameWithType: EventHubClient.createFromConnectionString(final String connectionString)
  fullName: static CompletableFuture<EventHubClient> com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString(final String connectionString)
  type: Method
  summary: >-
    <p>Factory method to create an instance of <xref href="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false"></xref> using the supplied connectionString. In a normal scenario (when re-direct is not enabled) - one <xref href="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false"></xref> instance maps to one Connection to the Azure ServiceBus EventHubs service. </p>

    <p>The <xref href="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false"></xref> created from this method creates a Sender instance internally, which is used by the <xref href="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false"></xref> methods.</p>

    <p></p>
  syntax:
    content: public static CompletableFuture<EventHubClient> createFromConnectionString(final String connectionString)
    parameters:
    - id: connectionString
      type: 3d93591e
      description: <p>The connection string to be used. See <ref refid="" kindref="compound">ConnectionStringBuilder</ref> to construct a connectionString. </p>
    return:
      type: 9cdf14d0com.microsoft.azure.eventhubs._event_hub_clienta08ddfce
      description: >-
        <p>

          <xref href="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false"></xref> which can be used to create Senders and Receivers to EventHub </p>
- uid: com.microsoft.azure.eventhubs._event_data.getBytes()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: getBytes()
  nameWithType: EventData.getBytes()
  fullName: byte [] com.microsoft.azure.eventhubs.EventData.getBytes()
  type: Method
  summary: >-
    <p>Get Actual Payload/Data wrapped by <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>.</p>

    <p>

    null if the body of the message has other inter-operable AMQP messages, whose body does not represent byte[]. In that case use <xref href="com.microsoft.azure.eventhubs._event_data.getObject()" data-throw-if-not-resolved="false"></xref>. </p>
  syntax: *o3
- uid: com.microsoft.azure.eventhubs._event_data.getBodyOffset()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: getBodyOffset()
  nameWithType: EventData.getBodyOffset()
  fullName: int com.microsoft.azure.eventhubs.EventData.getBodyOffset()
  type: Method
  summary: >-
    <p>Get the offset of the current Payload/Data in the byte array returned by <xref href="com.microsoft.azure.eventhubs._event_data.getBody()" data-throw-if-not-resolved="false"></xref>.</p>

    <p>

      <xrefsect id="deprecated_1_deprecated000006">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>use <xref href="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false"></xref></p>

        </xrefdescription>

      </xrefsect>

    </p>
  syntax: *o4
- uid: com.microsoft.azure.eventhubs._event_data.getBodyLength()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: getBodyLength()
  nameWithType: EventData.getBodyLength()
  fullName: int com.microsoft.azure.eventhubs.EventData.getBodyLength()
  type: Method
  summary: >-
    <p>Get the length of the Actual Payload/Data in the byte array returned by <xref href="com.microsoft.azure.eventhubs._event_data.getBody()" data-throw-if-not-resolved="false"></xref>.</p>

    <p>

      <xrefsect id="deprecated_1_deprecated000007">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>use <xref href="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false"></xref></p>

        </xrefdescription>

      </xrefsect>

    </p>
  syntax: *o5
- uid: com.microsoft.azure.eventhubs._event_data.getBody()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: getBody()
  nameWithType: EventData.getBody()
  fullName: byte [] com.microsoft.azure.eventhubs.EventData.getBody()
  type: Method
  summary: >-
    <p>Get Actual Payload/Data wrapped by <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. This is the underlying array and should be used in conjunction with <xref href="com.microsoft.azure.eventhubs._event_data.getBodyOffset()" data-throw-if-not-resolved="false"></xref> and <xref href="com.microsoft.azure.eventhubs._event_data.getBodyLength()" data-throw-if-not-resolved="false"></xref>.</p>

    <p>

    null if the body of the AMQP message doesn't have Data section <xrefsect id="deprecated_1_deprecated000005"><xreftitle>Deprecated</xreftitle><xrefdescription><p>use <xref href="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false"></xref></p></xrefdescription></xrefsect></p>
  syntax: *o6
- uid: com.microsoft.azure.eventhubs._event_data.getObject()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: getObject()
  nameWithType: EventData.getObject()
  fullName: Object com.microsoft.azure.eventhubs.EventData.getObject()
  type: Method
  summary: >-
    <p>Use this method only if, the sender could be sending messages using third-party AMQP libraries. </p>

    <p>If all the senders of EventHub use client libraries released and maintained by Microsoft Azure EventHubs, use <xref href="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false"></xref> method. </p>

    <p>Get the value of AMQP messages' Body section on the received <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. </p>

    <p>If the AMQP message Body is always guaranteed to have Data section, use <xref href="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false"></xref> method.</p>

    <p>

      <ref refid="" kindref="compound">Binary</ref> if the Body is Data section </p>

    <p>

      <ref refid="" kindref="compound">List</ref> if the Body is AmqpSequence </p>

    <p>package org.apache.qpid.proton.amqp contains various AMQP types that could be returned. </p>
  syntax: *o7
