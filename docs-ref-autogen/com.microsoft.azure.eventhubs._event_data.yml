### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.eventhubs._event_data
  id: _event_data
  parent: com.microsoft.azure.eventhubs
  children:
  - com.microsoft.azure.eventhubs._event_data.create(final byte [])
  - com.microsoft.azure.eventhubs._event_data.create(final byte [],final int,final int)
  - com.microsoft.azure.eventhubs._event_data.create(final ByteBuffer)
  - com.microsoft.azure.eventhubs._event_data.getBytes()
  - com.microsoft.azure.eventhubs._event_data.getObject()
  - com.microsoft.azure.eventhubs._event_data.getProperties()
  - com.microsoft.azure.eventhubs._event_data.getSystemProperties()
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: EventData
  nameWithType: EventData
  fullName: com.microsoft.azure.eventhubs.EventData
  type: Interface
  source:
    remote: &o0
      path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-java
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 37
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>The data structure encapsulating the Event being sent-to and received-from EventHubs. Each EventHubs partition can be visualized as a Stream of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>

    <p>Serializing a received <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> with AMQP sections other than ApplicationProperties (with primitive java types) and Data section is not supported. </p>

    <p>Here's how AMQP message sections map to <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. Here's the reference used for AMQP 1.0 specification: <ulink url="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf">http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf</ulink><pre>

    i.   <xref uid="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false">getProperties()</xref> - AMQPMessage.ApplicationProperties section

    ii.  <xref uid="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false">getBytes()</xref> - if AMQPMessage.Body has Data section

    iii. <xref uid="com.microsoft.azure.eventhubs._event_data.getObject()" data-throw-if-not-resolved="false">getObject()</xref> - if AMQPMessage.Body has AMQPValue or AMQPSequence sections

    </pre> While using client libraries released by Microsoft Azure EventHubs, sections (i) and (ii) alone are sufficient. Section (iii) is used for advanced scenarios, where the sending application uses third-party AMQP library to send the message to EventHubs and the receiving application uses this client library to receive <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>
  syntax: &o1
    content: public interface EventData
- uid: com.microsoft.azure.eventhubs._event_data.create(final byte [])
  id: create(final byte [])
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: create(final byte[] data)
  nameWithType: EventData.create(final byte[] data)
  fullName: static EventData com.microsoft.azure.eventhubs.EventData.create(final byte[] data)
  overload: com.microsoft.azure.eventhubs._event_data.create*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 57
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Construct <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to Send to EventHubs. Typical pattern to create a Sending <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> is: <pre>

    i.  Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.

    ii. If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the <xref uid="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false">getProperties()</xref> for the Consumer.

    </pre></p>

    <p>Sample Code: <pre><xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> eventData = new EventData(telemetryEventBytes);

    eventData.getProperties().put("eventType", "com.microsoft.azure.monitoring.EtlEvent");

    partitionSender.Send(eventData);

    </pre></p>

    <p></p>
  syntax:
    content: public static EventData create(final byte[] data)
    parameters:
    - id: data
      type: f549433f
      description: <p>the actual payload of data in bytes to be Sent to EventHubs. </p>
    return:
      type: com.microsoft.azure.eventhubs._event_data
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> the created <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to send to EventHubs. </p>
  see:
  - type: com.microsoft.azure.eventhubs._event_hub_client.create(final String,final Executor)
    description: EventHubClient::create(String, Executor)
- uid: com.microsoft.azure.eventhubs._event_data.create(final byte [],final int,final int)
  id: create(final byte [],final int,final int)
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: create(final byte[] data, final int offset, final int length)
  nameWithType: EventData.create(final byte[] data, final int offset, final int length)
  fullName: static EventData com.microsoft.azure.eventhubs.EventData.create(final byte[] data, final int offset, final int length)
  overload: com.microsoft.azure.eventhubs._event_data.create*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 81
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Construct <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to Send to EventHubs. Typical pattern to create a Sending <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> is: <pre>

    i.  Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.

    ii. If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the <xref uid="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false">getProperties()</xref> for the Consumer.

     </pre></p>

    <p>Illustration: <pre><code>EventData eventData = new EventData(telemetryEventBytes, offset, length);

        eventData.getProperties().put("eventType", "com.microsoft.azure.monitoring.EtlEvent");

        partitionSender.Send(eventData);

        </code></pre></p>

    <p></p>
  syntax:
    content: public static EventData create(final byte[] data, final int offset, final int length)
    parameters:
    - id: data
      type: f549433f
      description: <p>the byte[] where the payload of the Event to be sent to EventHubs is present </p>
    - id: offset
      type: cd225469
      description: <p>Offset in the byte[] to read from ; inclusive index </p>
    - id: length
      type: cd225469
      description: <p>length of the byte[] to be read, starting from offset </p>
    return:
      type: com.microsoft.azure.eventhubs._event_data
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> the created <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to send to EventHubs. </p>
  see:
  - type: com.microsoft.azure.eventhubs._event_hub_client.create(final String,final Executor)
    description: EventHubClient::create(String, Executor)
- uid: com.microsoft.azure.eventhubs._event_data.create(final ByteBuffer)
  id: create(final ByteBuffer)
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: create(final ByteBuffer buffer)
  nameWithType: EventData.create(final ByteBuffer buffer)
  fullName: static EventData com.microsoft.azure.eventhubs.EventData.create(final ByteBuffer buffer)
  overload: com.microsoft.azure.eventhubs._event_data.create*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 103
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Construct <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to Send to EventHubs. Typical pattern to create a Sending <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> is: <pre>

    i.  Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.

    ii. If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the <xref uid="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false">getProperties()</xref> for the Consumer.

     </pre></p>

    <p>Illustration: <pre><code>EventData eventData = new EventData(telemetryEventByteBuffer);

        eventData.getProperties().put("eventType", "com.microsoft.azure.monitoring.EtlEvent");

           partitionSender.Send(eventData);

        </code></pre></p>

    <p></p>
  syntax:
    content: public static EventData create(final ByteBuffer buffer)
    parameters:
    - id: buffer
      type: d8b5c3b1
      description: <p>ByteBuffer which references the payload of the Event to be sent to EventHubs </p>
    return:
      type: com.microsoft.azure.eventhubs._event_data
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> the created <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to send to EventHubs. </p>
  see:
  - type: com.microsoft.azure.eventhubs._event_hub_client.create(final String,final Executor)
    description: EventHubClient::create(String, Executor)
- uid: com.microsoft.azure.eventhubs._event_data.getBytes()
  id: getBytes()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: getBytes()
  nameWithType: EventData.getBytes()
  fullName: byte [] com.microsoft.azure.eventhubs.EventData.getBytes()
  overload: com.microsoft.azure.eventhubs._event_data.getBytes*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 127
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Get Actual Payload/Data wrapped by <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>.</p>

    <p>

    null if the body of the message has other inter-operable AMQP messages, whose body does not represent byte[]. In that case use <xref uid="com.microsoft.azure.eventhubs._event_data.getObject()" data-throw-if-not-resolved="false">getObject()</xref>. </p>
  syntax: &o3
    content: public byte [] getBytes()
    return:
      type: ccd9418d
      description: <p>byte[] of the actual data </p>
- uid: com.microsoft.azure.eventhubs._event_data.getObject()
  id: getObject()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: getObject()
  nameWithType: EventData.getObject()
  fullName: Object com.microsoft.azure.eventhubs.EventData.getObject()
  overload: com.microsoft.azure.eventhubs._event_data.getObject*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 118
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Use this method only if, the sender could be sending messages using third-party AMQP libraries. </p>

    <p>If all the senders of EventHub use client libraries released and maintained by Microsoft Azure EventHubs, use <xref uid="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false">getBytes()</xref> method. </p>

    <p>Get the value of AMQP messages' Body section on the received <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>

    <p>If the AMQP message Body is always guaranteed to have Data section, use <xref uid="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false">getBytes()</xref> method.</p>

    <p>

      <xref uid="" data-throw-if-not-resolved="false">Binary</xref> if the Body is Data section </p>

    <p>

      <xref uid="" data-throw-if-not-resolved="false">List</xref> if the Body is AmqpSequence </p>

    <p>package org.apache.qpid.proton.amqp contains various AMQP types that could be returned. </p>
  syntax: &o4
    content: public Object getObject()
    return:
      type: "79317049"
      description: <p>returns the Object which could represent either Data or AmqpValue or AmqpSequence. </p>
- uid: com.microsoft.azure.eventhubs._event_data.getProperties()
  id: getProperties()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: getProperties()
  nameWithType: EventData.getProperties()
  fullName: Map<String, Object> com.microsoft.azure.eventhubs.EventData.getProperties()
  overload: com.microsoft.azure.eventhubs._event_data.getProperties*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 134
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Application property bag</p>

    <p></p>
  syntax: &o2
    content: public Map<String, Object> getProperties()
    return:
      type: e7b06046
      description: <p>returns Application properties </p>
- uid: com.microsoft.azure.eventhubs._event_data.getSystemProperties()
  id: getSystemProperties()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  langs:
  - java
  name: getSystemProperties()
  nameWithType: EventData.getSystemProperties()
  fullName: SystemProperties com.microsoft.azure.eventhubs.EventData.getSystemProperties()
  overload: com.microsoft.azure.eventhubs._event_data.getSystemProperties*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/EventData.java
    startLine: 151
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>

      <xref uid="com.microsoft.azure.eventhubs._event_data._system_properties" data-throw-if-not-resolved="false">SystemProperties</xref> that are populated by EventHubService. </p>

    <p>As these are populated by Service, they are only present on a Received <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>

    <p>Usage:</p>

    <p></p>

    <p></p>
  syntax:
    content: public SystemProperties getSystemProperties()
    return:
      type: com.microsoft.azure.eventhubs._event_data._system_properties
      description: <p>an encapsulation of all <xref uid="com.microsoft.azure.eventhubs._event_data._system_properties" data-throw-if-not-resolved="false">SystemProperties</xref> appended by EventHubs service into <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. <code>null</code> if the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> is not received and is created by the public constructors. </p>
references:
- uid: f549433f
  spec.java:
  - name: final byte []
    fullName: final byte []
- uid: com.microsoft.azure.eventhubs._event_data.create*
  name: create
  nameWithType: EventData.create
  fullName: static EventData com.microsoft.azure.eventhubs.EventData.create
  package: com.microsoft.azure.eventhubs
- uid: cd225469
  spec.java:
  - name: final int
    fullName: final int
- uid: d8b5c3b1
  spec.java:
  - name: final ByteBuffer
    fullName: final ByteBuffer
- uid: "79317049"
  spec.java:
  - name: Object
    fullName: Object
- uid: com.microsoft.azure.eventhubs._event_data.getObject*
  name: getObject
  nameWithType: EventData.getObject
  fullName: Object com.microsoft.azure.eventhubs.EventData.getObject
  package: com.microsoft.azure.eventhubs
- uid: ccd9418d
  spec.java:
  - name: byte []
    fullName: byte []
- uid: com.microsoft.azure.eventhubs._event_data.getBytes*
  name: getBytes
  nameWithType: EventData.getBytes
  fullName: byte [] com.microsoft.azure.eventhubs.EventData.getBytes
  package: com.microsoft.azure.eventhubs
- uid: e7b06046
  spec.java:
  - name: Map<String, Object>
    fullName: Map<String, Object>
- uid: com.microsoft.azure.eventhubs._event_data.getProperties*
  name: getProperties
  nameWithType: EventData.getProperties
  fullName: Map<String, Object> com.microsoft.azure.eventhubs.EventData.getProperties
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs._event_data.getSystemProperties*
  name: getSystemProperties
  nameWithType: EventData.getSystemProperties
  fullName: SystemProperties com.microsoft.azure.eventhubs.EventData.getSystemProperties
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.impl._event_data_impl
  parent: com.microsoft.azure.eventhubs.impl
  href: com.microsoft.azure.eventhubs.impl._event_data_impl.yml
  name: EventDataImpl
  nameWithType: EventDataImpl
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl
  type: Class
  syntax:
    content: public class EventDataImpl
- uid: com.microsoft.azure.eventhubs._event_data
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: EventData
  nameWithType: EventData
  fullName: com.microsoft.azure.eventhubs.EventData
  type: Interface
  summary: >-
    <p>The data structure encapsulating the Event being sent-to and received-from EventHubs. Each EventHubs partition can be visualized as a Stream of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>

    <p>Serializing a received <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> with AMQP sections other than ApplicationProperties (with primitive java types) and Data section is not supported. </p>

    <p>Here's how AMQP message sections map to <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. Here's the reference used for AMQP 1.0 specification: <ulink url="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf">http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf</ulink><pre>

    i.   <xref uid="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false">getProperties()</xref> - AMQPMessage.ApplicationProperties section

    ii.  <xref uid="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false">getBytes()</xref> - if AMQPMessage.Body has Data section

    iii. <xref uid="com.microsoft.azure.eventhubs._event_data.getObject()" data-throw-if-not-resolved="false">getObject()</xref> - if AMQPMessage.Body has AMQPValue or AMQPSequence sections

    </pre> While using client libraries released by Microsoft Azure EventHubs, sections (i) and (ii) alone are sufficient. Section (iii) is used for advanced scenarios, where the sending application uses third-party AMQP library to send the message to EventHubs and the receiving application uses this client library to receive <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>
  syntax: *o1
- uid: com.microsoft.azure.eventhubs._event_data.getProperties()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: getProperties()
  nameWithType: EventData.getProperties()
  fullName: Map<String, Object> com.microsoft.azure.eventhubs.EventData.getProperties()
  type: Method
  summary: >-
    <p>Application property bag</p>

    <p></p>
  syntax: *o2
- uid: com.microsoft.azure.eventhubs._event_hub_client.create(final String,final Executor)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: create(final String connectionString, final Executor executor)
  nameWithType: EventHubClient.create(final String connectionString, final Executor executor)
  fullName: static CompletableFuture<EventHubClient> com.microsoft.azure.eventhubs.EventHubClient.create(final String connectionString, final Executor executor)
  type: Method
  summary: >-
    <p>Factory method to create an instance of <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> using the supplied connectionString. In a normal scenario (when re-direct is not enabled) - one <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> instance maps to one Connection to the Azure ServiceBus EventHubs service. </p>

    <p>The <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> created from this method creates a Sender instance internally, which is used by the <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref> methods.</p>

    <p></p>
  syntax:
    content: public static CompletableFuture<EventHubClient> create(final String connectionString, final Executor executor)
    parameters:
    - id: connectionString
      type: 3d93591e
      description: <p>The connection string to be used. See <xref uid="com.microsoft.azure.eventhubs._connection_string_builder" data-throw-if-not-resolved="false">ConnectionStringBuilder</xref> to construct a connectionString. </p>
    - id: executor
      type: 506a8fe9
      description: <p>An <xref uid="" data-throw-if-not-resolved="false">Executor</xref> to run all tasks performed by <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref>. </p>
    return:
      type: 9cdf14d0com.microsoft.azure.eventhubs._event_hub_clienta08ddfce
      description: <p>CompletableFuture{ &lt;EventHubClient&gt;} which can be used to create Senders and Receivers to EventHub </p>
- uid: com.microsoft.azure.eventhubs.impl._event_data_impl.getObject()
  parent: com.microsoft.azure.eventhubs.impl._event_data_impl
  href: com.microsoft.azure.eventhubs.impl._event_data_impl.yml
  name: getObject()
  nameWithType: EventDataImpl.getObject()
  fullName: Object com.microsoft.azure.eventhubs.impl.EventDataImpl.getObject()
  type: Method
  summary: >-
    <p>Use this method only if, the sender could be sending messages using third-party AMQP libraries. </p>

    <p>If all the senders of EventHub use client libraries released and maintained by Microsoft Azure EventHubs, use <xref uid="com.microsoft.azure.eventhubs.impl._event_data_impl.getBytes()" data-throw-if-not-resolved="false">getBytes()</xref> method. </p>

    <p>Get the value of AMQP messages' Body section on the received <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>

    <p>If the AMQP message Body is always guaranteed to have Data section, use <xref uid="com.microsoft.azure.eventhubs.impl._event_data_impl.getBytes()" data-throw-if-not-resolved="false">getBytes()</xref> method.</p>

    <p>

      <xref uid="" data-throw-if-not-resolved="false">Binary</xref> if the Body is Data section </p>

    <p>

      <xref uid="" data-throw-if-not-resolved="false">List</xref> if the Body is AmqpSequence </p>

    <p>package org.apache.qpid.proton.amqp contains various AMQP types that could be returned. </p>
  syntax:
    content: public Object getObject()
    return:
      type: "79317049"
      description: <p>returns the Object which could represent either Data or AmqpValue or AmqpSequence. </p>
- uid: com.microsoft.azure.eventhubs._event_data.getBytes()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: getBytes()
  nameWithType: EventData.getBytes()
  fullName: byte [] com.microsoft.azure.eventhubs.EventData.getBytes()
  type: Method
  summary: >-
    <p>Get Actual Payload/Data wrapped by <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>.</p>

    <p>

    null if the body of the message has other inter-operable AMQP messages, whose body does not represent byte[]. In that case use <xref uid="com.microsoft.azure.eventhubs._event_data.getObject()" data-throw-if-not-resolved="false">getObject()</xref>. </p>
  syntax: *o3
- uid: com.microsoft.azure.eventhubs.impl._event_data_impl.getBytes()
  parent: com.microsoft.azure.eventhubs.impl._event_data_impl
  href: com.microsoft.azure.eventhubs.impl._event_data_impl.yml
  name: getBytes()
  nameWithType: EventDataImpl.getBytes()
  fullName: byte [] com.microsoft.azure.eventhubs.impl.EventDataImpl.getBytes()
  type: Method
  summary: >-
    <p>Get Actual Payload/Data wrapped by <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>.</p>

    <p>

    null if the body of the message has other inter-operable AMQP messages, whose body does not represent byte[]. In that case use <xref uid="com.microsoft.azure.eventhubs.impl._event_data_impl.getObject()" data-throw-if-not-resolved="false">getObject()</xref>. </p>
  syntax:
    content: public byte [] getBytes()
    return:
      type: ccd9418d
      description: <p>byte[] of the actual data </p>
- uid: com.microsoft.azure.eventhubs._event_data.getObject()
  parent: com.microsoft.azure.eventhubs._event_data
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: getObject()
  nameWithType: EventData.getObject()
  fullName: Object com.microsoft.azure.eventhubs.EventData.getObject()
  type: Method
  summary: >-
    <p>Use this method only if, the sender could be sending messages using third-party AMQP libraries. </p>

    <p>If all the senders of EventHub use client libraries released and maintained by Microsoft Azure EventHubs, use <xref uid="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false">getBytes()</xref> method. </p>

    <p>Get the value of AMQP messages' Body section on the received <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>

    <p>If the AMQP message Body is always guaranteed to have Data section, use <xref uid="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false">getBytes()</xref> method.</p>

    <p>

      <xref uid="" data-throw-if-not-resolved="false">Binary</xref> if the Body is Data section </p>

    <p>

      <xref uid="" data-throw-if-not-resolved="false">List</xref> if the Body is AmqpSequence </p>

    <p>package org.apache.qpid.proton.amqp contains various AMQP types that could be returned. </p>
  syntax: *o4
- uid: com.microsoft.azure.eventhubs.impl._event_data_impl.getProperties()
  parent: com.microsoft.azure.eventhubs.impl._event_data_impl
  href: com.microsoft.azure.eventhubs.impl._event_data_impl.yml
  name: getProperties()
  nameWithType: EventDataImpl.getProperties()
  fullName: Map<String, Object> com.microsoft.azure.eventhubs.impl.EventDataImpl.getProperties()
  type: Method
  summary: >-
    <p>Application property bag</p>

    <p></p>
  syntax:
    content: public Map<String, Object> getProperties()
    return:
      type: e7b06046
      description: <p>returns Application properties </p>
- uid: com.microsoft.azure.eventhubs._event_data._system_properties
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_data._system_properties.yml
  name: EventData.SystemProperties
  nameWithType: EventData.SystemProperties
  fullName: com.microsoft.azure.eventhubs.EventData.SystemProperties
  type: Class
  syntax:
    content: public class SystemProperties
- uid: com.microsoft.azure.eventhubs.impl._event_data_impl.getSystemProperties()
  parent: com.microsoft.azure.eventhubs.impl._event_data_impl
  href: com.microsoft.azure.eventhubs.impl._event_data_impl.yml
  name: getSystemProperties()
  nameWithType: EventDataImpl.getSystemProperties()
  fullName: SystemProperties com.microsoft.azure.eventhubs.impl.EventDataImpl.getSystemProperties()
  type: Method
  summary: >-
    <p>SystemProperties that are populated by EventHubService. </p>

    <p>As these are populated by Service, they are only present on a Received <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>

    <p>Usage:</p>

    <p></p>

    <p></p>
  syntax:
    content: public SystemProperties getSystemProperties()
    return:
      type: a4d677af
      description: <p>an encapsulation of all SystemProperties appended by EventHubs service into <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. <code>null</code> if the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> is not received and is created by the public constructors. </p>
