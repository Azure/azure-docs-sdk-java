### YamlMime:JavaType
fields:
- field:
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.identity.client.internal.MsalUtils.CHROME_PACKAGE
  name: CHROME_PACKAGE
  nameWithType: MsalUtils.CHROME_PACKAGE
  syntax: public static final String CHROME_PACKAGE= "com.android.chrome"
  uid: com.microsoft.identity.client.internal.MsalUtils.CHROME_PACKAGE
- field:
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.identity.client.internal.MsalUtils.DEFAULT_EXPIRATION_TIME_SEC
  name: DEFAULT_EXPIRATION_TIME_SEC
  nameWithType: MsalUtils.DEFAULT_EXPIRATION_TIME_SEC
  summary: <p>Default access token expiration time in seconds. </p>
  syntax: public static final int DEFAULT_EXPIRATION_TIME_SEC= 3600
  uid: com.microsoft.identity.client.internal.MsalUtils.DEFAULT_EXPIRATION_TIME_SEC
- field:
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.identity.client.internal.MsalUtils.ENCODING_UTF8
  name: ENCODING_UTF8
  nameWithType: MsalUtils.ENCODING_UTF8
  summary: <p>The encoding scheme the sdk uses. </p>
  syntax: public static final String ENCODING_UTF8= "UTF-8"
  uid: com.microsoft.identity.client.internal.MsalUtils.ENCODING_UTF8
- field:
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.identity.client.internal.MsalUtils.QUERY_STRING_DELIMITER
  name: QUERY_STRING_DELIMITER
  nameWithType: MsalUtils.QUERY_STRING_DELIMITER
  syntax: public static final String QUERY_STRING_DELIMITER= "&"
  uid: com.microsoft.identity.client.internal.MsalUtils.QUERY_STRING_DELIMITER
- field:
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.identity.client.internal.MsalUtils.QUERY_STRING_SYMBOL
  name: QUERY_STRING_SYMBOL
  nameWithType: MsalUtils.QUERY_STRING_SYMBOL
  syntax: public static final String QUERY_STRING_SYMBOL= "?"
  uid: com.microsoft.identity.client.internal.MsalUtils.QUERY_STRING_SYMBOL
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.identity.client.internal.MsalUtils.appendQueryParameterToUrl(final String url, final Map<String, String> requestParams)
  name: appendQueryParameterToUrl(final String url, final Map<String, String> requestParams)
  nameWithType: MsalUtils.appendQueryParameterToUrl(final String url, final Map<String, String> requestParams)
  parameters:
  - name: url
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - name: requestParams
    type: <xref href="final+Map%3CString%2C+String%3E?alt=final+Map%3CString%2C+String%3E&text=final+Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Append parameter to the url. If the no query parameters, return the url originally passed in. </p>
  syntax: public static String appendQueryParameterToUrl(final String url, final Map<String, String> requestParams)
  uid: com.microsoft.identity.client.internal.MsalUtils.appendQueryParameterToUrl(final String,final Map<String, String>)
- fullName: com.microsoft.identity.client.internal.MsalUtils.base64UrlEncodeToString(final String message)
  name: base64UrlEncodeToString(final String message)
  nameWithType: MsalUtils.base64UrlEncodeToString(final String message)
  parameters:
  - name: message
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public static String base64UrlEncodeToString(final String message)
  uid: com.microsoft.identity.client.internal.MsalUtils.base64UrlEncodeToString(final String)
- fullName: com.microsoft.identity.client.internal.MsalUtils.calculateExpiresOn(final String expiresIn)
  name: calculateExpiresOn(final String expiresIn)
  nameWithType: MsalUtils.calculateExpiresOn(final String expiresIn)
  parameters:
  - description: <p>The given expires in that is used to calculate the expires on. </p>
    name: expiresIn
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The date that the token will be expired. </p>
    type: <xref href="Date?alt=Date&text=Date" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Calculate expires on based on given exipres in. Data will hold date in milliseconds.</p>

    <p></p>
  syntax: public static Date calculateExpiresOn(final String expiresIn)
  uid: com.microsoft.identity.client.internal.MsalUtils.calculateExpiresOn(final String)
- fullName: com.microsoft.identity.client.internal.MsalUtils.convertArrayToSet(final String[] values)
  name: convertArrayToSet(final String[] values)
  nameWithType: MsalUtils.convertArrayToSet(final String[] values)
  parameters:
  - name: values
    type: <xref href="final+String+%5B%5D?alt=final+String+%5B%5D&text=final+String+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="Set%3CString%3E?alt=Set%3CString%3E&text=Set%3CString%3E" data-throw-if-not-resolved="False"/>
  syntax: public static Set<String> convertArrayToSet(final String[] values)
  uid: com.microsoft.identity.client.internal.MsalUtils.convertArrayToSet(final String [])
- fullName: com.microsoft.identity.client.internal.MsalUtils.createHash(String msg)
  name: createHash(String msg)
  nameWithType: MsalUtils.createHash(String msg)
  parameters:
  - name: msg
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public static String createHash(String msg)
  uid: com.microsoft.identity.client.internal.MsalUtils.createHash(String)
- fullName: com.microsoft.identity.client.internal.MsalUtils.decodeUrlToMap(final String url, final String delimiter)
  name: decodeUrlToMap(final String url, final String delimiter)
  nameWithType: MsalUtils.decodeUrlToMap(final String url, final String delimiter)
  parameters:
  - description: <p>The url to decode for. </p>
    name: url
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The delimiter used to parse the url string. </p>
    name: delimiter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The Map of the items decoded with the given delimiter. </p>
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Decode the given url, and convert it into map with the given delimiter.</p>

    <p></p>
  syntax: public static Map<String, String> decodeUrlToMap(final String url, final String delimiter)
  uid: com.microsoft.identity.client.internal.MsalUtils.decodeUrlToMap(final String,final String)
- fullName: com.microsoft.identity.client.internal.MsalUtils.extractJsonObjectIntoMap(final String jsonString)
  name: extractJsonObjectIntoMap(final String jsonString)
  nameWithType: MsalUtils.extractJsonObjectIntoMap(final String jsonString)
  parameters:
  - name: jsonString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Return the unmodifiable Map of response items. If the input jsonString is empty or blank, it't not in the correct json format, JsonException will be thrown. </p>
  syntax: public static Map<String, String> extractJsonObjectIntoMap(final String jsonString)
  uid: com.microsoft.identity.client.internal.MsalUtils.extractJsonObjectIntoMap(final String)
- fullName: com.microsoft.identity.client.internal.MsalUtils.getApplicationInfo(final Context context)
  name: getApplicationInfo(final Context context)
  nameWithType: MsalUtils.getApplicationInfo(final Context context)
  parameters:
  - name: context
    type: <xref href="final+Context?alt=final+Context&text=final+Context" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="ApplicationInfo?alt=ApplicationInfo&text=ApplicationInfo" data-throw-if-not-resolved="False"/>
  syntax: public static ApplicationInfo getApplicationInfo(final Context context)
  uid: com.microsoft.identity.client.internal.MsalUtils.getApplicationInfo(final Context)
- fullName: com.microsoft.identity.client.internal.MsalUtils.getChromePackage(final Context context)
  name: getChromePackage(final Context context)
  nameWithType: MsalUtils.getChromePackage(final Context context)
  parameters:
  - description: <p>The app context that is used to check the chrome packages. </p>
    name: context
    type: <xref href="final+Context?alt=final+Context&text=final+Context" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The chrome package name that exists on the device. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>CHROME_PACKAGE array contains all the chrome packages that is currently available on play store, we will only support chrome stable.</p>

    <p></p>
  syntax: public static String getChromePackage(final Context context)
  uid: com.microsoft.identity.client.internal.MsalUtils.getChromePackage(final Context)
- fullName: com.microsoft.identity.client.internal.MsalUtils.getChromePackageWithCustomTabSupport(final Context context)
  name: getChromePackageWithCustomTabSupport(final Context context)
  nameWithType: MsalUtils.getChromePackageWithCustomTabSupport(final Context context)
  parameters:
  - description: <p>The app <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref> to check for the package existence. </p>
    name: context
    type: <xref href="final+Context?alt=final+Context&text=final+Context" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The available package name for chrome. Will return null if no chrome package existed on the device. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Check if the chrome package with custom tab support is available on the device, and return the package name if available.</p>

    <p></p>
  syntax: public static String getChromePackageWithCustomTabSupport(final Context context)
  uid: com.microsoft.identity.client.internal.MsalUtils.getChromePackageWithCustomTabSupport(final Context)
- fullName: com.microsoft.identity.client.internal.MsalUtils.getExpiresOn(long expiresIn)
  name: getExpiresOn(long expiresIn)
  nameWithType: MsalUtils.getExpiresOn(long expiresIn)
  parameters:
  - name: expiresIn
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  syntax: public static long getExpiresOn(long expiresIn)
  uid: com.microsoft.identity.client.internal.MsalUtils.getExpiresOn(long)
- fullName: com.microsoft.identity.client.internal.MsalUtils.getExpiryOrDefault(String expiresIn)
  name: getExpiryOrDefault(String expiresIn)
  nameWithType: MsalUtils.getExpiryOrDefault(String expiresIn)
  parameters:
  - name: expiresIn
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public static int getExpiryOrDefault(String expiresIn)
  uid: com.microsoft.identity.client.internal.MsalUtils.getExpiryOrDefault(String)
- fullName: com.microsoft.identity.client.internal.MsalUtils.getScopesAsSet(final String scopes)
  name: getScopesAsSet(final String scopes)
  nameWithType: MsalUtils.getScopesAsSet(final String scopes)
  parameters:
  - description: <p>The scopes in the format of string, delimited by " ". </p>
    name: scopes
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Converted scopes in the format of set. </p>
    type: <xref href="Set%3CString%3E?alt=Set%3CString%3E&text=Set%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Converts the given string of scopes into set. The input String of scopes is delimited by " ".</p>

    <p></p>
  syntax: public static Set<String> getScopesAsSet(final String scopes)
  uid: com.microsoft.identity.client.internal.MsalUtils.getScopesAsSet(final String)
- fullName: com.microsoft.identity.client.internal.MsalUtils.getUniqueUserIdentifier(final String uid, final String utid)
  name: getUniqueUserIdentifier(final String uid, final String utid)
  nameWithType: MsalUtils.getUniqueUserIdentifier(final String uid, final String utid)
  parameters:
  - name: uid
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - name: utid
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public static String getUniqueUserIdentifier(final String uid, final String utid)
  uid: com.microsoft.identity.client.internal.MsalUtils.getUniqueUserIdentifier(final String,final String)
- fullName: com.microsoft.identity.client.internal.MsalUtils.getUrl(String endpoint)
  name: getUrl(String endpoint)
  nameWithType: MsalUtils.getUrl(String endpoint)
  parameters:
  - description: <p>url as a string </p>
    name: endpoint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>URL object for this string </p>
    type: <xref href="URL?alt=URL&text=URL" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>create url from given endpoint. return null if format is not right.</p>

    <p></p>
  syntax: public static URL getUrl(String endpoint)
  uid: com.microsoft.identity.client.internal.MsalUtils.getUrl(String)
- fullName: com.microsoft.identity.client.internal.MsalUtils.hasCustomTabRedirectActivity(@NonNull final Context context, @NonNull final String url)
  name: hasCustomTabRedirectActivity(@NonNull final Context context, @NonNull final String url)
  nameWithType: MsalUtils.hasCustomTabRedirectActivity(@NonNull final Context context, @NonNull final String url)
  parameters:
  - name: context
    type: <xref href="%40NonNull+final+Context?alt=%40NonNull+final+Context&text=%40NonNull+final+Context" data-throw-if-not-resolved="False"/>
  - name: url
    type: <xref href="%40NonNull+final+String?alt=%40NonNull+final+String&text=%40NonNull+final+String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>hasCustomTabRedirectActivity - Ensures that the developer has properly configured their AndroidManifest to expose the BrowserTabActivity.</p>

    <p></p>
  syntax: public static boolean hasCustomTabRedirectActivity(@NonNull final Context context, @NonNull final String url)
  uid: com.microsoft.identity.client.internal.MsalUtils.hasCustomTabRedirectActivity(@NonNull final Context,@NonNull final String)
- fullName: com.microsoft.identity.client.internal.MsalUtils.isEmpty(final String message)
  name: isEmpty(final String message)
  nameWithType: MsalUtils.isEmpty(final String message)
  parameters:
  - name: message
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>To improve test-ability with local Junit. Android.jar used for local Junit doesn't have a default implementation for <xref uid="" data-throw-if-not-resolved="false" data-raw-source="android.text.TextUtils"></xref>. </p>
  syntax: public static boolean isEmpty(final String message)
  uid: com.microsoft.identity.client.internal.MsalUtils.isEmpty(final String)
- fullName: com.microsoft.identity.client.internal.MsalUtils.isScopeIntersects(final Set<String> scopes, final Set<String> otherScopes)
  name: isScopeIntersects(final Set<String> scopes, final Set<String> otherScopes)
  nameWithType: MsalUtils.isScopeIntersects(final Set<String> scopes, final Set<String> otherScopes)
  parameters:
  - name: scopes
    type: <xref href="final+Set%3CString%3E?alt=final+Set%3CString%3E&text=final+Set%3CString%3E" data-throw-if-not-resolved="False"/>
  - name: otherScopes
    type: <xref href="final+Set%3CString%3E?alt=final+Set%3CString%3E&text=final+Set%3CString%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if there is an intersection between the scopes stored in the token cache key and the request scopes. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public static boolean isScopeIntersects(final Set<String> scopes, final Set<String> otherScopes)
  uid: com.microsoft.identity.client.internal.MsalUtils.isScopeIntersects(final Set<String>,final Set<String>)
- fullName: com.microsoft.identity.client.internal.MsalUtils.throwOnMainThread(final String methodName)
  name: throwOnMainThread(final String methodName)
  nameWithType: MsalUtils.throwOnMainThread(final String methodName)
  parameters:
  - name: methodName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  syntax: public static void throwOnMainThread(final String methodName)
  uid: com.microsoft.identity.client.internal.MsalUtils.throwOnMainThread(final String)
- fullName: com.microsoft.identity.client.internal.MsalUtils.urlFormDecode(final String source)
  name: urlFormDecode(final String source)
  nameWithType: MsalUtils.urlFormDecode(final String source)
  parameters:
  - description: <p>The String to decode for. </p>
    name: source
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="UnsupportedEncodingException?alt=UnsupportedEncodingException&text=UnsupportedEncodingException" data-throw-if-not-resolved="False"/>
    description: <p>If encoding is not supported. </p>
  returns:
    description: <p>The decoded string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Perform URL decode on the given source.</p>

    <p></p>
  syntax: public static String urlFormDecode(final String source)
  uid: com.microsoft.identity.client.internal.MsalUtils.urlFormDecode(final String)
- fullName: com.microsoft.identity.client.internal.MsalUtils.urlFormEncode(final String stringToEncode)
  name: urlFormEncode(final String stringToEncode)
  nameWithType: MsalUtils.urlFormEncode(final String stringToEncode)
  parameters:
  - description: <p>The String to encode. </p>
    name: stringToEncode
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="UnsupportedEncodingException?alt=UnsupportedEncodingException&text=UnsupportedEncodingException" data-throw-if-not-resolved="False"/>
    description: <p>If the named encoding is not supported. </p>
  returns:
    description: <p>The url encoded string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Translate the given string into the application/x-www-form-urlencoded using the utf_8 encoding scheme(The World Wide Web Consortium Recommendation states that UTF-8 should be used. Not doing so may introduce incompatibilites.).</p>

    <p></p>
  syntax: public static String urlFormEncode(final String stringToEncode)
  uid: com.microsoft.identity.client.internal.MsalUtils.urlFormEncode(final String)
- fullName: com.microsoft.identity.client.internal.MsalUtils.validateNonNullArg(@Nullable final Object o, @NonNull final String argName)
  name: validateNonNullArg(@Nullable final Object o, @NonNull final String argName)
  nameWithType: MsalUtils.validateNonNullArg(@Nullable final Object o, @NonNull final String argName)
  parameters:
  - name: o
    type: <xref href="%40Nullable+final+Object?alt=%40Nullable+final+Object&text=%40Nullable+final+Object" data-throw-if-not-resolved="False"/>
  - name: argName
    type: <xref href="%40NonNull+final+String?alt=%40NonNull+final+String&text=%40NonNull+final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="MsalArgumentException?alt=MsalArgumentException&text=MsalArgumentException" data-throw-if-not-resolved="False"/>
  summary: <p>Throws MsalArgumentException if the argument is null or empty </p>
  syntax: public static void validateNonNullArg(@Nullable final Object o, @NonNull final String argName)
  uid: com.microsoft.identity.client.internal.MsalUtils.validateNonNullArg(@Nullable final Object,@NonNull final String)
- fullName: com.microsoft.identity.client.internal.MsalUtils.validateNonNullArgument(@Nullable final Object o, @NonNull final String argName)
  name: validateNonNullArgument(@Nullable final Object o, @NonNull final String argName)
  nameWithType: MsalUtils.validateNonNullArgument(@Nullable final Object o, @NonNull final String argName)
  parameters:
  - name: o
    type: <xref href="%40Nullable+final+Object?alt=%40Nullable+final+Object&text=%40Nullable+final+Object" data-throw-if-not-resolved="False"/>
  - name: argName
    type: <xref href="%40NonNull+final+String?alt=%40NonNull+final+String&text=%40NonNull+final+String" data-throw-if-not-resolved="False"/>
  summary: <p>Throws IllegalArgumentException if the argument is null. </p>
  syntax: public static void validateNonNullArgument(@Nullable final Object o, @NonNull final String argName)
  uid: com.microsoft.identity.client.internal.MsalUtils.validateNonNullArgument(@Nullable final Object,@NonNull final String)
nameWithType: MsalUtils
syntax: public class MsalUtils
type: class
uid: com.microsoft.identity.client.internal.MsalUtils
fullName: com.microsoft.identity.client.internal.MsalUtils
name: MsalUtils
package: com.microsoft.identity.client.internal
summary: <p>Internal Util class for MSAL. </p>
metadata: {}
