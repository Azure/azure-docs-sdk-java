items:
- uid: system.fabric._fabric_client_settings
  id: _fabric_client_settings
  parent: system.fabric
  children:
  - system.fabric._fabric_client_settings.FabricClientSettings()
  - system.fabric._fabric_client_settings.getClientFriendlyName()
  - system.fabric._fabric_client_settings.getConnectionInitializationTimeout()
  - system.fabric._fabric_client_settings.getHealthOperationTimeout()
  - system.fabric._fabric_client_settings.getHealthReportRetrySendInterval()
  - system.fabric._fabric_client_settings.getHealthReportSendInterval()
  - system.fabric._fabric_client_settings.getKeepAliveInterval()
  - system.fabric._fabric_client_settings.getNotificationCacheUpdateTimeout()
  - system.fabric._fabric_client_settings.getNotificationGatewayConnectionTimeout()
  - system.fabric._fabric_client_settings.getPartitionLocationCacheBucketCount()
  - system.fabric._fabric_client_settings.getPartitionLocationCacheLimit()
  - system.fabric._fabric_client_settings.getServiceChangePollInterval()
  - system.fabric._fabric_client_settings.setClientFriendlyName(String)
  - system.fabric._fabric_client_settings.setConnectionInitializationTimeout(Duration)
  - system.fabric._fabric_client_settings.setHealthOperationTimeout(Duration)
  - system.fabric._fabric_client_settings.setHealthReportRetrySendInterval(Duration)
  - system.fabric._fabric_client_settings.setHealthReportSendInterval(Duration)
  - system.fabric._fabric_client_settings.setKeepAliveInterval(Duration)
  - system.fabric._fabric_client_settings.setNotificationCacheUpdateTimeout(Duration)
  - system.fabric._fabric_client_settings.setNotificationGatewayConnectionTimeout(Duration)
  - system.fabric._fabric_client_settings.setPartitionLocationCacheBucketCount(long)
  - system.fabric._fabric_client_settings.setPartitionLocationCacheLimit(long)
  - system.fabric._fabric_client_settings.setServiceChangePollInterval(Duration)
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: FabricClientSettings
  nameWithType: FabricClientSettings
  fullName: system.fabric.FabricClientSettings
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 7
  package: system.fabric
  summary: <p>Represents the configuration settings for the <xref href="system.fabric._fabric_client" data-throw-if-not-resolved="false"></xref> class. </p>
  syntax: &o1
    content: public class FabricClientSettings
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - system.fabric._fabric_client_settings.[static initializer]()
  - system.fabric._fabric_client_settings.FabricClientSettings(boolean)
  - system.fabric._fabric_client_settings.FabricClientSettings(long,Duration,Duration,Duration,Duration,Duration,String,long,Duration,Duration,Duration)
  - system.fabric._fabric_client_settings.FabricClientSettings(long,long,long,long,long,long,boolean,String,long,long,boolean,long,long)
  - system.fabric._fabric_client_settings.fromNative(long)
  - system.fabric._fabric_client_settings.toNative(PinCollection)
  - system.fabric._fabric_client_settings.validate()
- uid: system.fabric._fabric_client_settings.FabricClientSettings()
  id: FabricClientSettings()
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: FabricClientSettings()
  nameWithType: FabricClientSettings.FabricClientSettings()
  fullName: system.fabric.FabricClientSettings.FabricClientSettings()
  overload: system.fabric._fabric_client_settings.FabricClientSettings*
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 42
  package: system.fabric
  syntax:
    content: public FabricClientSettings()
- uid: system.fabric._fabric_client_settings.getClientFriendlyName()
  id: getClientFriendlyName()
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: getClientFriendlyName()
  nameWithType: FabricClientSettings.getClientFriendlyName()
  fullName: String system.fabric.FabricClientSettings.getClientFriendlyName()
  overload: system.fabric._fabric_client_settings.getClientFriendlyName*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 123
  package: system.fabric
  summary: >-
    <p>Gets the client friendly name that will appear in Service Fabric traces for debugging.</p>

    <p>

      <bold>Remarks:</bold> The default value is null and the client friendly name will automatically be generated as a UUID internally. </p>
  syntax:
    content: public String getClientFriendlyName()
    return:
      type: "26831127"
      description: <p>The client friendly name that will appear in Service Fabric traces for debugging. </p>
- uid: system.fabric._fabric_client_settings.getConnectionInitializationTimeout()
  id: getConnectionInitializationTimeout()
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: getConnectionInitializationTimeout()
  nameWithType: FabricClientSettings.getConnectionInitializationTimeout()
  fullName: Duration system.fabric.FabricClientSettings.getConnectionInitializationTimeout()
  overload: system.fabric._fabric_client_settings.getConnectionInitializationTimeout*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 239
  package: system.fabric
  summary: >-
    <p>Gets the timeout after which, if the current gateway address does not respond with a valid connection, another different address is randomly selected from the gateway addresses collection.</p>

    <p>

      <bold>Remarks:</bold>The default value of this property is 2 seconds. This property must be less than the value of the <xref href="system.fabric._fabric_client_settings.getServiceChangePollInterval()" data-throw-if-not-resolved="false"></xref> property. </p>
  syntax:
    content: public Duration getConnectionInitializationTimeout()
    return:
      type: e02a2de0
      description: <p>The timeout after the current gateway address does not respond with a valid connection. </p>
- uid: system.fabric._fabric_client_settings.getHealthOperationTimeout()
  id: getHealthOperationTimeout()
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: getHealthOperationTimeout()
  nameWithType: FabricClientSettings.getHealthOperationTimeout()
  fullName: Duration system.fabric.FabricClientSettings.getHealthOperationTimeout()
  overload: system.fabric._fabric_client_settings.getHealthOperationTimeout*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 306
  package: system.fabric
  summary: >-
    <p>Gets the timeout on health operation requests from the client to the gateway.</p>

    <p>

      <bold>Remarks:</bold>The default value of this property is 120 seconds. </p>
  syntax:
    content: public Duration getHealthOperationTimeout()
    return:
      type: e02a2de0
      description: <p>The timeout on health operation requests from the client to the gateway. </p>
- uid: system.fabric._fabric_client_settings.getHealthReportRetrySendInterval()
  id: getHealthReportRetrySendInterval()
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: getHealthReportRetrySendInterval()
  nameWithType: FabricClientSettings.getHealthReportRetrySendInterval()
  fullName: Duration system.fabric.FabricClientSettings.getHealthReportRetrySendInterval()
  overload: system.fabric._fabric_client_settings.getHealthReportRetrySendInterval*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 358
  package: system.fabric
  summary: >-
    <p>Gets the retry interval at which health reports that have not yet been acknowledged by the Health Manager are resent.</p>

    <p>

      <bold>Remarks:</bold>The default value of this property is 30 seconds. </p>
  syntax:
    content: public Duration getHealthReportRetrySendInterval()
    return:
      type: e02a2de0
      description: <p>The retry interval at which health reports that have not yet been acknowledged by the Health Manager are resent. </p>
- uid: system.fabric._fabric_client_settings.getHealthReportSendInterval()
  id: getHealthReportSendInterval()
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: getHealthReportSendInterval()
  nameWithType: FabricClientSettings.getHealthReportSendInterval()
  fullName: Duration system.fabric.FabricClientSettings.getHealthReportSendInterval()
  overload: system.fabric._fabric_client_settings.getHealthReportSendInterval*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 331
  package: system.fabric
  summary: >-
    <p>Gets the interval at which health reports are sent to Health Manager.</p>

    <p>

      <bold>Remarks:</bold>The default value of this property is 30 seconds. </p>
  syntax:
    content: public Duration getHealthReportSendInterval()
    return:
      type: e02a2de0
      description: <p>The interval at which health reports are sent to Health Manager. </p>
- uid: system.fabric._fabric_client_settings.getKeepAliveInterval()
  id: getKeepAliveInterval()
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: getKeepAliveInterval()
  nameWithType: FabricClientSettings.getKeepAliveInterval()
  fullName: Duration system.fabric.FabricClientSettings.getKeepAliveInterval()
  overload: system.fabric._fabric_client_settings.getKeepAliveInterval*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 275
  package: system.fabric
  summary: >-
    <p>Gets the interval at which the <xref href="system.fabric._fabric_client" data-throw-if-not-resolved="false"></xref> will ping the connected endpoint.</p>

    <p>

      <bold>Remarks:</bold>The default value of this property is 0 seconds. This property can't be updated after the <xref href="system.fabric._fabric_client" data-throw-if-not-resolved="false"></xref> is opened. Setting this property will throw a <ref refid="" kindref="compound">java.lang.IllegalArgumentException</ref> exception. <xref href="system.fabric._fabric_client" data-throw-if-not-resolved="false"></xref> will continue pinging as long as it has pending operations. </p>
  syntax:
    content: public Duration getKeepAliveInterval()
    return:
      type: e02a2de0
      description: <p>The interval at which the <xref href="system.fabric._fabric_client" data-throw-if-not-resolved="false"></xref> will ping the connected endpoint. </p>
- uid: system.fabric._fabric_client_settings.getNotificationCacheUpdateTimeout()
  id: getNotificationCacheUpdateTimeout()
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: getNotificationCacheUpdateTimeout()
  nameWithType: FabricClientSettings.getNotificationCacheUpdateTimeout()
  fullName: Duration system.fabric.FabricClientSettings.getNotificationCacheUpdateTimeout()
  overload: system.fabric._fabric_client_settings.getNotificationCacheUpdateTimeout*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 406
  package: system.fabric
  summary: >-
    <p>Gets the timeout for updating the local cache in response to service notifications. The default value is 30 seconds.</p>

    <p></p>
  syntax:
    content: public Duration getNotificationCacheUpdateTimeout()
    return:
      type: e02a2de0
      description: <p>The timeout for updating the local cache in response to service notifications. </p>
- uid: system.fabric._fabric_client_settings.getNotificationGatewayConnectionTimeout()
  id: getNotificationGatewayConnectionTimeout()
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: getNotificationGatewayConnectionTimeout()
  nameWithType: FabricClientSettings.getNotificationGatewayConnectionTimeout()
  fullName: Duration system.fabric.FabricClientSettings.getNotificationGatewayConnectionTimeout()
  overload: system.fabric._fabric_client_settings.getNotificationGatewayConnectionTimeout*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 384
  package: system.fabric
  summary: >-
    <p>Gets the timeout for running a re-connection protocol if the client has registered for service notifications. The default value is 30 seconds.</p>

    <p></p>
  syntax:
    content: public Duration getNotificationGatewayConnectionTimeout()
    return:
      type: e02a2de0
      description: <p>The timeout for running a re-connection protocol if the client has registered for service notifications. </p>
- uid: system.fabric._fabric_client_settings.getPartitionLocationCacheBucketCount()
  id: getPartitionLocationCacheBucketCount()
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: getPartitionLocationCacheBucketCount()
  nameWithType: FabricClientSettings.getPartitionLocationCacheBucketCount()
  fullName: long system.fabric.FabricClientSettings.getPartitionLocationCacheBucketCount()
  overload: system.fabric._fabric_client_settings.getPartitionLocationCacheBucketCount*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 180
  package: system.fabric
  summary: >-
    <p>Gets the bucket count used by the clientâ€™s service resolution cache.</p>

    <p>

      <bold>Remarks:</bold>The default value is 1024. </p>
  syntax:
    content: public long getPartitionLocationCacheBucketCount()
    return:
      type: 0364520f
      description: <p>The bucket count used by the clientâ€™s service resolution cache. </p>
- uid: system.fabric._fabric_client_settings.getPartitionLocationCacheLimit()
  id: getPartitionLocationCacheLimit()
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: getPartitionLocationCacheLimit()
  nameWithType: FabricClientSettings.getPartitionLocationCacheLimit()
  fullName: long system.fabric.FabricClientSettings.getPartitionLocationCacheLimit()
  overload: system.fabric._fabric_client_settings.getPartitionLocationCacheLimit*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 152
  package: system.fabric
  summary: >-
    <p>Gets the maximum number of cached location entries on the client.</p>

    <p>

      <bold>Remarks:</bold>The default value of this property is 1000. This property is not updatable. Setting this property will throw a <ref refid="" kindref="compound">java.lang.IllegalArgumentException</ref> exception. When the cache limit is reached the oldest entries are discarded first. The default value is 100. </p>
  syntax:
    content: public long getPartitionLocationCacheLimit()
    return:
      type: 0364520f
      description: <p>The maximum number of cached location entries on the client. </p>
- uid: system.fabric._fabric_client_settings.getServiceChangePollInterval()
  id: getServiceChangePollInterval()
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: getServiceChangePollInterval()
  nameWithType: FabricClientSettings.getServiceChangePollInterval()
  fullName: Duration system.fabric.FabricClientSettings.getServiceChangePollInterval()
  overload: system.fabric._fabric_client_settings.getServiceChangePollInterval*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 207
  package: system.fabric
  summary: >-
    <p>Gets the timeout on service change notification requests from the client to the gateway for all registered callbacks.</p>

    <p>

      <bold>Remarks:</bold>The default value of this property is 120 seconds. </p>
  syntax: &o2
    content: public Duration getServiceChangePollInterval()
    return:
      type: e02a2de0
      description: <p>The timeout on service change notification requests from the client to the gateway for all registered callbacks. </p>
- uid: system.fabric._fabric_client_settings.setClientFriendlyName(String)
  id: setClientFriendlyName(String)
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: setClientFriendlyName(String clientFriendlyName)
  nameWithType: FabricClientSettings.setClientFriendlyName(String clientFriendlyName)
  fullName: void system.fabric.FabricClientSettings.setClientFriendlyName(String clientFriendlyName)
  overload: system.fabric._fabric_client_settings.setClientFriendlyName*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 137
  package: system.fabric
  summary: >-
    <p>Sets the client friendly name that will appear in Service Fabric traces for debugging.</p>

    <p>

      <bold>Remarks:</bold> The default value is null and the client friendly name will automatically be generated as a UUID internally. </p>
  syntax:
    content: public void setClientFriendlyName(String clientFriendlyName)
    parameters:
    - id: clientFriendlyName
      type: "26831127"
      description: <p>The client friendly name that will appear in Service Fabric traces for debugging. </p>
- uid: system.fabric._fabric_client_settings.setConnectionInitializationTimeout(Duration)
  id: setConnectionInitializationTimeout(Duration)
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: setConnectionInitializationTimeout(Duration connectionInitializationTimeout)
  nameWithType: FabricClientSettings.setConnectionInitializationTimeout(Duration connectionInitializationTimeout)
  fullName: void system.fabric.FabricClientSettings.setConnectionInitializationTimeout(Duration connectionInitializationTimeout)
  overload: system.fabric._fabric_client_settings.setConnectionInitializationTimeout*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 257
  package: system.fabric
  summary: >-
    <p>Sets the timeout after which, if the current gateway address does not respond with a valid connection, another different address is randomly selected from the gateway addresses collection.</p>

    <p>

      <bold>Remarks:</bold>The default value of this property is 2 seconds. This property must be less than the value of the <xref href="system.fabric._fabric_client_settings.getServiceChangePollInterval()" data-throw-if-not-resolved="false"></xref> property. </p>
  syntax:
    content: public void setConnectionInitializationTimeout(Duration connectionInitializationTimeout)
    parameters:
    - id: connectionInitializationTimeout
      type: e02a2de0
      description: <p>The timeout after the current gateway address does not respond with a valid connection. </p>
- uid: system.fabric._fabric_client_settings.setHealthOperationTimeout(Duration)
  id: setHealthOperationTimeout(Duration)
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: setHealthOperationTimeout(Duration healthOperationTimeout)
  nameWithType: FabricClientSettings.setHealthOperationTimeout(Duration healthOperationTimeout)
  fullName: void system.fabric.FabricClientSettings.setHealthOperationTimeout(Duration healthOperationTimeout)
  overload: system.fabric._fabric_client_settings.setHealthOperationTimeout*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 319
  package: system.fabric
  summary: >-
    <p>Sets the timeout on health operation requests from the client to the gateway.</p>

    <p>

      <bold>Remarks:</bold>The default value of this property is 120 seconds. </p>
  syntax:
    content: public void setHealthOperationTimeout(Duration healthOperationTimeout)
    parameters:
    - id: healthOperationTimeout
      type: e02a2de0
      description: <p>The timeout on health operation requests from the client to the gateway. </p>
- uid: system.fabric._fabric_client_settings.setHealthReportRetrySendInterval(Duration)
  id: setHealthReportRetrySendInterval(Duration)
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: setHealthReportRetrySendInterval(Duration healthReportRetrySendInterval)
  nameWithType: FabricClientSettings.setHealthReportRetrySendInterval(Duration healthReportRetrySendInterval)
  fullName: void system.fabric.FabricClientSettings.setHealthReportRetrySendInterval(Duration healthReportRetrySendInterval)
  overload: system.fabric._fabric_client_settings.setHealthReportRetrySendInterval*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 373
  package: system.fabric
  summary: >-
    <p>Sets the retry interval at which health reports that have not yet been acknowledged by the Health Manager are resent.</p>

    <p>

      <bold>Remarks:</bold>The default value of this property is 30 seconds. </p>
  syntax:
    content: public void setHealthReportRetrySendInterval(Duration healthReportRetrySendInterval)
    parameters:
    - id: healthReportRetrySendInterval
      type: e02a2de0
      description: <p>The retry interval at which health reports that have not yet been acknowledged by the Health Manager are resent. </p>
- uid: system.fabric._fabric_client_settings.setHealthReportSendInterval(Duration)
  id: setHealthReportSendInterval(Duration)
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: setHealthReportSendInterval(Duration healthReportSendInterval)
  nameWithType: FabricClientSettings.setHealthReportSendInterval(Duration healthReportSendInterval)
  fullName: void system.fabric.FabricClientSettings.setHealthReportSendInterval(Duration healthReportSendInterval)
  overload: system.fabric._fabric_client_settings.setHealthReportSendInterval*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 344
  package: system.fabric
  summary: >-
    <p>Sets the interval at which health reports are sent to Health Manager.</p>

    <p>

      <bold>Remarks:</bold>The default value of this property is 30 seconds. </p>
  syntax:
    content: public void setHealthReportSendInterval(Duration healthReportSendInterval)
    parameters:
    - id: healthReportSendInterval
      type: e02a2de0
      description: <p>The interval at which health reports are sent to Health Manager. </p>
- uid: system.fabric._fabric_client_settings.setKeepAliveInterval(Duration)
  id: setKeepAliveInterval(Duration)
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: setKeepAliveInterval(Duration keepAliveInterval)
  nameWithType: FabricClientSettings.setKeepAliveInterval(Duration keepAliveInterval)
  fullName: void system.fabric.FabricClientSettings.setKeepAliveInterval(Duration keepAliveInterval)
  overload: system.fabric._fabric_client_settings.setKeepAliveInterval*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 294
  package: system.fabric
  summary: >-
    <p>Sets the interval at which the <xref href="system.fabric._fabric_client" data-throw-if-not-resolved="false"></xref> will ping the connected endpoint.</p>

    <p>

      <bold>Remarks:</bold>The default value of this property is 0 seconds. This property can't be updated after the <xref href="system.fabric._fabric_client" data-throw-if-not-resolved="false"></xref> is opened. Setting this property will throw a <ref refid="" kindref="compound">java.lang.IllegalArgumentException</ref> exception. <xref href="system.fabric._fabric_client" data-throw-if-not-resolved="false"></xref> will continue pinging as long as it has pending operations. </p>
  syntax:
    content: public void setKeepAliveInterval(Duration keepAliveInterval)
    parameters:
    - id: keepAliveInterval
      type: e02a2de0
      description: <p>The interval at which the <xref href="system.fabric._fabric_client" data-throw-if-not-resolved="false"></xref> will ping the connected endpoint. </p>
- uid: system.fabric._fabric_client_settings.setNotificationCacheUpdateTimeout(Duration)
  id: setNotificationCacheUpdateTimeout(Duration)
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: setNotificationCacheUpdateTimeout(Duration notificationCacheUpdateTimeout)
  nameWithType: FabricClientSettings.setNotificationCacheUpdateTimeout(Duration notificationCacheUpdateTimeout)
  fullName: void system.fabric.FabricClientSettings.setNotificationCacheUpdateTimeout(Duration notificationCacheUpdateTimeout)
  overload: system.fabric._fabric_client_settings.setNotificationCacheUpdateTimeout*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 417
  package: system.fabric
  summary: >-
    <p>Sets the timeout for updating the local cache in response to service notifications. The default value is 30 seconds.</p>

    <p></p>
  syntax:
    content: public void setNotificationCacheUpdateTimeout(Duration notificationCacheUpdateTimeout)
    parameters:
    - id: notificationCacheUpdateTimeout
      type: e02a2de0
      description: <p>The timeout for updating the local cache in response to service notifications. </p>
- uid: system.fabric._fabric_client_settings.setNotificationGatewayConnectionTimeout(Duration)
  id: setNotificationGatewayConnectionTimeout(Duration)
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: setNotificationGatewayConnectionTimeout(Duration notificationGatewayConnectionTimeout)
  nameWithType: FabricClientSettings.setNotificationGatewayConnectionTimeout(Duration notificationGatewayConnectionTimeout)
  fullName: void system.fabric.FabricClientSettings.setNotificationGatewayConnectionTimeout(Duration notificationGatewayConnectionTimeout)
  overload: system.fabric._fabric_client_settings.setNotificationGatewayConnectionTimeout*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 396
  package: system.fabric
  summary: >-
    <p>Sets the timeout for running a re-connection protocol if the client has registered for service notifications. The default value is 30 seconds.</p>

    <p></p>
  syntax:
    content: public void setNotificationGatewayConnectionTimeout(Duration notificationGatewayConnectionTimeout)
    parameters:
    - id: notificationGatewayConnectionTimeout
      type: e02a2de0
      description: <p>The timeout for running a re-connection protocol if the client has registered for service notifications. </p>
- uid: system.fabric._fabric_client_settings.setPartitionLocationCacheBucketCount(long)
  id: setPartitionLocationCacheBucketCount(long)
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: setPartitionLocationCacheBucketCount(long partitionLocationCacheBucketCount)
  nameWithType: FabricClientSettings.setPartitionLocationCacheBucketCount(long partitionLocationCacheBucketCount)
  fullName: void system.fabric.FabricClientSettings.setPartitionLocationCacheBucketCount(long partitionLocationCacheBucketCount)
  overload: system.fabric._fabric_client_settings.setPartitionLocationCacheBucketCount*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 193
  package: system.fabric
  summary: >-
    <p>Sets the bucket count used by the clientâ€™s service resolution cache.</p>

    <p>

      <bold>Remarks:</bold>The default value is 1024. </p>
  syntax:
    content: public void setPartitionLocationCacheBucketCount(long partitionLocationCacheBucketCount)
    parameters:
    - id: partitionLocationCacheBucketCount
      type: 0364520f
      description: <p>The bucket count used by the clientâ€™s service resolution cache. </p>
- uid: system.fabric._fabric_client_settings.setPartitionLocationCacheLimit(long)
  id: setPartitionLocationCacheLimit(long)
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: setPartitionLocationCacheLimit(long partitionLocationCacheLimit)
  nameWithType: FabricClientSettings.setPartitionLocationCacheLimit(long partitionLocationCacheLimit)
  fullName: void system.fabric.FabricClientSettings.setPartitionLocationCacheLimit(long partitionLocationCacheLimit)
  overload: system.fabric._fabric_client_settings.setPartitionLocationCacheLimit*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 168
  package: system.fabric
  summary: >-
    <p>Sets the maximum number of cached location entries on the client.</p>

    <p>

      <bold>Remarks:</bold>The default value of this property is 1000. This property is not updatable. Setting this property will throw a <ref refid="" kindref="compound">java.lang.IllegalArgumentException</ref> exception. When the cache limit is reached the oldest entries are discarded first. The default value is 100. </p>
  syntax:
    content: public void setPartitionLocationCacheLimit(long partitionLocationCacheLimit)
    parameters:
    - id: partitionLocationCacheLimit
      type: 0364520f
      description: <p>The maximum number of cached location entries on the client. </p>
- uid: system.fabric._fabric_client_settings.setServiceChangePollInterval(Duration)
  id: setServiceChangePollInterval(Duration)
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  langs:
  - java
  name: setServiceChangePollInterval(Duration serviceChangePollInterval)
  nameWithType: FabricClientSettings.setServiceChangePollInterval(Duration serviceChangePollInterval)
  fullName: void system.fabric.FabricClientSettings.setServiceChangePollInterval(Duration serviceChangePollInterval)
  overload: system.fabric._fabric_client_settings.setServiceChangePollInterval*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricClientSettings.java
    startLine: 222
  package: system.fabric
  summary: >-
    <p>Sets the timeout on service change notification requests from the client to the gateway for all registered callbacks.</p>

    <p>

      <bold>Remarks:</bold>The default value of this property is 120 seconds. </p>
  syntax:
    content: public void setServiceChangePollInterval(Duration serviceChangePollInterval)
    parameters:
    - id: serviceChangePollInterval
      type: e02a2de0
      description: <p>The timeout on service change notification requests from the client to the gateway for all registered callbacks. </p>
references:
- uid: system.fabric._fabric_client_settings.FabricClientSettings*
  name: FabricClientSettings
  nameWithType: FabricClientSettings.FabricClientSettings
  fullName: system.fabric.FabricClientSettings.FabricClientSettings
  package: system.fabric
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: system.fabric._fabric_client_settings.getClientFriendlyName*
  name: getClientFriendlyName
  nameWithType: FabricClientSettings.getClientFriendlyName
  fullName: String system.fabric.FabricClientSettings.getClientFriendlyName
  package: system.fabric
- uid: system.fabric._fabric_client_settings.setClientFriendlyName*
  name: setClientFriendlyName
  nameWithType: FabricClientSettings.setClientFriendlyName
  fullName: void system.fabric.FabricClientSettings.setClientFriendlyName
  package: system.fabric
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: system.fabric._fabric_client_settings.getPartitionLocationCacheLimit*
  name: getPartitionLocationCacheLimit
  nameWithType: FabricClientSettings.getPartitionLocationCacheLimit
  fullName: long system.fabric.FabricClientSettings.getPartitionLocationCacheLimit
  package: system.fabric
- uid: system.fabric._fabric_client_settings.setPartitionLocationCacheLimit*
  name: setPartitionLocationCacheLimit
  nameWithType: FabricClientSettings.setPartitionLocationCacheLimit
  fullName: void system.fabric.FabricClientSettings.setPartitionLocationCacheLimit
  package: system.fabric
- uid: system.fabric._fabric_client_settings.getPartitionLocationCacheBucketCount*
  name: getPartitionLocationCacheBucketCount
  nameWithType: FabricClientSettings.getPartitionLocationCacheBucketCount
  fullName: long system.fabric.FabricClientSettings.getPartitionLocationCacheBucketCount
  package: system.fabric
- uid: system.fabric._fabric_client_settings.setPartitionLocationCacheBucketCount*
  name: setPartitionLocationCacheBucketCount
  nameWithType: FabricClientSettings.setPartitionLocationCacheBucketCount
  fullName: void system.fabric.FabricClientSettings.setPartitionLocationCacheBucketCount
  package: system.fabric
- uid: e02a2de0
  spec.java:
  - name: Duration
    fullName: Duration
- uid: system.fabric._fabric_client_settings.getServiceChangePollInterval*
  name: getServiceChangePollInterval
  nameWithType: FabricClientSettings.getServiceChangePollInterval
  fullName: Duration system.fabric.FabricClientSettings.getServiceChangePollInterval
  package: system.fabric
- uid: system.fabric._fabric_client_settings.setServiceChangePollInterval*
  name: setServiceChangePollInterval
  nameWithType: FabricClientSettings.setServiceChangePollInterval
  fullName: void system.fabric.FabricClientSettings.setServiceChangePollInterval
  package: system.fabric
- uid: system.fabric._fabric_client_settings.getConnectionInitializationTimeout*
  name: getConnectionInitializationTimeout
  nameWithType: FabricClientSettings.getConnectionInitializationTimeout
  fullName: Duration system.fabric.FabricClientSettings.getConnectionInitializationTimeout
  package: system.fabric
- uid: system.fabric._fabric_client_settings.setConnectionInitializationTimeout*
  name: setConnectionInitializationTimeout
  nameWithType: FabricClientSettings.setConnectionInitializationTimeout
  fullName: void system.fabric.FabricClientSettings.setConnectionInitializationTimeout
  package: system.fabric
- uid: system.fabric._fabric_client_settings.getKeepAliveInterval*
  name: getKeepAliveInterval
  nameWithType: FabricClientSettings.getKeepAliveInterval
  fullName: Duration system.fabric.FabricClientSettings.getKeepAliveInterval
  package: system.fabric
- uid: system.fabric._fabric_client_settings.setKeepAliveInterval*
  name: setKeepAliveInterval
  nameWithType: FabricClientSettings.setKeepAliveInterval
  fullName: void system.fabric.FabricClientSettings.setKeepAliveInterval
  package: system.fabric
- uid: system.fabric._fabric_client_settings.getHealthOperationTimeout*
  name: getHealthOperationTimeout
  nameWithType: FabricClientSettings.getHealthOperationTimeout
  fullName: Duration system.fabric.FabricClientSettings.getHealthOperationTimeout
  package: system.fabric
- uid: system.fabric._fabric_client_settings.setHealthOperationTimeout*
  name: setHealthOperationTimeout
  nameWithType: FabricClientSettings.setHealthOperationTimeout
  fullName: void system.fabric.FabricClientSettings.setHealthOperationTimeout
  package: system.fabric
- uid: system.fabric._fabric_client_settings.getHealthReportSendInterval*
  name: getHealthReportSendInterval
  nameWithType: FabricClientSettings.getHealthReportSendInterval
  fullName: Duration system.fabric.FabricClientSettings.getHealthReportSendInterval
  package: system.fabric
- uid: system.fabric._fabric_client_settings.setHealthReportSendInterval*
  name: setHealthReportSendInterval
  nameWithType: FabricClientSettings.setHealthReportSendInterval
  fullName: void system.fabric.FabricClientSettings.setHealthReportSendInterval
  package: system.fabric
- uid: system.fabric._fabric_client_settings.getHealthReportRetrySendInterval*
  name: getHealthReportRetrySendInterval
  nameWithType: FabricClientSettings.getHealthReportRetrySendInterval
  fullName: Duration system.fabric.FabricClientSettings.getHealthReportRetrySendInterval
  package: system.fabric
- uid: system.fabric._fabric_client_settings.setHealthReportRetrySendInterval*
  name: setHealthReportRetrySendInterval
  nameWithType: FabricClientSettings.setHealthReportRetrySendInterval
  fullName: void system.fabric.FabricClientSettings.setHealthReportRetrySendInterval
  package: system.fabric
- uid: system.fabric._fabric_client_settings.getNotificationGatewayConnectionTimeout*
  name: getNotificationGatewayConnectionTimeout
  nameWithType: FabricClientSettings.getNotificationGatewayConnectionTimeout
  fullName: Duration system.fabric.FabricClientSettings.getNotificationGatewayConnectionTimeout
  package: system.fabric
- uid: system.fabric._fabric_client_settings.setNotificationGatewayConnectionTimeout*
  name: setNotificationGatewayConnectionTimeout
  nameWithType: FabricClientSettings.setNotificationGatewayConnectionTimeout
  fullName: void system.fabric.FabricClientSettings.setNotificationGatewayConnectionTimeout
  package: system.fabric
- uid: system.fabric._fabric_client_settings.getNotificationCacheUpdateTimeout*
  name: getNotificationCacheUpdateTimeout
  nameWithType: FabricClientSettings.getNotificationCacheUpdateTimeout
  fullName: Duration system.fabric.FabricClientSettings.getNotificationCacheUpdateTimeout
  package: system.fabric
- uid: system.fabric._fabric_client_settings.setNotificationCacheUpdateTimeout*
  name: setNotificationCacheUpdateTimeout
  nameWithType: FabricClientSettings.setNotificationCacheUpdateTimeout
  fullName: void system.fabric.FabricClientSettings.setNotificationCacheUpdateTimeout
  package: system.fabric
- uid: system.fabric._fabric_client_settings.[static initializer]()
- uid: system.fabric._fabric_client_settings.FabricClientSettings(boolean)
- uid: system.fabric._fabric_client_settings.FabricClientSettings(long,Duration,Duration,Duration,Duration,Duration,String,long,Duration,Duration,Duration)
- uid: system.fabric._fabric_client_settings.FabricClientSettings(long,long,long,long,long,long,boolean,String,long,long,boolean,long,long)
- uid: system.fabric._fabric_client_settings.fromNative(long)
- uid: system.fabric._fabric_client_settings.toNative(PinCollection)
- uid: system.fabric._fabric_client_settings.validate()
- uid: system.fabric._fabric_client_settings
  parent: system.fabric
  href: system.fabric._fabric_client_settings.yml
  name: FabricClientSettings
  nameWithType: FabricClientSettings
  fullName: system.fabric.FabricClientSettings
  type: Class
  summary: <p>Represents the configuration settings for the <xref href="system.fabric._fabric_client" data-throw-if-not-resolved="false"></xref> class. </p>
  syntax: *o1
- uid: system.fabric._fabric_client_settings.getServiceChangePollInterval()
  parent: system.fabric._fabric_client_settings
  href: system.fabric._fabric_client_settings.yml
  name: getServiceChangePollInterval()
  nameWithType: FabricClientSettings.getServiceChangePollInterval()
  fullName: Duration system.fabric.FabricClientSettings.getServiceChangePollInterval()
  type: Method
  summary: >-
    <p>Gets the timeout on service change notification requests from the client to the gateway for all registered callbacks.</p>

    <p>

      <bold>Remarks:</bold>The default value of this property is 120 seconds. </p>
  syntax: *o2
- uid: system.fabric._fabric_client
  parent: system.fabric
  href: system.fabric._fabric_client.yml
  name: FabricClient
  nameWithType: FabricClient
  fullName: system.fabric.FabricClient
  type: Class
  summary: >-
    <p>Creates and manages Service Fabric services and other entities. </p>

    <p>

      <bold>Remarks:</bold>It is highly recommended that you share FabricClients as much as possible. This is because the <xref href="system.fabric._fabric_client" data-throw-if-not-resolved="false"></xref> has multiple optimizations such as caching and batching that you would not be able to fully utilize otherwise. </p>
  syntax:
    content: public class FabricClient
- uid: system.fabric._pin_collection
  parent: system.fabric
  href: system.fabric._pin_collection.yml
  name: PinCollection
  nameWithType: PinCollection
  fullName: system.fabric.PinCollection
  type: Class
  syntax:
    content: public class PinCollection
