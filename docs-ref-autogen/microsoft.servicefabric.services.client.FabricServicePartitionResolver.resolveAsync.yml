### YamlMime:JavaMember
nameWithType: FabricServicePartitionResolver.resolveAsync
type: method
members:
- fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(ResolvedServicePartition previousRsp)
  name: resolveAsync(ResolvedServicePartition previousRsp)
  nameWithType: FabricServicePartitionResolver.resolveAsync(ResolvedServicePartition previousRsp)
  parameters:
  - description: <p>Previous resolved service partition </p>
    name: previousRsp
    type: <xref href="system.fabric.ResolvedServicePartition?alt=system.fabric.ResolvedServicePartition&text=ResolvedServicePartition" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref> that represents outstanding operation. The result from the Task is the <xref uid="system.fabric.ResolvedServicePartition" data-throw-if-not-resolved="false">system.fabric.ResolvedServicePartition</xref> object, that contains the information about the resolved service partition including the service endpoints. </p>
    type: CompletableFuture&lt;<xref href="system.fabric.ResolvedServicePartition?alt=system.fabric.ResolvedServicePartition&text=ResolvedServicePartition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Resolves a partition of the specified service by invoking FabricClient's <xref uid="" data-throw-if-not-resolved="false">system.fabric.client.ServiceManagementClient#resolveServicePartitionAsync(URI)</xref> method with back-off/retry on retriable errors. This takes in the resolved service partition that was got via an earlier invocation of the ResolveAsync() method. This api-overload is used in cases where the client knows that the resolved service partition that it has is no longer valid.</p>

    <p></p>
  syntax: public CompletableFuture<ResolvedServicePartition> resolveAsync(ResolvedServicePartition previousRsp)
  uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(ResolvedServicePartition)
- fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(ResolvedServicePartition previousRsp, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  name: resolveAsync(ResolvedServicePartition previousRsp, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  nameWithType: FabricServicePartitionResolver.resolveAsync(ResolvedServicePartition previousRsp, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  overridden: microsoft.servicefabric.services.client.ServicePartitionResolver.resolveAsync(ResolvedServicePartition,Duration,Duration)
  parameters:
  - description: <p>Previous resolved service partition </p>
    name: previousRsp
    type: <xref href="system.fabric.ResolvedServicePartition?alt=system.fabric.ResolvedServicePartition&text=ResolvedServicePartition" data-throw-if-not-resolved="False"/>
  - description: <p>The timeout passed to ServiceManagementClient::resolveServicePartitionAsync(URI) method </p>
    name: resolveTimeoutPerTry
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: <p>The interval to back-off before retrying when resolve service partition fails with a retriable exception. </p>
    name: maxRetryBackoffInterval
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref> that represents outstanding operation. The result from the Task is the <xref uid="system.fabric.ResolvedServicePartition" data-throw-if-not-resolved="false">system.fabric.ResolvedServicePartition</xref> object, that contains the information about the resolved service partition including the service endpoints. </p>
    type: CompletableFuture&lt;<xref href="system.fabric.ResolvedServicePartition?alt=system.fabric.ResolvedServicePartition&text=ResolvedServicePartition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Resolves a partition of the specified service with backoff/ retry on retriable errors. This takes in the resolved service partition that was got via an earlier invocation of the ResolveAsync() method. This api-overload is used in cases where the client knows that the resolved service partition that it has is no longer valid.</p>

    <p></p>
  syntax: public CompletableFuture<ResolvedServicePartition> resolveAsync(ResolvedServicePartition previousRsp, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(ResolvedServicePartition,Duration,Duration)
- fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(URI serviceUri, ServicePartitionKey partitionKey)
  name: resolveAsync(URI serviceUri, ServicePartitionKey partitionKey)
  nameWithType: FabricServicePartitionResolver.resolveAsync(URI serviceUri, ServicePartitionKey partitionKey)
  parameters:
  - description: <p>Uri of the service to resolve </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>Key that identifies the partition to resolve </p>
    name: partitionKey
    type: <xref href="microsoft.servicefabric.services.client.ServicePartitionKey?alt=microsoft.servicefabric.services.client.ServicePartitionKey&text=ServicePartitionKey" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref> that represents outstanding operation. The result from the Task is the <xref uid="system.fabric.ResolvedServicePartition" data-throw-if-not-resolved="false">system.fabric.ResolvedServicePartition</xref> object, that contains the information about the resolved service partition including the service endpoints. </p>
    type: CompletableFuture&lt;<xref href="system.fabric.ResolvedServicePartition?alt=system.fabric.ResolvedServicePartition&text=ResolvedServicePartition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Resolves a partition of the specified service by invoking FabricClient's <xref uid="" data-throw-if-not-resolved="false">system.fabric.client.ServiceManagementClient#resolveServicePartitionAsync(URI)</xref>method with back-off/retry on retriable errors.</p>

    <p></p>
  syntax: public CompletableFuture<ResolvedServicePartition> resolveAsync(URI serviceUri, ServicePartitionKey partitionKey)
  uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(URI,ServicePartitionKey)
- fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(URI serviceUri, ServicePartitionKey partitionKey, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  name: resolveAsync(URI serviceUri, ServicePartitionKey partitionKey, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  nameWithType: FabricServicePartitionResolver.resolveAsync(URI serviceUri, ServicePartitionKey partitionKey, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  overridden: microsoft.servicefabric.services.client.ServicePartitionResolver.resolveAsync(URI,ServicePartitionKey,Duration,Duration)
  parameters:
  - description: <p>Uri of the service to resolve </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>Key that identifies the partition to resolve </p>
    name: partitionKey
    type: <xref href="microsoft.servicefabric.services.client.ServicePartitionKey?alt=microsoft.servicefabric.services.client.ServicePartitionKey&text=ServicePartitionKey" data-throw-if-not-resolved="False"/>
  - description: <p>The timeout passed to <xref uid="" data-throw-if-not-resolved="false">system.fabric.client.ServiceManagementClient#resolveServicePartitionAsync(URI)</xref> method </p>
    name: resolveTimeoutPerTry
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: <p>The interval to back-off before retrying when <xref uid="" data-throw-if-not-resolved="false">system.fabric.client.ServiceManagementClient#resolveServicePartitionAsync(URI)</xref>method fails with a retriable exception. </p>
    name: maxRetryBackoffInterval
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref> that represents outstanding operation. The result from the Task is the <xref uid="system.fabric.ResolvedServicePartition" data-throw-if-not-resolved="false">system.fabric.ResolvedServicePartition</xref> object, that contains the information about the resolved service partition including the service endpoints. </p>
    type: CompletableFuture&lt;<xref href="system.fabric.ResolvedServicePartition?alt=system.fabric.ResolvedServicePartition&text=ResolvedServicePartition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Resolves a partition of the specified service by invoking <xref uid="" data-throw-if-not-resolved="false">system.fabric.client.ServiceManagementClient#resolveServicePartitionAsync(URI)</xref> method with back-off/retry on retriable errors.</p>

    <p></p>
  syntax: public CompletableFuture<ResolvedServicePartition> resolveAsync(URI serviceUri, ServicePartitionKey partitionKey, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(URI,ServicePartitionKey,Duration,Duration)
uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync*
fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(ResolvedServicePartition previousRsp)
name: resolveAsync(ResolvedServicePartition previousRsp)
package: microsoft.servicefabric.services.client
metadata: {}
