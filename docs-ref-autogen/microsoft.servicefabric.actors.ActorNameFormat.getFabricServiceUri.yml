### YamlMime:JavaMember
nameWithType: ActorNameFormat.getFabricServiceUri
type: method
members:
- fullName: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceUri(Class<?> actorInterfaceType, String applicationName, String serviceName)
  name: getFabricServiceUri(Class<?> actorInterfaceType, String applicationName, String serviceName)
  nameWithType: ActorNameFormat.getFabricServiceUri(Class<?> actorInterfaceType, String applicationName, String serviceName)
  parameters:
  - description: <p>Type of the actor interface. </p>
    name: actorInterfaceType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Service Fabric application name containing the actor service. If this value is null application name is obtained from <xref uid="system.fabric.CodePackageActivationContext.getApplicationName()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext#getApplicationName()"></xref></p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Name of service hosting the actor type. If this value is null then service name is constructed using the actorInterfaceType. </p>
    name: serviceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="java.net.URISyntaxException?alt=java.net.URISyntaxException&text=java.net.URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>Throws URISyntaxException </p>
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>When applicationName cannot be determined using <xref uid="system.fabric.CodePackageActivationContext" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext"></xref>. </p>
  returns:
    description: <p>Service Fabric service Uri hosting the actor type. </p>
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets service Uri which hosts the actor type in Service Fabric cluster.</p>

    <p>

      <b>Remarks:</b> If applicationName is passed as null or empty string, an attempt is made to get application name from <xref uid="system.fabric.CodePackageActivationContext" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext"></xref>. If the method still cannot determine application name, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.lang.IllegalArgumentException"></xref> is thrown. </p>
  syntax: public static URI getFabricServiceUri(Class<?> actorInterfaceType, String applicationName, String serviceName)
  uid: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceUri(Class<?>,String,String)
- fullName: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceUri(Class<?> actorInterfaceType, URI applicationUri, String serviceName)
  name: getFabricServiceUri(Class<?> actorInterfaceType, URI applicationUri, String serviceName)
  nameWithType: ActorNameFormat.getFabricServiceUri(Class<?> actorInterfaceType, URI applicationUri, String serviceName)
  parameters:
  - description: <p>Type of the actor interface. </p>
    name: actorInterfaceType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Service Fabric application Uri containing the actor service. If this value is null application name is obtained from <xref uid="system.fabric.CodePackageActivationContext.getApplicationName()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext#getApplicationName()"></xref></p>
    name: applicationUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>Name of service hosting the actor type. If this value is null then service name is constructed using the actorInterfaceType. </p>
    name: serviceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="java.net.URISyntaxException?alt=java.net.URISyntaxException&text=java.net.URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>Throws URISyntaxException </p>
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>When applicationUri cannot be determined using <xref uid="system.fabric.CodePackageActivationContext" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext"></xref>. </p>
  returns:
    description: <p>Service Fabric service Uri hosting the actor type. </p>
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets service Uri which hosts the actor type in Service Fabric cluster.</p>

    <p>

      <b>Remarks:</b> If applicationUri is passed as null or empty string, an attempt is made to get application name from <xref uid="system.fabric.CodePackageActivationContext" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext"></xref>. If the method still cannot determine application name, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.lang.IllegalArgumentException"></xref> is thrown. </p>
  syntax: public static URI getFabricServiceUri(Class<?> actorInterfaceType, URI applicationUri, String serviceName)
  uid: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceUri(Class<?>,URI,String)
uid: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceUri*
fullName: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceUri
name: getFabricServiceUri(Class<?> actorInterfaceType, String applicationName, String serviceName)
package: microsoft.servicefabric.actors
metadata: {}
