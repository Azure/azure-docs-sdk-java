### YamlMime:JavaMember
uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listByResourceGroup*"
fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listByResourceGroup"
name: "listByResourceGroup"
nameWithType: "PolicyExemptionsClient.listByResourceGroup"
members:
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listByResourceGroup(java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listByResourceGroup(String resourceGroupName)"
  name: "listByResourceGroup(String resourceGroupName)"
  nameWithType: "PolicyExemptionsClient.listByResourceGroup(String resourceGroupName)"
  summary: "This operation retrieves the list of all policy exemptions associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group."
  parameters:
  - description: "The name of the resource group containing the resource."
    name: "resourceGroupName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<PolicyExemptionInner> listByResourceGroup(String resourceGroupName)"
  returns:
    description: "list of policy exemptions as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listByResourceGroup(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listByResourceGroup(String resourceGroupName, String filter, Context context)"
  name: "listByResourceGroup(String resourceGroupName, String filter, Context context)"
  nameWithType: "PolicyExemptionsClient.listByResourceGroup(String resourceGroupName, String filter, Context context)"
  summary: "This operation retrieves the list of all policy exemptions associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group."
  parameters:
  - description: "The name of the resource group containing the resource."
    name: "resourceGroupName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()',\n     'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is\n     performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the\n     scope, including those that apply directly or apply from containing scopes. If $filter=atScope() is provided,\n     the returned list only includes all policy exemptions that apply to the scope, which is everything in the\n     unfiltered list except those applied to sub scopes contained within the given scope. If\n     $filter=atExactScope() is provided, the returned list only includes all policy exemptions that at the given\n     scope. If $filter=excludeExpired() is provided, the returned list only includes all policy exemptions that\n     either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq '{value}' is provided.\n     the returned list only includes all policy exemptions that are associated with the give policyAssignmentId."
    name: "filter"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<PolicyExemptionInner> listByResourceGroup(String resourceGroupName, String filter, Context context)"
  returns:
    description: "list of policy exemptions as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.resourcemanager.resources.fluent"
artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.13.0
