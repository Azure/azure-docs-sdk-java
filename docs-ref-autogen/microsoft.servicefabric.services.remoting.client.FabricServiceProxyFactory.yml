### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.services.remoting.client.FabricServiceProxyFactory.FabricServiceProxyFactory()
  name: FabricServiceProxyFactory()
  nameWithType: FabricServiceProxyFactory.FabricServiceProxyFactory()
  summary: <p>Instantiates the ServiceProxyFactory with the specified remoting factory and retrysettings. </p>
  syntax: public FabricServiceProxyFactory()
  uid: microsoft.servicefabric.services.remoting.client.FabricServiceProxyFactory.FabricServiceProxyFactory()
- fullName: microsoft.servicefabric.services.remoting.client.FabricServiceProxyFactory.FabricServiceProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings)
  name: FabricServiceProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings)
  nameWithType: FabricServiceProxyFactory.FabricServiceProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings)
  parameters:
  - description: <p>Specifies the factory method that creates the remoting client factory. The remoting client factory got from this method is cached in the ServiceProxyFactory. </p>
    name: createServiceRemotingClientFactory
    type: Function&lt;<xref href="microsoft.servicefabric.services.remoting.runtime.ServiceRemotingCallbackClient?alt=microsoft.servicefabric.services.remoting.runtime.ServiceRemotingCallbackClient&text=ServiceRemotingCallbackClient" data-throw-if-not-resolved="False"/>, <xref href="microsoft.servicefabric.services.remoting.client.ServiceRemotingClientFactory?alt=microsoft.servicefabric.services.remoting.client.ServiceRemotingClientFactory&text=ServiceRemotingClientFactory" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>Specifies the retry policy to use on exceptions seen when using the proxies created by this factory </p>
    name: retrySettings
    type: <xref href="microsoft.servicefabric.services.communication.client.OperationRetrySettings?alt=microsoft.servicefabric.services.communication.client.OperationRetrySettings&text=OperationRetrySettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Instantiates the ServiceProxyFactory with the specified remoting factory and retrysettings.</p>

    <p></p>
  syntax: public FabricServiceProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings)
  uid: microsoft.servicefabric.services.remoting.client.FabricServiceProxyFactory.FabricServiceProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory>,OperationRetrySettings)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.services.remoting.client.ServiceProxyFactory?alt=microsoft.servicefabric.services.remoting.client.ServiceProxyFactory&text=ServiceProxyFactory" data-throw-if-not-resolved="False"/>
methods:
- fullName: microsoft.servicefabric.services.remoting.client.FabricServiceProxyFactory.createServiceProxy(Class<T> serviceInterfaceType, URI serviceUri)
  name: createServiceProxy(Class<T> serviceInterfaceType, URI serviceUri)
  nameWithType: FabricServiceProxyFactory.createServiceProxy(Class<T> serviceInterfaceType, URI serviceUri)
  overridden: microsoft.servicefabric.services.remoting.client.ServiceProxyFactory.createServiceProxy(Class<T>,URI)
  parameters:
  - description: <p>Interface type that is being remoted </p>
    name: serviceInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Uri of the Service. </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The proxy that implement the interface that is being remoted. The returned object also implement <xref uid="microsoft.servicefabric.services.remoting.client.ServiceProxy" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.services.remoting.client.ServiceProxy"></xref> interface. </p>
    type: '&lt;T extends <xref href="microsoft.servicefabric.services.remoting.Service?alt=microsoft.servicefabric.services.remoting.Service&text=Service" data-throw-if-not-resolved="False"/>&gt; T'
  summary: >-
    <p>Creates a proxy to communicate to the specified service using the remoted interface<code>&lt;T&gt; 

        </code> that the service implements.</p>

    <p></p>
  syntax: public <T extends Service> T createServiceProxy(Class<T> serviceInterfaceType, URI serviceUri)
  uid: microsoft.servicefabric.services.remoting.client.FabricServiceProxyFactory.createServiceProxy(Class<T>,URI)
- fullName: microsoft.servicefabric.services.remoting.client.FabricServiceProxyFactory.createServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName)
  name: createServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName)
  nameWithType: FabricServiceProxyFactory.createServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName)
  overridden: microsoft.servicefabric.services.remoting.client.ServiceProxyFactory.createServiceProxy(Class<T>,URI,ServicePartitionKey,TargetReplicaSelector,String)
  parameters:
  - description: <p>Interface type that is being remoted </p>
    name: serviceInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Uri of the Service. </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>The Partition key that determines which service partition is responsible for handling requests from this service proxy. </p>
    name: partitionKey
    type: <xref href="microsoft.servicefabric.services.client.ServicePartitionKey?alt=microsoft.servicefabric.services.client.ServicePartitionKey&text=ServicePartitionKey" data-throw-if-not-resolved="False"/>
  - description: <p>Determines which replica or instance of the service partition the client should connect to. </p>
    name: targetReplicaSelector
    type: <xref href="microsoft.servicefabric.services.communication.client.TargetReplicaSelector?alt=microsoft.servicefabric.services.communication.client.TargetReplicaSelector&text=TargetReplicaSelector" data-throw-if-not-resolved="False"/>
  - description: <p>This parameter is Optional if the service has a single communication listener. The endpoints from the service are of the form {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}. When the service exposes multiple endpoints, this parameter identifies which of those endpoints to use for the remoting communication.</p>
    name: listenerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The proxy that implement the interface that is being remoted. The returned object also implement <xref uid="microsoft.servicefabric.services.remoting.client.ServiceProxy" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.services.remoting.client.ServiceProxy"></xref> interface. </p>
    type: '&lt;T extends <xref href="microsoft.servicefabric.services.remoting.Service?alt=microsoft.servicefabric.services.remoting.Service&text=Service" data-throw-if-not-resolved="False"/>&gt; T'
  summary: >-
    <p>Creates a proxy to communicate to the specified service using the remoted interface<code>&lt;T&gt; 

        </code> that the service implements.</p>

    <p></p>
  syntax: public <T extends Service> T createServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName)
  uid: microsoft.servicefabric.services.remoting.client.FabricServiceProxyFactory.createServiceProxy(Class<T>,URI,ServicePartitionKey,TargetReplicaSelector,String)
nameWithType: FabricServiceProxyFactory
syntax: public class FabricServiceProxyFactory implements ServiceProxyFactory
type: class
uid: microsoft.servicefabric.services.remoting.client.FabricServiceProxyFactory
fullName: microsoft.servicefabric.services.remoting.client.FabricServiceProxyFactory
name: FabricServiceProxyFactory
package: microsoft.servicefabric.services.remoting.client
summary: <p>Specifies the factory that creates proxies for remote communication to the specified service. </p>
metadata: {}
