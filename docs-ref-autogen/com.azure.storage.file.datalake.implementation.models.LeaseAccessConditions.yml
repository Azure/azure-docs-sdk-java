### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions"
  id: "LeaseAccessConditions"
  parent: "com.azure.storage.file.datalake.implementation.models"
  children:
  - "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions.LeaseAccessConditions()"
  - "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions.getLeaseId()"
  - "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions.setLeaseId(java.lang.String)"
  langs:
  - "java"
  name: "LeaseAccessConditions"
  nameWithType: "LeaseAccessConditions"
  fullName: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions"
  type: "Class"
  package: "com.azure.storage.file.datalake.implementation.models"
  summary: "Additional parameters for a set of operations."
  syntax:
    content: "public final class LeaseAccessConditions"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions.LeaseAccessConditions()"
  id: "LeaseAccessConditions()"
  parent: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions"
  langs:
  - "java"
  name: "LeaseAccessConditions()"
  nameWithType: "LeaseAccessConditions.LeaseAccessConditions()"
  fullName: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions.LeaseAccessConditions()"
  overload: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions.LeaseAccessConditions*"
  type: "Constructor"
  package: "com.azure.storage.file.datalake.implementation.models"
  syntax:
    content: "public LeaseAccessConditions()"
- uid: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions.getLeaseId()"
  id: "getLeaseId()"
  parent: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions"
  langs:
  - "java"
  name: "getLeaseId()"
  nameWithType: "LeaseAccessConditions.getLeaseId()"
  fullName: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions.getLeaseId()"
  overload: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions.getLeaseId*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation.models"
  summary: "Get the leaseId property: If specified, the operation only succeeds if the resource's lease is active and matches this ID."
  syntax:
    content: "public String getLeaseId()"
    return:
      type: "java.lang.String"
      description: "the leaseId value."
- uid: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions.setLeaseId(java.lang.String)"
  id: "setLeaseId(java.lang.String)"
  parent: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions"
  langs:
  - "java"
  name: "setLeaseId(String leaseId)"
  nameWithType: "LeaseAccessConditions.setLeaseId(String leaseId)"
  fullName: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions.setLeaseId(String leaseId)"
  overload: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions.setLeaseId*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation.models"
  summary: "Set the leaseId property: If specified, the operation only succeeds if the resource's lease is active and matches this ID."
  syntax:
    content: "public LeaseAccessConditions setLeaseId(String leaseId)"
    parameters:
    - id: "leaseId"
      type: "java.lang.String"
      description: "the leaseId value to set."
    return:
      type: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions"
      description: "the LeaseAccessConditions object itself."
references:
- uid: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions.LeaseAccessConditions*"
  name: "LeaseAccessConditions"
  nameWithType: "LeaseAccessConditions.LeaseAccessConditions"
  fullName: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions.LeaseAccessConditions"
  package: "com.azure.storage.file.datalake.implementation.models"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions.getLeaseId*"
  name: "getLeaseId"
  nameWithType: "LeaseAccessConditions.getLeaseId"
  fullName: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions.getLeaseId"
  package: "com.azure.storage.file.datalake.implementation.models"
- uid: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions.setLeaseId*"
  name: "setLeaseId"
  nameWithType: "LeaseAccessConditions.setLeaseId"
  fullName: "com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions.setLeaseId"
  package: "com.azure.storage.file.datalake.implementation.models"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
