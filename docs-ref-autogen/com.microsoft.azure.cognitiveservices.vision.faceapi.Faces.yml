### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithStream()
  name: detectWithStream()
  nameWithType: Faces.detectWithStream()
  returns:
    description: <p>the first stage of the detectWithStream call </p>
    type: <xref href="FacesDetectWithStreamDefinitionStages.WithImage?alt=FacesDetectWithStreamDefinitionStages.WithImage&text=FacesDetectWithStreamDefinitionStages.WithImage" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</p>

    <p></p>
  syntax: public FacesDetectWithStreamDefinitionStages.WithImage detectWithStream()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithStream()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithStream(byte[] image, DetectWithStreamOptionalParameter detectWithStreamOptionalParameter)
  name: detectWithStream(byte[] image, DetectWithStreamOptionalParameter detectWithStreamOptionalParameter)
  nameWithType: Faces.detectWithStream(byte[] image, DetectWithStreamOptionalParameter detectWithStreamOptionalParameter)
  parameters:
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: detectWithStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectWithStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectWithStreamOptionalParameter&text=DetectWithStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;DetectedFace&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectedFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectedFace&text=DetectedFace" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</p>

    <p></p>
  syntax: public List<DetectedFace> detectWithStream(byte[] image, DetectWithStreamOptionalParameter detectWithStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithStream(byte [],DetectWithStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithStreamAsync(byte[] image, DetectWithStreamOptionalParameter detectWithStreamOptionalParameter)
  name: detectWithStreamAsync(byte[] image, DetectWithStreamOptionalParameter detectWithStreamOptionalParameter)
  nameWithType: Faces.detectWithStreamAsync(byte[] image, DetectWithStreamOptionalParameter detectWithStreamOptionalParameter)
  parameters:
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: detectWithStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectWithStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectWithStreamOptionalParameter&text=DetectWithStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;DetectedFace&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectedFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectedFace&text=DetectedFace" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</p>

    <p></p>
  syntax: public Observable<List<DetectedFace>> detectWithStreamAsync(byte[] image, DetectWithStreamOptionalParameter detectWithStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithStreamAsync(byte [],DetectWithStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithUrl()
  name: detectWithUrl()
  nameWithType: Faces.detectWithUrl()
  returns:
    description: <p>the first stage of the detectWithUrl call </p>
    type: <xref href="FacesDetectWithUrlDefinitionStages.WithUrl?alt=FacesDetectWithUrlDefinitionStages.WithUrl&text=FacesDetectWithUrlDefinitionStages.WithUrl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</p>

    <p></p>
  syntax: public FacesDetectWithUrlDefinitionStages.WithUrl detectWithUrl()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithUrl()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithUrl(String url, DetectWithUrlOptionalParameter detectWithUrlOptionalParameter)
  name: detectWithUrl(String url, DetectWithUrlOptionalParameter detectWithUrlOptionalParameter)
  nameWithType: Faces.detectWithUrl(String url, DetectWithUrlOptionalParameter detectWithUrlOptionalParameter)
  parameters:
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: detectWithUrlOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectWithUrlOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectWithUrlOptionalParameter&text=DetectWithUrlOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;DetectedFace&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectedFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectedFace&text=DetectedFace" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</p>

    <p></p>
  syntax: public List<DetectedFace> detectWithUrl(String url, DetectWithUrlOptionalParameter detectWithUrlOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithUrl(String,DetectWithUrlOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithUrlAsync(String url, DetectWithUrlOptionalParameter detectWithUrlOptionalParameter)
  name: detectWithUrlAsync(String url, DetectWithUrlOptionalParameter detectWithUrlOptionalParameter)
  nameWithType: Faces.detectWithUrlAsync(String url, DetectWithUrlOptionalParameter detectWithUrlOptionalParameter)
  parameters:
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: detectWithUrlOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectWithUrlOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectWithUrlOptionalParameter&text=DetectWithUrlOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;DetectedFace&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectedFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectedFace&text=DetectedFace" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</p>

    <p></p>
  syntax: public Observable<List<DetectedFace>> detectWithUrlAsync(String url, DetectWithUrlOptionalParameter detectWithUrlOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithUrlAsync(String,DetectWithUrlOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.findSimilar()
  name: findSimilar()
  nameWithType: Faces.findSimilar()
  returns:
    description: <p>the first stage of the findSimilar call </p>
    type: <xref href="FacesFindSimilarDefinitionStages.WithFaceId?alt=FacesFindSimilarDefinitionStages.WithFaceId&text=FacesFindSimilarDefinitionStages.WithFaceId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId.</p>

    <p></p>
  syntax: public FacesFindSimilarDefinitionStages.WithFaceId findSimilar()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.findSimilar()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.findSimilar(UUID faceId, FindSimilarOptionalParameter findSimilarOptionalParameter)
  name: findSimilar(UUID faceId, FindSimilarOptionalParameter findSimilarOptionalParameter)
  nameWithType: Faces.findSimilar(UUID faceId, FindSimilarOptionalParameter findSimilarOptionalParameter)
  parameters:
  - description: <p>FaceId of the query face. User needs to call Face - Detect first to get a valid faceId. Note that this faceId is not persisted and will expire 24 hours after the detection call. </p>
    name: faceId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: findSimilarOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FindSimilarOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FindSimilarOptionalParameter&text=FindSimilarOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;SimilarFace&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.SimilarFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.SimilarFace&text=SimilarFace" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId.</p>

    <p></p>
  syntax: public List<SimilarFace> findSimilar(UUID faceId, FindSimilarOptionalParameter findSimilarOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.findSimilar(UUID,FindSimilarOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.findSimilarAsync(UUID faceId, FindSimilarOptionalParameter findSimilarOptionalParameter)
  name: findSimilarAsync(UUID faceId, FindSimilarOptionalParameter findSimilarOptionalParameter)
  nameWithType: Faces.findSimilarAsync(UUID faceId, FindSimilarOptionalParameter findSimilarOptionalParameter)
  parameters:
  - description: <p>FaceId of the query face. User needs to call Face - Detect first to get a valid faceId. Note that this faceId is not persisted and will expire 24 hours after the detection call. </p>
    name: faceId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: findSimilarOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FindSimilarOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FindSimilarOptionalParameter&text=FindSimilarOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;SimilarFace&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.SimilarFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.SimilarFace&text=SimilarFace" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId.</p>

    <p></p>
  syntax: public Observable<List<SimilarFace>> findSimilarAsync(UUID faceId, FindSimilarOptionalParameter findSimilarOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.findSimilarAsync(UUID,FindSimilarOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.group(List<UUID> faceIds)
  name: group(List<UUID> faceIds)
  nameWithType: Faces.group(List<UUID> faceIds)
  parameters:
  - description: <p>Array of candidate faceId created by Face - Detect. The maximum is 1000 faces. </p>
    name: faceIds
    type: <xref href="List%3CUUID%3E?alt=List%3CUUID%3E&text=List%3CUUID%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the GroupResult object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.GroupResult?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.GroupResult&text=GroupResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Divide candidate faces into groups based on face similarity.</p>

    <p></p>
  syntax: public GroupResult group(List<UUID> faceIds)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.group(List<UUID>)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.groupAsync(List<UUID> faceIds)
  name: groupAsync(List<UUID> faceIds)
  nameWithType: Faces.groupAsync(List<UUID> faceIds)
  parameters:
  - description: <p>Array of candidate faceId created by Face - Detect. The maximum is 1000 faces. </p>
    name: faceIds
    type: <xref href="List%3CUUID%3E?alt=List%3CUUID%3E&text=List%3CUUID%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the GroupResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.GroupResult?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.GroupResult&text=GroupResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Divide candidate faces into groups based on face similarity.</p>

    <p></p>
  syntax: public Observable<GroupResult> groupAsync(List<UUID> faceIds)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.groupAsync(List<UUID>)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.identify()
  name: identify()
  nameWithType: Faces.identify()
  returns:
    description: <p>the first stage of the identify call </p>
    type: <xref href="FacesIdentifyDefinitionStages.WithPersonGroupId?alt=FacesIdentifyDefinitionStages.WithPersonGroupId&text=FacesIdentifyDefinitionStages.WithPersonGroupId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Identify unknown faces from a person group.</p>

    <p></p>
  syntax: public FacesIdentifyDefinitionStages.WithPersonGroupId identify()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.identify()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.identify(String personGroupId, List<UUID> faceIds, IdentifyOptionalParameter identifyOptionalParameter)
  name: identify(String personGroupId, List<UUID> faceIds, IdentifyOptionalParameter identifyOptionalParameter)
  nameWithType: Faces.identify(String personGroupId, List<UUID> faceIds, IdentifyOptionalParameter identifyOptionalParameter)
  parameters:
  - description: <p>PersonGroupId of the target person group, created by PersonGroups.Create. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified independently. The valid number of faceIds is between [1, 10]. </p>
    name: faceIds
    type: <xref href="List%3CUUID%3E?alt=List%3CUUID%3E&text=List%3CUUID%3E" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: identifyOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyOptionalParameter&text=IdentifyOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;IdentifyResult&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult&text=IdentifyResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Identify unknown faces from a person group.</p>

    <p></p>
  syntax: public List<IdentifyResult> identify(String personGroupId, List<UUID> faceIds, IdentifyOptionalParameter identifyOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.identify(String,List<UUID>,IdentifyOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.identifyAsync(String personGroupId, List<UUID> faceIds, IdentifyOptionalParameter identifyOptionalParameter)
  name: identifyAsync(String personGroupId, List<UUID> faceIds, IdentifyOptionalParameter identifyOptionalParameter)
  nameWithType: Faces.identifyAsync(String personGroupId, List<UUID> faceIds, IdentifyOptionalParameter identifyOptionalParameter)
  parameters:
  - description: <p>PersonGroupId of the target person group, created by PersonGroups.Create. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified independently. The valid number of faceIds is between [1, 10]. </p>
    name: faceIds
    type: <xref href="List%3CUUID%3E?alt=List%3CUUID%3E&text=List%3CUUID%3E" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: identifyOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyOptionalParameter&text=IdentifyOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;IdentifyResult&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult&text=IdentifyResult" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Identify unknown faces from a person group.</p>

    <p></p>
  syntax: public Observable<List<IdentifyResult>> identifyAsync(String personGroupId, List<UUID> faceIds, IdentifyOptionalParameter identifyOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.identifyAsync(String,List<UUID>,IdentifyOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.verifyFaceToFace(UUID faceId1, UUID faceId2)
  name: verifyFaceToFace(UUID faceId1, UUID faceId2)
  nameWithType: Faces.verifyFaceToFace(UUID faceId1, UUID faceId2)
  parameters:
  - description: <p>FaceId of the first face, comes from Face - Detect. </p>
    name: faceId1
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>FaceId of the second face, comes from Face - Detect. </p>
    name: faceId2
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the VerifyResult object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.VerifyResult?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.VerifyResult&text=VerifyResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Verify whether two faces belong to a same person or whether one face belongs to a person.</p>

    <p></p>
  syntax: public VerifyResult verifyFaceToFace(UUID faceId1, UUID faceId2)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.verifyFaceToFace(UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.verifyFaceToFaceAsync(UUID faceId1, UUID faceId2)
  name: verifyFaceToFaceAsync(UUID faceId1, UUID faceId2)
  nameWithType: Faces.verifyFaceToFaceAsync(UUID faceId1, UUID faceId2)
  parameters:
  - description: <p>FaceId of the first face, comes from Face - Detect. </p>
    name: faceId1
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>FaceId of the second face, comes from Face - Detect. </p>
    name: faceId2
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the VerifyResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.VerifyResult?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.VerifyResult&text=VerifyResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Verify whether two faces belong to a same person or whether one face belongs to a person.</p>

    <p></p>
  syntax: public Observable<VerifyResult> verifyFaceToFaceAsync(UUID faceId1, UUID faceId2)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.verifyFaceToFaceAsync(UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.verifyFaceToPerson(UUID faceId, String personGroupId, UUID personId)
  name: verifyFaceToPerson(UUID faceId, String personGroupId, UUID personId)
  nameWithType: Faces.verifyFaceToPerson(UUID faceId, String personGroupId, UUID personId)
  parameters:
  - description: <p>FaceId the face, comes from Face - Detect. </p>
    name: faceId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Using existing personGroupId and personId for fast loading a specified person. personGroupId is created in Person Groups.Create. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Specify a certain person in a person group. personId is created in Persons.Create. </p>
    name: personId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the VerifyResult object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.VerifyResult?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.VerifyResult&text=VerifyResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Verify whether two faces belong to a same person. Compares a face Id with a Person Id.</p>

    <p></p>
  syntax: public VerifyResult verifyFaceToPerson(UUID faceId, String personGroupId, UUID personId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.verifyFaceToPerson(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.verifyFaceToPersonAsync(UUID faceId, String personGroupId, UUID personId)
  name: verifyFaceToPersonAsync(UUID faceId, String personGroupId, UUID personId)
  nameWithType: Faces.verifyFaceToPersonAsync(UUID faceId, String personGroupId, UUID personId)
  parameters:
  - description: <p>FaceId the face, comes from Face - Detect. </p>
    name: faceId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Using existing personGroupId and personId for fast loading a specified person. personGroupId is created in Person Groups.Create. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Specify a certain person in a person group. personId is created in Persons.Create. </p>
    name: personId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the VerifyResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.VerifyResult?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.VerifyResult&text=VerifyResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Verify whether two faces belong to a same person. Compares a face Id with a Person Id.</p>

    <p></p>
  syntax: public Observable<VerifyResult> verifyFaceToPersonAsync(UUID faceId, String personGroupId, UUID personId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.verifyFaceToPersonAsync(UUID,String,UUID)
nameWithType: Faces
syntax: public interface Faces
type: interface
uid: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces
fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.Faces
name: Faces
package: com.microsoft.azure.cognitiveservices.vision.faceapi
summary: <p>An instance of this class provides access to all the operations defined in Faces. </p>
metadata: {}
