### YamlMime:JavaType
uid: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData"
fullName: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData"
name: "MediaLiveEventIngestHeartbeatEventData"
nameWithType: "MediaLiveEventIngestHeartbeatEventData"
summary: "Ingest fragment dropped event data."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class MediaLiveEventIngestHeartbeatEventData"
constructors:
- uid: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.MediaLiveEventIngestHeartbeatEventData()"
  fullName: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.MediaLiveEventIngestHeartbeatEventData()"
  name: "MediaLiveEventIngestHeartbeatEventData()"
  nameWithType: "MediaLiveEventIngestHeartbeatEventData.MediaLiveEventIngestHeartbeatEventData()"
  syntax: "public MediaLiveEventIngestHeartbeatEventData()"
methods:
- uid: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.bitrate()"
  fullName: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.bitrate()"
  name: "bitrate()"
  nameWithType: "MediaLiveEventIngestHeartbeatEventData.bitrate()"
  summary: "Get gets the bitrate of the track."
  syntax: "public Long bitrate()"
  desc: "Get gets the bitrate of the track."
  returns:
    description: "the bitrate value"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.discontinuityCount()"
  fullName: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.discontinuityCount()"
  name: "discontinuityCount()"
  nameWithType: "MediaLiveEventIngestHeartbeatEventData.discontinuityCount()"
  summary: "Get gets the fragment Discontinuity count."
  syntax: "public Long discontinuityCount()"
  desc: "Get gets the fragment Discontinuity count."
  returns:
    description: "the discontinuityCount value"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.healthy()"
  fullName: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.healthy()"
  name: "healthy()"
  nameWithType: "MediaLiveEventIngestHeartbeatEventData.healthy()"
  summary: "Get gets a value indicating whether preview is healthy or not."
  syntax: "public Boolean healthy()"
  desc: "Get gets a value indicating whether preview is healthy or not."
  returns:
    description: "the healthy value"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.incomingBitrate()"
  fullName: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.incomingBitrate()"
  name: "incomingBitrate()"
  nameWithType: "MediaLiveEventIngestHeartbeatEventData.incomingBitrate()"
  summary: "Get gets the incoming bitrate."
  syntax: "public Long incomingBitrate()"
  desc: "Get gets the incoming bitrate."
  returns:
    description: "the incomingBitrate value"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.lastTimestamp()"
  fullName: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.lastTimestamp()"
  name: "lastTimestamp()"
  nameWithType: "MediaLiveEventIngestHeartbeatEventData.lastTimestamp()"
  summary: "Get gets the last timestamp."
  syntax: "public String lastTimestamp()"
  desc: "Get gets the last timestamp."
  returns:
    description: "the lastTimestamp value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.nonincreasingCount()"
  fullName: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.nonincreasingCount()"
  name: "nonincreasingCount()"
  nameWithType: "MediaLiveEventIngestHeartbeatEventData.nonincreasingCount()"
  summary: "Get gets Non increasing count."
  syntax: "public Long nonincreasingCount()"
  desc: "Get gets Non increasing count."
  returns:
    description: "the nonincreasingCount value"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.overlapCount()"
  fullName: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.overlapCount()"
  name: "overlapCount()"
  nameWithType: "MediaLiveEventIngestHeartbeatEventData.overlapCount()"
  summary: "Get gets the fragment Overlap count."
  syntax: "public Long overlapCount()"
  desc: "Get gets the fragment Overlap count."
  returns:
    description: "the overlapCount value"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.state()"
  fullName: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.state()"
  name: "state()"
  nameWithType: "MediaLiveEventIngestHeartbeatEventData.state()"
  summary: "Get gets the state of the live event."
  syntax: "public String state()"
  desc: "Get gets the state of the live event."
  returns:
    description: "the state value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.timescale()"
  fullName: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.timescale()"
  name: "timescale()"
  nameWithType: "MediaLiveEventIngestHeartbeatEventData.timescale()"
  summary: "Get gets the timescale of the last timestamp."
  syntax: "public String timescale()"
  desc: "Get gets the timescale of the last timestamp."
  returns:
    description: "the timescale value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.trackName()"
  fullName: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.trackName()"
  name: "trackName()"
  nameWithType: "MediaLiveEventIngestHeartbeatEventData.trackName()"
  summary: "Get gets the track name."
  syntax: "public String trackName()"
  desc: "Get gets the track name."
  returns:
    description: "the trackName value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.trackType()"
  fullName: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.trackType()"
  name: "trackType()"
  nameWithType: "MediaLiveEventIngestHeartbeatEventData.trackType()"
  summary: "Get gets the type of the track (Audio / Video)."
  syntax: "public String trackType()"
  desc: "Get gets the type of the track (Audio / Video)."
  returns:
    description: "the trackType value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.unexpectedBitrate()"
  fullName: "com.microsoft.azure.eventgrid.models.MediaLiveEventIngestHeartbeatEventData.unexpectedBitrate()"
  name: "unexpectedBitrate()"
  nameWithType: "MediaLiveEventIngestHeartbeatEventData.unexpectedBitrate()"
  summary: "Get gets a value indicating whether unexpected bitrate is present or not."
  syntax: "public Boolean unexpectedBitrate()"
  desc: "Get gets a value indicating whether unexpected bitrate is present or not."
  returns:
    description: "the unexpectedBitrate value"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Ingest fragment dropped event data."
metadata: {}
package: "com.microsoft.azure.eventgrid.models"
artifact: com.microsoft.azure:azure-eventgrid:1.3.0
