### YamlMime:JavaType
uid: "com.microsoft.azure.management.keyvault.Secret"
fullName: "com.microsoft.azure.management.keyvault.Secret"
name: "Secret"
nameWithType: "Secret"
summary: "An immutable client-side representation of an Azure Key Vault secret."
syntax: "public interface Secret extends Indexable, HasInner<SecretBundle>, HasId, HasName, Updatable<Secret.Update>"
methods:
- uid: "com.microsoft.azure.management.keyvault.Secret.attributes()"
  fullName: "com.microsoft.azure.management.keyvault.Secret.attributes()"
  name: "attributes()"
  nameWithType: "Secret.attributes()"
  modifiers:
  - "abstract"
  syntax: "public abstract SecretAttributes attributes()"
  returns:
    description: "the secret management attributes"
    type: "<xref href=\"com.microsoft.azure.keyvault.models.SecretAttributes?alt=com.microsoft.azure.keyvault.models.SecretAttributes&text=SecretAttributes\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.keyvault.Secret.contentType()"
  fullName: "com.microsoft.azure.management.keyvault.Secret.contentType()"
  name: "contentType()"
  nameWithType: "Secret.contentType()"
  modifiers:
  - "abstract"
  syntax: "public abstract String contentType()"
  returns:
    description: "type of the secret value such as a password"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.keyvault.Secret.kid()"
  fullName: "com.microsoft.azure.management.keyvault.Secret.kid()"
  name: "kid()"
  nameWithType: "Secret.kid()"
  modifiers:
  - "abstract"
  syntax: "public abstract String kid()"
  returns:
    description: "the corresponding key backing the KV certificate if this is a\n secret backing a KV certificate"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.keyvault.Secret.listVersions()"
  fullName: "com.microsoft.azure.management.keyvault.Secret.listVersions()"
  name: "listVersions()"
  nameWithType: "Secret.listVersions()"
  modifiers:
  - "abstract"
  syntax: "public abstract PagedList<Secret> listVersions()"
  returns:
    description: "a list of individual secret versions with the same secret name"
    type: "<xref href=\"com.microsoft.azure.PagedList?alt=com.microsoft.azure.PagedList&text=PagedList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.keyvault.Secret?alt=com.microsoft.azure.management.keyvault.Secret&text=Secret\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.keyvault.Secret.listVersionsAsync()"
  fullName: "com.microsoft.azure.management.keyvault.Secret.listVersionsAsync()"
  name: "listVersionsAsync()"
  nameWithType: "Secret.listVersionsAsync()"
  modifiers:
  - "abstract"
  syntax: "public abstract Observable<Secret> listVersionsAsync()"
  returns:
    description: "a list of individual secret versions with the same secret name"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.keyvault.Secret?alt=com.microsoft.azure.management.keyvault.Secret&text=Secret\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.keyvault.Secret.managed()"
  fullName: "com.microsoft.azure.management.keyvault.Secret.managed()"
  name: "managed()"
  nameWithType: "Secret.managed()"
  modifiers:
  - "abstract"
  syntax: "public abstract boolean managed()"
  returns:
    description: "true if the secret's lifetime is managed by key vault. If this is a key\n backing a certificate, then managed will be true"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.keyvault.Secret.tags()"
  fullName: "com.microsoft.azure.management.keyvault.Secret.tags()"
  name: "tags()"
  nameWithType: "Secret.tags()"
  modifiers:
  - "abstract"
  syntax: "public abstract Map<String,String> tags()"
  returns:
    description: "application specific metadata in the form of key-value pairs"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.keyvault.Secret.value()"
  fullName: "com.microsoft.azure.management.keyvault.Secret.value()"
  name: "value()"
  nameWithType: "Secret.value()"
  modifiers:
  - "abstract"
  syntax: "public abstract String value()"
  returns:
    description: "the secret value when the secret is enabled"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
desc: "An immutable client-side representation of an Azure Key Vault secret."
implements:
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.arm.models.HasId?alt=com.microsoft.azure.management.resources.fluentcore.arm.models.HasId&text=HasId\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.arm.models.HasName?alt=com.microsoft.azure.management.resources.fluentcore.arm.models.HasName&text=HasName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.HasInner?alt=com.microsoft.azure.management.resources.fluentcore.model.HasInner&text=HasInner\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.keyvault.models.SecretBundle?alt=com.microsoft.azure.keyvault.models.SecretBundle&text=SecretBundle\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.Indexable?alt=com.microsoft.azure.management.resources.fluentcore.model.Indexable&text=Indexable\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.Updatable?alt=com.microsoft.azure.management.resources.fluentcore.model.Updatable&text=Updatable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.keyvault.Secret.Update?alt=com.microsoft.azure.management.keyvault.Secret.Update&text=Update\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.microsoft.azure.management.keyvault"
artifact: com.microsoft.azure:azure-mgmt-keyvault:1.41.4
