### YamlMime:JavaMember
uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret*"
fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret"
name: "setSecret"
nameWithType: "SecretAsyncClient.setSecret"
members:
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret(com.azure.security.keyvault.secrets.models.KeyVaultSecret)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret(KeyVaultSecret secret)"
  name: "setSecret(KeyVaultSecret secret)"
  nameWithType: "SecretAsyncClient.setSecret(KeyVaultSecret secret)"
  summary: "Adds a secret to the key vault if it does not exist. If the named secret exists, a new version of the secret is created. This operation requires the `secrets/set` permission.\n\nThe <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getExpiresOn()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"expires\"></xref>, <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getContentType()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"contentType\"></xref>, and <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getNotBefore()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"notBefore\"></xref> values in `secret` are optional. If not specified, <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.isEnabled()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"enabled\"></xref> is set to true by key vault.\n\n**Code sample**\n\nCreates a new secret which activates in one day and expires in one year. Subscribes to the call asynchronously and prints out the newly created secret details when a response is received.\n\n```java\nSecretProperties properties = new SecretProperties()\n     .setExpiresOn(OffsetDateTime.now().plusDays(60));\n KeyVaultSecret newSecret = new KeyVaultSecret(\"secretName\", \"secretValue\")\n     .setProperties(properties);\n \n secretAsyncClient.setSecret(newSecret)\n     .subscribe(secretResponse ->\n     System.out.printf(\"Secret is created with name %s and value %s %n\",\n         secretResponse.getName(), secretResponse.getValue()));\n```"
  parameters:
  - description: "The Secret object containing information about the secret and its properties. The properties\n     <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret.name\"></xref> and <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret.getValue()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret.value\"></xref> cannot be\n     null."
    name: "secret"
    type: "<xref href=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret?alt=com.azure.security.keyvault.secrets.models.KeyVaultSecret&text=KeyVaultSecret\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<KeyVaultSecret> setSecret(KeyVaultSecret secret)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"created secret\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret?alt=com.azure.security.keyvault.secrets.models.KeyVaultSecret&text=KeyVaultSecret\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret(java.lang.String,java.lang.String)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret(String name, String value)"
  name: "setSecret(String name, String value)"
  nameWithType: "SecretAsyncClient.setSecret(String name, String value)"
  summary: "Adds a secret to the key vault if it does not exist. If the named secret exists, a new version of the secret is created. This operation requires the `secrets/set` permission.\n\n**Code sample**\n\nCreates a new secret in the key vault. Subscribes to the call asynchronously and prints out the newly created secret details when a response is received.\n\n```java\nsecretAsyncClient.setSecret(\"secretName\", \"secretValue\")\n     .subscribe(secretResponse ->\n         System.out.printf(\"Secret is created with name %s and value %s%n\",\n             secretResponse.getName(), secretResponse.getValue()));\n```"
  parameters:
  - description: "The name of the secret. It is required and cannot be null."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The value of the secret. It is required and cannot be null."
    name: "value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<KeyVaultSecret> setSecret(String name, String value)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"created secret\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret?alt=com.azure.security.keyvault.secrets.models.KeyVaultSecret&text=KeyVaultSecret\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.security.keyvault.secrets"
artifact: com.azure:azure-security-keyvault-secrets:4.2.4
