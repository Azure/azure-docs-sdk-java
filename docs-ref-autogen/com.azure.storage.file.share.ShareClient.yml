### YamlMime:ManagedReference
items:
- uid: com.azure.storage.file.share.ShareClient
  id: ShareClient
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share
  children:
  - com.azure.storage.file.share.ShareClient.create()
  - com.azure.storage.file.share.ShareClient.createDirectory(java.lang.String)
  - com.azure.storage.file.share.ShareClient.createDirectoryWithResponse(java.lang.String,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareClient.createFile(java.lang.String,long)
  - com.azure.storage.file.share.ShareClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareClient.createPermission(java.lang.String)
  - com.azure.storage.file.share.ShareClient.createPermissionWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareClient.createSnapshot()
  - com.azure.storage.file.share.ShareClient.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareClient.createWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.lang.Integer,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareClient.delete()
  - com.azure.storage.file.share.ShareClient.deleteDirectory(java.lang.String)
  - com.azure.storage.file.share.ShareClient.deleteDirectoryWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareClient.deleteFile(java.lang.String)
  - com.azure.storage.file.share.ShareClient.deleteFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareClient.deleteFileWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareClient.deleteWithResponse(java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareClient.exists()
  - com.azure.storage.file.share.ShareClient.existsWithResponse(java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareClient.generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues)
  - com.azure.storage.file.share.ShareClient.getAccessPolicy()
  - com.azure.storage.file.share.ShareClient.getAccountName()
  - com.azure.storage.file.share.ShareClient.getDirectoryClient(java.lang.String)
  - com.azure.storage.file.share.ShareClient.getFileClient(java.lang.String)
  - com.azure.storage.file.share.ShareClient.getHttpPipeline()
  - com.azure.storage.file.share.ShareClient.getPermission(java.lang.String)
  - com.azure.storage.file.share.ShareClient.getPermissionWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareClient.getProperties()
  - com.azure.storage.file.share.ShareClient.getPropertiesWithResponse(java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareClient.getRootDirectoryClient()
  - com.azure.storage.file.share.ShareClient.getServiceVersion()
  - com.azure.storage.file.share.ShareClient.getShareName()
  - com.azure.storage.file.share.ShareClient.getShareUrl()
  - com.azure.storage.file.share.ShareClient.getSnapshotId()
  - com.azure.storage.file.share.ShareClient.getStatistics()
  - com.azure.storage.file.share.ShareClient.getStatisticsWithResponse(java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareClient.setAccessPolicy(java.util.List<com.azure.storage.file.share.models.ShareSignedIdentifier>)
  - com.azure.storage.file.share.ShareClient.setAccessPolicyWithResponse(java.util.List<com.azure.storage.file.share.models.ShareSignedIdentifier>,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.file.share.ShareClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareClient.setQuota(int)
  - com.azure.storage.file.share.ShareClient.setQuotaWithResponse(int,java.time.Duration,com.azure.core.util.Context)
  langs:
  - java
  name: ShareClient
  nameWithType: ShareClient
  fullName: com.azure.storage.file.share.ShareClient
  type: Class
  package: com.azure.storage.file.share
  summary: >-
    This class provides a client that contains all the operations for interacting with a share in Azure Storage Share. Operations allowed by the client are creating and deleting the share, creating snapshots for the share, creating and deleting directories in the share and retrieving and updating properties metadata and access policies of the share.


    **Instantiating a Synchronous Share Client**


    ```java

    ShareClient client = new ShareClientBuilder()
         .connectionString("${connectionString}")
         .endpoint("${endpoint}")
         .buildClient();
    ```


    View <xref uid="com.azure.storage.file.share.ShareClientBuilder" data-throw-if-not-resolved="false">this</xref> for additional ways to construct the client.
  syntax:
    content: public class ShareClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.file.share.ShareClient.ShareClient(com.azure.storage.file.share.ShareAsyncClient)
  id: ShareClient(com.azure.storage.file.share.ShareAsyncClient)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: ShareClient(ShareAsyncClient client)
  nameWithType: ShareClient.ShareClient(ShareAsyncClient client)
  fullName: com.azure.storage.file.share.ShareClient.ShareClient(ShareAsyncClient client)
  overload: com.azure.storage.file.share.ShareClient.ShareClient*
  type: Constructor
  package: com.azure.storage.file.share
  syntax:
    content: " ShareClient(ShareAsyncClient client)"
    parameters:
    - id: client
      type: com.azure.storage.file.share.ShareAsyncClient
- uid: com.azure.storage.file.share.ShareClient.create()
  id: create()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: create()
  nameWithType: ShareClient.create()
  fullName: com.azure.storage.file.share.ShareClient.create()
  overload: com.azure.storage.file.share.ShareClient.create*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates the share in the storage account.


    **Code Samples**


    Create the share


    ```java

    ShareInfo response = shareClient.create();
     System.out.println("Complete creating the shares with status code: " + response);
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-share
  syntax:
    content: public ShareInfo create()
    return:
      type: com.azure.storage.file.share.models.ShareInfo
      description: The <xref uid="com.azure.storage.file.share.models.ShareInfo" data-throw-if-not-resolved="false">information about the share</xref>.
- uid: com.azure.storage.file.share.ShareClient.createDirectory(java.lang.String)
  id: createDirectory(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: createDirectory(String directoryName)
  nameWithType: ShareClient.createDirectory(String directoryName)
  fullName: com.azure.storage.file.share.ShareClient.createDirectory(String directoryName)
  overload: com.azure.storage.file.share.ShareClient.createDirectory*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates the directory in the share with the given name.


    **Code Samples**


    Create the directory "documents"


    ```java

    ShareDirectoryClient response = shareClient.createDirectory("mydirectory");
     System.out.println("Complete creating the directory.");
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory
  syntax:
    content: public ShareDirectoryClient createDirectory(String directoryName)
    parameters:
    - id: directoryName
      type: java.lang.String
      description: Name of the directory
    return:
      type: com.azure.storage.file.share.ShareDirectoryClient
      description: A response containing a <xref uid="com.azure.storage.file.share.ShareDirectoryClient" data-throw-if-not-resolved="false">ShareDirectoryClient</xref> to interact with the created directory.
- uid: com.azure.storage.file.share.ShareClient.createDirectoryWithResponse(java.lang.String,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  id: createDirectoryWithResponse(java.lang.String,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: createDirectoryWithResponse(String directoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)
  nameWithType: ShareClient.createDirectoryWithResponse(String directoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareClient.createDirectoryWithResponse(String directoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareClient.createDirectoryWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates the directory in the share with the given name and associates the passed metadata to it.


    **Code Samples**


    Create the directory "documents" with metadata "directory:metadata"


    ```java

    FileSmbProperties smbProperties = new FileSmbProperties();
     String filePermission = "filePermission";
     Response<ShareDirectoryClient> response = shareClient.createDirectoryWithResponse("documents",
         smbProperties, filePermission, Collections.singletonMap("directory", "metadata"),
         Duration.ofSeconds(1), new Context(key1, value1));
     System.out.printf("Creating the directory completed with status code %d", response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory
  syntax:
    content: public Response<ShareDirectoryClient> createDirectoryWithResponse(String directoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)
    parameters:
    - id: directoryName
      type: java.lang.String
      description: Name of the directory
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The SMB properties of the directory.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the directory.
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Optional metadata to associate with the directory
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareDirectoryClient>
      description: >-
        A response containing a <xref uid="com.azure.storage.file.share.ShareDirectoryAsyncClient" data-throw-if-not-resolved="false">ShareDirectoryAsyncClient</xref> to interact with the created directory and the
         status of its creation.
- uid: com.azure.storage.file.share.ShareClient.createFile(java.lang.String,long)
  id: createFile(java.lang.String,long)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: createFile(String fileName, long maxSize)
  nameWithType: ShareClient.createFile(String fileName, long maxSize)
  fullName: com.azure.storage.file.share.ShareClient.createFile(String fileName, long maxSize)
  overload: com.azure.storage.file.share.ShareClient.createFile*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates the file in the share with the given name and file max size.


    **Code Samples**


    Create the file "myfile" with size of 1024 bytes.


    ```java

    ShareFileClient response = shareClient.createFile("myfile", 1024);
     System.out.println("Complete creating the file with snapshot Id:" + response.getShareSnapshotId());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file
  syntax:
    content: public ShareFileClient createFile(String fileName, long maxSize)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file.
    - id: maxSize
      type: long
      description: The maximum size in bytes for the file.
    return:
      type: com.azure.storage.file.share.ShareFileClient
      description: A response containing a <xref uid="com.azure.storage.file.share.ShareFileClient" data-throw-if-not-resolved="false">ShareFileClient</xref> to interact with the created file.
- uid: com.azure.storage.file.share.ShareClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions, Duration timeout, Context context)
  nameWithType: ShareClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareClient.createFileWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: "Creates the file in the share with the given name, file max size and associates the passed properties to it.\n\n**Code Samples**\n\nCreate the file \"myfile\" with length of 1024 bytes, some headers, file smb properties and metadata\n\n```java\nShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()\n     .setContentType(\"text/html\")\n     .setContentEncoding(\"gzip\")\n     .setContentLanguage(\"en\")\n     .setCacheControl(\"no-transform\")\n     .setContentDisposition(\"attachment\");\n FileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n \n ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n \n Response<ShareFileClient> response = shareClient.createFileWithResponse(\"myfile\", 1024,\n     httpHeaders, smbProperties, filePermission, Collections.singletonMap(\"directory\", \"metadata\"),\n     requestConditions, Duration.ofSeconds(1), new Context(key1, value1));\n System.out.printf(\"Creating the file completed with status code %d\", response.getStatusCode());\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file"
  syntax:
    content: public Response<ShareFileClient> createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions, Duration timeout, Context context)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file.
    - id: maxSize
      type: long
      description: The maximum size in bytes for the file.
    - id: httpHeaders
      type: com.azure.storage.file.share.models.ShareFileHttpHeaders
      description: Additional parameters for the operation.
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The user settable file smb properties.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the file
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Optional name-value pairs associated with the file as metadata.
    - id: requestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareFileClient>
      description: >-
        A response containing a <xref uid="com.azure.storage.file.share.ShareFileClient" data-throw-if-not-resolved="false">ShareFileClient</xref> to interact with the created file and the status of its
         creation.
- uid: com.azure.storage.file.share.ShareClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  id: createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)
  nameWithType: ShareClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareClient.createFileWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates the file in the share with the given name, file max size and associates the passed properties to it.


    **Code Samples**


    Create the file "myfile" with length of 1024 bytes, some headers, file smb properties and metadata


    ```java

    ShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()
         .setContentType("text/html")
         .setContentEncoding("gzip")
         .setContentLanguage("en")
         .setCacheControl("no-transform")
         .setContentDisposition("attachment");
     FileSmbProperties smbProperties = new FileSmbProperties()
         .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))
         .setFileCreationTime(OffsetDateTime.now())
         .setFileLastWriteTime(OffsetDateTime.now())
         .setFilePermissionKey("filePermissionKey");
     String filePermission = "filePermission";
     // NOTE: filePermission and filePermissionKey should never be both set
     Response<ShareFileClient> response = shareClient.createFileWithResponse("myfile", 1024,
         httpHeaders, smbProperties, filePermission, Collections.singletonMap("directory", "metadata"),
         Duration.ofSeconds(1), new Context(key1, value1));
     System.out.printf("Creating the file completed with status code %d", response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file
  syntax:
    content: public Response<ShareFileClient> createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file.
    - id: maxSize
      type: long
      description: The maximum size in bytes for the file.
    - id: httpHeaders
      type: com.azure.storage.file.share.models.ShareFileHttpHeaders
      description: Additional parameters for the operation.
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The user settable file smb properties.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the file
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Optional name-value pairs associated with the file as metadata.
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareFileClient>
      description: >-
        A response containing a <xref uid="com.azure.storage.file.share.ShareFileClient" data-throw-if-not-resolved="false">ShareFileClient</xref> to interact with the created file and the status of its
         creation.
- uid: com.azure.storage.file.share.ShareClient.createPermission(java.lang.String)
  id: createPermission(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: createPermission(String filePermission)
  nameWithType: ShareClient.createPermission(String filePermission)
  fullName: com.azure.storage.file.share.ShareClient.createPermission(String filePermission)
  overload: com.azure.storage.file.share.ShareClient.createPermission*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a permission at the share level. If a permission already exists, it returns the key of it, else creates a new permission and returns the key.


    **Code Samples**


    ```java

    String response = shareClient.createPermission("filePermission");
     System.out.printf("The file permission key is %s", response);
    ```
  syntax:
    content: public String createPermission(String filePermission)
    parameters:
    - id: filePermission
      type: java.lang.String
      description: The file permission to get/create.
    return:
      type: java.lang.String
      description: The file permission key associated with the file permission.
- uid: com.azure.storage.file.share.ShareClient.createPermissionWithResponse(java.lang.String,com.azure.core.util.Context)
  id: createPermissionWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: createPermissionWithResponse(String filePermission, Context context)
  nameWithType: ShareClient.createPermissionWithResponse(String filePermission, Context context)
  fullName: com.azure.storage.file.share.ShareClient.createPermissionWithResponse(String filePermission, Context context)
  overload: com.azure.storage.file.share.ShareClient.createPermissionWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a permission t the share level. If a permission already exists, it returns the key of it, else creates a new permission and returns the key.


    **Code Samples**


    ```java

    Response<String> response = shareClient.createPermissionWithResponse("filePermission", Context.NONE);
     System.out.printf("The file permission key is %s", response.getValue());
    ```
  syntax:
    content: public Response<String> createPermissionWithResponse(String filePermission, Context context)
    parameters:
    - id: filePermission
      type: java.lang.String
      description: The file permission to get/create.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.String>
      description: A response that contains the file permission key associated with the file permission.
- uid: com.azure.storage.file.share.ShareClient.createSnapshot()
  id: createSnapshot()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: createSnapshot()
  nameWithType: ShareClient.createSnapshot()
  fullName: com.azure.storage.file.share.ShareClient.createSnapshot()
  overload: com.azure.storage.file.share.ShareClient.createSnapshot*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a snapshot of the share with the same metadata associated to the share at the time of creation.


    **Code Samples**


    Create a snapshot


    ```java

    ShareSnapshotInfo response = shareClient.createSnapshot();
     System.out.println("Complete creating the share snpashot with snapshot id: " + response.getSnapshot());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-share
  syntax:
    content: public ShareSnapshotInfo createSnapshot()
    return:
      type: com.azure.storage.file.share.models.ShareSnapshotInfo
      description: The <xref uid="com.azure.storage.file.share.models.ShareSnapshotInfo" data-throw-if-not-resolved="false">information about snapshot of share</xref>
- uid: com.azure.storage.file.share.ShareClient.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  id: createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: createSnapshotWithResponse(Map<String,String> metadata, Duration timeout, Context context)
  nameWithType: ShareClient.createSnapshotWithResponse(Map<String,String> metadata, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareClient.createSnapshotWithResponse(Map<String,String> metadata, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareClient.createSnapshotWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a snapshot of the share with the metadata that was passed associated to the snapshot.


    **Code Samples**


    Create a snapshot with metadata "snapshot:metadata"


    ```java

    Response<ShareSnapshotInfo> response =
         shareClient.createSnapshotWithResponse(Collections.singletonMap("snpashot", "metadata"),
             Duration.ofSeconds(1), new Context(key1, value1));
     System.out.println("Complete creating the share snpashot with snapshot id: " + response.getValue().getSnapshot());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-share
  syntax:
    content: public Response<ShareSnapshotInfo> createSnapshotWithResponse(Map<String,String> metadata, Duration timeout, Context context)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: >-
        Optional metadata to associate with the snapshot. If <code>null</code> the metadata of the share will
         be copied to the snapshot.
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareSnapshotInfo>
      description: >-
        A response containing the <xref uid="com.azure.storage.file.share.models.ShareSnapshotInfo" data-throw-if-not-resolved="false">information about snapshot of the share</xref> and status of
         creation.
- uid: com.azure.storage.file.share.ShareClient.createWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.lang.Integer,java.time.Duration,com.azure.core.util.Context)
  id: createWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.lang.Integer,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: createWithResponse(Map<String,String> metadata, Integer quotaInGB, Duration timeout, Context context)
  nameWithType: ShareClient.createWithResponse(Map<String,String> metadata, Integer quotaInGB, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareClient.createWithResponse(Map<String,String> metadata, Integer quotaInGB, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareClient.createWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates the share in the storage account with the specified metadata and quota.


    **Code Samples**


    Create the share with metadata "share:metadata"


    ```java

    Response<ShareInfo> response = shareClient.createWithResponse(Collections.singletonMap("share", "metadata"),
         null, Duration.ofSeconds(1), new Context(key1, value1));
     System.out.println("Complete creating the shares with status code: " + response.getStatusCode());
    ```


    Create the share with a quota of 10 GB


    ```java

    Response<ShareInfo> response = shareClient.createWithResponse(null, 10,
         Duration.ofSeconds(1), new Context(key1, value1));
     System.out.println("Complete creating the shares with status code: " + response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-share
  syntax:
    content: public Response<ShareInfo> createWithResponse(Map<String,String> metadata, Integer quotaInGB, Duration timeout, Context context)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Optional metadata to associate with the share
    - id: quotaInGB
      type: java.lang.Integer
      description: >-
        Optional maximum size the share is allowed to grow to in GB. This must be greater than 0 and
         less than or equal to 5120. The default value is 5120.
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareInfo>
      description: A response containing the <xref uid="com.azure.storage.file.share.models.ShareInfo" data-throw-if-not-resolved="false">information about the share</xref> and the status its creation.
- uid: com.azure.storage.file.share.ShareClient.delete()
  id: delete()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: delete()
  nameWithType: ShareClient.delete()
  fullName: com.azure.storage.file.share.ShareClient.delete()
  overload: com.azure.storage.file.share.ShareClient.delete*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the share in the storage account


    **Code Samples**


    Delete the share


    ```java

    shareClient.delete();
     System.out.println("Completed deleting the share.");
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-share
  syntax:
    content: public void delete()
- uid: com.azure.storage.file.share.ShareClient.deleteDirectory(java.lang.String)
  id: deleteDirectory(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: deleteDirectory(String directoryName)
  nameWithType: ShareClient.deleteDirectory(String directoryName)
  fullName: com.azure.storage.file.share.ShareClient.deleteDirectory(String directoryName)
  overload: com.azure.storage.file.share.ShareClient.deleteDirectory*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the specified directory in the share.


    **Code Samples**


    Delete the directory "mydirectory"


    ```java

    shareClient.deleteDirectory("mydirectory");
     System.out.println("Completed deleting the directory.");
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory
  syntax:
    content: public void deleteDirectory(String directoryName)
    parameters:
    - id: directoryName
      type: java.lang.String
      description: Name of the directory
- uid: com.azure.storage.file.share.ShareClient.deleteDirectoryWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  id: deleteDirectoryWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: deleteDirectoryWithResponse(String directoryName, Duration timeout, Context context)
  nameWithType: ShareClient.deleteDirectoryWithResponse(String directoryName, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareClient.deleteDirectoryWithResponse(String directoryName, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareClient.deleteDirectoryWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the specified directory in the share.


    **Code Samples**


    Delete the directory "mydirectory"


    ```java

    Response<Void> response = shareClient.deleteDirectoryWithResponse("mydirectory",
         Duration.ofSeconds(1), new Context(key1, value1));
     System.out.println("Complete deleting the directory with status code: " + response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory
  syntax:
    content: public Response<Void> deleteDirectoryWithResponse(String directoryName, Duration timeout, Context context)
    parameters:
    - id: directoryName
      type: java.lang.String
      description: Name of the directory
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.file.share.ShareClient.deleteFile(java.lang.String)
  id: deleteFile(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: deleteFile(String fileName)
  nameWithType: ShareClient.deleteFile(String fileName)
  fullName: com.azure.storage.file.share.ShareClient.deleteFile(String fileName)
  overload: com.azure.storage.file.share.ShareClient.deleteFile*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the specified file in the share.


    **Code Samples**


    Delete the file "myfile"


    ```java

    shareClient.deleteFile("myfile");
     System.out.println("Complete deleting the file.");
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2
  syntax:
    content: public void deleteFile(String fileName)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file
- uid: com.azure.storage.file.share.ShareClient.deleteFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: deleteFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions, Duration timeout, Context context)
  nameWithType: ShareClient.deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareClient.deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareClient.deleteFileWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the specified file in the share.


    **Code Samples**


    Delete the file "myfile"


    ```java

    ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);
     Response<Void> response = shareClient.deleteFileWithResponse("myfile", requestConditions,
         Duration.ofSeconds(1), new Context(key1, value1));
     System.out.println("Complete deleting the file with status code: " + response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2
  syntax:
    content: public Response<Void> deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions, Duration timeout, Context context)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file
    - id: requestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.file.share.ShareClient.deleteFileWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  id: deleteFileWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: deleteFileWithResponse(String fileName, Duration timeout, Context context)
  nameWithType: ShareClient.deleteFileWithResponse(String fileName, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareClient.deleteFileWithResponse(String fileName, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareClient.deleteFileWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the specified file in the share.


    **Code Samples**


    Delete the file "myfile"


    ```java

    Response<Void> response = shareClient.deleteFileWithResponse("myfile",
         Duration.ofSeconds(1), new Context(key1, value1));
     System.out.println("Complete deleting the file with status code: " + response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2
  syntax:
    content: public Response<Void> deleteFileWithResponse(String fileName, Duration timeout, Context context)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.file.share.ShareClient.deleteWithResponse(java.time.Duration,com.azure.core.util.Context)
  id: deleteWithResponse(java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: deleteWithResponse(Duration timeout, Context context)
  nameWithType: ShareClient.deleteWithResponse(Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareClient.deleteWithResponse(Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareClient.deleteWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the share in the storage account


    **Code Samples**


    Delete the share


    ```java

    Response<Void> response = shareClient.deleteWithResponse(Duration.ofSeconds(1), new Context(key1, value1));
     System.out.println("Complete deleting the share with status code: " + response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-share
  syntax:
    content: public Response<Void> deleteWithResponse(Duration timeout, Context context)
    parameters:
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.file.share.ShareClient.exists()
  id: exists()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: exists()
  nameWithType: ShareClient.exists()
  fullName: com.azure.storage.file.share.ShareClient.exists()
  overload: com.azure.storage.file.share.ShareClient.exists*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Determines if the share this client represents exists in the cloud.


    **Code Samples**


    ```java

    System.out.printf("Exists? %b%n", client.exists());

    ```
  syntax:
    content: public Boolean exists()
    return:
      type: java.lang.Boolean
      description: Flag indicating existence of the share.
- uid: com.azure.storage.file.share.ShareClient.existsWithResponse(java.time.Duration,com.azure.core.util.Context)
  id: existsWithResponse(java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: existsWithResponse(Duration timeout, Context context)
  nameWithType: ShareClient.existsWithResponse(Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareClient.existsWithResponse(Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareClient.existsWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Determines if the share this client represents exists in the cloud.


    **Code Samples**


    ```java

    Context context = new Context("Key", "Value");
     System.out.printf("Exists? %b%n", client.existsWithResponse(timeout, context).getValue());
    ```
  syntax:
    content: public Response<Boolean> existsWithResponse(Duration timeout, Context context)
    parameters:
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Boolean>
      description: Flag indicating existence of the share.
- uid: com.azure.storage.file.share.ShareClient.generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues)
  id: generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)
  nameWithType: ShareClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)
  fullName: com.azure.storage.file.share.ShareClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)
  overload: com.azure.storage.file.share.ShareClient.generateSas*
  type: Method
  package: com.azure.storage.file.share
  summary: "Generates a service sas for the queue using the specified <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">ShareServiceSasSignatureValues</xref> Note : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\">StorageSharedKeyCredential</xref>\n\nSee <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">ShareServiceSasSignatureValues</xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n ShareSasPermission permission = new ShareSasPermission().setReadPermission(true);\n \n ShareServiceSasSignatureValues values = new ShareServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n \n shareAsyncClient.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  syntax:
    content: public String generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)
    parameters:
    - id: shareServiceSasSignatureValues
      type: com.azure.storage.file.share.sas.ShareServiceSasSignatureValues
      description: <xref uid="com.azure.storage.file.share.sas.ShareServiceSasSignatureValues" data-throw-if-not-resolved="false">ShareServiceSasSignatureValues</xref>
    return:
      type: java.lang.String
      description: A <code>String</code> representing all SAS query parameters.
- uid: com.azure.storage.file.share.ShareClient.getAccessPolicy()
  id: getAccessPolicy()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: getAccessPolicy()
  nameWithType: ShareClient.getAccessPolicy()
  fullName: com.azure.storage.file.share.ShareClient.getAccessPolicy()
  overload: com.azure.storage.file.share.ShareClient.getAccessPolicy*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Retrieves stored access policies specified for the share.


    **Code Samples**


    List the stored access policies


    ```java

    for (ShareSignedIdentifier result : shareClient.getAccessPolicy()) {
         System.out.printf("Access policy %s allows these permissions: %s",
             result.getId(), result.getAccessPolicy().getPermissions());
     }
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-share-acl
  syntax:
    content: public PagedIterable<ShareSignedIdentifier> getAccessPolicy()
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.storage.file.share.models.ShareSignedIdentifier>
      description: The stored access policies specified on the queue.
- uid: com.azure.storage.file.share.ShareClient.getAccountName()
  id: getAccountName()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: getAccountName()
  nameWithType: ShareClient.getAccountName()
  fullName: com.azure.storage.file.share.ShareClient.getAccountName()
  overload: com.azure.storage.file.share.ShareClient.getAccountName*
  type: Method
  package: com.azure.storage.file.share
  summary: Get associated account name.
  syntax:
    content: public String getAccountName()
    return:
      type: java.lang.String
      description: account name associated with this storage resource.
- uid: com.azure.storage.file.share.ShareClient.getDirectoryClient(java.lang.String)
  id: getDirectoryClient(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: getDirectoryClient(String directoryName)
  nameWithType: ShareClient.getDirectoryClient(String directoryName)
  fullName: com.azure.storage.file.share.ShareClient.getDirectoryClient(String directoryName)
  overload: com.azure.storage.file.share.ShareClient.getDirectoryClient*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Constructs a <xref uid="com.azure.storage.file.share.ShareDirectoryClient" data-throw-if-not-resolved="false">ShareDirectoryClient</xref> that interacts with the specified directory.


    If the directory doesn't exist in the share <xref uid="com.azure.storage.file.share.ShareDirectoryClient.create()" data-throw-if-not-resolved="false">create</xref> in the client will need to be called before interaction with the directory can happen.
  syntax:
    content: public ShareDirectoryClient getDirectoryClient(String directoryName)
    parameters:
    - id: directoryName
      type: java.lang.String
      description: Name of the directory
    return:
      type: com.azure.storage.file.share.ShareDirectoryClient
      description: a <xref uid="com.azure.storage.file.share.ShareDirectoryClient" data-throw-if-not-resolved="false">ShareDirectoryClient</xref> that interacts with the directory in the share
- uid: com.azure.storage.file.share.ShareClient.getFileClient(java.lang.String)
  id: getFileClient(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: getFileClient(String filePath)
  nameWithType: ShareClient.getFileClient(String filePath)
  fullName: com.azure.storage.file.share.ShareClient.getFileClient(String filePath)
  overload: com.azure.storage.file.share.ShareClient.getFileClient*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Constructs a <xref uid="com.azure.storage.file.share.ShareFileClient" data-throw-if-not-resolved="false">ShareFileClient</xref> that interacts with the specified file.


    If the file doesn't exist in the share <xref uid="com.azure.storage.file.share.ShareFileClient.create(long)" data-throw-if-not-resolved="false">ShareFileClient#create(long)</xref> ) create\} in the client will need to be called before interaction with the file can happen.
  syntax:
    content: public ShareFileClient getFileClient(String filePath)
    parameters:
    - id: filePath
      type: java.lang.String
      description: Name of the file
    return:
      type: com.azure.storage.file.share.ShareFileClient
      description: a <xref uid="com.azure.storage.file.share.ShareFileClient" data-throw-if-not-resolved="false">ShareFileClient</xref> that interacts with the file in the share
- uid: com.azure.storage.file.share.ShareClient.getHttpPipeline()
  id: getHttpPipeline()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: getHttpPipeline()
  nameWithType: ShareClient.getHttpPipeline()
  fullName: com.azure.storage.file.share.ShareClient.getHttpPipeline()
  overload: com.azure.storage.file.share.ShareClient.getHttpPipeline*
  type: Method
  package: com.azure.storage.file.share
  summary: Gets the <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">HttpPipeline</xref> powering this client.
  syntax:
    content: public HttpPipeline getHttpPipeline()
    return:
      type: com.azure.core.http.HttpPipeline
      description: The pipeline.
- uid: com.azure.storage.file.share.ShareClient.getPermission(java.lang.String)
  id: getPermission(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: getPermission(String filePermissionKey)
  nameWithType: ShareClient.getPermission(String filePermissionKey)
  fullName: com.azure.storage.file.share.ShareClient.getPermission(String filePermissionKey)
  overload: com.azure.storage.file.share.ShareClient.getPermission*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Gets a permission for a given key


    **Code Samples**


    ```java

    String response = shareClient.getPermission("filePermissionKey");
     System.out.printf("The file permission is %s", response);
    ```
  syntax:
    content: public String getPermission(String filePermissionKey)
    parameters:
    - id: filePermissionKey
      type: java.lang.String
      description: The file permission key.
    return:
      type: java.lang.String
      description: The file permission associated with the file permission key.
- uid: com.azure.storage.file.share.ShareClient.getPermissionWithResponse(java.lang.String,com.azure.core.util.Context)
  id: getPermissionWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: getPermissionWithResponse(String filePermissionKey, Context context)
  nameWithType: ShareClient.getPermissionWithResponse(String filePermissionKey, Context context)
  fullName: com.azure.storage.file.share.ShareClient.getPermissionWithResponse(String filePermissionKey, Context context)
  overload: com.azure.storage.file.share.ShareClient.getPermissionWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Gets a permission for a given key.


    **Code Samples**


    ```java

    Response<String> response = shareClient.getPermissionWithResponse("filePermissionKey", Context.NONE);
     System.out.printf("The file permission is %s", response.getValue());
    ```
  syntax:
    content: public Response<String> getPermissionWithResponse(String filePermissionKey, Context context)
    parameters:
    - id: filePermissionKey
      type: java.lang.String
      description: The file permission key.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.String>
      description: A response that contains th file permission associated with the file permission key.
- uid: com.azure.storage.file.share.ShareClient.getProperties()
  id: getProperties()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: getProperties()
  nameWithType: ShareClient.getProperties()
  fullName: com.azure.storage.file.share.ShareClient.getProperties()
  overload: com.azure.storage.file.share.ShareClient.getProperties*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Retrieves the properties of the share, these include the metadata associated to it and the quota that the share is restricted to.


    **Code Samples**


    Retrieve the share properties


    ```java

    ShareProperties properties = shareClient.getProperties();
     System.out.printf("Share quota: %d, Metadata: %s", properties.getQuota(), properties.getMetadata());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-share-properties
  syntax:
    content: public ShareProperties getProperties()
    return:
      type: com.azure.storage.file.share.models.ShareProperties
      description: The <xref uid="com.azure.storage.file.share.models.ShareProperties" data-throw-if-not-resolved="false">properties of the share</xref>
- uid: com.azure.storage.file.share.ShareClient.getPropertiesWithResponse(java.time.Duration,com.azure.core.util.Context)
  id: getPropertiesWithResponse(java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: getPropertiesWithResponse(Duration timeout, Context context)
  nameWithType: ShareClient.getPropertiesWithResponse(Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareClient.getPropertiesWithResponse(Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareClient.getPropertiesWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Retrieves the properties of the share, these include the metadata associated to it and the quota that the share is restricted to.


    **Code Samples**


    Retrieve the share properties


    ```java

    ShareProperties properties = shareClient.getPropertiesWithResponse(
         Duration.ofSeconds(1), new Context(key1, value1)).getValue();
     System.out.printf("Share quota: %d, Metadata: %s", properties.getQuota(), properties.getMetadata());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-share-properties
  syntax:
    content: public Response<ShareProperties> getPropertiesWithResponse(Duration timeout, Context context)
    parameters:
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareProperties>
      description: A response containing <xref uid="com.azure.storage.file.share.models.ShareProperties" data-throw-if-not-resolved="false">properties of the share</xref> with response status code
- uid: com.azure.storage.file.share.ShareClient.getRootDirectoryClient()
  id: getRootDirectoryClient()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: getRootDirectoryClient()
  nameWithType: ShareClient.getRootDirectoryClient()
  fullName: com.azure.storage.file.share.ShareClient.getRootDirectoryClient()
  overload: com.azure.storage.file.share.ShareClient.getRootDirectoryClient*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Constructs a <xref uid="com.azure.storage.file.share.ShareDirectoryClient" data-throw-if-not-resolved="false">ShareDirectoryClient</xref> that interacts with the root directory in the share.


    If the directory doesn't exist in the share <xref uid="com.azure.storage.file.share.ShareDirectoryClient.create()" data-throw-if-not-resolved="false">create</xref> in the client will need to be called before interaction with the directory can happen.
  syntax:
    content: public ShareDirectoryClient getRootDirectoryClient()
    return:
      type: com.azure.storage.file.share.ShareDirectoryClient
      description: a <xref uid="com.azure.storage.file.share.ShareDirectoryClient" data-throw-if-not-resolved="false">ShareDirectoryClient</xref> that interacts with the root directory in the share
- uid: com.azure.storage.file.share.ShareClient.getServiceVersion()
  id: getServiceVersion()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: getServiceVersion()
  nameWithType: ShareClient.getServiceVersion()
  fullName: com.azure.storage.file.share.ShareClient.getServiceVersion()
  overload: com.azure.storage.file.share.ShareClient.getServiceVersion*
  type: Method
  package: com.azure.storage.file.share
  summary: Gets the service version the client is using.
  syntax:
    content: public ShareServiceVersion getServiceVersion()
    return:
      type: com.azure.storage.file.share.ShareServiceVersion
      description: the service version the client is using.
- uid: com.azure.storage.file.share.ShareClient.getShareName()
  id: getShareName()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: getShareName()
  nameWithType: ShareClient.getShareName()
  fullName: com.azure.storage.file.share.ShareClient.getShareName()
  overload: com.azure.storage.file.share.ShareClient.getShareName*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Get share name from share client.


    **Code Samples**


    ```java

    String shareName = shareAsyncClient.getShareName();
     System.out.println("The name of the share is " + shareName);
    ```
  syntax:
    content: public String getShareName()
    return:
      type: java.lang.String
      description: The name of the share.
- uid: com.azure.storage.file.share.ShareClient.getShareUrl()
  id: getShareUrl()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: getShareUrl()
  nameWithType: ShareClient.getShareUrl()
  fullName: com.azure.storage.file.share.ShareClient.getShareUrl()
  overload: com.azure.storage.file.share.ShareClient.getShareUrl*
  type: Method
  package: com.azure.storage.file.share
  summary: Get the url of the storage share client.
  syntax:
    content: public String getShareUrl()
    return:
      type: java.lang.String
      description: the url of the Storage Share.
- uid: com.azure.storage.file.share.ShareClient.getSnapshotId()
  id: getSnapshotId()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: getSnapshotId()
  nameWithType: ShareClient.getSnapshotId()
  fullName: com.azure.storage.file.share.ShareClient.getSnapshotId()
  overload: com.azure.storage.file.share.ShareClient.getSnapshotId*
  type: Method
  package: com.azure.storage.file.share
  summary: "Get snapshot id which attached to <xref uid=\"com.azure.storage.file.share.ShareClient\" data-throw-if-not-resolved=\"false\">ShareClient</xref>. Return `null` if no snapshot id attached.\n\n**Code Samples**\n\nGet the share snapshot id.\n\n```java\nOffsetDateTime currentTime = OffsetDateTime.of(LocalDateTime.now(), ZoneOffset.UTC);\n ShareClient shareClient = new ShareClientBuilder().endpoint(\"https://${accountName}.file.core.windows.net\")\n     .sasToken(\"${SASToken}\")\n     .shareName(\"myshare\")\n     .snapshot(currentTime.toString())\n     .buildClient();\n \n System.out.printf(\"Snapshot ID: %s%n\", shareClient.getSnapshotId());\n```"
  syntax:
    content: public String getSnapshotId()
    return:
      type: java.lang.String
      description: >-
        The snapshot id which is a unique <code>DateTime</code> value that identifies the share snapshot to its base
         share.
- uid: com.azure.storage.file.share.ShareClient.getStatistics()
  id: getStatistics()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: getStatistics()
  nameWithType: ShareClient.getStatistics()
  fullName: com.azure.storage.file.share.ShareClient.getStatistics()
  overload: com.azure.storage.file.share.ShareClient.getStatistics*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Retrieves storage statistics about the share.


    **Code Samples**


    Retrieve the storage statistics


    ```java

    ShareStatistics response = shareClient.getStatistics();
     System.out.printf("The share is using %d GB", response.getShareUsageInGB());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-share-stats
  syntax:
    content: public ShareStatistics getStatistics()
    return:
      type: com.azure.storage.file.share.models.ShareStatistics
      description: The storage <xref uid="com.azure.storage.file.share.models.ShareStatistics" data-throw-if-not-resolved="false">statistics of the share</xref>
- uid: com.azure.storage.file.share.ShareClient.getStatisticsWithResponse(java.time.Duration,com.azure.core.util.Context)
  id: getStatisticsWithResponse(java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: getStatisticsWithResponse(Duration timeout, Context context)
  nameWithType: ShareClient.getStatisticsWithResponse(Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareClient.getStatisticsWithResponse(Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareClient.getStatisticsWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Retrieves storage statistics about the share.


    **Code Samples**


    Retrieve the storage statistics


    ```java

    Response<ShareStatistics> response = shareClient.getStatisticsWithResponse(
         Duration.ofSeconds(1), new Context(key1, value1));
     System.out.printf("The share is using %d GB", response.getValue().getShareUsageInGB());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-share-stats
  syntax:
    content: public Response<ShareStatistics> getStatisticsWithResponse(Duration timeout, Context context)
    parameters:
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareStatistics>
      description: A response containing the <xref uid="com.azure.storage.file.share.models.ShareStatistics" data-throw-if-not-resolved="false">statistics of the share</xref>
- uid: com.azure.storage.file.share.ShareClient.setAccessPolicy(java.util.List<com.azure.storage.file.share.models.ShareSignedIdentifier>)
  id: setAccessPolicy(java.util.List<com.azure.storage.file.share.models.ShareSignedIdentifier>)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: setAccessPolicy(List<ShareSignedIdentifier> permissions)
  nameWithType: ShareClient.setAccessPolicy(List<ShareSignedIdentifier> permissions)
  fullName: com.azure.storage.file.share.ShareClient.setAccessPolicy(List<ShareSignedIdentifier> permissions)
  overload: com.azure.storage.file.share.ShareClient.setAccessPolicy*
  type: Method
  package: com.azure.storage.file.share
  summary: "Sets stored access policies for the share.\n\n**Code Samples**\n\nSet a read only stored access policy\n\n```java\nShareAccessPolicy accessPolicy = new ShareAccessPolicy().setPermissions(\"r\")\n     .setStartsOn(OffsetDateTime.now(ZoneOffset.UTC))\n     .setExpiresOn(OffsetDateTime.now(ZoneOffset.UTC).plusDays(10));\n \n ShareSignedIdentifier permission = new ShareSignedIdentifier().setId(\"mypolicy\").setAccessPolicy(accessPolicy);\n \n shareClient.setAccessPolicy(Collections.singletonList(permission));\n System.out.println(\"Setting access policies completed.\");\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-share-acl"
  syntax:
    content: public ShareInfo setAccessPolicy(List<ShareSignedIdentifier> permissions)
    parameters:
    - id: permissions
      type: java.util.List<com.azure.storage.file.share.models.ShareSignedIdentifier>
      description: Access policies to set on the queue
    return:
      type: com.azure.storage.file.share.models.ShareInfo
      description: The <xref uid="com.azure.storage.file.share.models.ShareInfo" data-throw-if-not-resolved="false">information of the share</xref>
- uid: com.azure.storage.file.share.ShareClient.setAccessPolicyWithResponse(java.util.List<com.azure.storage.file.share.models.ShareSignedIdentifier>,java.time.Duration,com.azure.core.util.Context)
  id: setAccessPolicyWithResponse(java.util.List<com.azure.storage.file.share.models.ShareSignedIdentifier>,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: setAccessPolicyWithResponse(List<ShareSignedIdentifier> permissions, Duration timeout, Context context)
  nameWithType: ShareClient.setAccessPolicyWithResponse(List<ShareSignedIdentifier> permissions, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareClient.setAccessPolicyWithResponse(List<ShareSignedIdentifier> permissions, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareClient.setAccessPolicyWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: "Sets stored access policies for the share.\n\n**Code Samples**\n\nSet a read only stored access policy\n\n```java\nShareAccessPolicy accessPolicy = new ShareAccessPolicy().setPermissions(\"r\")\n     .setStartsOn(OffsetDateTime.now(ZoneOffset.UTC))\n     .setExpiresOn(OffsetDateTime.now(ZoneOffset.UTC).plusDays(10));\n \n ShareSignedIdentifier permission = new ShareSignedIdentifier().setId(\"mypolicy\").setAccessPolicy(accessPolicy);\n \n Response<ShareInfo> response = shareClient.setAccessPolicyWithResponse(Collections.singletonList(permission),\n     Duration.ofSeconds(1), new Context(key1, value1));\n System.out.printf(\"Setting access policies completed with status code %d\", response.getStatusCode());\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-share-acl"
  syntax:
    content: public Response<ShareInfo> setAccessPolicyWithResponse(List<ShareSignedIdentifier> permissions, Duration timeout, Context context)
    parameters:
    - id: permissions
      type: java.util.List<com.azure.storage.file.share.models.ShareSignedIdentifier>
      description: Access policies to set on the queue
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareInfo>
      description: >-
        A response containing the <xref uid="com.azure.storage.file.share.models.ShareInfo" data-throw-if-not-resolved="false">information of the share</xref> with headers and response status
         code
- uid: com.azure.storage.file.share.ShareClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  id: setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: setMetadata(Map<String,String> metadata)
  nameWithType: ShareClient.setMetadata(Map<String,String> metadata)
  fullName: com.azure.storage.file.share.ShareClient.setMetadata(Map<String,String> metadata)
  overload: com.azure.storage.file.share.ShareClient.setMetadata*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the user-defined metadata to associate to the share.


    If `null` is passed for the metadata it will clear the metadata associated to the share.


    **Code Samples**


    Set the metadata to "share:updatedMetadata"


    ```java

    shareClient.setMetadata(Collections.singletonMap("share", "updatedMetadata"));
     System.out.println("Setting the share metadata.");
    ```


    Clear the metadata of the share


    ```java

    shareClient.setMetadata(null);
     System.out.println("Clear metadata completed.");
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-share-metadata
  syntax:
    content: public ShareInfo setMetadata(Map<String,String> metadata)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to set on the share, if null is passed the metadata for the share is cleared
    return:
      type: com.azure.storage.file.share.models.ShareInfo
      description: The <xref uid="com.azure.storage.file.share.models.ShareProperties" data-throw-if-not-resolved="false">properties of the share</xref>
- uid: com.azure.storage.file.share.ShareClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  id: setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: setMetadataWithResponse(Map<String,String> metadata, Duration timeout, Context context)
  nameWithType: ShareClient.setMetadataWithResponse(Map<String,String> metadata, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareClient.setMetadataWithResponse(Map<String,String> metadata, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareClient.setMetadataWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the user-defined metadata to associate to the share.


    If `null` is passed for the metadata it will clear the metadata associated to the share.


    **Code Samples**


    Set the metadata to "share:updatedMetadata"


    ```java

    Response<ShareInfo> response = shareClient.setMetadataWithResponse(
         Collections.singletonMap("share", "updatedMetadata"), Duration.ofSeconds(1),
         new Context(key1, value1));
     System.out.printf("Setting the share metadata completed with status code %d", response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-share-metadata
  syntax:
    content: public Response<ShareInfo> setMetadataWithResponse(Map<String,String> metadata, Duration timeout, Context context)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to set on the share, if null is passed the metadata for the share is cleared
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareInfo>
      description: A response containing <xref uid="com.azure.storage.file.share.models.ShareProperties" data-throw-if-not-resolved="false">properties of the share</xref> with response status code
- uid: com.azure.storage.file.share.ShareClient.setQuota(int)
  id: setQuota(int)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: setQuota(int quotaInGB)
  nameWithType: ShareClient.setQuota(int quotaInGB)
  fullName: com.azure.storage.file.share.ShareClient.setQuota(int quotaInGB)
  overload: com.azure.storage.file.share.ShareClient.setQuota*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the maximum size in GB that the share is allowed to grow.


    **Code Samples**


    Set the quota to 1024 GB


    ```java

    System.out.println("Setting the share quota completed." + shareClient.setQuota(1024));

    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-share-properties
  syntax:
    content: public ShareInfo setQuota(int quotaInGB)
    parameters:
    - id: quotaInGB
      type: int
      description: Size in GB to limit the share's growth. The quota in GB must be between 1 and 5120.
    return:
      type: com.azure.storage.file.share.models.ShareInfo
      description: The <xref uid="com.azure.storage.file.share.models.ShareProperties" data-throw-if-not-resolved="false">properties of the share</xref>
- uid: com.azure.storage.file.share.ShareClient.setQuotaWithResponse(int,java.time.Duration,com.azure.core.util.Context)
  id: setQuotaWithResponse(int,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareClient
  langs:
  - java
  name: setQuotaWithResponse(int quotaInGB, Duration timeout, Context context)
  nameWithType: ShareClient.setQuotaWithResponse(int quotaInGB, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareClient.setQuotaWithResponse(int quotaInGB, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareClient.setQuotaWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the maximum size in GB that the share is allowed to grow.


    **Code Samples**


    Set the quota to 1024 GB


    ```java

    Response<ShareInfo> response = shareClient.setQuotaWithResponse(1024,
         Duration.ofSeconds(1), new Context(key1, value1));
     System.out.printf("Setting the share quota completed with status code %d", response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-share-properties
  syntax:
    content: public Response<ShareInfo> setQuotaWithResponse(int quotaInGB, Duration timeout, Context context)
    parameters:
    - id: quotaInGB
      type: int
      description: Size in GB to limit the share's growth. The quota in GB must be between 1 and 5120.
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareInfo>
      description: A response containing <xref uid="com.azure.storage.file.share.models.ShareProperties" data-throw-if-not-resolved="false">properties of the share</xref> with response status code
references:
- uid: com.azure.storage.file.share.ShareAsyncClient
  name: ShareAsyncClient
  nameWithType: ShareAsyncClient
  fullName: com.azure.storage.file.share.ShareAsyncClient
- uid: com.azure.storage.file.share.ShareClient.ShareClient*
  name: ShareClient
  nameWithType: ShareClient.ShareClient
  fullName: com.azure.storage.file.share.ShareClient.ShareClient
  package: com.azure.storage.file.share
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.file.share.ShareClient.getShareUrl*
  name: getShareUrl
  nameWithType: ShareClient.getShareUrl
  fullName: com.azure.storage.file.share.ShareClient.getShareUrl
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareServiceVersion
  name: ShareServiceVersion
  nameWithType: ShareServiceVersion
  fullName: com.azure.storage.file.share.ShareServiceVersion
- uid: com.azure.storage.file.share.ShareClient.getServiceVersion*
  name: getServiceVersion
  nameWithType: ShareClient.getServiceVersion
  fullName: com.azure.storage.file.share.ShareClient.getServiceVersion
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryClient
  name: ShareDirectoryClient
  nameWithType: ShareDirectoryClient
  fullName: com.azure.storage.file.share.ShareDirectoryClient
- uid: com.azure.storage.file.share.ShareClient.getRootDirectoryClient*
  name: getRootDirectoryClient
  nameWithType: ShareClient.getRootDirectoryClient
  fullName: com.azure.storage.file.share.ShareClient.getRootDirectoryClient
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareClient.getDirectoryClient*
  name: getDirectoryClient
  nameWithType: ShareClient.getDirectoryClient
  fullName: com.azure.storage.file.share.ShareClient.getDirectoryClient
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareFileClient
  name: ShareFileClient
  nameWithType: ShareFileClient
  fullName: com.azure.storage.file.share.ShareFileClient
- uid: com.azure.storage.file.share.ShareClient.getFileClient*
  name: getFileClient
  nameWithType: ShareClient.getFileClient
  fullName: com.azure.storage.file.share.ShareClient.getFileClient
  package: com.azure.storage.file.share
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: com.azure.storage.file.share.ShareClient.exists*
  name: exists
  nameWithType: ShareClient.exists
  fullName: com.azure.storage.file.share.ShareClient.exists
  package: com.azure.storage.file.share
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: com.azure.core.util.Context
  spec.java:
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
- uid: com.azure.core.http.rest.Response<java.lang.Boolean>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareClient.existsWithResponse*
  name: existsWithResponse
  nameWithType: ShareClient.existsWithResponse
  fullName: com.azure.storage.file.share.ShareClient.existsWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.ShareInfo
  name: ShareInfo
  nameWithType: ShareInfo
  fullName: com.azure.storage.file.share.models.ShareInfo
- uid: com.azure.storage.file.share.ShareClient.create*
  name: create
  nameWithType: ShareClient.create
  fullName: com.azure.storage.file.share.ShareClient.create
  package: com.azure.storage.file.share
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: java.lang.Integer
  spec.java:
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
- uid: com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareInfo>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareInfo
    name: ShareInfo
    fullName: com.azure.storage.file.share.models.ShareInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareClient.createWithResponse*
  name: createWithResponse
  nameWithType: ShareClient.createWithResponse
  fullName: com.azure.storage.file.share.ShareClient.createWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.ShareSnapshotInfo
  name: ShareSnapshotInfo
  nameWithType: ShareSnapshotInfo
  fullName: com.azure.storage.file.share.models.ShareSnapshotInfo
- uid: com.azure.storage.file.share.ShareClient.createSnapshot*
  name: createSnapshot
  nameWithType: ShareClient.createSnapshot
  fullName: com.azure.storage.file.share.ShareClient.createSnapshot
  package: com.azure.storage.file.share
- uid: com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareSnapshotInfo>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareSnapshotInfo
    name: ShareSnapshotInfo
    fullName: com.azure.storage.file.share.models.ShareSnapshotInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareClient.createSnapshotWithResponse*
  name: createSnapshotWithResponse
  nameWithType: ShareClient.createSnapshotWithResponse
  fullName: com.azure.storage.file.share.ShareClient.createSnapshotWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareClient.delete*
  name: delete
  nameWithType: ShareClient.delete
  fullName: com.azure.storage.file.share.ShareClient.delete
  package: com.azure.storage.file.share
- uid: com.azure.core.http.rest.Response<java.lang.Void>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareClient.deleteWithResponse*
  name: deleteWithResponse
  nameWithType: ShareClient.deleteWithResponse
  fullName: com.azure.storage.file.share.ShareClient.deleteWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.ShareProperties
  name: ShareProperties
  nameWithType: ShareProperties
  fullName: com.azure.storage.file.share.models.ShareProperties
- uid: com.azure.storage.file.share.ShareClient.getProperties*
  name: getProperties
  nameWithType: ShareClient.getProperties
  fullName: com.azure.storage.file.share.ShareClient.getProperties
  package: com.azure.storage.file.share
- uid: com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareProperties>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareProperties
    name: ShareProperties
    fullName: com.azure.storage.file.share.models.ShareProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareClient.getPropertiesWithResponse*
  name: getPropertiesWithResponse
  nameWithType: ShareClient.getPropertiesWithResponse
  fullName: com.azure.storage.file.share.ShareClient.getPropertiesWithResponse
  package: com.azure.storage.file.share
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.storage.file.share.ShareClient.setQuota*
  name: setQuota
  nameWithType: ShareClient.setQuota
  fullName: com.azure.storage.file.share.ShareClient.setQuota
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareClient.setQuotaWithResponse*
  name: setQuotaWithResponse
  nameWithType: ShareClient.setQuotaWithResponse
  fullName: com.azure.storage.file.share.ShareClient.setQuotaWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareClient.setMetadata*
  name: setMetadata
  nameWithType: ShareClient.setMetadata
  fullName: com.azure.storage.file.share.ShareClient.setMetadata
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareClient.setMetadataWithResponse*
  name: setMetadataWithResponse
  nameWithType: ShareClient.setMetadataWithResponse
  fullName: com.azure.storage.file.share.ShareClient.setMetadataWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.core.http.rest.PagedIterable<com.azure.storage.file.share.models.ShareSignedIdentifier>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareSignedIdentifier
    name: ShareSignedIdentifier
    fullName: com.azure.storage.file.share.models.ShareSignedIdentifier
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareClient.getAccessPolicy*
  name: getAccessPolicy
  nameWithType: ShareClient.getAccessPolicy
  fullName: com.azure.storage.file.share.ShareClient.getAccessPolicy
  package: com.azure.storage.file.share
- uid: java.util.List<com.azure.storage.file.share.models.ShareSignedIdentifier>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareSignedIdentifier
    name: ShareSignedIdentifier
    fullName: com.azure.storage.file.share.models.ShareSignedIdentifier
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareClient.setAccessPolicy*
  name: setAccessPolicy
  nameWithType: ShareClient.setAccessPolicy
  fullName: com.azure.storage.file.share.ShareClient.setAccessPolicy
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareClient.setAccessPolicyWithResponse*
  name: setAccessPolicyWithResponse
  nameWithType: ShareClient.setAccessPolicyWithResponse
  fullName: com.azure.storage.file.share.ShareClient.setAccessPolicyWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.ShareStatistics
  name: ShareStatistics
  nameWithType: ShareStatistics
  fullName: com.azure.storage.file.share.models.ShareStatistics
- uid: com.azure.storage.file.share.ShareClient.getStatistics*
  name: getStatistics
  nameWithType: ShareClient.getStatistics
  fullName: com.azure.storage.file.share.ShareClient.getStatistics
  package: com.azure.storage.file.share
- uid: com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareStatistics>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareStatistics
    name: ShareStatistics
    fullName: com.azure.storage.file.share.models.ShareStatistics
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareClient.getStatisticsWithResponse*
  name: getStatisticsWithResponse
  nameWithType: ShareClient.getStatisticsWithResponse
  fullName: com.azure.storage.file.share.ShareClient.getStatisticsWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareClient.createDirectory*
  name: createDirectory
  nameWithType: ShareClient.createDirectory
  fullName: com.azure.storage.file.share.ShareClient.createDirectory
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.FileSmbProperties
  name: FileSmbProperties
  nameWithType: FileSmbProperties
  fullName: com.azure.storage.file.share.FileSmbProperties
- uid: com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareDirectoryClient>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.ShareDirectoryClient
    name: ShareDirectoryClient
    fullName: com.azure.storage.file.share.ShareDirectoryClient
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareClient.createDirectoryWithResponse*
  name: createDirectoryWithResponse
  nameWithType: ShareClient.createDirectoryWithResponse
  fullName: com.azure.storage.file.share.ShareClient.createDirectoryWithResponse
  package: com.azure.storage.file.share
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.storage.file.share.ShareClient.createFile*
  name: createFile
  nameWithType: ShareClient.createFile
  fullName: com.azure.storage.file.share.ShareClient.createFile
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.ShareFileHttpHeaders
  name: ShareFileHttpHeaders
  nameWithType: ShareFileHttpHeaders
  fullName: com.azure.storage.file.share.models.ShareFileHttpHeaders
- uid: com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareFileClient>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.ShareFileClient
    name: ShareFileClient
    fullName: com.azure.storage.file.share.ShareFileClient
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareClient.createFileWithResponse*
  name: createFileWithResponse
  nameWithType: ShareClient.createFileWithResponse
  fullName: com.azure.storage.file.share.ShareClient.createFileWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.ShareRequestConditions
  name: ShareRequestConditions
  nameWithType: ShareRequestConditions
  fullName: com.azure.storage.file.share.models.ShareRequestConditions
- uid: com.azure.storage.file.share.ShareClient.deleteDirectory*
  name: deleteDirectory
  nameWithType: ShareClient.deleteDirectory
  fullName: com.azure.storage.file.share.ShareClient.deleteDirectory
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareClient.deleteDirectoryWithResponse*
  name: deleteDirectoryWithResponse
  nameWithType: ShareClient.deleteDirectoryWithResponse
  fullName: com.azure.storage.file.share.ShareClient.deleteDirectoryWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareClient.deleteFile*
  name: deleteFile
  nameWithType: ShareClient.deleteFile
  fullName: com.azure.storage.file.share.ShareClient.deleteFile
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareClient.deleteFileWithResponse*
  name: deleteFileWithResponse
  nameWithType: ShareClient.deleteFileWithResponse
  fullName: com.azure.storage.file.share.ShareClient.deleteFileWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareClient.createPermission*
  name: createPermission
  nameWithType: ShareClient.createPermission
  fullName: com.azure.storage.file.share.ShareClient.createPermission
  package: com.azure.storage.file.share
- uid: com.azure.core.http.rest.Response<java.lang.String>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareClient.createPermissionWithResponse*
  name: createPermissionWithResponse
  nameWithType: ShareClient.createPermissionWithResponse
  fullName: com.azure.storage.file.share.ShareClient.createPermissionWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareClient.getPermission*
  name: getPermission
  nameWithType: ShareClient.getPermission
  fullName: com.azure.storage.file.share.ShareClient.getPermission
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareClient.getPermissionWithResponse*
  name: getPermissionWithResponse
  nameWithType: ShareClient.getPermissionWithResponse
  fullName: com.azure.storage.file.share.ShareClient.getPermissionWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareClient.getSnapshotId*
  name: getSnapshotId
  nameWithType: ShareClient.getSnapshotId
  fullName: com.azure.storage.file.share.ShareClient.getSnapshotId
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareClient.getShareName*
  name: getShareName
  nameWithType: ShareClient.getShareName
  fullName: com.azure.storage.file.share.ShareClient.getShareName
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareClient.getAccountName*
  name: getAccountName
  nameWithType: ShareClient.getAccountName
  fullName: com.azure.storage.file.share.ShareClient.getAccountName
  package: com.azure.storage.file.share
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: com.azure.storage.file.share.ShareClient.getHttpPipeline*
  name: getHttpPipeline
  nameWithType: ShareClient.getHttpPipeline
  fullName: com.azure.storage.file.share.ShareClient.getHttpPipeline
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.sas.ShareServiceSasSignatureValues
  name: ShareServiceSasSignatureValues
  nameWithType: ShareServiceSasSignatureValues
  fullName: com.azure.storage.file.share.sas.ShareServiceSasSignatureValues
- uid: com.azure.storage.file.share.ShareClient.generateSas*
  name: generateSas
  nameWithType: ShareClient.generateSas
  fullName: com.azure.storage.file.share.ShareClient.generateSas
  package: com.azure.storage.file.share
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.storage.file.share.models.ShareSignedIdentifier
  name: ShareSignedIdentifier
  nameWithType: ShareSignedIdentifier
  fullName: com.azure.storage.file.share.models.ShareSignedIdentifier
- uid: com.azure.core.http.rest.PagedIterable
  name: PagedIterable
  nameWithType: PagedIterable
  fullName: com.azure.core.http.rest.PagedIterable
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
