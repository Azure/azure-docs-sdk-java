### YamlMime:JavaType
constructors:
- microsoft.servicefabric.actors.runtime.FabricActor.FabricActor(FabricActorService,ActorId)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.actors.runtime.ActorBase?alt=microsoft.servicefabric.actors.runtime.ActorBase&text=ActorBase" data-throw-if-not-resolved="False"/>
inheritedMembers:
- microsoft.servicefabric.actors.runtime.ActorBase.ActorBase(FabricActorService,ActorId)
- microsoft.servicefabric.actors.runtime.ActorBase.getActorService()
- microsoft.servicefabric.actors.runtime.ActorBase.getApplicationName()
- microsoft.servicefabric.actors.runtime.ActorBase.getDiagnosticsContext()
- microsoft.servicefabric.actors.runtime.ActorBase.getId()
- microsoft.servicefabric.actors.runtime.ActorBase.getReminder(String)
- microsoft.servicefabric.actors.runtime.ActorBase.getServiceUri()
- microsoft.servicefabric.actors.runtime.ActorBase.isDirty()
- microsoft.servicefabric.actors.runtime.ActorBase.onActivateAsync()
- microsoft.servicefabric.actors.runtime.ActorBase.onDeactivateAsync()
- microsoft.servicefabric.actors.runtime.ActorBase.onPostActorMethodAsync(ActorMethodContext)
- microsoft.servicefabric.actors.runtime.ActorBase.onPreActorMethodAsync(ActorMethodContext)
- microsoft.servicefabric.actors.runtime.ActorBase.registerReminderAsync(String,byte [],Duration,Duration)
- microsoft.servicefabric.actors.runtime.ActorBase.registerTimer(Function<Object, CompletableFuture<?>>,Object,Duration,Duration)
- microsoft.servicefabric.actors.runtime.ActorBase.registerTimer(Function<Object, CompletableFuture<?>>,String,Object,Duration,Duration)
- microsoft.servicefabric.actors.runtime.ActorBase.setDirty(boolean)
- microsoft.servicefabric.actors.runtime.ActorBase.setDummy(boolean)
- microsoft.servicefabric.actors.runtime.ActorBase.unregisterReminderAsync(ActorReminder)
- microsoft.servicefabric.actors.runtime.ActorBase.unregisterTimer(ActorTimer)
methods:
- microsoft.servicefabric.actors.runtime.FabricActor.getStateManager()
- microsoft.servicefabric.actors.runtime.FabricActor.saveStateAsync()
- microsoft.servicefabric.actors.runtime.FabricActor.stateManager()
nameWithType: FabricActor
syntax: public class FabricActor extends ActorBase
type: class
uid: microsoft.servicefabric.actors.runtime.FabricActor
fullName: microsoft.servicefabric.actors.runtime.FabricActor
name: FabricActor
package: microsoft.servicefabric.actors.runtime
summary: >-
  <p>Represents a actor that can have multiple reliable 'named' states associated with it. <xref uid="microsoft.servicefabric.actors.runtime.ActorBase" data-throw-if-not-resolved="false">ActorBase</xref></p>

  <p>

    <b>Remarks:</b>The state is preserved across actor garbage collections and fail-overs. The storage and retrieval of the state is provided by the actor state provider <xref uid="microsoft.servicefabric.actors.runtime.ActorStateProvider" data-throw-if-not-resolved="false">ActorStateProvider</xref>. </p>
metadata: {}
