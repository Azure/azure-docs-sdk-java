### YamlMime:JavaType
uid: "com.azure.communication.identity.CommunicationIdentityAsyncClient"
fullName: "com.azure.communication.identity.CommunicationIdentityAsyncClient"
name: "CommunicationIdentityAsyncClient"
nameWithType: "CommunicationIdentityAsyncClient"
summary: "Asynchronous client interface for Azure Communication Services Identity operations"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class CommunicationIdentityAsyncClient"
methods:
- uid: "com.azure.communication.identity.CommunicationIdentityAsyncClient.createUser()"
  fullName: "com.azure.communication.identity.CommunicationIdentityAsyncClient.createUser()"
  name: "createUser()"
  nameWithType: "CommunicationIdentityAsyncClient.createUser()"
  summary: "Creates a new Communication<wbr>User<wbr>Identifier."
  syntax: "public Mono<CommunicationUserIdentifier> createUser()"
  desc: "Creates a new CommunicationUserIdentifier."
  returns:
    description: "The created communication user."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.common.CommunicationUserIdentifier?alt=com.azure.communication.common.CommunicationUserIdentifier&text=CommunicationUserIdentifier\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.identity.CommunicationIdentityAsyncClient.createUserAndToken(java.lang.Iterable<com.azure.communication.identity.models.CommunicationTokenScope>)"
  fullName: "com.azure.communication.identity.CommunicationIdentityAsyncClient.createUserAndToken(Iterable<CommunicationTokenScope> scopes)"
  name: "createUserAndToken(Iterable<CommunicationTokenScope> scopes)"
  nameWithType: "CommunicationIdentityAsyncClient.createUserAndToken(Iterable<CommunicationTokenScope> scopes)"
  summary: "Creates a new Communication<wbr>User<wbr>Identifier with token."
  parameters:
  - description: "The list of scopes for the token."
    name: "scopes"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.identity.models.CommunicationTokenScope?alt=com.azure.communication.identity.models.CommunicationTokenScope&text=CommunicationTokenScope\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<CommunicationUserIdentifierAndToken> createUserAndToken(Iterable<CommunicationTokenScope> scopes)"
  desc: "Creates a new CommunicationUserIdentifier with token."
  returns:
    description: "The created communication user and token."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.identity.models.CommunicationUserIdentifierAndToken?alt=com.azure.communication.identity.models.CommunicationUserIdentifierAndToken&text=CommunicationUserIdentifierAndToken\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.identity.CommunicationIdentityAsyncClient.createUserAndTokenWithResponse(java.lang.Iterable<com.azure.communication.identity.models.CommunicationTokenScope>)"
  fullName: "com.azure.communication.identity.CommunicationIdentityAsyncClient.createUserAndTokenWithResponse(Iterable<CommunicationTokenScope> scopes)"
  name: "createUserAndTokenWithResponse(Iterable<CommunicationTokenScope> scopes)"
  nameWithType: "CommunicationIdentityAsyncClient.createUserAndTokenWithResponse(Iterable<CommunicationTokenScope> scopes)"
  summary: "Creates a new Communication<wbr>User<wbr>Identifier with token with response."
  parameters:
  - description: "The list of scopes for the token."
    name: "scopes"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.identity.models.CommunicationTokenScope?alt=com.azure.communication.identity.models.CommunicationTokenScope&text=CommunicationTokenScope\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<CommunicationUserIdentifierAndToken>> createUserAndTokenWithResponse(Iterable<CommunicationTokenScope> scopes)"
  desc: "Creates a new CommunicationUserIdentifier with token with response."
  returns:
    description: "The result with created communication user and token with response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.identity.models.CommunicationUserIdentifierAndToken?alt=com.azure.communication.identity.models.CommunicationUserIdentifierAndToken&text=CommunicationUserIdentifierAndToken\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.identity.CommunicationIdentityAsyncClient.createUserWithResponse()"
  fullName: "com.azure.communication.identity.CommunicationIdentityAsyncClient.createUserWithResponse()"
  name: "createUserWithResponse()"
  nameWithType: "CommunicationIdentityAsyncClient.createUserWithResponse()"
  summary: "Creates a new Communication<wbr>User<wbr>Identifier with response."
  syntax: "public Mono<Response<CommunicationUserIdentifier>> createUserWithResponse()"
  desc: "Creates a new CommunicationUserIdentifier with response."
  returns:
    description: "The created communication user with response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.common.CommunicationUserIdentifier?alt=com.azure.communication.common.CommunicationUserIdentifier&text=CommunicationUserIdentifier\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.identity.CommunicationIdentityAsyncClient.deleteUser(com.azure.communication.common.CommunicationUserIdentifier)"
  fullName: "com.azure.communication.identity.CommunicationIdentityAsyncClient.deleteUser(CommunicationUserIdentifier communicationUser)"
  name: "deleteUser(CommunicationUserIdentifier communicationUser)"
  nameWithType: "CommunicationIdentityAsyncClient.deleteUser(CommunicationUserIdentifier communicationUser)"
  summary: "Deletes a Communication<wbr>User<wbr>Identifier, revokes its tokens and deletes its data."
  parameters:
  - description: "The user to be deleted."
    name: "communicationUser"
    type: "<xref href=\"com.azure.communication.common.CommunicationUserIdentifier?alt=com.azure.communication.common.CommunicationUserIdentifier&text=CommunicationUserIdentifier\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteUser(CommunicationUserIdentifier communicationUser)"
  desc: "Deletes a CommunicationUserIdentifier, revokes its tokens and deletes its data."
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.identity.CommunicationIdentityAsyncClient.deleteUserWithResponse(com.azure.communication.common.CommunicationUserIdentifier)"
  fullName: "com.azure.communication.identity.CommunicationIdentityAsyncClient.deleteUserWithResponse(CommunicationUserIdentifier communicationUser)"
  name: "deleteUserWithResponse(CommunicationUserIdentifier communicationUser)"
  nameWithType: "CommunicationIdentityAsyncClient.deleteUserWithResponse(CommunicationUserIdentifier communicationUser)"
  summary: "Deletes a Communication<wbr>User<wbr>Identifier, revokes its tokens and deletes its data with response."
  parameters:
  - description: "The user to be deleted."
    name: "communicationUser"
    type: "<xref href=\"com.azure.communication.common.CommunicationUserIdentifier?alt=com.azure.communication.common.CommunicationUserIdentifier&text=CommunicationUserIdentifier\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteUserWithResponse(CommunicationUserIdentifier communicationUser)"
  desc: "Deletes a CommunicationUserIdentifier, revokes its tokens and deletes its data with response."
  returns:
    description: "The response with void."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.identity.CommunicationIdentityAsyncClient.getToken(com.azure.communication.common.CommunicationUserIdentifier,java.lang.Iterable<com.azure.communication.identity.models.CommunicationTokenScope>)"
  fullName: "com.azure.communication.identity.CommunicationIdentityAsyncClient.getToken(CommunicationUserIdentifier communicationUser, Iterable<CommunicationTokenScope> scopes)"
  name: "getToken(CommunicationUserIdentifier communicationUser, Iterable<CommunicationTokenScope> scopes)"
  nameWithType: "CommunicationIdentityAsyncClient.getToken(CommunicationUserIdentifier communicationUser, Iterable<CommunicationTokenScope> scopes)"
  summary: "Gets a token for an identity."
  parameters:
  - description: "The user to be issued tokens."
    name: "communicationUser"
    type: "<xref href=\"com.azure.communication.common.CommunicationUserIdentifier?alt=com.azure.communication.common.CommunicationUserIdentifier&text=CommunicationUserIdentifier\" data-throw-if-not-resolved=\"False\" />"
  - description: "The scopes that the token should have."
    name: "scopes"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.identity.models.CommunicationTokenScope?alt=com.azure.communication.identity.models.CommunicationTokenScope&text=CommunicationTokenScope\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<AccessToken> getToken(CommunicationUserIdentifier communicationUser, Iterable<CommunicationTokenScope> scopes)"
  desc: "Gets a token for an identity."
  returns:
    description: "The access token."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.credential.AccessToken?alt=com.azure.core.credential.AccessToken&text=AccessToken\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.identity.CommunicationIdentityAsyncClient.getTokenForTeamsUser(com.azure.communication.identity.models.GetTokenForTeamsUserOptions)"
  fullName: "com.azure.communication.identity.CommunicationIdentityAsyncClient.getTokenForTeamsUser(GetTokenForTeamsUserOptions options)"
  name: "getTokenForTeamsUser(GetTokenForTeamsUserOptions options)"
  nameWithType: "CommunicationIdentityAsyncClient.getTokenForTeamsUser(GetTokenForTeamsUserOptions options)"
  summary: "Exchanges an Azure AD access token of a Teams User for a new Communication Identity access token."
  parameters:
  - description: "<xref uid=\"com.azure.communication.identity.models.GetTokenForTeamsUserOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"GetTokenForTeamsUserOptions\"></xref> request options used to exchange an Azure AD access token of a Teams User for a new Communication Identity access token."
    name: "options"
    type: "<xref href=\"com.azure.communication.identity.models.GetTokenForTeamsUserOptions?alt=com.azure.communication.identity.models.GetTokenForTeamsUserOptions&text=GetTokenForTeamsUserOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AccessToken> getTokenForTeamsUser(GetTokenForTeamsUserOptions options)"
  desc: "Exchanges an Azure AD access token of a Teams User for a new Communication Identity access token."
  returns:
    description: "Communication Identity access token."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.credential.AccessToken?alt=com.azure.core.credential.AccessToken&text=AccessToken\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.identity.CommunicationIdentityAsyncClient.getTokenForTeamsUserWithResponse(com.azure.communication.identity.models.GetTokenForTeamsUserOptions)"
  fullName: "com.azure.communication.identity.CommunicationIdentityAsyncClient.getTokenForTeamsUserWithResponse(GetTokenForTeamsUserOptions options)"
  name: "getTokenForTeamsUserWithResponse(GetTokenForTeamsUserOptions options)"
  nameWithType: "CommunicationIdentityAsyncClient.getTokenForTeamsUserWithResponse(GetTokenForTeamsUserOptions options)"
  summary: "Exchanges an Azure AD access token of a Teams User for a new Communication Identity access token."
  parameters:
  - description: "<xref uid=\"com.azure.communication.identity.models.GetTokenForTeamsUserOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"GetTokenForTeamsUserOptions\"></xref> request options used to exchange an Azure AD access token of a Teams User for a new Communication Identity access token."
    name: "options"
    type: "<xref href=\"com.azure.communication.identity.models.GetTokenForTeamsUserOptions?alt=com.azure.communication.identity.models.GetTokenForTeamsUserOptions&text=GetTokenForTeamsUserOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<AccessToken>> getTokenForTeamsUserWithResponse(GetTokenForTeamsUserOptions options)"
  desc: "Exchanges an Azure AD access token of a Teams User for a new Communication Identity access token."
  returns:
    description: "Communication Identity access token with response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.credential.AccessToken?alt=com.azure.core.credential.AccessToken&text=AccessToken\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.identity.CommunicationIdentityAsyncClient.getTokenWithResponse(com.azure.communication.common.CommunicationUserIdentifier,java.lang.Iterable<com.azure.communication.identity.models.CommunicationTokenScope>)"
  fullName: "com.azure.communication.identity.CommunicationIdentityAsyncClient.getTokenWithResponse(CommunicationUserIdentifier communicationUser, Iterable<CommunicationTokenScope> scopes)"
  name: "getTokenWithResponse(CommunicationUserIdentifier communicationUser, Iterable<CommunicationTokenScope> scopes)"
  nameWithType: "CommunicationIdentityAsyncClient.getTokenWithResponse(CommunicationUserIdentifier communicationUser, Iterable<CommunicationTokenScope> scopes)"
  summary: "Gets a token for an identity with response."
  parameters:
  - description: "The user to be issued tokens."
    name: "communicationUser"
    type: "<xref href=\"com.azure.communication.common.CommunicationUserIdentifier?alt=com.azure.communication.common.CommunicationUserIdentifier&text=CommunicationUserIdentifier\" data-throw-if-not-resolved=\"False\" />"
  - description: "The scopes that the token should have."
    name: "scopes"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.identity.models.CommunicationTokenScope?alt=com.azure.communication.identity.models.CommunicationTokenScope&text=CommunicationTokenScope\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<AccessToken>> getTokenWithResponse(CommunicationUserIdentifier communicationUser, Iterable<CommunicationTokenScope> scopes)"
  desc: "Gets a token for an identity with response."
  returns:
    description: "The access token with response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.credential.AccessToken?alt=com.azure.core.credential.AccessToken&text=AccessToken\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.identity.CommunicationIdentityAsyncClient.revokeTokens(com.azure.communication.common.CommunicationUserIdentifier)"
  fullName: "com.azure.communication.identity.CommunicationIdentityAsyncClient.revokeTokens(CommunicationUserIdentifier communicationUser)"
  name: "revokeTokens(CommunicationUserIdentifier communicationUser)"
  nameWithType: "CommunicationIdentityAsyncClient.revokeTokens(CommunicationUserIdentifier communicationUser)"
  summary: "Revokes all the tokens created for an identifier."
  parameters:
  - description: "The user to be revoked access tokens."
    name: "communicationUser"
    type: "<xref href=\"com.azure.communication.common.CommunicationUserIdentifier?alt=com.azure.communication.common.CommunicationUserIdentifier&text=CommunicationUserIdentifier\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> revokeTokens(CommunicationUserIdentifier communicationUser)"
  desc: "Revokes all the tokens created for an identifier."
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.identity.CommunicationIdentityAsyncClient.revokeTokensWithResponse(com.azure.communication.common.CommunicationUserIdentifier)"
  fullName: "com.azure.communication.identity.CommunicationIdentityAsyncClient.revokeTokensWithResponse(CommunicationUserIdentifier communicationUser)"
  name: "revokeTokensWithResponse(CommunicationUserIdentifier communicationUser)"
  nameWithType: "CommunicationIdentityAsyncClient.revokeTokensWithResponse(CommunicationUserIdentifier communicationUser)"
  summary: "Revokes all the tokens created for an identifier with response."
  parameters:
  - description: "The user to be revoked tokens."
    name: "communicationUser"
    type: "<xref href=\"com.azure.communication.common.CommunicationUserIdentifier?alt=com.azure.communication.common.CommunicationUserIdentifier&text=CommunicationUserIdentifier\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> revokeTokensWithResponse(CommunicationUserIdentifier communicationUser)"
  desc: "Revokes all the tokens created for an identifier with response."
  returns:
    description: "The response with void."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Asynchronous client interface for Azure Communication Services Identity operations\n\n**Instantiating an asynchronous Azure Communication Service Identity Client**\n\n```java\n// You can find your endpoint and access key from your resource in the Azure Portal\n String endpoint = \"https://<RESOURCE_NAME>.communication.azure.com\";\n AzureKeyCredential keyCredential = new AzureKeyCredential(\"<access-key>\");\n\n CommunicationIdentityAsyncClient communicationIdentityAsyncClient = new CommunicationIdentityClientBuilder()\n         .endpoint(endpoint)\n         .credential(keyCredential)\n         .buildAsyncClient();\n```\n\nView <xref uid=\"com.azure.communication.identity.CommunicationIdentityClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"this\"></xref> for additional ways to construct the client."
metadata: {}
package: "com.azure.communication.identity"
artifact: com.azure:azure-communication-identity:1.3.0
