### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpRequest.HttpRequest()
  name: HttpRequest()
  nameWithType: HttpRequest.HttpRequest()
  syntax: protected HttpRequest()
  uid: com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpRequest.HttpRequest()
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpRequest.HttpRequest(URL url, HttpMethod method, byte[] body)
  name: HttpRequest(URL url, HttpMethod method, byte[] body)
  nameWithType: HttpRequest.HttpRequest(URL url, HttpMethod method, byte[] body)
  parameters:
  - description: <p>The URL for the request. </p>
    name: url
    type: <xref href="URL?alt=URL&text=URL" data-throw-if-not-resolved="False"/>
  - description: <p>The HTTPS request method (i.e. GET). </p>
    name: method
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpMethod?alt=com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpMethod&text=HttpMethod" data-throw-if-not-resolved="False"/>
  - description: <p>The request body. Must be an array of size 0 if the request method is GET or DELETE.</p>
    name: body
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>This exception thrown if an IOException occurs in setting up the HTTPS connection. </p>
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>This exception thrown if the endpoint given does not use the HTTPS protocol. </p>
  summary: >-
    <p>Constructor. Takes a URL as an argument and returns an HTTPS request that is ready to be sent.</p>

    <p></p>
  syntax: public HttpRequest(URL url, HttpMethod method, byte[] body)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpRequest.HttpRequest(URL,HttpMethod,byte [])
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpRequest.send()
  name: send()
  nameWithType: HttpRequest.send()
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>This exception thrown if the connection could not be established, or the input/output streams could not be accessed. </p>
  returns:
    description: <p>The HTTPS response.</p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpResponse?alt=com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpResponse&text=HttpResponse" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Executes the HTTPS request.</p>

    <p></p>
  syntax: public HttpResponse send()
  uid: com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpRequest.send()
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpRequest.setHeaderField(String field, String value)
  name: setHeaderField(String field, String value)
  nameWithType: HttpRequest.setHeaderField(String field, String value)
  parameters:
  - description: <p>The header field name. </p>
    name: field
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The header field value.</p>
    name: value
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The object itself, for fluent setting. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpRequest?alt=com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpRequest&text=HttpRequest" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the header field to the given value.</p>

    <p></p>
  syntax: public HttpRequest setHeaderField(String field, String value)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpRequest.setHeaderField(String,String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpRequest.setReadTimeoutMillis(int timeout)
  name: setReadTimeoutMillis(int timeout)
  nameWithType: HttpRequest.setReadTimeoutMillis(int timeout)
  parameters:
  - description: <p>The read timeout.</p>
    name: timeout
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The object itself, for fluent setting. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpRequest?alt=com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpRequest&text=HttpRequest" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the read timeout, in milliseconds, for the request. The read timeout is the number of milliseconds after the server receives a request and before the server sends data back.</p>

    <p></p>
  syntax: public HttpRequest setReadTimeoutMillis(int timeout)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpRequest.setReadTimeoutMillis(int)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpRequest.setSSLContext(SSLContext sslContext)
  name: setSSLContext(SSLContext sslContext)
  nameWithType: HttpRequest.setSSLContext(SSLContext sslContext)
  parameters:
  - name: sslContext
    type: <xref href="SSLContext?alt=SSLContext&text=SSLContext" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpRequest?alt=com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpRequest&text=HttpRequest" data-throw-if-not-resolved="False"/>
  syntax: public HttpRequest setSSLContext(SSLContext sslContext)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpRequest.setSSLContext(SSLContext)
nameWithType: HttpRequest
syntax: public class HttpRequest
type: class
uid: com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpRequest
fullName: com.microsoft.azure.sdk.iot.provisioning.service.transport.https.HttpRequest
name: HttpRequest
package: com.microsoft.azure.sdk.iot.provisioning.service.transport.https
metadata: {}
