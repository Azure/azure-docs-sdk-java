### YamlMime:JavaType
uid: "com.azure.messaging.servicebus.ServiceBusSessionReceiverAsyncClient"
fullName: "com.azure.messaging.servicebus.ServiceBusSessionReceiverAsyncClient"
name: "ServiceBusSessionReceiverAsyncClient"
nameWithType: "ServiceBusSessionReceiverAsyncClient"
summary: "This **asynchronous** session receiver client is used to acquire session locks from a queue or topic and create <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusReceiverAsyncClient\"></xref> instances that are tied to the locked sessions.\n\n**Receive messages from a specific session**\n\nUse <xref uid=\"com.azure.messaging.servicebus.ServiceBusSessionReceiverAsyncClient.acceptSession(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#acceptSession(String)\"></xref> to acquire the lock of a session if you know the session id.\n\n```java\nServiceBusSessionReceiverAsyncClient sessionReceiver = new ServiceBusClientBuilder()\n     .connectionString(\"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};\"\n         + \"SharedAccessKey={key}\")\n     .sessionReceiver()\n     .queueName(\"<< QUEUE NAME >>\")\n     .buildAsyncClient();\n \n // acceptSession(String) completes successfully with a receiver when \"<< my-session-id >>\" session is\n // successfully locked.\n // `Flux.usingWhen` is used so we dispose of the receiver resource after `receiveMessages()` completes.\n // `Mono.usingWhen` can also be used if the resource closure only returns a single item.\n Flux<ServiceBusReceivedMessage> sessionMessages = Flux.usingWhen(\n     sessionReceiver.acceptSession(\"<< my-session-id >>\"),\n     receiver -> receiver.receiveMessages(),\n     receiver -> Mono.fromRunnable(() -> receiver.close()));\n \n // When program ends, or you're done receiving all messages, the `subscription` can be disposed of. This code\n // is non-blocking and kicks off the operation.\n Disposable subscription = sessionMessages.subscribe(\n     message -> System.out.printf(\"Received Sequence #: %s. Contents: %s%n\",\n         message.getSequenceNumber(), message.getBody()),\n     error -> System.err.print(error));\n```\n\n**Receive messages from the first available session**\n\nUse <xref uid=\"com.azure.messaging.servicebus.ServiceBusSessionReceiverAsyncClient.acceptNextSession()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#acceptNextSession()\"></xref> to acquire the lock of the next available session without specifying the session id.\n\n```java\nServiceBusSessionReceiverAsyncClient sessionReceiver = new ServiceBusClientBuilder()\n     .connectionString(\"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};\"\n         + \"SharedAccessKey={key}\")\n     .sessionReceiver()\n     .queueName(\"<< QUEUE NAME >>\")\n     .buildAsyncClient();\n \n // acceptNextSession() completes successfully with a receiver when it acquires the next available session.\n // `Flux.usingWhen` is used so we dispose of the receiver resource after `receiveMessages()` completes.\n // `Mono.usingWhen` can also be used if the resource closure only returns a single item.\n Flux<ServiceBusReceivedMessage> sessionMessages = Flux.usingWhen(\n     sessionReceiver.acceptNextSession(),\n     receiver -> receiver.receiveMessages(),\n     receiver -> Mono.fromRunnable(() -> receiver.close()));\n \n // When program ends, or you're done receiving all messages, the `subscription` can be disposed of. This code\n // is non-blocking and kicks off the operation.\n Disposable subscription = sessionMessages.subscribe(\n     message -> System.out.printf(\"Received Sequence #: %s. Contents: %s%n\",\n         message.getSequenceNumber(), message.getBody()),\n     error -> System.err.print(error));\n```"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ServiceBusSessionReceiverAsyncClient implements AutoCloseable"
methods:
- "com.azure.messaging.servicebus.ServiceBusSessionReceiverAsyncClient.acceptNextSession()"
- "com.azure.messaging.servicebus.ServiceBusSessionReceiverAsyncClient.acceptSession(java.lang.String)"
- "com.azure.messaging.servicebus.ServiceBusSessionReceiverAsyncClient.close()"
type: "class"
implements:
- "<xref href=\"java.lang.AutoCloseable?alt=java.lang.AutoCloseable&text=AutoCloseable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.messaging.servicebus"
artifact: com.azure:azure-messaging-servicebus:7.0.1
