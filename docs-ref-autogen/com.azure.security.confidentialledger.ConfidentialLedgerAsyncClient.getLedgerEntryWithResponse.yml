### YamlMime:JavaMember
uid: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getLedgerEntryWithResponse*"
fullName: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getLedgerEntryWithResponse"
name: "getLedgerEntryWithResponse"
nameWithType: "ConfidentialLedgerAsyncClient.getLedgerEntryWithResponse"
members:
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getLedgerEntryWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getLedgerEntryWithResponse(String transactionId, RequestOptions requestOptions)"
  name: "getLedgerEntryWithResponse(String transactionId, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerAsyncClient.getLedgerEntryWithResponse(String transactionId, RequestOptions requestOptions)"
  summary: "To return older ledger entries, the relevant sections of the ledger must be read from disk and validated."
  parameters:
  - description: "Identifies a write transaction."
    name: "transactionId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getLedgerEntryWithResponse(String transactionId, RequestOptions requestOptions)"
  desc: "To return older ledger entries, the relevant sections of the ledger must be read from disk and validated. To prevent blocking within the enclave, the response will indicate whether the entry is ready and part of the response, or if the loading is still ongoing.\n\n**Query Parameters**\n\n    | ------------ | ------ | -------- | ------------------ |\n    | Name         | Type   | Required | Description        |\n    | collectionId | String | No       | The collection id. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     state: String(Loading/Ready) (Required)\n     entry (Optional): {\n         contents: String (Required)\n         collectionId: String (Optional)\n         transactionId: String (Optional)\n     }\n }\n```"
  returns:
    description: "the result of querying for a ledger entry from an older transaction id along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on\n     successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.security.confidentialledger"
artifact: com.azure:azure-security-confidentialledger:1.0.0
