### YamlMime:ManagedReference
items:
- uid: microsoft.servicefabric.services.remoting._service_remoting_message_handler
  id: _service_remoting_message_handler
  parent: microsoft.servicefabric.services.remoting
  children:
  - microsoft.servicefabric.services.remoting._service_remoting_message_handler.handleOneWay(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])
  - microsoft.servicefabric.services.remoting._service_remoting_message_handler.requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])
  href: microsoft.servicefabric.services.remoting._service_remoting_message_handler.yml
  langs:
  - java
  name: ServiceRemotingMessageHandler
  nameWithType: ServiceRemotingMessageHandler
  fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHandler
  type: Interface
  source:
    remote: &o0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/ServiceRemotingMessageHandler.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/ServiceRemotingMessageHandler.java
    startLine: 9
  package: microsoft.servicefabric.services.remoting
  summary: <p>Defines the interface that must be implemented by the <xref uid="microsoft.servicefabric.services.remoting._service_remoting_listener" data-throw-if-not-resolved="false">ServiceRemotingListener</xref> to receive messages from the remoting transport. </p>
  syntax:
    content: public interface ServiceRemotingMessageHandler
- uid: microsoft.servicefabric.services.remoting._service_remoting_message_handler.handleOneWay(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])
  id: handleOneWay(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])
  parent: microsoft.servicefabric.services.remoting._service_remoting_message_handler
  href: microsoft.servicefabric.services.remoting._service_remoting_message_handler.yml
  langs:
  - java
  name: handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  nameWithType: ServiceRemotingMessageHandler.handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  fullName: void microsoft.servicefabric.services.remoting.ServiceRemotingMessageHandler.handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  overload: microsoft.servicefabric.services.remoting._service_remoting_message_handler.handleOneWay*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/ServiceRemotingMessageHandler.java
    startLine: 36
  package: microsoft.servicefabric.services.remoting
  summary: >-
    <p>Handles a one way message from the client.</p>

    <p></p>
  syntax:
    content: public void handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
    parameters:
    - id: requestContext
      type: microsoft.servicefabric.services.remoting._service_remoting_request_context
      description: <p>Request context - contains additional information about the request </p>
    - id: messageHeaders
      type: microsoft.servicefabric.services.remoting._service_remoting_message_headers
      description: <p>Request message headers </p>
    - id: requestBody
      type: ccd9418d
      description: <p>Request message body </p>
- uid: microsoft.servicefabric.services.remoting._service_remoting_message_handler.requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])
  id: requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])
  parent: microsoft.servicefabric.services.remoting._service_remoting_message_handler
  href: microsoft.servicefabric.services.remoting._service_remoting_message_handler.yml
  langs:
  - java
  name: requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  nameWithType: ServiceRemotingMessageHandler.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  fullName: CompletableFuture<byte[]> microsoft.servicefabric.services.remoting.ServiceRemotingMessageHandler.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  overload: microsoft.servicefabric.services.remoting._service_remoting_message_handler.requestResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/ServiceRemotingMessageHandler.java
    startLine: 21
  package: microsoft.servicefabric.services.remoting
  summary: >-
    <p>Handles a message from the client that requires a response from the service.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<byte[]> requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
    parameters:
    - id: requestContext
      type: microsoft.servicefabric.services.remoting._service_remoting_request_context
      description: <p>Request context - contains additional information about the request </p>
    - id: messageHeaders
      type: microsoft.servicefabric.services.remoting._service_remoting_message_headers
      description: <p>Request message headers </p>
    - id: requestBody
      type: ccd9418d
      description: <p>Request message body </p>
    return:
      type: 5fe2dfa4
      description: <p>Response body </p>
references:
- uid: ccd9418d
  spec.java:
  - name: byte []
    fullName: byte []
- uid: 5fe2dfa4
  spec.java:
  - name: CompletableFuture<byte[]>
    fullName: CompletableFuture<byte[]>
- uid: microsoft.servicefabric.services.remoting._service_remoting_message_handler.requestResponseAsync*
  name: requestResponseAsync
  nameWithType: ServiceRemotingMessageHandler.requestResponseAsync
  fullName: CompletableFuture<byte[]> microsoft.servicefabric.services.remoting.ServiceRemotingMessageHandler.requestResponseAsync
  package: microsoft.servicefabric.services.remoting
- uid: microsoft.servicefabric.services.remoting._service_remoting_message_handler.handleOneWay*
  name: handleOneWay
  nameWithType: ServiceRemotingMessageHandler.handleOneWay
  fullName: void microsoft.servicefabric.services.remoting.ServiceRemotingMessageHandler.handleOneWay
  package: microsoft.servicefabric.services.remoting
- uid: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher
  parent: microsoft.servicefabric.services.remoting.runtime
  href: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.yml
  name: ServiceRemotingDispatcher
  nameWithType: ServiceRemotingDispatcher
  fullName: microsoft.servicefabric.services.remoting.runtime.ServiceRemotingDispatcher
  type: Class
  syntax:
    content: public class ServiceRemotingDispatcher implements ServiceRemotingMessageHandler
- uid: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])
  parent: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher
  href: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.yml
  name: requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  nameWithType: ServiceRemotingDispatcher.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  fullName: CompletableFuture<byte[]> microsoft.servicefabric.services.remoting.runtime.ServiceRemotingDispatcher.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  type: Method
  summary: >-
    <p>Handles a message from the client that requires a response from the service.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<byte[]> requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
    parameters:
    - id: requestContext
      type: microsoft.servicefabric.services.remoting._service_remoting_request_context
      description: <p>Request context - contains additional information about the request </p>
    - id: messageHeaders
      type: microsoft.servicefabric.services.remoting._service_remoting_message_headers
      description: <p>Request message headers </p>
    - id: requestBody
      type: ccd9418d
      description: <p>Request message body </p>
    return:
      type: 5fe2dfa4
      description: <p>Response body </p>
- uid: microsoft.servicefabric.actors._actor_service_remoting_dispatcher.requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])
  parent: microsoft.servicefabric.actors._actor_service_remoting_dispatcher
  href: microsoft.servicefabric.actors._actor_service_remoting_dispatcher.yml
  name: requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  nameWithType: ActorServiceRemotingDispatcher.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  fullName: CompletableFuture<byte[]> microsoft.servicefabric.actors.ActorServiceRemotingDispatcher.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  type: Method
  summary: >-
    <p>Dispatches the messages received from the client to the actor service methods or the actor methods.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<byte[]> requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
    parameters:
    - id: requestContext
      type: microsoft.servicefabric.services.remoting._service_remoting_request_context
      description: <p>Request context that allows getting the callback channel if required. </p>
    - id: messageHeaders
      type: microsoft.servicefabric.services.remoting._service_remoting_message_headers
      description: <p>Service remoting message headers </p>
    - id: requestBody
      type: ccd9418d
      description: <p>serialized request body of the remoting message. </p>
    return:
      type: 5fe2dfa4
      description: <p>that represents outstanding operation. The result of the <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref> is the serialized response body. </p>
- uid: microsoft.servicefabric.services.remoting._service_remoting_request_context
  parent: microsoft.servicefabric.services.remoting
  href: microsoft.servicefabric.services.remoting._service_remoting_request_context.yml
  name: ServiceRemotingRequestContext
  nameWithType: ServiceRemotingRequestContext
  fullName: microsoft.servicefabric.services.remoting.ServiceRemotingRequestContext
  type: Interface
  summary: <p>Defines the interface that must be implemented to provide the request context for the IServiceRemotingMessageHandler. </p>
  syntax:
    content: public interface ServiceRemotingRequestContext
- uid: microsoft.servicefabric.services.remoting._service_remoting_message_headers
  parent: microsoft.servicefabric.services.remoting
  href: microsoft.servicefabric.services.remoting._service_remoting_message_headers.yml
  name: ServiceRemotingMessageHeaders
  nameWithType: ServiceRemotingMessageHeaders
  fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders
  type: Class
  summary: <p>Specifies the headers that are sent along with a ServiceRemoting message. </p>
  syntax:
    content: public class ServiceRemotingMessageHeaders
- uid: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.handleOneWay(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])
  parent: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher
  href: microsoft.servicefabric.services.remoting.runtime._service_remoting_dispatcher.yml
  name: handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  nameWithType: ServiceRemotingDispatcher.handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  fullName: void microsoft.servicefabric.services.remoting.runtime.ServiceRemotingDispatcher.handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  type: Method
  summary: >-
    <p>Handles a one way message from the client.</p>

    <p></p>
  syntax:
    content: public void handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
    parameters:
    - id: requestContext
      type: microsoft.servicefabric.services.remoting._service_remoting_request_context
      description: <p>Request context - contains additional information about the request </p>
    - id: messageHeaders
      type: microsoft.servicefabric.services.remoting._service_remoting_message_headers
      description: <p>Request message headers </p>
    - id: requestBody
      type: ccd9418d
      description: <p>Request message body </p>
- uid: microsoft.servicefabric.services.remoting._service_remoting_listener
  parent: microsoft.servicefabric.services.remoting
  href: microsoft.servicefabric.services.remoting._service_remoting_listener.yml
  name: ServiceRemotingListener
  nameWithType: ServiceRemotingListener
  fullName: microsoft.servicefabric.services.remoting.ServiceRemotingListener
  type: Interface
  summary: <p>Defines a base communication interface that enables interface remoting for stateless and stateful services. </p>
  syntax:
    content: public interface ServiceRemotingListener extends CommunicationListener
