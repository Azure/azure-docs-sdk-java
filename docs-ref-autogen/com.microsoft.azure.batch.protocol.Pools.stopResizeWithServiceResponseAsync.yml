### YamlMime:JavaMember
nameWithType: Pools.stopResizeWithServiceResponseAsync
type: method
members:
- fullName: com.microsoft.azure.batch.protocol.Pools.stopResizeWithServiceResponseAsync(String poolId)
  name: stopResizeWithServiceResponseAsync(String poolId)
  nameWithType: Pools.stopResizeWithServiceResponseAsync(String poolId)
  parameters:
  - description: <p>The ID of the pool whose resizing you want to stop. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.PoolStopResizeHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolStopResizeHeaders&text=PoolStopResizeHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Stops an ongoing resize operation on the pool. This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state. After stopping, the pool stabilizes at the number of nodes it was at when the stop operation was done. During the stop operation, the pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize pool request; this API can also be used to halt the initial sizing of the pool when it is created.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolStopResizeHeaders>> stopResizeWithServiceResponseAsync(String poolId)
  uid: com.microsoft.azure.batch.protocol.Pools.stopResizeWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Pools.stopResizeWithServiceResponseAsync(String poolId, PoolStopResizeOptions poolStopResizeOptions)
  name: stopResizeWithServiceResponseAsync(String poolId, PoolStopResizeOptions poolStopResizeOptions)
  nameWithType: Pools.stopResizeWithServiceResponseAsync(String poolId, PoolStopResizeOptions poolStopResizeOptions)
  parameters:
  - description: <p>The ID of the pool whose resizing you want to stop. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolStopResizeOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolStopResizeOptions?alt=com.microsoft.azure.batch.protocol.models.PoolStopResizeOptions&text=PoolStopResizeOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.PoolStopResizeHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolStopResizeHeaders&text=PoolStopResizeHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Stops an ongoing resize operation on the pool. This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state. After stopping, the pool stabilizes at the number of nodes it was at when the stop operation was done. During the stop operation, the pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize pool request; this API can also be used to halt the initial sizing of the pool when it is created.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolStopResizeHeaders>> stopResizeWithServiceResponseAsync(String poolId, PoolStopResizeOptions poolStopResizeOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.stopResizeWithServiceResponseAsync(String,PoolStopResizeOptions)
uid: com.microsoft.azure.batch.protocol.Pools.stopResizeWithServiceResponseAsync*
fullName: com.microsoft.azure.batch.protocol.Pools.stopResizeWithServiceResponseAsync(String poolId)
name: stopResizeWithServiceResponseAsync(String poolId)
package: com.microsoft.azure.batch.protocol
metadata: {}
