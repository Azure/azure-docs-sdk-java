### YamlMime:ManagedReference
items:
- uid: microsoft.servicefabric.actors.client._actor_proxy_factory
  id: _actor_proxy_factory
  parent: microsoft.servicefabric.actors.client
  children:
  - microsoft.servicefabric.actors.client._actor_proxy_factory.createActorProxy(Class<T>,ActorId)
  - microsoft.servicefabric.actors.client._actor_proxy_factory.createActorProxy(Class<T>,ActorId,String,String,String)
  - microsoft.servicefabric.actors.client._actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId)
  - microsoft.servicefabric.actors.client._actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId,String)
  - microsoft.servicefabric.actors.client._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId)
  - microsoft.servicefabric.actors.client._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId,String)
  - microsoft.servicefabric.actors.client._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long)
  - microsoft.servicefabric.actors.client._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long,String)
  href: microsoft.servicefabric.actors.client._actor_proxy_factory.yml
  langs:
  - java
  name: ActorProxyFactory
  nameWithType: ActorProxyFactory
  fullName: microsoft.servicefabric.actors.client.ActorProxyFactory
  type: Interface
  source:
    remote: &o0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/client/ActorProxyFactory.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/client/ActorProxyFactory.java
    startLine: 11
  package: microsoft.servicefabric.actors.client
  summary: "<p>Defines the interface containing methods to create actor proxy factory class. </p>"
  syntax:
    content: public interface ActorProxyFactory
- uid: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorProxy(Class<T>,ActorId)
  id: createActorProxy(Class<T>,ActorId)
  parent: microsoft.servicefabric.actors.client._actor_proxy_factory
  href: microsoft.servicefabric.actors.client._actor_proxy_factory.yml
  langs:
  - java
  name: createActorProxy(Class<T> actorInterfaceType, ActorId actorId)
  nameWithType: ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId)
  fullName: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId)
  overload: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorProxy*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/client/ActorProxyFactory.java
    startLine: 72
  package: microsoft.servicefabric.actors.client
  summary: "<p>Creates a proxy to the actor object that implements an actor interface.</p>\r\n<p></p>"
  syntax:
    content: public public<T extends Actor> T createActorProxy(Class<T> actorInterfaceType, ActorId actorId)
    parameters:
    - id: actorInterfaceType
      type: ffb09d2d
      description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    return:
      type: 21d1468cmicrosoft.servicefabric.actors._actor21353812
      description: <p>An actor proxy object that implements <xref uid="microsoft.servicefabric.actors.client._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref> and Actor Interface. </p>
- uid: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorProxy(Class<T>,ActorId,String,String,String)
  id: createActorProxy(Class<T>,ActorId,String,String,String)
  parent: microsoft.servicefabric.actors.client._actor_proxy_factory
  href: microsoft.servicefabric.actors.client._actor_proxy_factory.yml
  langs:
  - java
  name: createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
  nameWithType: ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
  fullName: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
  overload: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorProxy*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/client/ActorProxyFactory.java
    startLine: 106
  package: microsoft.servicefabric.actors.client
  summary: "<p>Creates a proxy to the actor object that implements an actor interface.</p>\r\n<p></p>"
  syntax:
    content: public public<T extends Actor> T createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
    parameters:
    - id: actorInterfaceType
      type: ffb09d2d
      description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    - id: applicationName
      type: "26831127"
      description: <p>Name of the Service Fabric application that contains the actor service hosting the actor objects. This parameter can be null if the client is running as part of that same Service Fabric application. For more information, see Remarks. </p>
    - id: serviceName
      type: "26831127"
      description: <p>Name of the Service Fabric service as configured by <xref uid="" data-throw-if-not-resolved="false">ActorServiceAttribute</xref> on the actor implementation. By default, the name of the service is derived from the name of the actor interface. However <xref uid="" data-throw-if-not-resolved="false">ActorServiceAttribute</xref> is required when an actor implements more than one actor interfaces or an actor interface derives from another actor interface as the determination of the serviceName cannot be made automatically. </p>
    - id: listenerName
      type: "26831127"
      description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    return:
      type: 21d1468cmicrosoft.servicefabric.actors._actor21353812
      description: <p>An actor proxy object that implements <xref uid="microsoft.servicefabric.actors.client._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref> and Actor Interface. </p>
  exceptions:
  - type: "44102508"
    description: <p>Throws exception when invalid URI format is passed as applicationName </p>
- uid: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId)
  id: createActorProxy(Class<T>,URI,ActorId)
  parent: microsoft.servicefabric.actors.client._actor_proxy_factory
  href: microsoft.servicefabric.actors.client._actor_proxy_factory.yml
  langs:
  - java
  name: createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)
  nameWithType: ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)
  fullName: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)
  overload: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorProxy*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/client/ActorProxyFactory.java
    startLine: 29
  package: microsoft.servicefabric.actors.client
  summary: "<p>Creates a proxy to the actor object that implements an actor interface.</p>\r\n<p></p>"
  syntax:
    content: public public<T extends Actor> T createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)
    parameters:
    - id: actorInterfaceType
      type: ffb09d2d
      description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    return:
      type: 21d1468cmicrosoft.servicefabric.actors._actor21353812
      description: <p>An actor proxy object that implements <xref uid="microsoft.servicefabric.actors.client._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref> and Actor Interface. </p>
- uid: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId,String)
  id: createActorProxy(Class<T>,URI,ActorId,String)
  parent: microsoft.servicefabric.actors.client._actor_proxy_factory
  href: microsoft.servicefabric.actors.client._actor_proxy_factory.yml
  langs:
  - java
  name: createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  nameWithType: ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  fullName: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  overload: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorProxy*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/client/ActorProxyFactory.java
    startLine: 52
  package: microsoft.servicefabric.actors.client
  summary: "<p>Creates a proxy to the actor object that implements an actor interface.</p>\r\n<p></p>"
  syntax:
    content: public public<T extends Actor> T createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
    parameters:
    - id: actorInterfaceType
      type: ffb09d2d
      description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    - id: listenerName
      type: "26831127"
      description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    return:
      type: 21d1468cmicrosoft.servicefabric.actors._actor21353812
      description: <p>An actor proxy object that implements <xref uid="microsoft.servicefabric.actors.client._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref> and Actor Interface. </p>
- uid: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId)
  id: createActorServiceProxy(Class<T>,URI,ActorId)
  parent: microsoft.servicefabric.actors.client._actor_proxy_factory
  href: microsoft.servicefabric.actors.client._actor_proxy_factory.yml
  langs:
  - java
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  nameWithType: ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  fullName: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  overload: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorServiceProxy*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/client/ActorProxyFactory.java
    startLine: 129
  package: microsoft.servicefabric.actors.client
  summary: "<p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>\r\n<p></p>"
  syntax:
    content: public public<T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
      description: <p>The service interface type implemented by the actor service. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id. </p>
    return:
      type: 21d1468cmicrosoft.servicefabric.services.remoting._service21353812
      description: >-
        <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref> and<code>&lt;T&gt; 

            </code> . </p>
- uid: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId,String)
  id: createActorServiceProxy(Class<T>,URI,ActorId,String)
  parent: microsoft.servicefabric.actors.client._actor_proxy_factory
  href: microsoft.servicefabric.actors.client._actor_proxy_factory.yml
  langs:
  - java
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  nameWithType: ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  fullName: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  overload: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorServiceProxy*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/client/ActorProxyFactory.java
    startLine: 155
  package: microsoft.servicefabric.actors.client
  summary: "<p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>\r\n<p></p>"
  syntax:
    content: public public<T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
      description: <p>The service interface type implemented by the actor service. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id. </p>
    - id: listenerName
      type: "26831127"
      description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    return:
      type: 21d1468cmicrosoft.servicefabric.services.remoting._service21353812
      description: >-
        <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref> and<code>&lt;T&gt; 

            </code> . </p>
- uid: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long)
  id: createActorServiceProxy(Class<T>,URI,long)
  parent: microsoft.servicefabric.actors.client._actor_proxy_factory
  href: microsoft.servicefabric.actors.client._actor_proxy_factory.yml
  langs:
  - java
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  nameWithType: ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  fullName: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  overload: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorServiceProxy*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/client/ActorProxyFactory.java
    startLine: 176
  package: microsoft.servicefabric.actors.client
  summary: "<p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>\r\n<p></p>"
  syntax:
    content: public public<T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
      description: <p>The service interface type implemented by the actor service. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: partitionKey
      type: 0364520f
      description: <p>The key of the actor service partition to connect to. </p>
    return:
      type: 21d1468cmicrosoft.servicefabric.services.remoting._service21353812
      description: >-
        <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref> and<code>&lt;T&gt; 

            </code> . </p>
- uid: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long,String)
  id: createActorServiceProxy(Class<T>,URI,long,String)
  parent: microsoft.servicefabric.actors.client._actor_proxy_factory
  href: microsoft.servicefabric.actors.client._actor_proxy_factory.yml
  langs:
  - java
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  nameWithType: ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  fullName: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  overload: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorServiceProxy*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/client/ActorProxyFactory.java
    startLine: 201
  package: microsoft.servicefabric.actors.client
  summary: "<p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>\r\n<p></p>"
  syntax:
    content: public public<T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
      description: <p>The service interface type implemented by the actor service. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: partitionKey
      type: 0364520f
      description: <p>The key of the actor service partition to connect to. </p>
    - id: listenerName
      type: "26831127"
      description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    return:
      type: 21d1468cmicrosoft.servicefabric.services.remoting._service21353812
      description: >-
        <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref> and<code>&lt;T&gt; 

            </code> . </p>
references:
- uid: ffb09d2d
  spec.java:
  - name: Class<T>
    fullName: Class<T>
- uid: "62304784"
  spec.java:
  - name: URI
    fullName: URI
- uid: 21d1468cmicrosoft.servicefabric.actors._actor21353812
  spec.java:
  - name: 'public<T extends '
    fullName: 'public<T extends '
  - uid: microsoft.servicefabric.actors._actor
    name: Actor
    fullName: microsoft.servicefabric.actors.Actor
    href: microsoft.servicefabric.actors._actor.yml
  - name: '> T'
    fullName: '> T'
- uid: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorProxy*
  name: createActorProxy
  nameWithType: ActorProxyFactory.createActorProxy
  fullName: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorProxy
  package: microsoft.servicefabric.actors.client
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: "44102508"
  spec.java:
  - name: URISyntaxException
    fullName: URISyntaxException
- uid: 21d1468cmicrosoft.servicefabric.services.remoting._service21353812
  spec.java:
  - name: 'public<T extends '
    fullName: 'public<T extends '
  - uid: microsoft.servicefabric.services.remoting._service
    name: Service
    fullName: microsoft.servicefabric.services.remoting.Service
    href: microsoft.servicefabric.services.remoting._service.yml
  - name: '> T'
    fullName: '> T'
- uid: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorServiceProxy*
  name: createActorServiceProxy
  nameWithType: ActorProxyFactory.createActorServiceProxy
  fullName: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorServiceProxy
  package: microsoft.servicefabric.actors.client
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory
  parent: microsoft.servicefabric.actors.remoting.client
  href: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.yml
  name: FabricActorProxyFactory
  nameWithType: FabricActorProxyFactory
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory
  type: Class
  summary: <p>Factory class to create a proxy to the remote actor objects. </p>
  syntax:
    content: public class FabricActorProxyFactory
- uid: microsoft.servicefabric.actors._actor
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._actor.yml
  name: Actor
  nameWithType: Actor
  fullName: microsoft.servicefabric.actors.Actor
  type: Interface
  summary: <p>Base interface for inheriting reliable actor interfaces. </p>
  syntax:
    content: public interface Actor
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId)
  parent: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory
  href: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.yml
  name: createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)
  nameWithType: FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)
  type: Method
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p></p>
  syntax:
    content: public <T extends Actor> T createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)
    parameters:
    - id: actorInterfaceType
      type: ffb09d2d
      description: <p>The actor interface type implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    return:
      type: 36136266microsoft.servicefabric.actors._actor21353812
      description: <p>An actor proxy object that implements <xref uid="" data-throw-if-not-resolved="false">ActorProxy</xref> and Actor Interface. </p>
- uid: microsoft.servicefabric.actors._actor_id
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._actor_id.yml
  name: ActorId
  nameWithType: ActorId
  fullName: microsoft.servicefabric.actors.ActorId
  type: Class
  summary: <p>ActorId represents identity of an actor within an actor service. The actors can be identified by <xref uid="" data-throw-if-not-resolved="false">java.lang.String</xref>, <xref uid="" data-throw-if-not-resolved="false">java.util.UUID</xref> or long. </p>
  syntax:
    content: public class ActorId
- uid: microsoft.servicefabric.actors.client._actor_proxy
  parent: microsoft.servicefabric.actors.client
  href: microsoft.servicefabric.actors.client._actor_proxy.yml
  name: ActorProxy
  nameWithType: ActorProxy
  fullName: microsoft.servicefabric.actors.client.ActorProxy
  type: Interface
  summary: <p>Provides the interface for implementation of proxy access for actor service. </p>
  syntax:
    content: public interface ActorProxy
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId,String)
  parent: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory
  href: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.yml
  name: createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  nameWithType: FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  type: Method
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p></p>
  syntax:
    content: public <T extends Actor> T createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
    parameters:
    - id: actorInterfaceType
      type: ffb09d2d
      description: <p>The actor interface type implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    - id: listenerName
      type: "26831127"
      description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    return:
      type: 36136266microsoft.servicefabric.actors._actor21353812
      description: <p>An actor proxy object that implements <xref uid="" data-throw-if-not-resolved="false">ActorProxy</xref> and Actor Interface. </p>
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorProxy(Class<T>,ActorId)
  parent: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory
  href: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.yml
  name: createActorProxy(Class<T> actorInterfaceType, ActorId actorId)
  nameWithType: FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId)
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId)
  type: Method
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p></p>
  syntax:
    content: public <T extends Actor> T createActorProxy(Class<T> actorInterfaceType, ActorId actorId)
    parameters:
    - id: actorInterfaceType
      type: ffb09d2d
      description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    return:
      type: 36136266microsoft.servicefabric.actors._actor21353812
      description: <p>An actor proxy object that implements <xref uid="" data-throw-if-not-resolved="false">ActorProxy</xref> and Actor Interface. </p>
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorProxy(Class<T>,ActorId,String,String,String)
  parent: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory
  href: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.yml
  name: createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
  nameWithType: FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
  type: Method
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p></p>
  syntax:
    content: public <T extends Actor> T createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
    parameters:
    - id: actorInterfaceType
      type: ffb09d2d
      description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    - id: applicationName
      type: "26831127"
      description: <p>Name of the Service Fabric application that contains the actor service hosting the actor objects. This parameter can be null if the client is running as part of that same Service Fabric application. For more information, see Remarks. </p>
    - id: serviceName
      type: "26831127"
      description: <p>Name of the Service Fabric service as configured by <xref uid="" data-throw-if-not-resolved="false">ActorServiceAttribute</xref> on the actor implementation. By default, the name of the service is derived from the name of the actor interface. However <xref uid="" data-throw-if-not-resolved="false">ActorServiceAttribute</xref> is required when an actor implements more than one actor interfaces or an actor interface derives from another actor interface as the determination of the serviceName cannot be made automatically. </p>
    - id: listenerName
      type: "26831127"
      description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    return:
      type: 36136266microsoft.servicefabric.actors._actor21353812
      description: <p>An actor proxy object that implements <xref uid="" data-throw-if-not-resolved="false">ActorProxy</xref> and Actor Interface. </p>
- uid: microsoft.servicefabric.services.remoting._service
  parent: microsoft.servicefabric.services.remoting
  href: microsoft.servicefabric.services.remoting._service.yml
  name: Service
  nameWithType: Service
  fullName: microsoft.servicefabric.services.remoting.Service
  type: Interface
  summary: <p>This is the marker interface for enabling interface Remoting for services. An <xref uid="microsoft.servicefabric.services.remoting.runtime._service_remoting_listener" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.runtime.ServiceRemotingListener</xref> provides remoting for all interfaces implemented by the service that derive from this interface. The remoted interfaces can be accessed via Proxy on the client side. </p>
  syntax:
    content: public interface Service
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId)
  parent: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory
  href: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.yml
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  nameWithType: FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  type: Method
  summary: >-
    <p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>

    <p></p>
  syntax:
    content: public <T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
      description: <p>The service interface type implemented by the actor service. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id. </p>
    return:
      type: 36136266microsoft.servicefabric.services.remoting._service21353812
      description: <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy_base" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxyBase</xref> and T (Service Interface). </p>
- uid: microsoft.servicefabric.services.remoting.client._service_proxy
  parent: microsoft.servicefabric.services.remoting.client
  href: microsoft.servicefabric.services.remoting.client._service_proxy.yml
  name: ServiceProxy
  nameWithType: ServiceProxy
  fullName: microsoft.servicefabric.services.remoting.client.ServiceProxy
  type: Interface
  summary: <p>This is the base Client side interface for Remoting. The framework provides the Remoting infrastructure for all the service contracts inheriting from IService through ServiceRemotingListener and ServiceProxy. </p>
  syntax:
    content: public interface ServiceProxy
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId,String)
  parent: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory
  href: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.yml
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  nameWithType: FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  type: Method
  summary: >-
    <p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>

    <p></p>
  syntax:
    content: public <T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
      description: <p>The service interface type implemented by the actor service. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id. </p>
    - id: listenerName
      type: "26831127"
      description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    return:
      type: 36136266microsoft.servicefabric.services.remoting._service21353812
      description: <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy_base" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxyBase</xref> and T (Service Interface). </p>
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long)
  parent: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory
  href: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.yml
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  nameWithType: FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  type: Method
  summary: >-
    <p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>

    <p></p>
  syntax:
    content: public <T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
      description: <p>The service interface type implemented by the actor service. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: partitionKey
      type: 0364520f
      description: <p>The key of the actor service partition to connect to. </p>
    return:
      type: 36136266microsoft.servicefabric.services.remoting._service21353812
      description: <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy_base" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxyBase</xref> and T (Service Interface). </p>
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long,String)
  parent: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory
  href: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.yml
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  nameWithType: FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  type: Method
  summary: >-
    <p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>

    <p></p>
  syntax:
    content: public <T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
      description: <p>The service interface type implemented by the actor service. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: partitionKey
      type: 0364520f
      description: <p>The key of the actor service partition to connect to. </p>
    - id: listenerName
      type: "26831127"
      description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    return:
      type: 36136266microsoft.servicefabric.services.remoting._service21353812
      description: <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy_base" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxyBase</xref> and T (Service Interface). </p>
