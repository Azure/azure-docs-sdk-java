### YamlMime:JavaType
uid: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput"
fullName: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput"
name: "LiveEventInput"
nameWithType: "LiveEventInput"
summary: "The live event input."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class LiveEventInput"
constructors:
- uid: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.LiveEventInput()"
  fullName: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.LiveEventInput()"
  name: "LiveEventInput()"
  nameWithType: "LiveEventInput.LiveEventInput()"
  syntax: "public LiveEventInput()"
methods:
- uid: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.accessControl()"
  fullName: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.accessControl()"
  name: "accessControl()"
  nameWithType: "LiveEventInput.accessControl()"
  summary: "Get access control for live event input."
  syntax: "public LiveEventInputAccessControl accessControl()"
  desc: "Get access control for live event input."
  returns:
    description: "the accessControl value"
    type: "<xref href=\"com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInputAccessControl?alt=com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInputAccessControl&text=LiveEventInputAccessControl\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.accessToken()"
  fullName: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.accessToken()"
  name: "accessToken()"
  nameWithType: "LiveEventInput.accessToken()"
  summary: "Get a UUID in string form to uniquely identify the stream."
  syntax: "public String accessToken()"
  desc: "Get a UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated. If omitted, the service will generate a unique value."
  returns:
    description: "the accessToken value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.endpoints()"
  fullName: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.endpoints()"
  name: "endpoints()"
  nameWithType: "LiveEventInput.endpoints()"
  summary: "Get the input endpoints for the live event."
  syntax: "public List<LiveEventEndpoint> endpoints()"
  desc: "Get the input endpoints for the live event."
  returns:
    description: "the endpoints value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventEndpoint?alt=com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventEndpoint&text=LiveEventEndpoint\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.keyFrameIntervalDuration()"
  fullName: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.keyFrameIntervalDuration()"
  name: "keyFrameIntervalDuration()"
  nameWithType: "LiveEventInput.keyFrameIntervalDuration()"
  summary: "Get iSO 8601 time duration of the key frame interval duration of the input."
  syntax: "public String keyFrameIntervalDuration()"
  desc: "Get iSO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property in the HLS output. For example, use PT2S to indicate 2 seconds. Leave the value empty for encoding live events."
  returns:
    description: "the keyFrameIntervalDuration value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.streamingProtocol()"
  fullName: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.streamingProtocol()"
  name: "streamingProtocol()"
  nameWithType: "LiveEventInput.streamingProtocol()"
  summary: "Get the input protocol for the live event."
  syntax: "public LiveEventInputProtocol streamingProtocol()"
  desc: "Get the input protocol for the live event. This is specified at creation time and cannot be updated. Possible values include: 'FragmentedMP4', 'RTMP'."
  returns:
    description: "the streamingProtocol value"
    type: "<xref href=\"com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInputProtocol?alt=com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInputProtocol&text=LiveEventInputProtocol\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.withAccessControl(com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInputAccessControl)"
  fullName: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.withAccessControl(LiveEventInputAccessControl accessControl)"
  name: "withAccessControl(LiveEventInputAccessControl accessControl)"
  nameWithType: "LiveEventInput.withAccessControl(LiveEventInputAccessControl accessControl)"
  summary: "Set access control for live event input."
  parameters:
  - description: "the accessControl value to set"
    name: "accessControl"
    type: "<xref href=\"com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInputAccessControl?alt=com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInputAccessControl&text=LiveEventInputAccessControl\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public LiveEventInput withAccessControl(LiveEventInputAccessControl accessControl)"
  desc: "Set access control for live event input."
  returns:
    description: "the LiveEventInput object itself."
    type: "<xref href=\"com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput?alt=com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput&text=LiveEventInput\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.withAccessToken(java.lang.String)"
  fullName: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.withAccessToken(String accessToken)"
  name: "withAccessToken(String accessToken)"
  nameWithType: "LiveEventInput.withAccessToken(String accessToken)"
  summary: "Set a UUID in string form to uniquely identify the stream."
  parameters:
  - description: "the accessToken value to set"
    name: "accessToken"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public LiveEventInput withAccessToken(String accessToken)"
  desc: "Set a UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated. If omitted, the service will generate a unique value."
  returns:
    description: "the LiveEventInput object itself."
    type: "<xref href=\"com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput?alt=com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput&text=LiveEventInput\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.withEndpoints(java.util.List<com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventEndpoint>)"
  fullName: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.withEndpoints(List<LiveEventEndpoint> endpoints)"
  name: "withEndpoints(List<LiveEventEndpoint> endpoints)"
  nameWithType: "LiveEventInput.withEndpoints(List<LiveEventEndpoint> endpoints)"
  summary: "Set the input endpoints for the live event."
  parameters:
  - description: "the endpoints value to set"
    name: "endpoints"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventEndpoint?alt=com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventEndpoint&text=LiveEventEndpoint\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public LiveEventInput withEndpoints(List<LiveEventEndpoint> endpoints)"
  desc: "Set the input endpoints for the live event."
  returns:
    description: "the LiveEventInput object itself."
    type: "<xref href=\"com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput?alt=com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput&text=LiveEventInput\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.withKeyFrameIntervalDuration(java.lang.String)"
  fullName: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.withKeyFrameIntervalDuration(String keyFrameIntervalDuration)"
  name: "withKeyFrameIntervalDuration(String keyFrameIntervalDuration)"
  nameWithType: "LiveEventInput.withKeyFrameIntervalDuration(String keyFrameIntervalDuration)"
  summary: "Set iSO 8601 time duration of the key frame interval duration of the input."
  parameters:
  - description: "the keyFrameIntervalDuration value to set"
    name: "keyFrameIntervalDuration"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public LiveEventInput withKeyFrameIntervalDuration(String keyFrameIntervalDuration)"
  desc: "Set iSO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property in the HLS output. For example, use PT2S to indicate 2 seconds. Leave the value empty for encoding live events."
  returns:
    description: "the LiveEventInput object itself."
    type: "<xref href=\"com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput?alt=com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput&text=LiveEventInput\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.withStreamingProtocol(com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInputProtocol)"
  fullName: "com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput.withStreamingProtocol(LiveEventInputProtocol streamingProtocol)"
  name: "withStreamingProtocol(LiveEventInputProtocol streamingProtocol)"
  nameWithType: "LiveEventInput.withStreamingProtocol(LiveEventInputProtocol streamingProtocol)"
  summary: "Set the input protocol for the live event."
  parameters:
  - description: "the streamingProtocol value to set"
    name: "streamingProtocol"
    type: "<xref href=\"com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInputProtocol?alt=com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInputProtocol&text=LiveEventInputProtocol\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public LiveEventInput withStreamingProtocol(LiveEventInputProtocol streamingProtocol)"
  desc: "Set the input protocol for the live event. This is specified at creation time and cannot be updated. Possible values include: 'FragmentedMP4', 'RTMP'."
  returns:
    description: "the LiveEventInput object itself."
    type: "<xref href=\"com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput?alt=com.microsoft.azure.management.mediaservices.v2020_05_01.LiveEventInput&text=LiveEventInput\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "The live event input."
metadata: {}
package: "com.microsoft.azure.management.mediaservices.v2020_05_01"
artifact: com.microsoft.azure.mediaservices.v2020_05_01:azure-mgmt-media:1.0.0-beta
