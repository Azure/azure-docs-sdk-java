### YamlMime:JavaMember
nameWithType: ServiceClient.sendAsync
type: method
members:
- fullName: com.microsoft.azure.sdk.iot.service.ServiceClient.sendAsync(String deviceId, Message message)
  name: sendAsync(String deviceId, Message message)
  nameWithType: ServiceClient.sendAsync(String deviceId, Message message)
  parameters:
  - description: <p>The device identifier for the target device </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The message for the device </p>
    name: message
    type: <xref href="com.microsoft.azure.sdk.iot.service.Message?alt=com.microsoft.azure.sdk.iot.service.Message&text=Message" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The future object for the requested operation </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Provide asynchronous access to send()</p>

    <p>

      <xrefsect id="deprecated_1_deprecated000127">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>Use the synchronous version of this API <xref uid="com.microsoft.azure.sdk.iot.service.ServiceClient.send(String,Message)" data-throw-if-not-resolved="false" data-raw-source="send(String, Message)"></xref>. This asynchronous API only spawned a thread to run the synchronous API, so users are advised to do this themselves in order to have control over the spawned threads. </p>

        </xrefdescription>

      </xrefsect>

    </p>
  syntax: public CompletableFuture<Void> sendAsync(String deviceId, Message message)
  uid: com.microsoft.azure.sdk.iot.service.ServiceClient.sendAsync(String,Message)
uid: com.microsoft.azure.sdk.iot.service.ServiceClient.sendAsync*
fullName: com.microsoft.azure.sdk.iot.service.ServiceClient.sendAsync
name: sendAsync(String deviceId, Message message)
package: com.microsoft.azure.sdk.iot.service
metadata: {}
