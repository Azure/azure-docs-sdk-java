### YamlMime:JavaMember
nameWithType: Events.getAsync
type: method
members:
- fullName: com.microsoft.azure.applicationinsights.query.Events.getAsync(String appId, EventType eventType, String eventId)
  name: getAsync(String appId, EventType eventType, String eventId)
  nameWithType: Events.getAsync(String appId, EventType eventType, String eventId)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  - description: <p>ID of event. </p>
    name: eventId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EventsResults object </p>
    type: <xref href="Observable%3CEventsResults%3E?alt=Observable%3CEventsResults%3E&text=Observable%3CEventsResults%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get an event. Gets the data for a single event.</p>

    <p></p>
  syntax: public Observable<EventsResults> getAsync(String appId, EventType eventType, String eventId)
  uid: com.microsoft.azure.applicationinsights.query.Events.getAsync(String,EventType,String)
- fullName: com.microsoft.azure.applicationinsights.query.Events.getAsync(String appId, EventType eventType, String eventId, final ServiceCallback<EventsResults> serviceCallback)
  name: getAsync(String appId, EventType eventType, String eventId, final ServiceCallback<EventsResults> serviceCallback)
  nameWithType: Events.getAsync(String appId, EventType eventType, String eventId, final ServiceCallback<EventsResults> serviceCallback)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  - description: <p>ID of event. </p>
    name: eventId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CEventsResults%3E?alt=final+ServiceCallback%3CEventsResults%3E&text=final+ServiceCallback%3CEventsResults%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CEventsResults%3E?alt=ServiceFuture%3CEventsResults%3E&text=ServiceFuture%3CEventsResults%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get an event. Gets the data for a single event.</p>

    <p></p>
  syntax: public ServiceFuture<EventsResults> getAsync(String appId, EventType eventType, String eventId, final ServiceCallback<EventsResults> serviceCallback)
  uid: com.microsoft.azure.applicationinsights.query.Events.getAsync(String,EventType,String,final ServiceCallback<EventsResults>)
- fullName: com.microsoft.azure.applicationinsights.query.Events.getAsync(String appId, EventType eventType, String eventId, String timespan)
  name: getAsync(String appId, EventType eventType, String eventId, String timespan)
  nameWithType: Events.getAsync(String appId, EventType eventType, String eventId, String timespan)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  - description: <p>ID of event. </p>
    name: eventId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. The timespan over which to retrieve events. This is an ISO8601 time period value. This timespan is applied in addition to any that are specified in the Odata expression. </p>
    name: timespan
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EventsResults object </p>
    type: <xref href="Observable%3CEventsResults%3E?alt=Observable%3CEventsResults%3E&text=Observable%3CEventsResults%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get an event. Gets the data for a single event.</p>

    <p></p>
  syntax: public Observable<EventsResults> getAsync(String appId, EventType eventType, String eventId, String timespan)
  uid: com.microsoft.azure.applicationinsights.query.Events.getAsync(String,EventType,String,String)
- fullName: com.microsoft.azure.applicationinsights.query.Events.getAsync(String appId, EventType eventType, String eventId, String timespan, final ServiceCallback<EventsResults> serviceCallback)
  name: getAsync(String appId, EventType eventType, String eventId, String timespan, final ServiceCallback<EventsResults> serviceCallback)
  nameWithType: Events.getAsync(String appId, EventType eventType, String eventId, String timespan, final ServiceCallback<EventsResults> serviceCallback)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  - description: <p>ID of event. </p>
    name: eventId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. The timespan over which to retrieve events. This is an ISO8601 time period value. This timespan is applied in addition to any that are specified in the Odata expression. </p>
    name: timespan
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CEventsResults%3E?alt=final+ServiceCallback%3CEventsResults%3E&text=final+ServiceCallback%3CEventsResults%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CEventsResults%3E?alt=ServiceFuture%3CEventsResults%3E&text=ServiceFuture%3CEventsResults%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get an event. Gets the data for a single event.</p>

    <p></p>
  syntax: public ServiceFuture<EventsResults> getAsync(String appId, EventType eventType, String eventId, String timespan, final ServiceCallback<EventsResults> serviceCallback)
  uid: com.microsoft.azure.applicationinsights.query.Events.getAsync(String,EventType,String,String,final ServiceCallback<EventsResults>)
uid: com.microsoft.azure.applicationinsights.query.Events.getAsync*
fullName: com.microsoft.azure.applicationinsights.query.Events.getAsync
name: getAsync(String appId, EventType eventType, String eventId)
package: com.microsoft.azure.applicationinsights.query
metadata: {}
