### YamlMime:JavaType
uid: "com.azure.communication.chat.ChatThreadAsyncClient"
fullName: "com.azure.communication.chat.ChatThreadAsyncClient"
name: "ChatThreadAsyncClient"
nameWithType: "ChatThreadAsyncClient"
summary: "Async Client that supports chat thread operations."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ChatThreadAsyncClient"
methods:
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.addParticipant(com.azure.communication.chat.models.ChatParticipant)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.addParticipant(ChatParticipant participant)"
  name: "addParticipant(ChatParticipant participant)"
  nameWithType: "ChatThreadAsyncClient.addParticipant(ChatParticipant participant)"
  summary: "Adds a participant to a thread."
  parameters:
  - description: "The new participant."
    name: "participant"
    type: "<xref href=\"com.azure.communication.chat.models.ChatParticipant?alt=com.azure.communication.chat.models.ChatParticipant&text=ChatParticipant\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> addParticipant(ChatParticipant participant)"
  desc: "Adds a participant to a thread. If the participant already exists, no change occurs."
  returns:
    description: "nothing."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.addParticipantWithResponse(com.azure.communication.chat.models.ChatParticipant)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.addParticipantWithResponse(ChatParticipant participant)"
  name: "addParticipantWithResponse(ChatParticipant participant)"
  nameWithType: "ChatThreadAsyncClient.addParticipantWithResponse(ChatParticipant participant)"
  summary: "Adds a participant to a thread."
  parameters:
  - description: "The new participant."
    name: "participant"
    type: "<xref href=\"com.azure.communication.chat.models.ChatParticipant?alt=com.azure.communication.chat.models.ChatParticipant&text=ChatParticipant\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> addParticipantWithResponse(ChatParticipant participant)"
  desc: "Adds a participant to a thread. If the participant already exists, no change occurs."
  returns:
    description: "the response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.addParticipants(java.lang.Iterable<com.azure.communication.chat.models.ChatParticipant>)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.addParticipants(Iterable<ChatParticipant> participants)"
  name: "addParticipants(Iterable<ChatParticipant> participants)"
  nameWithType: "ChatThreadAsyncClient.addParticipants(Iterable<ChatParticipant> participants)"
  summary: "Adds participants to a thread."
  parameters:
  - description: "Collection of participants to add."
    name: "participants"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.chat.models.ChatParticipant?alt=com.azure.communication.chat.models.ChatParticipant&text=ChatParticipant\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<AddChatParticipantsResult> addParticipants(Iterable<ChatParticipant> participants)"
  desc: "Adds participants to a thread. If participants already exist, no change occurs."
  returns:
    description: "the result."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.chat.models.AddChatParticipantsResult?alt=com.azure.communication.chat.models.AddChatParticipantsResult&text=AddChatParticipantsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.addParticipantsWithResponse(java.lang.Iterable<com.azure.communication.chat.models.ChatParticipant>)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.addParticipantsWithResponse(Iterable<ChatParticipant> participants)"
  name: "addParticipantsWithResponse(Iterable<ChatParticipant> participants)"
  nameWithType: "ChatThreadAsyncClient.addParticipantsWithResponse(Iterable<ChatParticipant> participants)"
  summary: "Adds participants to a thread."
  parameters:
  - description: "Collection of participants to add."
    name: "participants"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.chat.models.ChatParticipant?alt=com.azure.communication.chat.models.ChatParticipant&text=ChatParticipant\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<AddChatParticipantsResult>> addParticipantsWithResponse(Iterable<ChatParticipant> participants)"
  desc: "Adds participants to a thread. If participants already exist, no change occurs."
  returns:
    description: "the result."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.chat.models.AddChatParticipantsResult?alt=com.azure.communication.chat.models.AddChatParticipantsResult&text=AddChatParticipantsResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.deleteMessage(java.lang.String)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.deleteMessage(String chatMessageId)"
  name: "deleteMessage(String chatMessageId)"
  nameWithType: "ChatThreadAsyncClient.deleteMessage(String chatMessageId)"
  summary: "Deletes a message."
  parameters:
  - description: "The message id."
    name: "chatMessageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteMessage(String chatMessageId)"
  desc: "Deletes a message."
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.deleteMessageWithResponse(java.lang.String)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.deleteMessageWithResponse(String chatMessageId)"
  name: "deleteMessageWithResponse(String chatMessageId)"
  nameWithType: "ChatThreadAsyncClient.deleteMessageWithResponse(String chatMessageId)"
  summary: "Deletes a message."
  parameters:
  - description: "The message id."
    name: "chatMessageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteMessageWithResponse(String chatMessageId)"
  desc: "Deletes a message."
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.getChatThreadId()"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.getChatThreadId()"
  name: "getChatThreadId()"
  nameWithType: "ChatThreadAsyncClient.getChatThreadId()"
  summary: "Get the thread id property."
  syntax: "public String getChatThreadId()"
  desc: "Get the thread id property."
  returns:
    description: "the thread id value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.getMessage(java.lang.String)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.getMessage(String chatMessageId)"
  name: "getMessage(String chatMessageId)"
  nameWithType: "ChatThreadAsyncClient.getMessage(String chatMessageId)"
  summary: "Gets a message by id."
  parameters:
  - description: "The message id."
    name: "chatMessageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ChatMessage> getMessage(String chatMessageId)"
  desc: "Gets a message by id."
  returns:
    description: "a message by id."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.chat.models.ChatMessage?alt=com.azure.communication.chat.models.ChatMessage&text=ChatMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.getMessageWithResponse(java.lang.String)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.getMessageWithResponse(String chatMessageId)"
  name: "getMessageWithResponse(String chatMessageId)"
  nameWithType: "ChatThreadAsyncClient.getMessageWithResponse(String chatMessageId)"
  summary: "Gets a message by id."
  parameters:
  - description: "The message id."
    name: "chatMessageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ChatMessage>> getMessageWithResponse(String chatMessageId)"
  desc: "Gets a message by id."
  returns:
    description: "a message by id."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.chat.models.ChatMessage?alt=com.azure.communication.chat.models.ChatMessage&text=ChatMessage\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.getProperties()"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.getProperties()"
  name: "getProperties()"
  nameWithType: "ChatThreadAsyncClient.getProperties()"
  summary: "Gets chat thread properties."
  syntax: "public Mono<ChatThreadProperties> getProperties()"
  desc: "Gets chat thread properties."
  returns:
    description: "chat thread properties."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.chat.models.ChatThreadProperties?alt=com.azure.communication.chat.models.ChatThreadProperties&text=ChatThreadProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.getPropertiesWithResponse()"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.getPropertiesWithResponse()"
  name: "getPropertiesWithResponse()"
  nameWithType: "ChatThreadAsyncClient.getPropertiesWithResponse()"
  summary: "Gets chat thread properties."
  syntax: "public Mono<Response<ChatThreadProperties>> getPropertiesWithResponse()"
  desc: "Gets chat thread properties."
  returns:
    description: "chat thread properties."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.chat.models.ChatThreadProperties?alt=com.azure.communication.chat.models.ChatThreadProperties&text=ChatThreadProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.listMessages()"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.listMessages()"
  name: "listMessages()"
  nameWithType: "ChatThreadAsyncClient.listMessages()"
  summary: "Gets a list of messages from a thread."
  syntax: "public PagedFlux<ChatMessage> listMessages()"
  desc: "Gets a list of messages from a thread."
  returns:
    description: "a paged list of messages from a thread."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.chat.models.ChatMessage?alt=com.azure.communication.chat.models.ChatMessage&text=ChatMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.listMessages(com.azure.communication.chat.models.ListChatMessagesOptions)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.listMessages(ListChatMessagesOptions listMessagesOptions)"
  name: "listMessages(ListChatMessagesOptions listMessagesOptions)"
  nameWithType: "ChatThreadAsyncClient.listMessages(ListChatMessagesOptions listMessagesOptions)"
  summary: "Gets a list of messages from a thread."
  parameters:
  - description: "The request options."
    name: "listMessagesOptions"
    type: "<xref href=\"com.azure.communication.chat.models.ListChatMessagesOptions?alt=com.azure.communication.chat.models.ListChatMessagesOptions&text=ListChatMessagesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<ChatMessage> listMessages(ListChatMessagesOptions listMessagesOptions)"
  desc: "Gets a list of messages from a thread."
  returns:
    description: "a paged list of messages from a thread."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.chat.models.ChatMessage?alt=com.azure.communication.chat.models.ChatMessage&text=ChatMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.listParticipants()"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.listParticipants()"
  name: "listParticipants()"
  nameWithType: "ChatThreadAsyncClient.listParticipants()"
  summary: "Gets the participants of a thread."
  syntax: "public PagedFlux<ChatParticipant> listParticipants()"
  desc: "Gets the participants of a thread."
  returns:
    description: "the participants of a thread."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.chat.models.ChatParticipant?alt=com.azure.communication.chat.models.ChatParticipant&text=ChatParticipant\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.listParticipants(com.azure.communication.chat.models.ListParticipantsOptions)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.listParticipants(ListParticipantsOptions listParticipantsOptions)"
  name: "listParticipants(ListParticipantsOptions listParticipantsOptions)"
  nameWithType: "ChatThreadAsyncClient.listParticipants(ListParticipantsOptions listParticipantsOptions)"
  summary: "Gets the participants of a thread."
  parameters:
  - description: "The request options."
    name: "listParticipantsOptions"
    type: "<xref href=\"com.azure.communication.chat.models.ListParticipantsOptions?alt=com.azure.communication.chat.models.ListParticipantsOptions&text=ListParticipantsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<ChatParticipant> listParticipants(ListParticipantsOptions listParticipantsOptions)"
  desc: "Gets the participants of a thread."
  returns:
    description: "the participants of a thread."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.chat.models.ChatParticipant?alt=com.azure.communication.chat.models.ChatParticipant&text=ChatParticipant\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.listReadReceipts()"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.listReadReceipts()"
  name: "listReadReceipts()"
  nameWithType: "ChatThreadAsyncClient.listReadReceipts()"
  summary: "Gets read receipts for a thread."
  syntax: "public PagedFlux<ChatMessageReadReceipt> listReadReceipts()"
  desc: "Gets read receipts for a thread."
  returns:
    description: "read receipts for a thread."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.chat.models.ChatMessageReadReceipt?alt=com.azure.communication.chat.models.ChatMessageReadReceipt&text=ChatMessageReadReceipt\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.listReadReceipts(com.azure.communication.chat.models.ListReadReceiptOptions)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.listReadReceipts(ListReadReceiptOptions listReadReceiptOptions)"
  name: "listReadReceipts(ListReadReceiptOptions listReadReceiptOptions)"
  nameWithType: "ChatThreadAsyncClient.listReadReceipts(ListReadReceiptOptions listReadReceiptOptions)"
  summary: "Gets read receipts for a thread."
  parameters:
  - description: "The additional options for this operation."
    name: "listReadReceiptOptions"
    type: "<xref href=\"com.azure.communication.chat.models.ListReadReceiptOptions?alt=com.azure.communication.chat.models.ListReadReceiptOptions&text=ListReadReceiptOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<ChatMessageReadReceipt> listReadReceipts(ListReadReceiptOptions listReadReceiptOptions)"
  desc: "Gets read receipts for a thread."
  returns:
    description: "read receipts for a thread."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.chat.models.ChatMessageReadReceipt?alt=com.azure.communication.chat.models.ChatMessageReadReceipt&text=ChatMessageReadReceipt\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.removeParticipant(com.azure.communication.common.CommunicationIdentifier)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.removeParticipant(CommunicationIdentifier identifier)"
  name: "removeParticipant(CommunicationIdentifier identifier)"
  nameWithType: "ChatThreadAsyncClient.removeParticipant(CommunicationIdentifier identifier)"
  summary: "Remove a participant from a thread."
  parameters:
  - description: "Identity of the participant to remove from the thread."
    name: "identifier"
    type: "<xref href=\"com.azure.communication.common.CommunicationIdentifier?alt=com.azure.communication.common.CommunicationIdentifier&text=CommunicationIdentifier\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> removeParticipant(CommunicationIdentifier identifier)"
  desc: "Remove a participant from a thread."
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.removeParticipantWithResponse(com.azure.communication.common.CommunicationIdentifier)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.removeParticipantWithResponse(CommunicationIdentifier identifier)"
  name: "removeParticipantWithResponse(CommunicationIdentifier identifier)"
  nameWithType: "ChatThreadAsyncClient.removeParticipantWithResponse(CommunicationIdentifier identifier)"
  summary: "Remove a participant from a thread."
  parameters:
  - description: "Identity of the participant to remove from the thread."
    name: "identifier"
    type: "<xref href=\"com.azure.communication.common.CommunicationIdentifier?alt=com.azure.communication.common.CommunicationIdentifier&text=CommunicationIdentifier\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> removeParticipantWithResponse(CommunicationIdentifier identifier)"
  desc: "Remove a participant from a thread."
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.sendMessage(com.azure.communication.chat.models.SendChatMessageOptions)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.sendMessage(SendChatMessageOptions options)"
  name: "sendMessage(SendChatMessageOptions options)"
  nameWithType: "ChatThreadAsyncClient.sendMessage(SendChatMessageOptions options)"
  summary: "Sends a message to a thread."
  parameters:
  - description: "Options for sending the message."
    name: "options"
    type: "<xref href=\"com.azure.communication.chat.models.SendChatMessageOptions?alt=com.azure.communication.chat.models.SendChatMessageOptions&text=SendChatMessageOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SendChatMessageResult> sendMessage(SendChatMessageOptions options)"
  desc: "Sends a message to a thread.\n\n**Code Samples**\n\nSend a chat message based on \"options\".\n\n```java\n// Set the chat message options\n SendChatMessageOptions sendChatMessageOptions = new SendChatMessageOptions()\n     .setContent(\"Message content\")\n     .setSenderDisplayName(\"Sender Display Name\");\n\n // Get the request result and the chat message id\n SendChatMessageResult sendResult = chatThreadClient.sendMessage(sendChatMessageOptions).block();\n String messageId = sendResult.getId();\n```"
  returns:
    description: "the SendChatMessageResult."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.chat.models.SendChatMessageResult?alt=com.azure.communication.chat.models.SendChatMessageResult&text=SendChatMessageResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.sendMessageWithResponse(com.azure.communication.chat.models.SendChatMessageOptions)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.sendMessageWithResponse(SendChatMessageOptions options)"
  name: "sendMessageWithResponse(SendChatMessageOptions options)"
  nameWithType: "ChatThreadAsyncClient.sendMessageWithResponse(SendChatMessageOptions options)"
  summary: "Sends a message to a thread."
  parameters:
  - description: "Options for sending the message."
    name: "options"
    type: "<xref href=\"com.azure.communication.chat.models.SendChatMessageOptions?alt=com.azure.communication.chat.models.SendChatMessageOptions&text=SendChatMessageOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SendChatMessageResult>> sendMessageWithResponse(SendChatMessageOptions options)"
  desc: "Sends a message to a thread."
  returns:
    description: "the SendChatMessageResult."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.chat.models.SendChatMessageResult?alt=com.azure.communication.chat.models.SendChatMessageResult&text=SendChatMessageResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.sendReadReceipt(java.lang.String)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.sendReadReceipt(String chatMessageId)"
  name: "sendReadReceipt(String chatMessageId)"
  nameWithType: "ChatThreadAsyncClient.sendReadReceipt(String chatMessageId)"
  summary: "Posts a read receipt event to a thread, on behalf of a user."
  parameters:
  - description: "The id of the chat message that was read."
    name: "chatMessageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> sendReadReceipt(String chatMessageId)"
  desc: "Posts a read receipt event to a thread, on behalf of a user."
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.sendReadReceiptWithResponse(java.lang.String)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.sendReadReceiptWithResponse(String chatMessageId)"
  name: "sendReadReceiptWithResponse(String chatMessageId)"
  nameWithType: "ChatThreadAsyncClient.sendReadReceiptWithResponse(String chatMessageId)"
  summary: "Posts a read receipt event to a thread, on behalf of a user."
  parameters:
  - description: "The id of the chat message that was read."
    name: "chatMessageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> sendReadReceiptWithResponse(String chatMessageId)"
  desc: "Posts a read receipt event to a thread, on behalf of a user."
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.sendTypingNotification()"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.sendTypingNotification()"
  name: "sendTypingNotification()"
  nameWithType: "ChatThreadAsyncClient.sendTypingNotification()"
  summary: "Posts a typing event to a thread, on behalf of a user."
  syntax: "public Mono<Void> sendTypingNotification()"
  desc: "Posts a typing event to a thread, on behalf of a user."
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.sendTypingNotificationWithResponse()"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.sendTypingNotificationWithResponse()"
  name: "sendTypingNotificationWithResponse()"
  nameWithType: "ChatThreadAsyncClient.sendTypingNotificationWithResponse()"
  summary: "Posts a typing event to a thread, on behalf of a user."
  syntax: "public Mono<Response<Void>> sendTypingNotificationWithResponse()"
  desc: "Posts a typing event to a thread, on behalf of a user."
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.sendTypingNotificationWithResponse(com.azure.communication.chat.models.TypingNotificationOptions)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.sendTypingNotificationWithResponse(TypingNotificationOptions options)"
  name: "sendTypingNotificationWithResponse(TypingNotificationOptions options)"
  nameWithType: "ChatThreadAsyncClient.sendTypingNotificationWithResponse(TypingNotificationOptions options)"
  summary: "Posts a typing event to a thread, on behalf of a user."
  parameters:
  - description: "Options for sending the typing notification."
    name: "options"
    type: "<xref href=\"com.azure.communication.chat.models.TypingNotificationOptions?alt=com.azure.communication.chat.models.TypingNotificationOptions&text=TypingNotificationOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> sendTypingNotificationWithResponse(TypingNotificationOptions options)"
  desc: "Posts a typing event to a thread, on behalf of a user."
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.updateMessage(java.lang.String,com.azure.communication.chat.models.UpdateChatMessageOptions)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.updateMessage(String chatMessageId, UpdateChatMessageOptions options)"
  name: "updateMessage(String chatMessageId, UpdateChatMessageOptions options)"
  nameWithType: "ChatThreadAsyncClient.updateMessage(String chatMessageId, UpdateChatMessageOptions options)"
  summary: "Updates a message."
  parameters:
  - description: "The message id."
    name: "chatMessageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Options for updating the message."
    name: "options"
    type: "<xref href=\"com.azure.communication.chat.models.UpdateChatMessageOptions?alt=com.azure.communication.chat.models.UpdateChatMessageOptions&text=UpdateChatMessageOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> updateMessage(String chatMessageId, UpdateChatMessageOptions options)"
  desc: "Updates a message."
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.updateMessageWithResponse(java.lang.String,com.azure.communication.chat.models.UpdateChatMessageOptions)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.updateMessageWithResponse(String chatMessageId, UpdateChatMessageOptions options)"
  name: "updateMessageWithResponse(String chatMessageId, UpdateChatMessageOptions options)"
  nameWithType: "ChatThreadAsyncClient.updateMessageWithResponse(String chatMessageId, UpdateChatMessageOptions options)"
  summary: "Updates a message."
  parameters:
  - description: "The message id."
    name: "chatMessageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Options for updating the message."
    name: "options"
    type: "<xref href=\"com.azure.communication.chat.models.UpdateChatMessageOptions?alt=com.azure.communication.chat.models.UpdateChatMessageOptions&text=UpdateChatMessageOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> updateMessageWithResponse(String chatMessageId, UpdateChatMessageOptions options)"
  desc: "Updates a message."
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.updateTopic(java.lang.String)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.updateTopic(String topic)"
  name: "updateTopic(String topic)"
  nameWithType: "ChatThreadAsyncClient.updateTopic(String topic)"
  summary: "Updates a thread's topic."
  parameters:
  - description: "The new topic."
    name: "topic"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> updateTopic(String topic)"
  desc: "Updates a thread's topic."
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.chat.ChatThreadAsyncClient.updateTopicWithResponse(java.lang.String)"
  fullName: "com.azure.communication.chat.ChatThreadAsyncClient.updateTopicWithResponse(String topic)"
  name: "updateTopicWithResponse(String topic)"
  nameWithType: "ChatThreadAsyncClient.updateTopicWithResponse(String topic)"
  summary: "Updates a thread's properties."
  parameters:
  - description: "The new topic."
    name: "topic"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> updateTopicWithResponse(String topic)"
  desc: "Updates a thread's properties."
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Async Client that supports chat thread operations.\n\n**Instantiating an asynchronous Chat Thread Client**\n\n```java\n// Initialize the chat client builder\n final ChatClientBuilder builder = new ChatClientBuilder()\n     .endpoint(endpoint)\n     .credential(credential);\n\n // Build the chat client\n ChatAsyncClient chatClient = builder.buildAsyncClient();\n\n // Get the chat thread client for your thread's id\n ChatThreadAsyncClient chatThreadClient = chatClient.getChatThreadClient(threadId);\n```\n\nView <xref uid=\"com.azure.communication.chat.ChatClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"this\"></xref> for additional ways to construct the client."
metadata: {}
package: "com.azure.communication.chat"
artifact: com.azure:azure-communication-chat:1.3.0
