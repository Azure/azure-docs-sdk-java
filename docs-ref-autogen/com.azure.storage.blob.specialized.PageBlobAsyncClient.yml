### YamlMime:ManagedReference
items:
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient
  id: PageBlobAsyncClient
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized
  children:
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.MAX_PUT_PAGES_BYTES
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.PAGE_BYTES
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.clearPages(com.azure.storage.blob.models.PageRange)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.clearPagesWithResponse(com.azure.storage.blob.models.PageRange,com.azure.storage.blob.models.PageBlobRequestConditions)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncremental(java.lang.String,java.lang.String)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncrementalWithResponse(com.azure.storage.blob.options.PageBlobCopyIncrementalOptions)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncrementalWithResponse(java.lang.String,java.lang.String,com.azure.core.http.RequestConditions)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.create(long)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.create(long,boolean)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.createWithResponse(com.azure.storage.blob.options.PageBlobCreateOptions)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.createWithResponse(long,java.lang.Long,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.getManagedDiskPageRangesDiff(com.azure.storage.blob.models.BlobRange,java.lang.String)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.getManagedDiskPageRangesDiffWithResponse(com.azure.storage.blob.models.BlobRange,java.lang.String,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRanges(com.azure.storage.blob.models.BlobRange)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesDiff(com.azure.storage.blob.models.BlobRange,java.lang.String)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesDiffWithResponse(com.azure.storage.blob.models.BlobRange,java.lang.String,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesWithResponse(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.resize(long)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.resizeWithResponse(long,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.updateSequenceNumber(com.azure.storage.blob.models.SequenceNumberActionType,java.lang.Long)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.updateSequenceNumberWithResponse(com.azure.storage.blob.models.SequenceNumberActionType,java.lang.Long,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPages(com.azure.storage.blob.models.PageRange,reactor.core.publisher.Flux<java.nio.ByteBuffer>)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrl(com.azure.storage.blob.models.PageRange,java.lang.String,java.lang.Long)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrlWithResponse(com.azure.storage.blob.models.PageRange,java.lang.String,java.lang.Long,byte[],com.azure.storage.blob.models.PageBlobRequestConditions,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesWithResponse(com.azure.storage.blob.models.PageRange,reactor.core.publisher.Flux<java.nio.ByteBuffer>,byte[],com.azure.storage.blob.models.PageBlobRequestConditions)
  langs:
  - java
  name: PageBlobAsyncClient
  nameWithType: PageBlobAsyncClient
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient
  type: Class
  package: com.azure.storage.blob.specialized
  summary: >-
    Client to a page blob. It may only be instantiated through a <xref uid="com.azure.storage.blob.specialized.SpecializedBlobClientBuilder" data-throw-if-not-resolved="false">SpecializedBlobClientBuilder</xref> or via the method <xref uid="com.azure.storage.blob.BlobAsyncClient.getPageBlobAsyncClient()" data-throw-if-not-resolved="false">BlobAsyncClient#getPageBlobAsyncClient()</xref>. This class does not hold any state about a particular blob, but is instead a convenient way of sending appropriate requests to the resource on the service.


    Please refer to the [Azure Docs][] for more information.


    Note this client is an async client that returns reactive responses from Spring Reactor Core project (https://projectreactor.io/). Calling the methods in this client will **NOT** start the actual network operation, until `.subscribe()` is called on the reactive response. You can simply convert one of these responses to a <xref uid="" data-throw-if-not-resolved="false">java.util.concurrent.CompletableFuture</xref> object through <xref uid="reactor.core.publisher.Mono.toFuture*" data-throw-if-not-resolved="false">Mono#toFuture()</xref>.



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs
  syntax:
    content: public final class PageBlobAsyncClient extends BlobAsyncClientBase
  inheritance:
  - java.lang.Object
  - com.azure.storage.blob.specialized.BlobAsyncClientBase
  inheritedMembers:
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrl(java.lang.String)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrlWithResponse(java.lang.String,java.lang.String)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(com.azure.storage.blob.options.BlobBeginCopyOptions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.time.Duration)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrl(java.lang.String)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(com.azure.storage.blob.options.BlobCopyFromUrlOptions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshot()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.delete()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.download()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(java.lang.String)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(java.lang.String,boolean)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadWithResponse(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.exists()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.existsWithResponse()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfo()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfoWithResponse()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountName()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobName()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobUrl()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getContainerName()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getCustomerProvidedKey()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getEncryptionScope()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getHttpPipeline()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getProperties()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getPropertiesWithResponse(com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getServiceVersion()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotClient(java.lang.String)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotId()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getTags()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getTagsWithResponse(com.azure.storage.blob.options.BlobGetTagsOptions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionClient(java.lang.String)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionId()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.isSnapshot()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.query(java.lang.String)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.queryWithResponse(com.azure.storage.blob.options.BlobQueryOptions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTier(com.azure.storage.blob.models.AccessTier)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse(com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.lang.String)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse(com.azure.storage.blob.options.BlobSetAccessTierOptions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeaders(com.azure.storage.blob.models.BlobHttpHeaders)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeadersWithResponse(com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.setTags(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.setTagsWithResponse(com.azure.storage.blob.options.BlobSetTagsOptions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.undelete()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.undeleteWithResponse()
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.MAX_PUT_PAGES_BYTES
  id: MAX_PUT_PAGES_BYTES
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: MAX_PUT_PAGES_BYTES
  nameWithType: PageBlobAsyncClient.MAX_PUT_PAGES_BYTES
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.MAX_PUT_PAGES_BYTES
  type: Field
  package: com.azure.storage.blob.specialized
  summary: Indicates the maximum number of bytes that may be sent in a call to putPage.
  syntax:
    content: public static final int MAX_PUT_PAGES_BYTES
    return:
      type: int
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.PAGE_BYTES
  id: PAGE_BYTES
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: PAGE_BYTES
  nameWithType: PageBlobAsyncClient.PAGE_BYTES
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.PAGE_BYTES
  type: Field
  package: com.azure.storage.blob.specialized
  summary: Indicates the number of bytes in a page.
  syntax:
    content: public static final int PAGE_BYTES
    return:
      type: int
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.PageBlobAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.blob.BlobServiceVersion,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,java.lang.String)
  id: PageBlobAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.blob.BlobServiceVersion,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,java.lang.String)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: PageBlobAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope, String versionId)
  nameWithType: PageBlobAsyncClient.PageBlobAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope, String versionId)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.PageBlobAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope, String versionId)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.PageBlobAsyncClient*
  type: Constructor
  package: com.azure.storage.blob.specialized
  summary: Package-private constructor for use by <xref uid="com.azure.storage.blob.specialized.SpecializedBlobClientBuilder" data-throw-if-not-resolved="false">SpecializedBlobClientBuilder</xref>.
  syntax:
    content: " PageBlobAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope, String versionId)"
    parameters:
    - id: pipeline
      type: com.azure.core.http.HttpPipeline
      description: The pipeline used to send and receive service requests.
    - id: url
      type: java.lang.String
      description: The endpoint where to send service requests.
    - id: serviceVersion
      type: com.azure.storage.blob.BlobServiceVersion
      description: The version of the service to receive requests.
    - id: accountName
      type: java.lang.String
      description: The storage account name.
    - id: containerName
      type: java.lang.String
      description: The container name.
    - id: blobName
      type: java.lang.String
      description: The blob name.
    - id: snapshot
      type: java.lang.String
      description: The snapshot identifier for the blob, pass <code>null</code> to interact with the blob directly.
    - id: customerProvidedKey
      type: com.azure.storage.blob.models.CpkInfo
      description: >-
        Customer provided key used during encryption of the blob's data on the server, pass
         <code>null</code> to allow the service to use its own encryption.
    - id: encryptionScope
      type: com.azure.storage.blob.implementation.models.EncryptionScope
      description: >-
        Encryption scope used during encryption of the blob's data on the server, pass
         <code>null</code> to allow the service to use its own encryption.
    - id: versionId
      type: java.lang.String
      description: The version identifier for the blob, pass <code>null</code> to interact with the latest blob version.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.clearPages(com.azure.storage.blob.models.PageRange)
  id: clearPages(com.azure.storage.blob.models.PageRange)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: clearPages(PageRange pageRange)
  nameWithType: PageBlobAsyncClient.clearPages(PageRange pageRange)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.clearPages(PageRange pageRange)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.clearPages*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Frees the specified pages from the page blob. The size of the range must be a multiple of 512. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n \n client.clearPages(pageRange).subscribe(response -> System.out.printf(\n     \"Cleared page blob with sequence number %s%n\", response.getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  syntax:
    content: public Mono<PageBlobItem> clearPages(PageRange pageRange)
    parameters:
    - id: pageRange
      type: com.azure.storage.blob.models.PageRange
      description: >-
        A <xref uid="com.azure.storage.blob.models.PageRange" data-throw-if-not-resolved="false">PageRange</xref> object. Given that pages must be aligned with 512-byte boundaries, the start
         offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte ranges
         are 0-511, 512-1023, etc.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.blob.models.PageBlobItem>
      description: A reactive response containing the information of the cleared pages.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.clearPagesWithResponse(com.azure.storage.blob.models.PageRange,com.azure.storage.blob.models.PageBlobRequestConditions)
  id: clearPagesWithResponse(com.azure.storage.blob.models.PageRange,com.azure.storage.blob.models.PageBlobRequestConditions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: clearPagesWithResponse(PageRange pageRange, PageBlobRequestConditions pageBlobRequestConditions)
  nameWithType: PageBlobAsyncClient.clearPagesWithResponse(PageRange pageRange, PageBlobRequestConditions pageBlobRequestConditions)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.clearPagesWithResponse(PageRange pageRange, PageBlobRequestConditions pageBlobRequestConditions)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.clearPagesWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Frees the specified pages from the page blob. The size of the range must be a multiple of 512. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n PageBlobRequestConditions pageBlobRequestConditions = new PageBlobRequestConditions().setLeaseId(leaseId);\n \n client.clearPagesWithResponse(pageRange, pageBlobRequestConditions)\n     .subscribe(response -> System.out.printf(\n         \"Cleared page blob with sequence number %s%n\", response.getValue().getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  syntax:
    content: public Mono<Response<PageBlobItem>> clearPagesWithResponse(PageRange pageRange, PageBlobRequestConditions pageBlobRequestConditions)
    parameters:
    - id: pageRange
      type: com.azure.storage.blob.models.PageRange
      description: >-
        A <xref uid="com.azure.storage.blob.models.PageRange" data-throw-if-not-resolved="false">PageRange</xref> object. Given that pages must be aligned with 512-byte boundaries, the start
         offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte ranges
         are 0-511, 512-1023, etc.
    - id: pageBlobRequestConditions
      type: com.azure.storage.blob.models.PageBlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.PageBlobRequestConditions" data-throw-if-not-resolved="false">PageBlobRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.PageBlobItem>>
      description: A reactive response containing the information of the cleared pages.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncremental(java.lang.String,java.lang.String)
  id: copyIncremental(java.lang.String,java.lang.String)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: copyIncremental(String source, String snapshot)
  nameWithType: PageBlobAsyncClient.copyIncremental(String source, String snapshot)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncremental(String source, String snapshot)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncremental*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Begins an operation to start an incremental copy from one page blob's snapshot to this page blob. The snapshot is copied such that only the differential changes between the previously copied snapshot are transferred to the destination. The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual. For more information, see the Azure Docs [here][] and [here][here 1].


    **Code Samples**


    ```java

    final String snapshot = "copy snapshot";
     client.copyIncremental(url, snapshot).subscribe(statusType -> {
         switch (statusType) {
             case SUCCESS:
                 System.out.println("Page blob copied successfully");
                 break;
             case FAILED:
                 System.out.println("Page blob copied failed");
                 break;
             case ABORTED:
                 System.out.println("Page blob copied aborted");
                 break;
             case PENDING:
                 System.out.println("Page blob copied pending");
                 break;
             default:
                 break;
         }
     });
    ```



    [here]: https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob

    [here 1]: https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots
  syntax:
    content: public Mono<CopyStatusType> copyIncremental(String source, String snapshot)
    parameters:
    - id: source
      type: java.lang.String
      description: The source page blob.
    - id: snapshot
      type: java.lang.String
      description: The snapshot on the copy source.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.blob.models.CopyStatusType>
      description: A reactive response emitting the copy status.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncrementalWithResponse(com.azure.storage.blob.options.PageBlobCopyIncrementalOptions)
  id: copyIncrementalWithResponse(com.azure.storage.blob.options.PageBlobCopyIncrementalOptions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: copyIncrementalWithResponse(PageBlobCopyIncrementalOptions options)
  nameWithType: PageBlobAsyncClient.copyIncrementalWithResponse(PageBlobCopyIncrementalOptions options)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncrementalWithResponse(PageBlobCopyIncrementalOptions options)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncrementalWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Begins an operation to start an incremental copy from one page blob's snapshot to this page blob. The snapshot is copied such that only the differential changes between the previously copied snapshot are transferred to the destination. The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual. For more information, see the Azure Docs [here][] and [here][here 1].\n\n**Code Samples**\n\n```java\nfinal String snapshot = \"copy snapshot\";\n PageBlobCopyIncrementalRequestConditions destinationRequestConditions = new PageBlobCopyIncrementalRequestConditions()\n     .setIfNoneMatch(\"snapshotMatch\");\n \n client.copyIncrementalWithResponse(new PageBlobCopyIncrementalOptions(url, snapshot)\n     .setRequestConditions(destinationRequestConditions))\n     .subscribe(response -> {\n         CopyStatusType statusType = response.getValue();\n \n         switch (statusType) {\n             case SUCCESS:\n                 System.out.println(\"Page blob copied successfully\");\n                 break;\n             case FAILED:\n                 System.out.println(\"Page blob copied failed\");\n                 break;\n             case ABORTED:\n                 System.out.println(\"Page blob copied aborted\");\n                 break;\n             case PENDING:\n                 System.out.println(\"Page blob copied pending\");\n                 break;\n             default:\n                 break;\n         }\n     });\n```\n\n\n[here]: https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob\n[here 1]: https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots"
  syntax:
    content: public Mono<Response<CopyStatusType>> copyIncrementalWithResponse(PageBlobCopyIncrementalOptions options)
    parameters:
    - id: options
      type: com.azure.storage.blob.options.PageBlobCopyIncrementalOptions
      description: <xref uid="com.azure.storage.blob.options.PageBlobCopyIncrementalOptions" data-throw-if-not-resolved="false">PageBlobCopyIncrementalOptions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.CopyStatusType>>
      description: A reactive response emitting the copy status.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncrementalWithResponse(java.lang.String,java.lang.String,com.azure.core.http.RequestConditions)
  id: copyIncrementalWithResponse(java.lang.String,java.lang.String,com.azure.core.http.RequestConditions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: copyIncrementalWithResponse(String source, String snapshot, RequestConditions modifiedRequestConditions)
  nameWithType: PageBlobAsyncClient.copyIncrementalWithResponse(String source, String snapshot, RequestConditions modifiedRequestConditions)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncrementalWithResponse(String source, String snapshot, RequestConditions modifiedRequestConditions)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncrementalWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Begins an operation to start an incremental copy from one page blob's snapshot to this page blob. The snapshot is copied such that only the differential changes between the previously copied snapshot are transferred to the destination. The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual. For more information, see the Azure Docs [here][] and [here][here 1].\n\n**Code Samples**\n\n```java\nfinal String snapshot = \"copy snapshot\";\n RequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfNoneMatch(\"snapshotMatch\");\n \n client.copyIncrementalWithResponse(url, snapshot, modifiedRequestConditions)\n     .subscribe(response -> {\n         CopyStatusType statusType = response.getValue();\n \n         switch (statusType) {\n             case SUCCESS:\n                 System.out.println(\"Page blob copied successfully\");\n                 break;\n             case FAILED:\n                 System.out.println(\"Page blob copied failed\");\n                 break;\n             case ABORTED:\n                 System.out.println(\"Page blob copied aborted\");\n                 break;\n             case PENDING:\n                 System.out.println(\"Page blob copied pending\");\n                 break;\n             default:\n                 break;\n         }\n     });\n```\n\n\n[here]: https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob\n[here 1]: https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots"
  syntax:
    content: public Mono<Response<CopyStatusType>> copyIncrementalWithResponse(String source, String snapshot, RequestConditions modifiedRequestConditions)
    parameters:
    - id: source
      type: java.lang.String
      description: The source page blob.
    - id: snapshot
      type: java.lang.String
      description: The snapshot on the copy source.
    - id: modifiedRequestConditions
      type: com.azure.core.http.RequestConditions
      description: >-
        Standard HTTP Access conditions related to the modification of data. ETag and
         LastModifiedTime are used to construct conditions related to when the blob was changed relative to the given
         request. The request will fail if the specified condition is not satisfied.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.CopyStatusType>>
      description: A reactive response emitting the copy status.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.create(long)
  id: create(long)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: create(long size)
  nameWithType: PageBlobAsyncClient.create(long size)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.create(long size)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.create*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Creates a page blob of the specified length. By default this method will not overwrite an existing blob. Call PutPage to upload data data to a page blob. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.create(size).subscribe(response -> System.out.printf(
         "Created page blob with sequence number %s%n", response.getBlobSequenceNumber()));
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob
  syntax:
    content: public Mono<PageBlobItem> create(long size)
    parameters:
    - id: size
      type: long
      description: >-
        Specifies the maximum size for the page blob, up to 8 TB. The page blob size must be aligned to a
         512-byte boundary.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.blob.models.PageBlobItem>
      description: A reactive response containing the information of the created page blob.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.create(long,boolean)
  id: create(long,boolean)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: create(long size, boolean overwrite)
  nameWithType: PageBlobAsyncClient.create(long size, boolean overwrite)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.create(long size, boolean overwrite)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.create*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Creates a page blob of the specified length. Call PutPage to upload data data to a page blob. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    boolean overwrite = false; // Default behavior
     client.create(size, overwrite).subscribe(response -> System.out.printf(
         "Created page blob with sequence number %s%n", response.getBlobSequenceNumber()));
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob
  syntax:
    content: public Mono<PageBlobItem> create(long size, boolean overwrite)
    parameters:
    - id: size
      type: long
      description: >-
        Specifies the maximum size for the page blob, up to 8 TB. The page blob size must be aligned to a
         512-byte boundary.
    - id: overwrite
      type: boolean
      description: Whether or not to overwrite, should data exist on the blob.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.blob.models.PageBlobItem>
      description: A reactive response containing the information of the created page blob.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.createWithResponse(com.azure.storage.blob.options.PageBlobCreateOptions)
  id: createWithResponse(com.azure.storage.blob.options.PageBlobCreateOptions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: createWithResponse(PageBlobCreateOptions options)
  nameWithType: PageBlobAsyncClient.createWithResponse(PageBlobCreateOptions options)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.createWithResponse(PageBlobCreateOptions options)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.createWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Creates a page blob of the specified length. Call PutPage to upload data data to a page blob. For more information, see the [Azure Docs][].\n\nTo avoid overwriting, pass \"\\*\" to <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch(java.lang.String)\" data-throw-if-not-resolved=\"false\">BlobRequestConditions#setIfNoneMatch(String)</xref>.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n BlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n \n client.createWithResponse(new PageBlobCreateOptions(size).setSequenceNumber(sequenceNumber)\n     .setHeaders(headers).setMetadata(metadata).setTags(tags).setRequestConditions(blobRequestConditions))\n     .subscribe(response -> System.out.printf(\n         \"Created page blob with sequence number %s%n\", response.getValue().getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob"
  syntax:
    content: public Mono<Response<PageBlobItem>> createWithResponse(PageBlobCreateOptions options)
    parameters:
    - id: options
      type: com.azure.storage.blob.options.PageBlobCreateOptions
      description: <xref uid="com.azure.storage.blob.options.PageBlobCreateOptions" data-throw-if-not-resolved="false">PageBlobCreateOptions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.PageBlobItem>>
      description: A reactive response containing the information of the created page blob.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.createWithResponse(long,java.lang.Long,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)
  id: createWithResponse(long,java.lang.Long,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: createWithResponse(long size, Long sequenceNumber, BlobHttpHeaders headers, Map<String,String> metadata, BlobRequestConditions requestConditions)
  nameWithType: PageBlobAsyncClient.createWithResponse(long size, Long sequenceNumber, BlobHttpHeaders headers, Map<String,String> metadata, BlobRequestConditions requestConditions)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.createWithResponse(long size, Long sequenceNumber, BlobHttpHeaders headers, Map<String,String> metadata, BlobRequestConditions requestConditions)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.createWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Creates a page blob of the specified length. Call PutPage to upload data data to a page blob. For more information, see the [Azure Docs][].\n\nTo avoid overwriting, pass \"\\*\" to <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch(java.lang.String)\" data-throw-if-not-resolved=\"false\">BlobRequestConditions#setIfNoneMatch(String)</xref>.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n BlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n \n client.createWithResponse(size, sequenceNumber, headers, metadata, blobRequestConditions)\n     .subscribe(response -> System.out.printf(\n         \"Created page blob with sequence number %s%n\", response.getValue().getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob"
  syntax:
    content: public Mono<Response<PageBlobItem>> createWithResponse(long size, Long sequenceNumber, BlobHttpHeaders headers, Map<String,String> metadata, BlobRequestConditions requestConditions)
    parameters:
    - id: size
      type: long
      description: >-
        Specifies the maximum size for the page blob, up to 8 TB. The page blob size must be aligned to a
         512-byte boundary.
    - id: sequenceNumber
      type: java.lang.Long
      description: >-
        A user-controlled value that you can use to track requests. The value of the sequence
         number must be between 0 and 2^63 - 1.The default value is 0.
    - id: headers
      type: com.azure.storage.blob.models.BlobHttpHeaders
      description: <xref uid="com.azure.storage.blob.models.BlobHttpHeaders" data-throw-if-not-resolved="false">BlobHttpHeaders</xref>
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the blob.
    - id: requestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.PageBlobItem>>
      description: A reactive response containing the information of the created page blob.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.getManagedDiskPageRangesDiff(com.azure.storage.blob.models.BlobRange,java.lang.String)
  id: getManagedDiskPageRangesDiff(com.azure.storage.blob.models.BlobRange,java.lang.String)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: getManagedDiskPageRangesDiff(BlobRange blobRange, String prevSnapshotUrl)
  nameWithType: PageBlobAsyncClient.getManagedDiskPageRangesDiff(BlobRange blobRange, String prevSnapshotUrl)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.getManagedDiskPageRangesDiff(BlobRange blobRange, String prevSnapshotUrl)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.getManagedDiskPageRangesDiff*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "This API only works for managed disk accounts.\n\nGets the collection of page ranges that differ between a specified snapshot and this page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n final String prevSnapshotUrl = \"previous snapshot url\";\n \n client.getPageRangesDiff(blobRange, prevSnapshotUrl).subscribe(response -> {\n     System.out.println(\"Valid Page Ranges are:\");\n     for (PageRange pageRange : response.getPageRange()) {\n         System.out.printf(\"Start: %s, End: %s%n\", pageRange.getStart(), pageRange.getEnd());\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  syntax:
    content: public Mono<PageList> getManagedDiskPageRangesDiff(BlobRange blobRange, String prevSnapshotUrl)
    parameters:
    - id: blobRange
      type: com.azure.storage.blob.models.BlobRange
      description: <xref uid="com.azure.storage.blob.models.BlobRange" data-throw-if-not-resolved="false">BlobRange</xref>
    - id: prevSnapshotUrl
      type: java.lang.String
      description: >-
        Specifies the URL of a previous snapshot of the target blob. Specifies that the
         response will contain only pages that were changed between target blob and previous snapshot. Changed pages
         include both updated and cleared pages. The target blob may be a snapshot, as long as the snapshot specified by
         prevsnapshot is the older of the two.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.blob.models.PageList>
      description: A reactive response emitting all the different page ranges.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.getManagedDiskPageRangesDiffWithResponse(com.azure.storage.blob.models.BlobRange,java.lang.String,com.azure.storage.blob.models.BlobRequestConditions)
  id: getManagedDiskPageRangesDiffWithResponse(com.azure.storage.blob.models.BlobRange,java.lang.String,com.azure.storage.blob.models.BlobRequestConditions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: getManagedDiskPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshotUrl, BlobRequestConditions requestConditions)
  nameWithType: PageBlobAsyncClient.getManagedDiskPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshotUrl, BlobRequestConditions requestConditions)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.getManagedDiskPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshotUrl, BlobRequestConditions requestConditions)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.getManagedDiskPageRangesDiffWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "This API only works for managed disk accounts.\n\nGets the collection of page ranges that differ between a specified snapshot and this page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n final String prevSnapshotUrl = \"previous snapshot url\";\n BlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n \n client.getPageRangesDiffWithResponse(blobRange, prevSnapshotUrl, blobRequestConditions)\n     .subscribe(response -> {\n         System.out.println(\"Valid Page Ranges are:\");\n         for (PageRange pageRange : response.getValue().getPageRange()) {\n             System.out.printf(\"Start: %s, End: %s%n\", pageRange.getStart(), pageRange.getEnd());\n         }\n     });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  syntax:
    content: public Mono<Response<PageList>> getManagedDiskPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshotUrl, BlobRequestConditions requestConditions)
    parameters:
    - id: blobRange
      type: com.azure.storage.blob.models.BlobRange
      description: <xref uid="com.azure.storage.blob.models.BlobRange" data-throw-if-not-resolved="false">BlobRange</xref>
    - id: prevSnapshotUrl
      type: java.lang.String
      description: >-
        Specifies the URL of a previous snapshot of the target blob. Specifies that the
         response will contain only pages that were changed between target blob and previous snapshot. Changed pages
         include both updated and cleared pages. The target blob may be a snapshot, as long as the snapshot specified by
         prevsnapshot is the older of the two.
    - id: requestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.PageList>>
      description: A reactive response emitting all the different page ranges.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRanges(com.azure.storage.blob.models.BlobRange)
  id: getPageRanges(com.azure.storage.blob.models.BlobRange)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: getPageRanges(BlobRange blobRange)
  nameWithType: PageBlobAsyncClient.getPageRanges(BlobRange blobRange)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRanges(BlobRange blobRange)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRanges*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Returns the list of valid page ranges for a page blob or snapshot of a page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n \n client.getPageRanges(blobRange).subscribe(response -> {\n     System.out.println(\"Valid Page Ranges are:\");\n     for (PageRange pageRange : response.getPageRange()) {\n         System.out.printf(\"Start: %s, End: %s%n\", pageRange.getStart(), pageRange.getEnd());\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  syntax:
    content: public Mono<PageList> getPageRanges(BlobRange blobRange)
    parameters:
    - id: blobRange
      type: com.azure.storage.blob.models.BlobRange
      description: <xref uid="com.azure.storage.blob.models.BlobRange" data-throw-if-not-resolved="false">BlobRange</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.blob.models.PageList>
      description: A reactive response containing the information of the cleared pages.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesDiff(com.azure.storage.blob.models.BlobRange,java.lang.String)
  id: getPageRangesDiff(com.azure.storage.blob.models.BlobRange,java.lang.String)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: getPageRangesDiff(BlobRange blobRange, String prevSnapshot)
  nameWithType: PageBlobAsyncClient.getPageRangesDiff(BlobRange blobRange, String prevSnapshot)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesDiff(BlobRange blobRange, String prevSnapshot)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesDiff*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Gets the collection of page ranges that differ between a specified snapshot and this page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n final String prevSnapshot = \"previous snapshot\";\n \n client.getPageRangesDiff(blobRange, prevSnapshot).subscribe(response -> {\n     System.out.println(\"Valid Page Ranges are:\");\n     for (PageRange pageRange : response.getPageRange()) {\n         System.out.printf(\"Start: %s, End: %s%n\", pageRange.getStart(), pageRange.getEnd());\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  syntax:
    content: public Mono<PageList> getPageRangesDiff(BlobRange blobRange, String prevSnapshot)
    parameters:
    - id: blobRange
      type: com.azure.storage.blob.models.BlobRange
      description: <xref uid="com.azure.storage.blob.models.BlobRange" data-throw-if-not-resolved="false">BlobRange</xref>
    - id: prevSnapshot
      type: java.lang.String
      description: >-
        Specifies that the response will contain only pages that were changed between target blob and
         previous snapshot. Changed pages include both updated and cleared pages. The target blob may be a snapshot, as
         long as the snapshot specified by prevsnapshot is the older of the two.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.blob.models.PageList>
      description: A reactive response emitting all the different page ranges.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesDiffWithResponse(com.azure.storage.blob.models.BlobRange,java.lang.String,com.azure.storage.blob.models.BlobRequestConditions)
  id: getPageRangesDiffWithResponse(com.azure.storage.blob.models.BlobRange,java.lang.String,com.azure.storage.blob.models.BlobRequestConditions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: getPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshot, BlobRequestConditions requestConditions)
  nameWithType: PageBlobAsyncClient.getPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshot, BlobRequestConditions requestConditions)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshot, BlobRequestConditions requestConditions)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesDiffWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Gets the collection of page ranges that differ between a specified snapshot and this page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n final String prevSnapshot = \"previous snapshot\";\n BlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n \n client.getPageRangesDiffWithResponse(blobRange, prevSnapshot, blobRequestConditions)\n     .subscribe(response -> {\n         System.out.println(\"Valid Page Ranges are:\");\n         for (PageRange pageRange : response.getValue().getPageRange()) {\n             System.out.printf(\"Start: %s, End: %s%n\", pageRange.getStart(), pageRange.getEnd());\n         }\n     });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  syntax:
    content: public Mono<Response<PageList>> getPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshot, BlobRequestConditions requestConditions)
    parameters:
    - id: blobRange
      type: com.azure.storage.blob.models.BlobRange
      description: <xref uid="com.azure.storage.blob.models.BlobRange" data-throw-if-not-resolved="false">BlobRange</xref>
    - id: prevSnapshot
      type: java.lang.String
      description: >-
        Specifies that the response will contain only pages that were changed between target blob and
         previous snapshot. Changed pages include both updated and cleared pages. The target blob may be a snapshot, as
         long as the snapshot specified by prevsnapshot is the older of the two.
    - id: requestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.PageList>>
      description: A reactive response emitting all the different page ranges.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesWithResponse(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.BlobRequestConditions)
  id: getPageRangesWithResponse(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.BlobRequestConditions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: getPageRangesWithResponse(BlobRange blobRange, BlobRequestConditions requestConditions)
  nameWithType: PageBlobAsyncClient.getPageRangesWithResponse(BlobRange blobRange, BlobRequestConditions requestConditions)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesWithResponse(BlobRange blobRange, BlobRequestConditions requestConditions)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Returns the list of valid page ranges for a page blob or snapshot of a page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n BlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n \n client.getPageRangesWithResponse(blobRange, blobRequestConditions)\n     .subscribe(response -> {\n         System.out.println(\"Valid Page Ranges are:\");\n         for (PageRange pageRange : response.getValue().getPageRange()) {\n             System.out.printf(\"Start: %s, End: %s%n\", pageRange.getStart(), pageRange.getEnd());\n         }\n     });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  syntax:
    content: public Mono<Response<PageList>> getPageRangesWithResponse(BlobRange blobRange, BlobRequestConditions requestConditions)
    parameters:
    - id: blobRange
      type: com.azure.storage.blob.models.BlobRange
      description: <xref uid="com.azure.storage.blob.models.BlobRange" data-throw-if-not-resolved="false">BlobRange</xref>
    - id: requestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.PageList>>
      description: A reactive response emitting all the page ranges.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.resize(long)
  id: resize(long)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: resize(long size)
  nameWithType: PageBlobAsyncClient.resize(long size)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.resize(long size)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.resize*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Resizes the page blob to the specified size (which must be a multiple of 512). For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.resize(size).subscribe(response -> System.out.printf(
         "Page blob resized with sequence number %s%n", response.getBlobSequenceNumber()));
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-properties
  syntax:
    content: public Mono<PageBlobItem> resize(long size)
    parameters:
    - id: size
      type: long
      description: >-
        Resizes a page blob to the specified size. If the specified value is less than the current size of
         the blob, then all pages above the specified value are cleared.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.blob.models.PageBlobItem>
      description: A reactive response emitting the resized page blob.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.resizeWithResponse(long,com.azure.storage.blob.models.BlobRequestConditions)
  id: resizeWithResponse(long,com.azure.storage.blob.models.BlobRequestConditions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: resizeWithResponse(long size, BlobRequestConditions requestConditions)
  nameWithType: PageBlobAsyncClient.resizeWithResponse(long size, BlobRequestConditions requestConditions)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.resizeWithResponse(long size, BlobRequestConditions requestConditions)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.resizeWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Resizes the page blob to the specified size (which must be a multiple of 512). For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n \n client.resizeWithResponse(size, blobRequestConditions)\n     .subscribe(response -> System.out.printf(\n         \"Page blob resized with sequence number %s%n\", response.getValue().getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-properties"
  syntax:
    content: public Mono<Response<PageBlobItem>> resizeWithResponse(long size, BlobRequestConditions requestConditions)
    parameters:
    - id: size
      type: long
      description: >-
        Resizes a page blob to the specified size. If the specified value is less than the current size of
         the blob, then all pages above the specified value are cleared.
    - id: requestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.PageBlobItem>>
      description: A reactive response emitting the resized page blob.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.updateSequenceNumber(com.azure.storage.blob.models.SequenceNumberActionType,java.lang.Long)
  id: updateSequenceNumber(com.azure.storage.blob.models.SequenceNumberActionType,java.lang.Long)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: updateSequenceNumber(SequenceNumberActionType action, Long sequenceNumber)
  nameWithType: PageBlobAsyncClient.updateSequenceNumber(SequenceNumberActionType action, Long sequenceNumber)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.updateSequenceNumber(SequenceNumberActionType action, Long sequenceNumber)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.updateSequenceNumber*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Sets the page blob's sequence number. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.updateSequenceNumber(SequenceNumberActionType.INCREMENT, size)
         .subscribe(response -> System.out.printf(
             "Page blob updated to sequence number %s%n", response.getBlobSequenceNumber()));
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-properties
  syntax:
    content: public Mono<PageBlobItem> updateSequenceNumber(SequenceNumberActionType action, Long sequenceNumber)
    parameters:
    - id: action
      type: com.azure.storage.blob.models.SequenceNumberActionType
      description: Indicates how the service should modify the blob's sequence number.
    - id: sequenceNumber
      type: java.lang.Long
      description: >-
        The blob's sequence number. The sequence number is a user-controlled property that you can
         use to track requests and manage concurrency issues.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.blob.models.PageBlobItem>
      description: A reactive response emitting the updated page blob.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.updateSequenceNumberWithResponse(com.azure.storage.blob.models.SequenceNumberActionType,java.lang.Long,com.azure.storage.blob.models.BlobRequestConditions)
  id: updateSequenceNumberWithResponse(com.azure.storage.blob.models.SequenceNumberActionType,java.lang.Long,com.azure.storage.blob.models.BlobRequestConditions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: updateSequenceNumberWithResponse(SequenceNumberActionType action, Long sequenceNumber, BlobRequestConditions requestConditions)
  nameWithType: PageBlobAsyncClient.updateSequenceNumberWithResponse(SequenceNumberActionType action, Long sequenceNumber, BlobRequestConditions requestConditions)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.updateSequenceNumberWithResponse(SequenceNumberActionType action, Long sequenceNumber, BlobRequestConditions requestConditions)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.updateSequenceNumberWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Sets the page blob's sequence number. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n \n client.updateSequenceNumberWithResponse(SequenceNumberActionType.INCREMENT, size, blobRequestConditions)\n     .subscribe(response -> System.out.printf(\n         \"Page blob updated to sequence number %s%n\", response.getValue().getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-properties"
  syntax:
    content: public Mono<Response<PageBlobItem>> updateSequenceNumberWithResponse(SequenceNumberActionType action, Long sequenceNumber, BlobRequestConditions requestConditions)
    parameters:
    - id: action
      type: com.azure.storage.blob.models.SequenceNumberActionType
      description: Indicates how the service should modify the blob's sequence number.
    - id: sequenceNumber
      type: java.lang.Long
      description: >-
        The blob's sequence number. The sequence number is a user-controlled property that you can
         use to track requests and manage concurrency issues.
    - id: requestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.PageBlobItem>>
      description: A reactive response emitting the updated page blob.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPages(com.azure.storage.blob.models.PageRange,reactor.core.publisher.Flux<java.nio.ByteBuffer>)
  id: uploadPages(com.azure.storage.blob.models.PageRange,reactor.core.publisher.Flux<java.nio.ByteBuffer>)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: uploadPages(PageRange pageRange, Flux<ByteBuffer> body)
  nameWithType: PageBlobAsyncClient.uploadPages(PageRange pageRange, Flux<ByteBuffer> body)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPages(PageRange pageRange, Flux<ByteBuffer> body)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPages*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Writes one or more pages to the page blob. The write size must be a multiple of 512. For more information, see the [Azure Docs][].\n\nNote that the data passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code Samples**\n\n```java\nPageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n \n client.uploadPages(pageRange, body).subscribe(response -> System.out.printf(\n     \"Uploaded page blob with sequence number %s%n\", response.getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  syntax:
    content: public Mono<PageBlobItem> uploadPages(PageRange pageRange, Flux<ByteBuffer> body)
    parameters:
    - id: pageRange
      type: com.azure.storage.blob.models.PageRange
      description: >-
        A <xref uid="com.azure.storage.blob.models.PageRange" data-throw-if-not-resolved="false">PageRange</xref> object. Given that pages must be aligned with 512-byte boundaries, the start
         offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte ranges
         are 0-511, 512-1023, etc.
    - id: body
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: >-
        The data to upload. Note that this <code>Flux</code> must be replayable if retries are enabled (the
         default). In other words, the Flowable must produce the same data each time it is subscribed to.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.blob.models.PageBlobItem>
      description: A reactive response containing the information of the uploaded pages.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrl(com.azure.storage.blob.models.PageRange,java.lang.String,java.lang.Long)
  id: uploadPagesFromUrl(com.azure.storage.blob.models.PageRange,java.lang.String,java.lang.Long)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: uploadPagesFromUrl(PageRange range, String sourceUrl, Long sourceOffset)
  nameWithType: PageBlobAsyncClient.uploadPagesFromUrl(PageRange range, String sourceUrl, Long sourceOffset)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrl(PageRange range, String sourceUrl, Long sourceOffset)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrl*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Writes one or more pages from the source page blob to this page blob. The write size must be a multiple of 512. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n \n client.uploadPagesFromUrl(pageRange, url, sourceOffset)\n     .subscribe(response -> System.out.printf(\n         \"Uploaded page blob from URL with sequence number %s%n\", response.getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  syntax:
    content: public Mono<PageBlobItem> uploadPagesFromUrl(PageRange range, String sourceUrl, Long sourceOffset)
    parameters:
    - id: range
      type: com.azure.storage.blob.models.PageRange
      description: >-
        A <xref uid="com.azure.storage.blob.models.PageRange" data-throw-if-not-resolved="false">PageRange</xref> object. Given that pages must be aligned with 512-byte boundaries, the start
         offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte ranges
         are 0-511, 512-1023, etc.
    - id: sourceUrl
      type: java.lang.String
      description: >-
        The url to the blob that will be the source of the copy.  A source blob in the same storage
         account can be authenticated via Shared Key. However, if the source is a blob in another account, the source blob
         must either be public or must be authenticated via a shared access signature. If the source blob is public, no
         authentication is required to perform the operation.
    - id: sourceOffset
      type: java.lang.Long
      description: >-
        The source offset to copy from.  Pass null or 0 to copy from the beginning of source page
         blob.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.blob.models.PageBlobItem>
      description: A reactive response containing the information of the uploaded pages.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrlWithResponse(com.azure.storage.blob.models.PageRange,java.lang.String,java.lang.Long,byte[],com.azure.storage.blob.models.PageBlobRequestConditions,com.azure.storage.blob.models.BlobRequestConditions)
  id: uploadPagesFromUrlWithResponse(com.azure.storage.blob.models.PageRange,java.lang.String,java.lang.Long,byte[],com.azure.storage.blob.models.PageBlobRequestConditions,com.azure.storage.blob.models.BlobRequestConditions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: uploadPagesFromUrlWithResponse(PageRange range, String sourceUrl, Long sourceOffset, byte[] sourceContentMd5, PageBlobRequestConditions destRequestConditions, BlobRequestConditions sourceRequestConditions)
  nameWithType: PageBlobAsyncClient.uploadPagesFromUrlWithResponse(PageRange range, String sourceUrl, Long sourceOffset, byte[] sourceContentMd5, PageBlobRequestConditions destRequestConditions, BlobRequestConditions sourceRequestConditions)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrlWithResponse(PageRange range, String sourceUrl, Long sourceOffset, byte[] sourceContentMd5, PageBlobRequestConditions destRequestConditions, BlobRequestConditions sourceRequestConditions)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrlWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Writes one or more pages from the source page blob to this page blob. The write size must be a multiple of 512. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n InputStream dataStream = new ByteArrayInputStream(data.getBytes(StandardCharsets.UTF_8));\n byte[] sourceContentMD5 = new byte[512];\n PageBlobRequestConditions pageBlobRequestConditions = new PageBlobRequestConditions().setLeaseId(leaseId);\n BlobRequestConditions sourceRequestConditions = new BlobRequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n \n client.uploadPagesFromUrlWithResponse(pageRange, url, sourceOffset, sourceContentMD5, pageBlobRequestConditions,\n         sourceRequestConditions)\n     .subscribe(response -> System.out.printf(\n         \"Uploaded page blob from URL with sequence number %s%n\", response.getValue().getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  syntax:
    content: public Mono<Response<PageBlobItem>> uploadPagesFromUrlWithResponse(PageRange range, String sourceUrl, Long sourceOffset, byte[] sourceContentMd5, PageBlobRequestConditions destRequestConditions, BlobRequestConditions sourceRequestConditions)
    parameters:
    - id: range
      type: com.azure.storage.blob.models.PageRange
      description: >-
        The destination <xref uid="com.azure.storage.blob.models.PageRange" data-throw-if-not-resolved="false">PageRange</xref> range. Given that pages must be aligned with 512-byte boundaries,
         the start offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte
         ranges are 0-511, 512-1023, etc.
    - id: sourceUrl
      type: java.lang.String
      description: >-
        The url to the blob that will be the source of the copy.  A source blob in the same storage
         account can be authenticated via Shared Key. However, if the source is a blob in another account, the source blob
         must either be public or must be authenticated via a shared access signature. If the source blob is public, no
         authentication is required to perform the operation.
    - id: sourceOffset
      type: java.lang.Long
      description: The source offset to copy from.  Pass null or 0 to copy from the beginning of source blob.
    - id: sourceContentMd5
      type: byte[]
      description: >-
        An MD5 hash of the page content. This hash is used to verify the integrity of the page
         during transport. When this header is specified, the storage service compares the hash of the content that has
         arrived with this header value. Note that this MD5 hash is not stored with the blob. If the two hashes do not
         match, the operation will fail.
    - id: destRequestConditions
      type: com.azure.storage.blob.models.PageBlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.PageBlobRequestConditions" data-throw-if-not-resolved="false">PageBlobRequestConditions</xref>
    - id: sourceRequestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.PageBlobItem>>
      description: A reactive response containing the information of the uploaded pages.
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesWithResponse(com.azure.storage.blob.models.PageRange,reactor.core.publisher.Flux<java.nio.ByteBuffer>,byte[],com.azure.storage.blob.models.PageBlobRequestConditions)
  id: uploadPagesWithResponse(com.azure.storage.blob.models.PageRange,reactor.core.publisher.Flux<java.nio.ByteBuffer>,byte[],com.azure.storage.blob.models.PageBlobRequestConditions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.PageBlobAsyncClient
  langs:
  - java
  name: uploadPagesWithResponse(PageRange pageRange, Flux<ByteBuffer> body, byte[] contentMd5, PageBlobRequestConditions pageBlobRequestConditions)
  nameWithType: PageBlobAsyncClient.uploadPagesWithResponse(PageRange pageRange, Flux<ByteBuffer> body, byte[] contentMd5, PageBlobRequestConditions pageBlobRequestConditions)
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesWithResponse(PageRange pageRange, Flux<ByteBuffer> body, byte[] contentMd5, PageBlobRequestConditions pageBlobRequestConditions)
  overload: com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Writes one or more pages to the page blob. The write size must be a multiple of 512. For more information, see the [Azure Docs][].\n\nNote that the data passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code Samples**\n\n```java\nPageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n \n byte[] md5 = MessageDigest.getInstance(\"MD5\").digest(\"data\".getBytes(StandardCharsets.UTF_8));\n PageBlobRequestConditions pageBlobRequestConditions = new PageBlobRequestConditions().setLeaseId(leaseId);\n \n client.uploadPagesWithResponse(pageRange, body, md5, pageBlobRequestConditions)\n     .subscribe(response -> System.out.printf(\n         \"Uploaded page blob with sequence number %s%n\", response.getValue().getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  syntax:
    content: public Mono<Response<PageBlobItem>> uploadPagesWithResponse(PageRange pageRange, Flux<ByteBuffer> body, byte[] contentMd5, PageBlobRequestConditions pageBlobRequestConditions)
    parameters:
    - id: pageRange
      type: com.azure.storage.blob.models.PageRange
      description: >-
        A <xref uid="com.azure.storage.blob.models.PageRange" data-throw-if-not-resolved="false">PageRange</xref> object. Given that pages must be aligned with 512-byte boundaries, the start
         offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte ranges
         are 0-511, 512-1023, etc.
    - id: body
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: >-
        The data to upload. Note that this <code>Flux</code> must be replayable if retries are enabled (the
         default). In other words, the Flowable must produce the same data each time it is subscribed to.
    - id: contentMd5
      type: byte[]
      description: >-
        An MD5 hash of the page content. This hash is used to verify the integrity of the page during
         transport. When this header is specified, the storage service compares the hash of the content that has arrived
         with this header value. Note that this MD5 hash is not stored with the blob. If the two hashes do not match, the
         operation will fail.
    - id: pageBlobRequestConditions
      type: com.azure.storage.blob.models.PageBlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.PageBlobRequestConditions" data-throw-if-not-resolved="false">PageBlobRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.PageBlobItem>>
      description: A reactive response containing the information of the uploaded pages.
references:
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.blob.BlobServiceVersion
  name: BlobServiceVersion
  nameWithType: BlobServiceVersion
  fullName: com.azure.storage.blob.BlobServiceVersion
- uid: com.azure.storage.blob.models.CpkInfo
  name: CpkInfo
  nameWithType: CpkInfo
  fullName: com.azure.storage.blob.models.CpkInfo
- uid: com.azure.storage.blob.implementation.models.EncryptionScope
  name: EncryptionScope
  nameWithType: EncryptionScope
  fullName: com.azure.storage.blob.implementation.models.EncryptionScope
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.PageBlobAsyncClient*
  name: PageBlobAsyncClient
  nameWithType: PageBlobAsyncClient.PageBlobAsyncClient
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.PageBlobAsyncClient
  package: com.azure.storage.blob.specialized
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: reactor.core.publisher.Mono<com.azure.storage.blob.models.PageBlobItem>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.PageBlobItem
    name: PageBlobItem
    fullName: com.azure.storage.blob.models.PageBlobItem
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.create*
  name: create
  nameWithType: PageBlobAsyncClient.create
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.create
  package: com.azure.storage.blob.specialized
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: java.lang.Long
  spec.java:
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
- uid: com.azure.storage.blob.models.BlobHttpHeaders
  name: BlobHttpHeaders
  nameWithType: BlobHttpHeaders
  fullName: com.azure.storage.blob.models.BlobHttpHeaders
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.models.BlobRequestConditions
  name: BlobRequestConditions
  nameWithType: BlobRequestConditions
  fullName: com.azure.storage.blob.models.BlobRequestConditions
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.PageBlobItem>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.PageBlobItem
    name: PageBlobItem
    fullName: com.azure.storage.blob.models.PageBlobItem
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.createWithResponse*
  name: createWithResponse
  nameWithType: PageBlobAsyncClient.createWithResponse
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.createWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.options.PageBlobCreateOptions
  name: PageBlobCreateOptions
  nameWithType: PageBlobCreateOptions
  fullName: com.azure.storage.blob.options.PageBlobCreateOptions
- uid: com.azure.storage.blob.models.PageRange
  name: PageRange
  nameWithType: PageRange
  fullName: com.azure.storage.blob.models.PageRange
- uid: reactor.core.publisher.Flux<java.nio.ByteBuffer>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: java.nio.ByteBuffer
    name: ByteBuffer
    fullName: java.nio.ByteBuffer
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPages*
  name: uploadPages
  nameWithType: PageBlobAsyncClient.uploadPages
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPages
  package: com.azure.storage.blob.specialized
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.azure.storage.blob.models.PageBlobRequestConditions
  name: PageBlobRequestConditions
  nameWithType: PageBlobRequestConditions
  fullName: com.azure.storage.blob.models.PageBlobRequestConditions
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesWithResponse*
  name: uploadPagesWithResponse
  nameWithType: PageBlobAsyncClient.uploadPagesWithResponse
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrl*
  name: uploadPagesFromUrl
  nameWithType: PageBlobAsyncClient.uploadPagesFromUrl
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrl
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrlWithResponse*
  name: uploadPagesFromUrlWithResponse
  nameWithType: PageBlobAsyncClient.uploadPagesFromUrlWithResponse
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrlWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.clearPages*
  name: clearPages
  nameWithType: PageBlobAsyncClient.clearPages
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.clearPages
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.clearPagesWithResponse*
  name: clearPagesWithResponse
  nameWithType: PageBlobAsyncClient.clearPagesWithResponse
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.clearPagesWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.models.BlobRange
  name: BlobRange
  nameWithType: BlobRange
  fullName: com.azure.storage.blob.models.BlobRange
- uid: reactor.core.publisher.Mono<com.azure.storage.blob.models.PageList>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.PageList
    name: PageList
    fullName: com.azure.storage.blob.models.PageList
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRanges*
  name: getPageRanges
  nameWithType: PageBlobAsyncClient.getPageRanges
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRanges
  package: com.azure.storage.blob.specialized
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.PageList>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.PageList
    name: PageList
    fullName: com.azure.storage.blob.models.PageList
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesWithResponse*
  name: getPageRangesWithResponse
  nameWithType: PageBlobAsyncClient.getPageRangesWithResponse
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesDiff*
  name: getPageRangesDiff
  nameWithType: PageBlobAsyncClient.getPageRangesDiff
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesDiff
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesDiffWithResponse*
  name: getPageRangesDiffWithResponse
  nameWithType: PageBlobAsyncClient.getPageRangesDiffWithResponse
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesDiffWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.getManagedDiskPageRangesDiff*
  name: getManagedDiskPageRangesDiff
  nameWithType: PageBlobAsyncClient.getManagedDiskPageRangesDiff
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.getManagedDiskPageRangesDiff
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.getManagedDiskPageRangesDiffWithResponse*
  name: getManagedDiskPageRangesDiffWithResponse
  nameWithType: PageBlobAsyncClient.getManagedDiskPageRangesDiffWithResponse
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.getManagedDiskPageRangesDiffWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.resize*
  name: resize
  nameWithType: PageBlobAsyncClient.resize
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.resize
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.resizeWithResponse*
  name: resizeWithResponse
  nameWithType: PageBlobAsyncClient.resizeWithResponse
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.resizeWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.models.SequenceNumberActionType
  name: SequenceNumberActionType
  nameWithType: SequenceNumberActionType
  fullName: com.azure.storage.blob.models.SequenceNumberActionType
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.updateSequenceNumber*
  name: updateSequenceNumber
  nameWithType: PageBlobAsyncClient.updateSequenceNumber
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.updateSequenceNumber
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.updateSequenceNumberWithResponse*
  name: updateSequenceNumberWithResponse
  nameWithType: PageBlobAsyncClient.updateSequenceNumberWithResponse
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.updateSequenceNumberWithResponse
  package: com.azure.storage.blob.specialized
- uid: reactor.core.publisher.Mono<com.azure.storage.blob.models.CopyStatusType>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.CopyStatusType
    name: CopyStatusType
    fullName: com.azure.storage.blob.models.CopyStatusType
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncremental*
  name: copyIncremental
  nameWithType: PageBlobAsyncClient.copyIncremental
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncremental
  package: com.azure.storage.blob.specialized
- uid: com.azure.core.http.RequestConditions
  spec.java:
  - uid: com.azure.core.http.RequestConditions
    name: RequestConditions
    fullName: com.azure.core.http.RequestConditions
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.CopyStatusType>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.CopyStatusType
    name: CopyStatusType
    fullName: com.azure.storage.blob.models.CopyStatusType
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncrementalWithResponse*
  name: copyIncrementalWithResponse
  nameWithType: PageBlobAsyncClient.copyIncrementalWithResponse
  fullName: com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncrementalWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.options.PageBlobCopyIncrementalOptions
  name: PageBlobCopyIncrementalOptions
  nameWithType: PageBlobCopyIncrementalOptions
  fullName: com.azure.storage.blob.options.PageBlobCopyIncrementalOptions
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase
  name: BlobAsyncClientBase
  nameWithType: BlobAsyncClientBase
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)
  name: BlobAsyncClientBase.createSnapshotWithResponse(Map<String,String>,BlobRequestConditions)
  nameWithType: BlobAsyncClientBase.createSnapshotWithResponse(Map<String,String>,BlobRequestConditions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getServiceVersion()
  name: BlobAsyncClientBase.getServiceVersion()
  nameWithType: BlobAsyncClientBase.getServiceVersion()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getServiceVersion()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.time.Duration)
  name: BlobAsyncClientBase.beginCopy(String,Duration)
  nameWithType: BlobAsyncClientBase.beginCopy(String,Duration)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.time.Duration)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse(com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.lang.String)
  name: BlobAsyncClientBase.setAccessTierWithResponse(AccessTier,RehydratePriority,String)
  nameWithType: BlobAsyncClientBase.setAccessTierWithResponse(AccessTier,RehydratePriority,String)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse(com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrl(java.lang.String)
  name: BlobAsyncClientBase.abortCopyFromUrl(String)
  nameWithType: BlobAsyncClientBase.abortCopyFromUrl(String)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrl(java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.undeleteWithResponse()
  name: BlobAsyncClientBase.undeleteWithResponse()
  nameWithType: BlobAsyncClientBase.undeleteWithResponse()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.undeleteWithResponse()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getTagsWithResponse(com.azure.storage.blob.options.BlobGetTagsOptions)
  name: BlobAsyncClientBase.getTagsWithResponse(BlobGetTagsOptions)
  nameWithType: BlobAsyncClientBase.getTagsWithResponse(BlobGetTagsOptions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getTagsWithResponse(com.azure.storage.blob.options.BlobGetTagsOptions)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfo()
  name: BlobAsyncClientBase.getAccountInfo()
  nameWithType: BlobAsyncClientBase.getAccountInfo()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfo()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  name: BlobAsyncClientBase.setMetadata(Map<String,String>)
  nameWithType: BlobAsyncClientBase.setMetadata(Map<String,String>)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setTags(java.util.Map<java.lang.String,java.lang.String>)
  name: BlobAsyncClientBase.setTags(Map<String,String>)
  nameWithType: BlobAsyncClientBase.setTags(Map<String,String>)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setTags(java.util.Map<java.lang.String,java.lang.String>)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getTags()
  name: BlobAsyncClientBase.getTags()
  nameWithType: BlobAsyncClientBase.getTags()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getTags()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTier(com.azure.storage.blob.models.AccessTier)
  name: BlobAsyncClientBase.setAccessTier(AccessTier)
  nameWithType: BlobAsyncClientBase.setAccessTier(AccessTier)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTier(com.azure.storage.blob.models.AccessTier)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions)
  name: BlobAsyncClientBase.copyFromUrlWithResponse(String,Map<String,String>,AccessTier,RequestConditions,BlobRequestConditions)
  nameWithType: BlobAsyncClientBase.copyFromUrlWithResponse(String,Map<String,String>,AccessTier,RequestConditions,BlobRequestConditions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.delete()
  name: BlobAsyncClientBase.delete()
  nameWithType: BlobAsyncClientBase.delete()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.delete()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)
  name: BlobAsyncClientBase.generateUserDelegationSas(BlobServiceSasSignatureValues,UserDelegationKey)
  nameWithType: BlobAsyncClientBase.generateUserDelegationSas(BlobServiceSasSignatureValues,UserDelegationKey)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getHttpPipeline()
  name: BlobAsyncClientBase.getHttpPipeline()
  nameWithType: BlobAsyncClientBase.getHttpPipeline()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getHttpPipeline()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.queryWithResponse(com.azure.storage.blob.options.BlobQueryOptions)
  name: BlobAsyncClientBase.queryWithResponse(BlobQueryOptions)
  nameWithType: BlobAsyncClientBase.queryWithResponse(BlobQueryOptions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.queryWithResponse(com.azure.storage.blob.options.BlobQueryOptions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionClient(java.lang.String)
  name: BlobAsyncClientBase.getVersionClient(String)
  nameWithType: BlobAsyncClientBase.getVersionClient(String)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionClient(java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeadersWithResponse(com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.BlobRequestConditions)
  name: BlobAsyncClientBase.setHttpHeadersWithResponse(BlobHttpHeaders,BlobRequestConditions)
  nameWithType: BlobAsyncClientBase.setHttpHeadersWithResponse(BlobHttpHeaders,BlobRequestConditions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeadersWithResponse(com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.BlobRequestConditions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrlWithResponse(java.lang.String,java.lang.String)
  name: BlobAsyncClientBase.abortCopyFromUrlWithResponse(String,String)
  nameWithType: BlobAsyncClientBase.abortCopyFromUrlWithResponse(String,String)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrlWithResponse(java.lang.String,java.lang.String)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountName()
  name: BlobAsyncClientBase.getAccountName()
  nameWithType: BlobAsyncClientBase.getAccountName()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountName()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse(com.azure.storage.blob.options.BlobSetAccessTierOptions)
  name: BlobAsyncClientBase.setAccessTierWithResponse(BlobSetAccessTierOptions)
  nameWithType: BlobAsyncClientBase.setAccessTierWithResponse(BlobSetAccessTierOptions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse(com.azure.storage.blob.options.BlobSetAccessTierOptions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getProperties()
  name: BlobAsyncClientBase.getProperties()
  nameWithType: BlobAsyncClientBase.getProperties()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getProperties()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfoWithResponse()
  name: BlobAsyncClientBase.getAccountInfoWithResponse()
  nameWithType: BlobAsyncClientBase.getAccountInfoWithResponse()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfoWithResponse()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getCustomerProvidedKey()
  name: BlobAsyncClientBase.getCustomerProvidedKey()
  nameWithType: BlobAsyncClientBase.getCustomerProvidedKey()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getCustomerProvidedKey()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(com.azure.storage.blob.options.BlobBeginCopyOptions)
  name: BlobAsyncClientBase.beginCopy(BlobBeginCopyOptions)
  nameWithType: BlobAsyncClientBase.beginCopy(BlobBeginCopyOptions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(com.azure.storage.blob.options.BlobBeginCopyOptions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionId()
  name: BlobAsyncClientBase.getVersionId()
  nameWithType: BlobAsyncClientBase.getVersionId()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionId()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeaders(com.azure.storage.blob.models.BlobHttpHeaders)
  name: BlobAsyncClientBase.setHttpHeaders(BlobHttpHeaders)
  nameWithType: BlobAsyncClientBase.setHttpHeaders(BlobHttpHeaders)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeaders(com.azure.storage.blob.models.BlobHttpHeaders)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>)
  name: BlobAsyncClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean,Set<OpenOption>)
  nameWithType: BlobAsyncClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean,Set<OpenOption>)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.download()
  name: BlobAsyncClientBase.download()
  nameWithType: BlobAsyncClientBase.download()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.download()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobUrl()
  name: BlobAsyncClientBase.getBlobUrl()
  nameWithType: BlobAsyncClientBase.getBlobUrl()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobUrl()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)
  name: BlobAsyncClientBase.setMetadataWithResponse(Map<String,String>,BlobRequestConditions)
  nameWithType: BlobAsyncClientBase.setMetadataWithResponse(Map<String,String>,BlobRequestConditions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotClient(java.lang.String)
  name: BlobAsyncClientBase.getSnapshotClient(String)
  nameWithType: BlobAsyncClientBase.getSnapshotClient(String)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotClient(java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getEncryptionScope()
  name: BlobAsyncClientBase.getEncryptionScope()
  nameWithType: BlobAsyncClientBase.getEncryptionScope()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getEncryptionScope()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.exists()
  name: BlobAsyncClientBase.exists()
  nameWithType: BlobAsyncClientBase.exists()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.exists()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions)
  name: BlobAsyncClientBase.deleteWithResponse(DeleteSnapshotsOptionType,BlobRequestConditions)
  nameWithType: BlobAsyncClientBase.deleteWithResponse(DeleteSnapshotsOptionType,BlobRequestConditions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotId()
  name: BlobAsyncClientBase.getSnapshotId()
  nameWithType: BlobAsyncClientBase.getSnapshotId()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotId()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getPropertiesWithResponse(com.azure.storage.blob.models.BlobRequestConditions)
  name: BlobAsyncClientBase.getPropertiesWithResponse(BlobRequestConditions)
  nameWithType: BlobAsyncClientBase.getPropertiesWithResponse(BlobRequestConditions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getPropertiesWithResponse(com.azure.storage.blob.models.BlobRequestConditions)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setTagsWithResponse(com.azure.storage.blob.options.BlobSetTagsOptions)
  name: BlobAsyncClientBase.setTagsWithResponse(BlobSetTagsOptions)
  nameWithType: BlobAsyncClientBase.setTagsWithResponse(BlobSetTagsOptions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setTagsWithResponse(com.azure.storage.blob.options.BlobSetTagsOptions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getContainerName()
  name: BlobAsyncClientBase.getContainerName()
  nameWithType: BlobAsyncClientBase.getContainerName()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getContainerName()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)
  name: BlobAsyncClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean)
  nameWithType: BlobAsyncClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshot()
  name: BlobAsyncClientBase.createSnapshot()
  nameWithType: BlobAsyncClientBase.createSnapshot()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshot()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobName()
  name: BlobAsyncClientBase.getBlobName()
  nameWithType: BlobAsyncClientBase.getBlobName()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobName()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrl(java.lang.String)
  name: BlobAsyncClientBase.copyFromUrl(String)
  nameWithType: BlobAsyncClientBase.copyFromUrl(String)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrl(java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
  name: BlobAsyncClientBase.beginCopy(String,Map<String,String>,AccessTier,RehydratePriority,RequestConditions,BlobRequestConditions,Duration)
  nameWithType: BlobAsyncClientBase.beginCopy(String,Map<String,String>,AccessTier,RehydratePriority,RequestConditions,BlobRequestConditions,Duration)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.undelete()
  name: BlobAsyncClientBase.undelete()
  nameWithType: BlobAsyncClientBase.undelete()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.undelete()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(java.lang.String,boolean)
  name: BlobAsyncClientBase.downloadToFile(String,boolean)
  nameWithType: BlobAsyncClientBase.downloadToFile(String,boolean)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(java.lang.String,boolean)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)
  name: BlobAsyncClientBase.generateSas(BlobServiceSasSignatureValues)
  nameWithType: BlobAsyncClientBase.generateSas(BlobServiceSasSignatureValues)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.query(java.lang.String)
  name: BlobAsyncClientBase.query(String)
  nameWithType: BlobAsyncClientBase.query(String)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.query(java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadWithResponse(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)
  name: BlobAsyncClientBase.downloadWithResponse(BlobRange,DownloadRetryOptions,BlobRequestConditions,boolean)
  nameWithType: BlobAsyncClientBase.downloadWithResponse(BlobRange,DownloadRetryOptions,BlobRequestConditions,boolean)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadWithResponse(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(com.azure.storage.blob.options.BlobCopyFromUrlOptions)
  name: BlobAsyncClientBase.copyFromUrlWithResponse(BlobCopyFromUrlOptions)
  nameWithType: BlobAsyncClientBase.copyFromUrlWithResponse(BlobCopyFromUrlOptions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(com.azure.storage.blob.options.BlobCopyFromUrlOptions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(java.lang.String)
  name: BlobAsyncClientBase.downloadToFile(String)
  nameWithType: BlobAsyncClientBase.downloadToFile(String)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.existsWithResponse()
  name: BlobAsyncClientBase.existsWithResponse()
  nameWithType: BlobAsyncClientBase.existsWithResponse()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.existsWithResponse()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.isSnapshot()
  name: BlobAsyncClientBase.isSnapshot()
  nameWithType: BlobAsyncClientBase.isSnapshot()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.isSnapshot()
- uid: com.azure.storage.blob.models.PageBlobItem
  name: PageBlobItem
  nameWithType: PageBlobItem
  fullName: com.azure.storage.blob.models.PageBlobItem
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: reactor.core.publisher.Flux
  name: Flux
  nameWithType: Flux
  fullName: reactor.core.publisher.Flux
- uid: java.nio.ByteBuffer
  name: ByteBuffer
  nameWithType: ByteBuffer
  fullName: java.nio.ByteBuffer
- uid: com.azure.storage.blob.models.PageList
  name: PageList
  nameWithType: PageList
  fullName: com.azure.storage.blob.models.PageList
- uid: com.azure.storage.blob.models.CopyStatusType
  name: CopyStatusType
  nameWithType: CopyStatusType
  fullName: com.azure.storage.blob.models.CopyStatusType
- uid: java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)
  name: String,String>,BlobRequestConditions)
  nameWithType: String,String>,BlobRequestConditions)
  fullName: java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshotWithResponse(java.util.Map
  name: BlobAsyncClientBase.createSnapshotWithResponse(Map
  nameWithType: BlobAsyncClientBase.createSnapshotWithResponse(Map
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshotWithResponse(java.util.Map
- uid: java.lang.String,java.lang.String>)
  name: String,String>)
  nameWithType: String,String>)
  fullName: java.lang.String,java.lang.String>)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadata(java.util.Map
  name: BlobAsyncClientBase.setMetadata(Map
  nameWithType: BlobAsyncClientBase.setMetadata(Map
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadata(java.util.Map
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setTags(java.util.Map
  name: BlobAsyncClientBase.setTags(Map
  nameWithType: BlobAsyncClientBase.setTags(Map
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setTags(java.util.Map
- uid: java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions)
  name: String,String>,AccessTier,RequestConditions,BlobRequestConditions)
  nameWithType: String,String>,AccessTier,RequestConditions,BlobRequestConditions)
  fullName: java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map
  name: BlobAsyncClientBase.copyFromUrlWithResponse(String,Map
  nameWithType: BlobAsyncClientBase.copyFromUrlWithResponse(String,Map
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set
  name: BlobAsyncClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean,Set
  nameWithType: BlobAsyncClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean,Set
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set
- uid: java.nio.file.OpenOption>)
  name: OpenOption>)
  nameWithType: OpenOption>)
  fullName: java.nio.file.OpenOption>)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadataWithResponse(java.util.Map
  name: BlobAsyncClientBase.setMetadataWithResponse(Map
  nameWithType: BlobAsyncClientBase.setMetadataWithResponse(Map
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadataWithResponse(java.util.Map
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.util.Map
  name: BlobAsyncClientBase.beginCopy(String,Map
  nameWithType: BlobAsyncClientBase.beginCopy(String,Map
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.util.Map
- uid: java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
  name: String,String>,AccessTier,RehydratePriority,RequestConditions,BlobRequestConditions,Duration)
  nameWithType: String,String>,AccessTier,RehydratePriority,RequestConditions,BlobRequestConditions,Duration)
  fullName: java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
