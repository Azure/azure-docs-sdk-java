### YamlMime:JavaType
uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient"
fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient"
name: "PageBlobAsyncClient"
nameWithType: "PageBlobAsyncClient"
summary: "Client to a page blob."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrl(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrlWithResponse(java.lang.String,java.lang.String)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(com.azure.storage.blob.options.BlobBeginCopyOptions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.time.Duration)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrl(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(com.azure.storage.blob.options.BlobCopyFromUrlOptions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshot()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.delete()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteIfExists()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteIfExistsWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteImmutabilityPolicy()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteImmutabilityPolicyWithResponse()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.download()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadContent()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadContentWithResponse(com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadStream()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadStreamWithResponse(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(java.lang.String,boolean)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(com.azure.storage.blob.options.BlobDownloadToFileOptions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadWithResponse(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.exists()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.existsWithResponse()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey,java.lang.String,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfo()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfoWithResponse()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountName()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountUrl()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobName()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobUrl()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getContainerAsyncClient()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getContainerName()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getCustomerProvidedKey()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getCustomerProvidedKeyAsyncClient(com.azure.storage.blob.models.CustomerProvidedKey)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getEncryptionScope()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getEncryptionScopeAsyncClient(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getHttpPipeline()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getProperties()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getPropertiesWithResponse(com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getServiceVersion()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotClient(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotId()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getTags()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getTagsWithResponse(com.azure.storage.blob.options.BlobGetTagsOptions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionClient(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionId()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.isSnapshot()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.query(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.queryWithResponse(com.azure.storage.blob.options.BlobQueryOptions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTier(com.azure.storage.blob.models.AccessTier)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse(com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.lang.String)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse(com.azure.storage.blob.options.BlobSetAccessTierOptions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeaders(com.azure.storage.blob.models.BlobHttpHeaders)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeadersWithResponse(com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.setImmutabilityPolicy(com.azure.storage.blob.models.BlobImmutabilityPolicy)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.setImmutabilityPolicyWithResponse(com.azure.storage.blob.models.BlobImmutabilityPolicy,com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.setLegalHold(boolean)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.setLegalHoldWithResponse(boolean)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.setTags(java.util.Map<java.lang.String,java.lang.String>)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.setTagsWithResponse(com.azure.storage.blob.options.BlobSetTagsOptions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.undelete()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.undeleteWithResponse()"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class PageBlobAsyncClient extends BlobAsyncClientBase"
fields:
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.MAX_PUT_PAGES_BYTES"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.MAX_PUT_PAGES_BYTES"
  name: "MAX_PUT_PAGES_BYTES"
  nameWithType: "PageBlobAsyncClient.MAX_PUT_PAGES_BYTES"
  summary: "Indicates the maximum number of bytes that may be sent in a call to put<wbr>Page."
  modifiers:
  - "static"
  - "final"
  field:
    value: "4194304"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final int MAX_PUT_PAGES_BYTES"
  desc: "Indicates the maximum number of bytes that may be sent in a call to putPage."
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.PAGE_BYTES"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.PAGE_BYTES"
  name: "PAGE_BYTES"
  nameWithType: "PageBlobAsyncClient.PAGE_BYTES"
  summary: "Indicates the number of bytes in a page."
  modifiers:
  - "static"
  - "final"
  field:
    value: "512"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final int PAGE_BYTES"
  desc: "Indicates the number of bytes in a page."
methods:
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.clearPages(com.azure.storage.blob.models.PageRange)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.clearPages(PageRange pageRange)"
  name: "clearPages(PageRange pageRange)"
  nameWithType: "PageBlobAsyncClient.clearPages(PageRange pageRange)"
  summary: "Frees the specified pages from the page blob."
  parameters:
  - description: "A <xref uid=\"com.azure.storage.blob.models.PageRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageRange\"></xref> object. Given that pages must be aligned with 512-byte boundaries, the start\n offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte ranges\n are 0-511, 512-1023, etc."
    name: "pageRange"
    type: "<xref href=\"com.azure.storage.blob.models.PageRange?alt=com.azure.storage.blob.models.PageRange&text=PageRange\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PageBlobItem> clearPages(PageRange pageRange)"
  desc: "Frees the specified pages from the page blob. The size of the range must be a multiple of 512. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n\n client.clearPages(pageRange).subscribe(response -> System.out.printf(\n     \"Cleared page blob with sequence number %s%n\", response.getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  returns:
    description: "A reactive response containing the information of the cleared pages."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.clearPagesWithResponse(com.azure.storage.blob.models.PageRange,com.azure.storage.blob.models.PageBlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.clearPagesWithResponse(PageRange pageRange, PageBlobRequestConditions pageBlobRequestConditions)"
  name: "clearPagesWithResponse(PageRange pageRange, PageBlobRequestConditions pageBlobRequestConditions)"
  nameWithType: "PageBlobAsyncClient.clearPagesWithResponse(PageRange pageRange, PageBlobRequestConditions pageBlobRequestConditions)"
  summary: "Frees the specified pages from the page blob."
  parameters:
  - description: "A <xref uid=\"com.azure.storage.blob.models.PageRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageRange\"></xref> object. Given that pages must be aligned with 512-byte boundaries, the start\n offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte ranges\n are 0-511, 512-1023, etc."
    name: "pageRange"
    type: "<xref href=\"com.azure.storage.blob.models.PageRange?alt=com.azure.storage.blob.models.PageRange&text=PageRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.PageBlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobRequestConditions\"></xref>"
    name: "pageBlobRequestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.PageBlobRequestConditions?alt=com.azure.storage.blob.models.PageBlobRequestConditions&text=PageBlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<PageBlobItem>> clearPagesWithResponse(PageRange pageRange, PageBlobRequestConditions pageBlobRequestConditions)"
  desc: "Frees the specified pages from the page blob. The size of the range must be a multiple of 512. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n PageBlobRequestConditions pageBlobRequestConditions = new PageBlobRequestConditions().setLeaseId(leaseId);\n\n client.clearPagesWithResponse(pageRange, pageBlobRequestConditions)\n     .subscribe(response -> System.out.printf(\n         \"Cleared page blob with sequence number %s%n\", response.getValue().getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  returns:
    description: "A reactive response containing the information of the cleared pages."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncremental(java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncremental(String source, String snapshot)"
  name: "copyIncremental(String source, String snapshot)"
  nameWithType: "PageBlobAsyncClient.copyIncremental(String source, String snapshot)"
  summary: "Begins an operation to start an incremental copy from one page blob's snapshot to this page blob."
  parameters:
  - description: "The source page blob."
    name: "source"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The snapshot on the copy source."
    name: "snapshot"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CopyStatusType> copyIncremental(String source, String snapshot)"
  desc: "Begins an operation to start an incremental copy from one page blob's snapshot to this page blob. The snapshot is copied such that only the differential changes between the previously copied snapshot are transferred to the destination. The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual. For more information, see the Azure Docs [here][] and [here][here 1].\n\n**Code Samples**\n\n```java\nfinal String snapshot = \"copy snapshot\";\n client.copyIncremental(url, snapshot).subscribe(statusType -> {\n     switch (statusType) {\n         case SUCCESS:\n             System.out.println(\"Page blob copied successfully\");\n             break;\n         case FAILED:\n             System.out.println(\"Page blob copied failed\");\n             break;\n         case ABORTED:\n             System.out.println(\"Page blob copied aborted\");\n             break;\n         case PENDING:\n             System.out.println(\"Page blob copied pending\");\n             break;\n         default:\n             break;\n     }\n });\n```\n\n\n[here]: https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob\n[here 1]: https://docs.microsoft.com/azure/virtual-machines/windows/incremental-snapshots"
  returns:
    description: "A reactive response emitting the copy status."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.CopyStatusType?alt=com.azure.storage.blob.models.CopyStatusType&text=CopyStatusType\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncrementalWithResponse(com.azure.storage.blob.options.PageBlobCopyIncrementalOptions)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncrementalWithResponse(PageBlobCopyIncrementalOptions options)"
  name: "copyIncrementalWithResponse(PageBlobCopyIncrementalOptions options)"
  nameWithType: "PageBlobAsyncClient.copyIncrementalWithResponse(PageBlobCopyIncrementalOptions options)"
  summary: "Begins an operation to start an incremental copy from one page blob's snapshot to this page blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.PageBlobCopyIncrementalOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobCopyIncrementalOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.PageBlobCopyIncrementalOptions?alt=com.azure.storage.blob.options.PageBlobCopyIncrementalOptions&text=PageBlobCopyIncrementalOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<CopyStatusType>> copyIncrementalWithResponse(PageBlobCopyIncrementalOptions options)"
  desc: "Begins an operation to start an incremental copy from one page blob's snapshot to this page blob. The snapshot is copied such that only the differential changes between the previously copied snapshot are transferred to the destination. The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual. For more information, see the Azure Docs [here][] and [here][here 1].\n\n**Code Samples**\n\n```java\nfinal String snapshot = \"copy snapshot\";\n PageBlobCopyIncrementalRequestConditions destinationRequestConditions = new PageBlobCopyIncrementalRequestConditions()\n     .setIfNoneMatch(\"snapshotMatch\");\n\n client.copyIncrementalWithResponse(new PageBlobCopyIncrementalOptions(url, snapshot)\n     .setRequestConditions(destinationRequestConditions))\n     .subscribe(response -> {\n         CopyStatusType statusType = response.getValue();\n\n         switch (statusType) {\n             case SUCCESS:\n                 System.out.println(\"Page blob copied successfully\");\n                 break;\n             case FAILED:\n                 System.out.println(\"Page blob copied failed\");\n                 break;\n             case ABORTED:\n                 System.out.println(\"Page blob copied aborted\");\n                 break;\n             case PENDING:\n                 System.out.println(\"Page blob copied pending\");\n                 break;\n             default:\n                 break;\n         }\n     });\n```\n\n\n[here]: https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob\n[here 1]: https://docs.microsoft.com/azure/virtual-machines/windows/incremental-snapshots"
  returns:
    description: "A reactive response emitting the copy status."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.CopyStatusType?alt=com.azure.storage.blob.models.CopyStatusType&text=CopyStatusType\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncrementalWithResponse(java.lang.String,java.lang.String,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncrementalWithResponse(String source, String snapshot, RequestConditions modifiedRequestConditions)"
  name: "copyIncrementalWithResponse(String source, String snapshot, RequestConditions modifiedRequestConditions)"
  nameWithType: "PageBlobAsyncClient.copyIncrementalWithResponse(String source, String snapshot, RequestConditions modifiedRequestConditions)"
  summary: "Begins an operation to start an incremental copy from one page blob's snapshot to this page blob."
  parameters:
  - description: "The source page blob."
    name: "source"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The snapshot on the copy source."
    name: "snapshot"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Standard HTTP Access conditions related to the modification of data. ETag and\n LastModifiedTime are used to construct conditions related to when the blob was changed relative to the given\n request. The request will fail if the specified condition is not satisfied."
    name: "modifiedRequestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<CopyStatusType>> copyIncrementalWithResponse(String source, String snapshot, RequestConditions modifiedRequestConditions)"
  desc: "Begins an operation to start an incremental copy from one page blob's snapshot to this page blob. The snapshot is copied such that only the differential changes between the previously copied snapshot are transferred to the destination. The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual. For more information, see the Azure Docs [here][] and [here][here 1].\n\n**Code Samples**\n\n```java\nfinal String snapshot = \"copy snapshot\";\n RequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfNoneMatch(\"snapshotMatch\");\n\n client.copyIncrementalWithResponse(url, snapshot, modifiedRequestConditions)\n     .subscribe(response -> {\n         CopyStatusType statusType = response.getValue();\n\n         switch (statusType) {\n             case SUCCESS:\n                 System.out.println(\"Page blob copied successfully\");\n                 break;\n             case FAILED:\n                 System.out.println(\"Page blob copied failed\");\n                 break;\n             case ABORTED:\n                 System.out.println(\"Page blob copied aborted\");\n                 break;\n             case PENDING:\n                 System.out.println(\"Page blob copied pending\");\n                 break;\n             default:\n                 break;\n         }\n     });\n```\n\n\n[here]: https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob\n[here 1]: https://docs.microsoft.com/azure/virtual-machines/windows/incremental-snapshots"
  returns:
    description: "A reactive response emitting the copy status."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.CopyStatusType?alt=com.azure.storage.blob.models.CopyStatusType&text=CopyStatusType\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.create(long)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.create(long size)"
  name: "create(long size)"
  nameWithType: "PageBlobAsyncClient.create(long size)"
  summary: "Creates a page blob of the specified length."
  parameters:
  - description: "Specifies the maximum size for the page blob, up to 8 TB. The page blob size must be aligned to a\n 512-byte boundary."
    name: "size"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PageBlobItem> create(long size)"
  desc: "Creates a page blob of the specified length. By default, this method will not overwrite an existing blob. Call PutPage to upload data to a page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.create(size).subscribe(response -> System.out.printf(\n     \"Created page blob with sequence number %s%n\", response.getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob"
  returns:
    description: "A reactive response containing the information of the created page blob."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.create(long,boolean)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.create(long size, boolean overwrite)"
  name: "create(long size, boolean overwrite)"
  nameWithType: "PageBlobAsyncClient.create(long size, boolean overwrite)"
  summary: "Creates a page blob of the specified length."
  parameters:
  - description: "Specifies the maximum size for the page blob, up to 8 TB. The page blob size must be aligned to a\n 512-byte boundary."
    name: "size"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to overwrite, should data exist on the blob."
    name: "overwrite"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PageBlobItem> create(long size, boolean overwrite)"
  desc: "Creates a page blob of the specified length. Call PutPage to upload data to a page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nboolean overwrite = false; // Default behavior\n client.create(size, overwrite).subscribe(response -> System.out.printf(\n     \"Created page blob with sequence number %s%n\", response.getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob"
  returns:
    description: "A reactive response containing the information of the created page blob."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.createIfNotExists(long)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.createIfNotExists(long size)"
  name: "createIfNotExists(long size)"
  nameWithType: "PageBlobAsyncClient.createIfNotExists(long size)"
  summary: "Creates a page blob of the specified length if it does not exist."
  parameters:
  - description: "Specifies the maximum size for the page blob, up to 8 TB. The page blob size must be aligned to a\n 512-byte boundary."
    name: "size"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PageBlobItem> createIfNotExists(long size)"
  desc: "Creates a page blob of the specified length if it does not exist. Call PutPage to upload data to a page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.createIfNotExists(size).subscribe(response ->\n     System.out.printf(\"Created page blob with sequence number %s%n\", response.getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob"
  returns:
    description: "A reactive response <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> signaling completion. <xref uid=\"com.azure.storage.blob.models.PageBlobItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobItem\"></xref> contains information of\n the newly created page blob."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.createIfNotExistsWithResponse(com.azure.storage.blob.options.PageBlobCreateOptions)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.createIfNotExistsWithResponse(PageBlobCreateOptions options)"
  name: "createIfNotExistsWithResponse(PageBlobCreateOptions options)"
  nameWithType: "PageBlobAsyncClient.createIfNotExistsWithResponse(PageBlobCreateOptions options)"
  summary: "Creates a page blob of the specified length if it does not exist."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.PageBlobCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.PageBlobCreateOptions?alt=com.azure.storage.blob.options.PageBlobCreateOptions&text=PageBlobCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<PageBlobItem>> createIfNotExistsWithResponse(PageBlobCreateOptions options)"
  desc: "Creates a page blob of the specified length if it does not exist. Call PutPage to upload data to a page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n\n client.createIfNotExistsWithResponse(new PageBlobCreateOptions(size).setSequenceNumber(sequenceNumber)\n     .setHeaders(headers).setMetadata(metadata).setTags(tags)).subscribe(response -> {\n         if (response.getStatusCode() == 409) {\n             System.out.println(\"Already exists.\");\n         } else {\n             System.out.println(\"successfully created.\");\n         }\n     });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> signaling completion, whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref>\n contains a <xref uid=\"com.azure.storage.blob.models.PageBlobItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobItem\"></xref> containing information about the page blob. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is\n 201, a new page blob was successfully created. If status code is 409, a page blob already existed at this location."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.createWithResponse(com.azure.storage.blob.options.PageBlobCreateOptions)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.createWithResponse(PageBlobCreateOptions options)"
  name: "createWithResponse(PageBlobCreateOptions options)"
  nameWithType: "PageBlobAsyncClient.createWithResponse(PageBlobCreateOptions options)"
  summary: "Creates a page blob of the specified length."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.PageBlobCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.PageBlobCreateOptions?alt=com.azure.storage.blob.options.PageBlobCreateOptions&text=PageBlobCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<PageBlobItem>> createWithResponse(PageBlobCreateOptions options)"
  desc: "Creates a page blob of the specified length. Call PutPage to upload data to a page blob. For more information, see the [Azure Docs][].\n\nTo avoid overwriting, pass \"\\*\" to <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions#setIfNoneMatch(String)\"></xref>.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n BlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n\n client.createWithResponse(new PageBlobCreateOptions(size).setSequenceNumber(sequenceNumber)\n     .setHeaders(headers).setMetadata(metadata).setTags(tags).setRequestConditions(blobRequestConditions))\n     .subscribe(response -> System.out.printf(\n         \"Created page blob with sequence number %s%n\", response.getValue().getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob"
  returns:
    description: "A reactive response containing the information of the created page blob."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.createWithResponse(long,java.lang.Long,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.createWithResponse(long size, Long sequenceNumber, BlobHttpHeaders headers, Map<String,String> metadata, BlobRequestConditions requestConditions)"
  name: "createWithResponse(long size, Long sequenceNumber, BlobHttpHeaders headers, Map<String,String> metadata, BlobRequestConditions requestConditions)"
  nameWithType: "PageBlobAsyncClient.createWithResponse(long size, Long sequenceNumber, BlobHttpHeaders headers, Map<String,String> metadata, BlobRequestConditions requestConditions)"
  summary: "Creates a page blob of the specified length."
  parameters:
  - description: "Specifies the maximum size for the page blob, up to 8 TB. The page blob size must be aligned to a\n 512-byte boundary."
    name: "size"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "A user-controlled value that you can use to track requests. The value of the sequence\n number must be between 0 and 2^63 - 1.The default value is 0."
    name: "sequenceNumber"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobHttpHeaders\"></xref>"
    name: "headers"
    type: "<xref href=\"com.azure.storage.blob.models.BlobHttpHeaders?alt=com.azure.storage.blob.models.BlobHttpHeaders&text=BlobHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "Metadata to associate with the blob. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<PageBlobItem>> createWithResponse(long size, Long sequenceNumber, BlobHttpHeaders headers, Map<String,String> metadata, BlobRequestConditions requestConditions)"
  desc: "Creates a page blob of the specified length. Call PutPage to upload data to a page blob. For more information, see the [Azure Docs][].\n\nTo avoid overwriting, pass \"\\*\" to <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions#setIfNoneMatch(String)\"></xref>.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n BlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n\n client.createWithResponse(size, sequenceNumber, headers, metadata, blobRequestConditions)\n     .subscribe(response -> System.out.printf(\n         \"Created page blob with sequence number %s%n\", response.getValue().getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob"
  returns:
    description: "A reactive response containing the information of the created page blob."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.getCustomerProvidedKeyAsyncClient(com.azure.storage.blob.models.CustomerProvidedKey)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.getCustomerProvidedKeyAsyncClient(CustomerProvidedKey customerProvidedKey)"
  name: "getCustomerProvidedKeyAsyncClient(CustomerProvidedKey customerProvidedKey)"
  nameWithType: "PageBlobAsyncClient.getCustomerProvidedKeyAsyncClient(CustomerProvidedKey customerProvidedKey)"
  summary: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.PageBlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobAsyncClient\"></xref> with the specified `customerProvidedKey`."
  overridden: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getCustomerProvidedKeyAsyncClient(com.azure.storage.blob.models.CustomerProvidedKey)"
  parameters:
  - description: "the <xref uid=\"com.azure.storage.blob.models.CustomerProvidedKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CustomerProvidedKey\"></xref> for the blob,\n pass <code>null</code> to use no customer provided key."
    name: "customerProvidedKey"
    type: "<xref href=\"com.azure.storage.blob.models.CustomerProvidedKey?alt=com.azure.storage.blob.models.CustomerProvidedKey&text=CustomerProvidedKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PageBlobAsyncClient getCustomerProvidedKeyAsyncClient(CustomerProvidedKey customerProvidedKey)"
  desc: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.PageBlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobAsyncClient\"></xref> with the specified `customerProvidedKey`."
  returns:
    description: "a <xref uid=\"com.azure.storage.blob.specialized.PageBlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobAsyncClient\"></xref> with the specified <code>customerProvidedKey</code>."
    type: "<xref href=\"com.azure.storage.blob.specialized.PageBlobAsyncClient?alt=com.azure.storage.blob.specialized.PageBlobAsyncClient&text=PageBlobAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.getEncryptionScopeAsyncClient(java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.getEncryptionScopeAsyncClient(String encryptionScope)"
  name: "getEncryptionScopeAsyncClient(String encryptionScope)"
  nameWithType: "PageBlobAsyncClient.getEncryptionScopeAsyncClient(String encryptionScope)"
  summary: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.PageBlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobAsyncClient\"></xref> with the specified `encryptionScope`."
  overridden: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getEncryptionScopeAsyncClient(java.lang.String)"
  parameters:
  - description: "the encryption scope for the blob, pass <code>null</code> to use no encryption scope."
    name: "encryptionScope"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PageBlobAsyncClient getEncryptionScopeAsyncClient(String encryptionScope)"
  desc: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.PageBlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobAsyncClient\"></xref> with the specified `encryptionScope`."
  returns:
    description: "a <xref uid=\"com.azure.storage.blob.specialized.PageBlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobAsyncClient\"></xref> with the specified <code>encryptionScope</code>."
    type: "<xref href=\"com.azure.storage.blob.specialized.PageBlobAsyncClient?alt=com.azure.storage.blob.specialized.PageBlobAsyncClient&text=PageBlobAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.getManagedDiskPageRangesDiff(com.azure.storage.blob.models.BlobRange,java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.getManagedDiskPageRangesDiff(BlobRange blobRange, String prevSnapshotUrl)"
  name: "getManagedDiskPageRangesDiff(BlobRange blobRange, String prevSnapshotUrl)"
  nameWithType: "PageBlobAsyncClient.getManagedDiskPageRangesDiff(BlobRange blobRange, String prevSnapshotUrl)"
  summary: "This API only works for managed disk accounts."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "blobRange"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies the URL of a previous snapshot of the target blob. Specifies that the\n response will contain only pages that were changed between target blob and previous snapshot. Changed pages\n include both updated and cleared pages. The target blob may be a snapshot, as long as the snapshot specified by\n prevsnapshot is the older of the two."
    name: "prevSnapshotUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PageList> getManagedDiskPageRangesDiff(BlobRange blobRange, String prevSnapshotUrl)"
  desc: "This API only works for managed disk accounts.\n\nGets the collection of page ranges that differ between a specified snapshot and this page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n final String prevSnapshotUrl = \"previous snapshot url\";\n\n client.getPageRangesDiff(blobRange, prevSnapshotUrl).subscribe(response -> {\n     System.out.println(\"Valid Page Ranges are:\");\n     for (PageRange pageRange : response.getPageRange()) {\n         System.out.printf(\"Start: %s, End: %s%n\", pageRange.getStart(), pageRange.getEnd());\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  returns:
    description: "A reactive response emitting all the different page ranges."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageList?alt=com.azure.storage.blob.models.PageList&text=PageList\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.getManagedDiskPageRangesDiffWithResponse(com.azure.storage.blob.models.BlobRange,java.lang.String,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.getManagedDiskPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshotUrl, BlobRequestConditions requestConditions)"
  name: "getManagedDiskPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshotUrl, BlobRequestConditions requestConditions)"
  nameWithType: "PageBlobAsyncClient.getManagedDiskPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshotUrl, BlobRequestConditions requestConditions)"
  summary: "This API only works for managed disk accounts."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "blobRange"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies the URL of a previous snapshot of the target blob. Specifies that the\n response will contain only pages that were changed between target blob and previous snapshot. Changed pages\n include both updated and cleared pages. The target blob may be a snapshot, as long as the snapshot specified by\n prevsnapshot is the older of the two."
    name: "prevSnapshotUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<PageList>> getManagedDiskPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshotUrl, BlobRequestConditions requestConditions)"
  desc: "This API only works for managed disk accounts.\n\nGets the collection of page ranges that differ between a specified snapshot and this page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n final String prevSnapshotUrl = \"previous snapshot url\";\n BlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n\n client.getPageRangesDiffWithResponse(blobRange, prevSnapshotUrl, blobRequestConditions)\n     .subscribe(response -> {\n         System.out.println(\"Valid Page Ranges are:\");\n         for (PageRange pageRange : response.getValue().getPageRange()) {\n             System.out.printf(\"Start: %s, End: %s%n\", pageRange.getStart(), pageRange.getEnd());\n         }\n     });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  returns:
    description: "A reactive response emitting all the different page ranges."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageList?alt=com.azure.storage.blob.models.PageList&text=PageList\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRanges(com.azure.storage.blob.models.BlobRange)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRanges(BlobRange blobRange)"
  name: "getPageRanges(BlobRange blobRange)"
  nameWithType: "PageBlobAsyncClient.getPageRanges(BlobRange blobRange)"
  summary: "Returns the list of valid page ranges for a page blob or snapshot of a page blob."
  deprecatedTag: "Use <xref uid=\"com.azure.storage.blob.specialized.PageBlobAsyncClient.listPageRanges(com.azure.storage.blob.models.BlobRange)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#listPageRanges(BlobRange)\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "blobRange"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic Mono<PageList> getPageRanges(BlobRange blobRange)"
  desc: "Returns the list of valid page ranges for a page blob or snapshot of a page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n\n client.getPageRanges(blobRange).subscribe(response -> {\n     System.out.println(\"Valid Page Ranges are:\");\n     for (PageRange pageRange : response.getPageRange()) {\n         System.out.printf(\"Start: %s, End: %s%n\", pageRange.getStart(), pageRange.getEnd());\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  hasDeprecatedTag: true
  returns:
    description: "A reactive response containing the information of the cleared pages."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageList?alt=com.azure.storage.blob.models.PageList&text=PageList\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesDiff(com.azure.storage.blob.models.BlobRange,java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesDiff(BlobRange blobRange, String prevSnapshot)"
  name: "getPageRangesDiff(BlobRange blobRange, String prevSnapshot)"
  nameWithType: "PageBlobAsyncClient.getPageRangesDiff(BlobRange blobRange, String prevSnapshot)"
  summary: "Gets the collection of page ranges that differ between a specified snapshot and this page blob."
  deprecatedTag: "See <xref uid=\"com.azure.storage.blob.specialized.PageBlobAsyncClient.listPageRangesDiff(com.azure.storage.blob.models.BlobRange,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#listPageRangesDiff(BlobRange, String)\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "blobRange"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies that the response will contain only pages that were changed between target blob and\n previous snapshot. Changed pages include both updated and cleared pages. The target blob may be a snapshot, as\n long as the snapshot specified by prevsnapshot is the older of the two."
    name: "prevSnapshot"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic Mono<PageList> getPageRangesDiff(BlobRange blobRange, String prevSnapshot)"
  desc: "Gets the collection of page ranges that differ between a specified snapshot and this page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n final String prevSnapshot = \"previous snapshot\";\n\n client.getPageRangesDiff(blobRange, prevSnapshot).subscribe(response -> {\n     System.out.println(\"Valid Page Ranges are:\");\n     for (PageRange pageRange : response.getPageRange()) {\n         System.out.printf(\"Start: %s, End: %s%n\", pageRange.getStart(), pageRange.getEnd());\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  hasDeprecatedTag: true
  returns:
    description: "A reactive response emitting all the different page ranges."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageList?alt=com.azure.storage.blob.models.PageList&text=PageList\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesDiffWithResponse(com.azure.storage.blob.models.BlobRange,java.lang.String,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshot, BlobRequestConditions requestConditions)"
  name: "getPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshot, BlobRequestConditions requestConditions)"
  nameWithType: "PageBlobAsyncClient.getPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshot, BlobRequestConditions requestConditions)"
  summary: "Gets the collection of page ranges that differ between a specified snapshot and this page blob."
  deprecatedTag: "See <xref uid=\"com.azure.storage.blob.specialized.PageBlobAsyncClient.listPageRangesDiff(com.azure.storage.blob.options.ListPageRangesDiffOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#listPageRangesDiff(ListPageRangesDiffOptions)\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "blobRange"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies that the response will contain only pages that were changed between target blob and\n previous snapshot. Changed pages include both updated and cleared pages. The target blob may be a snapshot, as\n long as the snapshot specified by prevsnapshot is the older of the two."
    name: "prevSnapshot"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic Mono<Response<PageList>> getPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshot, BlobRequestConditions requestConditions)"
  desc: "Gets the collection of page ranges that differ between a specified snapshot and this page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n final String prevSnapshot = \"previous snapshot\";\n BlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n\n client.getPageRangesDiffWithResponse(blobRange, prevSnapshot, blobRequestConditions)\n     .subscribe(response -> {\n         System.out.println(\"Valid Page Ranges are:\");\n         for (PageRange pageRange : response.getValue().getPageRange()) {\n             System.out.printf(\"Start: %s, End: %s%n\", pageRange.getStart(), pageRange.getEnd());\n         }\n     });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  hasDeprecatedTag: true
  returns:
    description: "A reactive response emitting all the different page ranges."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageList?alt=com.azure.storage.blob.models.PageList&text=PageList\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesWithResponse(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.getPageRangesWithResponse(BlobRange blobRange, BlobRequestConditions requestConditions)"
  name: "getPageRangesWithResponse(BlobRange blobRange, BlobRequestConditions requestConditions)"
  nameWithType: "PageBlobAsyncClient.getPageRangesWithResponse(BlobRange blobRange, BlobRequestConditions requestConditions)"
  summary: "Returns the list of valid page ranges for a page blob or snapshot of a page blob."
  deprecatedTag: "Use <xref uid=\"com.azure.storage.blob.specialized.PageBlobAsyncClient.listPageRanges(com.azure.storage.blob.options.ListPageRangesOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#listPageRanges(ListPageRangesOptions)\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "blobRange"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic Mono<Response<PageList>> getPageRangesWithResponse(BlobRange blobRange, BlobRequestConditions requestConditions)"
  desc: "Returns the list of valid page ranges for a page blob or snapshot of a page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n BlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n\n client.getPageRangesWithResponse(blobRange, blobRequestConditions)\n     .subscribe(response -> {\n         System.out.println(\"Valid Page Ranges are:\");\n         for (PageRange pageRange : response.getValue().getPageRange()) {\n             System.out.printf(\"Start: %s, End: %s%n\", pageRange.getStart(), pageRange.getEnd());\n         }\n     });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  hasDeprecatedTag: true
  returns:
    description: "A reactive response emitting all the page ranges."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageList?alt=com.azure.storage.blob.models.PageList&text=PageList\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.listPageRanges(com.azure.storage.blob.models.BlobRange)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.listPageRanges(BlobRange blobRange)"
  name: "listPageRanges(BlobRange blobRange)"
  nameWithType: "PageBlobAsyncClient.listPageRanges(BlobRange blobRange)"
  summary: "Returns the list of valid page ranges for a page blob or snapshot of a page blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "blobRange"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<PageRangeItem> listPageRanges(BlobRange blobRange)"
  desc: "Returns the list of valid page ranges for a page blob or snapshot of a page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n\n System.out.println(\"Valid Page Ranges are:\");\n client.listPageRanges(blobRange).subscribe(rangeItem -> System.out.printf(\"Offset: %s, Length: %s%n\",\n     rangeItem.getRange().getOffset(), rangeItem.getRange().getLength()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  returns:
    description: "A reactive response containing the information of the cleared pages."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageRangeItem?alt=com.azure.storage.blob.models.PageRangeItem&text=PageRangeItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.listPageRanges(com.azure.storage.blob.options.ListPageRangesOptions)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.listPageRanges(ListPageRangesOptions options)"
  name: "listPageRanges(ListPageRangesOptions options)"
  nameWithType: "PageBlobAsyncClient.listPageRanges(ListPageRangesOptions options)"
  summary: "Returns the list of valid page ranges for a page blob or snapshot of a page blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.ListPageRangesOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ListPageRangesOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.ListPageRangesOptions?alt=com.azure.storage.blob.options.ListPageRangesOptions&text=ListPageRangesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<PageRangeItem> listPageRanges(ListPageRangesOptions options)"
  desc: "Returns the list of valid page ranges for a page blob or snapshot of a page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nListPageRangesOptions options = new ListPageRangesOptions(new BlobRange(offset))\n     .setMaxResultsPerPage(1000).setRequestConditions(new BlobRequestConditions().setLeaseId(leaseId));\n\n client.listPageRanges(options)\n     .subscribe(rangeItem -> System.out.printf(\"Offset: %s, Length: %s%n\", rangeItem.getRange().getOffset(),\n         rangeItem.getRange().getLength()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  returns:
    description: "A reactive response emitting all the page ranges."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageRangeItem?alt=com.azure.storage.blob.models.PageRangeItem&text=PageRangeItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.listPageRangesDiff(com.azure.storage.blob.models.BlobRange,java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.listPageRangesDiff(BlobRange blobRange, String prevSnapshot)"
  name: "listPageRangesDiff(BlobRange blobRange, String prevSnapshot)"
  nameWithType: "PageBlobAsyncClient.listPageRangesDiff(BlobRange blobRange, String prevSnapshot)"
  summary: "Gets the collection of page ranges that differ between a specified snapshot and this page blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "blobRange"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies that the response will contain only pages that were changed between target blob and\n previous snapshot. Changed pages include both updated and cleared pages. The target blob may be a snapshot, as\n long as the snapshot specified by prevsnapshot is the older of the two."
    name: "prevSnapshot"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<PageRangeItem> listPageRangesDiff(BlobRange blobRange, String prevSnapshot)"
  desc: "Gets the collection of page ranges that differ between a specified snapshot and this page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n String prevSnapshot = \"previous snapshot\";\n\n System.out.println(\"Valid Page Ranges are:\");\n client.listPageRangesDiff(blobRange, prevSnapshot).subscribe(rangeItem ->\n     System.out.printf(\"Offset: %s, Length: %s, isClear: %s%n\",\n     rangeItem.getRange().getOffset(), rangeItem.getRange().getLength(), rangeItem.isClear()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  returns:
    description: "A reactive response emitting all the different page ranges."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageRangeItem?alt=com.azure.storage.blob.models.PageRangeItem&text=PageRangeItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.listPageRangesDiff(com.azure.storage.blob.options.ListPageRangesDiffOptions)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.listPageRangesDiff(ListPageRangesDiffOptions options)"
  name: "listPageRangesDiff(ListPageRangesDiffOptions options)"
  nameWithType: "PageBlobAsyncClient.listPageRangesDiff(ListPageRangesDiffOptions options)"
  summary: "Gets the collection of page ranges that differ between a specified snapshot and this page blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.ListPageRangesDiffOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ListPageRangesDiffOptions\"></xref>."
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.ListPageRangesDiffOptions?alt=com.azure.storage.blob.options.ListPageRangesDiffOptions&text=ListPageRangesDiffOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<PageRangeItem> listPageRangesDiff(ListPageRangesDiffOptions options)"
  desc: "Gets the collection of page ranges that differ between a specified snapshot and this page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nListPageRangesDiffOptions options = new ListPageRangesDiffOptions(new BlobRange(offset), \"previous snapshot\")\n     .setRequestConditions(new BlobRequestConditions().setLeaseId(leaseId))\n     .setMaxResultsPerPage(1000);\n\n client.listPageRangesDiff(options)\n     .subscribe(rangeItem -> System.out.printf(\"Offset: %s, Length: %s, isClear: %s%n\",\n         rangeItem.getRange().getOffset(), rangeItem.getRange().getLength(), rangeItem.isClear()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  returns:
    description: "A reactive response emitting all the different page ranges."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageRangeItem?alt=com.azure.storage.blob.models.PageRangeItem&text=PageRangeItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.resize(long)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.resize(long size)"
  name: "resize(long size)"
  nameWithType: "PageBlobAsyncClient.resize(long size)"
  summary: "Resizes the page blob to the specified size (which must be a multiple of 512)."
  parameters:
  - description: "Resizes a page blob to the specified size. If the specified value is less than the current size of\n the blob, then all pages above the specified value are cleared."
    name: "size"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PageBlobItem> resize(long size)"
  desc: "Resizes the page blob to the specified size (which must be a multiple of 512). For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.resize(size).subscribe(response -> System.out.printf(\n     \"Page blob resized with sequence number %s%n\", response.getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-properties"
  returns:
    description: "A reactive response emitting the resized page blob."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.resizeWithResponse(long,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.resizeWithResponse(long size, BlobRequestConditions requestConditions)"
  name: "resizeWithResponse(long size, BlobRequestConditions requestConditions)"
  nameWithType: "PageBlobAsyncClient.resizeWithResponse(long size, BlobRequestConditions requestConditions)"
  summary: "Resizes the page blob to the specified size (which must be a multiple of 512)."
  parameters:
  - description: "Resizes a page blob to the specified size. If the specified value is less than the current size of\n the blob, then all pages above the specified value are cleared."
    name: "size"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<PageBlobItem>> resizeWithResponse(long size, BlobRequestConditions requestConditions)"
  desc: "Resizes the page blob to the specified size (which must be a multiple of 512). For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n\n client.resizeWithResponse(size, blobRequestConditions)\n     .subscribe(response -> System.out.printf(\n         \"Page blob resized with sequence number %s%n\", response.getValue().getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-properties"
  returns:
    description: "A reactive response emitting the resized page blob."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.updateSequenceNumber(com.azure.storage.blob.models.SequenceNumberActionType,java.lang.Long)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.updateSequenceNumber(SequenceNumberActionType action, Long sequenceNumber)"
  name: "updateSequenceNumber(SequenceNumberActionType action, Long sequenceNumber)"
  nameWithType: "PageBlobAsyncClient.updateSequenceNumber(SequenceNumberActionType action, Long sequenceNumber)"
  summary: "Sets the page blob's sequence number."
  parameters:
  - description: "Indicates how the service should modify the blob's sequence number."
    name: "action"
    type: "<xref href=\"com.azure.storage.blob.models.SequenceNumberActionType?alt=com.azure.storage.blob.models.SequenceNumberActionType&text=SequenceNumberActionType\" data-throw-if-not-resolved=\"False\" />"
  - description: "The blob's sequence number. The sequence number is a user-controlled property that you can\n use to track requests and manage concurrency issues."
    name: "sequenceNumber"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PageBlobItem> updateSequenceNumber(SequenceNumberActionType action, Long sequenceNumber)"
  desc: "Sets the page blob's sequence number. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.updateSequenceNumber(SequenceNumberActionType.INCREMENT, size)\n     .subscribe(response -> System.out.printf(\n         \"Page blob updated to sequence number %s%n\", response.getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-properties"
  returns:
    description: "A reactive response emitting the updated page blob."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.updateSequenceNumberWithResponse(com.azure.storage.blob.models.SequenceNumberActionType,java.lang.Long,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.updateSequenceNumberWithResponse(SequenceNumberActionType action, Long sequenceNumber, BlobRequestConditions requestConditions)"
  name: "updateSequenceNumberWithResponse(SequenceNumberActionType action, Long sequenceNumber, BlobRequestConditions requestConditions)"
  nameWithType: "PageBlobAsyncClient.updateSequenceNumberWithResponse(SequenceNumberActionType action, Long sequenceNumber, BlobRequestConditions requestConditions)"
  summary: "Sets the page blob's sequence number."
  parameters:
  - description: "Indicates how the service should modify the blob's sequence number."
    name: "action"
    type: "<xref href=\"com.azure.storage.blob.models.SequenceNumberActionType?alt=com.azure.storage.blob.models.SequenceNumberActionType&text=SequenceNumberActionType\" data-throw-if-not-resolved=\"False\" />"
  - description: "The blob's sequence number. The sequence number is a user-controlled property that you can\n use to track requests and manage concurrency issues."
    name: "sequenceNumber"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<PageBlobItem>> updateSequenceNumberWithResponse(SequenceNumberActionType action, Long sequenceNumber, BlobRequestConditions requestConditions)"
  desc: "Sets the page blob's sequence number. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n\n client.updateSequenceNumberWithResponse(SequenceNumberActionType.INCREMENT, size, blobRequestConditions)\n     .subscribe(response -> System.out.printf(\n         \"Page blob updated to sequence number %s%n\", response.getValue().getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-properties"
  returns:
    description: "A reactive response emitting the updated page blob."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPages(com.azure.storage.blob.models.PageRange,reactor.core.publisher.Flux<java.nio.ByteBuffer>)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPages(PageRange pageRange, Flux<ByteBuffer> body)"
  name: "uploadPages(PageRange pageRange, Flux<ByteBuffer> body)"
  nameWithType: "PageBlobAsyncClient.uploadPages(PageRange pageRange, Flux<ByteBuffer> body)"
  summary: "Writes one or more pages to the page blob."
  parameters:
  - description: "A <xref uid=\"com.azure.storage.blob.models.PageRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageRange\"></xref> object. Given that pages must be aligned with 512-byte boundaries, the start\n offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte ranges\n are 0-511, 512-1023, etc."
    name: "pageRange"
    type: "<xref href=\"com.azure.storage.blob.models.PageRange?alt=com.azure.storage.blob.models.PageRange&text=PageRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "The data to upload. Note that this <code>Flux</code> must be replayable if retries are enabled (the\n default). In other words, the Flowable must produce the same data each time it is subscribed to."
    name: "body"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<PageBlobItem> uploadPages(PageRange pageRange, Flux<ByteBuffer> body)"
  desc: "Writes one or more pages to the page blob. Write size must be a multiple of 512. For more information, see the [Azure Docs][].\n\nNote that the data passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code Samples**\n\n```java\nPageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n\n client.uploadPages(pageRange, body).subscribe(response -> System.out.printf(\n     \"Uploaded page blob with sequence number %s%n\", response.getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  returns:
    description: "A reactive response containing the information of the uploaded pages."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrl(com.azure.storage.blob.models.PageRange,java.lang.String,java.lang.Long)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrl(PageRange range, String sourceUrl, Long sourceOffset)"
  name: "uploadPagesFromUrl(PageRange range, String sourceUrl, Long sourceOffset)"
  nameWithType: "PageBlobAsyncClient.uploadPagesFromUrl(PageRange range, String sourceUrl, Long sourceOffset)"
  summary: "Writes one or more pages from the source page blob to this page blob."
  parameters:
  - description: "A <xref uid=\"com.azure.storage.blob.models.PageRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageRange\"></xref> object. Given that pages must be aligned with 512-byte boundaries, the start\n offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte ranges\n are 0-511, 512-1023, etc."
    name: "range"
    type: "<xref href=\"com.azure.storage.blob.models.PageRange?alt=com.azure.storage.blob.models.PageRange&text=PageRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "The url to the blob that will be the source of the copy.  A source blob in the same storage\n account can be authenticated via Shared Key. However, if the source is a blob in another account, the source blob\n must either be public or must be authenticated via a shared access signature. If the source blob is public, no\n authentication is required to perform the operation."
    name: "sourceUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The source offset to copy from.  Pass null or 0 to copy from the beginning of source page\n blob."
    name: "sourceOffset"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PageBlobItem> uploadPagesFromUrl(PageRange range, String sourceUrl, Long sourceOffset)"
  desc: "Writes one or more pages from the source page blob to this page blob. Write size must be a multiple of 512. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n\n client.uploadPagesFromUrl(pageRange, url, sourceOffset)\n     .subscribe(response -> System.out.printf(\n         \"Uploaded page blob from URL with sequence number %s%n\", response.getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  returns:
    description: "A reactive response containing the information of the uploaded pages."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrlWithResponse(com.azure.storage.blob.models.PageRange,java.lang.String,java.lang.Long,byte[],com.azure.storage.blob.models.PageBlobRequestConditions,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrlWithResponse(PageRange range, String sourceUrl, Long sourceOffset, byte[] sourceContentMd5, PageBlobRequestConditions destRequestConditions, BlobRequestConditions sourceRequestConditions)"
  name: "uploadPagesFromUrlWithResponse(PageRange range, String sourceUrl, Long sourceOffset, byte[] sourceContentMd5, PageBlobRequestConditions destRequestConditions, BlobRequestConditions sourceRequestConditions)"
  nameWithType: "PageBlobAsyncClient.uploadPagesFromUrlWithResponse(PageRange range, String sourceUrl, Long sourceOffset, byte[] sourceContentMd5, PageBlobRequestConditions destRequestConditions, BlobRequestConditions sourceRequestConditions)"
  summary: "Writes one or more pages from the source page blob to this page blob."
  parameters:
  - description: "The destination <xref uid=\"com.azure.storage.blob.models.PageRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageRange\"></xref> range. Given that pages must be aligned with 512-byte boundaries,\n the start offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte\n ranges are 0-511, 512-1023, etc."
    name: "range"
    type: "<xref href=\"com.azure.storage.blob.models.PageRange?alt=com.azure.storage.blob.models.PageRange&text=PageRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "The url to the blob that will be the source of the copy.  A source blob in the same storage\n account can be authenticated via Shared Key. However, if the source is a blob in another account, the source blob\n must either be public or must be authenticated via a shared access signature. If the source blob is public, no\n authentication is required to perform the operation."
    name: "sourceUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The source offset to copy from.  Pass null or 0 to copy from the beginning of source blob."
    name: "sourceOffset"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
  - description: "An MD5 hash of the page content. This hash is used to verify the integrity of the page\n during transport. When this header is specified, the storage service compares the hash of the content that has\n arrived with this header value. Note that this MD5 hash is not stored with the blob. If the two hashes do not\n match, the operation will fail."
    name: "sourceContentMd5"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "<xref uid=\"com.azure.storage.blob.models.PageBlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobRequestConditions\"></xref>"
    name: "destRequestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.PageBlobRequestConditions?alt=com.azure.storage.blob.models.PageBlobRequestConditions&text=PageBlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "sourceRequestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<PageBlobItem>> uploadPagesFromUrlWithResponse(PageRange range, String sourceUrl, Long sourceOffset, byte[] sourceContentMd5, PageBlobRequestConditions destRequestConditions, BlobRequestConditions sourceRequestConditions)"
  desc: "Writes one or more pages from the source page blob to this page blob. Write size must be a multiple of 512. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n InputStream dataStream = new ByteArrayInputStream(data.getBytes(StandardCharsets.UTF_8));\n byte[] sourceContentMD5 = new byte[512];\n PageBlobRequestConditions pageBlobRequestConditions = new PageBlobRequestConditions().setLeaseId(leaseId);\n BlobRequestConditions sourceRequestConditions = new BlobRequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n\n client.uploadPagesFromUrlWithResponse(pageRange, url, sourceOffset, sourceContentMD5, pageBlobRequestConditions,\n         sourceRequestConditions)\n     .subscribe(response -> System.out.printf(\n         \"Uploaded page blob from URL with sequence number %s%n\", response.getValue().getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  returns:
    description: "A reactive response containing the information of the uploaded pages."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrlWithResponse(com.azure.storage.blob.options.PageBlobUploadPagesFromUrlOptions)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrlWithResponse(PageBlobUploadPagesFromUrlOptions options)"
  name: "uploadPagesFromUrlWithResponse(PageBlobUploadPagesFromUrlOptions options)"
  nameWithType: "PageBlobAsyncClient.uploadPagesFromUrlWithResponse(PageBlobUploadPagesFromUrlOptions options)"
  summary: "Writes one or more pages from the source page blob to this page blob."
  parameters:
  - description: "Parameters for the operation."
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.PageBlobUploadPagesFromUrlOptions?alt=com.azure.storage.blob.options.PageBlobUploadPagesFromUrlOptions&text=PageBlobUploadPagesFromUrlOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<PageBlobItem>> uploadPagesFromUrlWithResponse(PageBlobUploadPagesFromUrlOptions options)"
  desc: "Writes one or more pages from the source page blob to this page blob. Write size must be a multiple of 512. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n InputStream dataStream = new ByteArrayInputStream(data.getBytes(StandardCharsets.UTF_8));\n byte[] sourceContentMD5 = new byte[512];\n PageBlobRequestConditions pageBlobRequestConditions = new PageBlobRequestConditions().setLeaseId(leaseId);\n BlobRequestConditions sourceRequestConditions = new BlobRequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n\n client.uploadPagesFromUrlWithResponse(new PageBlobUploadPagesFromUrlOptions(pageRange, url)\n     .setSourceOffset(sourceOffset).setSourceContentMd5(sourceContentMD5)\n     .setDestinationRequestConditions(pageBlobRequestConditions)\n     .setSourceRequestConditions(sourceRequestConditions))\n     .subscribe(response -> System.out.printf(\n         \"Uploaded page blob from URL with sequence number %s%n\", response.getValue().getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  returns:
    description: "A reactive response containing the information of the uploaded pages."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesWithResponse(com.azure.storage.blob.models.PageRange,reactor.core.publisher.Flux<java.nio.ByteBuffer>,byte[],com.azure.storage.blob.models.PageBlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesWithResponse(PageRange pageRange, Flux<ByteBuffer> body, byte[] contentMd5, PageBlobRequestConditions pageBlobRequestConditions)"
  name: "uploadPagesWithResponse(PageRange pageRange, Flux<ByteBuffer> body, byte[] contentMd5, PageBlobRequestConditions pageBlobRequestConditions)"
  nameWithType: "PageBlobAsyncClient.uploadPagesWithResponse(PageRange pageRange, Flux<ByteBuffer> body, byte[] contentMd5, PageBlobRequestConditions pageBlobRequestConditions)"
  summary: "Writes one or more pages to the page blob."
  parameters:
  - description: "A <xref uid=\"com.azure.storage.blob.models.PageRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageRange\"></xref> object. Given that pages must be aligned with 512-byte boundaries, the start\n offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte ranges\n are 0-511, 512-1023, etc."
    name: "pageRange"
    type: "<xref href=\"com.azure.storage.blob.models.PageRange?alt=com.azure.storage.blob.models.PageRange&text=PageRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "The data to upload. Note that this <code>Flux</code> must be replayable if retries are enabled (the\n default). In other words, the Flowable must produce the same data each time it is subscribed to."
    name: "body"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "An MD5 hash of the page content. This hash is used to verify the integrity of the page during\n transport. When this header is specified, the storage service compares the hash of the content that has arrived\n with this header value. Note that this MD5 hash is not stored with the blob. If the two hashes do not match, the\n operation will fail."
    name: "contentMd5"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "<xref uid=\"com.azure.storage.blob.models.PageBlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobRequestConditions\"></xref>"
    name: "pageBlobRequestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.PageBlobRequestConditions?alt=com.azure.storage.blob.models.PageBlobRequestConditions&text=PageBlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<PageBlobItem>> uploadPagesWithResponse(PageRange pageRange, Flux<ByteBuffer> body, byte[] contentMd5, PageBlobRequestConditions pageBlobRequestConditions)"
  desc: "Writes one or more pages to the page blob. Write size must be a multiple of 512. For more information, see the [Azure Docs][].\n\nNote that the data passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code Samples**\n\n```java\nPageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n\n byte[] md5 = MessageDigest.getInstance(\"MD5\").digest(\"data\".getBytes(StandardCharsets.UTF_8));\n PageBlobRequestConditions pageBlobRequestConditions = new PageBlobRequestConditions().setLeaseId(leaseId);\n\n client.uploadPagesWithResponse(pageRange, body, md5, pageBlobRequestConditions)\n     .subscribe(response -> System.out.printf(\n         \"Uploaded page blob with sequence number %s%n\", response.getValue().getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  returns:
    description: "A reactive response containing the information of the uploaded pages."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Client to a page blob. It may only be instantiated through a <xref uid=\"com.azure.storage.blob.specialized.SpecializedBlobClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SpecializedBlobClientBuilder\"></xref> or via the method <xref uid=\"com.azure.storage.blob.BlobAsyncClient.getPageBlobAsyncClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClient#getPageBlobAsyncClient()\"></xref>. This class does not hold any state about a particular blob, but is instead a convenient way of sending appropriate requests to the resource on the service.\n\nPlease refer to the [Azure Docs][] for more information.\n\nNote this client is an async client that returns reactive responses from Spring Reactor Core project (https://projectreactor.io/). Calling the methods in this client will **NOT** start the actual network operation, until `.subscribe()` is called on the reactive response. You can simply convert one of these responses to a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.concurrent.CompletableFuture\"></xref> object through <xref uid=\"reactor.core.publisher.Mono.toFuture*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono#toFuture()\"></xref>.\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs"
metadata: {}
package: "com.azure.storage.blob.specialized"
artifact: com.azure:azure-storage-blob:12.19.0
