### YamlMime:ManagedReference
items:
- uid: com.azure.ai.textanalytics.TextAnalyticsClient
  id: TextAnalyticsClient
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics
  children:
  - com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment(java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment(java.lang.String,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  - com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage(java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage(java.lang.String,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.DetectLanguageInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  - com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases(java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases(java.lang.String,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  - com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultCountryHint()
  - com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultLanguage()
  - com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntities(java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntities(java.lang.String,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  - com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities(java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities(java.lang.String,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  langs:
  - java
  name: TextAnalyticsClient
  nameWithType: TextAnalyticsClient
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient
  type: Class
  package: com.azure.ai.textanalytics
  summary: >-
    This class provides a synchronous client that contains all the operations that apply to Azure Text Analytics. Operations allowed by the client are language detection, entities recognition, linked entities recognition, key phrases extraction, and sentiment analysis of a document or a list of documents.


    **Instantiating a synchronous Text Analytics Client**


    ```java

    TextAnalyticsClient textAnalyticsClient = new TextAnalyticsClientBuilder()
         .credential(new AzureKeyCredential("{key}"))
         .endpoint("{endpoint}")
         .buildClient();
    ```


    View <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder" data-throw-if-not-resolved="false">this</xref> for additional ways to construct the client.
  syntax:
    content: public final class TextAnalyticsClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.TextAnalyticsClient(com.azure.ai.textanalytics.TextAnalyticsAsyncClient)
  id: TextAnalyticsClient(com.azure.ai.textanalytics.TextAnalyticsAsyncClient)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: TextAnalyticsClient(TextAnalyticsAsyncClient client)
  nameWithType: TextAnalyticsClient.TextAnalyticsClient(TextAnalyticsAsyncClient client)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.TextAnalyticsClient(TextAnalyticsAsyncClient client)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.TextAnalyticsClient*
  type: Constructor
  package: com.azure.ai.textanalytics
  summary: Create a `TextAnalyticsClient client` that sends requests to the Text Analytics service's endpoint. Each service call goes through the <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder.pipeline*" data-throw-if-not-resolved="false">http pipeline</xref>.
  syntax:
    content: " TextAnalyticsClient(TextAnalyticsAsyncClient client)"
    parameters:
    - id: client
      type: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
      description: The <xref uid="com.azure.ai.textanalytics.TextAnalyticsClient" data-throw-if-not-resolved="false">TextAnalyticsClient</xref> that the client routes its request through.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment(java.lang.String)
  id: analyzeSentiment(java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: analyzeSentiment(String document)
  nameWithType: TextAnalyticsClient.analyzeSentiment(String document)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment(String document)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within i This method will use the default language that sets up in <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)\" data-throw-if-not-resolved=\"false\">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.\n\n**Code Sample**\n\nAnalyze the sentiments of documents\n\n```java\nfinal DocumentSentiment documentSentiment =\n     textAnalyticsClient.analyzeSentiment(\"The hotel was dark and unclean.\");\n \n System.out.printf(\n     \"Recognized sentiment: %s, positive score: %.2f, neutral score: %.2f, negative score: %.2f.%n\",\n     documentSentiment.getSentiment(),\n     documentSentiment.getConfidenceScores().getPositive(),\n     documentSentiment.getConfidenceScores().getNeutral(),\n     documentSentiment.getConfidenceScores().getNegative());\n \n for (SentenceSentiment sentenceSentiment : documentSentiment.getSentences()) {\n     System.out.printf(\n         \"Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f, negative score: %.2f.%n\",\n         sentenceSentiment.getSentiment(),\n         sentenceSentiment.getConfidenceScores().getPositive(),\n         sentenceSentiment.getConfidenceScores().getNeutral(),\n         sentenceSentiment.getConfidenceScores().getNegative());\n }\n```"
  syntax:
    content: public DocumentSentiment analyzeSentiment(String document)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.models.DocumentSentiment
      description: A <xref uid="com.azure.ai.textanalytics.models.DocumentSentiment" data-throw-if-not-resolved="false">analyzed document sentiment</xref> of the document.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment(java.lang.String,java.lang.String)
  id: analyzeSentiment(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: analyzeSentiment(String document, String language)
  nameWithType: TextAnalyticsClient.analyzeSentiment(String document, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment(String document, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within i\n\n**Code Sample**\n\nAnalyze the sentiments in a document with a provided language representation.\n\n```java\nfinal DocumentSentiment documentSentiment = textAnalyticsClient.analyzeSentiment(\n     \"The hotel was dark and unclean.\", \"en\");\n \n System.out.printf(\n     \"Recognized sentiment: %s, positive score: %.2f, neutral score: %.2f, negative score: %.2f.%n\",\n     documentSentiment.getSentiment(),\n     documentSentiment.getConfidenceScores().getPositive(),\n     documentSentiment.getConfidenceScores().getNeutral(),\n     documentSentiment.getConfidenceScores().getNegative());\n \n for (SentenceSentiment sentenceSentiment : documentSentiment.getSentences()) {\n     System.out.printf(\n         \"Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f, negative score: %.2f.%n\",\n         sentenceSentiment.getSentiment(),\n         sentenceSentiment.getConfidenceScores().getPositive(),\n         sentenceSentiment.getConfidenceScores().getNeutral(),\n         sentenceSentiment.getConfidenceScores().getNegative());\n }\n```"
  syntax:
    content: public DocumentSentiment analyzeSentiment(String document, String language)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the document. If not set, uses "en" for
         English as default.
    return:
      type: com.azure.ai.textanalytics.models.DocumentSentiment
      description: A <xref uid="com.azure.ai.textanalytics.models.DocumentSentiment" data-throw-if-not-resolved="false">analyzed document sentiment</xref> of the document.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsClient.analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within it.\n\n**Code Sample**\n\nAnalyze the sentiments in a list of documents with a provided language representation and request options.\n\n```java\nList<String> documents = Arrays.asList(\n     \"The hotel was dark and unclean. The restaurant had amazing gnocchi.\",\n     \"The restaurant had amazing gnocchi. The hotel was dark and unclean.\"\n );\n \n // Analyzing batch sentiments\n AnalyzeSentimentResultCollection resultCollection =\n     textAnalyticsClient.analyzeSentimentBatch(documents, \"en\", null);\n \n // Batch statistics\n TextDocumentBatchStatistics batchStatistics = resultCollection.getStatistics();\n System.out.printf(\"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n     batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n // Analyzed sentiment for each of documents from a batch of documents\n resultCollection.forEach(analyzeSentimentResult -> {\n     System.out.printf(\"Document ID: %s%n\", analyzeSentimentResult.getId());\n     // Valid document\n     DocumentSentiment documentSentiment = analyzeSentimentResult.getDocumentSentiment();\n     System.out.printf(\n         \"Recognized document sentiment: %s, positive score: %.2f, neutral score: %.2f,\"\n             + \" negative score: %.2f.%n\",\n         documentSentiment.getSentiment(),\n         documentSentiment.getConfidenceScores().getPositive(),\n         documentSentiment.getConfidenceScores().getNeutral(),\n         documentSentiment.getConfidenceScores().getNegative());\n     documentSentiment.getSentences().forEach(sentenceSentiment -> System.out.printf(\n         \"Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f,\"\n             + \" negative score: %.2f.%n\",\n         sentenceSentiment.getSentiment(),\n         sentenceSentiment.getConfidenceScores().getPositive(),\n         sentenceSentiment.getConfidenceScores().getNeutral(),\n         sentenceSentiment.getConfidenceScores().getNegative()));\n });\n```"
  syntax:
    content: public AnalyzeSentimentResultCollection analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the documents. If not set, uses "en" for
         English as default.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection
      description: A <xref uid="com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection" data-throw-if-not-resolved="false">AnalyzeSentimentResultCollection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  id: analyzeSentimentBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: analyzeSentimentBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  nameWithType: TextAnalyticsClient.analyzeSentimentBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatchWithResponse*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within it.\n\n**Code Sample**\n\nAnalyze the sentiments with http response in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">documents</xref> with request options.\n\n```java\nList<TextDocumentInput> textDocumentInputs = Arrays.asList(\n     new TextDocumentInput(\"1\", \"The hotel was dark and unclean. The restaurant had amazing gnocchi.\")\n         .setLanguage(\"en\"),\n     new TextDocumentInput(\"2\", \"The restaurant had amazing gnocchi. The hotel was dark and unclean.\")\n         .setLanguage(\"en\")\n );\n \n // Analyzing batch sentiments\n Response<AnalyzeSentimentResultCollection> response =\n     textAnalyticsClient.analyzeSentimentBatchWithResponse(textDocumentInputs,\n         new TextAnalyticsRequestOptions().setIncludeStatistics(true), Context.NONE);\n \n // Response's status code\n System.out.printf(\"Status code of request response: %d%n\", response.getStatusCode());\n AnalyzeSentimentResultCollection resultCollection = response.getValue();\n \n // Batch statistics\n TextDocumentBatchStatistics batchStatistics = resultCollection.getStatistics();\n System.out.printf(\"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n     batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n // Analyzed sentiment for each of documents from a batch of documents\n resultCollection.forEach(analyzeSentimentResult -> {\n     System.out.printf(\"Document ID: %s%n\", analyzeSentimentResult.getId());\n     // Valid document\n     DocumentSentiment documentSentiment = analyzeSentimentResult.getDocumentSentiment();\n     System.out.printf(\n         \"Recognized document sentiment: %s, positive score: %.2f, neutral score: %.2f, \"\n             + \"negative score: %.2f.%n\",\n         documentSentiment.getSentiment(),\n         documentSentiment.getConfidenceScores().getPositive(),\n         documentSentiment.getConfidenceScores().getNeutral(),\n         documentSentiment.getConfidenceScores().getNegative());\n     documentSentiment.getSentences().forEach(sentenceSentiment -> {\n         System.out.printf(\n             \"Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f,\"\n                 + \" negative score: %.2f.%n\",\n             sentenceSentiment.getSentiment(),\n             sentenceSentiment.getConfidenceScores().getPositive(),\n             sentenceSentiment.getConfidenceScores().getNeutral(),\n             sentenceSentiment.getConfidenceScores().getNegative());\n     });\n });\n```"
  syntax:
    content: public Response<AnalyzeSentimentResultCollection> analyzeSentimentBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
    parameters:
    - id: documents
      type: java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>
      description: >-
        A list of <xref uid="com.azure.ai.textanalytics.models.TextDocumentInput" data-throw-if-not-resolved="false">documents</xref> to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> that contains a <xref uid="com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection" data-throw-if-not-resolved="false">AnalyzeSentimentResultCollection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage(java.lang.String)
  id: detectLanguage(java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: detectLanguage(String document)
  nameWithType: TextAnalyticsClient.detectLanguage(String document)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage(String document)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns the detected language and a confidence score between zero and one. Scores close to one indicate 100% certainty that the identified language is true. This method will use the default country hint that sets up in <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultCountryHint(java.lang.String)" data-throw-if-not-resolved="false">TextAnalyticsClientBuilder#defaultCountryHint(String)</xref>. If none is specified, service will use 'US' as the country hint.


    **Code Sample**


    Detects the language of single document.


    ```java

    DetectedLanguage detectedLanguage = textAnalyticsClient.detectLanguage("Bonjour tout le monde");
     System.out.printf("Detected language name: %s, ISO 6391 name: %s, confidence score: %f.%n",
         detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getConfidenceScore());
    ```
  syntax:
    content: public DetectedLanguage detectLanguage(String document)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.models.DetectedLanguage
      description: The <xref uid="com.azure.ai.textanalytics.models.DetectedLanguage" data-throw-if-not-resolved="false">detected language</xref> of the document.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage(java.lang.String,java.lang.String)
  id: detectLanguage(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: detectLanguage(String document, String countryHint)
  nameWithType: TextAnalyticsClient.detectLanguage(String document, String countryHint)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage(String document, String countryHint)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns the detected language and a confidence score between zero and one. Scores close to one indicate 100% certainty that the identified language is true.


    **Code Sample**


    Detects the language of documents with a provided country hint.


    ```java

    DetectedLanguage detectedLanguage = textAnalyticsClient.detectLanguage(
         "This text is in English", "US");
     System.out.printf("Detected language name: %s, ISO 6391 name: %s, confidence score: %f.%n",
         detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getConfidenceScore());
    ```
  syntax:
    content: public DetectedLanguage detectLanguage(String document, String countryHint)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: countryHint
      type: java.lang.String
      description: >-
        Accepts two letter country codes specified by ISO 3166-1 alpha-2. Defaults to "US" if not
         specified. To remove this behavior you can reset this parameter by setting this value to empty string
         <code>countryHint</code> = "" or "none".
    return:
      type: com.azure.ai.textanalytics.models.DetectedLanguage
      description: The <xref uid="com.azure.ai.textanalytics.models.DetectedLanguage" data-throw-if-not-resolved="false">detected language</xref> of the document.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: detectLanguageBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: detectLanguageBatch(Iterable<String> documents, String countryHint, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsClient.detectLanguageBatch(Iterable<String> documents, String countryHint, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch(Iterable<String> documents, String countryHint, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Detects Language for a batch of document with the provided country hint and request options.\n\n**Code Sample**\n\nDetects the language in a list of documents with a provided country hint and request options.\n\n```java\nList<String> documents = Arrays.asList(\n     \"This is written in English\",\n     \"Este es un documento  escrito en Espa�ol.\"\n );\n \n DetectLanguageResultCollection resultCollection =\n     textAnalyticsClient.detectLanguageBatch(documents, \"US\", null);\n \n // Batch statistics\n TextDocumentBatchStatistics batchStatistics = resultCollection.getStatistics();\n System.out.printf(\"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n     batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n // Batch result of languages\n resultCollection.forEach(detectLanguageResult -> {\n     System.out.printf(\"Document ID: %s%n\", detectLanguageResult.getId());\n     DetectedLanguage detectedLanguage = detectLanguageResult.getPrimaryLanguage();\n     System.out.printf(\"Primary language name: %s, ISO 6391 name: %s, confidence score: %f.%n\",\n         detectedLanguage.getName(), detectedLanguage.getIso6391Name(),\n         detectedLanguage.getConfidenceScore());\n });\n```"
  syntax:
    content: public DetectLanguageResultCollection detectLanguageBatch(Iterable<String> documents, String countryHint, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        The list of documents to detect languages for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: countryHint
      type: java.lang.String
      description: >-
        Accepts two letter country codes specified by ISO 3166-1 alpha-2. Defaults to "US" if not
         specified. To remove this behavior you can reset this parameter by setting this value to empty string
         <code>countryHint</code> = "" or "none".
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: com.azure.ai.textanalytics.util.DetectLanguageResultCollection
      description: A <xref uid="com.azure.ai.textanalytics.util.DetectLanguageResultCollection" data-throw-if-not-resolved="false">DetectLanguageResultCollection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.DetectLanguageInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  id: detectLanguageBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.DetectLanguageInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: detectLanguageBatchWithResponse(Iterable<DetectLanguageInput> documents, TextAnalyticsRequestOptions options, Context context)
  nameWithType: TextAnalyticsClient.detectLanguageBatchWithResponse(Iterable<DetectLanguageInput> documents, TextAnalyticsRequestOptions options, Context context)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatchWithResponse(Iterable<DetectLanguageInput> documents, TextAnalyticsRequestOptions options, Context context)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatchWithResponse*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Detects Language for a batch of <xref uid=\"com.azure.ai.textanalytics.models.DetectLanguageInput\" data-throw-if-not-resolved=\"false\">document</xref> with provided request options.\n\n**Code Sample**\n\nDetects the languages with http response in a list of <xref uid=\"com.azure.ai.textanalytics.models.DetectLanguageInput\" data-throw-if-not-resolved=\"false\">document</xref> with provided request options.\n\n```java\nList<DetectLanguageInput> detectLanguageInputs = Arrays.asList(\n     new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n     new DetectLanguageInput(\"2\", \"Este es un documento  escrito en Espa�ol.\", \"es\")\n );\n \n Response<DetectLanguageResultCollection> response =\n     textAnalyticsClient.detectLanguageBatchWithResponse(detectLanguageInputs,\n     new TextAnalyticsRequestOptions().setIncludeStatistics(true), Context.NONE);\n \n // Response's status code\n System.out.printf(\"Status code of request response: %d%n\", response.getStatusCode());\n DetectLanguageResultCollection detectedLanguageResultCollection = response.getValue();\n \n // Batch statistics\n TextDocumentBatchStatistics batchStatistics = detectedLanguageResultCollection.getStatistics();\n System.out.printf(\n     \"Documents statistics: document count = %s, erroneous document count = %s, transaction count = %s,\"\n         + \" valid document count = %s.%n\",\n     batchStatistics.getDocumentCount(), batchStatistics.getInvalidDocumentCount(),\n     batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n // Batch result of languages\n detectedLanguageResultCollection.forEach(detectLanguageResult -> {\n     System.out.printf(\"Document ID: %s%n\", detectLanguageResult.getId());\n     DetectedLanguage detectedLanguage = detectLanguageResult.getPrimaryLanguage();\n     System.out.printf(\"Primary language name: %s, ISO 6391 name: %s, confidence score: %f.%n\",\n         detectedLanguage.getName(), detectedLanguage.getIso6391Name(),\n         detectedLanguage.getConfidenceScore());\n });\n```"
  syntax:
    content: public Response<DetectLanguageResultCollection> detectLanguageBatchWithResponse(Iterable<DetectLanguageInput> documents, TextAnalyticsRequestOptions options, Context context)
    parameters:
    - id: documents
      type: java.lang.Iterable<com.azure.ai.textanalytics.models.DetectLanguageInput>
      description: >-
        The list of <xref uid="com.azure.ai.textanalytics.models.DetectLanguageInput" data-throw-if-not-resolved="false">documents</xref> to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.ai.textanalytics.util.DetectLanguageResultCollection>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> that contains a <xref uid="com.azure.ai.textanalytics.util.DetectLanguageResultCollection" data-throw-if-not-resolved="false">DetectLanguageResultCollection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases(java.lang.String)
  id: extractKeyPhrases(java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: extractKeyPhrases(String document)
  nameWithType: TextAnalyticsClient.extractKeyPhrases(String document)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases(String document)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of strings denoting the key phrases in the document. This method will use the default language that sets up in <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)" data-throw-if-not-resolved="false">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.


    **Code Sample**


    Extracts key phrases of documents


    ```java

    System.out.println("Extracted phrases:");
     for (String keyPhrase : textAnalyticsClient.extractKeyPhrases("My cat might need to see a veterinarian.")) {
         System.out.printf("%s.%n", keyPhrase);
     }
    ```
  syntax:
    content: public KeyPhrasesCollection extractKeyPhrases(String document)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.models.KeyPhrasesCollection
      description: A <xref uid="com.azure.ai.textanalytics.models.KeyPhrasesCollection" data-throw-if-not-resolved="false">KeyPhrasesCollection</xref> contains a list of extracted key phrases.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases(java.lang.String,java.lang.String)
  id: extractKeyPhrases(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: extractKeyPhrases(String document, String language)
  nameWithType: TextAnalyticsClient.extractKeyPhrases(String document, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases(String document, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of strings denoting the key phrases in the document. See [this][] for the list of enabled languages.


    **Code Sample**


    Extracts key phrases in a document with a provided language representation.


    ```java

    System.out.println("Extracted phrases:");
     textAnalyticsClient.extractKeyPhrases("My cat might need to see a veterinarian.", "en")
         .forEach(kegPhrase -> System.out.printf("%s.%n", kegPhrase));
    ```



    [this]: https://aka.ms/talangs
  syntax:
    content: public KeyPhrasesCollection extractKeyPhrases(String document, String language)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the document. If not set, uses "en" for
         English as default.
    return:
      type: com.azure.ai.textanalytics.models.KeyPhrasesCollection
      description: A <xref uid="com.azure.ai.textanalytics.models.KeyPhrasesCollection" data-throw-if-not-resolved="false">KeyPhrasesCollection</xref> contains a list of extracted key phrases.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: extractKeyPhrasesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsClient.extractKeyPhrasesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of strings denoting the key phrases in the documents with provided language code and request options. See [this][] for the list of enabled languages.\n\n**Code Sample**\n\nExtracts key phrases in a list of documents with a provided language code and request options.\n\n```java\nList<String> documents = Arrays.asList(\n     \"My cat might need to see a veterinarian.\",\n     \"The pitot tube is used to measure airspeed.\"\n );\n \n // Extracting batch key phrases\n ExtractKeyPhrasesResultCollection resultCollection =\n     textAnalyticsClient.extractKeyPhrasesBatch(documents, \"en\", null);\n \n // Batch statistics\n TextDocumentBatchStatistics batchStatistics = resultCollection.getStatistics();\n System.out.printf(\n     \"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n     batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n // Extracted key phrase for each of documents from a batch of documents\n resultCollection.forEach(extractKeyPhraseResult -> {\n     System.out.printf(\"Document ID: %s%n\", extractKeyPhraseResult.getId());\n     // Valid document\n     System.out.println(\"Extracted phrases:\");\n     extractKeyPhraseResult.getKeyPhrases().forEach(keyPhrase -> System.out.printf(\"%s.%n\", keyPhrase));\n });\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public ExtractKeyPhrasesResultCollection extractKeyPhrasesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the documents. If not set, uses "en" for
         English as default.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: com.azure.ai.textanalytics.util.ExtractKeyPhrasesResultCollection
      description: A <xref uid="com.azure.ai.textanalytics.util.ExtractKeyPhrasesResultCollection" data-throw-if-not-resolved="false">ExtractKeyPhrasesResultCollection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  id: extractKeyPhrasesBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: extractKeyPhrasesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  nameWithType: TextAnalyticsClient.extractKeyPhrasesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatchWithResponse*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of strings denoting the key phrases in the a batch of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">document</xref> with request options. See [this][] for the list of enabled languages.\n\n**Code Sample**\n\nExtracts key phrases with http response in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">TextDocumentInput</xref> with request options.\n\n```java\nList<TextDocumentInput> textDocumentInputs = Arrays.asList(\n     new TextDocumentInput(\"1\", \"My cat might need to see a veterinarian.\").setLanguage(\"en\"),\n     new TextDocumentInput(\"2\", \"The pitot tube is used to measure airspeed.\").setLanguage(\"en\")\n );\n \n // Extracting batch key phrases\n Response<ExtractKeyPhrasesResultCollection> response =\n     textAnalyticsClient.extractKeyPhrasesBatchWithResponse(textDocumentInputs,\n         new TextAnalyticsRequestOptions().setIncludeStatistics(true), Context.NONE);\n \n \n // Response's status code\n System.out.printf(\"Status code of request response: %d%n\", response.getStatusCode());\n ExtractKeyPhrasesResultCollection resultCollection = response.getValue();\n \n // Batch statistics\n TextDocumentBatchStatistics batchStatistics = resultCollection.getStatistics();\n System.out.printf(\n     \"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n     batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n // Extracted key phrase for each of documents from a batch of documents\n resultCollection.forEach(extractKeyPhraseResult -> {\n     System.out.printf(\"Document ID: %s%n\", extractKeyPhraseResult.getId());\n     // Valid document\n     System.out.println(\"Extracted phrases:\");\n     extractKeyPhraseResult.getKeyPhrases().forEach(keyPhrase ->\n         System.out.printf(\"%s.%n\", keyPhrase));\n });\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public Response<ExtractKeyPhrasesResultCollection> extractKeyPhrasesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
    parameters:
    - id: documents
      type: java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>
      description: >-
        A list of <xref uid="com.azure.ai.textanalytics.models.TextDocumentInput" data-throw-if-not-resolved="false">documents</xref> to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.ai.textanalytics.util.ExtractKeyPhrasesResultCollection>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> that contains a <xref uid="com.azure.ai.textanalytics.util.ExtractKeyPhrasesResultCollection" data-throw-if-not-resolved="false">ExtractKeyPhrasesResultCollection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultCountryHint()
  id: getDefaultCountryHint()
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: getDefaultCountryHint()
  nameWithType: TextAnalyticsClient.getDefaultCountryHint()
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultCountryHint()
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultCountryHint*
  type: Method
  package: com.azure.ai.textanalytics
  summary: Get default country hint code.
  syntax:
    content: public String getDefaultCountryHint()
    return:
      type: java.lang.String
      description: The default country hint code
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultLanguage()
  id: getDefaultLanguage()
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: getDefaultLanguage()
  nameWithType: TextAnalyticsClient.getDefaultLanguage()
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultLanguage()
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultLanguage*
  type: Method
  package: com.azure.ai.textanalytics
  summary: Get default language when the builder is setup.
  syntax:
    content: public String getDefaultLanguage()
    return:
      type: java.lang.String
      description: The default language
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntities(java.lang.String)
  id: recognizeEntities(java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: recognizeEntities(String document)
  nameWithType: TextAnalyticsClient.recognizeEntities(String document)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntities(String document)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntities*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of general categorized entities in the provided document. For a list of supported entity types, check: [this][] This method will use the default language that sets up in <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)" data-throw-if-not-resolved="false">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.


    **Code Sample**


    Recognize the entities of documents


    ```java

    final CategorizedEntityCollection recognizeEntitiesResult =
         textAnalyticsClient.recognizeEntities("Satya Nadella is the CEO of Microsoft");
     for (CategorizedEntity entity : recognizeEntitiesResult) {
         System.out.printf("Recognized entity: %s, entity category: %s, confidence score: %f.%n",
             entity.getText(), entity.getCategory(), entity.getConfidenceScore());
     }
    ```



    [this]: https://aka.ms/taner
  syntax:
    content: public CategorizedEntityCollection recognizeEntities(String document)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        the document to recognize entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.models.CategorizedEntityCollection
      description: >-
        A <xref uid="com.azure.ai.textanalytics.models.CategorizedEntityCollection" data-throw-if-not-resolved="false">CategorizedEntityCollection</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.CategorizedEntity" data-throw-if-not-resolved="false">recognized categorized entities</xref> and warnings.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntities(java.lang.String,java.lang.String)
  id: recognizeEntities(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: recognizeEntities(String document, String language)
  nameWithType: TextAnalyticsClient.recognizeEntities(String document, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntities(String document, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntities*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of general categorized entities in the provided document with provided language code. For a list of supported entity types, check: [this][] For a list of enabled languages, check: [this][this 1]\n\n**Code Sample**\n\nRecognizes the entities in a document with a provided language code.\n\n```java\nfinal CategorizedEntityCollection recognizeEntitiesResult =\n     textAnalyticsClient.recognizeEntities(\"Satya Nadella is the CEO of Microsoft\", \"en\");\n \n for (CategorizedEntity entity : recognizeEntitiesResult) {\n     System.out.printf(\"Recognized entity: %s, entity category: %s, confidence score: %f.%n\",\n         entity.getText(), entity.getCategory(), entity.getConfidenceScore());\n }\n```\n\n\n[this]: https://aka.ms/taner\n[this 1]: https://aka.ms/talangs"
  syntax:
    content: public CategorizedEntityCollection recognizeEntities(String document, String language)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to recognize entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: The 2 letter ISO 639-1 representation of language. If not set, uses "en" for English as default.
    return:
      type: com.azure.ai.textanalytics.models.CategorizedEntityCollection
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.CategorizedEntityCollection" data-throw-if-not-resolved="false">CategorizedEntityCollection</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.CategorizedEntity" data-throw-if-not-resolved="false">recognized categorized entities</xref> and warnings.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: recognizeEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsClient.recognizeEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of general categorized entities for the provided list of documents with provided language code and request options.\n\n**Code Sample**\n\nRecognizes the entities in a list of documents with a provided language code and request options.\n\n```java\nList<String> documents = Arrays.asList(\n     \"I had a wonderful trip to Seattle last week.\",\n     \"I work at Microsoft.\");\n \n RecognizeEntitiesResultCollection resultCollection =\n     textAnalyticsClient.recognizeEntitiesBatch(documents, \"en\", null);\n \n // Batch statistics\n TextDocumentBatchStatistics batchStatistics = resultCollection.getStatistics();\n System.out.printf(\n     \"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n     batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n resultCollection.forEach(recognizeEntitiesResult ->\n     recognizeEntitiesResult.getEntities().forEach(entity ->\n         System.out.printf(\"Recognized entity: %s, entity category: %s, confidence score: %f.%n\",\n             entity.getText(), entity.getCategory(), entity.getConfidenceScore())));\n```"
  syntax:
    content: public RecognizeEntitiesResultCollection recognizeEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to recognize entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: The 2 letter ISO 639-1 representation of language. If not set, uses "en" for English as default.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: com.azure.ai.textanalytics.util.RecognizeEntitiesResultCollection
      description: A <xref uid="com.azure.ai.textanalytics.util.RecognizeEntitiesResultCollection" data-throw-if-not-resolved="false">RecognizeEntitiesResultCollection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  id: recognizeEntitiesBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: recognizeEntitiesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  nameWithType: TextAnalyticsClient.recognizeEntitiesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatchWithResponse*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of general categorized entities for the provided list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">document</xref> with provided request options.\n\n**Code Sample**\n\nRecognizes the entities with http response in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">document</xref> with provided request options.\n\n```java\nList<TextDocumentInput> textDocumentInputs = Arrays.asList(\n     new TextDocumentInput(\"0\", \"I had a wonderful trip to Seattle last week.\").setLanguage(\"en\"),\n     new TextDocumentInput(\"1\", \"I work at Microsoft.\").setLanguage(\"en\")\n );\n \n Response<RecognizeEntitiesResultCollection> response =\n     textAnalyticsClient.recognizeEntitiesBatchWithResponse(textDocumentInputs,\n         new TextAnalyticsRequestOptions().setIncludeStatistics(true), Context.NONE);\n \n // Response's status code\n System.out.printf(\"Status code of request response: %d%n\", response.getStatusCode());\n RecognizeEntitiesResultCollection recognizeEntitiesResultCollection = response.getValue();\n \n // Batch statistics\n TextDocumentBatchStatistics batchStatistics = recognizeEntitiesResultCollection.getStatistics();\n System.out.printf(\n     \"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n     batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n recognizeEntitiesResultCollection.forEach(recognizeEntitiesResult ->\n     recognizeEntitiesResult.getEntities().forEach(entity ->\n         System.out.printf(\"Recognized entity: %s, entity category: %s, confidence score: %f.%n\",\n             entity.getText(), entity.getCategory(), entity.getConfidenceScore())));\n```"
  syntax:
    content: public Response<RecognizeEntitiesResultCollection> recognizeEntitiesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
    parameters:
    - id: documents
      type: java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>
      description: >-
        A list of <xref uid="com.azure.ai.textanalytics.models.TextDocumentInput" data-throw-if-not-resolved="false">documents</xref> to recognize entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.ai.textanalytics.util.RecognizeEntitiesResultCollection>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> that contains a <xref uid="com.azure.ai.textanalytics.util.RecognizeEntitiesResultCollection" data-throw-if-not-resolved="false">RecognizeEntitiesResultCollection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities(java.lang.String)
  id: recognizeLinkedEntities(java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: recognizeLinkedEntities(String document)
  nameWithType: TextAnalyticsClient.recognizeLinkedEntities(String document)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities(String document)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of recognized entities with links to a well-known knowledge base for the provided document. See [this][] for supported languages in Text Analytics API. This method will use the default language that sets up in <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)" data-throw-if-not-resolved="false">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.


    **Code Sample**


    Recognize the linked entities of documents


    ```java

    final String document = "Old Faithful is a geyser at Yellowstone Park.";
     System.out.println("Linked Entities:");
     textAnalyticsClient.recognizeLinkedEntities(document).forEach(linkedEntity -> {
         System.out.printf("Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n",
             linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(),
             linkedEntity.getDataSource());
         linkedEntity.getMatches().forEach(entityMatch -> System.out.printf(
             "Matched entity: %s, confidence score: %f.%n",
             entityMatch.getText(), entityMatch.getConfidenceScore()));
     });
    ```



    [this]: https://aka.ms/talangs
  syntax:
    content: public LinkedEntityCollection recognizeLinkedEntities(String document)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        the document to recognize linked entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.models.LinkedEntityCollection
      description: A <xref uid="com.azure.ai.textanalytics.models.LinkedEntityCollection" data-throw-if-not-resolved="false">LinkedEntityCollection</xref> contains a list of <xref uid="com.azure.ai.textanalytics.models.LinkedEntity" data-throw-if-not-resolved="false">recognized linked entities</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities(java.lang.String,java.lang.String)
  id: recognizeLinkedEntities(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: recognizeLinkedEntities(String document, String language)
  nameWithType: TextAnalyticsClient.recognizeLinkedEntities(String document, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities(String document, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of recognized entities with links to a well-known knowledge base for the provided document with language code. See [this][] for supported languages in Text Analytics API.


    **Code Sample**


    Recognizes the linked entities in a document with a provided language code.


    ```java

    String document = "Old Faithful is a geyser at Yellowstone Park.";
     textAnalyticsClient.recognizeLinkedEntities(document, "en").forEach(linkedEntity -> {
         System.out.printf("Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n",
             linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(),
             linkedEntity.getDataSource());
         linkedEntity.getMatches().forEach(entityMatch -> System.out.printf(
             "Matched entity: %s, confidence score: %f.%n",
             entityMatch.getText(), entityMatch.getConfidenceScore()));
     });
    ```



    [this]: https://aka.ms/talangs
  syntax:
    content: public LinkedEntityCollection recognizeLinkedEntities(String document, String language)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to recognize linked entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the document. If not set, uses "en" for
         English as default.
    return:
      type: com.azure.ai.textanalytics.models.LinkedEntityCollection
      description: A <xref uid="com.azure.ai.textanalytics.models.LinkedEntityCollection" data-throw-if-not-resolved="false">LinkedEntityCollection</xref> contains a list of <xref uid="com.azure.ai.textanalytics.models.LinkedEntity" data-throw-if-not-resolved="false">recognized linked entities</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: recognizeLinkedEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsClient.recognizeLinkedEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of recognized entities with links to a well-known knowledge base for the list of documents with provided language code and request options. See [this][] for supported languages in Text Analytics API.\n\n**Code Sample**\n\nRecognizes the linked entities in a list of documents with a provided language code and request options.\n\n```java\nList<String> documents = Arrays.asList(\n     \"Old Faithful is a geyser at Yellowstone Park.\",\n     \"Mount Shasta has lenticular clouds.\"\n );\n \n RecognizeLinkedEntitiesResultCollection resultCollection =\n     textAnalyticsClient.recognizeLinkedEntitiesBatch(documents, \"en\", null);\n \n // Batch statistics\n TextDocumentBatchStatistics batchStatistics = resultCollection.getStatistics();\n System.out.printf(\"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n     batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n resultCollection.forEach(recognizeLinkedEntitiesResult ->\n     recognizeLinkedEntitiesResult.getEntities().forEach(linkedEntity -> {\n         System.out.println(\"Linked Entities:\");\n         System.out.printf(\"Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n\",\n             linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(),\n             linkedEntity.getDataSource());\n         linkedEntity.getMatches().forEach(entityMatch -> System.out.printf(\n             \"Matched entity: %s, confidence score: %f.%n\",\n             entityMatch.getText(), entityMatch.getConfidenceScore()));\n     }));\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public RecognizeLinkedEntitiesResultCollection recognizeLinkedEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to recognize linked entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the documents. If not set, uses "en" for
         English as default.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: com.azure.ai.textanalytics.util.RecognizeLinkedEntitiesResultCollection
      description: A <xref uid="com.azure.ai.textanalytics.util.RecognizeLinkedEntitiesResultCollection" data-throw-if-not-resolved="false">RecognizeLinkedEntitiesResultCollection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  id: recognizeLinkedEntitiesBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: recognizeLinkedEntitiesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  nameWithType: TextAnalyticsClient.recognizeLinkedEntitiesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatchWithResponse*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of recognized entities with links to a well-known knowledge base for the list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">document</xref> and request options. See [this][] for supported languages in Text Analytics API.\n\n**Code Sample**\n\nRecognizes the linked entities with http response in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">TextDocumentInput</xref> with request options.\n\n```java\nList<TextDocumentInput> textDocumentInputs = Arrays.asList(\n     new TextDocumentInput(\"1\", \"Old Faithful is a geyser at Yellowstone Park.\").setLanguage(\"en\"),\n     new TextDocumentInput(\"2\", \"Mount Shasta has lenticular clouds.\").setLanguage(\"en\")\n );\n \n Response<RecognizeLinkedEntitiesResultCollection> response =\n     textAnalyticsClient.recognizeLinkedEntitiesBatchWithResponse(textDocumentInputs,\n         new TextAnalyticsRequestOptions().setIncludeStatistics(true), Context.NONE);\n \n // Response's status code\n System.out.printf(\"Status code of request response: %d%n\", response.getStatusCode());\n RecognizeLinkedEntitiesResultCollection resultCollection = response.getValue();\n \n // Batch statistics\n TextDocumentBatchStatistics batchStatistics = resultCollection.getStatistics();\n System.out.printf(\n     \"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n     batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n resultCollection.forEach(recognizeLinkedEntitiesResult ->\n     recognizeLinkedEntitiesResult.getEntities().forEach(linkedEntity -> {\n         System.out.println(\"Linked Entities:\");\n         System.out.printf(\"Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n\",\n             linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(),\n             linkedEntity.getDataSource());\n         linkedEntity.getMatches().forEach(entityMatch -> System.out.printf(\n             \"Matched entity: %s, confidence score: %.2f.%n\",\n             entityMatch.getText(), entityMatch.getConfidenceScore()));\n     }));\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public Response<RecognizeLinkedEntitiesResultCollection> recognizeLinkedEntitiesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
    parameters:
    - id: documents
      type: java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>
      description: >-
        A list of <xref uid="com.azure.ai.textanalytics.models.TextDocumentInput" data-throw-if-not-resolved="false">documents</xref> to recognize linked entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.ai.textanalytics.util.RecognizeLinkedEntitiesResultCollection>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> that contains a <xref uid="com.azure.ai.textanalytics.util.RecognizeLinkedEntitiesResultCollection" data-throw-if-not-resolved="false">RecognizeLinkedEntitiesResultCollection</xref>.
references:
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  name: TextAnalyticsAsyncClient
  nameWithType: TextAnalyticsAsyncClient
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.TextAnalyticsClient*
  name: TextAnalyticsClient
  nameWithType: TextAnalyticsClient.TextAnalyticsClient
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.TextAnalyticsClient
  package: com.azure.ai.textanalytics
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultCountryHint*
  name: getDefaultCountryHint
  nameWithType: TextAnalyticsClient.getDefaultCountryHint
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultCountryHint
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultLanguage*
  name: getDefaultLanguage
  nameWithType: TextAnalyticsClient.getDefaultLanguage
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultLanguage
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.models.DetectedLanguage
  name: DetectedLanguage
  nameWithType: DetectedLanguage
  fullName: com.azure.ai.textanalytics.models.DetectedLanguage
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage*
  name: detectLanguage
  nameWithType: TextAnalyticsClient.detectLanguage
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage
  package: com.azure.ai.textanalytics
- uid: java.lang.Iterable<java.lang.String>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
  name: TextAnalyticsRequestOptions
  nameWithType: TextAnalyticsRequestOptions
  fullName: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
- uid: com.azure.ai.textanalytics.util.DetectLanguageResultCollection
  name: DetectLanguageResultCollection
  nameWithType: DetectLanguageResultCollection
  fullName: com.azure.ai.textanalytics.util.DetectLanguageResultCollection
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch*
  name: detectLanguageBatch
  nameWithType: TextAnalyticsClient.detectLanguageBatch
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch
  package: com.azure.ai.textanalytics
- uid: java.lang.Iterable<com.azure.ai.textanalytics.models.DetectLanguageInput>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.DetectLanguageInput
    name: DetectLanguageInput
    fullName: com.azure.ai.textanalytics.models.DetectLanguageInput
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.Context
  spec.java:
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
- uid: com.azure.core.http.rest.Response<com.azure.ai.textanalytics.util.DetectLanguageResultCollection>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.util.DetectLanguageResultCollection
    name: DetectLanguageResultCollection
    fullName: com.azure.ai.textanalytics.util.DetectLanguageResultCollection
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatchWithResponse*
  name: detectLanguageBatchWithResponse
  nameWithType: TextAnalyticsClient.detectLanguageBatchWithResponse
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatchWithResponse
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.models.CategorizedEntityCollection
  name: CategorizedEntityCollection
  nameWithType: CategorizedEntityCollection
  fullName: com.azure.ai.textanalytics.models.CategorizedEntityCollection
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntities*
  name: recognizeEntities
  nameWithType: TextAnalyticsClient.recognizeEntities
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntities
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.util.RecognizeEntitiesResultCollection
  name: RecognizeEntitiesResultCollection
  nameWithType: RecognizeEntitiesResultCollection
  fullName: com.azure.ai.textanalytics.util.RecognizeEntitiesResultCollection
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch*
  name: recognizeEntitiesBatch
  nameWithType: TextAnalyticsClient.recognizeEntitiesBatch
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch
  package: com.azure.ai.textanalytics
- uid: java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.TextDocumentInput
    name: TextDocumentInput
    fullName: com.azure.ai.textanalytics.models.TextDocumentInput
  - name: '>'
    fullName: '>'
- uid: com.azure.core.http.rest.Response<com.azure.ai.textanalytics.util.RecognizeEntitiesResultCollection>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.util.RecognizeEntitiesResultCollection
    name: RecognizeEntitiesResultCollection
    fullName: com.azure.ai.textanalytics.util.RecognizeEntitiesResultCollection
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatchWithResponse*
  name: recognizeEntitiesBatchWithResponse
  nameWithType: TextAnalyticsClient.recognizeEntitiesBatchWithResponse
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatchWithResponse
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.models.LinkedEntityCollection
  name: LinkedEntityCollection
  nameWithType: LinkedEntityCollection
  fullName: com.azure.ai.textanalytics.models.LinkedEntityCollection
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities*
  name: recognizeLinkedEntities
  nameWithType: TextAnalyticsClient.recognizeLinkedEntities
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.util.RecognizeLinkedEntitiesResultCollection
  name: RecognizeLinkedEntitiesResultCollection
  nameWithType: RecognizeLinkedEntitiesResultCollection
  fullName: com.azure.ai.textanalytics.util.RecognizeLinkedEntitiesResultCollection
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch*
  name: recognizeLinkedEntitiesBatch
  nameWithType: TextAnalyticsClient.recognizeLinkedEntitiesBatch
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch
  package: com.azure.ai.textanalytics
- uid: com.azure.core.http.rest.Response<com.azure.ai.textanalytics.util.RecognizeLinkedEntitiesResultCollection>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.util.RecognizeLinkedEntitiesResultCollection
    name: RecognizeLinkedEntitiesResultCollection
    fullName: com.azure.ai.textanalytics.util.RecognizeLinkedEntitiesResultCollection
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatchWithResponse*
  name: recognizeLinkedEntitiesBatchWithResponse
  nameWithType: TextAnalyticsClient.recognizeLinkedEntitiesBatchWithResponse
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatchWithResponse
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.models.KeyPhrasesCollection
  name: KeyPhrasesCollection
  nameWithType: KeyPhrasesCollection
  fullName: com.azure.ai.textanalytics.models.KeyPhrasesCollection
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases*
  name: extractKeyPhrases
  nameWithType: TextAnalyticsClient.extractKeyPhrases
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.util.ExtractKeyPhrasesResultCollection
  name: ExtractKeyPhrasesResultCollection
  nameWithType: ExtractKeyPhrasesResultCollection
  fullName: com.azure.ai.textanalytics.util.ExtractKeyPhrasesResultCollection
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch*
  name: extractKeyPhrasesBatch
  nameWithType: TextAnalyticsClient.extractKeyPhrasesBatch
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch
  package: com.azure.ai.textanalytics
- uid: com.azure.core.http.rest.Response<com.azure.ai.textanalytics.util.ExtractKeyPhrasesResultCollection>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.util.ExtractKeyPhrasesResultCollection
    name: ExtractKeyPhrasesResultCollection
    fullName: com.azure.ai.textanalytics.util.ExtractKeyPhrasesResultCollection
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatchWithResponse*
  name: extractKeyPhrasesBatchWithResponse
  nameWithType: TextAnalyticsClient.extractKeyPhrasesBatchWithResponse
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatchWithResponse
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.models.DocumentSentiment
  name: DocumentSentiment
  nameWithType: DocumentSentiment
  fullName: com.azure.ai.textanalytics.models.DocumentSentiment
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment*
  name: analyzeSentiment
  nameWithType: TextAnalyticsClient.analyzeSentiment
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection
  name: AnalyzeSentimentResultCollection
  nameWithType: AnalyzeSentimentResultCollection
  fullName: com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch*
  name: analyzeSentimentBatch
  nameWithType: TextAnalyticsClient.analyzeSentimentBatch
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch
  package: com.azure.ai.textanalytics
- uid: com.azure.core.http.rest.Response<com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection
    name: AnalyzeSentimentResultCollection
    fullName: com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatchWithResponse*
  name: analyzeSentimentBatchWithResponse
  nameWithType: TextAnalyticsClient.analyzeSentimentBatchWithResponse
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatchWithResponse
  package: com.azure.ai.textanalytics
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: com.azure.ai.textanalytics.models.DetectLanguageInput
  name: DetectLanguageInput
  nameWithType: DetectLanguageInput
  fullName: com.azure.ai.textanalytics.models.DetectLanguageInput
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.ai.textanalytics.models.TextDocumentInput
  name: TextDocumentInput
  nameWithType: TextDocumentInput
  fullName: com.azure.ai.textanalytics.models.TextDocumentInput
