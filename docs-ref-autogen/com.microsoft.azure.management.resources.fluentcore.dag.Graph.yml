### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Graph
  id: Graph
  artifact: com.microsoft.azure:azure-mgmt-resources:1.34.0
  parent: com.microsoft.azure.management.resources.fluentcore.dag
  children:
  - com.microsoft.azure.management.resources.fluentcore.dag.Graph.Graph()
  - com.microsoft.azure.management.resources.fluentcore.dag.Graph.addNode(NodeT)
  - com.microsoft.azure.management.resources.fluentcore.dag.Graph.findPath(java.lang.String,java.lang.String)
  - com.microsoft.azure.management.resources.fluentcore.dag.Graph.getNodes()
  - com.microsoft.azure.management.resources.fluentcore.dag.Graph.nodeTable
  - com.microsoft.azure.management.resources.fluentcore.dag.Graph.visit(com.microsoft.azure.management.resources.fluentcore.dag.Graph.Visitor)
  langs:
  - java
  name: Graph<DataT,NodeT>
  nameWithType: Graph<DataT,NodeT>
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>
  type: Class
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: >-
    Type representing a directed graph data structure.


    Each node in a graph is represented by <xref uid="com.microsoft.azure.management.resources.fluentcore.dag.Node" data-throw-if-not-resolved="false">Node</xref>
  syntax:
    content: public class Graph<DataT,NodeT>
    typeParameters:
    - id: DataT
    - id: NodeT
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Graph.Graph()
  id: Graph()
  artifact: com.microsoft.azure:azure-mgmt-resources:1.34.0
  parent: com.microsoft.azure.management.resources.fluentcore.dag.Graph
  langs:
  - java
  name: Graph()
  nameWithType: Graph<DataT,NodeT>.Graph()
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>.Graph()
  overload: com.microsoft.azure.management.resources.fluentcore.dag.Graph.Graph*
  type: Constructor
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: Creates a directed graph.
  syntax:
    content: public Graph()
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Graph.addNode(NodeT)
  id: addNode(NodeT)
  artifact: com.microsoft.azure:azure-mgmt-resources:1.34.0
  parent: com.microsoft.azure.management.resources.fluentcore.dag.Graph
  langs:
  - java
  name: addNode(NodeT node)
  nameWithType: Graph<DataT,NodeT>.addNode(NodeT node)
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>.addNode(NodeT node)
  overload: com.microsoft.azure.management.resources.fluentcore.dag.Graph.addNode*
  type: Method
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: Adds a node to this graph.
  syntax:
    content: public void addNode(NodeT node)
    parameters:
    - id: node
      type: NodeT
      description: the node
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Graph.findPath(java.lang.String,java.lang.String)
  id: findPath(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-mgmt-resources:1.34.0
  parent: com.microsoft.azure.management.resources.fluentcore.dag.Graph
  langs:
  - java
  name: findPath(String start, String end)
  nameWithType: Graph<DataT,NodeT>.findPath(String start, String end)
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>.findPath(String start, String end)
  overload: com.microsoft.azure.management.resources.fluentcore.dag.Graph.findPath*
  type: Method
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: Find the path.
  syntax:
    content: protected String findPath(String start, String end)
    parameters:
    - id: start
      type: java.lang.String
      description: key of first node in the path
    - id: end
      type: java.lang.String
      description: key of last node in the path
    return:
      type: java.lang.String
      description: string containing the nodes keys in the path separated by arrow symbol
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Graph.getNodes()
  id: getNodes()
  artifact: com.microsoft.azure:azure-mgmt-resources:1.34.0
  parent: com.microsoft.azure.management.resources.fluentcore.dag.Graph
  langs:
  - java
  name: getNodes()
  nameWithType: Graph<DataT,NodeT>.getNodes()
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>.getNodes()
  overload: com.microsoft.azure.management.resources.fluentcore.dag.Graph.getNodes*
  type: Method
  package: com.microsoft.azure.management.resources.fluentcore.dag
  syntax:
    content: public Collection<NodeT> getNodes()
    return:
      type: java.util.Collection<NodeT>
      description: all nodes in the graph.
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Graph.nodeTable
  id: nodeTable
  artifact: com.microsoft.azure:azure-mgmt-resources:1.34.0
  parent: com.microsoft.azure.management.resources.fluentcore.dag.Graph
  langs:
  - java
  name: nodeTable
  nameWithType: Graph<DataT,NodeT>.nodeTable
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>.nodeTable
  type: Field
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: the nodes in the graph.
  syntax:
    content: protected Map<String,NodeT> nodeTable
    return:
      type: java.util.Map<java.lang.String,NodeT>
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Graph.visit(com.microsoft.azure.management.resources.fluentcore.dag.Graph.Visitor)
  id: visit(com.microsoft.azure.management.resources.fluentcore.dag.Graph.Visitor)
  artifact: com.microsoft.azure:azure-mgmt-resources:1.34.0
  parent: com.microsoft.azure.management.resources.fluentcore.dag.Graph
  langs:
  - java
  name: visit(Graph.Visitor visitor)
  nameWithType: Graph<DataT,NodeT>.visit(Graph.Visitor visitor)
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>.visit(Graph.Visitor visitor)
  overload: com.microsoft.azure.management.resources.fluentcore.dag.Graph.visit*
  type: Method
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: >-
    Perform DFS visit in this graph.


    The directed graph will be traversed in DFS order and the visitor will be notified as search explores each node and edge.
  syntax:
    content: public void visit(Graph.Visitor visitor)
    parameters:
    - id: visitor
      type: com.microsoft.azure.management.resources.fluentcore.dag.Graph.Visitor
      description: the graph visitor
references:
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Graph.Graph*
  name: Graph
  nameWithType: Graph<DataT,NodeT>.Graph
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>.Graph
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: java.util.Collection<NodeT>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: NodeT
    name: NodeT
    fullName: NodeT
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Graph.getNodes*
  name: getNodes
  nameWithType: Graph<DataT,NodeT>.getNodes
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>.getNodes
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: NodeT
  spec.java:
  - uid: NodeT
    name: NodeT
    fullName: NodeT
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Graph.addNode*
  name: addNode
  nameWithType: Graph<DataT,NodeT>.addNode
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>.addNode
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Graph.Visitor
  spec.java:
  - uid: com.microsoft.azure.management.resources.fluentcore.dag.Graph.Visitor
    name: Visitor
    fullName: com.microsoft.azure.management.resources.fluentcore.dag.Graph.Visitor
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Graph.visit*
  name: visit
  nameWithType: Graph<DataT,NodeT>.visit
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>.visit
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.management.resources.fluentcore.dag.Graph.findPath*
  name: findPath
  nameWithType: Graph<DataT,NodeT>.findPath
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>.findPath
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: java.util.Map<java.lang.String,NodeT>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: NodeT
    name: NodeT
    fullName: NodeT
  - name: '>'
    fullName: '>'
- uid: DataT
  name: DataT
  nameWithType: DataT
  fullName: DataT
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,NodeT
  name: String,NodeT
  nameWithType: String,NodeT
  fullName: java.lang.String,NodeT
