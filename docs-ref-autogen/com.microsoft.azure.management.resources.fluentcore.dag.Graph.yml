### YamlMime:JavaType
uid: "com.microsoft.azure.management.resources.fluentcore.dag.Graph"
fullName: "com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>"
name: "Graph<DataT,NodeT>"
nameWithType: "Graph<DataT,NodeT>"
summary: "Type representing a directed graph data structure."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class Graph<DataT,NodeT>"
constructors:
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.Graph.Graph()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>.Graph()"
  name: "Graph()"
  nameWithType: "Graph<DataT,NodeT>.Graph()"
  summary: "Creates a directed graph."
  syntax: "public Graph()"
  desc: "Creates a directed graph."
fields:
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.Graph.nodeTable"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>.nodeTable"
  name: "nodeTable"
  nameWithType: "Graph<DataT,NodeT>.nodeTable"
  summary: "the nodes in the graph."
  modifiers:
  - "protected"
  field:
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"NodeT?alt=NodeT&text=NodeT\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "protected Map<String,NodeT> nodeTable"
  desc: "the nodes in the graph."
methods:
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.Graph.addNode(NodeT)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>.addNode(NodeT node)"
  name: "addNode(NodeT node)"
  nameWithType: "Graph<DataT,NodeT>.addNode(NodeT node)"
  summary: "Adds a node to this graph."
  parameters:
  - description: "the node"
    name: "node"
    type: "<xref href=\"NodeT?alt=NodeT&text=NodeT\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void addNode(NodeT node)"
  desc: "Adds a node to this graph."
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.Graph.findPath(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>.findPath(String start, String end)"
  name: "findPath(String start, String end)"
  nameWithType: "Graph<DataT,NodeT>.findPath(String start, String end)"
  summary: "Find the path."
  modifiers:
  - "protected"
  parameters:
  - description: "key of first node in the path"
    name: "start"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "key of last node in the path"
    name: "end"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected String findPath(String start, String end)"
  desc: "Find the path."
  returns:
    description: "string containing the nodes keys in the path separated by arrow symbol"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.Graph.getNodes()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>.getNodes()"
  name: "getNodes()"
  nameWithType: "Graph<DataT,NodeT>.getNodes()"
  syntax: "public Collection<NodeT> getNodes()"
  returns:
    description: "all nodes in the graph."
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"NodeT?alt=NodeT&text=NodeT\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.Graph.visit(com.microsoft.azure.management.resources.fluentcore.dag.Graph.Visitor)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>.visit(Graph.Visitor visitor)"
  name: "visit(Graph.Visitor visitor)"
  nameWithType: "Graph<DataT,NodeT>.visit(Graph.Visitor visitor)"
  summary: "Perform DFS visit in this graph."
  parameters:
  - description: "the graph visitor"
    name: "visitor"
    type: "<xref href=\"com.microsoft.azure.management.resources.fluentcore.dag.Graph.Visitor?alt=com.microsoft.azure.management.resources.fluentcore.dag.Graph.Visitor&text=Visitor\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void visit(Graph.Visitor visitor)"
  desc: "Perform DFS visit in this graph.\n\nThe directed graph will be traversed in DFS order and the visitor will be notified as search explores each node and edge."
type: "class"
typeParameters:
- description: "the type of the data stored in the graph's nodes"
  name: "DataT"
- description: "the type of the nodes in the graph"
  name: "NodeT"
desc: "Type representing a directed graph data structure.\n\nEach node in a graph is represented by <xref uid=\"com.microsoft.azure.management.resources.fluentcore.dag.Node\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Node\"></xref>"
metadata: {}
package: "com.microsoft.azure.management.resources.fluentcore.dag"
artifact: com.microsoft.azure:azure-mgmt-resources:1.41.4
