### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.common.implementation.StorageImplUtils"
  id: "StorageImplUtils"
  parent: "com.azure.storage.common.implementation"
  children:
  - "com.azure.storage.common.implementation.StorageImplUtils.<T>applyOptionalTimeout(reactor.core.publisher.Flux<T>,java.time.Duration)"
  - "com.azure.storage.common.implementation.StorageImplUtils.<T>applyOptionalTimeout(reactor.core.publisher.Mono<T>,java.time.Duration)"
  - "com.azure.storage.common.implementation.StorageImplUtils.<T>blockWithOptionalTimeout(reactor.core.publisher.Mono<T>,java.time.Duration)"
  - "com.azure.storage.common.implementation.StorageImplUtils.StorageImplUtils()"
  - "com.azure.storage.common.implementation.StorageImplUtils.appendToUrlPath(java.lang.String,java.lang.String)"
  - "com.azure.storage.common.implementation.StorageImplUtils.assertInBounds(java.lang.String,long,long,long)"
  - "com.azure.storage.common.implementation.StorageImplUtils.assertNotNull(java.lang.String,java.lang.Object)"
  - "com.azure.storage.common.implementation.StorageImplUtils.computeHMac256(java.lang.String,java.lang.String)"
  - "com.azure.storage.common.implementation.StorageImplUtils.copyToOutputStream(java.io.InputStream,long,java.io.OutputStream)"
  - "com.azure.storage.common.implementation.StorageImplUtils.emptyIfNull(java.lang.String)"
  - "com.azure.storage.common.implementation.StorageImplUtils.getAccountName(java.net.URL)"
  - "com.azure.storage.common.implementation.StorageImplUtils.parseQueryString(java.lang.String)"
  - "com.azure.storage.common.implementation.StorageImplUtils.parseQueryStringSplitValues(java.lang.String)"
  - "com.azure.storage.common.implementation.StorageImplUtils.stripLastPathSegment(java.net.URL)"
  langs:
  - "java"
  name: "StorageImplUtils"
  nameWithType: "StorageImplUtils"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils"
  type: "Class"
  package: "com.azure.storage.common.implementation"
  summary: "Utility class which is used internally."
  syntax:
    content: "public class StorageImplUtils"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.common.implementation.StorageImplUtils.<T>applyOptionalTimeout(reactor.core.publisher.Flux<T>,java.time.Duration)"
  id: "<T>applyOptionalTimeout(reactor.core.publisher.Flux<T>,java.time.Duration)"
  parent: "com.azure.storage.common.implementation.StorageImplUtils"
  langs:
  - "java"
  name: "<T>applyOptionalTimeout(Flux<T> publisher, Duration timeout)"
  nameWithType: "StorageImplUtils.<T>applyOptionalTimeout(Flux<T> publisher, Duration timeout)"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.<T>applyOptionalTimeout(Flux<T> publisher, Duration timeout)"
  overload: "com.azure.storage.common.implementation.StorageImplUtils.applyOptionalTimeout*"
  type: "Method"
  package: "com.azure.storage.common.implementation"
  summary: "Applies a timeout to a publisher if the given timeout is not null."
  syntax:
    content: "public static Flux<T> <T>applyOptionalTimeout(Flux<T> publisher, Duration timeout)"
    parameters:
    - id: "publisher"
      type: "reactor.core.publisher.Flux<T>"
      description: "Flux to apply optional timeout to."
    - id: "timeout"
      type: "java.time.Duration"
      description: "Optional timeout."
    return:
      type: "reactor.core.publisher.Flux<T>"
      description: "Flux with an applied timeout, if any."
- uid: "com.azure.storage.common.implementation.StorageImplUtils.<T>applyOptionalTimeout(reactor.core.publisher.Mono<T>,java.time.Duration)"
  id: "<T>applyOptionalTimeout(reactor.core.publisher.Mono<T>,java.time.Duration)"
  parent: "com.azure.storage.common.implementation.StorageImplUtils"
  langs:
  - "java"
  name: "<T>applyOptionalTimeout(Mono<T> publisher, Duration timeout)"
  nameWithType: "StorageImplUtils.<T>applyOptionalTimeout(Mono<T> publisher, Duration timeout)"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.<T>applyOptionalTimeout(Mono<T> publisher, Duration timeout)"
  overload: "com.azure.storage.common.implementation.StorageImplUtils.applyOptionalTimeout*"
  type: "Method"
  package: "com.azure.storage.common.implementation"
  summary: "Applies a timeout to a publisher if the given timeout is not null."
  syntax:
    content: "public static Mono<T> <T>applyOptionalTimeout(Mono<T> publisher, Duration timeout)"
    parameters:
    - id: "publisher"
      type: "reactor.core.publisher.Mono<T>"
      description: "Mono to apply optional timeout to."
    - id: "timeout"
      type: "java.time.Duration"
      description: "Optional timeout."
    return:
      type: "reactor.core.publisher.Mono<T>"
      description: "Mono with an applied timeout, if any."
- uid: "com.azure.storage.common.implementation.StorageImplUtils.<T>blockWithOptionalTimeout(reactor.core.publisher.Mono<T>,java.time.Duration)"
  id: "<T>blockWithOptionalTimeout(reactor.core.publisher.Mono<T>,java.time.Duration)"
  parent: "com.azure.storage.common.implementation.StorageImplUtils"
  langs:
  - "java"
  name: "<T>blockWithOptionalTimeout(Mono<T> response, Duration timeout)"
  nameWithType: "StorageImplUtils.<T>blockWithOptionalTimeout(Mono<T> response, Duration timeout)"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.<T>blockWithOptionalTimeout(Mono<T> response, Duration timeout)"
  overload: "com.azure.storage.common.implementation.StorageImplUtils.blockWithOptionalTimeout*"
  type: "Method"
  package: "com.azure.storage.common.implementation"
  summary: "Blocks an asynchronous response with an optional timeout."
  syntax:
    content: "public static T <T>blockWithOptionalTimeout(Mono<T> response, Duration timeout)"
    parameters:
    - id: "response"
      type: "reactor.core.publisher.Mono<T>"
      description: "Asynchronous response to block"
    - id: "timeout"
      type: "java.time.Duration"
      description: "Optional timeout"
    return:
      type: "T"
      description: "the value of the asynchronous response"
- uid: "com.azure.storage.common.implementation.StorageImplUtils.StorageImplUtils()"
  id: "StorageImplUtils()"
  parent: "com.azure.storage.common.implementation.StorageImplUtils"
  langs:
  - "java"
  name: "StorageImplUtils()"
  nameWithType: "StorageImplUtils.StorageImplUtils()"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.StorageImplUtils()"
  overload: "com.azure.storage.common.implementation.StorageImplUtils.StorageImplUtils*"
  type: "Constructor"
  package: "com.azure.storage.common.implementation"
  syntax:
    content: "public StorageImplUtils()"
- uid: "com.azure.storage.common.implementation.StorageImplUtils.appendToUrlPath(java.lang.String,java.lang.String)"
  id: "appendToUrlPath(java.lang.String,java.lang.String)"
  parent: "com.azure.storage.common.implementation.StorageImplUtils"
  langs:
  - "java"
  name: "appendToUrlPath(String baseURL, String name)"
  nameWithType: "StorageImplUtils.appendToUrlPath(String baseURL, String name)"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.appendToUrlPath(String baseURL, String name)"
  overload: "com.azure.storage.common.implementation.StorageImplUtils.appendToUrlPath*"
  type: "Method"
  package: "com.azure.storage.common.implementation"
  summary: "Appends a string to the end of the passed URL's path."
  syntax:
    content: "public static URL appendToUrlPath(String baseURL, String name)"
    parameters:
    - id: "baseURL"
      type: "java.lang.String"
      description: "URL having a path appended"
    - id: "name"
      type: "java.lang.String"
      description: "Name of the path"
    return:
      type: "java.net.URL"
      description: "a URL with the path appended."
- uid: "com.azure.storage.common.implementation.StorageImplUtils.assertInBounds(java.lang.String,long,long,long)"
  id: "assertInBounds(java.lang.String,long,long,long)"
  parent: "com.azure.storage.common.implementation.StorageImplUtils"
  langs:
  - "java"
  name: "assertInBounds(String param, long value, long min, long max)"
  nameWithType: "StorageImplUtils.assertInBounds(String param, long value, long min, long max)"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.assertInBounds(String param, long value, long min, long max)"
  overload: "com.azure.storage.common.implementation.StorageImplUtils.assertInBounds*"
  type: "Method"
  package: "com.azure.storage.common.implementation"
  summary: "Asserts that the specified number is in the valid range. The range is inclusive."
  syntax:
    content: "public static void assertInBounds(String param, long value, long min, long max)"
    parameters:
    - id: "param"
      type: "java.lang.String"
      description: "Name of the parameter"
    - id: "value"
      type: "long"
      description: "Value of the parameter"
    - id: "min"
      type: "long"
      description: "The minimum allowed value"
    - id: "max"
      type: "long"
      description: "The maximum allowed value"
- uid: "com.azure.storage.common.implementation.StorageImplUtils.assertNotNull(java.lang.String,java.lang.Object)"
  id: "assertNotNull(java.lang.String,java.lang.Object)"
  parent: "com.azure.storage.common.implementation.StorageImplUtils"
  langs:
  - "java"
  name: "assertNotNull(String param, Object value)"
  nameWithType: "StorageImplUtils.assertNotNull(String param, Object value)"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.assertNotNull(String param, Object value)"
  overload: "com.azure.storage.common.implementation.StorageImplUtils.assertNotNull*"
  type: "Method"
  package: "com.azure.storage.common.implementation"
  summary: "Asserts that a value is not `null`."
  syntax:
    content: "public static void assertNotNull(String param, Object value)"
    parameters:
    - id: "param"
      type: "java.lang.String"
      description: "Name of the parameter"
    - id: "value"
      type: "java.lang.Object"
      description: "Value of the parameter"
- uid: "com.azure.storage.common.implementation.StorageImplUtils.computeHMac256(java.lang.String,java.lang.String)"
  id: "computeHMac256(java.lang.String,java.lang.String)"
  parent: "com.azure.storage.common.implementation.StorageImplUtils"
  langs:
  - "java"
  name: "computeHMac256(String base64Key, String stringToSign)"
  nameWithType: "StorageImplUtils.computeHMac256(String base64Key, String stringToSign)"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.computeHMac256(String base64Key, String stringToSign)"
  overload: "com.azure.storage.common.implementation.StorageImplUtils.computeHMac256*"
  type: "Method"
  package: "com.azure.storage.common.implementation"
  summary: "Computes a signature for the specified string using the HMAC-SHA256 algorithm."
  syntax:
    content: "public static String computeHMac256(String base64Key, String stringToSign)"
    parameters:
    - id: "base64Key"
      type: "java.lang.String"
      description: "Base64 encoded key used to sign the string"
    - id: "stringToSign"
      type: "java.lang.String"
      description: "UTF-8 encoded string to sign"
    return:
      type: "java.lang.String"
      description: "the HMAC-SHA256 encoded signature"
- uid: "com.azure.storage.common.implementation.StorageImplUtils.copyToOutputStream(java.io.InputStream,long,java.io.OutputStream)"
  id: "copyToOutputStream(java.io.InputStream,long,java.io.OutputStream)"
  parent: "com.azure.storage.common.implementation.StorageImplUtils"
  langs:
  - "java"
  name: "copyToOutputStream(InputStream source, long writeLength, OutputStream destination)"
  nameWithType: "StorageImplUtils.copyToOutputStream(InputStream source, long writeLength, OutputStream destination)"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.copyToOutputStream(InputStream source, long writeLength, OutputStream destination)"
  overload: "com.azure.storage.common.implementation.StorageImplUtils.copyToOutputStream*"
  type: "Method"
  package: "com.azure.storage.common.implementation"
  summary: "Reads data from an input stream and writes it to an output stream."
  syntax:
    content: "public static void copyToOutputStream(InputStream source, long writeLength, OutputStream destination)"
    parameters:
    - id: "source"
      type: "java.io.InputStream"
      description: "<xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\">source</xref>"
    - id: "writeLength"
      type: "long"
      description: "The length of data to write."
    - id: "destination"
      type: "java.io.OutputStream"
      description: "<xref uid=\"java.io.OutputStream\" data-throw-if-not-resolved=\"false\">destination</xref>"
  exceptions:
  - type: "java.io.IOException"
    description: "If an I/O error occurs."
- uid: "com.azure.storage.common.implementation.StorageImplUtils.emptyIfNull(java.lang.String)"
  id: "emptyIfNull(java.lang.String)"
  parent: "com.azure.storage.common.implementation.StorageImplUtils"
  langs:
  - "java"
  name: "emptyIfNull(String value)"
  nameWithType: "StorageImplUtils.emptyIfNull(String value)"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.emptyIfNull(String value)"
  overload: "com.azure.storage.common.implementation.StorageImplUtils.emptyIfNull*"
  type: "Method"
  package: "com.azure.storage.common.implementation"
  summary: "Returns an empty string if value is `null`, otherwise returns value"
  syntax:
    content: "public static String emptyIfNull(String value)"
    parameters:
    - id: "value"
      type: "java.lang.String"
      description: "The value to check and return."
    return:
      type: "java.lang.String"
      description: "The value or empty string."
- uid: "com.azure.storage.common.implementation.StorageImplUtils.getAccountName(java.net.URL)"
  id: "getAccountName(java.net.URL)"
  parent: "com.azure.storage.common.implementation.StorageImplUtils"
  langs:
  - "java"
  name: "getAccountName(URL url)"
  nameWithType: "StorageImplUtils.getAccountName(URL url)"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.getAccountName(URL url)"
  overload: "com.azure.storage.common.implementation.StorageImplUtils.getAccountName*"
  type: "Method"
  package: "com.azure.storage.common.implementation"
  summary: "Strips the account name from host part of the URL object."
  syntax:
    content: "public static String getAccountName(URL url)"
    parameters:
    - id: "url"
      type: "java.net.URL"
      description: "URL having its  hostanme"
    return:
      type: "java.lang.String"
      description: "account name."
- uid: "com.azure.storage.common.implementation.StorageImplUtils.parseQueryString(java.lang.String)"
  id: "parseQueryString(java.lang.String)"
  parent: "com.azure.storage.common.implementation.StorageImplUtils"
  langs:
  - "java"
  name: "parseQueryString(String queryString)"
  nameWithType: "StorageImplUtils.parseQueryString(String queryString)"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.parseQueryString(String queryString)"
  overload: "com.azure.storage.common.implementation.StorageImplUtils.parseQueryString*"
  type: "Method"
  package: "com.azure.storage.common.implementation"
  summary: "Parses the query string into a key-value pair map that maintains key, query parameter key, order. The value is stored as a string (ex. key=val1,val2,val3 instead of key=\\[val1, val2, val3\\])."
  syntax:
    content: "public static Map<String,String> parseQueryString(String queryString)"
    parameters:
    - id: "queryString"
      type: "java.lang.String"
      description: "Query string to parse"
    return:
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "a mapping of query string pieces as key-value pairs."
- uid: "com.azure.storage.common.implementation.StorageImplUtils.parseQueryStringSplitValues(java.lang.String)"
  id: "parseQueryStringSplitValues(java.lang.String)"
  parent: "com.azure.storage.common.implementation.StorageImplUtils"
  langs:
  - "java"
  name: "parseQueryStringSplitValues(String queryString)"
  nameWithType: "StorageImplUtils.parseQueryStringSplitValues(String queryString)"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.parseQueryStringSplitValues(String queryString)"
  overload: "com.azure.storage.common.implementation.StorageImplUtils.parseQueryStringSplitValues*"
  type: "Method"
  package: "com.azure.storage.common.implementation"
  summary: "Parses the query string into a key-value pair map that maintains key, query parameter key, order. The value is stored as a parsed array (ex. key=\\[val1, val2, val3\\] instead of key=val1,val2,val3)."
  syntax:
    content: "public static Map<String,String[]> parseQueryStringSplitValues(String queryString)"
    parameters:
    - id: "queryString"
      type: "java.lang.String"
      description: "Query string to parse"
    return:
      type: "java.util.Map<java.lang.String,java.lang.String[]>"
      description: "a mapping of query string pieces as key-value pairs."
- uid: "com.azure.storage.common.implementation.StorageImplUtils.stripLastPathSegment(java.net.URL)"
  id: "stripLastPathSegment(java.net.URL)"
  parent: "com.azure.storage.common.implementation.StorageImplUtils"
  langs:
  - "java"
  name: "stripLastPathSegment(URL baseUrl)"
  nameWithType: "StorageImplUtils.stripLastPathSegment(URL baseUrl)"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.stripLastPathSegment(URL baseUrl)"
  overload: "com.azure.storage.common.implementation.StorageImplUtils.stripLastPathSegment*"
  type: "Method"
  package: "com.azure.storage.common.implementation"
  summary: "Strips the last path segment from the passed URL."
  syntax:
    content: "public static URL stripLastPathSegment(URL baseUrl)"
    parameters:
    - id: "baseUrl"
      type: "java.net.URL"
      description: "URL having its last path segment stripped"
    return:
      type: "java.net.URL"
      description: "a URL with the path segment stripped."
references:
- uid: "com.azure.storage.common.implementation.StorageImplUtils.StorageImplUtils*"
  name: "StorageImplUtils"
  nameWithType: "StorageImplUtils.StorageImplUtils"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.StorageImplUtils"
  package: "com.azure.storage.common.implementation"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "java.util.Map<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.common.implementation.StorageImplUtils.parseQueryString*"
  name: "parseQueryString"
  nameWithType: "StorageImplUtils.parseQueryString"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.parseQueryString"
  package: "com.azure.storage.common.implementation"
- uid: "java.util.Map<java.lang.String,java.lang.String[]>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: "[]"
    fullName: "[]"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.common.implementation.StorageImplUtils.parseQueryStringSplitValues*"
  name: "parseQueryStringSplitValues"
  nameWithType: "StorageImplUtils.parseQueryStringSplitValues"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.parseQueryStringSplitValues"
  package: "com.azure.storage.common.implementation"
- uid: "reactor.core.publisher.Mono<T>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "java.time.Duration"
  spec.java:
  - uid: "java.time.Duration"
    name: "Duration"
    fullName: "java.time.Duration"
- uid: "T"
  spec.java:
  - uid: "T"
    name: "T"
    fullName: "T"
- uid: "com.azure.storage.common.implementation.StorageImplUtils.blockWithOptionalTimeout*"
  name: "<T>blockWithOptionalTimeout"
  nameWithType: "StorageImplUtils.<T>blockWithOptionalTimeout"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.<T>blockWithOptionalTimeout"
  package: "com.azure.storage.common.implementation"
- uid: "com.azure.storage.common.implementation.StorageImplUtils.applyOptionalTimeout*"
  name: "<T>applyOptionalTimeout"
  nameWithType: "StorageImplUtils.<T>applyOptionalTimeout"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.<T>applyOptionalTimeout"
  package: "com.azure.storage.common.implementation"
- uid: "reactor.core.publisher.Flux<T>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "com.azure.storage.common.implementation.StorageImplUtils.assertNotNull*"
  name: "assertNotNull"
  nameWithType: "StorageImplUtils.assertNotNull"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.assertNotNull"
  package: "com.azure.storage.common.implementation"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "com.azure.storage.common.implementation.StorageImplUtils.assertInBounds*"
  name: "assertInBounds"
  nameWithType: "StorageImplUtils.assertInBounds"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.assertInBounds"
  package: "com.azure.storage.common.implementation"
- uid: "com.azure.storage.common.implementation.StorageImplUtils.computeHMac256*"
  name: "computeHMac256"
  nameWithType: "StorageImplUtils.computeHMac256"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.computeHMac256"
  package: "com.azure.storage.common.implementation"
- uid: "java.net.URL"
  spec.java:
  - uid: "java.net.URL"
    name: "URL"
    fullName: "java.net.URL"
- uid: "com.azure.storage.common.implementation.StorageImplUtils.appendToUrlPath*"
  name: "appendToUrlPath"
  nameWithType: "StorageImplUtils.appendToUrlPath"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.appendToUrlPath"
  package: "com.azure.storage.common.implementation"
- uid: "com.azure.storage.common.implementation.StorageImplUtils.stripLastPathSegment*"
  name: "stripLastPathSegment"
  nameWithType: "StorageImplUtils.stripLastPathSegment"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.stripLastPathSegment"
  package: "com.azure.storage.common.implementation"
- uid: "com.azure.storage.common.implementation.StorageImplUtils.getAccountName*"
  name: "getAccountName"
  nameWithType: "StorageImplUtils.getAccountName"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.getAccountName"
  package: "com.azure.storage.common.implementation"
- uid: "com.azure.storage.common.implementation.StorageImplUtils.emptyIfNull*"
  name: "emptyIfNull"
  nameWithType: "StorageImplUtils.emptyIfNull"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.emptyIfNull"
  package: "com.azure.storage.common.implementation"
- uid: "java.io.IOException"
  spec.java:
  - uid: "java.io.IOException"
    name: "IOException"
    fullName: "java.io.IOException"
- uid: "java.io.InputStream"
  spec.java:
  - uid: "java.io.InputStream"
    name: "InputStream"
    fullName: "java.io.InputStream"
- uid: "java.io.OutputStream"
  spec.java:
  - uid: "java.io.OutputStream"
    name: "OutputStream"
    fullName: "java.io.OutputStream"
- uid: "com.azure.storage.common.implementation.StorageImplUtils.copyToOutputStream*"
  name: "copyToOutputStream"
  nameWithType: "StorageImplUtils.copyToOutputStream"
  fullName: "com.azure.storage.common.implementation.StorageImplUtils.copyToOutputStream"
  package: "com.azure.storage.common.implementation"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
- uid: "java.lang.String,java.lang.String[]"
  name: "String,String[]"
  nameWithType: "String,String[]"
  fullName: "java.lang.String,java.lang.String[]"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"
