### YamlMime:JavaType
uid: "com.azure.spring.integration.core.DefaultMessageHandler"
fullName: "com.azure.spring.integration.core.DefaultMessageHandler"
name: "DefaultMessageHandler"
nameWithType: "DefaultMessageHandler"
summary: "Base class of outbound adapter to publish to azure backed messaging service\n\nIt delegates real operation to <xref uid=\"com.azure.spring.integration.core.api.SendOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SendOperation\"></xref> which supports synchronous and asynchronous sending."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"org.springframework.integration.context.IntegrationObjectSupport\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"org.springframework.integration.handler.MessageHandlerSupport\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"org.springframework.integration.handler.AbstractMessageHandler\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"org.springframework.integration.handler.AbstractMessageProducingHandler\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
- "org.springframework.integration.context.IntegrationObjectSupport.<T>extractTypeIfPossible(java.lang.Object,java.lang.Class<T>)"
- "org.springframework.integration.context.IntegrationObjectSupport.<T>getIntegrationProperty(java.lang.String,java.lang.Class<T>)"
- "org.springframework.integration.context.IntegrationObjectSupport.afterPropertiesSet()"
- "org.springframework.integration.context.IntegrationObjectSupport.generateId()"
- "org.springframework.integration.context.IntegrationObjectSupport.getApplicationContext()"
- "org.springframework.integration.context.IntegrationObjectSupport.getApplicationContextId()"
- "org.springframework.integration.context.IntegrationObjectSupport.getBeanDescription()"
- "org.springframework.integration.context.IntegrationObjectSupport.getBeanFactory()"
- "org.springframework.integration.context.IntegrationObjectSupport.getBeanName()"
- "org.springframework.integration.context.IntegrationObjectSupport.getChannelResolver()"
- "org.springframework.integration.context.IntegrationObjectSupport.getComponentName()"
- "org.springframework.integration.context.IntegrationObjectSupport.getConversionService()"
- "org.springframework.integration.context.IntegrationObjectSupport.getExpression()"
- "org.springframework.integration.context.IntegrationObjectSupport.getIntegrationProperties()"
- "org.springframework.integration.context.IntegrationObjectSupport.getMessageBuilderFactory()"
- "org.springframework.integration.context.IntegrationObjectSupport.getTaskScheduler()"
- "org.springframework.integration.context.IntegrationObjectSupport.isInitialized()"
- "org.springframework.integration.context.IntegrationObjectSupport.setApplicationContext(org.springframework.context.ApplicationContext)"
- "org.springframework.integration.context.IntegrationObjectSupport.setBeanFactory(org.springframework.beans.factory.BeanFactory)"
- "org.springframework.integration.context.IntegrationObjectSupport.setBeanName(java.lang.String)"
- "org.springframework.integration.context.IntegrationObjectSupport.setChannelResolver(org.springframework.messaging.core.DestinationResolver<org.springframework.messaging.MessageChannel>)"
- "org.springframework.integration.context.IntegrationObjectSupport.setComponentName(java.lang.String)"
- "org.springframework.integration.context.IntegrationObjectSupport.setConversionService(org.springframework.core.convert.ConversionService)"
- "org.springframework.integration.context.IntegrationObjectSupport.setMessageBuilderFactory(org.springframework.integration.support.MessageBuilderFactory)"
- "org.springframework.integration.context.IntegrationObjectSupport.setPrimaryExpression(org.springframework.expression.Expression)"
- "org.springframework.integration.context.IntegrationObjectSupport.setTaskScheduler(org.springframework.scheduling.TaskScheduler)"
- "org.springframework.integration.context.IntegrationObjectSupport.toString()"
- "org.springframework.integration.handler.AbstractMessageHandler.handleMessage(org.springframework.messaging.Message<?>)"
- "org.springframework.integration.handler.AbstractMessageHandler.handleMessageInternal(org.springframework.messaging.Message<?>)"
- "org.springframework.integration.handler.AbstractMessageHandler.onComplete()"
- "org.springframework.integration.handler.AbstractMessageHandler.onError(java.lang.Throwable)"
- "org.springframework.integration.handler.AbstractMessageHandler.onNext(org.springframework.messaging.Message<?>)"
- "org.springframework.integration.handler.AbstractMessageHandler.onSubscribe(org.reactivestreams.Subscription)"
- "org.springframework.integration.handler.AbstractMessageProducingHandler.addNotPropagatedHeaders(java.lang.String...)"
- "org.springframework.integration.handler.AbstractMessageProducingHandler.createOutputMessage(java.lang.Object,org.springframework.messaging.MessageHeaders)"
- "org.springframework.integration.handler.AbstractMessageProducingHandler.getNotPropagatedHeaders()"
- "org.springframework.integration.handler.AbstractMessageProducingHandler.getOutputChannel()"
- "org.springframework.integration.handler.AbstractMessageProducingHandler.isAsync()"
- "org.springframework.integration.handler.AbstractMessageProducingHandler.messageBuilderForReply(java.lang.Object)"
- "org.springframework.integration.handler.AbstractMessageProducingHandler.onInit()"
- "org.springframework.integration.handler.AbstractMessageProducingHandler.produceOutput(java.lang.Object,org.springframework.messaging.Message<?>)"
- "org.springframework.integration.handler.AbstractMessageProducingHandler.resolveErrorChannel(org.springframework.messaging.MessageHeaders)"
- "org.springframework.integration.handler.AbstractMessageProducingHandler.sendErrorMessage(org.springframework.messaging.Message<?>,java.lang.Throwable)"
- "org.springframework.integration.handler.AbstractMessageProducingHandler.sendOutput(java.lang.Object,java.lang.Object,boolean)"
- "org.springframework.integration.handler.AbstractMessageProducingHandler.sendOutputs(java.lang.Object,org.springframework.messaging.Message<?>)"
- "org.springframework.integration.handler.AbstractMessageProducingHandler.setAsync(boolean)"
- "org.springframework.integration.handler.AbstractMessageProducingHandler.setNotPropagatedHeaders(java.lang.String...)"
- "org.springframework.integration.handler.AbstractMessageProducingHandler.setOutputChannel(org.springframework.messaging.MessageChannel)"
- "org.springframework.integration.handler.AbstractMessageProducingHandler.setOutputChannelName(java.lang.String)"
- "org.springframework.integration.handler.AbstractMessageProducingHandler.setSendTimeout(long)"
- "org.springframework.integration.handler.AbstractMessageProducingHandler.shouldCopyRequestHeaders()"
- "org.springframework.integration.handler.AbstractMessageProducingHandler.shouldSplitOutput(java.lang.Iterable<?>)"
- "org.springframework.integration.handler.AbstractMessageProducingHandler.updateNotPropagatedHeaders(java.lang.String[],boolean)"
- "org.springframework.integration.handler.MessageHandlerSupport.buildSendTimer(boolean,java.lang.String)"
- "org.springframework.integration.handler.MessageHandlerSupport.configureMetrics(org.springframework.integration.support.management.AbstractMessageHandlerMetrics)"
- "org.springframework.integration.handler.MessageHandlerSupport.destroy()"
- "org.springframework.integration.handler.MessageHandlerSupport.getActiveCount()"
- "org.springframework.integration.handler.MessageHandlerSupport.getActiveCountLong()"
- "org.springframework.integration.handler.MessageHandlerSupport.getComponentType()"
- "org.springframework.integration.handler.MessageHandlerSupport.getDuration()"
- "org.springframework.integration.handler.MessageHandlerSupport.getErrorCount()"
- "org.springframework.integration.handler.MessageHandlerSupport.getErrorCountLong()"
- "org.springframework.integration.handler.MessageHandlerSupport.getHandleCount()"
- "org.springframework.integration.handler.MessageHandlerSupport.getHandleCountLong()"
- "org.springframework.integration.handler.MessageHandlerSupport.getHandlerMetrics()"
- "org.springframework.integration.handler.MessageHandlerSupport.getIntegrationPatternType()"
- "org.springframework.integration.handler.MessageHandlerSupport.getManagedName()"
- "org.springframework.integration.handler.MessageHandlerSupport.getManagedType()"
- "org.springframework.integration.handler.MessageHandlerSupport.getMaxDuration()"
- "org.springframework.integration.handler.MessageHandlerSupport.getMeanDuration()"
- "org.springframework.integration.handler.MessageHandlerSupport.getMetricsCaptor()"
- "org.springframework.integration.handler.MessageHandlerSupport.getMinDuration()"
- "org.springframework.integration.handler.MessageHandlerSupport.getOrder()"
- "org.springframework.integration.handler.MessageHandlerSupport.getOverrides()"
- "org.springframework.integration.handler.MessageHandlerSupport.getStandardDeviationDuration()"
- "org.springframework.integration.handler.MessageHandlerSupport.isCountsEnabled()"
- "org.springframework.integration.handler.MessageHandlerSupport.isLoggingEnabled()"
- "org.springframework.integration.handler.MessageHandlerSupport.isStatsEnabled()"
- "org.springframework.integration.handler.MessageHandlerSupport.registerMetricsCaptor(org.springframework.integration.support.management.metrics.MetricsCaptor)"
- "org.springframework.integration.handler.MessageHandlerSupport.reset()"
- "org.springframework.integration.handler.MessageHandlerSupport.sendTimer()"
- "org.springframework.integration.handler.MessageHandlerSupport.setCountsEnabled(boolean)"
- "org.springframework.integration.handler.MessageHandlerSupport.setLoggingEnabled(boolean)"
- "org.springframework.integration.handler.MessageHandlerSupport.setManagedName(java.lang.String)"
- "org.springframework.integration.handler.MessageHandlerSupport.setManagedType(java.lang.String)"
- "org.springframework.integration.handler.MessageHandlerSupport.setOrder(int)"
- "org.springframework.integration.handler.MessageHandlerSupport.setShouldTrack(boolean)"
- "org.springframework.integration.handler.MessageHandlerSupport.setStatsEnabled(boolean)"
- "org.springframework.integration.handler.MessageHandlerSupport.shouldTrack()"
syntax: "public class DefaultMessageHandler extends AbstractMessageProducingHandler"
constructors:
- "com.azure.spring.integration.core.DefaultMessageHandler.DefaultMessageHandler(java.lang.String,com.azure.spring.integration.core.api.SendOperation)"
methods:
- "com.azure.spring.integration.core.DefaultMessageHandler.getErrorMessageStrategy()"
- "com.azure.spring.integration.core.DefaultMessageHandler.getSendFailureChannel()"
- "com.azure.spring.integration.core.DefaultMessageHandler.getSendTimeoutExpression()"
- "com.azure.spring.integration.core.DefaultMessageHandler.handleMessageInternal(org.springframework.messaging.Message<?>)"
- "com.azure.spring.integration.core.DefaultMessageHandler.onInit()"
- "com.azure.spring.integration.core.DefaultMessageHandler.setErrorMessageStrategy(org.springframework.integration.support.ErrorMessageStrategy)"
- "com.azure.spring.integration.core.DefaultMessageHandler.setPartitionKey(java.lang.String)"
- "com.azure.spring.integration.core.DefaultMessageHandler.setPartitionKeyExpression(org.springframework.expression.Expression)"
- "com.azure.spring.integration.core.DefaultMessageHandler.setPartitionKeyExpressionString(java.lang.String)"
- "com.azure.spring.integration.core.DefaultMessageHandler.setSendCallback(org.springframework.util.concurrent.ListenableFutureCallback<java.lang.Void>)"
- "com.azure.spring.integration.core.DefaultMessageHandler.setSendFailureChannel(org.springframework.messaging.MessageChannel)"
- "com.azure.spring.integration.core.DefaultMessageHandler.setSendFailureChannelName(java.lang.String)"
- "com.azure.spring.integration.core.DefaultMessageHandler.setSendTimeout(long)"
- "com.azure.spring.integration.core.DefaultMessageHandler.setSendTimeoutExpression(org.springframework.expression.Expression)"
- "com.azure.spring.integration.core.DefaultMessageHandler.setSync(boolean)"
type: "class"
metadata: {}
package: "com.azure.spring.integration.core"
artifact: com.azure.spring:azure-spring-integration-core:2.0.0
