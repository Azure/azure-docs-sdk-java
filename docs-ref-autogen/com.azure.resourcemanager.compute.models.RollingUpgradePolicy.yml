### YamlMime:JavaType
uid: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy"
fullName: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy"
name: "RollingUpgradePolicy"
nameWithType: "RollingUpgradePolicy"
summary: "The configuration parameters used while performing a rolling upgrade."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class RollingUpgradePolicy"
constructors:
- uid: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.RollingUpgradePolicy()"
  fullName: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.RollingUpgradePolicy()"
  name: "RollingUpgradePolicy()"
  nameWithType: "RollingUpgradePolicy.RollingUpgradePolicy()"
  syntax: "public RollingUpgradePolicy()"
methods:
- uid: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.enableCrossZoneUpgrade()"
  fullName: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.enableCrossZoneUpgrade()"
  name: "enableCrossZoneUpgrade()"
  nameWithType: "RollingUpgradePolicy.enableCrossZoneUpgrade()"
  summary: "Get the enableCrossZoneUpgrade property: Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent to determine the batch size."
  syntax: "public Boolean enableCrossZoneUpgrade()"
  returns:
    description: "the enableCrossZoneUpgrade value."
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxBatchInstancePercent()"
  fullName: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxBatchInstancePercent()"
  name: "maxBatchInstancePercent()"
  nameWithType: "RollingUpgradePolicy.maxBatchInstancePercent()"
  summary: "Get the maxBatchInstancePercent property: The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%."
  syntax: "public Integer maxBatchInstancePercent()"
  returns:
    description: "the maxBatchInstancePercent value."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxUnhealthyInstancePercent()"
  fullName: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxUnhealthyInstancePercent()"
  name: "maxUnhealthyInstancePercent()"
  nameWithType: "RollingUpgradePolicy.maxUnhealthyInstancePercent()"
  summary: "Get the maxUnhealthyInstancePercent property: The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%."
  syntax: "public Integer maxUnhealthyInstancePercent()"
  returns:
    description: "the maxUnhealthyInstancePercent value."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxUnhealthyUpgradedInstancePercent()"
  fullName: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.maxUnhealthyUpgradedInstancePercent()"
  name: "maxUnhealthyUpgradedInstancePercent()"
  nameWithType: "RollingUpgradePolicy.maxUnhealthyUpgradedInstancePercent()"
  summary: "Get the maxUnhealthyUpgradedInstancePercent property: The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%."
  syntax: "public Integer maxUnhealthyUpgradedInstancePercent()"
  returns:
    description: "the maxUnhealthyUpgradedInstancePercent value."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.pauseTimeBetweenBatches()"
  fullName: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.pauseTimeBetweenBatches()"
  name: "pauseTimeBetweenBatches()"
  nameWithType: "RollingUpgradePolicy.pauseTimeBetweenBatches()"
  summary: "Get the pauseTimeBetweenBatches property: The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S)."
  syntax: "public String pauseTimeBetweenBatches()"
  returns:
    description: "the pauseTimeBetweenBatches value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.prioritizeUnhealthyInstances()"
  fullName: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.prioritizeUnhealthyInstances()"
  name: "prioritizeUnhealthyInstances()"
  nameWithType: "RollingUpgradePolicy.prioritizeUnhealthyInstances()"
  summary: "Get the prioritizeUnhealthyInstances property: Upgrade all unhealthy instances in a scale set before any healthy instances."
  syntax: "public Boolean prioritizeUnhealthyInstances()"
  returns:
    description: "the prioritizeUnhealthyInstances value."
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.validate()"
  fullName: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.validate()"
  name: "validate()"
  nameWithType: "RollingUpgradePolicy.validate()"
  summary: "Validates the instance."
  syntax: "public void validate()"
- uid: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withEnableCrossZoneUpgrade(java.lang.Boolean)"
  fullName: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withEnableCrossZoneUpgrade(Boolean enableCrossZoneUpgrade)"
  name: "withEnableCrossZoneUpgrade(Boolean enableCrossZoneUpgrade)"
  nameWithType: "RollingUpgradePolicy.withEnableCrossZoneUpgrade(Boolean enableCrossZoneUpgrade)"
  summary: "Set the enableCrossZoneUpgrade property: Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent to determine the batch size."
  parameters:
  - description: "the enableCrossZoneUpgrade value to set."
    name: "enableCrossZoneUpgrade"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RollingUpgradePolicy withEnableCrossZoneUpgrade(Boolean enableCrossZoneUpgrade)"
  returns:
    description: "the RollingUpgradePolicy object itself."
    type: "<xref href=\"com.azure.resourcemanager.compute.models.RollingUpgradePolicy?alt=com.azure.resourcemanager.compute.models.RollingUpgradePolicy&text=RollingUpgradePolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxBatchInstancePercent(java.lang.Integer)"
  fullName: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxBatchInstancePercent(Integer maxBatchInstancePercent)"
  name: "withMaxBatchInstancePercent(Integer maxBatchInstancePercent)"
  nameWithType: "RollingUpgradePolicy.withMaxBatchInstancePercent(Integer maxBatchInstancePercent)"
  summary: "Set the maxBatchInstancePercent property: The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%."
  parameters:
  - description: "the maxBatchInstancePercent value to set."
    name: "maxBatchInstancePercent"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RollingUpgradePolicy withMaxBatchInstancePercent(Integer maxBatchInstancePercent)"
  returns:
    description: "the RollingUpgradePolicy object itself."
    type: "<xref href=\"com.azure.resourcemanager.compute.models.RollingUpgradePolicy?alt=com.azure.resourcemanager.compute.models.RollingUpgradePolicy&text=RollingUpgradePolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxUnhealthyInstancePercent(java.lang.Integer)"
  fullName: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxUnhealthyInstancePercent(Integer maxUnhealthyInstancePercent)"
  name: "withMaxUnhealthyInstancePercent(Integer maxUnhealthyInstancePercent)"
  nameWithType: "RollingUpgradePolicy.withMaxUnhealthyInstancePercent(Integer maxUnhealthyInstancePercent)"
  summary: "Set the maxUnhealthyInstancePercent property: The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%."
  parameters:
  - description: "the maxUnhealthyInstancePercent value to set."
    name: "maxUnhealthyInstancePercent"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RollingUpgradePolicy withMaxUnhealthyInstancePercent(Integer maxUnhealthyInstancePercent)"
  returns:
    description: "the RollingUpgradePolicy object itself."
    type: "<xref href=\"com.azure.resourcemanager.compute.models.RollingUpgradePolicy?alt=com.azure.resourcemanager.compute.models.RollingUpgradePolicy&text=RollingUpgradePolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxUnhealthyUpgradedInstancePercent(java.lang.Integer)"
  fullName: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withMaxUnhealthyUpgradedInstancePercent(Integer maxUnhealthyUpgradedInstancePercent)"
  name: "withMaxUnhealthyUpgradedInstancePercent(Integer maxUnhealthyUpgradedInstancePercent)"
  nameWithType: "RollingUpgradePolicy.withMaxUnhealthyUpgradedInstancePercent(Integer maxUnhealthyUpgradedInstancePercent)"
  summary: "Set the maxUnhealthyUpgradedInstancePercent property: The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%."
  parameters:
  - description: "the maxUnhealthyUpgradedInstancePercent value to set."
    name: "maxUnhealthyUpgradedInstancePercent"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RollingUpgradePolicy withMaxUnhealthyUpgradedInstancePercent(Integer maxUnhealthyUpgradedInstancePercent)"
  returns:
    description: "the RollingUpgradePolicy object itself."
    type: "<xref href=\"com.azure.resourcemanager.compute.models.RollingUpgradePolicy?alt=com.azure.resourcemanager.compute.models.RollingUpgradePolicy&text=RollingUpgradePolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withPauseTimeBetweenBatches(java.lang.String)"
  fullName: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withPauseTimeBetweenBatches(String pauseTimeBetweenBatches)"
  name: "withPauseTimeBetweenBatches(String pauseTimeBetweenBatches)"
  nameWithType: "RollingUpgradePolicy.withPauseTimeBetweenBatches(String pauseTimeBetweenBatches)"
  summary: "Set the pauseTimeBetweenBatches property: The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S)."
  parameters:
  - description: "the pauseTimeBetweenBatches value to set."
    name: "pauseTimeBetweenBatches"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RollingUpgradePolicy withPauseTimeBetweenBatches(String pauseTimeBetweenBatches)"
  returns:
    description: "the RollingUpgradePolicy object itself."
    type: "<xref href=\"com.azure.resourcemanager.compute.models.RollingUpgradePolicy?alt=com.azure.resourcemanager.compute.models.RollingUpgradePolicy&text=RollingUpgradePolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withPrioritizeUnhealthyInstances(java.lang.Boolean)"
  fullName: "com.azure.resourcemanager.compute.models.RollingUpgradePolicy.withPrioritizeUnhealthyInstances(Boolean prioritizeUnhealthyInstances)"
  name: "withPrioritizeUnhealthyInstances(Boolean prioritizeUnhealthyInstances)"
  nameWithType: "RollingUpgradePolicy.withPrioritizeUnhealthyInstances(Boolean prioritizeUnhealthyInstances)"
  summary: "Set the prioritizeUnhealthyInstances property: Upgrade all unhealthy instances in a scale set before any healthy instances."
  parameters:
  - description: "the prioritizeUnhealthyInstances value to set."
    name: "prioritizeUnhealthyInstances"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RollingUpgradePolicy withPrioritizeUnhealthyInstances(Boolean prioritizeUnhealthyInstances)"
  returns:
    description: "the RollingUpgradePolicy object itself."
    type: "<xref href=\"com.azure.resourcemanager.compute.models.RollingUpgradePolicy?alt=com.azure.resourcemanager.compute.models.RollingUpgradePolicy&text=RollingUpgradePolicy\" data-throw-if-not-resolved=\"False\" />"
type: "class"
metadata: {}
package: "com.azure.resourcemanager.compute.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-compute:2.14.0
