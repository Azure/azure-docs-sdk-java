### YamlMime:JavaType
methods:
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.addOrUpdateStateAsync(String stateName, T addValue, BiFunction<String, T, T> updateValueFactory)
  name: addOrUpdateStateAsync(String stateName, T addValue, BiFunction<String, T, T> updateValueFactory)
  nameWithType: ActorStateManager.addOrUpdateStateAsync(String stateName, T addValue, BiFunction<String, T, T> updateValueFactory)
  parameters:
  - description: <p>Name of the actor state to add or get. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Value of the actor state to add if it doesn't exist. </p>
    name: addValue
    type: <xref href="T?alt=T&text=T" data-throw-if-not-resolved="False"/>
  - description: <p>Factory function to generate value of actor state to update if it exists. </p>
    name: updateValueFactory
    type: <xref href="BiFunction%3CString%2C+T%2C+T%3E?alt=BiFunction%3CString%2C+T%2C+T%3E&text=BiFunction%3CString%2C+T%2C+T%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous add/update operation. The value of T parameter contains value of actor state that was added/updated. </p>
    type: <xref href="%3CT%3E+CompletableFuture%3CT%3E?alt=%3CT%3E+CompletableFuture%3CT%3E&text=%3CT%3E+CompletableFuture%3CT%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds an actor state with given state name, if it does not already exist or updates specified state name and value, if it does not exist.</p>

    <p></p>
  syntax: public <T> CompletableFuture<T> addOrUpdateStateAsync(String stateName, T addValue, BiFunction<String, T, T> updateValueFactory)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.addOrUpdateStateAsync(String,T,BiFunction<String, T, T>)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.addOrUpdateStateAsync(String stateName, T addValue, BiFunction<String, T, T> updateValueFactory, CancellationToken cancellationToken)
  name: addOrUpdateStateAsync(String stateName, T addValue, BiFunction<String, T, T> updateValueFactory, CancellationToken cancellationToken)
  nameWithType: ActorStateManager.addOrUpdateStateAsync(String stateName, T addValue, BiFunction<String, T, T> updateValueFactory, CancellationToken cancellationToken)
  parameters:
  - description: <p>Name of the actor state to add or get. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Value of the actor state to add if it doesn't exist. </p>
    name: addValue
    type: <xref href="T?alt=T&text=T" data-throw-if-not-resolved="False"/>
  - description: <p>Factory function to generate value of actor state to update if it exists. </p>
    name: updateValueFactory
    type: <xref href="BiFunction%3CString%2C+T%2C+T%3E?alt=BiFunction%3CString%2C+T%2C+T%3E&text=BiFunction%3CString%2C+T%2C+T%3E" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous add/update operation. The value of T parameter contains value of actor state that was added/updated. </p>
    type: <xref href="%3CT%3E+CompletableFuture%3CT%3E?alt=%3CT%3E+CompletableFuture%3CT%3E&text=%3CT%3E+CompletableFuture%3CT%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds an actor state with given state name, if it does not already exist or updates specified state name and value, if it does not exist.</p>

    <p></p>
  syntax: public <T> CompletableFuture<T> addOrUpdateStateAsync(String stateName, T addValue, BiFunction<String, T, T> updateValueFactory, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.addOrUpdateStateAsync(String,T,BiFunction<String, T, T>,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.addStateAsync(String stateName, T value)
  name: addStateAsync(String stateName, T value)
  nameWithType: ActorStateManager.addStateAsync(String stateName, T value)
  parameters:
  - description: <p>Name of the actor state to add. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Value of the actor state to add. </p>
    name: value
    type: <xref href="T?alt=T&text=T" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous add operation. </p>
    type: <xref href="%3CT%3E+CompletableFuture%3C%3F%3E?alt=%3CT%3E+CompletableFuture%3C%3F%3E&text=%3CT%3E+CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds an actor state with given state name.</p>

    <p></p>
  syntax: public <T> CompletableFuture<?> addStateAsync(String stateName, T value)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.addStateAsync(String,T)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.addStateAsync(String stateName, T value, CancellationToken cancellationToken)
  name: addStateAsync(String stateName, T value, CancellationToken cancellationToken)
  nameWithType: ActorStateManager.addStateAsync(String stateName, T value, CancellationToken cancellationToken)
  parameters:
  - description: <p>Name of the actor state to add. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Value of the actor state to add. </p>
    name: value
    type: <xref href="T?alt=T&text=T" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous add operation. </p>
    type: <xref href="%3CT%3E+CompletableFuture%3C%3F%3E?alt=%3CT%3E+CompletableFuture%3C%3F%3E&text=%3CT%3E+CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds an actor state with given state name.</p>

    <p></p>
  syntax: public <T> CompletableFuture<?> addStateAsync(String stateName, T value, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.addStateAsync(String,T,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.clearCacheAsync()
  name: clearCacheAsync()
  nameWithType: ActorStateManager.clearCacheAsync()
  returns:
    description: <p>A task that represents the asynchronous clear cache operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Clears all the cached actor states and any operation(s) performed on <xref uid="microsoft.servicefabric.actors.runtime.ActorStateManager" data-throw-if-not-resolved="false" data-raw-source="ActorStateManager"></xref> since last state save operation.</p>

    <p>

      <b>Remarks:</b> All the operation(s) performed on <xref uid="microsoft.servicefabric.actors.runtime.ActorStateManager" data-throw-if-not-resolved="false" data-raw-source="ActorStateManager"></xref> since last save operation are cleared on clearing the cache and will not be included in next save operation. </p>
  syntax: public CompletableFuture<?> clearCacheAsync()
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.clearCacheAsync()
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.clearCacheAsync(CancellationToken cancellationToken)
  name: clearCacheAsync(CancellationToken cancellationToken)
  nameWithType: ActorStateManager.clearCacheAsync(CancellationToken cancellationToken)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous clear cache operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Clears all the cached actor states and any operation(s) performed on <xref uid="microsoft.servicefabric.actors.runtime.ActorStateManager" data-throw-if-not-resolved="false" data-raw-source="ActorStateManager"></xref> since last state save operation.</p>

    <p>

      <b>Remarks:</b> All the operation(s) performed on <xref uid="microsoft.servicefabric.actors.runtime.ActorStateManager" data-throw-if-not-resolved="false" data-raw-source="ActorStateManager"></xref> since last save operation are cleared on clearing the cache and will not be included in next save operation. </p>
  syntax: public CompletableFuture<?> clearCacheAsync(CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.clearCacheAsync(CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.containsStateAsync(String stateName)
  name: containsStateAsync(String stateName)
  nameWithType: ActorStateManager.containsStateAsync(String stateName)
  parameters:
  - description: <p>Name of the actor state. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous check operation. The value of T parameter is true if state with specified name exists otherwise false. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks if an actor state with specified name exists.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> containsStateAsync(String stateName)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.containsStateAsync(String)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.containsStateAsync(String stateName, CancellationToken cancellationToken)
  name: containsStateAsync(String stateName, CancellationToken cancellationToken)
  nameWithType: ActorStateManager.containsStateAsync(String stateName, CancellationToken cancellationToken)
  parameters:
  - description: <p>Name of the actor state. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous check operation. The value of T parameter is true if state with specified name exists otherwise false. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks if an actor state with specified name exists.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> containsStateAsync(String stateName, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.containsStateAsync(String,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.getOrAddStateAsync(String stateName, T value)
  name: getOrAddStateAsync(String stateName, T value)
  nameWithType: ActorStateManager.getOrAddStateAsync(String stateName, T value)
  parameters:
  - description: <p>Name of the actor state to add/update. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Value of the actor state to add /update. </p>
    name: value
    type: <xref href="T?alt=T&text=T" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous add or get operation. The value of T parameter contains the value of the actor state with the given state. </p>
    type: <xref href="%3CT%3E+CompletableFuture%3CT%3E?alt=%3CT%3E+CompletableFuture%3CT%3E&text=%3CT%3E+CompletableFuture%3CT%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets an actor state with given state name, if it exists or adds the state with the state with specified state name, if it exists.</p>

    <p></p>
  syntax: public <T> CompletableFuture<T> getOrAddStateAsync(String stateName, T value)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.getOrAddStateAsync(String,T)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.getOrAddStateAsync(String stateName, T value, CancellationToken cancellationToken)
  name: getOrAddStateAsync(String stateName, T value, CancellationToken cancellationToken)
  nameWithType: ActorStateManager.getOrAddStateAsync(String stateName, T value, CancellationToken cancellationToken)
  parameters:
  - description: <p>Name of the actor state to add/update. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Value of the actor state to add /update. </p>
    name: value
    type: <xref href="T?alt=T&text=T" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous add or get operation. The value of T parameter contains the value of the actor state with the given state. </p>
    type: <xref href="%3CT%3E+CompletableFuture%3CT%3E?alt=%3CT%3E+CompletableFuture%3CT%3E&text=%3CT%3E+CompletableFuture%3CT%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets an actor state with given state name, if it exists or adds the state with the state with specified state name, if it exists.</p>

    <p></p>
  syntax: public <T> CompletableFuture<T> getOrAddStateAsync(String stateName, T value, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.getOrAddStateAsync(String,T,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.getStateAsync(String stateName)
  name: getStateAsync(String stateName)
  nameWithType: ActorStateManager.getStateAsync(String stateName)
  parameters:
  - description: <p>Name of the actor state to add. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous get operation. The value of T parameter contains value of actor state with given state name. </p>
    type: <xref href="%3CT%3E+CompletableFuture%3CT%3E?alt=%3CT%3E+CompletableFuture%3CT%3E&text=%3CT%3E+CompletableFuture%3CT%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets an actor state with specified state name.</p>

    <p></p>
  syntax: public <T> CompletableFuture<T> getStateAsync(String stateName)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.getStateAsync(String)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.getStateAsync(String stateName, CancellationToken cancellationToken)
  name: getStateAsync(String stateName, CancellationToken cancellationToken)
  nameWithType: ActorStateManager.getStateAsync(String stateName, CancellationToken cancellationToken)
  parameters:
  - description: <p>Name of the actor state to add. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous get operation. The value of T parameter contains value of actor state with given state name. </p>
    type: <xref href="%3CT%3E+CompletableFuture%3CT%3E?alt=%3CT%3E+CompletableFuture%3CT%3E&text=%3CT%3E+CompletableFuture%3CT%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets an actor state with specified state name.</p>

    <p></p>
  syntax: public <T> CompletableFuture<T> getStateAsync(String stateName, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.getStateAsync(String,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.getStateNamesAsync()
  name: getStateNamesAsync()
  nameWithType: ActorStateManager.getStateNamesAsync()
  returns:
    description: <p>A task that represents the asynchronous enumeration operation. The value of T parameter is an enumerable of all actor state names. </p>
    type: <xref href="CompletableFuture%3CList%3CString%3E%3E?alt=CompletableFuture%3CList%3CString%3E%3E&text=CompletableFuture%3CList%3CString%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an List of all actor state names for current actor.</p>

    <p></p>
  syntax: public CompletableFuture<List<String>> getStateNamesAsync()
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.getStateNamesAsync()
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.getStateNamesAsync(CancellationToken cancellationToken)
  name: getStateNamesAsync(CancellationToken cancellationToken)
  nameWithType: ActorStateManager.getStateNamesAsync(CancellationToken cancellationToken)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous enumeration operation. The value of T parameter is an enumerable of all actor state names. </p>
    type: <xref href="CompletableFuture%3CList%3CString%3E%3E?alt=CompletableFuture%3CList%3CString%3E%3E&text=CompletableFuture%3CList%3CString%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an List of all actor state names for current actor.</p>

    <p></p>
  syntax: public CompletableFuture<List<String>> getStateNamesAsync(CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.getStateNamesAsync(CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.removeStateAsync(String stateName)
  name: removeStateAsync(String stateName)
  nameWithType: ActorStateManager.removeStateAsync(String stateName)
  parameters:
  - description: <p>Name of the actor state to remove. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous remove operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes an actor state with given state name to specified value.</p>

    <p></p>
  syntax: public CompletableFuture<?> removeStateAsync(String stateName)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.removeStateAsync(String)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.removeStateAsync(String stateName, CancellationToken cancellationToken)
  name: removeStateAsync(String stateName, CancellationToken cancellationToken)
  nameWithType: ActorStateManager.removeStateAsync(String stateName, CancellationToken cancellationToken)
  parameters:
  - description: <p>Name of the actor state to remove. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous remove operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes an actor state with given state name to specified value.</p>

    <p></p>
  syntax: public CompletableFuture<?> removeStateAsync(String stateName, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.removeStateAsync(String,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.saveStateAsync()
  name: saveStateAsync()
  nameWithType: ActorStateManager.saveStateAsync()
  returns:
    description: <p>A task that represents the asynchronous save operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Saves all the cached state changes (add/update/remove) that were made since last call to <xref uid="microsoft.servicefabric.actors.runtime.ActorStateManager.saveStateAsync(CancellationToken)" data-throw-if-not-resolved="false" data-raw-source="ActorStateManager#saveStateAsync(CancellationToken)"></xref> by actor runtime or by user explicitly.</p>

    <p></p>
  syntax: public CompletableFuture<?> saveStateAsync()
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.saveStateAsync()
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.saveStateAsync(CancellationToken cancellationToken)
  name: saveStateAsync(CancellationToken cancellationToken)
  nameWithType: ActorStateManager.saveStateAsync(CancellationToken cancellationToken)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous save operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Saves all the cached state changes (add/update/remove) that were made since last call to <xref uid="microsoft.servicefabric.actors.runtime.ActorStateManager.saveStateAsync(CancellationToken)" data-throw-if-not-resolved="false" data-raw-source="ActorStateManager#saveStateAsync(CancellationToken)"></xref> by actor runtime or by user explicitly.</p>

    <p></p>
  syntax: public CompletableFuture<?> saveStateAsync(CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.saveStateAsync(CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.setStateAsync(String stateName, T value)
  name: setStateAsync(String stateName, T value)
  nameWithType: ActorStateManager.setStateAsync(String stateName, T value)
  parameters:
  - description: <p>Name of the actor state to set. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Value of the actor state to set. </p>
    name: value
    type: <xref href="T?alt=T&text=T" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous set operation. </p>
    type: <xref href="%3CT%3E+CompletableFuture%3C%3F%3E?alt=%3CT%3E+CompletableFuture%3C%3F%3E&text=%3CT%3E+CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes an actor state with specified state name. If an actor state with specified name does not exist, it is added.</p>

    <p></p>
  syntax: public <T> CompletableFuture<?> setStateAsync(String stateName, T value)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.setStateAsync(String,T)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.setStateAsync(String stateName, T value, CancellationToken cancellationToken)
  name: setStateAsync(String stateName, T value, CancellationToken cancellationToken)
  nameWithType: ActorStateManager.setStateAsync(String stateName, T value, CancellationToken cancellationToken)
  parameters:
  - description: <p>Name of the actor state to set. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Value of the actor state to set. </p>
    name: value
    type: <xref href="T?alt=T&text=T" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous set operation. </p>
    type: <xref href="%3CT%3E+CompletableFuture%3C%3F%3E?alt=%3CT%3E+CompletableFuture%3C%3F%3E&text=%3CT%3E+CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes an actor state with specified state name. If an actor state with specified name does not exist, it is added.</p>

    <p></p>
  syntax: public <T> CompletableFuture<?> setStateAsync(String stateName, T value, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.setStateAsync(String,T,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.tryAddStateAsync(String stateName, T value)
  name: tryAddStateAsync(String stateName, T value)
  nameWithType: ActorStateManager.tryAddStateAsync(String stateName, T value)
  parameters:
  - description: <p>Name of the actor state to add. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Value of the actor state to add. </p>
    name: value
    type: <xref href="T?alt=T&text=T" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous add operation. The value of T parameter indicates if the state was successfully added. </p>
    type: <xref href="%3CT%3E+CompletableFuture%3CBoolean%3E?alt=%3CT%3E+CompletableFuture%3CBoolean%3E&text=%3CT%3E+CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Attempts to add an actor state with given state name.</p>

    <p></p>
  syntax: public <T> CompletableFuture<Boolean> tryAddStateAsync(String stateName, T value)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.tryAddStateAsync(String,T)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.tryAddStateAsync(String stateName, T value, CancellationToken cancellationToken)
  name: tryAddStateAsync(String stateName, T value, CancellationToken cancellationToken)
  nameWithType: ActorStateManager.tryAddStateAsync(String stateName, T value, CancellationToken cancellationToken)
  parameters:
  - description: <p>Name of the actor state to add. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Value of the actor state to add. </p>
    name: value
    type: <xref href="T?alt=T&text=T" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous add operation. The value of T parameter indicates if the state was successfully added. </p>
    type: <xref href="%3CT%3E+CompletableFuture%3CBoolean%3E?alt=%3CT%3E+CompletableFuture%3CBoolean%3E&text=%3CT%3E+CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Attempts to add an actor state with given state name.</p>

    <p></p>
  syntax: public <T> CompletableFuture<Boolean> tryAddStateAsync(String stateName, T value, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.tryAddStateAsync(String,T,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.tryGetStateAsync(String stateName)
  name: tryGetStateAsync(String stateName)
  nameWithType: ActorStateManager.tryGetStateAsync(String stateName)
  parameters:
  - description: <p>Name of the actor state to get. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous get operation. The value of T parameter contains <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ConditionalValue"></xref> indicating whether the actor state is present and the value of actor state if it is present. </p>
    type: '&lt;T&gt; CompletableFuture&lt;<xref href="microsoft.servicefabric.data.ConditionalValue?alt=microsoft.servicefabric.data.ConditionalValue&text=ConditionalValue" data-throw-if-not-resolved="False"/>&lt;T&gt;&gt;'
  summary: >-
    <p>Attempts to get an actor state with specified state name.</p>

    <p></p>
  syntax: public <T> CompletableFuture<ConditionalValue<T>> tryGetStateAsync(String stateName)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.tryGetStateAsync(String)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.tryGetStateAsync(String stateName, CancellationToken cancellationToken)
  name: tryGetStateAsync(String stateName, CancellationToken cancellationToken)
  nameWithType: ActorStateManager.tryGetStateAsync(String stateName, CancellationToken cancellationToken)
  parameters:
  - description: <p>Name of the actor state to get. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous get operation. The value of T parameter contains <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ConditionalValue"></xref> indicating whether the actor state is present and the value of actor state if it is present. </p>
    type: '&lt;T&gt; CompletableFuture&lt;<xref href="microsoft.servicefabric.data.ConditionalValue?alt=microsoft.servicefabric.data.ConditionalValue&text=ConditionalValue" data-throw-if-not-resolved="False"/>&lt;T&gt;&gt;'
  summary: >-
    <p>Attempts to get an actor state with specified state name.</p>

    <p></p>
  syntax: public <T> CompletableFuture<ConditionalValue<T>> tryGetStateAsync(String stateName, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.tryGetStateAsync(String,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.tryRemoveStateAsync(String stateName)
  name: tryRemoveStateAsync(String stateName)
  nameWithType: ActorStateManager.tryRemoveStateAsync(String stateName)
  parameters:
  - description: <p>Name of the actor state to remove. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous remove operation. The value of T parameter indicates if the state was successfully removed. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Attempts to remove an actor state with specified state name.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> tryRemoveStateAsync(String stateName)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.tryRemoveStateAsync(String)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateManager.tryRemoveStateAsync(String stateName, CancellationToken cancellationToken)
  name: tryRemoveStateAsync(String stateName, CancellationToken cancellationToken)
  nameWithType: ActorStateManager.tryRemoveStateAsync(String stateName, CancellationToken cancellationToken)
  parameters:
  - description: <p>Name of the actor state to remove. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous remove operation. The value of T parameter indicates if the state was successfully removed. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Attempts to remove an actor state with specified state name.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> tryRemoveStateAsync(String stateName, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateManager.tryRemoveStateAsync(String,CancellationToken)
nameWithType: ActorStateManager
syntax: public interface ActorStateManager
type: interface
uid: microsoft.servicefabric.actors.runtime.ActorStateManager
fullName: microsoft.servicefabric.actors.runtime.ActorStateManager
name: ActorStateManager
package: microsoft.servicefabric.actors.runtime
summary: <p>Represents the interface that state manager for <xref uid="microsoft.servicefabric.actors.Actor" data-throw-if-not-resolved="false" data-raw-source="Actor"></xref> implements. </p>
metadata: {}
