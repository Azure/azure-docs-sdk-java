### YamlMime:JavaType
uid: "com.microsoft.azure.servicebus.QueueClient"
fullName: "com.microsoft.azure.servicebus.QueueClient"
name: "QueueClient"
nameWithType: "QueueClient"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.servicebus.primitives.ClientEntity?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.servicebus.InitializableEntity?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.microsoft.azure.servicebus.primitives.ClientEntity.close()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.onClose()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.setClosing()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(java.lang.Throwable)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class QueueClient extends InitializableEntity implements IQueueClient"
constructors:
- uid: "com.microsoft.azure.servicebus.QueueClient.QueueClient(com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder,com.microsoft.azure.servicebus.ReceiveMode)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.QueueClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)"
  name: "QueueClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)"
  nameWithType: "QueueClient.QueueClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)"
  parameters:
  - name: "amqpConnectionStringBuilder"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder?alt=com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder&text=ConnectionStringBuilder\" data-throw-if-not-resolved=\"False\" />"
  - name: "receiveMode"
    type: "<xref href=\"com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.QueueClient.QueueClient(java.lang.String,java.lang.String,com.microsoft.azure.servicebus.ClientSettings,com.microsoft.azure.servicebus.ReceiveMode)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.QueueClient(String namespace, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)"
  name: "QueueClient(String namespace, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)"
  nameWithType: "QueueClient.QueueClient(String namespace, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)"
  parameters:
  - name: "namespace"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "queuePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "clientSettings"
    type: "<xref href=\"com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings\" data-throw-if-not-resolved=\"False\" />"
  - name: "receiveMode"
    type: "<xref href=\"com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueClient(String namespace, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.QueueClient.QueueClient(java.net.URI,java.lang.String,com.microsoft.azure.servicebus.ClientSettings,com.microsoft.azure.servicebus.ReceiveMode)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.QueueClient(URI namespaceEndpointURI, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)"
  name: "QueueClient(URI namespaceEndpointURI, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)"
  nameWithType: "QueueClient.QueueClient(URI namespaceEndpointURI, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)"
  parameters:
  - name: "namespaceEndpointURI"
    type: "<xref href=\"java.net.URI?alt=java.net.URI&text=URI\" data-throw-if-not-resolved=\"False\" />"
  - name: "queuePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "clientSettings"
    type: "<xref href=\"com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings\" data-throw-if-not-resolved=\"False\" />"
  - name: "receiveMode"
    type: "<xref href=\"com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public QueueClient(URI namespaceEndpointURI, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
methods:
- uid: "com.microsoft.azure.servicebus.QueueClient.abandon(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.abandon(UUID lockToken)"
  name: "abandon(UUID lockToken)"
  nameWithType: "QueueClient.abandon(UUID lockToken)"
  summary: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void abandon(UUID lockToken)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message"
- uid: "com.microsoft.azure.servicebus.QueueClient.abandon(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.abandon(UUID lockToken, TransactionContext transaction)"
  name: "abandon(UUID lockToken, TransactionContext transaction)"
  nameWithType: "QueueClient.abandon(UUID lockToken, TransactionContext transaction)"
  summary: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void abandon(UUID lockToken, TransactionContext transaction)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message"
- uid: "com.microsoft.azure.servicebus.QueueClient.abandon(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.abandon(UUID lockToken, Map<String,Object> propertiesToModify)"
  name: "abandon(UUID lockToken, Map<String,Object> propertiesToModify)"
  nameWithType: "QueueClient.abandon(UUID lockToken, Map<String,Object> propertiesToModify)"
  summary: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void abandon(UUID lockToken, Map<String,Object> propertiesToModify)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message"
- uid: "com.microsoft.azure.servicebus.QueueClient.abandon(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.abandon(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  name: "abandon(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  nameWithType: "QueueClient.abandon(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  summary: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void abandon(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message"
- uid: "com.microsoft.azure.servicebus.QueueClient.abandonAsync(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID lockToken)"
  name: "abandonAsync(UUID lockToken)"
  nameWithType: "QueueClient.abandonAsync(UUID lockToken)"
  summary: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> abandonAsync(UUID lockToken)"
  desc: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.abandonAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID lockToken, TransactionContext transaction)"
  name: "abandonAsync(UUID lockToken, TransactionContext transaction)"
  nameWithType: "QueueClient.abandonAsync(UUID lockToken, TransactionContext transaction)"
  summary: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> abandonAsync(UUID lockToken, TransactionContext transaction)"
  desc: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.abandonAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  name: "abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  nameWithType: "QueueClient.abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  summary: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CompletableFuture<Void> abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  desc: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.abandonAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  name: "abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  nameWithType: "QueueClient.abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  summary: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  desc: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessage(long)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessage(long sequenceNumber)"
  name: "cancelScheduledMessage(long sequenceNumber)"
  nameWithType: "QueueClient.cancelScheduledMessage(long sequenceNumber)"
  summary: "Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued."
  parameters:
  - name: "sequenceNumber"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void cancelScheduledMessage(long sequenceNumber)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `cancelScheduledMessageAsync(sequenceNumber).get()`. For better performance, use async methods."
- uid: "com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessageAsync(long)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessageAsync(long sequenceNumber)"
  name: "cancelScheduledMessageAsync(long sequenceNumber)"
  nameWithType: "QueueClient.cancelScheduledMessageAsync(long sequenceNumber)"
  summary: "Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued."
  parameters:
  - name: "sequenceNumber"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> cancelScheduledMessageAsync(long sequenceNumber)"
  desc: "Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This is an asynchronous method returning a CompletableFuture which completes when the message is cancelled."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.complete(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.complete(UUID lockToken)"
  name: "complete(UUID lockToken)"
  nameWithType: "QueueClient.complete(UUID lockToken)"
  summary: "Completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void complete(UUID lockToken)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token. This will delete the message from the service."
- uid: "com.microsoft.azure.servicebus.QueueClient.complete(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.complete(UUID lockToken, TransactionContext transaction)"
  name: "complete(UUID lockToken, TransactionContext transaction)"
  nameWithType: "QueueClient.complete(UUID lockToken, TransactionContext transaction)"
  summary: "Completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void complete(UUID lockToken, TransactionContext transaction)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token. This will delete the message from the service."
- uid: "com.microsoft.azure.servicebus.QueueClient.completeAsync(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.completeAsync(UUID lockToken)"
  name: "completeAsync(UUID lockToken)"
  nameWithType: "QueueClient.completeAsync(UUID lockToken)"
  summary: "Asynchronously completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> completeAsync(UUID lockToken)"
  desc: "Asynchronously completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token. This will delete the message from the service."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.completeAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.completeAsync(UUID lockToken, TransactionContext transaction)"
  name: "completeAsync(UUID lockToken, TransactionContext transaction)"
  nameWithType: "QueueClient.completeAsync(UUID lockToken, TransactionContext transaction)"
  summary: "Asynchronously completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> completeAsync(UUID lockToken, TransactionContext transaction)"
  desc: "Asynchronously completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token. This will delete the message from the service."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken)"
  name: "deadLetter(UUID lockToken)"
  nameWithType: "QueueClient.deadLetter(UUID lockToken)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deadLetter(UUID lockToken)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue."
- uid: "com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, TransactionContext transaction)"
  name: "deadLetter(UUID lockToken, TransactionContext transaction)"
  nameWithType: "QueueClient.deadLetter(UUID lockToken, TransactionContext transaction)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deadLetter(UUID lockToken, TransactionContext transaction)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue."
- uid: "com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  name: "deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  nameWithType: "QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
- uid: "com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  name: "deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  nameWithType: "QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
- uid: "com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  name: "deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  nameWithType: "QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
- uid: "com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  name: "deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  nameWithType: "QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
- uid: "com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, Map<String,Object> propertiesToModify)"
  name: "deadLetter(UUID lockToken, Map<String,Object> propertiesToModify)"
  nameWithType: "QueueClient.deadLetter(UUID lockToken, Map<String,Object> propertiesToModify)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified message properties."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void deadLetter(UUID lockToken, Map<String,Object> propertiesToModify)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified message properties."
- uid: "com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  name: "deadLetter(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  nameWithType: "QueueClient.deadLetter(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified message properties."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deadLetter(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified message properties."
- uid: "com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken)"
  name: "deadLetterAsync(UUID lockToken)"
  nameWithType: "QueueClient.deadLetterAsync(UUID lockToken)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> deadLetterAsync(UUID lockToken)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, TransactionContext transaction)"
  name: "deadLetterAsync(UUID lockToken, TransactionContext transaction)"
  nameWithType: "QueueClient.deadLetterAsync(UUID lockToken, TransactionContext transaction)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> deadLetterAsync(UUID lockToken, TransactionContext transaction)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  name: "deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  nameWithType: "QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  name: "deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  nameWithType: "QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  name: "deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  nameWithType: "QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  name: "deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  nameWithType: "QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  name: "deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  nameWithType: "QueueClient.deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified properties."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CompletableFuture<Void> deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified properties."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  name: "deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  nameWithType: "QueueClient.deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified properties."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified properties."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.getEntityPath()"
  fullName: "com.microsoft.azure.servicebus.QueueClient.getEntityPath()"
  name: "getEntityPath()"
  nameWithType: "QueueClient.getEntityPath()"
  summary: "Gets the path of the entity this client is sending messages to or receiving messages from."
  syntax: "public String getEntityPath()"
  desc: "Gets the path of the entity this client is sending messages to or receiving messages from."
  returns:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.QueueClient.getPrefetchCount()"
  fullName: "com.microsoft.azure.servicebus.QueueClient.getPrefetchCount()"
  name: "getPrefetchCount()"
  nameWithType: "QueueClient.getPrefetchCount()"
  summary: "Get the prefetch value set."
  syntax: "public int getPrefetchCount()"
  desc: "Get the prefetch value set."
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.QueueClient.getQueueName()"
  fullName: "com.microsoft.azure.servicebus.QueueClient.getQueueName()"
  name: "getQueueName()"
  nameWithType: "QueueClient.getQueueName()"
  summary: "Gets the name of the queue."
  syntax: "public String getQueueName()"
  desc: "Gets the name of the queue."
  returns:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.QueueClient.getReceiveMode()"
  fullName: "com.microsoft.azure.servicebus.QueueClient.getReceiveMode()"
  name: "getReceiveMode()"
  nameWithType: "QueueClient.getReceiveMode()"
  summary: "Gets the <xref uid=\"com.microsoft.azure.servicebus.ReceiveMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiveMode\"></xref> of the current receiver"
  syntax: "public ReceiveMode getReceiveMode()"
  desc: "Gets the <xref uid=\"com.microsoft.azure.servicebus.ReceiveMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiveMode\"></xref> of the current receiver"
  returns:
    type: "<xref href=\"com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.QueueClient.onClose()"
  fullName: "com.microsoft.azure.servicebus.QueueClient.onClose()"
  name: "onClose()"
  nameWithType: "QueueClient.onClose()"
  modifiers:
  - "protected"
  overridden: "com.microsoft.azure.servicebus.primitives.ClientEntity.onClose()"
  syntax: "protected CompletableFuture<Void> onClose()"
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler handler)"
  name: "registerMessageHandler(IMessageHandler handler)"
  nameWithType: "QueueClient.registerMessageHandler(IMessageHandler handler)"
  summary: "Receive messages continuously from the entity."
  parameters:
  - name: "handler"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessageHandler?alt=com.microsoft.azure.servicebus.IMessageHandler&text=IMessageHandler\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic void registerMessageHandler(IMessageHandler handler)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages. IMessageHandler methods are executed on java.util.concurrent.commonPool()"
- uid: "com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,com.microsoft.azure.servicebus.MessageHandlerOptions)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)"
  name: "registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)"
  nameWithType: "QueueClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)"
  summary: "Receive messages continuously from the entity."
  parameters:
  - name: "handler"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessageHandler?alt=com.microsoft.azure.servicebus.IMessageHandler&text=IMessageHandler\" data-throw-if-not-resolved=\"False\" />"
  - name: "handlerOptions"
    type: "<xref href=\"com.microsoft.azure.servicebus.MessageHandlerOptions?alt=com.microsoft.azure.servicebus.MessageHandlerOptions&text=MessageHandlerOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic void registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages. IMessageHandler methods are executed on java.util.concurrent.commonPool()"
- uid: "com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,com.microsoft.azure.servicebus.MessageHandlerOptions,java.util.concurrent.ExecutorService)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)"
  name: "registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)"
  nameWithType: "QueueClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)"
  summary: "Receive messages continuously from the entity."
  parameters:
  - name: "handler"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessageHandler?alt=com.microsoft.azure.servicebus.IMessageHandler&text=IMessageHandler\" data-throw-if-not-resolved=\"False\" />"
  - name: "handlerOptions"
    type: "<xref href=\"com.microsoft.azure.servicebus.MessageHandlerOptions?alt=com.microsoft.azure.servicebus.MessageHandlerOptions&text=MessageHandlerOptions\" data-throw-if-not-resolved=\"False\" />"
  - name: "executorService"
    type: "<xref href=\"java.util.concurrent.ExecutorService?alt=java.util.concurrent.ExecutorService&text=ExecutorService\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages. IMessageHandler methods are executed on the passed executor service."
- uid: "com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,java.util.concurrent.ExecutorService)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler handler, ExecutorService executorService)"
  name: "registerMessageHandler(IMessageHandler handler, ExecutorService executorService)"
  nameWithType: "QueueClient.registerMessageHandler(IMessageHandler handler, ExecutorService executorService)"
  summary: "Receive messages continuously from the entity."
  parameters:
  - name: "handler"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessageHandler?alt=com.microsoft.azure.servicebus.IMessageHandler&text=IMessageHandler\" data-throw-if-not-resolved=\"False\" />"
  - name: "executorService"
    type: "<xref href=\"java.util.concurrent.ExecutorService?alt=java.util.concurrent.ExecutorService&text=ExecutorService\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void registerMessageHandler(IMessageHandler handler, ExecutorService executorService)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages. IMessageHandler methods are executed on the passed executor service."
- uid: "com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler handler)"
  name: "registerSessionHandler(ISessionHandler handler)"
  nameWithType: "QueueClient.registerSessionHandler(ISessionHandler handler)"
  summary: "Receive session messages continuously from the queue."
  parameters:
  - name: "handler"
    type: "<xref href=\"com.microsoft.azure.servicebus.ISessionHandler?alt=com.microsoft.azure.servicebus.ISessionHandler&text=ISessionHandler\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic void registerSessionHandler(ISessionHandler handler)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages. ISessionHandler methods are executed on java.util.concurrent.commonPool()"
- uid: "com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,com.microsoft.azure.servicebus.SessionHandlerOptions)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)"
  name: "registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)"
  nameWithType: "QueueClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)"
  summary: "Receive session messages continuously from the queue."
  parameters:
  - name: "handler"
    type: "<xref href=\"com.microsoft.azure.servicebus.ISessionHandler?alt=com.microsoft.azure.servicebus.ISessionHandler&text=ISessionHandler\" data-throw-if-not-resolved=\"False\" />"
  - name: "handlerOptions"
    type: "<xref href=\"com.microsoft.azure.servicebus.SessionHandlerOptions?alt=com.microsoft.azure.servicebus.SessionHandlerOptions&text=SessionHandlerOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic void registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages. ISessionHandler methods are executed on java.util.concurrent.commonPool()"
- uid: "com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,com.microsoft.azure.servicebus.SessionHandlerOptions,java.util.concurrent.ExecutorService)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)"
  name: "registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)"
  nameWithType: "QueueClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)"
  summary: "Receive session messages continuously from the queue."
  parameters:
  - name: "handler"
    type: "<xref href=\"com.microsoft.azure.servicebus.ISessionHandler?alt=com.microsoft.azure.servicebus.ISessionHandler&text=ISessionHandler\" data-throw-if-not-resolved=\"False\" />"
  - name: "handlerOptions"
    type: "<xref href=\"com.microsoft.azure.servicebus.SessionHandlerOptions?alt=com.microsoft.azure.servicebus.SessionHandlerOptions&text=SessionHandlerOptions\" data-throw-if-not-resolved=\"False\" />"
  - name: "executorService"
    type: "<xref href=\"java.util.concurrent.ExecutorService?alt=java.util.concurrent.ExecutorService&text=ExecutorService\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages. ISessionHandler methods are executed on the passed executor service."
- uid: "com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,java.util.concurrent.ExecutorService)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler handler, ExecutorService executorService)"
  name: "registerSessionHandler(ISessionHandler handler, ExecutorService executorService)"
  nameWithType: "QueueClient.registerSessionHandler(ISessionHandler handler, ExecutorService executorService)"
  summary: "Receive session messages continuously from the queue."
  parameters:
  - name: "handler"
    type: "<xref href=\"com.microsoft.azure.servicebus.ISessionHandler?alt=com.microsoft.azure.servicebus.ISessionHandler&text=ISessionHandler\" data-throw-if-not-resolved=\"False\" />"
  - name: "executorService"
    type: "<xref href=\"java.util.concurrent.ExecutorService?alt=java.util.concurrent.ExecutorService&text=ExecutorService\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void registerSessionHandler(ISessionHandler handler, ExecutorService executorService)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages. ISessionHandler methods are executed on the passed executor service."
- uid: "com.microsoft.azure.servicebus.QueueClient.scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)"
  name: "scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)"
  nameWithType: "QueueClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)"
  summary: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  - name: "scheduledEnqueueTimeUtc"
    type: "<xref href=\"java.time.Instant?alt=java.time.Instant&text=Instant\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `scheduleMessageAsync(message, scheduledEnqueueTimeUtc).get()`. For better performance, use async methods."
  returns:
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.QueueClient.scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  name: "scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  nameWithType: "QueueClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  summary: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  - name: "scheduledEnqueueTimeUtc"
    type: "<xref href=\"java.time.Instant?alt=java.time.Instant&text=Instant\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `scheduleMessageAsync(message, scheduledEnqueueTimeUtc).get()`. For better performance, use async methods."
  returns:
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)"
  name: "scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)"
  nameWithType: "QueueClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)"
  summary: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  - name: "scheduledEnqueueTimeUtc"
    type: "<xref href=\"java.time.Instant?alt=java.time.Instant&text=Instant\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)"
  desc: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  name: "scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  nameWithType: "QueueClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  summary: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  - name: "scheduledEnqueueTimeUtc"
    type: "<xref href=\"java.time.Instant?alt=java.time.Instant&text=Instant\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  desc: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.send(com.microsoft.azure.servicebus.IMessage)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.send(IMessage message)"
  name: "send(IMessage message)"
  nameWithType: "QueueClient.send(IMessage message)"
  summary: "Sends a message to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void send(IMessage message)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `sendAsync(message).get()`. For better performance, use async methods."
- uid: "com.microsoft.azure.servicebus.QueueClient.send(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.send(IMessage message, TransactionContext transaction)"
  name: "send(IMessage message, TransactionContext transaction)"
  nameWithType: "QueueClient.send(IMessage message, TransactionContext transaction)"
  summary: "Sends a message to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void send(IMessage message, TransactionContext transaction)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `sendAsync(message).get()`. For better performance, use async methods."
- uid: "com.microsoft.azure.servicebus.QueueClient.sendAsync(com.microsoft.azure.servicebus.IMessage)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.sendAsync(IMessage message)"
  name: "sendAsync(IMessage message)"
  nameWithType: "QueueClient.sendAsync(IMessage message)"
  summary: "Sends a message to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> sendAsync(IMessage message)"
  desc: "Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.sendAsync(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.sendAsync(IMessage message, TransactionContext transaction)"
  name: "sendAsync(IMessage message, TransactionContext transaction)"
  nameWithType: "QueueClient.sendAsync(IMessage message, TransactionContext transaction)"
  summary: "Sends a message to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> sendAsync(IMessage message, TransactionContext transaction)"
  desc: "Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.sendBatch(Collection<? extends IMessage> messages)"
  name: "sendBatch(Collection<? extends IMessage> messages)"
  nameWithType: "QueueClient.sendBatch(Collection<? extends IMessage> messages)"
  summary: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "messages"
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends com.microsoft.azure.servicebus.IMessage?alt=? extends com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void sendBatch(Collection<? extends IMessage> messages)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling `sendBatchAsync(messages).get()`. For better performance, use async methods. When called on partitioned entities, messages meant for different partitions cannot be batched together."
- uid: "com.microsoft.azure.servicebus.QueueClient.sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)"
  name: "sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)"
  nameWithType: "QueueClient.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)"
  summary: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "messages"
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends com.microsoft.azure.servicebus.IMessage?alt=? extends com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling `sendBatchAsync(messages).get()`. For better performance, use async methods. When called on partitioned entities, messages meant for different partitions cannot be batched together."
- uid: "com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(Collection<? extends IMessage> messages)"
  name: "sendBatchAsync(Collection<? extends IMessage> messages)"
  nameWithType: "QueueClient.sendBatchAsync(Collection<? extends IMessage> messages)"
  summary: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "messages"
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends com.microsoft.azure.servicebus.IMessage?alt=? extends com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages)"
  desc: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity. When called on partitioned entities, messages meant for different partitions cannot be batched together."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)"
  name: "sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)"
  nameWithType: "QueueClient.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)"
  summary: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "messages"
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends com.microsoft.azure.servicebus.IMessage?alt=? extends com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)"
  desc: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity. When called on partitioned entities, messages meant for different partitions cannot be batched together."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.QueueClient.setPrefetchCount(int)"
  fullName: "com.microsoft.azure.servicebus.QueueClient.setPrefetchCount(int prefetchCount)"
  name: "setPrefetchCount(int prefetchCount)"
  nameWithType: "QueueClient.setPrefetchCount(int prefetchCount)"
  summary: "Set the prefetch count of the receiver."
  parameters:
  - name: "prefetchCount"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setPrefetchCount(int prefetchCount)"
  exceptions:
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Set the prefetch count of the receiver. Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when and before the application asks for one using Receive. Setting a non-zero value prefetches PrefetchCount number of messages. Setting the value to zero turns prefetch off. For RECEIVEANDDELETE mode, the default value is 0. For PEEKLOCK mode, the default value is 100.\n\nThe value cannot be set until the receiver is created."
type: "class"
implements:
- "<xref href=\"com.microsoft.azure.servicebus.IQueueClient?alt=com.microsoft.azure.servicebus.IQueueClient&text=IQueueClient\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.microsoft.azure.servicebus"
artifact: com.microsoft.azure:azure-servicebus:3.6.6
