### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.servicebus.QueueClient.QueueClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  name: QueueClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  nameWithType: QueueClient.QueueClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  parameters:
  - name: amqpConnectionStringBuilder
    type: <xref href="com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder?alt=com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder&text=ConnectionStringBuilder" data-throw-if-not-resolved="False"/>
  - name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  syntax: public QueueClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.QueueClient.QueueClient(ConnectionStringBuilder,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.QueueClient.QueueClient(String namespace, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
  name: QueueClient(String namespace, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
  nameWithType: QueueClient.QueueClient(String namespace, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
  parameters:
  - name: namespace
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: queuePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  - name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  syntax: public QueueClient(String namespace, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.QueueClient.QueueClient(String,String,ClientSettings,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.QueueClient.QueueClient(URI namespaceEndpointURI, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
  name: QueueClient(URI namespaceEndpointURI, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
  nameWithType: QueueClient.QueueClient(URI namespaceEndpointURI, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
  parameters:
  - name: namespaceEndpointURI
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - name: queuePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  - name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  syntax: public QueueClient(URI namespaceEndpointURI, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.QueueClient.QueueClient(URI,String,ClientSettings,ReceiveMode)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.servicebus.primitives.ClientEntity" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.servicebus.InitializableEntity" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.servicebus.primitives.ClientEntity.ClientEntity(final String)
- com.microsoft.azure.servicebus.primitives.ClientEntity.close()
- com.microsoft.azure.servicebus.ICloseable.close()
- com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()
- com.microsoft.azure.servicebus.ICloseable.closeAsync()
- com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()
- com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()
- com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()
- com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()
- com.microsoft.azure.servicebus.InitializableEntity.InitializableEntity(String)
- com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()
- com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(Throwable)
methods:
- fullName: com.microsoft.azure.servicebus.QueueClient.abandon(UUID lockToken)
  name: abandon(UUID lockToken)
  nameWithType: QueueClient.abandon(UUID lockToken)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  syntax: public void abandon(UUID lockToken)
  uid: com.microsoft.azure.servicebus.QueueClient.abandon(UUID)
- fullName: com.microsoft.azure.servicebus.QueueClient.abandon(UUID lockToken, Map<String, Object> propertiesToModify)
  name: abandon(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: QueueClient.abandon(UUID lockToken, Map<String, Object> propertiesToModify)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  syntax: public void abandon(UUID lockToken, Map<String, Object> propertiesToModify)
  uid: com.microsoft.azure.servicebus.QueueClient.abandon(UUID,Map<String, Object>)
- fullName: com.microsoft.azure.servicebus.QueueClient.abandon(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  name: abandon(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  nameWithType: QueueClient.abandon(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  syntax: public void abandon(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.QueueClient.abandon(UUID,Map<String, Object>,TransactionContext)
- fullName: com.microsoft.azure.servicebus.QueueClient.abandon(UUID lockToken, TransactionContext transaction)
  name: abandon(UUID lockToken, TransactionContext transaction)
  nameWithType: QueueClient.abandon(UUID lockToken, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  syntax: public void abandon(UUID lockToken, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.QueueClient.abandon(UUID,TransactionContext)
- fullName: com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID lockToken)
  name: abandonAsync(UUID lockToken)
  nameWithType: QueueClient.abandonAsync(UUID lockToken)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> abandonAsync(UUID lockToken)
  uid: com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID)
- fullName: com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  name: abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: QueueClient.abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  uid: com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID,Map<String, Object>)
- fullName: com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  name: abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  nameWithType: QueueClient.abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID,Map<String, Object>,TransactionContext)
- fullName: com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID lockToken, TransactionContext transaction)
  name: abandonAsync(UUID lockToken, TransactionContext transaction)
  nameWithType: QueueClient.abandonAsync(UUID lockToken, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> abandonAsync(UUID lockToken, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID,TransactionContext)
- fullName: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessage(long sequenceNumber)
  name: cancelScheduledMessage(long sequenceNumber)
  nameWithType: QueueClient.cancelScheduledMessage(long sequenceNumber)
  overridden: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage(long)
  parameters:
  - description: <p>sequence number of the scheduled message </p>
    name: sequenceNumber
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if scheduled message couldn't be cancelled </p>
  summary: >-
    <p>Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>

    <p></p>
  syntax: public void cancelScheduledMessage(long sequenceNumber)
  uid: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessage(long)
- fullName: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessageAsync(long sequenceNumber)
  name: cancelScheduledMessageAsync(long sequenceNumber)
  nameWithType: QueueClient.cancelScheduledMessageAsync(long sequenceNumber)
  overridden: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync(long)
  parameters:
  - description: <p>sequence number of the scheduled message </p>
    name: sequenceNumber
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending cancellation </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This is an asynchronous method returning a CompletableFuture which completes when the message is cancelled.</p>

    <p></p>
  syntax: public CompletableFuture<Void> cancelScheduledMessageAsync(long sequenceNumber)
  uid: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessageAsync(long)
- fullName: com.microsoft.azure.servicebus.QueueClient.complete(UUID lockToken)
  name: complete(UUID lockToken)
  nameWithType: QueueClient.complete(UUID lockToken)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  syntax: public void complete(UUID lockToken)
  uid: com.microsoft.azure.servicebus.QueueClient.complete(UUID)
- fullName: com.microsoft.azure.servicebus.QueueClient.complete(UUID lockToken, TransactionContext transaction)
  name: complete(UUID lockToken, TransactionContext transaction)
  nameWithType: QueueClient.complete(UUID lockToken, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  syntax: public void complete(UUID lockToken, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.QueueClient.complete(UUID,TransactionContext)
- fullName: com.microsoft.azure.servicebus.QueueClient.completeAsync(UUID lockToken)
  name: completeAsync(UUID lockToken)
  nameWithType: QueueClient.completeAsync(UUID lockToken)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> completeAsync(UUID lockToken)
  uid: com.microsoft.azure.servicebus.QueueClient.completeAsync(UUID)
- fullName: com.microsoft.azure.servicebus.QueueClient.completeAsync(UUID lockToken, TransactionContext transaction)
  name: completeAsync(UUID lockToken, TransactionContext transaction)
  nameWithType: QueueClient.completeAsync(UUID lockToken, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> completeAsync(UUID lockToken, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.QueueClient.completeAsync(UUID,TransactionContext)
- fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken)
  name: deadLetter(UUID lockToken)
  nameWithType: QueueClient.deadLetter(UUID lockToken)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  syntax: public void deadLetter(UUID lockToken)
  uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID)
- fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)
  name: deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: QueueClient.deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  syntax: public void deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)
  uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID,Map<String, Object>)
- fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  name: deadLetter(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  nameWithType: QueueClient.deadLetter(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  syntax: public void deadLetter(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID,Map<String, Object>,TransactionContext)
- fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  nameWithType: QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: deadLetterReason
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: deadLetterErrorDescription
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID,String,String)
- fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  nameWithType: QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: deadLetterReason
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: deadLetterErrorDescription
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  syntax: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID,String,String,Map<String, Object>)
- fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  nameWithType: QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: deadLetterReason
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: deadLetterErrorDescription
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  syntax: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID,String,String,Map<String, Object>,TransactionContext)
- fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  nameWithType: QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: deadLetterReason
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: deadLetterErrorDescription
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  syntax: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID,String,String,TransactionContext)
- fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, TransactionContext transaction)
  name: deadLetter(UUID lockToken, TransactionContext transaction)
  nameWithType: QueueClient.deadLetter(UUID lockToken, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  syntax: public void deadLetter(UUID lockToken, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID,TransactionContext)
- fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken)
  name: deadLetterAsync(UUID lockToken)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> deadLetterAsync(UUID lockToken)
  uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID)
- fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  name: deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID,Map<String, Object>)
- fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  name: deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID,Map<String, Object>,TransactionContext)
- fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: deadLetterReason
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: deadLetterErrorDescription
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID,String,String)
- fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: deadLetterReason
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: deadLetterErrorDescription
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID,String,String,Map<String, Object>)
- fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: deadLetterReason
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: deadLetterErrorDescription
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID,String,String,Map<String, Object>,TransactionContext)
- fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: deadLetterReason
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: deadLetterErrorDescription
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID,String,String,TransactionContext)
- fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, TransactionContext transaction)
  name: deadLetterAsync(UUID lockToken, TransactionContext transaction)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID,TransactionContext)
- fullName: com.microsoft.azure.servicebus.QueueClient.getEntityPath()
  name: getEntityPath()
  nameWithType: QueueClient.getEntityPath()
  overridden: com.microsoft.azure.servicebus.IMessageEntityClient.getEntityPath()
  returns:
    description: <p>path of the entity this client is connecting to </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the path of the entity this client is sending messages to or receiving messages from.</p>

    <p></p>
  syntax: public String getEntityPath()
  uid: com.microsoft.azure.servicebus.QueueClient.getEntityPath()
- fullName: com.microsoft.azure.servicebus.QueueClient.getPrefetchCount()
  name: getPrefetchCount()
  nameWithType: QueueClient.getPrefetchCount()
  returns:
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int getPrefetchCount()
  uid: com.microsoft.azure.servicebus.QueueClient.getPrefetchCount()
- fullName: com.microsoft.azure.servicebus.QueueClient.getQueueName()
  name: getQueueName()
  nameWithType: QueueClient.getQueueName()
  overridden: com.microsoft.azure.servicebus.IQueueClient.getQueueName()
  returns:
    description: <p>The name of the queue. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the name of the queue.</p>

    <p></p>
  syntax: public String getQueueName()
  uid: com.microsoft.azure.servicebus.QueueClient.getQueueName()
- fullName: com.microsoft.azure.servicebus.QueueClient.getReceiveMode()
  name: getReceiveMode()
  nameWithType: QueueClient.getReceiveMode()
  overridden: com.microsoft.azure.servicebus.IQueueClient.getReceiveMode()
  returns:
    description: <p>The receive mode. </p>
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the <xref uid="com.microsoft.azure.servicebus.ReceiveMode" data-throw-if-not-resolved="false" data-raw-source="ReceiveMode"></xref> of the current receiver</p>

    <p></p>
  syntax: public ReceiveMode getReceiveMode()
  uid: com.microsoft.azure.servicebus.QueueClient.getReceiveMode()
- fullName: com.microsoft.azure.servicebus.QueueClient.onClose()
  name: onClose()
  nameWithType: QueueClient.onClose()
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: protected CompletableFuture<Void> onClose()
  uid: com.microsoft.azure.servicebus.QueueClient.onClose()
- fullName: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler handler)
  name: registerMessageHandler(IMessageHandler handler)
  nameWithType: QueueClient.registerMessageHandler(IMessageHandler handler)
  parameters:
  - name: handler
    type: <xref href="com.microsoft.azure.servicebus.IMessageHandler?alt=com.microsoft.azure.servicebus.IMessageHandler&text=IMessageHandler" data-throw-if-not-resolved="False"/>
  syntax: public void registerMessageHandler(IMessageHandler handler)
  uid: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler)
- fullName: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler handler, ExecutorService executorService)
  name: registerMessageHandler(IMessageHandler handler, ExecutorService executorService)
  nameWithType: QueueClient.registerMessageHandler(IMessageHandler handler, ExecutorService executorService)
  parameters:
  - name: handler
    type: <xref href="com.microsoft.azure.servicebus.IMessageHandler?alt=com.microsoft.azure.servicebus.IMessageHandler&text=IMessageHandler" data-throw-if-not-resolved="False"/>
  - name: executorService
    type: <xref href="ExecutorService?alt=ExecutorService&text=ExecutorService" data-throw-if-not-resolved="False"/>
  syntax: public void registerMessageHandler(IMessageHandler handler, ExecutorService executorService)
  uid: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler,ExecutorService)
- fullName: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)
  name: registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)
  nameWithType: QueueClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)
  parameters:
  - name: handler
    type: <xref href="com.microsoft.azure.servicebus.IMessageHandler?alt=com.microsoft.azure.servicebus.IMessageHandler&text=IMessageHandler" data-throw-if-not-resolved="False"/>
  - name: handlerOptions
    type: <xref href="com.microsoft.azure.servicebus.MessageHandlerOptions?alt=com.microsoft.azure.servicebus.MessageHandlerOptions&text=MessageHandlerOptions" data-throw-if-not-resolved="False"/>
  syntax: public void registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)
  uid: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler,MessageHandlerOptions)
- fullName: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)
  name: registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)
  nameWithType: QueueClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)
  parameters:
  - name: handler
    type: <xref href="com.microsoft.azure.servicebus.IMessageHandler?alt=com.microsoft.azure.servicebus.IMessageHandler&text=IMessageHandler" data-throw-if-not-resolved="False"/>
  - name: handlerOptions
    type: <xref href="com.microsoft.azure.servicebus.MessageHandlerOptions?alt=com.microsoft.azure.servicebus.MessageHandlerOptions&text=MessageHandlerOptions" data-throw-if-not-resolved="False"/>
  - name: executorService
    type: <xref href="ExecutorService?alt=ExecutorService&text=ExecutorService" data-throw-if-not-resolved="False"/>
  syntax: public void registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)
  uid: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler,MessageHandlerOptions,ExecutorService)
- fullName: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler handler)
  name: registerSessionHandler(ISessionHandler handler)
  nameWithType: QueueClient.registerSessionHandler(ISessionHandler handler)
  parameters:
  - name: handler
    type: <xref href="com.microsoft.azure.servicebus.ISessionHandler?alt=com.microsoft.azure.servicebus.ISessionHandler&text=ISessionHandler" data-throw-if-not-resolved="False"/>
  syntax: public void registerSessionHandler(ISessionHandler handler)
  uid: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler)
- fullName: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler handler, ExecutorService executorService)
  name: registerSessionHandler(ISessionHandler handler, ExecutorService executorService)
  nameWithType: QueueClient.registerSessionHandler(ISessionHandler handler, ExecutorService executorService)
  parameters:
  - name: handler
    type: <xref href="com.microsoft.azure.servicebus.ISessionHandler?alt=com.microsoft.azure.servicebus.ISessionHandler&text=ISessionHandler" data-throw-if-not-resolved="False"/>
  - name: executorService
    type: <xref href="ExecutorService?alt=ExecutorService&text=ExecutorService" data-throw-if-not-resolved="False"/>
  syntax: public void registerSessionHandler(ISessionHandler handler, ExecutorService executorService)
  uid: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler,ExecutorService)
- fullName: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)
  name: registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)
  nameWithType: QueueClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)
  parameters:
  - name: handler
    type: <xref href="com.microsoft.azure.servicebus.ISessionHandler?alt=com.microsoft.azure.servicebus.ISessionHandler&text=ISessionHandler" data-throw-if-not-resolved="False"/>
  - name: handlerOptions
    type: <xref href="com.microsoft.azure.servicebus.SessionHandlerOptions?alt=com.microsoft.azure.servicebus.SessionHandlerOptions&text=SessionHandlerOptions" data-throw-if-not-resolved="False"/>
  syntax: public void registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)
  uid: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler,SessionHandlerOptions)
- fullName: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)
  name: registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)
  nameWithType: QueueClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)
  parameters:
  - name: handler
    type: <xref href="com.microsoft.azure.servicebus.ISessionHandler?alt=com.microsoft.azure.servicebus.ISessionHandler&text=ISessionHandler" data-throw-if-not-resolved="False"/>
  - name: handlerOptions
    type: <xref href="com.microsoft.azure.servicebus.SessionHandlerOptions?alt=com.microsoft.azure.servicebus.SessionHandlerOptions&text=SessionHandlerOptions" data-throw-if-not-resolved="False"/>
  - name: executorService
    type: <xref href="ExecutorService?alt=ExecutorService&text=ExecutorService" data-throw-if-not-resolved="False"/>
  syntax: public void registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)
  uid: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler,SessionHandlerOptions,ExecutorService)
- fullName: com.microsoft.azure.servicebus.QueueClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: QueueClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  overridden: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage,Instant)
  parameters:
  - description: <p>message to be sent to the entity </p>
    name: message
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  - description: <p>instant at which the message should be enqueued in the entity </p>
    name: scheduledEnqueueTimeUtc
    type: <xref href="Instant?alt=Instant&text=Instant" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if message couldn't be sent to the entity </p>
  returns:
    description: <p>sequence number of the scheduled message </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>

    <p></p>
  syntax: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  uid: com.microsoft.azure.servicebus.QueueClient.scheduleMessage(IMessage,Instant)
- fullName: com.microsoft.azure.servicebus.QueueClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: QueueClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  overridden: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage,Instant,TransactionContext)
  parameters:
  - description: <p>message to be sent to the entity </p>
    name: message
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  - description: <p>instant at which the message should be enqueued in the entity </p>
    name: scheduledEnqueueTimeUtc
    type: <xref href="Instant?alt=Instant&text=Instant" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if message couldn't be sent to the entity </p>
  returns:
    description: <p>sequence number of the scheduled message </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>

    <p></p>
  syntax: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.QueueClient.scheduleMessage(IMessage,Instant,TransactionContext)
- fullName: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: QueueClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  overridden: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage,Instant)
  parameters:
  - description: <p>message to be sent to the entity </p>
    name: message
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  - description: <p>instant at which the message should be enqueued in the entity </p>
    name: scheduledEnqueueTimeUtc
    type: <xref href="Instant?alt=Instant&text=Instant" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message. </p>
    type: <xref href="CompletableFuture%3CLong%3E?alt=CompletableFuture%3CLong%3E&text=CompletableFuture%3CLong%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.</p>

    <p></p>
  syntax: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  uid: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(IMessage,Instant)
- fullName: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: QueueClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  overridden: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage,Instant,TransactionContext)
  parameters:
  - description: <p>message to be sent to the entity </p>
    name: message
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  - description: <p>instant at which the message should be enqueued in the entity </p>
    name: scheduledEnqueueTimeUtc
    type: <xref href="Instant?alt=Instant&text=Instant" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message. </p>
    type: <xref href="CompletableFuture%3CLong%3E?alt=CompletableFuture%3CLong%3E&text=CompletableFuture%3CLong%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.</p>

    <p></p>
  syntax: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(IMessage,Instant,TransactionContext)
- fullName: com.microsoft.azure.servicebus.QueueClient.send(IMessage message)
  name: send(IMessage message)
  nameWithType: QueueClient.send(IMessage message)
  overridden: com.microsoft.azure.servicebus.IMessageSender.send(IMessage)
  parameters:
  - description: <p>message to be sent to the entity </p>
    name: message
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if message couldn't be sent to the entity </p>
  summary: >-
    <p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>

    <p></p>
  syntax: public void send(IMessage message)
  uid: com.microsoft.azure.servicebus.QueueClient.send(IMessage)
- fullName: com.microsoft.azure.servicebus.QueueClient.send(IMessage message, TransactionContext transaction)
  name: send(IMessage message, TransactionContext transaction)
  nameWithType: QueueClient.send(IMessage message, TransactionContext transaction)
  overridden: com.microsoft.azure.servicebus.IMessageSender.send(IMessage,TransactionContext)
  parameters:
  - description: <p>message to be sent to the entity </p>
    name: message
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if message couldn't be sent to the entity </p>
  summary: >-
    <p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>

    <p></p>
  syntax: public void send(IMessage message, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.QueueClient.send(IMessage,TransactionContext)
- fullName: com.microsoft.azure.servicebus.QueueClient.sendAsync(IMessage message)
  name: sendAsync(IMessage message)
  nameWithType: QueueClient.sendAsync(IMessage message)
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage)
  parameters:
  - description: <p>message to be sent to the entity </p>
    name: message
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending send </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.</p>

    <p></p>
  syntax: public CompletableFuture<Void> sendAsync(IMessage message)
  uid: com.microsoft.azure.servicebus.QueueClient.sendAsync(IMessage)
- fullName: com.microsoft.azure.servicebus.QueueClient.sendAsync(IMessage message, TransactionContext transaction)
  name: sendAsync(IMessage message, TransactionContext transaction)
  nameWithType: QueueClient.sendAsync(IMessage message, TransactionContext transaction)
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage,TransactionContext)
  parameters:
  - description: <p>message to be sent to the entity </p>
    name: message
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending send </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.</p>

    <p></p>
  syntax: public CompletableFuture<Void> sendAsync(IMessage message, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.QueueClient.sendAsync(IMessage,TransactionContext)
- fullName: com.microsoft.azure.servicebus.QueueClient.sendBatch(Collection<? extends IMessage> messages)
  name: sendBatch(Collection<? extends IMessage> messages)
  nameWithType: QueueClient.sendBatch(Collection<? extends IMessage> messages)
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage>)
  parameters:
  - description: <p>collection of messages to be sent to the entity </p>
    name: messages
    type: Collection&lt;? extends <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the batch couldn't be sent to the entity </p>
  summary: >-
    <p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>

    <p></p>
  syntax: public void sendBatch(Collection<? extends IMessage> messages)
  uid: com.microsoft.azure.servicebus.QueueClient.sendBatch(Collection<? extends IMessage>)
- fullName: com.microsoft.azure.servicebus.QueueClient.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  name: sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: QueueClient.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage>,TransactionContext)
  parameters:
  - description: <p>collection of messages to be sent to the entity </p>
    name: messages
    type: Collection&lt;? extends <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>&gt;
  - description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the batch couldn't be sent to the entity </p>
  summary: >-
    <p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>

    <p></p>
  syntax: public void sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.QueueClient.sendBatch(Collection<? extends IMessage>,TransactionContext)
- fullName: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(Collection<? extends IMessage> messages)
  name: sendBatchAsync(Collection<? extends IMessage> messages)
  nameWithType: QueueClient.sendBatchAsync(Collection<? extends IMessage> messages)
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage>)
  parameters:
  - description: <p>collection of messages to be sent to the entity </p>
    name: messages
    type: Collection&lt;? extends <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>a CompletableFuture representing the pending send </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity.</p>

    <p></p>
  syntax: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages)
  uid: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(Collection<? extends IMessage>)
- fullName: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  name: sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: QueueClient.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage>,TransactionContext)
  parameters:
  - description: <p>collection of messages to be sent to the entity </p>
    name: messages
    type: Collection&lt;? extends <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>&gt;
  - description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending send </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity.</p>

    <p></p>
  syntax: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(Collection<? extends IMessage>,TransactionContext)
- fullName: com.microsoft.azure.servicebus.QueueClient.setPrefetchCount(int prefetchCount)
  name: setPrefetchCount(int prefetchCount)
  nameWithType: QueueClient.setPrefetchCount(int prefetchCount)
  parameters:
  - name: prefetchCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public void setPrefetchCount(int prefetchCount)
  uid: com.microsoft.azure.servicebus.QueueClient.setPrefetchCount(int)
nameWithType: QueueClient
syntax: public class QueueClient implements IQueueClient
type: class
uid: com.microsoft.azure.servicebus.QueueClient
fullName: com.microsoft.azure.servicebus.QueueClient
name: QueueClient
package: com.microsoft.azure.servicebus
metadata: {}
