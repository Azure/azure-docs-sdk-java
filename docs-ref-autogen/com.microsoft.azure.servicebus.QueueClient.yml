### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.servicebus.QueueClient
  id: QueueClient
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus
  children:
  - com.microsoft.azure.servicebus.QueueClient.QueueClient(com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder,com.microsoft.azure.servicebus.ReceiveMode)
  - com.microsoft.azure.servicebus.QueueClient.QueueClient(java.lang.String,java.lang.String,com.microsoft.azure.servicebus.ClientSettings,com.microsoft.azure.servicebus.ReceiveMode)
  - com.microsoft.azure.servicebus.QueueClient.QueueClient(java.net.URI,java.lang.String,com.microsoft.azure.servicebus.ClientSettings,com.microsoft.azure.servicebus.ReceiveMode)
  - com.microsoft.azure.servicebus.QueueClient.abandon(java.util.UUID)
  - com.microsoft.azure.servicebus.QueueClient.abandon(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.abandon(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  - com.microsoft.azure.servicebus.QueueClient.abandon(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.abandonAsync(java.util.UUID)
  - com.microsoft.azure.servicebus.QueueClient.abandonAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.abandonAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  - com.microsoft.azure.servicebus.QueueClient.abandonAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessage(long)
  - com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessageAsync(long)
  - com.microsoft.azure.servicebus.QueueClient.complete(java.util.UUID)
  - com.microsoft.azure.servicebus.QueueClient.complete(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.completeAsync(java.util.UUID)
  - com.microsoft.azure.servicebus.QueueClient.completeAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID)
  - com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String)
  - com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)
  - com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  - com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID)
  - com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String)
  - com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)
  - com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  - com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.getEntityPath()
  - com.microsoft.azure.servicebus.QueueClient.getPrefetchCount()
  - com.microsoft.azure.servicebus.QueueClient.getQueueName()
  - com.microsoft.azure.servicebus.QueueClient.getReceiveMode()
  - com.microsoft.azure.servicebus.QueueClient.onClose()
  - com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler)
  - com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,com.microsoft.azure.servicebus.MessageHandlerOptions)
  - com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,com.microsoft.azure.servicebus.MessageHandlerOptions,java.util.concurrent.ExecutorService)
  - com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,java.util.concurrent.ExecutorService)
  - com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler)
  - com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,com.microsoft.azure.servicebus.SessionHandlerOptions)
  - com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,com.microsoft.azure.servicebus.SessionHandlerOptions,java.util.concurrent.ExecutorService)
  - com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,java.util.concurrent.ExecutorService)
  - com.microsoft.azure.servicebus.QueueClient.scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant)
  - com.microsoft.azure.servicebus.QueueClient.scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant)
  - com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.send(com.microsoft.azure.servicebus.IMessage)
  - com.microsoft.azure.servicebus.QueueClient.send(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.sendAsync(com.microsoft.azure.servicebus.IMessage)
  - com.microsoft.azure.servicebus.QueueClient.sendAsync(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)
  - com.microsoft.azure.servicebus.QueueClient.sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)
  - com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.setPrefetchCount(int)
  langs:
  - java
  name: QueueClient
  nameWithType: QueueClient
  fullName: com.microsoft.azure.servicebus.QueueClient
  type: Class
  package: com.microsoft.azure.servicebus
  syntax:
    content: public final class QueueClient extends InitializableEntity implements IQueueClient
  inheritance:
  - java.lang.Object
  - com.microsoft.azure.servicebus.primitives.ClientEntity
  - com.microsoft.azure.servicebus.InitializableEntity
  implements:
  - com.microsoft.azure.servicebus.IQueueClient
  inheritedMembers:
  - com.microsoft.azure.servicebus.primitives.ClientEntity.close()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.onClose()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.setClosing()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(java.lang.Throwable)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.servicebus.QueueClient.QueueClient(com.microsoft.azure.servicebus.ReceiveMode,java.lang.String)
  id: QueueClient(com.microsoft.azure.servicebus.ReceiveMode,java.lang.String)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: QueueClient(ReceiveMode receiveMode, String queuePath)
  nameWithType: QueueClient.QueueClient(ReceiveMode receiveMode, String queuePath)
  fullName: com.microsoft.azure.servicebus.QueueClient.QueueClient(ReceiveMode receiveMode, String queuePath)
  overload: com.microsoft.azure.servicebus.QueueClient.QueueClient*
  type: Constructor
  package: com.microsoft.azure.servicebus
  syntax:
    content: private QueueClient(ReceiveMode receiveMode, String queuePath)
    parameters:
    - id: receiveMode
      type: com.microsoft.azure.servicebus.ReceiveMode
    - id: queuePath
      type: java.lang.String
- uid: com.microsoft.azure.servicebus.QueueClient.QueueClient(com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder,com.microsoft.azure.servicebus.ReceiveMode)
  id: QueueClient(com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder,com.microsoft.azure.servicebus.ReceiveMode)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: QueueClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  nameWithType: QueueClient.QueueClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  fullName: com.microsoft.azure.servicebus.QueueClient.QueueClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  overload: com.microsoft.azure.servicebus.QueueClient.QueueClient*
  type: Constructor
  package: com.microsoft.azure.servicebus
  syntax:
    content: public QueueClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
    parameters:
    - id: amqpConnectionStringBuilder
      type: com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder
    - id: receiveMode
      type: com.microsoft.azure.servicebus.ReceiveMode
- uid: com.microsoft.azure.servicebus.QueueClient.QueueClient(com.microsoft.azure.servicebus.primitives.MessagingFactory,java.lang.String,com.microsoft.azure.servicebus.ReceiveMode)
  id: QueueClient(com.microsoft.azure.servicebus.primitives.MessagingFactory,java.lang.String,com.microsoft.azure.servicebus.ReceiveMode)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: QueueClient(MessagingFactory factory, String queuePath, ReceiveMode receiveMode)
  nameWithType: QueueClient.QueueClient(MessagingFactory factory, String queuePath, ReceiveMode receiveMode)
  fullName: com.microsoft.azure.servicebus.QueueClient.QueueClient(MessagingFactory factory, String queuePath, ReceiveMode receiveMode)
  overload: com.microsoft.azure.servicebus.QueueClient.QueueClient*
  type: Constructor
  package: com.microsoft.azure.servicebus
  syntax:
    content: " QueueClient(MessagingFactory factory, String queuePath, ReceiveMode receiveMode)"
    parameters:
    - id: factory
      type: com.microsoft.azure.servicebus.primitives.MessagingFactory
    - id: queuePath
      type: java.lang.String
    - id: receiveMode
      type: com.microsoft.azure.servicebus.ReceiveMode
- uid: com.microsoft.azure.servicebus.QueueClient.QueueClient(java.lang.String,java.lang.String,com.microsoft.azure.servicebus.ClientSettings,com.microsoft.azure.servicebus.ReceiveMode)
  id: QueueClient(java.lang.String,java.lang.String,com.microsoft.azure.servicebus.ClientSettings,com.microsoft.azure.servicebus.ReceiveMode)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: QueueClient(String namespace, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
  nameWithType: QueueClient.QueueClient(String namespace, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
  fullName: com.microsoft.azure.servicebus.QueueClient.QueueClient(String namespace, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
  overload: com.microsoft.azure.servicebus.QueueClient.QueueClient*
  type: Constructor
  package: com.microsoft.azure.servicebus
  syntax:
    content: public QueueClient(String namespace, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
    parameters:
    - id: namespace
      type: java.lang.String
    - id: queuePath
      type: java.lang.String
    - id: clientSettings
      type: com.microsoft.azure.servicebus.ClientSettings
    - id: receiveMode
      type: com.microsoft.azure.servicebus.ReceiveMode
- uid: com.microsoft.azure.servicebus.QueueClient.QueueClient(java.net.URI,java.lang.String,com.microsoft.azure.servicebus.ClientSettings,com.microsoft.azure.servicebus.ReceiveMode)
  id: QueueClient(java.net.URI,java.lang.String,com.microsoft.azure.servicebus.ClientSettings,com.microsoft.azure.servicebus.ReceiveMode)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: QueueClient(URI namespaceEndpointURI, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
  nameWithType: QueueClient.QueueClient(URI namespaceEndpointURI, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
  fullName: com.microsoft.azure.servicebus.QueueClient.QueueClient(URI namespaceEndpointURI, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
  overload: com.microsoft.azure.servicebus.QueueClient.QueueClient*
  type: Constructor
  package: com.microsoft.azure.servicebus
  syntax:
    content: public QueueClient(URI namespaceEndpointURI, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
    parameters:
    - id: namespaceEndpointURI
      type: java.net.URI
    - id: queuePath
      type: java.lang.String
    - id: clientSettings
      type: com.microsoft.azure.servicebus.ClientSettings
    - id: receiveMode
      type: com.microsoft.azure.servicebus.ReceiveMode
- uid: com.microsoft.azure.servicebus.QueueClient.abandon(java.util.UUID)
  id: abandon(java.util.UUID)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: abandon(UUID lockToken)
  nameWithType: QueueClient.abandon(UUID lockToken)
  fullName: com.microsoft.azure.servicebus.QueueClient.abandon(UUID lockToken)
  overload: com.microsoft.azure.servicebus.QueueClient.abandon*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Abandon <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message
  syntax:
    content: public void abandon(UUID lockToken)
    parameters:
    - id: lockToken
      type: java.util.UUID
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.abandon(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  id: abandon(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: abandon(UUID lockToken, TransactionContext transaction)
  nameWithType: QueueClient.abandon(UUID lockToken, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.abandon(UUID lockToken, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.abandon*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Abandon <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message
  syntax:
    content: public void abandon(UUID lockToken, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.abandon(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  id: abandon(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: abandon(UUID lockToken, Map<String,Object> propertiesToModify)
  nameWithType: QueueClient.abandon(UUID lockToken, Map<String,Object> propertiesToModify)
  fullName: com.microsoft.azure.servicebus.QueueClient.abandon(UUID lockToken, Map<String,Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus.QueueClient.abandon*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Abandon <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message
  syntax:
    content: public void abandon(UUID lockToken, Map<String,Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.abandon(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  id: abandon(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: abandon(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  nameWithType: QueueClient.abandon(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.abandon(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.abandon*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Abandon <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message
  syntax:
    content: public void abandon(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.abandonAsync(java.util.UUID)
  id: abandonAsync(java.util.UUID)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: abandonAsync(UUID lockToken)
  nameWithType: QueueClient.abandonAsync(UUID lockToken)
  fullName: com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID lockToken)
  overload: com.microsoft.azure.servicebus.QueueClient.abandonAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously abandon <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message.
  syntax:
    content: public CompletableFuture<Void> abandonAsync(UUID lockToken)
    parameters:
    - id: lockToken
      type: java.util.UUID
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.QueueClient.abandonAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  id: abandonAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: abandonAsync(UUID lockToken, TransactionContext transaction)
  nameWithType: QueueClient.abandonAsync(UUID lockToken, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID lockToken, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.abandonAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously abandon <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message.
  syntax:
    content: public CompletableFuture<Void> abandonAsync(UUID lockToken, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.QueueClient.abandonAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  id: abandonAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify)
  nameWithType: QueueClient.abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify)
  fullName: com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus.QueueClient.abandonAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously abandon <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message.
  syntax:
    content: public CompletableFuture<Void> abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.QueueClient.abandonAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  id: abandonAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  nameWithType: QueueClient.abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.abandonAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously abandon <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message.
  syntax:
    content: public CompletableFuture<Void> abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessage(long)
  id: cancelScheduledMessage(long)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: cancelScheduledMessage(long sequenceNumber)
  nameWithType: QueueClient.cancelScheduledMessage(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessage(long sequenceNumber)
  overload: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessage*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `cancelScheduledMessageAsync(sequenceNumber).get()`. For better performance, use async methods.
  syntax:
    content: public void cancelScheduledMessage(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: long
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessageAsync(long)
  id: cancelScheduledMessageAsync(long)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: cancelScheduledMessageAsync(long sequenceNumber)
  nameWithType: QueueClient.cancelScheduledMessageAsync(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessageAsync(long sequenceNumber)
  overload: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessageAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This is an asynchronous method returning a CompletableFuture which completes when the message is cancelled.
  syntax:
    content: public CompletableFuture<Void> cancelScheduledMessageAsync(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: long
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.QueueClient.complete(java.util.UUID)
  id: complete(java.util.UUID)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: complete(UUID lockToken)
  nameWithType: QueueClient.complete(UUID lockToken)
  fullName: com.microsoft.azure.servicebus.QueueClient.complete(UUID lockToken)
  overload: com.microsoft.azure.servicebus.QueueClient.complete*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Completes a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> using its lock token. This will delete the message from the service.
  syntax:
    content: public void complete(UUID lockToken)
    parameters:
    - id: lockToken
      type: java.util.UUID
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.complete(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  id: complete(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: complete(UUID lockToken, TransactionContext transaction)
  nameWithType: QueueClient.complete(UUID lockToken, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.complete(UUID lockToken, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.complete*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Completes a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> using its lock token. This will delete the message from the service.
  syntax:
    content: public void complete(UUID lockToken, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.completeAsync(java.util.UUID)
  id: completeAsync(java.util.UUID)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: completeAsync(UUID lockToken)
  nameWithType: QueueClient.completeAsync(UUID lockToken)
  fullName: com.microsoft.azure.servicebus.QueueClient.completeAsync(UUID lockToken)
  overload: com.microsoft.azure.servicebus.QueueClient.completeAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously completes a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> using its lock token. This will delete the message from the service.
  syntax:
    content: public CompletableFuture<Void> completeAsync(UUID lockToken)
    parameters:
    - id: lockToken
      type: java.util.UUID
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.QueueClient.completeAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  id: completeAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: completeAsync(UUID lockToken, TransactionContext transaction)
  nameWithType: QueueClient.completeAsync(UUID lockToken, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.completeAsync(UUID lockToken, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.completeAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously completes a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> using its lock token. This will delete the message from the service.
  syntax:
    content: public CompletableFuture<Void> completeAsync(UUID lockToken, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID)
  id: deadLetter(java.util.UUID)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: deadLetter(UUID lockToken)
  nameWithType: QueueClient.deadLetter(UUID lockToken)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetter*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue.
  syntax:
    content: public void deadLetter(UUID lockToken)
    parameters:
    - id: lockToken
      type: java.util.UUID
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  id: deadLetter(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: deadLetter(UUID lockToken, TransactionContext transaction)
  nameWithType: QueueClient.deadLetter(UUID lockToken, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetter*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue.
  syntax:
    content: public void deadLetter(UUID lockToken, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String)
  id: deadLetter(java.util.UUID,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  nameWithType: QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetter*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description.
  syntax:
    content: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: deadLetterReason
      type: java.lang.String
    - id: deadLetterErrorDescription
      type: java.lang.String
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String,com.microsoft.azure.servicebus.TransactionContext)
  id: deadLetter(java.util.UUID,java.lang.String,java.lang.String,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  nameWithType: QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetter*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description.
  syntax:
    content: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: deadLetterReason
      type: java.lang.String
    - id: deadLetterErrorDescription
      type: java.lang.String
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)
  id: deadLetter(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)
  nameWithType: QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetter*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description and modified properties.
  syntax:
    content: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: deadLetterReason
      type: java.lang.String
    - id: deadLetterErrorDescription
      type: java.lang.String
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  id: deadLetter(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)
  nameWithType: QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetter*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description and modified properties.
  syntax:
    content: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: deadLetterReason
      type: java.lang.String
    - id: deadLetterErrorDescription
      type: java.lang.String
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  id: deadLetter(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: deadLetter(UUID lockToken, Map<String,Object> propertiesToModify)
  nameWithType: QueueClient.deadLetter(UUID lockToken, Map<String,Object> propertiesToModify)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, Map<String,Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetter*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with modified message properties.
  syntax:
    content: public void deadLetter(UUID lockToken, Map<String,Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  id: deadLetter(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: deadLetter(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  nameWithType: QueueClient.deadLetter(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetter*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with modified message properties.
  syntax:
    content: public void deadLetter(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID)
  id: deadLetterAsync(java.util.UUID)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: deadLetterAsync(UUID lockToken)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter.
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken)
    parameters:
    - id: lockToken
      type: java.util.UUID
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  id: deadLetterAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, TransactionContext transaction)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter.
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String)
  id: deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description.
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: deadLetterReason
      type: java.lang.String
    - id: deadLetterErrorDescription
      type: java.lang.String
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,com.microsoft.azure.servicebus.TransactionContext)
  id: deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description.
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: deadLetterReason
      type: java.lang.String
    - id: deadLetterErrorDescription
      type: java.lang.String
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)
  id: deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description and modified properties.
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: deadLetterReason
      type: java.lang.String
    - id: deadLetterErrorDescription
      type: java.lang.String
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  id: deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description and modified properties.
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: deadLetterReason
      type: java.lang.String
    - id: deadLetterErrorDescription
      type: java.lang.String
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  id: deadLetterAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with modified properties.
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  id: deadLetterAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with modified properties.
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.QueueClient.getEntityPath()
  id: getEntityPath()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: getEntityPath()
  nameWithType: QueueClient.getEntityPath()
  fullName: com.microsoft.azure.servicebus.QueueClient.getEntityPath()
  overload: com.microsoft.azure.servicebus.QueueClient.getEntityPath*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Gets the path of the entity this client is sending messages to or receiving messages from.
  syntax:
    content: public String getEntityPath()
    return:
      type: java.lang.String
- uid: com.microsoft.azure.servicebus.QueueClient.getPrefetchCount()
  id: getPrefetchCount()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: getPrefetchCount()
  nameWithType: QueueClient.getPrefetchCount()
  fullName: com.microsoft.azure.servicebus.QueueClient.getPrefetchCount()
  overload: com.microsoft.azure.servicebus.QueueClient.getPrefetchCount*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Get the prefetch value set.
  syntax:
    content: public int getPrefetchCount()
    return:
      type: int
- uid: com.microsoft.azure.servicebus.QueueClient.getQueueName()
  id: getQueueName()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: getQueueName()
  nameWithType: QueueClient.getQueueName()
  fullName: com.microsoft.azure.servicebus.QueueClient.getQueueName()
  overload: com.microsoft.azure.servicebus.QueueClient.getQueueName*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Gets the name of the queue.
  syntax:
    content: public String getQueueName()
    return:
      type: java.lang.String
- uid: com.microsoft.azure.servicebus.QueueClient.getReceiveMode()
  id: getReceiveMode()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: getReceiveMode()
  nameWithType: QueueClient.getReceiveMode()
  fullName: com.microsoft.azure.servicebus.QueueClient.getReceiveMode()
  overload: com.microsoft.azure.servicebus.QueueClient.getReceiveMode*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Gets the <xref uid="com.microsoft.azure.servicebus.ReceiveMode" data-throw-if-not-resolved="false">ReceiveMode</xref> of the current receiver
  syntax:
    content: public ReceiveMode getReceiveMode()
    return:
      type: com.microsoft.azure.servicebus.ReceiveMode
- uid: com.microsoft.azure.servicebus.QueueClient.onClose()
  id: onClose()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: onClose()
  nameWithType: QueueClient.onClose()
  fullName: com.microsoft.azure.servicebus.QueueClient.onClose()
  overload: com.microsoft.azure.servicebus.QueueClient.onClose*
  type: Method
  package: com.microsoft.azure.servicebus
  syntax:
    content: protected CompletableFuture<Void> onClose()
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler)
  id: registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: registerMessageHandler(IMessageHandler handler)
  nameWithType: QueueClient.registerMessageHandler(IMessageHandler handler)
  fullName: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler handler)
  overload: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages. IMessageHandler methods are executed on java.util.concurrent.commonPool()
  syntax:
    content: public void registerMessageHandler(IMessageHandler handler)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.IMessageHandler
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,com.microsoft.azure.servicebus.MessageHandlerOptions)
  id: registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,com.microsoft.azure.servicebus.MessageHandlerOptions)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)
  nameWithType: QueueClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)
  fullName: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)
  overload: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages. IMessageHandler methods are executed on java.util.concurrent.commonPool()
  syntax:
    content: public void registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.IMessageHandler
    - id: handlerOptions
      type: com.microsoft.azure.servicebus.MessageHandlerOptions
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,com.microsoft.azure.servicebus.MessageHandlerOptions,java.util.concurrent.ExecutorService)
  id: registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,com.microsoft.azure.servicebus.MessageHandlerOptions,java.util.concurrent.ExecutorService)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)
  nameWithType: QueueClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)
  fullName: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)
  overload: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages. IMessageHandler methods are executed on the passed executor service.
  syntax:
    content: public void registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.IMessageHandler
    - id: handlerOptions
      type: com.microsoft.azure.servicebus.MessageHandlerOptions
    - id: executorService
      type: java.util.concurrent.ExecutorService
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,java.util.concurrent.ExecutorService)
  id: registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,java.util.concurrent.ExecutorService)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: registerMessageHandler(IMessageHandler handler, ExecutorService executorService)
  nameWithType: QueueClient.registerMessageHandler(IMessageHandler handler, ExecutorService executorService)
  fullName: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler handler, ExecutorService executorService)
  overload: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages. IMessageHandler methods are executed on the passed executor service.
  syntax:
    content: public void registerMessageHandler(IMessageHandler handler, ExecutorService executorService)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.IMessageHandler
    - id: executorService
      type: java.util.concurrent.ExecutorService
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler)
  id: registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: registerSessionHandler(ISessionHandler handler)
  nameWithType: QueueClient.registerSessionHandler(ISessionHandler handler)
  fullName: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler handler)
  overload: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages. ISessionHandler methods are executed on java.util.concurrent.commonPool()
  syntax:
    content: public void registerSessionHandler(ISessionHandler handler)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.ISessionHandler
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,com.microsoft.azure.servicebus.SessionHandlerOptions)
  id: registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,com.microsoft.azure.servicebus.SessionHandlerOptions)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)
  nameWithType: QueueClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)
  fullName: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)
  overload: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages. ISessionHandler methods are executed on java.util.concurrent.commonPool()
  syntax:
    content: public void registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.ISessionHandler
    - id: handlerOptions
      type: com.microsoft.azure.servicebus.SessionHandlerOptions
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,com.microsoft.azure.servicebus.SessionHandlerOptions,java.util.concurrent.ExecutorService)
  id: registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,com.microsoft.azure.servicebus.SessionHandlerOptions,java.util.concurrent.ExecutorService)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)
  nameWithType: QueueClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)
  fullName: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)
  overload: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages. ISessionHandler methods are executed on the passed executor service.
  syntax:
    content: public void registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.ISessionHandler
    - id: handlerOptions
      type: com.microsoft.azure.servicebus.SessionHandlerOptions
    - id: executorService
      type: java.util.concurrent.ExecutorService
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,java.util.concurrent.ExecutorService)
  id: registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,java.util.concurrent.ExecutorService)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: registerSessionHandler(ISessionHandler handler, ExecutorService executorService)
  nameWithType: QueueClient.registerSessionHandler(ISessionHandler handler, ExecutorService executorService)
  fullName: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler handler, ExecutorService executorService)
  overload: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages. ISessionHandler methods are executed on the passed executor service.
  syntax:
    content: public void registerSessionHandler(ISessionHandler handler, ExecutorService executorService)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.ISessionHandler
    - id: executorService
      type: java.util.concurrent.ExecutorService
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant)
  id: scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: QueueClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.QueueClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  overload: com.microsoft.azure.servicebus.QueueClient.scheduleMessage*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `scheduleMessageAsync(message, scheduledEnqueueTimeUtc).get()`. For better performance, use async methods.
  syntax:
    content: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
    - id: scheduledEnqueueTimeUtc
      type: java.time.Instant
    return:
      type: long
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)
  id: scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: QueueClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.scheduleMessage*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `scheduleMessageAsync(message, scheduledEnqueueTimeUtc).get()`. For better performance, use async methods.
  syntax:
    content: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
    - id: scheduledEnqueueTimeUtc
      type: java.time.Instant
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: long
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant)
  id: scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: QueueClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  overload: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.
  syntax:
    content: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
    - id: scheduledEnqueueTimeUtc
      type: java.time.Instant
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Long>
- uid: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)
  id: scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: QueueClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.
  syntax:
    content: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
    - id: scheduledEnqueueTimeUtc
      type: java.time.Instant
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Long>
- uid: com.microsoft.azure.servicebus.QueueClient.send(com.microsoft.azure.servicebus.IMessage)
  id: send(com.microsoft.azure.servicebus.IMessage)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: send(IMessage message)
  nameWithType: QueueClient.send(IMessage message)
  fullName: com.microsoft.azure.servicebus.QueueClient.send(IMessage message)
  overload: com.microsoft.azure.servicebus.QueueClient.send*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `sendAsync(message).get()`. For better performance, use async methods.
  syntax:
    content: public void send(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.send(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)
  id: send(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: send(IMessage message, TransactionContext transaction)
  nameWithType: QueueClient.send(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.send(IMessage message, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.send*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `sendAsync(message).get()`. For better performance, use async methods.
  syntax:
    content: public void send(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.sendAsync(com.microsoft.azure.servicebus.IMessage)
  id: sendAsync(com.microsoft.azure.servicebus.IMessage)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: sendAsync(IMessage message)
  nameWithType: QueueClient.sendAsync(IMessage message)
  fullName: com.microsoft.azure.servicebus.QueueClient.sendAsync(IMessage message)
  overload: com.microsoft.azure.servicebus.QueueClient.sendAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.
  syntax:
    content: public CompletableFuture<Void> sendAsync(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.QueueClient.sendAsync(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)
  id: sendAsync(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: sendAsync(IMessage message, TransactionContext transaction)
  nameWithType: QueueClient.sendAsync(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.sendAsync(IMessage message, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.sendAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.
  syntax:
    content: public CompletableFuture<Void> sendAsync(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.QueueClient.sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)
  id: sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: sendBatch(Collection<? extends IMessage> messages)
  nameWithType: QueueClient.sendBatch(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.QueueClient.sendBatch(Collection<? extends IMessage> messages)
  overload: com.microsoft.azure.servicebus.QueueClient.sendBatch*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling `sendBatchAsync(messages).get()`. For better performance, use async methods. When called on partitioned entities, messages meant for different partitions cannot be batched together.
  syntax:
    content: public void sendBatch(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)
  id: sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: QueueClient.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.sendBatch*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling `sendBatchAsync(messages).get()`. For better performance, use async methods. When called on partitioned entities, messages meant for different partitions cannot be batched together.
  syntax:
    content: public void sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)
  id: sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: sendBatchAsync(Collection<? extends IMessage> messages)
  nameWithType: QueueClient.sendBatchAsync(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(Collection<? extends IMessage> messages)
  overload: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity. When called on partitioned entities, messages meant for different partitions cannot be batched together.
  syntax:
    content: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)
  id: sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: QueueClient.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity. When called on partitioned entities, messages meant for different partitions cannot be batched together.
  syntax:
    content: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.QueueClient.setPrefetchCount(int)
  id: setPrefetchCount(int)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.QueueClient
  langs:
  - java
  name: setPrefetchCount(int prefetchCount)
  nameWithType: QueueClient.setPrefetchCount(int prefetchCount)
  fullName: com.microsoft.azure.servicebus.QueueClient.setPrefetchCount(int prefetchCount)
  overload: com.microsoft.azure.servicebus.QueueClient.setPrefetchCount*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: >-
    Set the prefetch count of the receiver. Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when and before the application asks for one using Receive. Setting a non-zero value prefetches PrefetchCount number of messages. Setting the value to zero turns prefetch off. For RECEIVEANDDELETE mode, the default value is 0. For PEEKLOCK mode, the default value is 100.


    The value cannot be set until the receiver is created.
  syntax:
    content: public void setPrefetchCount(int prefetchCount)
    parameters:
    - id: prefetchCount
      type: int
  exceptions:
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
references:
- uid: com.microsoft.azure.servicebus.ReceiveMode
  name: ReceiveMode
  nameWithType: ReceiveMode
  fullName: com.microsoft.azure.servicebus.ReceiveMode
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.servicebus.QueueClient.QueueClient*
  name: QueueClient
  nameWithType: QueueClient.QueueClient
  fullName: com.microsoft.azure.servicebus.QueueClient.QueueClient
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder
  name: ConnectionStringBuilder
  nameWithType: ConnectionStringBuilder
  fullName: com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder
- uid: com.microsoft.azure.servicebus.ClientSettings
  name: ClientSettings
  nameWithType: ClientSettings
  fullName: com.microsoft.azure.servicebus.ClientSettings
- uid: java.net.URI
  spec.java:
  - uid: java.net.URI
    name: URI
    fullName: java.net.URI
- uid: com.microsoft.azure.servicebus.primitives.MessagingFactory
  name: MessagingFactory
  nameWithType: MessagingFactory
  fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory
- uid: com.microsoft.azure.servicebus.QueueClient.getReceiveMode*
  name: getReceiveMode
  nameWithType: QueueClient.getReceiveMode
  fullName: com.microsoft.azure.servicebus.QueueClient.getReceiveMode
  package: com.microsoft.azure.servicebus
- uid: java.lang.InterruptedException
  spec.java:
  - uid: java.lang.InterruptedException
    name: InterruptedException
    fullName: java.lang.InterruptedException
- uid: com.microsoft.azure.servicebus.primitives.ServiceBusException
  name: ServiceBusException
  nameWithType: ServiceBusException
  fullName: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.IMessage
  name: IMessage
  nameWithType: IMessage
  fullName: com.microsoft.azure.servicebus.IMessage
- uid: com.microsoft.azure.servicebus.QueueClient.send*
  name: send
  nameWithType: QueueClient.send
  fullName: com.microsoft.azure.servicebus.QueueClient.send
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TransactionContext
  name: TransactionContext
  nameWithType: TransactionContext
  fullName: com.microsoft.azure.servicebus.TransactionContext
- uid: java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: '? extends com.microsoft.azure.servicebus.IMessage'
    name: IMessage
    fullName: '? extends com.microsoft.azure.servicebus.IMessage'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.QueueClient.sendBatch*
  name: sendBatch
  nameWithType: QueueClient.sendBatch
  fullName: com.microsoft.azure.servicebus.QueueClient.sendBatch
  package: com.microsoft.azure.servicebus
- uid: java.util.concurrent.CompletableFuture<java.lang.Void>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.QueueClient.sendAsync*
  name: sendAsync
  nameWithType: QueueClient.sendAsync
  fullName: com.microsoft.azure.servicebus.QueueClient.sendAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync*
  name: sendBatchAsync
  nameWithType: QueueClient.sendBatchAsync
  fullName: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync
  package: com.microsoft.azure.servicebus
- uid: java.time.Instant
  spec.java:
  - uid: java.time.Instant
    name: Instant
    fullName: java.time.Instant
- uid: java.util.concurrent.CompletableFuture<java.lang.Long>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync*
  name: scheduleMessageAsync
  nameWithType: QueueClient.scheduleMessageAsync
  fullName: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync
  package: com.microsoft.azure.servicebus
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessageAsync*
  name: cancelScheduledMessageAsync
  nameWithType: QueueClient.cancelScheduledMessageAsync
  fullName: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessageAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.scheduleMessage*
  name: scheduleMessage
  nameWithType: QueueClient.scheduleMessage
  fullName: com.microsoft.azure.servicebus.QueueClient.scheduleMessage
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessage*
  name: cancelScheduledMessage
  nameWithType: QueueClient.cancelScheduledMessage
  fullName: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessage
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.getEntityPath*
  name: getEntityPath
  nameWithType: QueueClient.getEntityPath
  fullName: com.microsoft.azure.servicebus.QueueClient.getEntityPath
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.IMessageHandler
  name: IMessageHandler
  nameWithType: IMessageHandler
  fullName: com.microsoft.azure.servicebus.IMessageHandler
- uid: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler*
  name: registerMessageHandler
  nameWithType: QueueClient.registerMessageHandler
  fullName: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.MessageHandlerOptions
  name: MessageHandlerOptions
  nameWithType: MessageHandlerOptions
  fullName: com.microsoft.azure.servicebus.MessageHandlerOptions
- uid: com.microsoft.azure.servicebus.ISessionHandler
  name: ISessionHandler
  nameWithType: ISessionHandler
  fullName: com.microsoft.azure.servicebus.ISessionHandler
- uid: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler*
  name: registerSessionHandler
  nameWithType: QueueClient.registerSessionHandler
  fullName: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.SessionHandlerOptions
  name: SessionHandlerOptions
  nameWithType: SessionHandlerOptions
  fullName: com.microsoft.azure.servicebus.SessionHandlerOptions
- uid: java.util.concurrent.ExecutorService
  spec.java:
  - uid: java.util.concurrent.ExecutorService
    name: ExecutorService
    fullName: java.util.concurrent.ExecutorService
- uid: com.microsoft.azure.servicebus.QueueClient.onClose*
  name: onClose
  nameWithType: QueueClient.onClose
  fullName: com.microsoft.azure.servicebus.QueueClient.onClose
  package: com.microsoft.azure.servicebus
- uid: java.util.UUID
  spec.java:
  - uid: java.util.UUID
    name: UUID
    fullName: java.util.UUID
- uid: com.microsoft.azure.servicebus.QueueClient.abandon*
  name: abandon
  nameWithType: QueueClient.abandon
  fullName: com.microsoft.azure.servicebus.QueueClient.abandon
  package: com.microsoft.azure.servicebus
- uid: java.util.Map<java.lang.String,java.lang.Object>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.QueueClient.abandonAsync*
  name: abandonAsync
  nameWithType: QueueClient.abandonAsync
  fullName: com.microsoft.azure.servicebus.QueueClient.abandonAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.complete*
  name: complete
  nameWithType: QueueClient.complete
  fullName: com.microsoft.azure.servicebus.QueueClient.complete
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.completeAsync*
  name: completeAsync
  nameWithType: QueueClient.completeAsync
  fullName: com.microsoft.azure.servicebus.QueueClient.completeAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetter*
  name: deadLetter
  nameWithType: QueueClient.deadLetter
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync*
  name: deadLetterAsync
  nameWithType: QueueClient.deadLetterAsync
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync
  package: com.microsoft.azure.servicebus
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.microsoft.azure.servicebus.QueueClient.getPrefetchCount*
  name: getPrefetchCount
  nameWithType: QueueClient.getPrefetchCount
  fullName: com.microsoft.azure.servicebus.QueueClient.getPrefetchCount
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.setPrefetchCount*
  name: setPrefetchCount
  nameWithType: QueueClient.setPrefetchCount
  fullName: com.microsoft.azure.servicebus.QueueClient.setPrefetchCount
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.getQueueName*
  name: getQueueName
  nameWithType: QueueClient.getQueueName
  fullName: com.microsoft.azure.servicebus.QueueClient.getQueueName
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.InitializableEntity
  name: InitializableEntity
  nameWithType: InitializableEntity
  fullName: com.microsoft.azure.servicebus.InitializableEntity
- uid: com.microsoft.azure.servicebus.IQueueClient
  name: IQueueClient
  nameWithType: IQueueClient
  fullName: com.microsoft.azure.servicebus.IQueueClient
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()
  name: ClientEntity.setClosed()
  nameWithType: ClientEntity.setClosed()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()
  name: ClientEntity.finalize()
  nameWithType: ClientEntity.finalize()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.setClosing()
  name: ClientEntity.setClosing()
  nameWithType: ClientEntity.setClosing()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.setClosing()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(java.lang.Throwable)
  name: ClientEntity.throwIfClosed(Throwable)
  nameWithType: ClientEntity.throwIfClosed(Throwable)
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(java.lang.Throwable)
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.close()
  name: ClientEntity.close()
  nameWithType: ClientEntity.close()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.close()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()
  name: ClientEntity.closeAsync()
  nameWithType: ClientEntity.closeAsync()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.onClose()
  name: ClientEntity.onClose()
  nameWithType: ClientEntity.onClose()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.onClose()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()
  name: ClientEntity.getIsClosed()
  nameWithType: ClientEntity.getIsClosed()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()
  name: ClientEntity.getIsClosingOrClosed()
  nameWithType: ClientEntity.getIsClosingOrClosed()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()
  name: ClientEntity.getClientId()
  nameWithType: ClientEntity.getClientId()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: '? extends com.microsoft.azure.servicebus.IMessage'
  name: '? extends IMessage'
  nameWithType: '? extends IMessage'
  fullName: '? extends com.microsoft.azure.servicebus.IMessage'
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: java.util.concurrent.CompletableFuture
  name: CompletableFuture
  nameWithType: CompletableFuture
  fullName: java.util.concurrent.CompletableFuture
- uid: java.lang.Long
  name: Long
  nameWithType: Long
  fullName: java.lang.Long
- uid: java.lang.String,java.lang.Object
  name: String,Object
  nameWithType: String,Object
  fullName: java.lang.String,java.lang.Object
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
