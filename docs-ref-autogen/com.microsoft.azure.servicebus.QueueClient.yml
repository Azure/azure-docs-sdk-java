### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.servicebus.QueueClient
  id: QueueClient
  parent: com.microsoft.azure.servicebus
  children:
  - com.microsoft.azure.servicebus.QueueClient.abandon(UUID)
  - com.microsoft.azure.servicebus.QueueClient.abandon(UUID,Map<String, Object>)
  - com.microsoft.azure.servicebus.QueueClient.abandon(UUID,Map<String, Object>,TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.abandon(UUID,TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID)
  - com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID,Map<String, Object>)
  - com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID,Map<String, Object>,TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID,TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessage(long)
  - com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessageAsync(long)
  - com.microsoft.azure.servicebus.QueueClient.complete(UUID)
  - com.microsoft.azure.servicebus.QueueClient.complete(UUID,TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.completeAsync(UUID)
  - com.microsoft.azure.servicebus.QueueClient.completeAsync(UUID,TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID)
  - com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID,Map<String, Object>)
  - com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID,Map<String, Object>,TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID,String,String)
  - com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID,String,String,Map<String, Object>)
  - com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID,String,String,Map<String, Object>,TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID,String,String,TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID,TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID)
  - com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID,Map<String, Object>)
  - com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID,Map<String, Object>,TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID,String,String)
  - com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID,String,String,Map<String, Object>)
  - com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID,String,String,Map<String, Object>,TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID,String,String,TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID,TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.getEntityPath()
  - com.microsoft.azure.servicebus.QueueClient.getPrefetchCount()
  - com.microsoft.azure.servicebus.QueueClient.getQueueName()
  - com.microsoft.azure.servicebus.QueueClient.getReceiveMode()
  - com.microsoft.azure.servicebus.QueueClient.onClose()
  - com.microsoft.azure.servicebus.QueueClient.QueueClient(ConnectionStringBuilder,ReceiveMode)
  - com.microsoft.azure.servicebus.QueueClient.QueueClient(String,String,ClientSettings,ReceiveMode)
  - com.microsoft.azure.servicebus.QueueClient.QueueClient(URI,String,ClientSettings,ReceiveMode)
  - com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler)
  - com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler,ExecutorService)
  - com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler,MessageHandlerOptions)
  - com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler,MessageHandlerOptions,ExecutorService)
  - com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler)
  - com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler,ExecutorService)
  - com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler,SessionHandlerOptions)
  - com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler,SessionHandlerOptions,ExecutorService)
  - com.microsoft.azure.servicebus.QueueClient.scheduleMessage(IMessage,Instant)
  - com.microsoft.azure.servicebus.QueueClient.scheduleMessage(IMessage,Instant,TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(IMessage,Instant)
  - com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(IMessage,Instant,TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.send(IMessage)
  - com.microsoft.azure.servicebus.QueueClient.send(IMessage,TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.sendAsync(IMessage)
  - com.microsoft.azure.servicebus.QueueClient.sendAsync(IMessage,TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.sendBatch(Collection<? extends IMessage>)
  - com.microsoft.azure.servicebus.QueueClient.sendBatch(Collection<? extends IMessage>,TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(Collection<? extends IMessage>)
  - com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(Collection<? extends IMessage>,TransactionContext)
  - com.microsoft.azure.servicebus.QueueClient.setPrefetchCount(int)
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: QueueClient
  nameWithType: QueueClient
  fullName: com.microsoft.azure.servicebus.QueueClient
  type: Class
  source:
    remote: &o0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
      branch: master
      repo: https://github.com/Azure/azure-service-bus-java
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 26
  package: com.microsoft.azure.servicebus
  syntax:
    content: public class QueueClient implements IQueueClient
  inheritance:
  - java.lang.Object
  - com.microsoft.azure.servicebus.primitives.ClientEntity
  - com.microsoft.azure.servicebus.InitializableEntity
  inheritedMembers:
  - com.microsoft.azure.servicebus.primitives.ClientEntity.ClientEntity(final String)
  - com.microsoft.azure.servicebus.primitives.ClientEntity.close()
  - com.microsoft.azure.servicebus.ICloseable.close()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()
  - com.microsoft.azure.servicebus.ICloseable.closeAsync()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()
  - com.microsoft.azure.servicebus.InitializableEntity.InitializableEntity(String)
  - com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(Throwable)
- uid: com.microsoft.azure.servicebus.QueueClient.abandon(UUID)
  id: abandon(UUID)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: abandon(UUID lockToken)
  nameWithType: QueueClient.abandon(UUID lockToken)
  fullName: com.microsoft.azure.servicebus.QueueClient.abandon(UUID lockToken)
  overload: com.microsoft.azure.servicebus.QueueClient.abandon*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 313
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void abandon(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
- uid: com.microsoft.azure.servicebus.QueueClient.abandon(UUID,Map<String, Object>)
  id: abandon(UUID,Map<String, Object>)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: abandon(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: QueueClient.abandon(UUID lockToken, Map<String, Object> propertiesToModify)
  fullName: com.microsoft.azure.servicebus.QueueClient.abandon(UUID lockToken, Map<String, Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus.QueueClient.abandon*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 323
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void abandon(UUID lockToken, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
    - id: propertiesToModify
      type: e7b06046
- uid: com.microsoft.azure.servicebus.QueueClient.abandon(UUID,Map<String, Object>,TransactionContext)
  id: abandon(UUID,Map<String, Object>,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: abandon(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  nameWithType: QueueClient.abandon(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.abandon(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.abandon*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 328
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void abandon(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: add9545a
    - id: propertiesToModify
      type: e7b06046
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
- uid: com.microsoft.azure.servicebus.QueueClient.abandon(UUID,TransactionContext)
  id: abandon(UUID,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: abandon(UUID lockToken, TransactionContext transaction)
  nameWithType: QueueClient.abandon(UUID lockToken, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.abandon(UUID lockToken, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.abandon*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 318
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void abandon(UUID lockToken, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: add9545a
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
- uid: com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID)
  id: abandonAsync(UUID)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: abandonAsync(UUID lockToken)
  nameWithType: QueueClient.abandonAsync(UUID lockToken)
  fullName: com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID lockToken)
  overload: com.microsoft.azure.servicebus.QueueClient.abandonAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 333
  package: com.microsoft.azure.servicebus
  syntax:
    content: public CompletableFuture<Void> abandonAsync(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
    return:
      type: db03ee24
- uid: com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID,Map<String, Object>)
  id: abandonAsync(UUID,Map<String, Object>)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: QueueClient.abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  fullName: com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus.QueueClient.abandonAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 343
  package: com.microsoft.azure.servicebus
  syntax:
    content: public CompletableFuture<Void> abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
    - id: propertiesToModify
      type: e7b06046
    return:
      type: db03ee24
- uid: com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID,Map<String, Object>,TransactionContext)
  id: abandonAsync(UUID,Map<String, Object>,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  nameWithType: QueueClient.abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.abandonAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 348
  package: com.microsoft.azure.servicebus
  syntax:
    content: public CompletableFuture<Void> abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: add9545a
    - id: propertiesToModify
      type: e7b06046
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: db03ee24
- uid: com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID,TransactionContext)
  id: abandonAsync(UUID,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: abandonAsync(UUID lockToken, TransactionContext transaction)
  nameWithType: QueueClient.abandonAsync(UUID lockToken, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.abandonAsync(UUID lockToken, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.abandonAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 338
  package: com.microsoft.azure.servicebus
  syntax:
    content: public CompletableFuture<Void> abandonAsync(UUID lockToken, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: add9545a
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: db03ee24
- uid: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessage(long)
  id: cancelScheduledMessage(long)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: cancelScheduledMessage(long sequenceNumber)
  nameWithType: QueueClient.cancelScheduledMessage(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessage(long sequenceNumber)
  overload: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessage*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 228
  package: com.microsoft.azure.servicebus
  summary: "<p>Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void cancelScheduledMessage(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage(long)
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if scheduled message couldn't be cancelled </p>
- uid: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessageAsync(long)
  id: cancelScheduledMessageAsync(long)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: cancelScheduledMessageAsync(long sequenceNumber)
  nameWithType: QueueClient.cancelScheduledMessageAsync(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessageAsync(long sequenceNumber)
  overload: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessageAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 210
  package: com.microsoft.azure.servicebus
  summary: "<p>Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This is an asynchronous method returning a CompletableFuture which completes when the message is cancelled.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> cancelScheduledMessageAsync(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending cancellation </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync(long)
- uid: com.microsoft.azure.servicebus.QueueClient.complete(UUID)
  id: complete(UUID)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: complete(UUID lockToken)
  nameWithType: QueueClient.complete(UUID lockToken)
  fullName: com.microsoft.azure.servicebus.QueueClient.complete(UUID lockToken)
  overload: com.microsoft.azure.servicebus.QueueClient.complete*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 353
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void complete(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
- uid: com.microsoft.azure.servicebus.QueueClient.complete(UUID,TransactionContext)
  id: complete(UUID,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: complete(UUID lockToken, TransactionContext transaction)
  nameWithType: QueueClient.complete(UUID lockToken, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.complete(UUID lockToken, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.complete*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 358
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void complete(UUID lockToken, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: add9545a
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
- uid: com.microsoft.azure.servicebus.QueueClient.completeAsync(UUID)
  id: completeAsync(UUID)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: completeAsync(UUID lockToken)
  nameWithType: QueueClient.completeAsync(UUID lockToken)
  fullName: com.microsoft.azure.servicebus.QueueClient.completeAsync(UUID lockToken)
  overload: com.microsoft.azure.servicebus.QueueClient.completeAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 363
  package: com.microsoft.azure.servicebus
  syntax:
    content: public CompletableFuture<Void> completeAsync(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
    return:
      type: db03ee24
- uid: com.microsoft.azure.servicebus.QueueClient.completeAsync(UUID,TransactionContext)
  id: completeAsync(UUID,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: completeAsync(UUID lockToken, TransactionContext transaction)
  nameWithType: QueueClient.completeAsync(UUID lockToken, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.completeAsync(UUID lockToken, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.completeAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 368
  package: com.microsoft.azure.servicebus
  syntax:
    content: public CompletableFuture<Void> completeAsync(UUID lockToken, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: add9545a
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: db03ee24
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID)
  id: deadLetter(UUID)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: deadLetter(UUID lockToken)
  nameWithType: QueueClient.deadLetter(UUID lockToken)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetter*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 393
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void deadLetter(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID,Map<String, Object>)
  id: deadLetter(UUID,Map<String, Object>)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: QueueClient.deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetter*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 403
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
    - id: propertiesToModify
      type: e7b06046
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID,Map<String, Object>,TransactionContext)
  id: deadLetter(UUID,Map<String, Object>,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: deadLetter(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  nameWithType: QueueClient.deadLetter(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetter*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 408
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void deadLetter(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: add9545a
    - id: propertiesToModify
      type: e7b06046
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID,String,String)
  id: deadLetter(UUID,String,String)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  nameWithType: QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetter*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 413
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
    parameters:
    - id: lockToken
      type: add9545a
    - id: deadLetterReason
      type: "26831127"
    - id: deadLetterErrorDescription
      type: "26831127"
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID,String,String,Map<String, Object>)
  id: deadLetter(UUID,String,String,Map<String, Object>)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  nameWithType: QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetter*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 423
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
    - id: deadLetterReason
      type: "26831127"
    - id: deadLetterErrorDescription
      type: "26831127"
    - id: propertiesToModify
      type: e7b06046
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID,String,String,Map<String, Object>,TransactionContext)
  id: deadLetter(UUID,String,String,Map<String, Object>,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  nameWithType: QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetter*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 428
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: add9545a
    - id: deadLetterReason
      type: "26831127"
    - id: deadLetterErrorDescription
      type: "26831127"
    - id: propertiesToModify
      type: e7b06046
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID,String,String,TransactionContext)
  id: deadLetter(UUID,String,String,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  nameWithType: QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetter*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 418
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: add9545a
    - id: deadLetterReason
      type: "26831127"
    - id: deadLetterErrorDescription
      type: "26831127"
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID,TransactionContext)
  id: deadLetter(UUID,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: deadLetter(UUID lockToken, TransactionContext transaction)
  nameWithType: QueueClient.deadLetter(UUID lockToken, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter(UUID lockToken, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetter*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 398
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void deadLetter(UUID lockToken, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: add9545a
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID)
  id: deadLetterAsync(UUID)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: deadLetterAsync(UUID lockToken)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 433
  package: com.microsoft.azure.servicebus
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
    return:
      type: db03ee24
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID,Map<String, Object>)
  id: deadLetterAsync(UUID,Map<String, Object>)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 443
  package: com.microsoft.azure.servicebus
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
    - id: propertiesToModify
      type: e7b06046
    return:
      type: db03ee24
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID,Map<String, Object>,TransactionContext)
  id: deadLetterAsync(UUID,Map<String, Object>,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 448
  package: com.microsoft.azure.servicebus
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: add9545a
    - id: propertiesToModify
      type: e7b06046
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: db03ee24
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID,String,String)
  id: deadLetterAsync(UUID,String,String)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 453
  package: com.microsoft.azure.servicebus
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
    parameters:
    - id: lockToken
      type: add9545a
    - id: deadLetterReason
      type: "26831127"
    - id: deadLetterErrorDescription
      type: "26831127"
    return:
      type: db03ee24
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID,String,String,Map<String, Object>)
  id: deadLetterAsync(UUID,String,String,Map<String, Object>)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 463
  package: com.microsoft.azure.servicebus
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
    - id: deadLetterReason
      type: "26831127"
    - id: deadLetterErrorDescription
      type: "26831127"
    - id: propertiesToModify
      type: e7b06046
    return:
      type: db03ee24
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID,String,String,Map<String, Object>,TransactionContext)
  id: deadLetterAsync(UUID,String,String,Map<String, Object>,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 468
  package: com.microsoft.azure.servicebus
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: add9545a
    - id: deadLetterReason
      type: "26831127"
    - id: deadLetterErrorDescription
      type: "26831127"
    - id: propertiesToModify
      type: e7b06046
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: db03ee24
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID,String,String,TransactionContext)
  id: deadLetterAsync(UUID,String,String,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 458
  package: com.microsoft.azure.servicebus
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: add9545a
    - id: deadLetterReason
      type: "26831127"
    - id: deadLetterErrorDescription
      type: "26831127"
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: db03ee24
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID,TransactionContext)
  id: deadLetterAsync(UUID,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, TransactionContext transaction)
  nameWithType: QueueClient.deadLetterAsync(UUID lockToken, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync(UUID lockToken, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 438
  package: com.microsoft.azure.servicebus
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: add9545a
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: db03ee24
- uid: com.microsoft.azure.servicebus.QueueClient.getEntityPath()
  id: getEntityPath()
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: getEntityPath()
  nameWithType: QueueClient.getEntityPath()
  fullName: com.microsoft.azure.servicebus.QueueClient.getEntityPath()
  overload: com.microsoft.azure.servicebus.QueueClient.getEntityPath*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 233
  package: com.microsoft.azure.servicebus
  summary: "<p>Gets the path of the entity this client is sending messages to or receiving messages from.</p>\r\n<p></p>"
  syntax:
    content: public String getEntityPath()
    return:
      type: "26831127"
      description: <p>path of the entity this client is connecting to </p>
  overridden: com.microsoft.azure.servicebus.IMessageEntityClient.getEntityPath()
- uid: com.microsoft.azure.servicebus.QueueClient.getPrefetchCount()
  id: getPrefetchCount()
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: getPrefetchCount()
  nameWithType: QueueClient.getPrefetchCount()
  fullName: com.microsoft.azure.servicebus.QueueClient.getPrefetchCount()
  overload: com.microsoft.azure.servicebus.QueueClient.getPrefetchCount*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 473
  package: com.microsoft.azure.servicebus
  syntax:
    content: public int getPrefetchCount()
    return:
      type: f75371fa
- uid: com.microsoft.azure.servicebus.QueueClient.getQueueName()
  id: getQueueName()
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: getQueueName()
  nameWithType: QueueClient.getQueueName()
  fullName: com.microsoft.azure.servicebus.QueueClient.getQueueName()
  overload: com.microsoft.azure.servicebus.QueueClient.getQueueName*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 483
  package: com.microsoft.azure.servicebus
  summary: "<p>Gets the name of the queue.</p>\r\n<p></p>"
  syntax:
    content: public String getQueueName()
    return:
      type: "26831127"
      description: <p>The name of the queue. </p>
  overridden: com.microsoft.azure.servicebus.IQueueClient.getQueueName()
- uid: com.microsoft.azure.servicebus.QueueClient.getReceiveMode()
  id: getReceiveMode()
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: getReceiveMode()
  nameWithType: QueueClient.getReceiveMode()
  fullName: com.microsoft.azure.servicebus.QueueClient.getReceiveMode()
  overload: com.microsoft.azure.servicebus.QueueClient.getReceiveMode*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 143
  package: com.microsoft.azure.servicebus
  summary: "<p>Gets the <xref uid=\"com.microsoft.azure.servicebus.ReceiveMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiveMode\"></xref> of the current receiver</p>\r\n<p></p>"
  syntax:
    content: public ReceiveMode getReceiveMode()
    return:
      type: com.microsoft.azure.servicebus.ReceiveMode
      description: <p>The receive mode. </p>
  overridden: com.microsoft.azure.servicebus.IQueueClient.getReceiveMode()
- uid: com.microsoft.azure.servicebus.QueueClient.onClose()
  id: onClose()
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: onClose()
  nameWithType: QueueClient.onClose()
  fullName: com.microsoft.azure.servicebus.QueueClient.onClose()
  overload: com.microsoft.azure.servicebus.QueueClient.onClose*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 288
  package: com.microsoft.azure.servicebus
  syntax:
    content: protected CompletableFuture<Void> onClose()
    return:
      type: db03ee24
- uid: com.microsoft.azure.servicebus.QueueClient.QueueClient(ConnectionStringBuilder,ReceiveMode)
  id: QueueClient(ConnectionStringBuilder,ReceiveMode)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: QueueClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  nameWithType: QueueClient.QueueClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  fullName: com.microsoft.azure.servicebus.QueueClient.QueueClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  overload: com.microsoft.azure.servicebus.QueueClient.QueueClient*
  type: Constructor
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 46
  package: com.microsoft.azure.servicebus
  syntax:
    content: public QueueClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
    parameters:
    - id: amqpConnectionStringBuilder
      type: com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder
    - id: receiveMode
      type: com.microsoft.azure.servicebus.ReceiveMode
- uid: com.microsoft.azure.servicebus.QueueClient.QueueClient(String,String,ClientSettings,ReceiveMode)
  id: QueueClient(String,String,ClientSettings,ReceiveMode)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: QueueClient(String namespace, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
  nameWithType: QueueClient.QueueClient(String namespace, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
  fullName: com.microsoft.azure.servicebus.QueueClient.QueueClient(String namespace, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
  overload: com.microsoft.azure.servicebus.QueueClient.QueueClient*
  type: Constructor
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 55
  package: com.microsoft.azure.servicebus
  syntax:
    content: public QueueClient(String namespace, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
    parameters:
    - id: namespace
      type: "26831127"
    - id: queuePath
      type: "26831127"
    - id: clientSettings
      type: com.microsoft.azure.servicebus.ClientSettings
    - id: receiveMode
      type: com.microsoft.azure.servicebus.ReceiveMode
- uid: com.microsoft.azure.servicebus.QueueClient.QueueClient(URI,String,ClientSettings,ReceiveMode)
  id: QueueClient(URI,String,ClientSettings,ReceiveMode)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: QueueClient(URI namespaceEndpointURI, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
  nameWithType: QueueClient.QueueClient(URI namespaceEndpointURI, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
  fullName: com.microsoft.azure.servicebus.QueueClient.QueueClient(URI namespaceEndpointURI, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
  overload: com.microsoft.azure.servicebus.QueueClient.QueueClient*
  type: Constructor
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 60
  package: com.microsoft.azure.servicebus
  syntax:
    content: public QueueClient(URI namespaceEndpointURI, String queuePath, ClientSettings clientSettings, ReceiveMode receiveMode)
    parameters:
    - id: namespaceEndpointURI
      type: "62304784"
    - id: queuePath
      type: "26831127"
    - id: clientSettings
      type: com.microsoft.azure.servicebus.ClientSettings
    - id: receiveMode
      type: com.microsoft.azure.servicebus.ReceiveMode
- uid: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler)
  id: registerMessageHandler(IMessageHandler)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: registerMessageHandler(IMessageHandler handler)
  nameWithType: QueueClient.registerMessageHandler(IMessageHandler handler)
  fullName: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler handler)
  overload: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 239
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void registerMessageHandler(IMessageHandler handler)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.IMessageHandler
- uid: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler,ExecutorService)
  id: registerMessageHandler(IMessageHandler,ExecutorService)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: registerMessageHandler(IMessageHandler handler, ExecutorService executorService)
  nameWithType: QueueClient.registerMessageHandler(IMessageHandler handler, ExecutorService executorService)
  fullName: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler handler, ExecutorService executorService)
  overload: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 262
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void registerMessageHandler(IMessageHandler handler, ExecutorService executorService)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.IMessageHandler
    - id: executorService
      type: ddc463eb
- uid: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler,MessageHandlerOptions)
  id: registerMessageHandler(IMessageHandler,MessageHandlerOptions)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)
  nameWithType: QueueClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)
  fullName: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)
  overload: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 245
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.IMessageHandler
    - id: handlerOptions
      type: com.microsoft.azure.servicebus.MessageHandlerOptions
- uid: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler,MessageHandlerOptions,ExecutorService)
  id: registerMessageHandler(IMessageHandler,MessageHandlerOptions,ExecutorService)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)
  nameWithType: QueueClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)
  fullName: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)
  overload: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 267
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.IMessageHandler
    - id: handlerOptions
      type: com.microsoft.azure.servicebus.MessageHandlerOptions
    - id: executorService
      type: ddc463eb
- uid: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler)
  id: registerSessionHandler(ISessionHandler)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: registerSessionHandler(ISessionHandler handler)
  nameWithType: QueueClient.registerSessionHandler(ISessionHandler handler)
  fullName: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler handler)
  overload: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 251
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void registerSessionHandler(ISessionHandler handler)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.ISessionHandler
- uid: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler,ExecutorService)
  id: registerSessionHandler(ISessionHandler,ExecutorService)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: registerSessionHandler(ISessionHandler handler, ExecutorService executorService)
  nameWithType: QueueClient.registerSessionHandler(ISessionHandler handler, ExecutorService executorService)
  fullName: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler handler, ExecutorService executorService)
  overload: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 272
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void registerSessionHandler(ISessionHandler handler, ExecutorService executorService)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.ISessionHandler
    - id: executorService
      type: ddc463eb
- uid: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler,SessionHandlerOptions)
  id: registerSessionHandler(ISessionHandler,SessionHandlerOptions)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)
  nameWithType: QueueClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)
  fullName: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)
  overload: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 257
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.ISessionHandler
    - id: handlerOptions
      type: com.microsoft.azure.servicebus.SessionHandlerOptions
- uid: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler,SessionHandlerOptions,ExecutorService)
  id: registerSessionHandler(ISessionHandler,SessionHandlerOptions,ExecutorService)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)
  nameWithType: QueueClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)
  fullName: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)
  overload: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 277
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.ISessionHandler
    - id: handlerOptions
      type: com.microsoft.azure.servicebus.SessionHandlerOptions
    - id: executorService
      type: ddc463eb
- uid: com.microsoft.azure.servicebus.QueueClient.scheduleMessage(IMessage,Instant)
  id: scheduleMessage(IMessage,Instant)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: QueueClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.QueueClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  overload: com.microsoft.azure.servicebus.QueueClient.scheduleMessage*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 218
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    return:
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage,Instant)
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if message couldn't be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.QueueClient.scheduleMessage(IMessage,Instant,TransactionContext)
  id: scheduleMessage(IMessage,Instant,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: QueueClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.scheduleMessage*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 223
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage,Instant,TransactionContext)
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if message couldn't be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(IMessage,Instant)
  id: scheduleMessageAsync(IMessage,Instant)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: QueueClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  overload: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 197
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    return:
      type: 30822cb1
      description: <p>a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message. </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage,Instant)
- uid: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(IMessage,Instant,TransactionContext)
  id: scheduleMessageAsync(IMessage,Instant,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: QueueClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 202
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: 30822cb1
      description: <p>a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message. </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage,Instant,TransactionContext)
- uid: com.microsoft.azure.servicebus.QueueClient.send(IMessage)
  id: send(IMessage)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: send(IMessage message)
  nameWithType: QueueClient.send(IMessage message)
  fullName: com.microsoft.azure.servicebus.QueueClient.send(IMessage message)
  overload: com.microsoft.azure.servicebus.QueueClient.send*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 148
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void send(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.send(IMessage)
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if message couldn't be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.QueueClient.send(IMessage,TransactionContext)
  id: send(IMessage,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: send(IMessage message, TransactionContext transaction)
  nameWithType: QueueClient.send(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.send(IMessage message, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.send*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 153
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void send(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.send(IMessage,TransactionContext)
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if message couldn't be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.QueueClient.sendAsync(IMessage)
  id: sendAsync(IMessage)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: sendAsync(IMessage message)
  nameWithType: QueueClient.sendAsync(IMessage message)
  fullName: com.microsoft.azure.servicebus.QueueClient.sendAsync(IMessage message)
  overload: com.microsoft.azure.servicebus.QueueClient.sendAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 168
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendAsync(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage)
- uid: com.microsoft.azure.servicebus.QueueClient.sendAsync(IMessage,TransactionContext)
  id: sendAsync(IMessage,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: sendAsync(IMessage message, TransactionContext transaction)
  nameWithType: QueueClient.sendAsync(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.sendAsync(IMessage message, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.sendAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 176
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendAsync(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage,TransactionContext)
- uid: com.microsoft.azure.servicebus.QueueClient.sendBatch(Collection<? extends IMessage>)
  id: sendBatch(Collection<? extends IMessage>)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: sendBatch(Collection<? extends IMessage> messages)
  nameWithType: QueueClient.sendBatch(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.QueueClient.sendBatch(Collection<? extends IMessage> messages)
  overload: com.microsoft.azure.servicebus.QueueClient.sendBatch*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 158
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void sendBatch(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage>)
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if the batch couldn't be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.QueueClient.sendBatch(Collection<? extends IMessage>,TransactionContext)
  id: sendBatch(Collection<? extends IMessage>,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: QueueClient.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.sendBatch*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 163
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage>,TransactionContext)
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if the batch couldn't be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(Collection<? extends IMessage>)
  id: sendBatchAsync(Collection<? extends IMessage>)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: sendBatchAsync(Collection<? extends IMessage> messages)
  nameWithType: QueueClient.sendBatchAsync(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(Collection<? extends IMessage> messages)
  overload: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 184
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage>)
- uid: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(Collection<? extends IMessage>,TransactionContext)
  id: sendBatchAsync(Collection<? extends IMessage>,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: QueueClient.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 189
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage>,TransactionContext)
- uid: com.microsoft.azure.servicebus.QueueClient.setPrefetchCount(int)
  id: setPrefetchCount(int)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  langs:
  - java
  name: setPrefetchCount(int prefetchCount)
  nameWithType: QueueClient.setPrefetchCount(int prefetchCount)
  fullName: com.microsoft.azure.servicebus.QueueClient.setPrefetchCount(int prefetchCount)
  overload: com.microsoft.azure.servicebus.QueueClient.setPrefetchCount*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/QueueClient.java
    startLine: 478
  package: com.microsoft.azure.servicebus
  syntax:
    content: public void setPrefetchCount(int prefetchCount)
    parameters:
    - id: prefetchCount
      type: f75371fa
references:
- uid: com.microsoft.azure.servicebus.QueueClient.QueueClient*
  name: QueueClient
  nameWithType: QueueClient.QueueClient
  fullName: com.microsoft.azure.servicebus.QueueClient.QueueClient
  package: com.microsoft.azure.servicebus
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: "62304784"
  spec.java:
  - name: URI
    fullName: URI
- uid: com.microsoft.azure.servicebus.QueueClient.getReceiveMode*
  name: getReceiveMode
  nameWithType: QueueClient.getReceiveMode
  fullName: com.microsoft.azure.servicebus.QueueClient.getReceiveMode
  package: com.microsoft.azure.servicebus
- uid: 8256ba40
  spec.java:
  - name: InterruptedException
    fullName: InterruptedException
- uid: 73fec9fb
  spec.java:
  - name: ServiceBusException
    fullName: ServiceBusException
- uid: com.microsoft.azure.servicebus.QueueClient.send*
  name: send
  nameWithType: QueueClient.send
  fullName: com.microsoft.azure.servicebus.QueueClient.send
  package: com.microsoft.azure.servicebus
- uid: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
  spec.java:
  - name: 'Collection<? extends '
    fullName: 'Collection<? extends '
  - uid: com.microsoft.azure.servicebus.IMessage
    name: IMessage
    fullName: com.microsoft.azure.servicebus.IMessage
    href: com.microsoft.azure.servicebus.IMessage.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.QueueClient.sendBatch*
  name: sendBatch
  nameWithType: QueueClient.sendBatch
  fullName: com.microsoft.azure.servicebus.QueueClient.sendBatch
  package: com.microsoft.azure.servicebus
- uid: db03ee24
  spec.java:
  - name: CompletableFuture<Void>
    fullName: CompletableFuture<Void>
- uid: com.microsoft.azure.servicebus.QueueClient.sendAsync*
  name: sendAsync
  nameWithType: QueueClient.sendAsync
  fullName: com.microsoft.azure.servicebus.QueueClient.sendAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync*
  name: sendBatchAsync
  nameWithType: QueueClient.sendBatchAsync
  fullName: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync
  package: com.microsoft.azure.servicebus
- uid: 328f8254
  spec.java:
  - name: Instant
    fullName: Instant
- uid: 30822cb1
  spec.java:
  - name: CompletableFuture<Long>
    fullName: CompletableFuture<Long>
- uid: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync*
  name: scheduleMessageAsync
  nameWithType: QueueClient.scheduleMessageAsync
  fullName: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync
  package: com.microsoft.azure.servicebus
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessageAsync*
  name: cancelScheduledMessageAsync
  nameWithType: QueueClient.cancelScheduledMessageAsync
  fullName: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessageAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.scheduleMessage*
  name: scheduleMessage
  nameWithType: QueueClient.scheduleMessage
  fullName: com.microsoft.azure.servicebus.QueueClient.scheduleMessage
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessage*
  name: cancelScheduledMessage
  nameWithType: QueueClient.cancelScheduledMessage
  fullName: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessage
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.getEntityPath*
  name: getEntityPath
  nameWithType: QueueClient.getEntityPath
  fullName: com.microsoft.azure.servicebus.QueueClient.getEntityPath
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler*
  name: registerMessageHandler
  nameWithType: QueueClient.registerMessageHandler
  fullName: com.microsoft.azure.servicebus.QueueClient.registerMessageHandler
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler*
  name: registerSessionHandler
  nameWithType: QueueClient.registerSessionHandler
  fullName: com.microsoft.azure.servicebus.QueueClient.registerSessionHandler
  package: com.microsoft.azure.servicebus
- uid: ddc463eb
  spec.java:
  - name: ExecutorService
    fullName: ExecutorService
- uid: add9545a
  spec.java:
  - name: UUID
    fullName: UUID
- uid: com.microsoft.azure.servicebus.QueueClient.abandon*
  name: abandon
  nameWithType: QueueClient.abandon
  fullName: com.microsoft.azure.servicebus.QueueClient.abandon
  package: com.microsoft.azure.servicebus
- uid: e7b06046
  spec.java:
  - name: Map<String, Object>
    fullName: Map<String, Object>
- uid: com.microsoft.azure.servicebus.QueueClient.abandonAsync*
  name: abandonAsync
  nameWithType: QueueClient.abandonAsync
  fullName: com.microsoft.azure.servicebus.QueueClient.abandonAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.complete*
  name: complete
  nameWithType: QueueClient.complete
  fullName: com.microsoft.azure.servicebus.QueueClient.complete
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.completeAsync*
  name: completeAsync
  nameWithType: QueueClient.completeAsync
  fullName: com.microsoft.azure.servicebus.QueueClient.completeAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetter*
  name: deadLetter
  nameWithType: QueueClient.deadLetter
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetter
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync*
  name: deadLetterAsync
  nameWithType: QueueClient.deadLetterAsync
  fullName: com.microsoft.azure.servicebus.QueueClient.deadLetterAsync
  package: com.microsoft.azure.servicebus
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: com.microsoft.azure.servicebus.QueueClient.getPrefetchCount*
  name: getPrefetchCount
  nameWithType: QueueClient.getPrefetchCount
  fullName: com.microsoft.azure.servicebus.QueueClient.getPrefetchCount
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.setPrefetchCount*
  name: setPrefetchCount
  nameWithType: QueueClient.setPrefetchCount
  fullName: com.microsoft.azure.servicebus.QueueClient.setPrefetchCount
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.getQueueName*
  name: getQueueName
  nameWithType: QueueClient.getQueueName
  fullName: com.microsoft.azure.servicebus.QueueClient.getQueueName
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.QueueClient.onClose*
  name: onClose
  nameWithType: QueueClient.onClose
  fullName: com.microsoft.azure.servicebus.QueueClient.onClose
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.ClientEntity(final String)
  parent: com.microsoft.azure.servicebus.primitives.ClientEntity
  href: com.microsoft.azure.servicebus.primitives.ClientEntity.yml
  name: ClientEntity(final String clientId)
  nameWithType: ClientEntity.ClientEntity(final String clientId)
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.ClientEntity(final String clientId)
  type: Constructor
  syntax:
    content: protected ClientEntity(final String clientId)
    parameters:
    - id: clientId
      type: 3d93591e
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.close()
  parent: com.microsoft.azure.servicebus.primitives.ClientEntity
  href: com.microsoft.azure.servicebus.primitives.ClientEntity.yml
  name: close()
  nameWithType: ClientEntity.close()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.close()
  type: Method
  syntax:
    content: public final void close()
    return:
      type: 3f6357ce
- uid: com.microsoft.azure.servicebus.ICloseable.close()
  parent: com.microsoft.azure.servicebus.ICloseable
  href: com.microsoft.azure.servicebus.ICloseable.yml
  name: close()
  nameWithType: ICloseable.close()
  fullName: com.microsoft.azure.servicebus.ICloseable.close()
  type: Method
  summary: "<p>Synchronously closes and disposes any resources associated with this object. Calling this method is equivalent of calling . This method blocks until this object is closed. </p>"
  syntax:
    content: public void close()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()
  parent: com.microsoft.azure.servicebus.primitives.ClientEntity
  href: com.microsoft.azure.servicebus.primitives.ClientEntity.yml
  name: closeAsync()
  nameWithType: ClientEntity.closeAsync()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()
  type: Method
  syntax:
    content: public final CompletableFuture<Void> closeAsync()
    return:
      type: fc984e6f
- uid: com.microsoft.azure.servicebus.ICloseable.closeAsync()
  parent: com.microsoft.azure.servicebus.ICloseable
  href: com.microsoft.azure.servicebus.ICloseable.yml
  name: closeAsync()
  nameWithType: ICloseable.closeAsync()
  fullName: com.microsoft.azure.servicebus.ICloseable.closeAsync()
  type: Method
  summary: "<p>Closes and disposes any resources associated with this object. An object cannot be used after it is closed. This is an asynchronous method that returns a CompletableFuture immediately. This object is completely closed when the returned CompletableFuture is completed. </p>"
  syntax:
    content: public CompletableFuture<Void> closeAsync()
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the closing of this object. </p>
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()
  parent: com.microsoft.azure.servicebus.primitives.ClientEntity
  href: com.microsoft.azure.servicebus.primitives.ClientEntity.yml
  name: finalize()
  nameWithType: ClientEntity.finalize()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()
  type: Method
  syntax:
    content: protected void finalize()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()
  parent: com.microsoft.azure.servicebus.primitives.ClientEntity
  href: com.microsoft.azure.servicebus.primitives.ClientEntity.yml
  name: getClientId()
  nameWithType: ClientEntity.getClientId()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()
  type: Method
  syntax:
    content: public String getClientId()
    return:
      type: "26831127"
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()
  parent: com.microsoft.azure.servicebus.primitives.ClientEntity
  href: com.microsoft.azure.servicebus.primitives.ClientEntity.yml
  name: getIsClosed()
  nameWithType: ClientEntity.getIsClosed()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()
  type: Method
  syntax:
    content: protected boolean getIsClosed()
    return:
      type: 4fc6e284
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()
  parent: com.microsoft.azure.servicebus.primitives.ClientEntity
  href: com.microsoft.azure.servicebus.primitives.ClientEntity.yml
  name: getIsClosingOrClosed()
  nameWithType: ClientEntity.getIsClosingOrClosed()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()
  type: Method
  syntax:
    content: protected boolean getIsClosingOrClosed()
    return:
      type: 4fc6e284
- uid: com.microsoft.azure.servicebus.InitializableEntity.InitializableEntity(String)
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()
  parent: com.microsoft.azure.servicebus.primitives.ClientEntity
  href: com.microsoft.azure.servicebus.primitives.ClientEntity.yml
  name: setClosed()
  nameWithType: ClientEntity.setClosed()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()
  type: Method
  syntax:
    content: protected final void setClosed()
    return:
      type: 3f6357ce
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(Throwable)
  parent: com.microsoft.azure.servicebus.primitives.ClientEntity
  href: com.microsoft.azure.servicebus.primitives.ClientEntity.yml
  name: throwIfClosed(Throwable cause)
  nameWithType: ClientEntity.throwIfClosed(Throwable cause)
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(Throwable cause)
  type: Method
  syntax:
    content: protected final void throwIfClosed(Throwable cause)
    parameters:
    - id: cause
      type: a04fafd7
    return:
      type: 3f6357ce
- uid: com.microsoft.azure.servicebus.IQueueClient
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.IQueueClient.yml
  name: IQueueClient
  nameWithType: IQueueClient
  fullName: com.microsoft.azure.servicebus.IQueueClient
  type: Interface
  summary: "<p>QueueClient can be used for all basic interactions with a Service Bus Queue. </p>"
  syntax:
    content: public interface IQueueClient extends IMessageSender,IMessageEntityClient
- uid: com.microsoft.azure.servicebus.ReceiveMode
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.ReceiveMode.yml
  name: ReceiveMode
  nameWithType: ReceiveMode
  fullName: com.microsoft.azure.servicebus.ReceiveMode
  type: Enum
  summary: "<p>Enumeration to represent the two receive modes Azure Service Bus supports.</p>\r\n<p></p>"
  syntax:
    content: public enum ReceiveMode
- uid: com.microsoft.azure.servicebus.primitives.MessagingFactory
  parent: com.microsoft.azure.servicebus.primitives
  href: com.microsoft.azure.servicebus.primitives.MessagingFactory.yml
  name: MessagingFactory
  nameWithType: MessagingFactory
  fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory
  type: Class
  summary: "<p>Abstracts all AMQP related details and encapsulates an AMQP connection and manages its life cycle. Each instance of this class represent one AMQP connection to the namespace. If an application creates multiple senders, receivers or clients using the same MessagingFactory instance, all those senders, receivers or clients will share the same connection to the namespace. </p>"
  syntax:
    content: public class MessagingFactory extends ClientEntity
- uid: com.microsoft.azure.servicebus.IMessageSender
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: IMessageSender
  nameWithType: IMessageSender
  fullName: com.microsoft.azure.servicebus.IMessageSender
  type: Interface
  summary: "<p>Represents a message sender that sends messages to Azure Service Bus.</p>\r\n<p></p>"
  syntax:
    content: public interface IMessageSender extends IMessageEntityClient
- uid: com.microsoft.azure.servicebus.primitives.MiscRequestResponseOperationHandler
  parent: com.microsoft.azure.servicebus.primitives
  href: com.microsoft.azure.servicebus.primitives.MiscRequestResponseOperationHandler.yml
  name: MiscRequestResponseOperationHandler
  nameWithType: MiscRequestResponseOperationHandler
  fullName: com.microsoft.azure.servicebus.primitives.MiscRequestResponseOperationHandler
  type: Class
  syntax:
    content: public class MiscRequestResponseOperationHandler extends ClientEntity
- uid: com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder
  parent: com.microsoft.azure.servicebus.primitives
  href: com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder.yml
  name: ConnectionStringBuilder
  nameWithType: ConnectionStringBuilder
  fullName: com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder
  type: Class
  summary: "<p>This class can be used to construct a connection string which can establish communication with ServiceBus entities. It can also be used to perform basic validation on an existing connection string. </p>\r\n<p>Sample Code: <pre><code>ConnectionStringBuilder connectionStringBuilder = new ConnectionStringBuilder(\r\n                                             \"ServiceBusNamespaceName\", \r\n                                             \"ServiceBusEntityName\", // QueueName or TopicName or SubscriptionPath\r\n                                             \"SharedAccessSignatureKeyName\", \r\n                                             \"SharedAccessSignatureKey\");\r\n     \r\n    String connectionString = connectionStringBuilder.toString();\r\n    </code></pre></p>\r\n<p>A connection string is basically a string consisted of key-value pair separated by \";\". Basic format is {{ &lt;}key{&gt;}={ &lt;}value{&gt;}[;{ &lt;}key{&gt;}={ &lt;}value{&gt;}]} where supported key name are as follow: <ul><li><p>Endpoint - URL that points to the servicebus namespace </p></li><li><p>EntityPath - Path to the service bus entity (queue/topic/subscription/). For queues and topics, it is just the entity name. For subscriptions, path is &lt;topicName&gt;/subscriptions/&lt;subscriptionName&gt; </p></li><li><p>SharedAccessKeyName - Key name to the corresponding shared access policy rule for the namespace, or entity. </p></li><li><p>SharedAccessKey - Key value for the corresponding shared access policy rule of the namespace or entity. </p></li><li><p>SharedAccessSignatureToken - Instead of a key name and key value, clients can provide an already generated SAS Token. </p></li><li><p>OperationTimeout - Default timeout to be used for all senders, receiver and clients created from this connection string. </p></li><li><p>RetryPolicy - Name of the retry policy. </p></li></ul></p>"
  syntax:
    content: public class ConnectionStringBuilder
- uid: com.microsoft.azure.servicebus.primitives.ServiceBusException
  parent: com.microsoft.azure.servicebus.primitives
  href: com.microsoft.azure.servicebus.primitives.ServiceBusException.yml
  name: ServiceBusException
  nameWithType: ServiceBusException
  fullName: com.microsoft.azure.servicebus.primitives.ServiceBusException
  type: Class
  summary: "<p>This is the base exception that service bus will generate for all error cases. </p>"
  syntax:
    content: public class ServiceBusException
- uid: com.microsoft.azure.servicebus.ClientSettings
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.ClientSettings.yml
  name: ClientSettings
  nameWithType: ClientSettings
  fullName: com.microsoft.azure.servicebus.ClientSettings
  type: Class
  summary: "<p>Class encapsulating common client level settings like TokenProvider, RetryPolicy, OperationTimeout. </p>"
  syntax:
    content: public class ClientSettings
- uid: com.microsoft.azure.servicebus.IQueueClient.getReceiveMode()
  parent: com.microsoft.azure.servicebus.IQueueClient
  href: com.microsoft.azure.servicebus.IQueueClient.yml
  name: getReceiveMode()
  nameWithType: IQueueClient.getReceiveMode()
  fullName: com.microsoft.azure.servicebus.IQueueClient.getReceiveMode()
  type: Method
  summary: "<p>Gets the <xref uid=\"com.microsoft.azure.servicebus.ReceiveMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiveMode\"></xref> of the current receiver</p>\r\n<p></p>"
  syntax:
    content: public ReceiveMode getReceiveMode()
    return:
      type: com.microsoft.azure.servicebus.ReceiveMode
      description: <p>The receive mode. </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.send(IMessage)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: send(IMessage message)
  nameWithType: IMessageSender.send(IMessage message)
  fullName: com.microsoft.azure.servicebus.IMessageSender.send(IMessage message)
  type: Method
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void send(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.IMessage
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.IMessage.yml
  name: IMessage
  nameWithType: IMessage
  fullName: com.microsoft.azure.servicebus.IMessage
  type: Interface
  summary: "<p>Represents the message that is exchanged between Azure Service Bus and its clients.</p>\r\n<p></p>"
  syntax:
    content: public interface IMessage
- uid: com.microsoft.azure.servicebus.IMessageSender.send(IMessage,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: send(IMessage message, TransactionContext transaction)
  nameWithType: IMessageSender.send(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.send(IMessage message, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void send(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
- uid: com.microsoft.azure.servicebus.TransactionContext
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.TransactionContext.yml
  name: TransactionContext
  nameWithType: TransactionContext
  fullName: com.microsoft.azure.servicebus.TransactionContext
  type: Class
  summary: "<p>Represents an active servicebus transaction. A transaction is initiated by calling <xref uid=\"com.microsoft.azure.servicebus.primitives.MessagingFactory.startTransactionAsync()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessagingFactory#startTransactionAsync()\"></xref>. A transaction can result in commit or rollback. To commit, call <xref uid=\"com.microsoft.azure.servicebus.primitives.MessagingFactory.endTransactionAsync(TransactionContext,boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessagingFactory#endTransactionAsync(TransactionContext, boolean)\"></xref> with  To rollback, call <xref uid=\"com.microsoft.azure.servicebus.primitives.MessagingFactory.endTransactionAsync(TransactionContext,boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessagingFactory#endTransactionAsync(TransactionContext, boolean)\"></xref> with </p>"
  syntax:
    content: public class TransactionContext
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage>)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: sendBatch(Collection<? extends IMessage> messages)
  nameWithType: IMessageSender.sendBatch(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage> messages)
  type: Method
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void sendBatch(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage>,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: IMessageSender.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: sendAsync(IMessage message)
  nameWithType: IMessageSender.sendAsync(IMessage message)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage message)
  type: Method
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendAsync(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: sendAsync(IMessage message, TransactionContext transaction)
  nameWithType: IMessageSender.sendAsync(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage message, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendAsync(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage>)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: sendBatchAsync(Collection<? extends IMessage> messages)
  nameWithType: IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages)
  type: Method
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage>,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage,Instant)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  type: Method
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    return:
      type: 30822cb1
      description: <p>a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message. </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage,Instant,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: 30822cb1
      description: <p>a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message. </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync(long)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: cancelScheduledMessageAsync(long sequenceNumber)
  nameWithType: IMessageSender.cancelScheduledMessageAsync(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync(long sequenceNumber)
  type: Method
  summary: "<p>Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This is an asynchronous method returning a CompletableFuture which completes when the message is cancelled.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> cancelScheduledMessageAsync(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending cancellation </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage,Instant)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  type: Method
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    return:
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage,Instant,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage(long)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: cancelScheduledMessage(long sequenceNumber)
  nameWithType: IMessageSender.cancelScheduledMessage(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage(long sequenceNumber)
  type: Method
  summary: "<p>Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void cancelScheduledMessage(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
- uid: com.microsoft.azure.servicebus.IMessageEntityClient.getEntityPath()
  parent: com.microsoft.azure.servicebus.IMessageEntityClient
  href: com.microsoft.azure.servicebus.IMessageEntityClient.yml
  name: getEntityPath()
  nameWithType: IMessageEntityClient.getEntityPath()
  fullName: com.microsoft.azure.servicebus.IMessageEntityClient.getEntityPath()
  type: Method
  summary: "<p>Gets the path of the entity this client is sending messages to or receiving messages from.</p>\r\n<p></p>"
  syntax:
    content: public String getEntityPath()
    return:
      type: "26831127"
      description: <p>path of the entity this client is connecting to </p>
- uid: com.microsoft.azure.servicebus.IMessageHandler
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.IMessageHandler.yml
  name: IMessageHandler
  nameWithType: IMessageHandler
  fullName: com.microsoft.azure.servicebus.IMessageHandler
  type: Interface
  summary: "<p>Defines the contract for registering the callback <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueClient#registerMessageHandler(IMessageHandler)\"></xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SubscriptionClient#registerMessageHandler(IMessageHandler)\"></xref> for <xref uid=\"com.microsoft.azure.servicebus.QueueClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueClient\"></xref> and <xref uid=\"com.microsoft.azure.servicebus.SubscriptionClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SubscriptionClient\"></xref>. </p>"
  syntax:
    content: public interface IMessageHandler
- uid: com.microsoft.azure.servicebus.MessageHandlerOptions
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.MessageHandlerOptions.yml
  name: MessageHandlerOptions
  nameWithType: MessageHandlerOptions
  fullName: com.microsoft.azure.servicebus.MessageHandlerOptions
  type: Class
  summary: "<p>The OnMessage handler processing options. </p>"
  syntax:
    content: public class MessageHandlerOptions
- uid: com.microsoft.azure.servicebus.ISessionHandler
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.ISessionHandler.yml
  name: ISessionHandler
  nameWithType: ISessionHandler
  fullName: com.microsoft.azure.servicebus.ISessionHandler
  type: Interface
  summary: "<p>Defines the contract for registering the session message processing callback <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueClient#registerSessionHandler(ISessionHandler)\"></xref> or <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SubscriptionClient#registerSessionHandler(ISessionHandler)\"></xref> for <xref uid=\"com.microsoft.azure.servicebus.QueueClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueClient\"></xref> and <xref uid=\"com.microsoft.azure.servicebus.SubscriptionClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SubscriptionClient\"></xref>. </p>"
  syntax:
    content: public interface ISessionHandler
- uid: com.microsoft.azure.servicebus.SessionHandlerOptions
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.SessionHandlerOptions.yml
  name: SessionHandlerOptions
  nameWithType: SessionHandlerOptions
  fullName: com.microsoft.azure.servicebus.SessionHandlerOptions
  type: Class
  summary: "<p>The OnSession handler processing options. </p>"
  syntax:
    content: public class SessionHandlerOptions
- uid: com.microsoft.azure.servicebus.IQueueClient.getQueueName()
  parent: com.microsoft.azure.servicebus.IQueueClient
  href: com.microsoft.azure.servicebus.IQueueClient.yml
  name: getQueueName()
  nameWithType: IQueueClient.getQueueName()
  fullName: com.microsoft.azure.servicebus.IQueueClient.getQueueName()
  type: Method
  summary: "<p>Gets the name of the queue.</p>\r\n<p></p>"
  syntax:
    content: public String getQueueName()
    return:
      type: "26831127"
      description: <p>The name of the queue. </p>
- uid: com.microsoft.azure.servicebus.IMessageSession
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.IMessageSession.yml
  name: IMessageSession
  nameWithType: IMessageSession
  fullName: com.microsoft.azure.servicebus.IMessageSession
  type: Interface
  summary: "<p>Describes a Session object. IMessageSession can be used to perform operations on sessions. </p>\r\n<p>Service Bus Sessions, also called 'Groups' in the AMQP 1.0 protocol, are unbounded sequences of related messages. ServiceBus guarantees ordering of messages in a session. </p>\r\n<p>Any sender can create a session when submitting messages into a Topic or Queue by setting the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#sessionId\"></xref> property on Message to some application defined unique identifier. At the AMQP 1.0 protocol level, this value maps to the group-id property. </p>\r\n<p>Sessions come into existence when there is at least one message with the session's SessionId in the Queue or Topic subscription. Once a Session exists, there is no defined moment or gesture for when the session expires or disappears. </p>"
  syntax:
    content: public interface IMessageSession extends IMessageReceiver
