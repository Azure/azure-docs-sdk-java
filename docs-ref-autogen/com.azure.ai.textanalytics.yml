### YamlMime:JavaPackage
uid: "com.azure.ai.textanalytics"
fullName: "com.azure.ai.textanalytics"
name: "com.azure.ai.textanalytics"
summary: "<p><a href=\"https://learn.microsoft.com/azure/ai-services/language-service\">Azure AI Language Service</a>\n is a cloud-based natural language processing (NLP) service offered by Microsoft Azure."
classes:
- "com.azure.ai.textanalytics.TextAnalyticsAsyncClient"
- "com.azure.ai.textanalytics.TextAnalyticsClient"
- "com.azure.ai.textanalytics.TextAnalyticsClientBuilder"
enums:
- "com.azure.ai.textanalytics.TextAnalyticsServiceVersion"
desc: "<p><a href=\"https://learn.microsoft.com/azure/ai-services/language-service\">Azure AI Language Service</a>\n is a cloud-based natural language processing (NLP) service offered by Microsoft Azure. It's designed to\n extract valuable insights and information from text data through various NLP techniques. The service provides\n a range of capabilities for analyzing text, including sentiment analysis, entity recognition, key phrase extraction,\n language detection, and more. These capabilities can be leveraged to gain a deeper understanding of textual data,\n automate processes, and make informed decisions based on the analyzed content.</p>\n\n <p>Here are some of the key features of Azure Text Analytics:</p>\n\n <ul>\n     <li>Sentiment Analysis: This feature determines the sentiment expressed in a piece of text, whether\n     it's positive, negative, or neutral. It's useful for understanding the overall emotional tone of\n     customer reviews, social media posts, and other text-based content.</li>\n\n     <li>Entity Recognition: Azure AI Language can identify and categorize entities mentioned in the text,\n     such as people, organizations, locations, dates, and more. This is particularly useful for extracting\n     structured information from unstructured text.</li>\n\n     <li>Key Phrase Extraction: The service can automatically identify and extract key phrases or important terms\n     from a given text. This can help summarize the main topics or subjects discussed in the text.</li>\n\n     <li>Language Detection: Azure AI Language can detect the language in which the text is written. This is\n     useful for routing content to appropriate language-specific processes or for organizing and categorizing\n     multilingual data.</li>\n\n     <li>Named Entity Recognition: In addition to identifying entities, the service can categorize them into\n     pre-defined types, such as person names, organization names, locations, dates, and more.</li>\n\n     <li>Entity Linking: This feature can link recognized entities to external databases or sources of information,\n     enriching the extracted data with additional context.</li>\n\n     <li>Customizable Models: Azure AI Language allows you to fine-tune and train the service's models with your\n     specific domain or industry terminology, which can enhance the accuracy of entity recognition and sentiment\n     analysis.</li>\n </ul>\n\n <p>The Azure Text Analytics library is a client library that provides Java developers with a simple and\n easy-to-use interface for accessing and using the Azure AI Language Service. This library allows developers to\n can be used to analyze unstructured text for tasks, such as sentiment analysis, entities recognition(PII, Health,\n Linked, Custom), key phrases extraction, language detection, abstractive and extractive summarizations,\n single-label and multi-label classifications, and execute multiple actions/operations in a single request.\n </p>\n\n <h2>Getting Started</h2>\n\n <p>In order to interact with the Text Analytics features in Azure AI Language Service, you'll need to create an\n instance of the Text Analytics Client class. To make this possible you'll need the key credential of the service.\n Alternatively, you can use AAD authentication via\n <a href=\"https://learn.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable\">Azure Identity</a>\n to connect to the service.</p>\n\n <ol>\n   <li>Azure Key Credential, see <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder#credential(\n   com.azure.core.credential.AzureKeyCredential)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureKeyCredential\"></xref>.</li>\n   <li>Azure Active Directory, see <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder#credential(\n   com.azure.core.credential.TokenCredential)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential\"></xref>.</li>\n </ol>\n\n <p><strong>Sample: Construct Synchronous Text Analytics Client with Azure Key Credential</strong></p>\n\n <p>The following code sample demonstrates the creation of a <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsClient\"></xref>,\n using the <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder\"></xref> to configure it with a key credential.</p>\n\n <!-- src_embed com.azure.ai.textanalytics.TextAnalyticsClient.instantiation -->\n <pre>\n TextAnalyticsClient textAnalyticsClient = new TextAnalyticsClientBuilder&#40;&#41;\n     .credential&#40;new AzureKeyCredential&#40;&quot;&#123;key&#125;&quot;&#41;&#41;\n     .endpoint&#40;&quot;&#123;endpoint&#125;&quot;&#41;\n     .buildClient&#40;&#41;;\n </pre>\n <!-- end com.azure.ai.textanalytics.TextAnalyticsClient.instantiation -->\n\n <p><strong>Sample: Construct Asynchronous Text Analytics Client with Azure Key Credential</strong></p>\n\n <p>The following code sample demonstrates the creation of a <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\"></xref>,\n using the <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder\"></xref> to configure it with a key credential.</p>\n\n <!-- src_embed com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation  -->\n <pre>\n TextAnalyticsAsyncClient textAnalyticsAsyncClient = new TextAnalyticsClientBuilder&#40;&#41;\n     .credential&#40;new AzureKeyCredential&#40;&quot;&#123;key&#125;&quot;&#41;&#41;\n     .endpoint&#40;&quot;&#123;endpoint&#125;&quot;&#41;\n     .buildAsyncClient&#40;&#41;;\n </pre>\n <!-- end com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation  -->\n\n <p><Strong>Note:</Strong> See methods in client level class below to explore all features that library provides.</p>\n\n <br/>\n\n <hr/>\n\n <h2>Extract information</h2>\n\n <p>Text Analytics client can be use Natural Language Understanding (NLU) to extract information from unstructured text.\n For example, identify key phrases or Personally Identifiable, etc. Below you can look at the samples on how to use it.</p>\n\n <h3>Key Phrases Extraction</h3>\n\n <p>The <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClient#extractKeyPhrases(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"extractKeyPhrases\"></xref>\n method can be used to extract key phrases, which returns a list of strings denoting the key phrases in the document.\n </p>\n\n <!-- src_embed com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases#String -->\n <pre>\n KeyPhrasesCollection extractedKeyPhrases =\n     textAnalyticsClient.extractKeyPhrases&#40;&quot;My cat might need to see a veterinarian.&quot;&#41;;\n for &#40;String keyPhrase : extractedKeyPhrases&#41; &#123;\n     System.out.printf&#40;&quot;%s.%n&quot;, keyPhrase&#41;;\n &#125;\n </pre>\n <!-- end com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases#String -->\n\n <p>See <a href=\"https://aka.ms/talangs\">this</a> for supported languages in Text Analytics API.</p>\n\n <p><strong>Note:</strong> For asynchronous sample, refer to\n <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\"></xref>.</p>\n\n <h3>Named Entities Recognition(NER): Prebuilt Model</h3>\n\n <p>The <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClient#recognizeEntities(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"recognizeEntities\"></xref>\n method can be used to recognize entities, which returns a list of general categorized entities in the provided\n document.</p>\n\n <!-- src_embed com.azure.ai.textanalytics.TextAnalyticsClient.recognizeCategorizedEntities#String -->\n <pre>\n CategorizedEntityCollection recognizeEntitiesResult =\n     textAnalyticsClient.recognizeEntities&#40;&quot;Satya Nadella is the CEO of Microsoft&quot;&#41;;\n for &#40;CategorizedEntity entity : recognizeEntitiesResult&#41; &#123;\n     System.out.printf&#40;&quot;Recognized entity: %s, entity category: %s, confidence score: %f.%n&quot;,\n         entity.getText&#40;&#41;, entity.getCategory&#40;&#41;, entity.getConfidenceScore&#40;&#41;&#41;;\n &#125;\n </pre>\n <!-- end com.azure.ai.textanalytics.TextAnalyticsClient.recognizeCategorizedEntities#String -->\n\n <p>See <a href=\"https://aka.ms/talangs\">this</a> for supported languages in Text Analytics API.</p>\n\n <p><strong>Note:</strong> For asynchronous sample, refer to\n <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\"></xref>.</p>\n\n <h3>Custom Named Entities Recognition(NER): Custom Model</h3>\n\n <p>The <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClient#beginRecognizeCustomEntities(\n java.lang.Iterable, java.lang.String, java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsClient#beginRecognizeCustomEntities(\n java.lang.Iterable, java.lang.String, java.lang.String)\"></xref> method can be used to recognize custom entities,\n which returns a list of custom entities for the provided list of <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"document\"></xref>.</p>\n\n <!-- src_embed Client.beginRecognizeCustomEntities#Iterable-String-String -->\n <pre>\n List&lt;String&gt; documents = new ArrayList&lt;&gt;&#40;&#41;;\n for &#40;int i = 0; i &lt; 3; i++&#41; &#123;\n     documents.add&#40;\n         &quot;A recent report by the Government Accountability Office &#40;GAO&#41; found that the dramatic increase &quot;\n             + &quot;in oil and natural gas development on federal lands over the past six years has stretched the&quot;\n             + &quot; staff of the BLM to a point that it has been unable to meet its environmental protection &quot;\n             + &quot;responsibilities.&quot;&#41;; &#125;\n SyncPoller&lt;RecognizeCustomEntitiesOperationDetail, RecognizeCustomEntitiesPagedIterable&gt; syncPoller =\n     textAnalyticsClient.beginRecognizeCustomEntities&#40;documents, &quot;&#123;project_name&#125;&quot;, &quot;&#123;deployment_name&#125;&quot;&#41;;\n syncPoller.waitForCompletion&#40;&#41;;\n syncPoller.getFinalResult&#40;&#41;.forEach&#40;documentsResults -&gt; &#123;\n     System.out.printf&#40;&quot;Project name: %s, deployment name: %s.%n&quot;,\n         documentsResults.getProjectName&#40;&#41;, documentsResults.getDeploymentName&#40;&#41;&#41;;\n     for &#40;RecognizeEntitiesResult documentResult : documentsResults&#41; &#123;\n         System.out.println&#40;&quot;Document ID: &quot; + documentResult.getId&#40;&#41;&#41;;\n         for &#40;CategorizedEntity entity : documentResult.getEntities&#40;&#41;&#41; &#123;\n             System.out.printf&#40;\n                 &quot;&#92;tText: %s, category: %s, confidence score: %f.%n&quot;,\n                 entity.getText&#40;&#41;, entity.getCategory&#40;&#41;, entity.getConfidenceScore&#40;&#41;&#41;;\n         &#125;\n     &#125;\n &#125;&#41;;\n </pre>\n <!-- end Client.beginRecognizeCustomEntities#Iterable-String-String -->\n\n <p>See <a href=\"https://aka.ms/talangs\">this</a> for supported languages in Text Analytics API.</p>\n\n <p><strong>Note:</strong> For asynchronous sample,\n refer to <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\"></xref>.</p>\n\n <h3>Linked Entities Recognition</h3>\n\n <p>The <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClient#recognizeLinkedEntities(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"recognizeLinkedEntities\"></xref> method can be used to find linked entities, which returns a list of recognized entities\n with links to a well-known knowledge base for the provided document.\n\n <!-- src_embed com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities#String -->\n <pre>\n String document = &quot;Old Faithful is a geyser at Yellowstone Park.&quot;;\n System.out.println&#40;&quot;Linked Entities:&quot;&#41;;\n textAnalyticsClient.recognizeLinkedEntities&#40;document&#41;.forEach&#40;linkedEntity -&gt; &#123;\n     System.out.printf&#40;&quot;Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n&quot;,\n         linkedEntity.getName&#40;&#41;, linkedEntity.getDataSourceEntityId&#40;&#41;, linkedEntity.getUrl&#40;&#41;,\n         linkedEntity.getDataSource&#40;&#41;&#41;;\n     linkedEntity.getMatches&#40;&#41;.forEach&#40;entityMatch -&gt; System.out.printf&#40;\n         &quot;Matched entity: %s, confidence score: %f.%n&quot;,\n         entityMatch.getText&#40;&#41;, entityMatch.getConfidenceScore&#40;&#41;&#41;&#41;;\n &#125;&#41;;\n </pre>\n <!-- end com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities#String -->\n\n <p>See <a href=\"https://aka.ms/talangs\">this</a> for supported languages in Text Analytics API.</p>\n\n <p><strong>Note:</strong> For asynchronous sample, refer to\n <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\"></xref>.</p>\n\n <h3>Personally Identifiable Information(PII) Entities Recognition</h3>\n\n <p>The <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClient#recognizePiiEntities(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"recognizePiiEntities\"></xref>\n method can be used to recognize PII entities, which returns a list of Personally Identifiable Information(PII)\n entities in the provided document.\n\n For a list of supported entity types, check: <a href=\"https://aka.ms/azsdk/language/pii\">this</a>\n\n <!-- src_embed com.azure.ai.textanalytics.TextAnalyticsClient.recognizePiiEntities#String -->\n <pre>\n PiiEntityCollection piiEntityCollection = textAnalyticsClient.recognizePiiEntities&#40;&quot;My SSN is 859-98-0987&quot;&#41;;\n System.out.printf&#40;&quot;Redacted Text: %s%n&quot;, piiEntityCollection.getRedactedText&#40;&#41;&#41;;\n for &#40;PiiEntity entity : piiEntityCollection&#41; &#123;\n     System.out.printf&#40;\n         &quot;Recognized Personally Identifiable Information entity: %s, entity category: %s,&quot;\n             + &quot; entity subcategory: %s, confidence score: %f.%n&quot;,\n         entity.getText&#40;&#41;, entity.getCategory&#40;&#41;, entity.getSubcategory&#40;&#41;, entity.getConfidenceScore&#40;&#41;&#41;;\n &#125;\n </pre>\n <!-- end com.azure.ai.textanalytics.TextAnalyticsClient.recognizePiiEntities#String -->\n\n <p>See <a href=\"https://aka.ms/talangs\">this</a> for supported languages in Text Analytics API.</p>\n\n <p><strong>Note:</strong> For asynchronous sample, refer to\n <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\"></xref>.</p>\n\n <h3>Text Analytics for Health: Prebuilt Model</h3>\n\n <p>The <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClient#beginAnalyzeHealthcareEntities(java.lang.Iterable)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"beginAnalyzeHealthcareEntities\"></xref> method can be used to analyze healthcare entities, entity data sources, and\n entity relations in a list of <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"documents\"></xref>.\n\n <!-- src_embed com.azure.ai.textanalytics.TextAnalyticsClient.beginAnalyzeHealthcareEntities#Iterable -->\n <pre>\n List&lt;String&gt; documents = new ArrayList&lt;&gt;&#40;&#41;;\n for &#40;int i = 0; i &lt; 3; i++&#41; &#123;\n     documents.add&#40;&quot;The patient is a 54-year-old gentleman with a history of progressive angina over &quot;\n         + &quot;the past several months.&quot;&#41;;\n &#125;\n\n SyncPoller&lt;AnalyzeHealthcareEntitiesOperationDetail, AnalyzeHealthcareEntitiesPagedIterable&gt;\n     syncPoller = textAnalyticsClient.beginAnalyzeHealthcareEntities&#40;documents&#41;;\n\n syncPoller.waitForCompletion&#40;&#41;;\n AnalyzeHealthcareEntitiesPagedIterable result = syncPoller.getFinalResult&#40;&#41;;\n\n result.forEach&#40;analyzeHealthcareEntitiesResultCollection -&gt; &#123;\n     analyzeHealthcareEntitiesResultCollection.forEach&#40;healthcareEntitiesResult -&gt; &#123;\n         System.out.println&#40;&quot;document id = &quot; + healthcareEntitiesResult.getId&#40;&#41;&#41;;\n         System.out.println&#40;&quot;Document entities: &quot;&#41;;\n         AtomicInteger ct = new AtomicInteger&#40;&#41;;\n         healthcareEntitiesResult.getEntities&#40;&#41;.forEach&#40;healthcareEntity -&gt; &#123;\n             System.out.printf&#40;&quot;&#92;ti = %d, Text: %s, category: %s, confidence score: %f.%n&quot;,\n                 ct.getAndIncrement&#40;&#41;, healthcareEntity.getText&#40;&#41;, healthcareEntity.getCategory&#40;&#41;,\n                 healthcareEntity.getConfidenceScore&#40;&#41;&#41;;\n\n             IterableStream&lt;EntityDataSource&gt; healthcareEntityDataSources =\n                 healthcareEntity.getDataSources&#40;&#41;;\n             if &#40;healthcareEntityDataSources != null&#41; &#123;\n                 healthcareEntityDataSources.forEach&#40;healthcareEntityLink -&gt; System.out.printf&#40;\n                     &quot;&#92;t&#92;tEntity ID in data source: %s, data source: %s.%n&quot;,\n                     healthcareEntityLink.getEntityId&#40;&#41;, healthcareEntityLink.getName&#40;&#41;&#41;&#41;;\n             &#125;\n         &#125;&#41;;\n         &#47;&#47; Healthcare entity relation groups\n         healthcareEntitiesResult.getEntityRelations&#40;&#41;.forEach&#40;entityRelation -&gt; &#123;\n             System.out.printf&#40;&quot;&#92;tRelation type: %s.%n&quot;, entityRelation.getRelationType&#40;&#41;&#41;;\n             entityRelation.getRoles&#40;&#41;.forEach&#40;role -&gt; &#123;\n                 final HealthcareEntity entity = role.getEntity&#40;&#41;;\n                 System.out.printf&#40;&quot;&#92;t&#92;tEntity text: %s, category: %s, role: %s.%n&quot;,\n                     entity.getText&#40;&#41;, entity.getCategory&#40;&#41;, role.getName&#40;&#41;&#41;;\n             &#125;&#41;;\n             System.out.printf&#40;&quot;&#92;tRelation confidence score: %f.%n&quot;,\n                 entityRelation.getConfidenceScore&#40;&#41;&#41;;\n         &#125;&#41;;\n     &#125;&#41;;\n &#125;&#41;;\n </pre>\n <!-- end com.azure.ai.textanalytics.TextAnalyticsClient.beginAnalyzeHealthcareEntities#Iterable -->\n\n <p>See <a href=\"https://aka.ms/talangs\">this</a> for supported languages in Text Analytics API.</p>\n\n <p><strong>Note:</strong> For asynchronous sample, refer to\n <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\"></xref>.</p>\n\n <br/>\n\n <hr/>\n\n <h2>Summarize text-based content: Document Summarization</h2>\n\n <p>Text Analytics client can use Natural Language Understanding (NLU) to summarize lengthy documents.\n For example, extractive or abstractive summarization. Below you can look at the samples on how to use it.</p>\n\n <h3>Extractive summarization</h3>\n <p>The <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClient#beginExtractSummary(java.lang.Iterable)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"beginExtractSummary\"></xref>\n method returns a list of extract summaries for the provided list of <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"document\"></xref>.</p>\n\n <p>This method is supported since service API version\n <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsServiceVersion#V2023_04_01\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsServiceVersion#V2023_04_01\"></xref>.</p>\n\n <!-- src_embed Client.beginExtractSummary#Iterable -->\n <pre>\n List&lt;String&gt; documents = new ArrayList&lt;&gt;&#40;&#41;;\n for &#40;int i = 0; i &lt; 3; i++&#41; &#123;\n     documents.add&#40;\n         &quot;At Microsoft, we have been on a quest to advance AI beyond existing techniques, by taking a more holistic,&quot;\n             + &quot; human-centric approach to learning and understanding. As Chief Technology Officer of Azure AI&quot;\n             + &quot; Cognitive Services, I have been working with a team of amazing scientists and engineers to turn &quot;\n             + &quot;this quest into a reality. In my role, I enjoy a unique perspective in viewing the relationship&quot;\n             + &quot; among three attributes of human cognition: monolingual text &#40;X&#41;, audio or visual sensory signals,&quot;\n             + &quot; &#40;Y&#41; and multilingual &#40;Z&#41;. At the intersection of all three, there\\u2019s magic\\u2014what we call XYZ-code&quot;\n             + &quot; as illustrated in Figure 1\\u2014a joint representation to create more powerful AI that can speak, hear,&quot;\n             + &quot; see, and understand humans better. We believe XYZ-code will enable us to fulfill our long-term&quot;\n             + &quot; vision: cross-domain transfer learning, spanning modalities and languages. The goal is to have&quot;\n             + &quot; pretrained models that can jointly learn representations to support a broad range of downstream&quot;\n             + &quot; AI tasks, much in the way humans do today. Over the past five years, we have achieved human&quot;\n             + &quot; performance on benchmarks in conversational speech recognition, machine translation, &quot;\n             + &quot;conversational question answering, machine reading comprehension, and image captioning. These&quot;\n             + &quot; five breakthroughs provided us with strong signals toward our more ambitious aspiration to&quot;\n             + &quot; produce a leap in AI capabilities, achieving multisensory and multilingual learning that &quot;\n             + &quot;is closer in line with how humans learn and understand. I believe the joint XYZ-code is a &quot;\n             + &quot;foundational component of this aspiration, if grounded with external knowledge sources in &quot;\n             + &quot;the downstream AI tasks.&quot;&#41;;\n &#125;\n SyncPoller&lt;ExtractiveSummaryOperationDetail, ExtractiveSummaryPagedIterable&gt; syncPoller =\n     textAnalyticsClient.beginExtractSummary&#40;documents&#41;;\n syncPoller.waitForCompletion&#40;&#41;;\n syncPoller.getFinalResult&#40;&#41;.forEach&#40;resultCollection -&gt; &#123;\n     for &#40;ExtractiveSummaryResult documentResult : resultCollection&#41; &#123;\n         System.out.println&#40;&quot;&#92;tExtracted summary sentences:&quot;&#41;;\n         for &#40;ExtractiveSummarySentence extractiveSummarySentence : documentResult.getSentences&#40;&#41;&#41; &#123;\n             System.out.printf&#40;\n                 &quot;&#92;t&#92;t Sentence text: %s, length: %d, offset: %d, rank score: %f.%n&quot;,\n                 extractiveSummarySentence.getText&#40;&#41;, extractiveSummarySentence.getLength&#40;&#41;,\n                 extractiveSummarySentence.getOffset&#40;&#41;, extractiveSummarySentence.getRankScore&#40;&#41;&#41;;\n         &#125;\n     &#125;\n &#125;&#41;;\n </pre>\n <!-- end Client.beginExtractSummary#Iterable -->\n\n <p>See <a href=\"https://aka.ms/talangs\">this</a> for supported languages in Text Analytics API.</p>\n\n <p><strong>Note:</strong> For asynchronous sample,\n refer to <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\"></xref>.</p>\n\n <h3>Abstractive summarization</h3>\n <p>The <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClient#beginAbstractSummary(java.lang.Iterable)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"beginAbstractSummary\"></xref>\n method returns  a list of abstractive summary for the provided list of <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"document\"></xref>.</p>\n\n <p>This method is supported since service API version\n <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsServiceVersion#V2023_04_01\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsServiceVersion#V2023_04_01\"></xref>.</p>\n\n <!-- src_embed Client.beginAbstractSummary#Iterable -->\n <pre>\n List&lt;String&gt; documents = new ArrayList&lt;&gt;&#40;&#41;;\n for &#40;int i = 0; i &lt; 3; i++&#41; &#123;\n     documents.add&#40;\n         &quot;At Microsoft, we have been on a quest to advance AI beyond existing techniques, by taking a more holistic,&quot;\n             + &quot; human-centric approach to learning and understanding. As Chief Technology Officer of Azure AI&quot;\n             + &quot; Cognitive Services, I have been working with a team of amazing scientists and engineers to turn &quot;\n             + &quot;this quest into a reality. In my role, I enjoy a unique perspective in viewing the relationship&quot;\n             + &quot; among three attributes of human cognition: monolingual text &#40;X&#41;, audio or visual sensory signals,&quot;\n             + &quot; &#40;Y&#41; and multilingual &#40;Z&#41;. At the intersection of all three, there\\u2019s magic\\u2014what we call XYZ-code&quot;\n             + &quot; as illustrated in Figure 1\\u2014a joint representation to create more powerful AI that can speak, hear,&quot;\n             + &quot; see, and understand humans better. We believe XYZ-code will enable us to fulfill our long-term&quot;\n             + &quot; vision: cross-domain transfer learning, spanning modalities and languages. The goal is to have&quot;\n             + &quot; pretrained models that can jointly learn representations to support a broad range of downstream&quot;\n             + &quot; AI tasks, much in the way humans do today. Over the past five years, we have achieved human&quot;\n             + &quot; performance on benchmarks in conversational speech recognition, machine translation, &quot;\n             + &quot;conversational question answering, machine reading comprehension, and image captioning. These&quot;\n             + &quot; five breakthroughs provided us with strong signals toward our more ambitious aspiration to&quot;\n             + &quot; produce a leap in AI capabilities, achieving multisensory and multilingual learning that &quot;\n             + &quot;is closer in line with how humans learn and understand. I believe the joint XYZ-code is a &quot;\n             + &quot;foundational component of this aspiration, if grounded with external knowledge sources in &quot;\n             + &quot;the downstream AI tasks.&quot;&#41;;\n &#125;\n SyncPoller&lt;AbstractiveSummaryOperationDetail, AbstractiveSummaryPagedIterable&gt; syncPoller =\n     textAnalyticsClient.beginAbstractSummary&#40;documents&#41;;\n syncPoller.waitForCompletion&#40;&#41;;\n syncPoller.getFinalResult&#40;&#41;.forEach&#40;resultCollection -&gt; &#123;\n     for &#40;AbstractiveSummaryResult documentResult : resultCollection&#41; &#123;\n         System.out.println&#40;&quot;&#92;tAbstractive summary sentences:&quot;&#41;;\n         for &#40;AbstractiveSummary summarySentence : documentResult.getSummaries&#40;&#41;&#41; &#123;\n             System.out.printf&#40;&quot;&#92;t&#92;t Summary text: %s.%n&quot;, summarySentence.getText&#40;&#41;&#41;;\n             for &#40;AbstractiveSummaryContext abstractiveSummaryContext : summarySentence.getContexts&#40;&#41;&#41; &#123;\n                 System.out.printf&#40;&quot;&#92;t&#92;t offset: %d, length: %d%n&quot;,\n                     abstractiveSummaryContext.getOffset&#40;&#41;, abstractiveSummaryContext.getLength&#40;&#41;&#41;;\n             &#125;\n         &#125;\n     &#125;\n &#125;&#41;;\n </pre>\n <!-- end Client.beginAbstractSummary#Iterable -->\n\n <p>See <a href=\"https://aka.ms/talangs\">this</a> for supported languages in Text Analytics API.</p>\n\n <p><strong>Note:</strong> For asynchronous sample, refer to\n <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\"></xref>.</p>\n\n <br/>\n\n <hr/>\n\n <h2>Classify Text</h2>\n\n <p>Text Analytics client can use Natural Language Understanding (NLU) to detect the language or\n classify the sentiment of text you have. For example, language detection, sentiment analysis, or\n custom text classification. Below you can look at the samples on how to use it.</p>\n\n <h3>Analyze Sentiment and Mine Text for Opinions</h3>\n\n <p>The <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClient#analyzeSentiment(java.lang.String, java.lang.String,\n com.azure.ai.textanalytics.models.AnalyzeSentimentOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsClient#analyzeSentiment(java.lang.String, java.lang.String,\n com.azure.ai.textanalytics.models.AnalyzeSentimentOptions)\"></xref> analyzeSentiment}\n method can be used to analyze sentiment on a given input text string, which returns a sentiment prediction,\n as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each\n sentence within it. If the <code>includeOpinionMining</code> of\n <xref uid=\"com.azure.ai.textanalytics.models.AnalyzeSentimentOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.models.AnalyzeSentimentOptions\"></xref> set to true, the output will include the opinion\n mining results. It mines the opinions of a sentence and conducts more granular analysis around the aspects in the\n text (also known as aspect-based sentiment analysis).</p>\n\n <!-- src_embed com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment#String-String-AnalyzeSentimentOptions -->\n <pre>\n DocumentSentiment documentSentiment = textAnalyticsClient.analyzeSentiment&#40;\n     &quot;The hotel was dark and unclean.&quot;, &quot;en&quot;,\n     new AnalyzeSentimentOptions&#40;&#41;.setIncludeOpinionMining&#40;true&#41;&#41;;\n for &#40;SentenceSentiment sentenceSentiment : documentSentiment.getSentences&#40;&#41;&#41; &#123;\n     System.out.printf&#40;&quot;&#92;tSentence sentiment: %s%n&quot;, sentenceSentiment.getSentiment&#40;&#41;&#41;;\n     sentenceSentiment.getOpinions&#40;&#41;.forEach&#40;opinion -&gt; &#123;\n         TargetSentiment targetSentiment = opinion.getTarget&#40;&#41;;\n         System.out.printf&#40;&quot;&#92;tTarget sentiment: %s, target text: %s%n&quot;, targetSentiment.getSentiment&#40;&#41;,\n             targetSentiment.getText&#40;&#41;&#41;;\n         for &#40;AssessmentSentiment assessmentSentiment : opinion.getAssessments&#40;&#41;&#41; &#123;\n             System.out.printf&#40;&quot;&#92;t&#92;t'%s' sentiment because of &#92;&quot;%s&#92;&quot;. Is the assessment negated: %s.%n&quot;,\n                 assessmentSentiment.getSentiment&#40;&#41;, assessmentSentiment.getText&#40;&#41;, assessmentSentiment.isNegated&#40;&#41;&#41;;\n         &#125;\n     &#125;&#41;;\n &#125;\n </pre>\n <!-- end com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment#String-String-AnalyzeSentimentOptions -->\n\n <p>See <a href=\"https://aka.ms/talangs\">this</a> for supported languages in Text Analytics API.</p>\n\n <p><strong>Note:</strong> For asynchronous sample, refer to\n <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\"></xref>.</p>\n\n <h3>Detect Language</h3>\n\n <p>The <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClient#detectLanguage(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"detectLanguage\"></xref>\n method returns the detected language and a confidence score between zero and one. Scores close to one indicate 100%\n certainty that the identified language is true.</p>\n\n This method will use the default country hint that sets up in\n <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder#defaultCountryHint(String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder#defaultCountryHint(String)\"></xref>. If none is specified,\n service will use 'US' as the country hint.\n\n <!-- src_embed com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage#String -->\n <pre>\n DetectedLanguage detectedLanguage = textAnalyticsClient.detectLanguage&#40;&quot;Bonjour tout le monde&quot;&#41;;\n System.out.printf&#40;&quot;Detected language name: %s, ISO 6391 name: %s, confidence score: %f.%n&quot;,\n     detectedLanguage.getName&#40;&#41;, detectedLanguage.getIso6391Name&#40;&#41;, detectedLanguage.getConfidenceScore&#40;&#41;&#41;;\n </pre>\n <!-- end com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage#String -->\n\n <p>See <a href=\"https://aka.ms/talangs\">this</a> for supported languages in Text Analytics API.</p>\n\n <p><strong>Note:</strong> For asynchronous sample, refer to\n <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\"></xref>.</p>\n\n <h3>Single-Label Classification</h3>\n <p>The <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClient#beginSingleLabelClassify(java.lang.Iterable,\n java.lang.String, java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"beginSingleLabelClassify\"></xref>\n beginSingleLabelClassify} method returns a list of single-label classification for the provided list of\n <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"document\"></xref>.</p>\n\n <p><strong>Note:</strong> this method is supported since service API version\n <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsServiceVersion#V2022_05_01\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsServiceVersion#V2022_05_01\"></xref>.</p>\n\n <!-- src_embed Client.beginSingleLabelClassify#Iterable-String-String -->\n <pre>\n List&lt;String&gt; documents = new ArrayList&lt;&gt;&#40;&#41;;\n for &#40;int i = 0; i &lt; 3; i++&#41; &#123;\n     documents.add&#40;\n         &quot;A recent report by the Government Accountability Office &#40;GAO&#41; found that the dramatic increase &quot;\n             + &quot;in oil and natural gas development on federal lands over the past six years has stretched the&quot;\n             + &quot; staff of the BLM to a point that it has been unable to meet its environmental protection &quot;\n             + &quot;responsibilities.&quot;\n     &#41;;\n &#125;\n &#47;&#47; See the service documentation for regional support and how to train a model to classify your documents,\n &#47;&#47; see https:&#47;&#47;aka.ms&#47;azsdk&#47;textanalytics&#47;customfunctionalities\n SyncPoller&lt;ClassifyDocumentOperationDetail, ClassifyDocumentPagedIterable&gt; syncPoller =\n     textAnalyticsClient.beginSingleLabelClassify&#40;documents, &quot;&#123;project_name&#125;&quot;, &quot;&#123;deployment_name&#125;&quot;&#41;;\n syncPoller.waitForCompletion&#40;&#41;;\n syncPoller.getFinalResult&#40;&#41;.forEach&#40;documentsResults -&gt; &#123;\n     System.out.printf&#40;&quot;Project name: %s, deployment name: %s.%n&quot;,\n         documentsResults.getProjectName&#40;&#41;, documentsResults.getDeploymentName&#40;&#41;&#41;;\n     for &#40;ClassifyDocumentResult documentResult : documentsResults&#41; &#123;\n         System.out.println&#40;&quot;Document ID: &quot; + documentResult.getId&#40;&#41;&#41;;\n         for &#40;ClassificationCategory classification : documentResult.getClassifications&#40;&#41;&#41; &#123;\n             System.out.printf&#40;&quot;&#92;tCategory: %s, confidence score: %f.%n&quot;,\n                 classification.getCategory&#40;&#41;, classification.getConfidenceScore&#40;&#41;&#41;;\n         &#125;\n     &#125;\n &#125;&#41;;\n </pre>\n <!-- end Client.beginSingleLabelClassify#Iterable-String-String -->\n\n <p>See <a href=\"https://aka.ms/talangs\">this</a> for supported languages in Text Analytics API.</p>\n\n <p><strong>Note:</strong> For asynchronous sample, refer to\n <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\"></xref>.</p>\n\n <h3>Multi-Label Classification</h3>\n <p>The <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClient#beginMultiLabelClassify(java.lang.Iterable,\n java.lang.String, java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"beginMultiLabelClassify\"></xref>  method returns a list of multi-label classification\n for the provided list of <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"document\"></xref>.</p>\n\n <p><strong>Note:</strong> this method is supported since service API version\n <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsServiceVersion#V2022_05_01\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsServiceVersion#V2022_05_01\"></xref>.</p>\n\n <!-- src_embed Client.beginMultiLabelClassify#Iterable-String-String -->\n <pre>\n List&lt;String&gt; documents = new ArrayList&lt;&gt;&#40;&#41;;\n for &#40;int i = 0; i &lt; 3; i++&#41; &#123;\n     documents.add&#40;\n         &quot;I need a reservation for an indoor restaurant in China. Please don't stop the music.&quot;\n             + &quot; Play music and add it to my playlist&quot;&#41;;\n &#125;\n SyncPoller&lt;ClassifyDocumentOperationDetail, ClassifyDocumentPagedIterable&gt; syncPoller =\n     textAnalyticsClient.beginMultiLabelClassify&#40;documents, &quot;&#123;project_name&#125;&quot;, &quot;&#123;deployment_name&#125;&quot;&#41;;\n syncPoller.waitForCompletion&#40;&#41;;\n syncPoller.getFinalResult&#40;&#41;.forEach&#40;documentsResults -&gt; &#123;\n     System.out.printf&#40;&quot;Project name: %s, deployment name: %s.%n&quot;,\n         documentsResults.getProjectName&#40;&#41;, documentsResults.getDeploymentName&#40;&#41;&#41;;\n     for &#40;ClassifyDocumentResult documentResult : documentsResults&#41; &#123;\n         System.out.println&#40;&quot;Document ID: &quot; + documentResult.getId&#40;&#41;&#41;;\n         for &#40;ClassificationCategory classification : documentResult.getClassifications&#40;&#41;&#41; &#123;\n             System.out.printf&#40;&quot;&#92;tCategory: %s, confidence score: %f.%n&quot;,\n                 classification.getCategory&#40;&#41;, classification.getConfidenceScore&#40;&#41;&#41;;\n         &#125;\n     &#125;\n &#125;&#41;;\n </pre>\n <!-- end Client.beginMultiLabelClassify#Iterable-String-String -->\n\n <p>See <a href=\"https://aka.ms/talangs\">this</a> for supported languages in Text Analytics API.</p>\n\n <p><strong>Note:</strong> For asynchronous sample, refer to\n <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\"></xref>.</p>\n\n <br/>\n\n <hr/>\n\n <h2>Execute multiple actions</h2>\n <p>The <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClient#beginAnalyzeActions(java.lang.Iterable,\n com.azure.ai.textanalytics.models.TextAnalyticsActions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"beginAnalyzeActions\"></xref> method execute actions, such as,\n entities recognition, PII entities recognition, key phrases extraction, and etc, for a list of\n <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"documents\"></xref>.</p>\n\n <!-- src_embed com.azure.ai.textanalytics.TextAnalyticsClient.beginAnalyzeActions#Iterable-TextAnalyticsActions -->\n <pre>\n List&lt;String&gt; documents = Arrays.asList&#40;\n     &quot;Elon Musk is the CEO of SpaceX and Tesla.&quot;,\n     &quot;My SSN is 859-98-0987&quot;\n &#41;;\n\n SyncPoller&lt;AnalyzeActionsOperationDetail, AnalyzeActionsResultPagedIterable&gt; syncPoller =\n     textAnalyticsClient.beginAnalyzeActions&#40;\n         documents,\n         new TextAnalyticsActions&#40;&#41;.setDisplayName&#40;&quot;&#123;tasks_display_name&#125;&quot;&#41;\n             .setRecognizeEntitiesActions&#40;new RecognizeEntitiesAction&#40;&#41;&#41;\n             .setExtractKeyPhrasesActions&#40;new ExtractKeyPhrasesAction&#40;&#41;&#41;&#41;;\n syncPoller.waitForCompletion&#40;&#41;;\n AnalyzeActionsResultPagedIterable result = syncPoller.getFinalResult&#40;&#41;;\n result.forEach&#40;analyzeActionsResult -&gt; &#123;\n     System.out.println&#40;&quot;Entities recognition action results:&quot;&#41;;\n     analyzeActionsResult.getRecognizeEntitiesResults&#40;&#41;.forEach&#40;\n         actionResult -&gt; &#123;\n             if &#40;!actionResult.isError&#40;&#41;&#41; &#123;\n                 actionResult.getDocumentsResults&#40;&#41;.forEach&#40;\n                     entitiesResult -&gt; entitiesResult.getEntities&#40;&#41;.forEach&#40;\n                         entity -&gt; System.out.printf&#40;\n                             &quot;Recognized entity: %s, entity category: %s, entity subcategory: %s,&quot;\n                                 + &quot; confidence score: %f.%n&quot;,\n                             entity.getText&#40;&#41;, entity.getCategory&#40;&#41;, entity.getSubcategory&#40;&#41;,\n                             entity.getConfidenceScore&#40;&#41;&#41;&#41;&#41;;\n             &#125;\n         &#125;&#41;;\n     System.out.println&#40;&quot;Key phrases extraction action results:&quot;&#41;;\n     analyzeActionsResult.getExtractKeyPhrasesResults&#40;&#41;.forEach&#40;\n         actionResult -&gt; &#123;\n             if &#40;!actionResult.isError&#40;&#41;&#41; &#123;\n                 actionResult.getDocumentsResults&#40;&#41;.forEach&#40;extractKeyPhraseResult -&gt; &#123;\n                     System.out.println&#40;&quot;Extracted phrases:&quot;&#41;;\n                     extractKeyPhraseResult.getKeyPhrases&#40;&#41;\n                         .forEach&#40;keyPhrases -&gt; System.out.printf&#40;&quot;&#92;t%s.%n&quot;, keyPhrases&#41;&#41;;\n                 &#125;&#41;;\n             &#125;\n         &#125;&#41;;\n &#125;&#41;;\n </pre>\n <!-- end com.azure.ai.textanalytics.TextAnalyticsClient.beginAnalyzeActions#Iterable-TextAnalyticsActions -->\n\n <p>See <a href=\"https://aka.ms/talangs\">this</a> for supported languages in Text Analytics API.</p>\n\n <p><strong>Note:</strong> For asynchronous sample, refer to\n <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.textanalytics.TextAnalyticsAsyncClient\"></xref>.</p>"
metadata: {}
package: "com.azure.ai.textanalytics"
artifact: com.azure:azure-ai-textanalytics:5.4.0
