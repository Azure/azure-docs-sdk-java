### YamlMime:ManagedReference
items:
- uid: com.azure.search.documents.indexes.SearchIndexClient
  id: SearchIndexClient
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes
  children:
  - com.azure.search.documents.indexes.SearchIndexClient.analyzeText(java.lang.String,com.azure.search.documents.indexes.models.AnalyzeTextOptions)
  - com.azure.search.documents.indexes.SearchIndexClient.analyzeText(java.lang.String,com.azure.search.documents.indexes.models.AnalyzeTextOptions,com.azure.core.util.Context)
  - com.azure.search.documents.indexes.SearchIndexClient.createIndex(com.azure.search.documents.indexes.models.SearchIndex)
  - com.azure.search.documents.indexes.SearchIndexClient.createIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex,com.azure.core.util.Context)
  - com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateIndex(com.azure.search.documents.indexes.models.SearchIndex)
  - com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex,boolean,boolean,com.azure.core.util.Context)
  - com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateSynonymMap(com.azure.search.documents.indexes.models.SynonymMap)
  - com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap,boolean,com.azure.core.util.Context)
  - com.azure.search.documents.indexes.SearchIndexClient.createSynonymMap(com.azure.search.documents.indexes.models.SynonymMap)
  - com.azure.search.documents.indexes.SearchIndexClient.createSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap,com.azure.core.util.Context)
  - com.azure.search.documents.indexes.SearchIndexClient.deleteIndex(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexClient.deleteIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex,boolean,com.azure.core.util.Context)
  - com.azure.search.documents.indexes.SearchIndexClient.deleteSynonymMap(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexClient.deleteSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap,boolean,com.azure.core.util.Context)
  - com.azure.search.documents.indexes.SearchIndexClient.getEndpoint()
  - com.azure.search.documents.indexes.SearchIndexClient.getIndex(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexClient.getIndexStatistics(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexClient.getIndexStatisticsWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.search.documents.indexes.SearchIndexClient.getIndexWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.search.documents.indexes.SearchIndexClient.getSearchClient(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexClient.getServiceStatistics()
  - com.azure.search.documents.indexes.SearchIndexClient.getServiceStatisticsWithResponse(com.azure.core.util.Context)
  - com.azure.search.documents.indexes.SearchIndexClient.getSynonymMap(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexClient.getSynonymMapWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.search.documents.indexes.SearchIndexClient.listIndexNames()
  - com.azure.search.documents.indexes.SearchIndexClient.listIndexNames(com.azure.core.util.Context)
  - com.azure.search.documents.indexes.SearchIndexClient.listIndexes()
  - com.azure.search.documents.indexes.SearchIndexClient.listIndexes(com.azure.core.util.Context)
  - com.azure.search.documents.indexes.SearchIndexClient.listSynonymMapNames()
  - com.azure.search.documents.indexes.SearchIndexClient.listSynonymMapNames(com.azure.core.util.Context)
  - com.azure.search.documents.indexes.SearchIndexClient.listSynonymMaps()
  - com.azure.search.documents.indexes.SearchIndexClient.listSynonymMaps(com.azure.core.util.Context)
  langs:
  - java
  name: SearchIndexClient
  nameWithType: SearchIndexClient
  fullName: com.azure.search.documents.indexes.SearchIndexClient
  type: Class
  package: com.azure.search.documents.indexes
  summary: This class provides a client that contains the operations for creating, getting, listing, updating, or deleting indexes or synonym map and analyzing text in an Azure Cognitive Search service.
  syntax:
    content: public final class SearchIndexClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.search.documents.indexes.SearchIndexClient.SearchIndexClient(com.azure.search.documents.indexes.SearchIndexAsyncClient)
  id: SearchIndexClient(com.azure.search.documents.indexes.SearchIndexAsyncClient)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: SearchIndexClient(SearchIndexAsyncClient searchIndexAsyncClient)
  nameWithType: SearchIndexClient.SearchIndexClient(SearchIndexAsyncClient searchIndexAsyncClient)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.SearchIndexClient(SearchIndexAsyncClient searchIndexAsyncClient)
  overload: com.azure.search.documents.indexes.SearchIndexClient.SearchIndexClient*
  type: Constructor
  package: com.azure.search.documents.indexes
  syntax:
    content: " SearchIndexClient(SearchIndexAsyncClient searchIndexAsyncClient)"
    parameters:
    - id: searchIndexAsyncClient
      type: com.azure.search.documents.indexes.SearchIndexAsyncClient
- uid: com.azure.search.documents.indexes.SearchIndexClient.analyzeText(java.lang.String,com.azure.search.documents.indexes.models.AnalyzeTextOptions)
  id: analyzeText(java.lang.String,com.azure.search.documents.indexes.models.AnalyzeTextOptions)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions)
  nameWithType: SearchIndexClient.analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions)
  overload: com.azure.search.documents.indexes.SearchIndexClient.analyzeText*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Shows how an analyzer breaks text into tokens.


    **Code Sample**


    Analyzer text with LexicalTokenizerName "Classic" in search index "searchIndex".


    ```java

    PagedIterable<AnalyzedTokenInfo> tokenInfos = searchIndexClient.analyzeText("searchIndex",
         new AnalyzeTextOptions("The quick brown fox", LexicalTokenizerName.CLASSIC));
     for (AnalyzedTokenInfo tokenInfo : tokenInfos) {
         System.out.printf("The token emitted by the analyzer is %s.%n", tokenInfo.getToken());
     }
    ```
  syntax:
    content: public PagedIterable<AnalyzedTokenInfo> analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions)
    parameters:
    - id: indexName
      type: java.lang.String
      description: the name of the index for which to test an analyzer
    - id: analyzeTextOptions
      type: com.azure.search.documents.indexes.models.AnalyzeTextOptions
      description: the text and analyzer or analysis components to test. Requires to provide either <xref uid="com.azure.search.documents.indexes.models.LexicalTokenizerName" data-throw-if-not-resolved="false">LexicalTokenizerName</xref> or <xref uid="com.azure.search.documents.indexes.models.LexicalAnalyzerName" data-throw-if-not-resolved="false">LexicalAnalyzerName</xref>.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.search.documents.indexes.models.AnalyzedTokenInfo>
      description: analyze result.
- uid: com.azure.search.documents.indexes.SearchIndexClient.analyzeText(java.lang.String,com.azure.search.documents.indexes.models.AnalyzeTextOptions,com.azure.core.util.Context)
  id: analyzeText(java.lang.String,com.azure.search.documents.indexes.models.AnalyzeTextOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions, Context context)
  nameWithType: SearchIndexClient.analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions, Context context)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions, Context context)
  overload: com.azure.search.documents.indexes.SearchIndexClient.analyzeText*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Shows how an analyzer breaks text into tokens.


    **Code Sample**


    Analyzer text response with LexicalTokenizerName "Classic" in search index "searchIndex".


    ```java

    PagedIterable<AnalyzedTokenInfo> tokenInfos = searchIndexClient.analyzeText("searchIndex",
         new AnalyzeTextOptions("The quick brown fox", LexicalTokenizerName.CLASSIC), new Context(key1, value1));
     System.out.println("The status code of the response is "
         + tokenInfos.iterableByPage().iterator().next().getStatusCode());
     for (AnalyzedTokenInfo tokenInfo : tokenInfos) {
         System.out.printf("The token emitted by the analyzer is %s.%n", tokenInfo.getToken());
     }
    ```
  syntax:
    content: public PagedIterable<AnalyzedTokenInfo> analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions, Context context)
    parameters:
    - id: indexName
      type: java.lang.String
      description: the name of the index for which to test an analyzer
    - id: analyzeTextOptions
      type: com.azure.search.documents.indexes.models.AnalyzeTextOptions
      description: the text and analyzer or analysis components to test. Requires to provide either <xref uid="com.azure.search.documents.indexes.models.LexicalTokenizerName" data-throw-if-not-resolved="false">LexicalTokenizerName</xref> or <xref uid="com.azure.search.documents.indexes.models.LexicalAnalyzerName" data-throw-if-not-resolved="false">LexicalAnalyzerName</xref>.
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the HTTP pipeline during the service call
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.search.documents.indexes.models.AnalyzedTokenInfo>
      description: analyze result.
- uid: com.azure.search.documents.indexes.SearchIndexClient.createIndex(com.azure.search.documents.indexes.models.SearchIndex)
  id: createIndex(com.azure.search.documents.indexes.models.SearchIndex)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: createIndex(SearchIndex index)
  nameWithType: SearchIndexClient.createIndex(SearchIndex index)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.createIndex(SearchIndex index)
  overload: com.azure.search.documents.indexes.SearchIndexClient.createIndex*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search index


    **Code Sample**


    Create search index named "searchIndex".


    ```java

    List<SearchField> searchFields = Arrays.asList(
         new SearchField("hotelId", SearchFieldDataType.STRING).setKey(true),
         new SearchField("hotelName", SearchFieldDataType.STRING).setSearchable(true)
     );
     SearchIndex searchIndex = new SearchIndex("searchIndex", searchFields);
     SearchIndex indexFromService = searchIndexClient.createIndex(searchIndex);
     System.out.printf("The index name is %s. The etag of index is %s.%n", indexFromService.getName(),
         indexFromService.getETag());
    ```
  syntax:
    content: public SearchIndex createIndex(SearchIndex index)
    parameters:
    - id: index
      type: com.azure.search.documents.indexes.models.SearchIndex
      description: definition of the index to create
    return:
      type: com.azure.search.documents.indexes.models.SearchIndex
      description: the created Index.
- uid: com.azure.search.documents.indexes.SearchIndexClient.createIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex,com.azure.core.util.Context)
  id: createIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex,com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: createIndexWithResponse(SearchIndex index, Context context)
  nameWithType: SearchIndexClient.createIndexWithResponse(SearchIndex index, Context context)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.createIndexWithResponse(SearchIndex index, Context context)
  overload: com.azure.search.documents.indexes.SearchIndexClient.createIndexWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: "Creates a new Azure Cognitive Search index\n\n**Code Sample**\n\nCreate search index named \"searchIndex\".\n\n```java\nList<SearchField> searchFields = Arrays.asList(\n     new SearchField(\"hotelId\", SearchFieldDataType.STRING).setKey(true),\n     new SearchField(\"hotelName\", SearchFieldDataType.STRING).setSearchable(true)\n );\n SearchIndex searchIndex = new SearchIndex(\"searchIndex\", searchFields);\n \n Response<SearchIndex> indexFromServiceResponse =\n     searchIndexClient.createIndexWithResponse(searchIndex, new Context(key1, value1));\n System.out.printf(\"The status code of the response is %s. The index name is %s.%n\",\n     indexFromServiceResponse.getStatusCode(), indexFromServiceResponse.getValue().getName());\n```"
  syntax:
    content: public Response<SearchIndex> createIndexWithResponse(SearchIndex index, Context context)
    parameters:
    - id: index
      type: com.azure.search.documents.indexes.models.SearchIndex
      description: definition of the index to create
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the HTTP pipeline during the service call
    return:
      type: com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndex>
      description: a response containing the created Index.
- uid: com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateIndex(com.azure.search.documents.indexes.models.SearchIndex)
  id: createOrUpdateIndex(com.azure.search.documents.indexes.models.SearchIndex)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: createOrUpdateIndex(SearchIndex index)
  nameWithType: SearchIndexClient.createOrUpdateIndex(SearchIndex index)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateIndex(SearchIndex index)
  overload: com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateIndex*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search index or updates an index if it already exists.


    **Code Sample**


    Create or update search index named "searchIndex".


    ```java

    SearchIndex indexFromService = searchIndexClient.getIndex("searchIndex");
     indexFromService.setSuggesters(Collections.singletonList(new SearchSuggester("sg",
         Collections.singletonList("hotelName"))));
     SearchIndex updatedIndex = searchIndexClient.createOrUpdateIndex(indexFromService);
     System.out.printf("The index name is %s. The suggester name of index is %s.%n", updatedIndex.getName(),
         updatedIndex.getSuggesters().get(0).getName());
    ```
  syntax:
    content: public SearchIndex createOrUpdateIndex(SearchIndex index)
    parameters:
    - id: index
      type: com.azure.search.documents.indexes.models.SearchIndex
      description: the definition of the index to create or update
    return:
      type: com.azure.search.documents.indexes.models.SearchIndex
      description: the index that was created or updated.
- uid: com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex,boolean,boolean,com.azure.core.util.Context)
  id: createOrUpdateIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex,boolean,boolean,com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: createOrUpdateIndexWithResponse(SearchIndex index, boolean allowIndexDowntime, boolean onlyIfUnchanged, Context context)
  nameWithType: SearchIndexClient.createOrUpdateIndexWithResponse(SearchIndex index, boolean allowIndexDowntime, boolean onlyIfUnchanged, Context context)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateIndexWithResponse(SearchIndex index, boolean allowIndexDowntime, boolean onlyIfUnchanged, Context context)
  overload: com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateIndexWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search index or updates an index if it already exists.


    **Code Sample**


    Create or update search index named "searchIndex".


    ```java

    SearchIndex indexFromService = searchIndexClient.getIndex("searchIndex");
     indexFromService.setSuggesters(Collections.singletonList(new SearchSuggester("sg",
         Collections.singletonList("hotelName"))));
     Response<SearchIndex> updatedIndexResponse = searchIndexClient.createOrUpdateIndexWithResponse(indexFromService, true,
         false, new Context(key1, value1));
     System.out.printf("The status code of the normal response is %s.%n"
             + "The index name is %s. The etag of index is %s.%n", updatedIndexResponse.getStatusCode(),
         updatedIndexResponse.getValue().getName(), updatedIndexResponse.getValue().getETag());
    ```
  syntax:
    content: public Response<SearchIndex> createOrUpdateIndexWithResponse(SearchIndex index, boolean allowIndexDowntime, boolean onlyIfUnchanged, Context context)
    parameters:
    - id: index
      type: com.azure.search.documents.indexes.models.SearchIndex
      description: the <xref uid="com.azure.search.documents.indexes.models.SearchIndex" data-throw-if-not-resolved="false">SearchIndex</xref> to create or update
    - id: allowIndexDowntime
      type: boolean
      description: >-
        allows new analyzers, tokenizers, token filters, or char filters to be added to an
         index by taking the index offline for at least a few seconds. This temporarily causes indexing and query requests
         to fail. Performance and write availability of the index can be impaired for several minutes after the index is
         updated, or longer for very large indexes.
    - id: onlyIfUnchanged
      type: boolean
      description: >-
        <code>true</code> to update if the <code>index</code> is the same as the current service value.
         <code>false</code> to always update existing value.
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the HTTP pipeline during the service call
    return:
      type: com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndex>
      description: a response containing the Index that was created or updated.
- uid: com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateSynonymMap(com.azure.search.documents.indexes.models.SynonymMap)
  id: createOrUpdateSynonymMap(com.azure.search.documents.indexes.models.SynonymMap)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: createOrUpdateSynonymMap(SynonymMap synonymMap)
  nameWithType: SearchIndexClient.createOrUpdateSynonymMap(SynonymMap synonymMap)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateSynonymMap(SynonymMap synonymMap)
  overload: com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateSynonymMap*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search synonym map or updates a synonym map if it already exists.


    **Code Sample**


    Create or update synonym map named "synonymMap".


    ```java

    SynonymMap synonymMap = searchIndexClient.getSynonymMap("searchIndex");
     synonymMap.setSynonyms("United States, United States of America, USA, America\nWashington, Wash. => WA");
     SynonymMap updatedSynonymMap = searchIndexClient.createOrUpdateSynonymMap(synonymMap);
     System.out.printf("The synonym map name is %s. The synonyms are %s.%n", updatedSynonymMap.getName(),
         updatedSynonymMap.getSynonyms());
    ```
  syntax:
    content: public SynonymMap createOrUpdateSynonymMap(SynonymMap synonymMap)
    parameters:
    - id: synonymMap
      type: com.azure.search.documents.indexes.models.SynonymMap
      description: the definition of the synonym map to create or update
    return:
      type: com.azure.search.documents.indexes.models.SynonymMap
      description: the synonym map that was created or updated.
- uid: com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap,boolean,com.azure.core.util.Context)
  id: createOrUpdateSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap,boolean,com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged, Context context)
  nameWithType: SearchIndexClient.createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged, Context context)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged, Context context)
  overload: com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateSynonymMapWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search synonym map or updates a synonym map if it already exists.


    **Code Sample**


    Create or update synonym map named "synonymMap".


    ```java

    SynonymMap synonymMap = searchIndexClient.getSynonymMap("searchIndex");
     synonymMap.setSynonyms("United States, United States of America, USA, America\nWashington, Wash. => WA");
     Response<SynonymMap> updatedSynonymMap =
         searchIndexClient.createOrUpdateSynonymMapWithResponse(synonymMap, true,
             new Context(key1, value1));
     System.out.printf("The status code of the normal response is %s.%n"
             + "The synonym map name is %s. The synonyms are %s.%n", updatedSynonymMap.getStatusCode(),
         updatedSynonymMap.getValue().getName(), updatedSynonymMap.getValue().getSynonyms());
    ```
  syntax:
    content: public Response<SynonymMap> createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged, Context context)
    parameters:
    - id: synonymMap
      type: com.azure.search.documents.indexes.models.SynonymMap
      description: the definition of the synonym map to create or update
    - id: onlyIfUnchanged
      type: boolean
      description: >-
        <code>true</code> to update if the <code>synonymMap</code> is the same as the current service value.
         <code>false</code> to always update existing value.
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the HTTP pipeline during the service call
    return:
      type: com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SynonymMap>
      description: a response containing the synonym map that was created or updated.
- uid: com.azure.search.documents.indexes.SearchIndexClient.createSynonymMap(com.azure.search.documents.indexes.models.SynonymMap)
  id: createSynonymMap(com.azure.search.documents.indexes.models.SynonymMap)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: createSynonymMap(SynonymMap synonymMap)
  nameWithType: SearchIndexClient.createSynonymMap(SynonymMap synonymMap)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.createSynonymMap(SynonymMap synonymMap)
  overload: com.azure.search.documents.indexes.SearchIndexClient.createSynonymMap*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search synonym map.


    **Code Sample**


    Create synonym map named "synonymMap".


    ```java

    SynonymMap synonymMap = new SynonymMap("synonymMap",
         "United States, United States of America, USA\nWashington, Wash. => WA");
     SynonymMap synonymMapFromService = searchIndexClient.createSynonymMap(synonymMap);
     System.out.printf("The synonym map name is %s. The etag of synonym map is %s.%n",
         synonymMapFromService.getName(), synonymMapFromService.getETag());
    ```
  syntax:
    content: public SynonymMap createSynonymMap(SynonymMap synonymMap)
    parameters:
    - id: synonymMap
      type: com.azure.search.documents.indexes.models.SynonymMap
      description: the definition of the synonym map to create
    return:
      type: com.azure.search.documents.indexes.models.SynonymMap
      description: the created <xref uid="com.azure.search.documents.indexes.models.SynonymMap" data-throw-if-not-resolved="false">SynonymMap</xref>.
- uid: com.azure.search.documents.indexes.SearchIndexClient.createSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap,com.azure.core.util.Context)
  id: createSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap,com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: createSynonymMapWithResponse(SynonymMap synonymMap, Context context)
  nameWithType: SearchIndexClient.createSynonymMapWithResponse(SynonymMap synonymMap, Context context)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.createSynonymMapWithResponse(SynonymMap synonymMap, Context context)
  overload: com.azure.search.documents.indexes.SearchIndexClient.createSynonymMapWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search synonym map.


    **Code Sample**


    Create synonym map named "synonymMap".
  syntax:
    content: public Response<SynonymMap> createSynonymMapWithResponse(SynonymMap synonymMap, Context context)
    parameters:
    - id: synonymMap
      type: com.azure.search.documents.indexes.models.SynonymMap
      description: the definition of the synonym map to create
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the HTTP pipeline during the service call
    return:
      type: com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SynonymMap>
      description: a response containing the created SynonymMap.
- uid: com.azure.search.documents.indexes.SearchIndexClient.deleteIndex(java.lang.String)
  id: deleteIndex(java.lang.String)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: deleteIndex(String indexName)
  nameWithType: SearchIndexClient.deleteIndex(String indexName)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.deleteIndex(String indexName)
  overload: com.azure.search.documents.indexes.SearchIndexClient.deleteIndex*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Deletes an Azure Cognitive Search index and all the documents it contains.


    **Code Sample**


    Delete search index with name "searchIndex".


    ```java

    searchIndexClient.deleteIndex("searchIndex");

    ```
  syntax:
    content: public void deleteIndex(String indexName)
    parameters:
    - id: indexName
      type: java.lang.String
      description: the name of the index to delete
- uid: com.azure.search.documents.indexes.SearchIndexClient.deleteIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex,boolean,com.azure.core.util.Context)
  id: deleteIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex,boolean,com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: deleteIndexWithResponse(SearchIndex index, boolean onlyIfUnchanged, Context context)
  nameWithType: SearchIndexClient.deleteIndexWithResponse(SearchIndex index, boolean onlyIfUnchanged, Context context)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.deleteIndexWithResponse(SearchIndex index, boolean onlyIfUnchanged, Context context)
  overload: com.azure.search.documents.indexes.SearchIndexClient.deleteIndexWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Deletes an Azure Cognitive Search index and all the documents it contains.


    **Code Sample**


    Delete search index with name "searchIndex".


    ```java

    SearchIndex indexFromService = searchIndexClient.getIndex("searchIndex");
     Response<Void> deleteResponse = searchIndexClient.deleteIndexWithResponse(indexFromService, true,
         new Context(key1, value1));
     System.out.printf("The status code of the response is %d.%n", deleteResponse.getStatusCode());
    ```
  syntax:
    content: public Response<Void> deleteIndexWithResponse(SearchIndex index, boolean onlyIfUnchanged, Context context)
    parameters:
    - id: index
      type: com.azure.search.documents.indexes.models.SearchIndex
      description: the Search <xref uid="com.azure.search.documents.indexes.models.SearchIndex" data-throw-if-not-resolved="false">SearchIndex</xref> to delete.
    - id: onlyIfUnchanged
      type: boolean
      description: >-
        <code>true</code> to delete if the <code>index</code> is the same as the current service value.
         <code>false</code> to always delete existing value.
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the Http pipeline during the service call
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: a response signalling completion.
- uid: com.azure.search.documents.indexes.SearchIndexClient.deleteSynonymMap(java.lang.String)
  id: deleteSynonymMap(java.lang.String)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: deleteSynonymMap(String synonymMapName)
  nameWithType: SearchIndexClient.deleteSynonymMap(String synonymMapName)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.deleteSynonymMap(String synonymMapName)
  overload: com.azure.search.documents.indexes.SearchIndexClient.deleteSynonymMap*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Deletes an Azure Cognitive Search synonym map.


    **Code Sample**


    Delete synonym map with name "synonymMap".


    ```java

    searchIndexClient.deleteSynonymMap("synonymMap");

    ```
  syntax:
    content: public void deleteSynonymMap(String synonymMapName)
    parameters:
    - id: synonymMapName
      type: java.lang.String
      description: the name of the synonym map to delete
- uid: com.azure.search.documents.indexes.SearchIndexClient.deleteSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap,boolean,com.azure.core.util.Context)
  id: deleteSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap,boolean,com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: deleteSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged, Context context)
  nameWithType: SearchIndexClient.deleteSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged, Context context)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.deleteSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged, Context context)
  overload: com.azure.search.documents.indexes.SearchIndexClient.deleteSynonymMapWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Deletes an Azure Cognitive Search synonym map.


    **Code Sample**


    Delete synonym map with name "synonymMap".


    ```java

    SynonymMap synonymMap = searchIndexClient.getSynonymMap("synonymMap");
     Response<Void> response = searchIndexClient.deleteSynonymMapWithResponse(synonymMap, true,
         new Context(key1, value1));
     System.out.println("The status code of the response is" + response.getStatusCode());
    ```
  syntax:
    content: public Response<Void> deleteSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged, Context context)
    parameters:
    - id: synonymMap
      type: com.azure.search.documents.indexes.models.SynonymMap
      description: the <xref uid="com.azure.search.documents.indexes.models.SynonymMap" data-throw-if-not-resolved="false">SynonymMap</xref> to delete.
    - id: onlyIfUnchanged
      type: boolean
      description: >-
        <code>true</code> to delete if the <code>synonymMap</code> is the same as the current service value.
         <code>false</code> to always delete existing value.
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the Http pipeline during the service call
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: a response signalling completion.
- uid: com.azure.search.documents.indexes.SearchIndexClient.getEndpoint()
  id: getEndpoint()
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: getEndpoint()
  nameWithType: SearchIndexClient.getEndpoint()
  fullName: com.azure.search.documents.indexes.SearchIndexClient.getEndpoint()
  overload: com.azure.search.documents.indexes.SearchIndexClient.getEndpoint*
  type: Method
  package: com.azure.search.documents.indexes
  summary: Gets the endpoint for the Azure Cognitive Search service.
  syntax:
    content: public String getEndpoint()
    return:
      type: java.lang.String
      description: the endpoint value.
- uid: com.azure.search.documents.indexes.SearchIndexClient.getIndex(java.lang.String)
  id: getIndex(java.lang.String)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: getIndex(String indexName)
  nameWithType: SearchIndexClient.getIndex(String indexName)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.getIndex(String indexName)
  overload: com.azure.search.documents.indexes.SearchIndexClient.getIndex*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Retrieves an index definition from the Azure Cognitive Search.


    **Code Sample**


    Get search index with name "searchIndex".


    ```java

    SearchIndex indexFromService =
         searchIndexClient.getIndex("searchIndex");
     System.out.printf("The index name is %s. The etag of index is %s.%n", indexFromService.getName(),
         indexFromService.getETag());
    ```
  syntax:
    content: public SearchIndex getIndex(String indexName)
    parameters:
    - id: indexName
      type: java.lang.String
      description: the name of the index to retrieve
    return:
      type: com.azure.search.documents.indexes.models.SearchIndex
      description: the Index.
- uid: com.azure.search.documents.indexes.SearchIndexClient.getIndexStatistics(java.lang.String)
  id: getIndexStatistics(java.lang.String)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: getIndexStatistics(String indexName)
  nameWithType: SearchIndexClient.getIndexStatistics(String indexName)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.getIndexStatistics(String indexName)
  overload: com.azure.search.documents.indexes.SearchIndexClient.getIndexStatistics*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Returns statistics for the given index, including a document count and storage usage.


    **Code Sample**


    Get search index "searchIndex" statistics.


    ```java

    SearchIndexStatistics statistics = searchIndexClient.getIndexStatistics("searchIndex");
     System.out.printf("There are %d documents and storage size of %d available in 'searchIndex'.%n",
         statistics.getDocumentCount(), statistics.getStorageSize());
    ```
  syntax:
    content: public SearchIndexStatistics getIndexStatistics(String indexName)
    parameters:
    - id: indexName
      type: java.lang.String
      description: the name of the index for which to retrieve statistics
    return:
      type: com.azure.search.documents.indexes.models.SearchIndexStatistics
      description: the index statistics result.
- uid: com.azure.search.documents.indexes.SearchIndexClient.getIndexStatisticsWithResponse(java.lang.String,com.azure.core.util.Context)
  id: getIndexStatisticsWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: getIndexStatisticsWithResponse(String indexName, Context context)
  nameWithType: SearchIndexClient.getIndexStatisticsWithResponse(String indexName, Context context)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.getIndexStatisticsWithResponse(String indexName, Context context)
  overload: com.azure.search.documents.indexes.SearchIndexClient.getIndexStatisticsWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Returns statistics for the given index, including a document count and storage usage.


    **Code Sample**


    Get search index "searchIndex" statistics.


    ```java

    Response<SearchIndexStatistics> statistics = searchIndexClient.getIndexStatisticsWithResponse("searchIndex",
         new Context(key1, value1));
     System.out.printf("The status code of the response is %s.%n"
             + "There are %d documents and storage size of %d available in 'searchIndex'.%n",
         statistics.getStatusCode(), statistics.getValue().getDocumentCount(),
         statistics.getValue().getStorageSize());
    ```
  syntax:
    content: public Response<SearchIndexStatistics> getIndexStatisticsWithResponse(String indexName, Context context)
    parameters:
    - id: indexName
      type: java.lang.String
      description: the name of the index for which to retrieve statistics
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the HTTP pipeline during the service call
    return:
      type: com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndexStatistics>
      description: a response containing the index statistics result.
- uid: com.azure.search.documents.indexes.SearchIndexClient.getIndexWithResponse(java.lang.String,com.azure.core.util.Context)
  id: getIndexWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: getIndexWithResponse(String indexName, Context context)
  nameWithType: SearchIndexClient.getIndexWithResponse(String indexName, Context context)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.getIndexWithResponse(String indexName, Context context)
  overload: com.azure.search.documents.indexes.SearchIndexClient.getIndexWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: "Retrieves an index definition from the Azure Cognitive Search.\n\n**Code Sample**\n\nGet search index with \"searchIndex.\n\n```java\nResponse<SearchIndex> indexFromServiceResponse =\n     searchIndexClient.getIndexWithResponse(\"searchIndex\", new Context(key1, value1));\n \n System.out.printf(\"The status code of the response is %s. The index name is %s.%n\",\n     indexFromServiceResponse.getStatusCode(), indexFromServiceResponse.getValue().getName());\n```"
  syntax:
    content: public Response<SearchIndex> getIndexWithResponse(String indexName, Context context)
    parameters:
    - id: indexName
      type: java.lang.String
      description: the name of the index to retrieve
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the HTTP pipeline during the service call
    return:
      type: com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndex>
      description: a response containing the Index.
- uid: com.azure.search.documents.indexes.SearchIndexClient.getSearchClient(java.lang.String)
  id: getSearchClient(java.lang.String)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: getSearchClient(String indexName)
  nameWithType: SearchIndexClient.getSearchClient(String indexName)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.getSearchClient(String indexName)
  overload: com.azure.search.documents.indexes.SearchIndexClient.getSearchClient*
  type: Method
  package: com.azure.search.documents.indexes
  summary: Initializes a new <xref uid="com.azure.search.documents.SearchClient" data-throw-if-not-resolved="false">SearchClient</xref> using the given Index name and the same configuration as the SearchServiceClient.
  syntax:
    content: public SearchClient getSearchClient(String indexName)
    parameters:
    - id: indexName
      type: java.lang.String
      description: the name of the Index for the client
    return:
      type: com.azure.search.documents.SearchClient
      description: a <xref uid="com.azure.search.documents.SearchClient" data-throw-if-not-resolved="false">SearchClient</xref> created from the service client configuration
- uid: com.azure.search.documents.indexes.SearchIndexClient.getServiceStatistics()
  id: getServiceStatistics()
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: getServiceStatistics()
  nameWithType: SearchIndexClient.getServiceStatistics()
  fullName: com.azure.search.documents.indexes.SearchIndexClient.getServiceStatistics()
  overload: com.azure.search.documents.indexes.SearchIndexClient.getServiceStatistics*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Returns service level statistics for a search service, including service counters and limits.


    **Code Sample**


    Get service statistics.


    ```java

    SearchServiceStatistics serviceStatistics = searchIndexClient.getServiceStatistics();
     System.out.printf("There are %s search indexes in your service.%n",
         serviceStatistics.getCounters().getIndexCounter());
    ```
  syntax:
    content: public SearchServiceStatistics getServiceStatistics()
    return:
      type: com.azure.search.documents.indexes.models.SearchServiceStatistics
      description: the search service statistics result.
- uid: com.azure.search.documents.indexes.SearchIndexClient.getServiceStatisticsWithResponse(com.azure.core.util.Context)
  id: getServiceStatisticsWithResponse(com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: getServiceStatisticsWithResponse(Context context)
  nameWithType: SearchIndexClient.getServiceStatisticsWithResponse(Context context)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.getServiceStatisticsWithResponse(Context context)
  overload: com.azure.search.documents.indexes.SearchIndexClient.getServiceStatisticsWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Returns service level statistics for a search service, including service counters and limits.


    **Code Sample**


    Get service statistics.


    ```java

    Response<SearchServiceStatistics> serviceStatistics =
         searchIndexClient.getServiceStatisticsWithResponse(new Context(key1, value1));
     System.out.printf("The status code of the response is %s.%nThere are %s search indexes in your service.%n",
         serviceStatistics.getStatusCode(),
         serviceStatistics.getValue().getCounters().getIndexCounter());
    ```
  syntax:
    content: public Response<SearchServiceStatistics> getServiceStatisticsWithResponse(Context context)
    parameters:
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the HTTP pipeline during the service call
    return:
      type: com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchServiceStatistics>
      description: the search service statistics result.
- uid: com.azure.search.documents.indexes.SearchIndexClient.getSynonymMap(java.lang.String)
  id: getSynonymMap(java.lang.String)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: getSynonymMap(String synonymMapName)
  nameWithType: SearchIndexClient.getSynonymMap(String synonymMapName)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.getSynonymMap(String synonymMapName)
  overload: com.azure.search.documents.indexes.SearchIndexClient.getSynonymMap*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Retrieves a synonym map definition.


    **Code Sample**


    Get synonym map with name "synonymMap".


    ```java

    SynonymMap synonymMapFromService =
         searchIndexClient.getSynonymMap("synonymMap");
     System.out.printf("The synonym map is %s. The etag of synonym map is %s.%n", synonymMapFromService.getName(),
         synonymMapFromService.getETag());
    ```
  syntax:
    content: public SynonymMap getSynonymMap(String synonymMapName)
    parameters:
    - id: synonymMapName
      type: java.lang.String
      description: name of the synonym map to retrieve
    return:
      type: com.azure.search.documents.indexes.models.SynonymMap
      description: the <xref uid="com.azure.search.documents.indexes.models.SynonymMap" data-throw-if-not-resolved="false">SynonymMap</xref> definition
- uid: com.azure.search.documents.indexes.SearchIndexClient.getSynonymMapWithResponse(java.lang.String,com.azure.core.util.Context)
  id: getSynonymMapWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: getSynonymMapWithResponse(String synonymMapName, Context context)
  nameWithType: SearchIndexClient.getSynonymMapWithResponse(String synonymMapName, Context context)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.getSynonymMapWithResponse(String synonymMapName, Context context)
  overload: com.azure.search.documents.indexes.SearchIndexClient.getSynonymMapWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Retrieves a synonym map definition.


    **Code Sample**


    Get synonym map with name "synonymMap".


    ```java

    Response<SynonymMap> synonymMapFromService =
         searchIndexClient.getSynonymMapWithResponse("synonymMap", new Context(key1, value1));
     System.out.printf("The status code of the response is %d.%n"
             + "The synonym map name is %s. The etag of synonym map is %s.%n", synonymMapFromService.getStatusCode(),
         synonymMapFromService.getValue().getName(), synonymMapFromService.getValue().getETag());
    ```
  syntax:
    content: public Response<SynonymMap> getSynonymMapWithResponse(String synonymMapName, Context context)
    parameters:
    - id: synonymMapName
      type: java.lang.String
      description: name of the synonym map to retrieve
    - id: context
      type: com.azure.core.util.Context
      description: a context that is passed through the HTTP pipeline during the service call
    return:
      type: com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SynonymMap>
      description: a response containing the SynonymMap.
- uid: com.azure.search.documents.indexes.SearchIndexClient.listIndexNames()
  id: listIndexNames()
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: listIndexNames()
  nameWithType: SearchIndexClient.listIndexNames()
  fullName: com.azure.search.documents.indexes.SearchIndexClient.listIndexNames()
  overload: com.azure.search.documents.indexes.SearchIndexClient.listIndexNames*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Lists all index names for an Azure Cognitive Search service.


    **Code Sample**


    List all search indexes names.


    ```java

    PagedIterable<String> indexes = searchIndexClient.listIndexNames();
     for (String indexName: indexes) {
         System.out.printf("The index name is %s.%n", indexName);
     }
    ```
  syntax:
    content: public PagedIterable<String> listIndexNames()
    return:
      type: com.azure.core.http.rest.PagedIterable<java.lang.String>
      description: the list of index names.
- uid: com.azure.search.documents.indexes.SearchIndexClient.listIndexNames(com.azure.core.util.Context)
  id: listIndexNames(com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: listIndexNames(Context context)
  nameWithType: SearchIndexClient.listIndexNames(Context context)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.listIndexNames(Context context)
  overload: com.azure.search.documents.indexes.SearchIndexClient.listIndexNames*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Lists all indexes names for an Azure Cognitive Search service.


    **Code Sample**


    List all search indexes names.


    ```java

    PagedIterable<String> indexes = searchIndexClient.listIndexNames(new Context(key1, value1));
     System.out.println("The status code of the response is"
         + indexes.iterableByPage().iterator().next().getStatusCode());
     for (String indexName: indexes) {
         System.out.printf("The index name is %s.%n", indexName);
     }
    ```
  syntax:
    content: public PagedIterable<String> listIndexNames(Context context)
    parameters:
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the HTTP pipeline during the service call
    return:
      type: com.azure.core.http.rest.PagedIterable<java.lang.String>
      description: the list of index names.
- uid: com.azure.search.documents.indexes.SearchIndexClient.listIndexes()
  id: listIndexes()
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: listIndexes()
  nameWithType: SearchIndexClient.listIndexes()
  fullName: com.azure.search.documents.indexes.SearchIndexClient.listIndexes()
  overload: com.azure.search.documents.indexes.SearchIndexClient.listIndexes*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Lists all indexes available for an Azure Cognitive Search service.


    **Code Sample**


    List all search indexes.


    ```java

    PagedIterable<SearchIndex> indexes = searchIndexClient.listIndexes();
     for (SearchIndex index: indexes) {
         System.out.printf("The index name is %s. The etag of index is %s.%n", index.getName(),
             index.getETag());
     }
    ```
  syntax:
    content: public PagedIterable<SearchIndex> listIndexes()
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.search.documents.indexes.models.SearchIndex>
      description: the list of indexes.
- uid: com.azure.search.documents.indexes.SearchIndexClient.listIndexes(com.azure.core.util.Context)
  id: listIndexes(com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: listIndexes(Context context)
  nameWithType: SearchIndexClient.listIndexes(Context context)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.listIndexes(Context context)
  overload: com.azure.search.documents.indexes.SearchIndexClient.listIndexes*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Lists all indexes available for an Azure Cognitive Search service.


    **Code Sample**


    List all search indexes.


    ```java

    PagedIterable<SearchIndex> indexes = searchIndexClient.listIndexes(new Context(key1, value1));
     System.out.println("The status code of the response is"
         + indexes.iterableByPage().iterator().next().getStatusCode());
     for (SearchIndex index: indexes) {
         System.out.printf("The index name is %s. The etag of index is %s.%n", index.getName(), index.getETag());
     }
    ```
  syntax:
    content: public PagedIterable<SearchIndex> listIndexes(Context context)
    parameters:
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the HTTP pipeline during the service call
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.search.documents.indexes.models.SearchIndex>
      description: the list of indexes.
- uid: com.azure.search.documents.indexes.SearchIndexClient.listSynonymMapNames()
  id: listSynonymMapNames()
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: listSynonymMapNames()
  nameWithType: SearchIndexClient.listSynonymMapNames()
  fullName: com.azure.search.documents.indexes.SearchIndexClient.listSynonymMapNames()
  overload: com.azure.search.documents.indexes.SearchIndexClient.listSynonymMapNames*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Lists all synonym maps names for an Azure Cognitive Search service.


    **Code Sample**


    List all synonym map names.


    ```java

    PagedIterable<String> synonymMaps = searchIndexClient.listSynonymMapNames();
     for (String synonymMap: synonymMaps) {
         System.out.printf("The synonymMap name is %s.%n", synonymMap);
     }
    ```
  syntax:
    content: public PagedIterable<String> listSynonymMapNames()
    return:
      type: com.azure.core.http.rest.PagedIterable<java.lang.String>
      description: the list of synonym maps.
- uid: com.azure.search.documents.indexes.SearchIndexClient.listSynonymMapNames(com.azure.core.util.Context)
  id: listSynonymMapNames(com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: listSynonymMapNames(Context context)
  nameWithType: SearchIndexClient.listSynonymMapNames(Context context)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.listSynonymMapNames(Context context)
  overload: com.azure.search.documents.indexes.SearchIndexClient.listSynonymMapNames*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Lists all synonym maps names for an Azure Cognitive Search service.


    **Code Sample**


    List all synonym map names.


    ```java

    PagedIterable<String> synonymMaps = searchIndexClient.listIndexNames(new Context(key1, value1));
     System.out.println("The status code of the response is"
         + synonymMaps.iterableByPage().iterator().next().getStatusCode());
     for (String synonymMapNames: synonymMaps) {
         System.out.printf("The synonymMap name is %s.%n", synonymMapNames);
     }
    ```
  syntax:
    content: public PagedIterable<String> listSynonymMapNames(Context context)
    parameters:
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the HTTP pipeline during the service call
    return:
      type: com.azure.core.http.rest.PagedIterable<java.lang.String>
      description: the list of synonym map names.
- uid: com.azure.search.documents.indexes.SearchIndexClient.listSynonymMaps()
  id: listSynonymMaps()
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: listSynonymMaps()
  nameWithType: SearchIndexClient.listSynonymMaps()
  fullName: com.azure.search.documents.indexes.SearchIndexClient.listSynonymMaps()
  overload: com.azure.search.documents.indexes.SearchIndexClient.listSynonymMaps*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Lists all synonym maps available for an Azure Cognitive Search service.


    **Code Sample**


    List all synonym maps.


    ```java

    PagedIterable<SynonymMap> synonymMaps = searchIndexClient.listSynonymMaps();
     for (SynonymMap synonymMap: synonymMaps) {
         System.out.printf("The synonymMap name is %s. The etag of synonymMap is %s.%n", synonymMap.getName(),
             synonymMap.getETag());
     }
    ```
  syntax:
    content: public PagedIterable<SynonymMap> listSynonymMaps()
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.search.documents.indexes.models.SynonymMap>
      description: the list of synonym maps.
- uid: com.azure.search.documents.indexes.SearchIndexClient.listSynonymMaps(com.azure.core.util.Context)
  id: listSynonymMaps(com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.indexes.SearchIndexClient
  langs:
  - java
  name: listSynonymMaps(Context context)
  nameWithType: SearchIndexClient.listSynonymMaps(Context context)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.listSynonymMaps(Context context)
  overload: com.azure.search.documents.indexes.SearchIndexClient.listSynonymMaps*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Lists all synonym maps available for an Azure Cognitive Search service.


    **Code Sample**


    List all synonym maps.


    ```java

    PagedIterable<SynonymMap> synonymMaps = searchIndexClient.listSynonymMaps(new Context(key1, value1));
     System.out.println("The status code of the response is"
         + synonymMaps.iterableByPage().iterator().next().getStatusCode());
     for (SynonymMap index: synonymMaps) {
         System.out.printf("The index name is %s. The etag of index is %s.%n", index.getName(), index.getETag());
     }
    ```
  syntax:
    content: public PagedIterable<SynonymMap> listSynonymMaps(Context context)
    parameters:
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the HTTP pipeline during the service call
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.search.documents.indexes.models.SynonymMap>
      description: the list of synonym map names.
references:
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient
  name: SearchIndexAsyncClient
  nameWithType: SearchIndexAsyncClient
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient
- uid: com.azure.search.documents.indexes.SearchIndexClient.SearchIndexClient*
  name: SearchIndexClient
  nameWithType: SearchIndexClient.SearchIndexClient
  fullName: com.azure.search.documents.indexes.SearchIndexClient.SearchIndexClient
  package: com.azure.search.documents.indexes
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.search.documents.indexes.SearchIndexClient.getEndpoint*
  name: getEndpoint
  nameWithType: SearchIndexClient.getEndpoint
  fullName: com.azure.search.documents.indexes.SearchIndexClient.getEndpoint
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.SearchClient
  name: SearchClient
  nameWithType: SearchClient
  fullName: com.azure.search.documents.SearchClient
- uid: com.azure.search.documents.indexes.SearchIndexClient.getSearchClient*
  name: getSearchClient
  nameWithType: SearchIndexClient.getSearchClient
  fullName: com.azure.search.documents.indexes.SearchIndexClient.getSearchClient
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.models.SearchIndex
  name: SearchIndex
  nameWithType: SearchIndex
  fullName: com.azure.search.documents.indexes.models.SearchIndex
- uid: com.azure.search.documents.indexes.SearchIndexClient.createIndex*
  name: createIndex
  nameWithType: SearchIndexClient.createIndex
  fullName: com.azure.search.documents.indexes.SearchIndexClient.createIndex
  package: com.azure.search.documents.indexes
- uid: com.azure.core.util.Context
  spec.java:
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
- uid: com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndex>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchIndex
    name: SearchIndex
    fullName: com.azure.search.documents.indexes.models.SearchIndex
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexClient.createIndexWithResponse*
  name: createIndexWithResponse
  nameWithType: SearchIndexClient.createIndexWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexClient.createIndexWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexClient.getIndex*
  name: getIndex
  nameWithType: SearchIndexClient.getIndex
  fullName: com.azure.search.documents.indexes.SearchIndexClient.getIndex
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexClient.getIndexWithResponse*
  name: getIndexWithResponse
  nameWithType: SearchIndexClient.getIndexWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexClient.getIndexWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.models.SearchIndexStatistics
  name: SearchIndexStatistics
  nameWithType: SearchIndexStatistics
  fullName: com.azure.search.documents.indexes.models.SearchIndexStatistics
- uid: com.azure.search.documents.indexes.SearchIndexClient.getIndexStatistics*
  name: getIndexStatistics
  nameWithType: SearchIndexClient.getIndexStatistics
  fullName: com.azure.search.documents.indexes.SearchIndexClient.getIndexStatistics
  package: com.azure.search.documents.indexes
- uid: com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndexStatistics>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchIndexStatistics
    name: SearchIndexStatistics
    fullName: com.azure.search.documents.indexes.models.SearchIndexStatistics
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexClient.getIndexStatisticsWithResponse*
  name: getIndexStatisticsWithResponse
  nameWithType: SearchIndexClient.getIndexStatisticsWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexClient.getIndexStatisticsWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.core.http.rest.PagedIterable<com.azure.search.documents.indexes.models.SearchIndex>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchIndex
    name: SearchIndex
    fullName: com.azure.search.documents.indexes.models.SearchIndex
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexClient.listIndexes*
  name: listIndexes
  nameWithType: SearchIndexClient.listIndexes
  fullName: com.azure.search.documents.indexes.SearchIndexClient.listIndexes
  package: com.azure.search.documents.indexes
- uid: com.azure.core.http.rest.PagedIterable<java.lang.String>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexClient.listIndexNames*
  name: listIndexNames
  nameWithType: SearchIndexClient.listIndexNames
  fullName: com.azure.search.documents.indexes.SearchIndexClient.listIndexNames
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateIndex*
  name: createOrUpdateIndex
  nameWithType: SearchIndexClient.createOrUpdateIndex
  fullName: com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateIndex
  package: com.azure.search.documents.indexes
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateIndexWithResponse*
  name: createOrUpdateIndexWithResponse
  nameWithType: SearchIndexClient.createOrUpdateIndexWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateIndexWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexClient.deleteIndex*
  name: deleteIndex
  nameWithType: SearchIndexClient.deleteIndex
  fullName: com.azure.search.documents.indexes.SearchIndexClient.deleteIndex
  package: com.azure.search.documents.indexes
- uid: com.azure.core.http.rest.Response<java.lang.Void>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexClient.deleteIndexWithResponse*
  name: deleteIndexWithResponse
  nameWithType: SearchIndexClient.deleteIndexWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexClient.deleteIndexWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions
  name: AnalyzeTextOptions
  nameWithType: AnalyzeTextOptions
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions
- uid: com.azure.core.http.rest.PagedIterable<com.azure.search.documents.indexes.models.AnalyzedTokenInfo>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.AnalyzedTokenInfo
    name: AnalyzedTokenInfo
    fullName: com.azure.search.documents.indexes.models.AnalyzedTokenInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexClient.analyzeText*
  name: analyzeText
  nameWithType: SearchIndexClient.analyzeText
  fullName: com.azure.search.documents.indexes.SearchIndexClient.analyzeText
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.models.SynonymMap
  name: SynonymMap
  nameWithType: SynonymMap
  fullName: com.azure.search.documents.indexes.models.SynonymMap
- uid: com.azure.search.documents.indexes.SearchIndexClient.createSynonymMap*
  name: createSynonymMap
  nameWithType: SearchIndexClient.createSynonymMap
  fullName: com.azure.search.documents.indexes.SearchIndexClient.createSynonymMap
  package: com.azure.search.documents.indexes
- uid: com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SynonymMap>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SynonymMap
    name: SynonymMap
    fullName: com.azure.search.documents.indexes.models.SynonymMap
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexClient.createSynonymMapWithResponse*
  name: createSynonymMapWithResponse
  nameWithType: SearchIndexClient.createSynonymMapWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexClient.createSynonymMapWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexClient.getSynonymMap*
  name: getSynonymMap
  nameWithType: SearchIndexClient.getSynonymMap
  fullName: com.azure.search.documents.indexes.SearchIndexClient.getSynonymMap
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexClient.getSynonymMapWithResponse*
  name: getSynonymMapWithResponse
  nameWithType: SearchIndexClient.getSynonymMapWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexClient.getSynonymMapWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.core.http.rest.PagedIterable<com.azure.search.documents.indexes.models.SynonymMap>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SynonymMap
    name: SynonymMap
    fullName: com.azure.search.documents.indexes.models.SynonymMap
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexClient.listSynonymMaps*
  name: listSynonymMaps
  nameWithType: SearchIndexClient.listSynonymMaps
  fullName: com.azure.search.documents.indexes.SearchIndexClient.listSynonymMaps
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexClient.listSynonymMapNames*
  name: listSynonymMapNames
  nameWithType: SearchIndexClient.listSynonymMapNames
  fullName: com.azure.search.documents.indexes.SearchIndexClient.listSynonymMapNames
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateSynonymMap*
  name: createOrUpdateSynonymMap
  nameWithType: SearchIndexClient.createOrUpdateSynonymMap
  fullName: com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateSynonymMap
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateSynonymMapWithResponse*
  name: createOrUpdateSynonymMapWithResponse
  nameWithType: SearchIndexClient.createOrUpdateSynonymMapWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateSynonymMapWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexClient.deleteSynonymMap*
  name: deleteSynonymMap
  nameWithType: SearchIndexClient.deleteSynonymMap
  fullName: com.azure.search.documents.indexes.SearchIndexClient.deleteSynonymMap
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexClient.deleteSynonymMapWithResponse*
  name: deleteSynonymMapWithResponse
  nameWithType: SearchIndexClient.deleteSynonymMapWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexClient.deleteSynonymMapWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.models.SearchServiceStatistics
  name: SearchServiceStatistics
  nameWithType: SearchServiceStatistics
  fullName: com.azure.search.documents.indexes.models.SearchServiceStatistics
- uid: com.azure.search.documents.indexes.SearchIndexClient.getServiceStatistics*
  name: getServiceStatistics
  nameWithType: SearchIndexClient.getServiceStatistics
  fullName: com.azure.search.documents.indexes.SearchIndexClient.getServiceStatistics
  package: com.azure.search.documents.indexes
- uid: com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchServiceStatistics>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchServiceStatistics
    name: SearchServiceStatistics
    fullName: com.azure.search.documents.indexes.models.SearchServiceStatistics
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexClient.getServiceStatisticsWithResponse*
  name: getServiceStatisticsWithResponse
  nameWithType: SearchIndexClient.getServiceStatisticsWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexClient.getServiceStatisticsWithResponse
  package: com.azure.search.documents.indexes
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.core.http.rest.PagedIterable
  name: PagedIterable
  nameWithType: PagedIterable
  fullName: com.azure.core.http.rest.PagedIterable
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.search.documents.indexes.models.AnalyzedTokenInfo
  name: AnalyzedTokenInfo
  nameWithType: AnalyzedTokenInfo
  fullName: com.azure.search.documents.indexes.models.AnalyzedTokenInfo
