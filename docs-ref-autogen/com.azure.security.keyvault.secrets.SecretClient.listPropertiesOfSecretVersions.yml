### YamlMime:JavaMember
uid: "com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions*"
fullName: "com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions"
name: "listPropertiesOfSecretVersions"
nameWithType: "SecretClient.listPropertiesOfSecretVersions"
members:
- uid: "com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions(java.lang.String)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions(String name)"
  name: "listPropertiesOfSecretVersions(String name)"
  nameWithType: "SecretClient.listPropertiesOfSecretVersions(String name)"
  summary: "Lists all versions of the specified secret. Each <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> returned only has its identifier and attributes populated. The secret values and secret versions are not listed in the response. This operation requires the `secrets/list` permission.\n\n**Code sample**\n\nThe sample below fetches all versions of the given secret. For each secret version retrieved, makes a call to <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getSecret(String, String)\"></xref> to get the version's value, and then prints it out.\n\n```java\nfor (SecretProperties secret : secretClient.listPropertiesOfSecretVersions(\"secretName\")) {\n     KeyVaultSecret secretWithValue = secretClient.getSecret(secret.getName(), secret.getVersion());\n     System.out.printf(\"Received secret's version with name %s and value %s\",\n         secretWithValue.getName(), secretWithValue.getValue());\n }\n```"
  parameters:
  - description: "The name of the secret."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<SecretProperties> listPropertiesOfSecretVersions(String name)"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretProperties\"></xref> of all the versions of the specified secret in the vault.\n     List is empty if secret with <code>name</code> does not exist in key vault"
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.secrets.models.SecretProperties?alt=com.azure.security.keyvault.secrets.models.SecretProperties&text=SecretProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions(String name, Context context)"
  name: "listPropertiesOfSecretVersions(String name, Context context)"
  nameWithType: "SecretClient.listPropertiesOfSecretVersions(String name, Context context)"
  summary: "Lists all versions of the specified secret. Each <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> returned only has its identifier and attributes populated. The secret values and secret versions are not listed in the response. This operation requires the `secrets/list` permission.\n\n**Code sample**\n\nThe sample below fetches all versions of the given secret. For each secret version retrieved, makes a call to <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getSecret(String, String)\"></xref> to get the version's value, and then prints it out.\n\n```java\nfor (SecretProperties secret : secretClient\n     .listPropertiesOfSecretVersions(\"secretName\", new Context(key1, value2))) {\n     KeyVaultSecret secretWithValue = secretClient.getSecret(secret.getName(), secret.getVersion());\n     System.out.printf(\"Received secret's version with name %s and value %s\",\n         secretWithValue.getName(), secretWithValue.getValue());\n }\n```\n\n**Iterate over secret versions by page**\n\nThe sample below iterates over each <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> by each page and calls <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretClient#getSecret(String, String)\"></xref>. This will return the <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> with the corresponding version's value.\n\n```java\nsecretClient.listPropertiesOfSecretVersions(\"secretName\", new Context(key1, value2))\n             .iterableByPage().forEach(resp -> {\n                 System.out.printf(\"Got response headers . Url: %s, Status code: %d %n\",\n                     resp.getRequest().getUrl(), resp.getStatusCode());\n                 resp.getItems().forEach(value -> {\n                     KeyVaultSecret secretWithValue = secretClient.getSecret(value.getName(), value.getVersion());\n                     System.out.printf(\"Received secret's version with name %s and value %s\",\n                         secretWithValue.getName(), secretWithValue.getValue());\n                 });\n             });\n```"
  parameters:
  - description: "The name of the secret."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<SecretProperties> listPropertiesOfSecretVersions(String name, Context context)"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretProperties\"></xref> of all the versions of the specified secret in the vault.\n     List is empty if secret with <code>name</code> does not exist in key vault"
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.secrets.models.SecretProperties?alt=com.azure.security.keyvault.secrets.models.SecretProperties&text=SecretProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.security.keyvault.secrets"
artifact: com.azure:azure-security-keyvault-secrets:4.2.4
