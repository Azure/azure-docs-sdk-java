items:
- uid: system.fabric._stateless_service_instance
  id: _stateless_service_instance
  parent: system.fabric
  children:
  - system.fabric._stateless_service_instance.abort()
  - system.fabric._stateless_service_instance.closeAsync(CancellationToken)
  - system.fabric._stateless_service_instance.initialize(StatelessServiceInitializationParameters)
  - system.fabric._stateless_service_instance.openAsync(StatelessServicePartition,CancellationToken)
  href: system.fabric._stateless_service_instance.yml
  langs:
  - java
  name: StatelessServiceInstance
  nameWithType: StatelessServiceInstance
  fullName: system.fabric.StatelessServiceInstance
  type: Interface
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatelessServiceInstance.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/StatelessServiceInstance.java
    startLine: 12
  package: system.fabric
  summary: <p>Stateless services are those which have no state that requires management by Service Fabric. Stateless service types must implement this interface. </p>
  syntax:
    content: public interface StatelessServiceInstance
- uid: system.fabric._stateless_service_instance.abort()
  id: abort()
  parent: system.fabric._stateless_service_instance
  href: system.fabric._stateless_service_instance.yml
  langs:
  - java
  name: abort()
  nameWithType: StatelessServiceInstance.abort()
  fullName: void system.fabric.StatelessServiceInstance.abort()
  overload: system.fabric._stateless_service_instance.abort*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/StatelessServiceInstance.java
    startLine: 61
  package: system.fabric
  summary: >-
    <p>Terminates this instance ungracefully with this synchronous method call. </p>

    <p>

      <bold>Remarks:</bold>Examples of ungraceful termination are lease loss and, in response to the service, the use of <xref href="system.fabric._service_partition.reportFault(FaultType)" data-throw-if-not-resolved="false"></xref> to report a <ref refid="" kindref="compound">system.fabric.FaultType#Permanent</ref> fault. When the service instance receives this method, it should immediately release and clean up all references and return. </p>
  syntax:
    content: public void abort()
- uid: system.fabric._stateless_service_instance.closeAsync(CancellationToken)
  id: closeAsync(CancellationToken)
  parent: system.fabric._stateless_service_instance
  href: system.fabric._stateless_service_instance.yml
  langs:
  - java
  name: closeAsync(CancellationToken cancellationToken)
  nameWithType: StatelessServiceInstance.closeAsync(CancellationToken cancellationToken)
  fullName: CompletableFuture<?> system.fabric.StatelessServiceInstance.closeAsync(CancellationToken cancellationToken)
  overload: system.fabric._stateless_service_instance.closeAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/StatelessServiceInstance.java
    startLine: 50
  package: system.fabric
  summary: >-
    <p>Closes this service instance gracefully when the service instance is being shut down.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<?> closeAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref href="system.fabric._cancellation_token" data-throw-if-not-resolved="false"></xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>Returns <ref refid="" kindref="compound">CompletableFuture</ref>. </p>
- uid: system.fabric._stateless_service_instance.initialize(StatelessServiceInitializationParameters)
  id: initialize(StatelessServiceInitializationParameters)
  parent: system.fabric._stateless_service_instance
  href: system.fabric._stateless_service_instance.yml
  langs:
  - java
  name: initialize(StatelessServiceInitializationParameters initializationParameters)
  nameWithType: StatelessServiceInstance.initialize(StatelessServiceInitializationParameters initializationParameters)
  fullName: void system.fabric.StatelessServiceInstance.initialize(StatelessServiceInitializationParameters initializationParameters)
  overload: system.fabric._stateless_service_instance.initialize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/StatelessServiceInstance.java
    startLine: 19
  package: system.fabric
  summary: >-
    <p>Initializes a newly created service instance.</p>

    <p></p>
  syntax:
    content: public void initialize(StatelessServiceInitializationParameters initializationParameters)
    parameters:
    - id: initializationParameters
      type: system.fabric._stateless_service_initialization_parameters
      description: <p>The <xref href="system.fabric._stateless_service_initialization_parameters" data-throw-if-not-resolved="false"></xref> for this service. </p>
- uid: system.fabric._stateless_service_instance.openAsync(StatelessServicePartition,CancellationToken)
  id: openAsync(StatelessServicePartition,CancellationToken)
  parent: system.fabric._stateless_service_instance
  href: system.fabric._stateless_service_instance.yml
  langs:
  - java
  name: openAsync(StatelessServicePartition partition, CancellationToken cancellationToken)
  nameWithType: StatelessServiceInstance.openAsync(StatelessServicePartition partition, CancellationToken cancellationToken)
  fullName: CompletableFuture<String> system.fabric.StatelessServiceInstance.openAsync(StatelessServicePartition partition, CancellationToken cancellationToken)
  overload: system.fabric._stateless_service_instance.openAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/StatelessServiceInstance.java
    startLine: 40
  package: system.fabric
  summary: >-
    <p>Opens an initialized service instance so that it can be contacted by clients.</p>

    <p>

      <bold>Remarks:</bold>Opening an instance stateless service indicates that the service is now resolvable and discoverable by service clients. The string that is returned is the address of this service instance. The address is associated with the service name via Service Fabric naming and returned to clients that resolve the service via <ref refid="" kindref="compound">system.fabric.ServiceManagementClient#resolveServicePartitionAsync(java.net.URI)</ref></p>
  syntax:
    content: public CompletableFuture<String> openAsync(StatelessServicePartition partition, CancellationToken cancellationToken)
    parameters:
    - id: partition
      type: system.fabric._stateless_service_partition
      description: <p>The <xref href="system.fabric._stateless_service_partition" data-throw-if-not-resolved="false"></xref> that this instance is associated with </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref href="system.fabric._cancellation_token" data-throw-if-not-resolved="false"></xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 06be942d
      description: <p>Returns <ref refid="" kindref="compound">CompletableFuture</ref> of type <ref refid="" kindref="compound">java.lang.String</ref>. </p>
references:
- uid: system.fabric._stateless_service_instance.initialize*
  name: initialize
  nameWithType: StatelessServiceInstance.initialize
  fullName: void system.fabric.StatelessServiceInstance.initialize
  package: system.fabric
- uid: 06be942d
  spec.java:
  - name: CompletableFuture<String>
    fullName: CompletableFuture<String>
- uid: system.fabric._stateless_service_instance.openAsync*
  name: openAsync
  nameWithType: StatelessServiceInstance.openAsync
  fullName: CompletableFuture<String> system.fabric.StatelessServiceInstance.openAsync
  package: system.fabric
- uid: 16409f84
  spec.java:
  - name: CompletableFuture<?>
    fullName: CompletableFuture<?>
- uid: system.fabric._stateless_service_instance.closeAsync*
  name: closeAsync
  nameWithType: StatelessServiceInstance.closeAsync
  fullName: CompletableFuture<?> system.fabric.StatelessServiceInstance.closeAsync
  package: system.fabric
- uid: system.fabric._stateless_service_instance.abort*
  name: abort
  nameWithType: StatelessServiceInstance.abort
  fullName: void system.fabric.StatelessServiceInstance.abort
  package: system.fabric
- uid: microsoft.servicefabric.services.runtime._stateless_service_instance_adapter
- uid: system.fabric._stateless_service_initialization_parameters
  parent: system.fabric
  href: system.fabric._stateless_service_initialization_parameters.yml
  name: StatelessServiceInitializationParameters
  nameWithType: StatelessServiceInitializationParameters
  fullName: system.fabric.StatelessServiceInitializationParameters
  type: Class
  summary: <p>Defines service initialization parameters for a stateless service. </p>
  syntax:
    content: public class StatelessServiceInitializationParameters extends ServiceInitializationParameters
- uid: system.fabric._stateless_service_partition
  parent: system.fabric
  href: system.fabric._stateless_service_partition.yml
  name: StatelessServicePartition
  nameWithType: StatelessServicePartition
  fullName: system.fabric.StatelessServicePartition
  type: Interface
  summary: >-
    <p>Represents a partition that is associated with a stateless service instance. </p>

    <p>

      <bold>Remarks:</bold>Provided to a stateless service as a parameter to the <xref href="system.fabric._service_partition" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public interface StatelessServicePartition
- uid: system.fabric._cancellation_token
  parent: system.fabric
  href: system.fabric._cancellation_token.yml
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: system.fabric.CancellationToken
  type: Class
  summary: <p>A <xref href="system.fabric._cancellation_token" data-throw-if-not-resolved="false"></xref> is used to propagate notification that operations should be canceled. You create a cancellation token by instantiating a <xref href="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false"></xref> object, which manages cancellation tokens retrieved from its <xref href="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false"></xref> method. You then pass the cancellation token to any number of operations that should receive notice of cancellation. The token cannot be used to initiate cancellation. When the owning object calls <xref href="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false"></xref>, the cancelled property on the cancellation token is set to true. The objects that receive the notification can respond in whatever manner is appropriate. </p>
  syntax:
    content: public class CancellationToken
- uid: system.fabric._service_partition.reportFault(FaultType)
  parent: system.fabric._service_partition
  href: system.fabric._service_partition.yml
  name: reportFault(FaultType faultType)
  nameWithType: ServicePartition.reportFault(FaultType faultType)
  fullName: void system.fabric.ServicePartition.reportFault(FaultType faultType)
  type: Method
  summary: >-
    <p>Reports the load for a set of load balancing metrics. The load can be reported at any time via the <ref refid="" kindref="compound">java.util.Collection</ref> of <xref href="system.fabric._load_metric" data-throw-if-not-resolved="false"></xref> method and provides one or more properties of the <xref href="system.fabric._load_metric" data-throw-if-not-resolved="false"></xref> method.</p>

    <p>

      <bold>Remarks:</bold>A fault is typically reported when the service code encounters some issue from which it cannot recover. </p>
  syntax:
    content: public void reportFault(FaultType faultType)
    parameters:
    - id: faultType
      type: system.fabric._fault_type
      description: <p>The <xref href="system.fabric._load_metric" data-throw-if-not-resolved="false"></xref> that the service has encountered. </p>
