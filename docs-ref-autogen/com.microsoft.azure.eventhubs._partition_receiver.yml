### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.eventhubs._partition_receiver
  id: _partition_receiver
  parent: com.microsoft.azure.eventhubs
  children:
  - com.microsoft.azure.eventhubs._partition_receiver.close()
  - com.microsoft.azure.eventhubs._partition_receiver.closeSync()
  - com.microsoft.azure.eventhubs._partition_receiver.DEFAULT_PREFETCH_COUNT
  - com.microsoft.azure.eventhubs._partition_receiver.getEpoch()
  - com.microsoft.azure.eventhubs._partition_receiver.getPartitionId()
  - com.microsoft.azure.eventhubs._partition_receiver.getPrefetchCount()
  - com.microsoft.azure.eventhubs._partition_receiver.getReceiveTimeout()
  - com.microsoft.azure.eventhubs._partition_receiver.getRuntimeInformation()
  - com.microsoft.azure.eventhubs._partition_receiver.MINIMUM_PREFETCH_COUNT
  - com.microsoft.azure.eventhubs._partition_receiver.NULL_EPOCH
  - com.microsoft.azure.eventhubs._partition_receiver.receive(final int)
  - com.microsoft.azure.eventhubs._partition_receiver.receiveSync(final int)
  - com.microsoft.azure.eventhubs._partition_receiver.setPrefetchCount(final int)
  - com.microsoft.azure.eventhubs._partition_receiver.setReceiveHandler(final PartitionReceiveHandler)
  - com.microsoft.azure.eventhubs._partition_receiver.setReceiveHandler(final PartitionReceiveHandler,final boolean)
  - com.microsoft.azure.eventhubs._partition_receiver.setReceiveTimeout(Duration)
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  langs:
  - java
  name: PartitionReceiver
  nameWithType: PartitionReceiver
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver
  type: Interface
  source:
    remote: &o0
      path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-java
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 24
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>This is a logical representation of receiving from a EventHub partition. </p>

    <p>A <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> is tied to a ConsumerGroup + EventHub Partition combination. <itemizedlist><listitem><p>If an epoch based <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> (i.e., <xref uid="com.microsoft.azure.eventhubs._partition_receiver.getEpoch()" data-throw-if-not-resolved="false">PartitionReceiver.getEpoch</xref> != 0) is created, EventHubs service will guarantee only 1 active receiver exists per ConsumerGroup + Partition combo. This is the recommended approach to create a <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref>. </p></listitem><listitem><p>Multiple receivers per ConsumerGroup + Partition combo can be created using non-epoch receivers. </p></listitem></itemizedlist></p>

    <p></p>
  syntax: &o2
    content: public interface PartitionReceiver
  see:
  - type: com.microsoft.azure.eventhubs._event_hub_client.createReceiver(final String,final String,final EventPosition)
    description: EventHubClient::createReceiver
  - type: com.microsoft.azure.eventhubs._event_hub_client.createEpochReceiver(final String,final String,final EventPosition,final long)
    description: EventHubClient::createEpochReceiver
- uid: com.microsoft.azure.eventhubs._partition_receiver.close()
  id: close()
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  langs:
  - java
  name: close()
  nameWithType: PartitionReceiver.close()
  fullName: CompletableFuture<Void> com.microsoft.azure.eventhubs.PartitionReceiver.close()
  overload: com.microsoft.azure.eventhubs._partition_receiver.close*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 144
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public CompletableFuture<Void> close()
    return:
      type: db03ee24
- uid: com.microsoft.azure.eventhubs._partition_receiver.closeSync()
  id: closeSync()
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  langs:
  - java
  name: closeSync()
  nameWithType: PartitionReceiver.closeSync()
  fullName: void com.microsoft.azure.eventhubs.PartitionReceiver.closeSync()
  overload: com.microsoft.azure.eventhubs._partition_receiver.closeSync*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 146
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public void closeSync()
- uid: com.microsoft.azure.eventhubs._partition_receiver.DEFAULT_PREFETCH_COUNT
  id: DEFAULT_PREFETCH_COUNT
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  langs:
  - java
  name: DEFAULT_PREFETCH_COUNT
  nameWithType: PartitionReceiver.DEFAULT_PREFETCH_COUNT
  fullName: int com.microsoft.azure.eventhubs.PartitionReceiver.DEFAULT_PREFETCH_COUNT
  type: Field
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 27
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public int DEFAULT_PREFETCH_COUNT= 999
    return:
      type: f75371fa
- uid: com.microsoft.azure.eventhubs._partition_receiver.getEpoch()
  id: getEpoch()
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  langs:
  - java
  name: getEpoch()
  nameWithType: PartitionReceiver.getEpoch()
  fullName: long com.microsoft.azure.eventhubs.PartitionReceiver.getEpoch()
  overload: com.microsoft.azure.eventhubs._partition_receiver.getEpoch*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 66
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Get the epoch value that this receiver is currently using for partition ownership. </p>

    <p>A value of 0 means this receiver is not an epoch-based receiver.</p>

    <p></p>
  syntax: &o4
    content: public long getEpoch()
    return:
      type: 0364520f
      description: <p>the epoch value that this receiver is currently using for partition ownership. </p>
- uid: com.microsoft.azure.eventhubs._partition_receiver.getPartitionId()
  id: getPartitionId()
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  langs:
  - java
  name: getPartitionId()
  nameWithType: PartitionReceiver.getPartitionId()
  fullName: String com.microsoft.azure.eventhubs.PartitionReceiver.getPartitionId()
  overload: com.microsoft.azure.eventhubs._partition_receiver.getPartitionId*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 36
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Get EventHubs partition identifier.</p>

    <p></p>
  syntax:
    content: public String getPartitionId()
    return:
      type: "26831127"
      description: <p>The identifier representing the partition from which this receiver is fetching data </p>
- uid: com.microsoft.azure.eventhubs._partition_receiver.getPrefetchCount()
  id: getPrefetchCount()
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  langs:
  - java
  name: getPrefetchCount()
  nameWithType: PartitionReceiver.getPrefetchCount()
  fullName: int com.microsoft.azure.eventhubs.PartitionReceiver.getPrefetchCount()
  overload: com.microsoft.azure.eventhubs._partition_receiver.getPrefetchCount*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 44
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Get Prefetch Count configured on the Receiver.</p>

    <p></p>
  syntax:
    content: public int getPrefetchCount()
    return:
      type: f75371fa
      description: <p>the upper limit of events this receiver will actively receive regardless of whether a receive operation is pending. </p>
  see:
  - type: com.microsoft.azure.eventhubs._partition_receiver.setPrefetchCount(final int)
    description: setPrefetchCount
- uid: com.microsoft.azure.eventhubs._partition_receiver.getReceiveTimeout()
  id: getReceiveTimeout()
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  langs:
  - java
  name: getReceiveTimeout()
  nameWithType: PartitionReceiver.getReceiveTimeout()
  fullName: Duration com.microsoft.azure.eventhubs.PartitionReceiver.getReceiveTimeout()
  overload: com.microsoft.azure.eventhubs._partition_receiver.getReceiveTimeout*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 46
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public Duration getReceiveTimeout()
    return:
      type: e02a2de0
- uid: com.microsoft.azure.eventhubs._partition_receiver.getRuntimeInformation()
  id: getRuntimeInformation()
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  langs:
  - java
  name: getRuntimeInformation()
  nameWithType: PartitionReceiver.getRuntimeInformation()
  fullName: ReceiverRuntimeInformation com.microsoft.azure.eventhubs.PartitionReceiver.getRuntimeInformation()
  overload: com.microsoft.azure.eventhubs._partition_receiver.getRuntimeInformation*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 75
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Gets the temporal <xref uid="com.microsoft.azure.eventhubs._receiver_runtime_information" data-throw-if-not-resolved="false">ReceiverRuntimeInformation</xref> for this EventHub partition. In general, this information is a representation of, where this <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref>'s end of stream is, at the time <xref uid="com.microsoft.azure.eventhubs._receiver_runtime_information.getRetrievalTime()" data-throw-if-not-resolved="false">ReceiverRuntimeInformation#getRetrievalTime()</xref>.</p>

    <p></p>
  syntax:
    content: public ReceiverRuntimeInformation getRuntimeInformation()
    return:
      type: com.microsoft.azure.eventhubs._receiver_runtime_information
      description: <p>receiver runtime information </p>
- uid: com.microsoft.azure.eventhubs._partition_receiver.MINIMUM_PREFETCH_COUNT
  id: MINIMUM_PREFETCH_COUNT
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  langs:
  - java
  name: MINIMUM_PREFETCH_COUNT
  nameWithType: PartitionReceiver.MINIMUM_PREFETCH_COUNT
  fullName: int com.microsoft.azure.eventhubs.PartitionReceiver.MINIMUM_PREFETCH_COUNT
  type: Field
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 26
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public int MINIMUM_PREFETCH_COUNT= 10
    return:
      type: f75371fa
- uid: com.microsoft.azure.eventhubs._partition_receiver.NULL_EPOCH
  id: NULL_EPOCH
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  langs:
  - java
  name: NULL_EPOCH
  nameWithType: PartitionReceiver.NULL_EPOCH
  fullName: long com.microsoft.azure.eventhubs.PartitionReceiver.NULL_EPOCH
  type: Field
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 29
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public long NULL_EPOCH= 0
    return:
      type: 0364520f
- uid: com.microsoft.azure.eventhubs._partition_receiver.receive(final int)
  id: receive(final int)
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  langs:
  - java
  name: receive(final int maxEventCount)
  nameWithType: PartitionReceiver.receive(final int maxEventCount)
  fullName: CompletableFuture<Iterable<EventData>> com.microsoft.azure.eventhubs.PartitionReceiver.receive(final int maxEventCount)
  overload: com.microsoft.azure.eventhubs._partition_receiver.receive*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 121
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Receive a batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s from an EventHub partition </p>

    <p>Sample code (sample uses sync version of the api but concept are identical): <pre><xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> client = <xref uid="com.microsoft.azure.eventhubs._event_hub_client.createSync(final String,final Executor)" data-throw-if-not-resolved="false">EventHubClient.createSync</xref>("__connection__");

    <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> receiver = client.createPartitionReceiverSync("ConsumerGroup1", "1");

    Iterable{&lt;}<xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>{&gt;} receivedEvents = receiver.receiveSync();</pre></p>

    <p>

      <pre>while (true)

    {

        int batchSize = 0;

        if (receivedEvents != null)

        {

            for(EventData receivedEvent: receivedEvents)

            {

                System.out.println(String.format("Message Payload: %s", new String(receivedEvent.getBytes(), Charset.defaultCharset())));

                System.out.println(String.format("Offset: %s, SeqNo: %s, EnqueueTime: %s",

                    receivedEvent.getSystemProperties().getOffset(),

                    receivedEvent.getSystemProperties().getSequenceNumber(),

                    receivedEvent.getSystemProperties().getEnqueuedTime()));

                batchSize++;

            }

        }</pre>

    </p>

    <p>

      <pre>    System.out.println(String.format("ReceivedBatch Size: %s", batchSize));

        receivedEvents = receiver.receiveSync();

    }

    </pre>

    </p>

    <p></p>
  syntax: &o3
    content: public CompletableFuture<Iterable<EventData>> receive(final int maxEventCount)
    parameters:
    - id: maxEventCount
      type: cd225469
      description: <p>maximum number of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s that this call should return </p>
    return:
      type: 5ae8a14ccom.microsoft.azure.eventhubs._event_datae7daa122
      description: <p>A completableFuture that will yield a batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s from the partition on which this receiver is created. Returns 'null' if no <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> is present. </p>
- uid: com.microsoft.azure.eventhubs._partition_receiver.receiveSync(final int)
  id: receiveSync(final int)
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  langs:
  - java
  name: receiveSync(final int maxEventCount)
  nameWithType: PartitionReceiver.receiveSync(final int maxEventCount)
  fullName: default Iterable<EventData> com.microsoft.azure.eventhubs.PartitionReceiver.receiveSync(final int maxEventCount)
  overload: com.microsoft.azure.eventhubs._partition_receiver.receiveSync*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 84
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs._partition_receiver.receive(final int)" data-throw-if-not-resolved="false">receive</xref>.</p>

    <p></p>
  syntax:
    content: public default Iterable<EventData> receiveSync(final int maxEventCount)
    parameters:
    - id: maxEventCount
      type: cd225469
      description: <p>maximum number of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s that this call should return </p>
    return:
      type: 6ed053e5com.microsoft.azure.eventhubs._event_dataa08ddfce
      description: <p>Batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s from the partition on which this receiver is created. Returns 'null' if no <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> is present. </p>
  exceptions:
  - type: com.microsoft.azure.eventhubs._event_hub_exception
    description: <p>if ServiceBus client encountered any unrecoverable/non-transient problems during <xref uid="com.microsoft.azure.eventhubs._partition_receiver.receive(final int)" data-throw-if-not-resolved="false">receive</xref></p>
- uid: com.microsoft.azure.eventhubs._partition_receiver.setPrefetchCount(final int)
  id: setPrefetchCount(final int)
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  langs:
  - java
  name: setPrefetchCount(final int prefetchCount)
  nameWithType: PartitionReceiver.setPrefetchCount(final int prefetchCount)
  fullName: void com.microsoft.azure.eventhubs.PartitionReceiver.setPrefetchCount(final int prefetchCount)
  overload: com.microsoft.azure.eventhubs._partition_receiver.setPrefetchCount*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 57
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Set the number of events that can be pre-fetched and cached at the <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref>. </p>

    <p>By default the value is 300</p>

    <p></p>
  syntax: &o1
    content: public void setPrefetchCount(final int prefetchCount)
    parameters:
    - id: prefetchCount
      type: cd225469
      description: <p>the number of events to pre-fetch. value must be between 10 and 999. Default is 300. </p>
  exceptions:
  - type: com.microsoft.azure.eventhubs._event_hub_exception
    description: <p>if setting prefetchCount encounters error </p>
- uid: com.microsoft.azure.eventhubs._partition_receiver.setReceiveHandler(final PartitionReceiveHandler)
  id: setReceiveHandler(final PartitionReceiveHandler)
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  langs:
  - java
  name: setReceiveHandler(final PartitionReceiveHandler receiveHandler)
  nameWithType: PartitionReceiver.setReceiveHandler(final PartitionReceiveHandler receiveHandler)
  fullName: CompletableFuture<Void> com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler(final PartitionReceiveHandler receiveHandler)
  overload: com.microsoft.azure.eventhubs._partition_receiver.setReceiveHandler*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 131
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Register a receive handler that will be called when an event is available. A <xref uid="com.microsoft.azure.eventhubs._partition_receive_handler" data-throw-if-not-resolved="false">PartitionReceiveHandler</xref> is a handler that allows user to specify a callback for event processing and error handling in a receive pump model.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> setReceiveHandler(final PartitionReceiveHandler receiveHandler)
    parameters:
    - id: receiveHandler
      type: 93de0ef9com.microsoft.azure.eventhubs._partition_receive_handler
      description: <p>An implementation of <xref uid="com.microsoft.azure.eventhubs._partition_receive_handler" data-throw-if-not-resolved="false">PartitionReceiveHandler</xref>. Setting this handler to <code>null</code> will stop the receive pump. </p>
    return:
      type: db03ee24
      description: <p>A completableFuture which sets receiveHandler </p>
- uid: com.microsoft.azure.eventhubs._partition_receiver.setReceiveHandler(final PartitionReceiveHandler,final boolean)
  id: setReceiveHandler(final PartitionReceiveHandler,final boolean)
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  langs:
  - java
  name: setReceiveHandler(final PartitionReceiveHandler receiveHandler, final boolean invokeWhenNoEvents)
  nameWithType: PartitionReceiver.setReceiveHandler(final PartitionReceiveHandler receiveHandler, final boolean invokeWhenNoEvents)
  fullName: CompletableFuture<Void> com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler(final PartitionReceiveHandler receiveHandler, final boolean invokeWhenNoEvents)
  overload: com.microsoft.azure.eventhubs._partition_receiver.setReceiveHandler*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 142
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Register a receive handler that will be called when an event is available. A <xref uid="com.microsoft.azure.eventhubs._partition_receive_handler" data-throw-if-not-resolved="false">PartitionReceiveHandler</xref> is a handler that allows user to specify a callback for event processing and error handling in a receive pump model.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> setReceiveHandler(final PartitionReceiveHandler receiveHandler, final boolean invokeWhenNoEvents)
    parameters:
    - id: receiveHandler
      type: 93de0ef9com.microsoft.azure.eventhubs._partition_receive_handler
      description: <p>An implementation of <xref uid="com.microsoft.azure.eventhubs._partition_receive_handler" data-throw-if-not-resolved="false">PartitionReceiveHandler</xref></p>
    - id: invokeWhenNoEvents
      type: 4dda0764
      description: <p>flag to indicate whether the <xref uid="" data-throw-if-not-resolved="false">PartitionReceiveHandler#onReceive(Iterable)</xref> should be invoked when the receive call times out </p>
    return:
      type: db03ee24
      description: <p>A completableFuture which sets receiveHandler </p>
- uid: com.microsoft.azure.eventhubs._partition_receiver.setReceiveTimeout(Duration)
  id: setReceiveTimeout(Duration)
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  langs:
  - java
  name: setReceiveTimeout(Duration value)
  nameWithType: PartitionReceiver.setReceiveTimeout(Duration value)
  fullName: void com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveTimeout(Duration value)
  overload: com.microsoft.azure.eventhubs._partition_receiver.setReceiveTimeout*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 48
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public void setReceiveTimeout(Duration value)
    parameters:
    - id: value
      type: e02a2de0
references:
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.eventhubs._partition_receiver.getPartitionId*
  name: getPartitionId
  nameWithType: PartitionReceiver.getPartitionId
  fullName: String com.microsoft.azure.eventhubs.PartitionReceiver.getPartitionId
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs._partition_receiver.getPrefetchCount*
  name: getPrefetchCount
  nameWithType: PartitionReceiver.getPrefetchCount
  fullName: int com.microsoft.azure.eventhubs.PartitionReceiver.getPrefetchCount
  package: com.microsoft.azure.eventhubs
- uid: e02a2de0
  spec.java:
  - name: Duration
    fullName: Duration
- uid: com.microsoft.azure.eventhubs._partition_receiver.getReceiveTimeout*
  name: getReceiveTimeout
  nameWithType: PartitionReceiver.getReceiveTimeout
  fullName: Duration com.microsoft.azure.eventhubs.PartitionReceiver.getReceiveTimeout
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs._partition_receiver.setReceiveTimeout*
  name: setReceiveTimeout
  nameWithType: PartitionReceiver.setReceiveTimeout
  fullName: void com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveTimeout
  package: com.microsoft.azure.eventhubs
- uid: cd225469
  spec.java:
  - name: final int
    fullName: final int
- uid: com.microsoft.azure.eventhubs._partition_receiver.setPrefetchCount*
  name: setPrefetchCount
  nameWithType: PartitionReceiver.setPrefetchCount
  fullName: void com.microsoft.azure.eventhubs.PartitionReceiver.setPrefetchCount
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs._partition_receiver.getEpoch*
  name: getEpoch
  nameWithType: PartitionReceiver.getEpoch
  fullName: long com.microsoft.azure.eventhubs.PartitionReceiver.getEpoch
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs._partition_receiver.getRuntimeInformation*
  name: getRuntimeInformation
  nameWithType: PartitionReceiver.getRuntimeInformation
  fullName: ReceiverRuntimeInformation com.microsoft.azure.eventhubs.PartitionReceiver.getRuntimeInformation
  package: com.microsoft.azure.eventhubs
- uid: 6ed053e5com.microsoft.azure.eventhubs._event_dataa08ddfce
  spec.java:
  - name: default Iterable<
    fullName: default Iterable<
  - uid: com.microsoft.azure.eventhubs._event_data
    name: EventData
    fullName: com.microsoft.azure.eventhubs.EventData
    href: com.microsoft.azure.eventhubs._event_data.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs._partition_receiver.receiveSync*
  name: receiveSync
  nameWithType: PartitionReceiver.receiveSync
  fullName: default Iterable<EventData> com.microsoft.azure.eventhubs.PartitionReceiver.receiveSync
  package: com.microsoft.azure.eventhubs
- uid: 5ae8a14ccom.microsoft.azure.eventhubs._event_datae7daa122
  spec.java:
  - name: CompletableFuture<Iterable<
    fullName: CompletableFuture<Iterable<
  - uid: com.microsoft.azure.eventhubs._event_data
    name: EventData
    fullName: com.microsoft.azure.eventhubs.EventData
    href: com.microsoft.azure.eventhubs._event_data.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.eventhubs._partition_receiver.receive*
  name: receive
  nameWithType: PartitionReceiver.receive
  fullName: CompletableFuture<Iterable<EventData>> com.microsoft.azure.eventhubs.PartitionReceiver.receive
  package: com.microsoft.azure.eventhubs
- uid: 93de0ef9com.microsoft.azure.eventhubs._partition_receive_handler
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.eventhubs._partition_receive_handler
    name: PartitionReceiveHandler
    fullName: com.microsoft.azure.eventhubs.PartitionReceiveHandler
    href: com.microsoft.azure.eventhubs._partition_receive_handler.yml
- uid: db03ee24
  spec.java:
  - name: CompletableFuture<Void>
    fullName: CompletableFuture<Void>
- uid: com.microsoft.azure.eventhubs._partition_receiver.setReceiveHandler*
  name: setReceiveHandler
  nameWithType: PartitionReceiver.setReceiveHandler
  fullName: CompletableFuture<Void> com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler
  package: com.microsoft.azure.eventhubs
- uid: 4dda0764
  spec.java:
  - name: final boolean
    fullName: final boolean
- uid: com.microsoft.azure.eventhubs._partition_receiver.close*
  name: close
  nameWithType: PartitionReceiver.close
  fullName: CompletableFuture<Void> com.microsoft.azure.eventhubs.PartitionReceiver.close
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs._partition_receiver.closeSync*
  name: closeSync
  nameWithType: PartitionReceiver.closeSync
  fullName: void com.microsoft.azure.eventhubs.PartitionReceiver.closeSync
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.impl._partition_receiver_impl
- uid: com.microsoft.azure.eventhubs._partition_receiver.setPrefetchCount(final int)
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  name: setPrefetchCount(final int prefetchCount)
  nameWithType: PartitionReceiver.setPrefetchCount(final int prefetchCount)
  fullName: void com.microsoft.azure.eventhubs.PartitionReceiver.setPrefetchCount(final int prefetchCount)
  type: Method
  summary: >-
    <p>Set the number of events that can be pre-fetched and cached at the <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref>. </p>

    <p>By default the value is 300</p>

    <p></p>
  syntax: *o1
- uid: com.microsoft.azure.eventhubs._event_hub_exception
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_hub_exception.yml
  name: EventHubException
  nameWithType: EventHubException
  fullName: com.microsoft.azure.eventhubs.EventHubException
  type: Class
  summary: <p>This is the base exception that service bus will produce for all error cases. </p>
  syntax:
    content: public class EventHubException
- uid: com.microsoft.azure.eventhubs._partition_receiver
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  name: PartitionReceiver
  nameWithType: PartitionReceiver
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver
  type: Interface
  summary: >-
    <p>This is a logical representation of receiving from a EventHub partition. </p>

    <p>A <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> is tied to a ConsumerGroup + EventHub Partition combination. <itemizedlist><listitem><p>If an epoch based <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> (i.e., <xref uid="com.microsoft.azure.eventhubs._partition_receiver.getEpoch()" data-throw-if-not-resolved="false">PartitionReceiver.getEpoch</xref> != 0) is created, EventHubs service will guarantee only 1 active receiver exists per ConsumerGroup + Partition combo. This is the recommended approach to create a <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref>. </p></listitem><listitem><p>Multiple receivers per ConsumerGroup + Partition combo can be created using non-epoch receivers. </p></listitem></itemizedlist></p>

    <p></p>
  syntax: *o2
- uid: com.microsoft.azure.eventhubs._receiver_runtime_information
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._receiver_runtime_information.yml
  name: ReceiverRuntimeInformation
  nameWithType: ReceiverRuntimeInformation
  fullName: com.microsoft.azure.eventhubs.ReceiverRuntimeInformation
  type: Class
  summary: <p>Represents the temporal end of stream information of an EventHubs Partition. </p>
  syntax:
    content: public class ReceiverRuntimeInformation
- uid: com.microsoft.azure.eventhubs._receiver_runtime_information.getRetrievalTime()
  parent: com.microsoft.azure.eventhubs._receiver_runtime_information
  href: com.microsoft.azure.eventhubs._receiver_runtime_information.yml
  name: getRetrievalTime()
  nameWithType: ReceiverRuntimeInformation.getRetrievalTime()
  fullName: Instant com.microsoft.azure.eventhubs.ReceiverRuntimeInformation.getRetrievalTime()
  type: Method
  summary: <p>The value indicating when this information was retrieved from the Event Hubs service </p>
  syntax:
    content: public Instant getRetrievalTime()
    return:
      type: 328f8254
      description: <p>retrieval time </p>
- uid: com.microsoft.azure.eventhubs._event_data
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: EventData
  nameWithType: EventData
  fullName: com.microsoft.azure.eventhubs.EventData
  type: Interface
  summary: >-
    <p>The data structure encapsulating the Event being sent-to and received-from EventHubs. Each EventHubs partition can be visualized as a Stream of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>

    <p>Serializing a received <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> with AMQP sections other than ApplicationProperties (with primitive java types) and Data section is not supported. </p>

    <p>Here's how AMQP message sections map to <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. Here's the reference used for AMQP 1.0 specification: <ulink url="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf">http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf</ulink><pre>

    i.   <xref uid="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false">getProperties()</xref> - AMQPMessage.ApplicationProperties section

    ii.  <xref uid="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false">getBytes()</xref> - if AMQPMessage.Body has Data section

    iii. <xref uid="com.microsoft.azure.eventhubs._event_data.getObject()" data-throw-if-not-resolved="false">getObject()</xref> - if AMQPMessage.Body has AMQPValue or AMQPSequence sections

    </pre> While using client libraries released by Microsoft Azure EventHubs, sections (i) and (ii) alone are sufficient. Section (iii) is used for advanced scenarios, where the sending application uses third-party AMQP library to send the message to EventHubs and the receiving application uses this client library to receive <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>
  syntax:
    content: public interface EventData
- uid: com.microsoft.azure.eventhubs._partition_receiver.receive(final int)
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  name: receive(final int maxEventCount)
  nameWithType: PartitionReceiver.receive(final int maxEventCount)
  fullName: CompletableFuture<Iterable<EventData>> com.microsoft.azure.eventhubs.PartitionReceiver.receive(final int maxEventCount)
  type: Method
  summary: >-
    <p>Receive a batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s from an EventHub partition </p>

    <p>Sample code (sample uses sync version of the api but concept are identical): <pre><xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> client = <xref uid="com.microsoft.azure.eventhubs._event_hub_client.createSync(final String,final Executor)" data-throw-if-not-resolved="false">EventHubClient.createSync</xref>("__connection__");

    <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> receiver = client.createPartitionReceiverSync("ConsumerGroup1", "1");

    Iterable{&lt;}<xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>{&gt;} receivedEvents = receiver.receiveSync();</pre></p>

    <p>

      <pre>while (true)

    {

        int batchSize = 0;

        if (receivedEvents != null)

        {

            for(EventData receivedEvent: receivedEvents)

            {

                System.out.println(String.format("Message Payload: %s", new String(receivedEvent.getBytes(), Charset.defaultCharset())));

                System.out.println(String.format("Offset: %s, SeqNo: %s, EnqueueTime: %s",

                    receivedEvent.getSystemProperties().getOffset(),

                    receivedEvent.getSystemProperties().getSequenceNumber(),

                    receivedEvent.getSystemProperties().getEnqueuedTime()));

                batchSize++;

            }

        }</pre>

    </p>

    <p>

      <pre>    System.out.println(String.format("ReceivedBatch Size: %s", batchSize));

        receivedEvents = receiver.receiveSync();

    }

    </pre>

    </p>

    <p></p>
  syntax: *o3
- uid: com.microsoft.azure.eventhubs._event_hub_client
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: EventHubClient
  nameWithType: EventHubClient
  fullName: com.microsoft.azure.eventhubs.EventHubClient
  type: Interface
  summary: >-
    <p>Anchor class - all EventHub client operations STARTS here.</p>

    <p></p>
  syntax:
    content: public interface EventHubClient
- uid: com.microsoft.azure.eventhubs._event_hub_client.createSync(final String,final Executor)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createSync(final String connectionString, final Executor executor)
  nameWithType: EventHubClient.createSync(final String connectionString, final Executor executor)
  fullName: static EventHubClient com.microsoft.azure.eventhubs.EventHubClient.createSync(final String connectionString, final Executor executor)
  type: Method
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs._event_hub_client.create(final String,final Executor)" data-throw-if-not-resolved="false">create(String, Executor)</xref>.</p>

    <p></p>
  syntax:
    content: public static EventHubClient createSync(final String connectionString, final Executor executor)
    parameters:
    - id: connectionString
      type: 3d93591e
      description: <p>The connection string to be used. See <xref uid="com.microsoft.azure.eventhubs._connection_string_builder" data-throw-if-not-resolved="false">ConnectionStringBuilder</xref> to construct a connectionString. </p>
    - id: executor
      type: 506a8fe9
      description: <p>An <xref uid="" data-throw-if-not-resolved="false">Executor</xref> to run all tasks performed by <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref>. </p>
    return:
      type: com.microsoft.azure.eventhubs._event_hub_client
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> which can be used to create Senders and Receivers to EventHub </p>
- uid: com.microsoft.azure.eventhubs._partition_receive_handler
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._partition_receive_handler.yml
  name: PartitionReceiveHandler
  nameWithType: PartitionReceiveHandler
  fullName: com.microsoft.azure.eventhubs.PartitionReceiveHandler
  type: Interface
  summary: >-
    <p>The handler to invoke after receiving <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>s from Microsoft Azure EventHubs. Use any implementation of this abstract class to specify user action when using <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref>'s setReceiveHandler().</p>

    <p></p>
  syntax:
    content: public interface PartitionReceiveHandler
- uid: com.microsoft.azure.eventhubs._partition_receiver.getEpoch()
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  name: getEpoch()
  nameWithType: PartitionReceiver.getEpoch()
  fullName: long com.microsoft.azure.eventhubs.PartitionReceiver.getEpoch()
  type: Method
  summary: >-
    <p>Get the epoch value that this receiver is currently using for partition ownership. </p>

    <p>A value of 0 means this receiver is not an epoch-based receiver.</p>

    <p></p>
  syntax: *o4
- uid: com.microsoft.azure.eventhubs._event_hub_client.createReceiver(final String,final String,final EventPosition)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
  nameWithType: EventHubClient.createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
  fullName: CompletableFuture<PartitionReceiver> com.microsoft.azure.eventhubs.EventHubClient.createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
  type: Method
  summary: >-
    <p>Create the EventHub receiver with given partition id and start receiving from the specified starting offset. The receiver is created for a specific EventHub Partition from the specific consumer group.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<PartitionReceiver> createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
    parameters:
    - id: consumerGroupName
      type: 3d93591e
      description: <p>the consumer group name that this receiver should be grouped under. </p>
    - id: partitionId
      type: 3d93591e
      description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    - id: eventPosition
      type: 93de0ef9com.microsoft.azure.eventhubs._event_position
      description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs._event_position" data-throw-if-not-resolved="false">EventPosition</xref></p>
    return:
      type: 9cdf14d0com.microsoft.azure.eventhubs._partition_receivera08ddfce
      description: <p>a CompletableFuture that would result in a <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> instance when it is completed. </p>
- uid: com.microsoft.azure.eventhubs._event_hub_client.createEpochReceiver(final String,final String,final EventPosition,final long)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
  nameWithType: EventHubClient.createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
  fullName: CompletableFuture<PartitionReceiver> com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
  type: Method
  summary: >-
    <p>Create a Epoch based EventHub receiver with given partition id and start receiving from the beginning of the partition stream. The receiver is created for a specific EventHub Partition from the specific consumer group. </p>

    <p>It is important to pay attention to the following when creating epoch based receiver: <itemizedlist><listitem><p>Ownership enforcement - Once you created an epoch based receiver, you cannot create a non-epoch receiver to the same consumerGroup-Partition combo until all receivers to the combo are closed. </p></listitem><listitem><p>Ownership stealing - If a receiver with higher epoch value is created for a consumerGroup-Partition combo, any older epoch receiver to that combo will be force closed. </p></listitem><listitem><p>Any receiver closed due to lost of ownership to a consumerGroup-Partition combo will get <xref uid="com.microsoft.azure.eventhubs._receiver_disconnected_exception" data-throw-if-not-resolved="false">ReceiverDisconnectedException</xref> for all operations from that receiver. </p></listitem></itemizedlist></p>

    <p></p>
  syntax:
    content: public CompletableFuture<PartitionReceiver> createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
    parameters:
    - id: consumerGroupName
      type: 3d93591e
      description: <p>the consumer group name that this receiver should be grouped under. </p>
    - id: partitionId
      type: 3d93591e
      description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    - id: eventPosition
      type: 93de0ef9com.microsoft.azure.eventhubs._event_position
      description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs._event_position" data-throw-if-not-resolved="false">EventPosition</xref></p>
    - id: epoch
      type: 4c60ae65
      description: <p>an unique identifier (epoch value) that the service uses, to enforce partition/lease ownership. </p>
    return:
      type: 9cdf14d0com.microsoft.azure.eventhubs._partition_receivera08ddfce
      description: <p>a CompletableFuture that would result in a <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> when it is completed. </p>
