### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.servicebus.IMessageSender
  id: IMessageSender
  parent: com.microsoft.azure.servicebus
  children:
  - com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage(long)
  - com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync(long)
  - com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage,Instant)
  - com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage,Instant,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage,Instant)
  - com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage,Instant,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageSender.send(IMessage)
  - com.microsoft.azure.servicebus.IMessageSender.send(IMessage,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage)
  - com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage>)
  - com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage>,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage>)
  - com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage>,TransactionContext)
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  langs:
  - java
  name: IMessageSender
  nameWithType: IMessageSender
  fullName: com.microsoft.azure.servicebus.IMessageSender
  type: Interface
  source:
    remote: &o0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSender.java
      branch: master
      repo: https://github.com/Azure/azure-service-bus-java
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSender.java
    startLine: 16
  package: com.microsoft.azure.servicebus
  summary: "<p>Represents a message sender that sends messages to Azure Service Bus.</p>\r\n<p></p>"
  syntax:
    content: public interface IMessageSender extends IMessageEntityClient
  inheritedMembers:
  - com.microsoft.azure.servicebus.ICloseable.close()
  - com.microsoft.azure.servicebus.ICloseable.closeAsync()
  - com.microsoft.azure.servicebus.IMessageEntityClient.getEntityPath()
- uid: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage(long)
  id: cancelScheduledMessage(long)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  langs:
  - java
  name: cancelScheduledMessage(long sequenceNumber)
  nameWithType: IMessageSender.cancelScheduledMessage(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage(long sequenceNumber)
  overload: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSender.java
    startLine: 157
  package: com.microsoft.azure.servicebus
  summary: "<p>Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void cancelScheduledMessage(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if scheduled message couldn't be cancelled </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync(long)
  id: cancelScheduledMessageAsync(long)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  langs:
  - java
  name: cancelScheduledMessageAsync(long sequenceNumber)
  nameWithType: IMessageSender.cancelScheduledMessageAsync(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync(long sequenceNumber)
  overload: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSender.java
    startLine: 122
  package: com.microsoft.azure.servicebus
  summary: "<p>Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This is an asynchronous method returning a CompletableFuture which completes when the message is cancelled.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> cancelScheduledMessageAsync(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending cancellation </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage,Instant)
  id: scheduleMessage(IMessage,Instant)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  langs:
  - java
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  overload: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSender.java
    startLine: 134
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    return:
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if message couldn't be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage,Instant,TransactionContext)
  id: scheduleMessage(IMessage,Instant,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  langs:
  - java
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSender.java
    startLine: 147
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if message couldn't be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage,Instant)
  id: scheduleMessageAsync(IMessage,Instant)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  langs:
  - java
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  overload: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSender.java
    startLine: 102
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    return:
      type: 30822cb1
      description: <p>a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message. </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage,Instant,TransactionContext)
  id: scheduleMessageAsync(IMessage,Instant,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  langs:
  - java
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSender.java
    startLine: 114
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: 30822cb1
      description: <p>a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message. </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.send(IMessage)
  id: send(IMessage)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  langs:
  - java
  name: send(IMessage message)
  nameWithType: IMessageSender.send(IMessage message)
  fullName: com.microsoft.azure.servicebus.IMessageSender.send(IMessage message)
  overload: com.microsoft.azure.servicebus.IMessageSender.send*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSender.java
    startLine: 25
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void send(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if message couldn't be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.send(IMessage,TransactionContext)
  id: send(IMessage,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  langs:
  - java
  name: send(IMessage message, TransactionContext transaction)
  nameWithType: IMessageSender.send(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.send(IMessage message, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.IMessageSender.send*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSender.java
    startLine: 36
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void send(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if message couldn't be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage)
  id: sendAsync(IMessage)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  langs:
  - java
  name: sendAsync(IMessage message)
  nameWithType: IMessageSender.sendAsync(IMessage message)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage message)
  overload: com.microsoft.azure.servicebus.IMessageSender.sendAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSender.java
    startLine: 65
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendAsync(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage,TransactionContext)
  id: sendAsync(IMessage,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  langs:
  - java
  name: sendAsync(IMessage message, TransactionContext transaction)
  nameWithType: IMessageSender.sendAsync(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage message, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.IMessageSender.sendAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSender.java
    startLine: 74
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendAsync(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage>)
  id: sendBatch(Collection<? extends IMessage>)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  langs:
  - java
  name: sendBatch(Collection<? extends IMessage> messages)
  nameWithType: IMessageSender.sendBatch(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage> messages)
  overload: com.microsoft.azure.servicebus.IMessageSender.sendBatch*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSender.java
    startLine: 46
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void sendBatch(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if the batch couldn't be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage>,TransactionContext)
  id: sendBatch(Collection<? extends IMessage>,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  langs:
  - java
  name: sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: IMessageSender.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.IMessageSender.sendBatch*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSender.java
    startLine: 57
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if the batch couldn't be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage>)
  id: sendBatchAsync(Collection<? extends IMessage>)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  langs:
  - java
  name: sendBatchAsync(Collection<? extends IMessage> messages)
  nameWithType: IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages)
  overload: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSender.java
    startLine: 82
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage>,TransactionContext)
  id: sendBatchAsync(Collection<? extends IMessage>,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  langs:
  - java
  name: sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSender.java
    startLine: 91
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
references:
- uid: 8256ba40
  spec.java:
  - name: InterruptedException
    fullName: InterruptedException
- uid: 73fec9fb
  spec.java:
  - name: ServiceBusException
    fullName: ServiceBusException
- uid: com.microsoft.azure.servicebus.IMessageSender.send*
  name: send
  nameWithType: IMessageSender.send
  fullName: com.microsoft.azure.servicebus.IMessageSender.send
  package: com.microsoft.azure.servicebus
- uid: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
  spec.java:
  - name: 'Collection<? extends '
    fullName: 'Collection<? extends '
  - uid: com.microsoft.azure.servicebus.IMessage
    name: IMessage
    fullName: com.microsoft.azure.servicebus.IMessage
    href: com.microsoft.azure.servicebus.IMessage.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatch*
  name: sendBatch
  nameWithType: IMessageSender.sendBatch
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatch
  package: com.microsoft.azure.servicebus
- uid: db03ee24
  spec.java:
  - name: CompletableFuture<Void>
    fullName: CompletableFuture<Void>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendAsync*
  name: sendAsync
  nameWithType: IMessageSender.sendAsync
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync*
  name: sendBatchAsync
  nameWithType: IMessageSender.sendBatchAsync
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync
  package: com.microsoft.azure.servicebus
- uid: 328f8254
  spec.java:
  - name: Instant
    fullName: Instant
- uid: 30822cb1
  spec.java:
  - name: CompletableFuture<Long>
    fullName: CompletableFuture<Long>
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync*
  name: scheduleMessageAsync
  nameWithType: IMessageSender.scheduleMessageAsync
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync
  package: com.microsoft.azure.servicebus
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync*
  name: cancelScheduledMessageAsync
  nameWithType: IMessageSender.cancelScheduledMessageAsync
  fullName: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage*
  name: scheduleMessage
  nameWithType: IMessageSender.scheduleMessage
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage*
  name: cancelScheduledMessage
  nameWithType: IMessageSender.cancelScheduledMessage
  fullName: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.ICloseable.close()
  parent: com.microsoft.azure.servicebus.ICloseable
  href: com.microsoft.azure.servicebus.ICloseable.yml
  name: close()
  nameWithType: ICloseable.close()
  fullName: com.microsoft.azure.servicebus.ICloseable.close()
  type: Method
  summary: "<p>Synchronously closes and disposes any resources associated with this object. Calling this method is equivalent of calling . This method blocks until this object is closed. </p>"
  syntax:
    content: public void close()
- uid: com.microsoft.azure.servicebus.ICloseable.closeAsync()
  parent: com.microsoft.azure.servicebus.ICloseable
  href: com.microsoft.azure.servicebus.ICloseable.yml
  name: closeAsync()
  nameWithType: ICloseable.closeAsync()
  fullName: com.microsoft.azure.servicebus.ICloseable.closeAsync()
  type: Method
  summary: "<p>Closes and disposes any resources associated with this object. An object cannot be used after it is closed. This is an asynchronous method that returns a CompletableFuture immediately. This object is completely closed when the returned CompletableFuture is completed. </p>"
  syntax:
    content: public CompletableFuture<Void> closeAsync()
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the closing of this object. </p>
- uid: com.microsoft.azure.servicebus.IMessageEntityClient.getEntityPath()
  parent: com.microsoft.azure.servicebus.IMessageEntityClient
  href: com.microsoft.azure.servicebus.IMessageEntityClient.yml
  name: getEntityPath()
  nameWithType: IMessageEntityClient.getEntityPath()
  fullName: com.microsoft.azure.servicebus.IMessageEntityClient.getEntityPath()
  type: Method
  summary: "<p>Gets the path of the entity this client is sending messages to or receiving messages from.</p>\r\n<p></p>"
  syntax:
    content: public String getEntityPath()
    return:
      type: "26831127"
      description: <p>path of the entity this client is connecting to </p>
- uid: com.microsoft.azure.servicebus.IMessageEntityClient
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.IMessageEntityClient.yml
  name: IMessageEntityClient
  nameWithType: IMessageEntityClient
  fullName: com.microsoft.azure.servicebus.IMessageEntityClient
  type: Interface
  summary: "<p>Represents a messaging client to an Azure Service Bus entity.</p>\r\n<p></p>"
  syntax:
    content: public interface IMessageEntityClient extends ICloseable
- uid: com.microsoft.azure.servicebus.IQueueClient
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.IQueueClient.yml
  name: IQueueClient
  nameWithType: IQueueClient
  fullName: com.microsoft.azure.servicebus.IQueueClient
  type: Interface
  summary: "<p>QueueClient can be used for all basic interactions with a Service Bus Queue. </p>"
  syntax:
    content: public interface IQueueClient
- uid: com.microsoft.azure.servicebus.ITopicClient
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.ITopicClient.yml
  name: ITopicClient
  nameWithType: ITopicClient
  fullName: com.microsoft.azure.servicebus.ITopicClient
  type: Interface
  summary: "<p>TopicClient can be used for all basic interactions with a Service Bus topic. <code></code></p>"
  syntax:
    content: public interface ITopicClient
- uid: com.microsoft.azure.servicebus.MessageSender
- uid: com.microsoft.azure.servicebus.TopicClient.send(IMessage)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  name: send(IMessage message)
  nameWithType: TopicClient.send(IMessage message)
  fullName: com.microsoft.azure.servicebus.TopicClient.send(IMessage message)
  type: Method
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void send(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.QueueClient.send(IMessage)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  name: send(IMessage message)
  nameWithType: QueueClient.send(IMessage message)
  fullName: com.microsoft.azure.servicebus.QueueClient.send(IMessage message)
  type: Method
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void send(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.IMessage
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.IMessage.yml
  name: IMessage
  nameWithType: IMessage
  fullName: com.microsoft.azure.servicebus.IMessage
  type: Interface
  summary: "<p>Represents the message that is exchanged between Azure Service Bus and its clients.</p>\r\n<p></p>"
  syntax:
    content: public interface IMessage
- uid: com.microsoft.azure.servicebus.primitives.ServiceBusException
  parent: com.microsoft.azure.servicebus.primitives
  href: com.microsoft.azure.servicebus.primitives.ServiceBusException.yml
  name: ServiceBusException
  nameWithType: ServiceBusException
  fullName: com.microsoft.azure.servicebus.primitives.ServiceBusException
  type: Class
  summary: "<p>This is the base exception that service bus will generate for all error cases. </p>"
  syntax:
    content: public class ServiceBusException
- uid: com.microsoft.azure.servicebus.TopicClient.send(IMessage,TransactionContext)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  name: send(IMessage message, TransactionContext transaction)
  nameWithType: TopicClient.send(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.TopicClient.send(IMessage message, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void send(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
- uid: com.microsoft.azure.servicebus.QueueClient.send(IMessage,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  name: send(IMessage message, TransactionContext transaction)
  nameWithType: QueueClient.send(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.send(IMessage message, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void send(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
- uid: com.microsoft.azure.servicebus.TransactionContext
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.TransactionContext.yml
  name: TransactionContext
  nameWithType: TransactionContext
  fullName: com.microsoft.azure.servicebus.TransactionContext
  type: Class
  summary: "<p>Represents an active servicebus transaction. A transaction is initiated by calling <xref uid=\"com.microsoft.azure.servicebus.primitives.MessagingFactory.startTransactionAsync()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessagingFactory#startTransactionAsync()\"></xref>. A transaction can result in commit or rollback. To commit, call <xref uid=\"com.microsoft.azure.servicebus.primitives.MessagingFactory.endTransactionAsync(TransactionContext,boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessagingFactory#endTransactionAsync(TransactionContext, boolean)\"></xref> with  To rollback, call <xref uid=\"com.microsoft.azure.servicebus.primitives.MessagingFactory.endTransactionAsync(TransactionContext,boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessagingFactory#endTransactionAsync(TransactionContext, boolean)\"></xref> with </p>"
  syntax:
    content: public class TransactionContext
- uid: com.microsoft.azure.servicebus.TopicClient.sendBatch(Collection<? extends IMessage>)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  name: sendBatch(Collection<? extends IMessage> messages)
  nameWithType: TopicClient.sendBatch(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.TopicClient.sendBatch(Collection<? extends IMessage> messages)
  type: Method
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void sendBatch(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.QueueClient.sendBatch(Collection<? extends IMessage>)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  name: sendBatch(Collection<? extends IMessage> messages)
  nameWithType: QueueClient.sendBatch(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.QueueClient.sendBatch(Collection<? extends IMessage> messages)
  type: Method
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void sendBatch(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.TopicClient.sendBatch(Collection<? extends IMessage>,TransactionContext)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  name: sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: TopicClient.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.TopicClient.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
- uid: com.microsoft.azure.servicebus.QueueClient.sendBatch(Collection<? extends IMessage>,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  name: sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: QueueClient.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
- uid: com.microsoft.azure.servicebus.TopicClient.sendAsync(IMessage)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  name: sendAsync(IMessage message)
  nameWithType: TopicClient.sendAsync(IMessage message)
  fullName: com.microsoft.azure.servicebus.TopicClient.sendAsync(IMessage message)
  type: Method
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendAsync(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.QueueClient.sendAsync(IMessage)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  name: sendAsync(IMessage message)
  nameWithType: QueueClient.sendAsync(IMessage message)
  fullName: com.microsoft.azure.servicebus.QueueClient.sendAsync(IMessage message)
  type: Method
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendAsync(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.TopicClient.sendAsync(IMessage,TransactionContext)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  name: sendAsync(IMessage message, TransactionContext transaction)
  nameWithType: TopicClient.sendAsync(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.TopicClient.sendAsync(IMessage message, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendAsync(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.QueueClient.sendAsync(IMessage,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  name: sendAsync(IMessage message, TransactionContext transaction)
  nameWithType: QueueClient.sendAsync(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.sendAsync(IMessage message, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendAsync(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(Collection<? extends IMessage>)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  name: sendBatchAsync(Collection<? extends IMessage> messages)
  nameWithType: TopicClient.sendBatchAsync(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(Collection<? extends IMessage> messages)
  type: Method
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(Collection<? extends IMessage>)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  name: sendBatchAsync(Collection<? extends IMessage> messages)
  nameWithType: QueueClient.sendBatchAsync(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(Collection<? extends IMessage> messages)
  type: Method
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(Collection<? extends IMessage>,TransactionContext)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  name: sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: TopicClient.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(Collection<? extends IMessage>,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  name: sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: QueueClient.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(IMessage,Instant)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: TopicClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  type: Method
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    return:
      type: 30822cb1
      description: <p>a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message. </p>
- uid: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(IMessage,Instant)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: QueueClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  type: Method
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    return:
      type: 30822cb1
      description: <p>a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message. </p>
- uid: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(IMessage,Instant,TransactionContext)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: TopicClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: 30822cb1
      description: <p>a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message. </p>
- uid: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(IMessage,Instant,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: QueueClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: 30822cb1
      description: <p>a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message. </p>
- uid: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessageAsync(long)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  name: cancelScheduledMessageAsync(long sequenceNumber)
  nameWithType: TopicClient.cancelScheduledMessageAsync(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessageAsync(long sequenceNumber)
  type: Method
  summary: "<p>Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This is an asynchronous method returning a CompletableFuture which completes when the message is cancelled.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> cancelScheduledMessageAsync(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending cancellation </p>
- uid: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessageAsync(long)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  name: cancelScheduledMessageAsync(long sequenceNumber)
  nameWithType: QueueClient.cancelScheduledMessageAsync(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessageAsync(long sequenceNumber)
  type: Method
  summary: "<p>Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This is an asynchronous method returning a CompletableFuture which completes when the message is cancelled.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> cancelScheduledMessageAsync(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending cancellation </p>
- uid: com.microsoft.azure.servicebus.TopicClient.scheduleMessage(IMessage,Instant)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: TopicClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.TopicClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  type: Method
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    return:
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
- uid: com.microsoft.azure.servicebus.QueueClient.scheduleMessage(IMessage,Instant)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: QueueClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.QueueClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  type: Method
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    return:
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
- uid: com.microsoft.azure.servicebus.TopicClient.scheduleMessage(IMessage,Instant,TransactionContext)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: TopicClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.TopicClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
- uid: com.microsoft.azure.servicebus.QueueClient.scheduleMessage(IMessage,Instant,TransactionContext)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: QueueClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.QueueClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
- uid: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessage(long)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  name: cancelScheduledMessage(long sequenceNumber)
  nameWithType: TopicClient.cancelScheduledMessage(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessage(long sequenceNumber)
  type: Method
  summary: "<p>Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void cancelScheduledMessage(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
- uid: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessage(long)
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  name: cancelScheduledMessage(long sequenceNumber)
  nameWithType: QueueClient.cancelScheduledMessage(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.QueueClient.cancelScheduledMessage(long sequenceNumber)
  type: Method
  summary: "<p>Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void cancelScheduledMessage(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
