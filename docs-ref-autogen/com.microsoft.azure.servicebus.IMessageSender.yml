### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.servicebus.IMessageSender
  id: IMessageSender
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus
  children:
  - com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage(long)
  - com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync(long)
  - com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant)
  - com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant)
  - com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.IMessageSender.send(com.microsoft.azure.servicebus.IMessage)
  - com.microsoft.azure.servicebus.IMessageSender.send(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.IMessageSender.sendAsync(com.microsoft.azure.servicebus.IMessage)
  - com.microsoft.azure.servicebus.IMessageSender.sendAsync(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.IMessageSender.sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)
  - com.microsoft.azure.servicebus.IMessageSender.sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)
  - com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)
  langs:
  - java
  name: IMessageSender
  nameWithType: IMessageSender
  fullName: com.microsoft.azure.servicebus.IMessageSender
  type: Interface
  package: com.microsoft.azure.servicebus
  summary: Represents a message sender that sends messages to Azure Service Bus.
  syntax:
    content: public interface IMessageSender extends IMessageEntityClient
  implements:
  - com.microsoft.azure.servicebus.IMessageEntityClient
- uid: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage(long)
  id: cancelScheduledMessage(long)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSender
  langs:
  - java
  name: cancelScheduledMessage(long sequenceNumber)
  nameWithType: IMessageSender.cancelScheduledMessage(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage(long sequenceNumber)
  overload: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `cancelScheduledMessageAsync(sequenceNumber).get()`. For better performance, use async methods.
  syntax:
    content: public abstract void cancelScheduledMessage(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: long
      description: sequence number of the scheduled message
  exceptions:
  - type: java.lang.InterruptedException
    description: if the current thread was interrupted while waiting
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
    description: if the current thread was interrupted while waiting
- uid: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync(long)
  id: cancelScheduledMessageAsync(long)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSender
  langs:
  - java
  name: cancelScheduledMessageAsync(long sequenceNumber)
  nameWithType: IMessageSender.cancelScheduledMessageAsync(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync(long sequenceNumber)
  overload: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This is an asynchronous method returning a CompletableFuture which completes when the message is cancelled.
  syntax:
    content: public abstract CompletableFuture<Void> cancelScheduledMessageAsync(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: long
      description: sequence number of the scheduled message
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
      description: a CompletableFuture representing the pending cancellation
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant)
  id: scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSender
  langs:
  - java
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  overload: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `scheduleMessageAsync(message, scheduledEnqueueTimeUtc).get()`. For better performance, use async methods.
  syntax:
    content: public abstract long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: message to be sent to the entity
    - id: scheduledEnqueueTimeUtc
      type: java.time.Instant
      description: instant at which the message should be enqueued in the entity
    return:
      type: long
      description: sequence number of the scheduled message
  exceptions:
  - type: java.lang.InterruptedException
    description: if the current thread was interrupted while waiting
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
    description: if the current thread was interrupted while waiting
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)
  id: scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSender
  langs:
  - java
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `scheduleMessageAsync(message, scheduledEnqueueTimeUtc).get()`. For better performance, use async methods.
  syntax:
    content: public abstract long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: message to be sent to the entity
    - id: scheduledEnqueueTimeUtc
      type: java.time.Instant
      description: instant at which the message should be enqueued in the entity
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false">TransactionContext</xref> which this operation should enlist to.
    return:
      type: long
      description: sequence number of the scheduled message
  exceptions:
  - type: java.lang.InterruptedException
    description: if the current thread was interrupted while waiting
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
    description: if the current thread was interrupted while waiting
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant)
  id: scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSender
  langs:
  - java
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  overload: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.
  syntax:
    content: public abstract CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: message to be sent to the entity
    - id: scheduledEnqueueTimeUtc
      type: java.time.Instant
      description: instant at which the message should be enqueued in the entity
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Long>
      description: a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message.
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)
  id: scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSender
  langs:
  - java
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.
  syntax:
    content: public abstract CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: message to be sent to the entity
    - id: scheduledEnqueueTimeUtc
      type: java.time.Instant
      description: instant at which the message should be enqueued in the entity
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false">TransactionContext</xref> which this operation should enlist to.
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Long>
      description: a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message.
- uid: com.microsoft.azure.servicebus.IMessageSender.send(com.microsoft.azure.servicebus.IMessage)
  id: send(com.microsoft.azure.servicebus.IMessage)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSender
  langs:
  - java
  name: send(IMessage message)
  nameWithType: IMessageSender.send(IMessage message)
  fullName: com.microsoft.azure.servicebus.IMessageSender.send(IMessage message)
  overload: com.microsoft.azure.servicebus.IMessageSender.send*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `sendAsync(message).get()`. For better performance, use async methods.
  syntax:
    content: public abstract void send(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: message to be sent to the entity
  exceptions:
  - type: java.lang.InterruptedException
    description: if the current thread was interrupted while waiting
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
    description: if the current thread was interrupted while waiting
- uid: com.microsoft.azure.servicebus.IMessageSender.send(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)
  id: send(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSender
  langs:
  - java
  name: send(IMessage message, TransactionContext transaction)
  nameWithType: IMessageSender.send(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.send(IMessage message, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.IMessageSender.send*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `sendAsync(message).get()`. For better performance, use async methods.
  syntax:
    content: public abstract void send(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: message to be sent to the entity
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false">TransactionContext</xref> which this operation should enlist to.
  exceptions:
  - type: java.lang.InterruptedException
    description: if the current thread was interrupted while waiting
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
    description: if the current thread was interrupted while waiting
- uid: com.microsoft.azure.servicebus.IMessageSender.sendAsync(com.microsoft.azure.servicebus.IMessage)
  id: sendAsync(com.microsoft.azure.servicebus.IMessage)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSender
  langs:
  - java
  name: sendAsync(IMessage message)
  nameWithType: IMessageSender.sendAsync(IMessage message)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage message)
  overload: com.microsoft.azure.servicebus.IMessageSender.sendAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.
  syntax:
    content: public abstract CompletableFuture<Void> sendAsync(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: message to be sent to the entity
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
      description: a CompletableFuture representing the pending send
- uid: com.microsoft.azure.servicebus.IMessageSender.sendAsync(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)
  id: sendAsync(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSender
  langs:
  - java
  name: sendAsync(IMessage message, TransactionContext transaction)
  nameWithType: IMessageSender.sendAsync(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage message, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.IMessageSender.sendAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.
  syntax:
    content: public abstract CompletableFuture<Void> sendAsync(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: message to be sent to the entity
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false">TransactionContext</xref> which this operation should enlist to.
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
      description: a CompletableFuture representing the pending send
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)
  id: sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSender
  langs:
  - java
  name: sendBatch(Collection<? extends IMessage> messages)
  nameWithType: IMessageSender.sendBatch(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage> messages)
  overload: com.microsoft.azure.servicebus.IMessageSender.sendBatch*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling `sendBatchAsync(messages).get()`. For better performance, use async methods. When called on partitioned entities, messages meant for different partitions cannot be batched together.
  syntax:
    content: public abstract void sendBatch(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>
      description: collection of messages to be sent to the entity
  exceptions:
  - type: java.lang.InterruptedException
    description: if the current thread was interrupted while waiting
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
    description: if the current thread was interrupted while waiting
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)
  id: sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSender
  langs:
  - java
  name: sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: IMessageSender.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.IMessageSender.sendBatch*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling `sendBatchAsync(messages).get()`. For better performance, use async methods. When called on partitioned entities, messages meant for different partitions cannot be batched together.
  syntax:
    content: public abstract void sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>
      description: collection of messages to be sent to the entity
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false">TransactionContext</xref> which this operation should enlist to.
  exceptions:
  - type: java.lang.InterruptedException
    description: if the current thread was interrupted while waiting
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
    description: if the current thread was interrupted while waiting
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)
  id: sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSender
  langs:
  - java
  name: sendBatchAsync(Collection<? extends IMessage> messages)
  nameWithType: IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages)
  overload: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity. When called on partitioned entities, messages meant for different partitions cannot be batched together.
  syntax:
    content: public abstract CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>
      description: collection of messages to be sent to the entity
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
      description: a CompletableFuture representing the pending send
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)
  id: sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSender
  langs:
  - java
  name: sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity. When called on partitioned entities, messages meant for different partitions cannot be batched together.
  syntax:
    content: public abstract CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>
      description: collection of messages to be sent to the entity
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false">TransactionContext</xref> which this operation should enlist to.
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
      description: a CompletableFuture representing the pending send
references:
- uid: java.lang.InterruptedException
  spec.java:
  - uid: java.lang.InterruptedException
    name: InterruptedException
    fullName: java.lang.InterruptedException
- uid: com.microsoft.azure.servicebus.primitives.ServiceBusException
  name: ServiceBusException
  nameWithType: ServiceBusException
  fullName: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.IMessage
  name: IMessage
  nameWithType: IMessage
  fullName: com.microsoft.azure.servicebus.IMessage
- uid: com.microsoft.azure.servicebus.IMessageSender.send*
  name: send
  nameWithType: IMessageSender.send
  fullName: com.microsoft.azure.servicebus.IMessageSender.send
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TransactionContext
  name: TransactionContext
  nameWithType: TransactionContext
  fullName: com.microsoft.azure.servicebus.TransactionContext
- uid: java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: '? extends com.microsoft.azure.servicebus.IMessage'
    name: IMessage
    fullName: '? extends com.microsoft.azure.servicebus.IMessage'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatch*
  name: sendBatch
  nameWithType: IMessageSender.sendBatch
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatch
  package: com.microsoft.azure.servicebus
- uid: java.util.concurrent.CompletableFuture<java.lang.Void>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.IMessageSender.sendAsync*
  name: sendAsync
  nameWithType: IMessageSender.sendAsync
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync*
  name: sendBatchAsync
  nameWithType: IMessageSender.sendBatchAsync
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync
  package: com.microsoft.azure.servicebus
- uid: java.time.Instant
  spec.java:
  - uid: java.time.Instant
    name: Instant
    fullName: java.time.Instant
- uid: java.util.concurrent.CompletableFuture<java.lang.Long>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync*
  name: scheduleMessageAsync
  nameWithType: IMessageSender.scheduleMessageAsync
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync
  package: com.microsoft.azure.servicebus
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync*
  name: cancelScheduledMessageAsync
  nameWithType: IMessageSender.cancelScheduledMessageAsync
  fullName: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage*
  name: scheduleMessage
  nameWithType: IMessageSender.scheduleMessage
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage*
  name: cancelScheduledMessage
  nameWithType: IMessageSender.cancelScheduledMessage
  fullName: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.IMessageEntityClient
  name: IMessageEntityClient
  nameWithType: IMessageEntityClient
  fullName: com.microsoft.azure.servicebus.IMessageEntityClient
- uid: '? extends com.microsoft.azure.servicebus.IMessage'
  name: '? extends IMessage'
  nameWithType: '? extends IMessage'
  fullName: '? extends com.microsoft.azure.servicebus.IMessage'
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: java.util.concurrent.CompletableFuture
  name: CompletableFuture
  nameWithType: CompletableFuture
  fullName: java.util.concurrent.CompletableFuture
- uid: java.lang.Long
  name: Long
  nameWithType: Long
  fullName: java.lang.Long
