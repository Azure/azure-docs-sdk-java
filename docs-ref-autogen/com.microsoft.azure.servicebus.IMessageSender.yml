### YamlMime:JavaType
uid: "com.microsoft.azure.servicebus.IMessageSender"
fullName: "com.microsoft.azure.servicebus.IMessageSender"
name: "IMessageSender"
nameWithType: "IMessageSender"
summary: "Represents a message sender that sends messages to Azure Service Bus."
syntax: "public interface IMessageSender extends IMessageEntityClient"
methods:
- uid: "com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage(long)"
  fullName: "com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage(long sequenceNumber)"
  name: "cancelScheduledMessage(long sequenceNumber)"
  nameWithType: "IMessageSender.cancelScheduledMessage(long sequenceNumber)"
  summary: "Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued."
  modifiers:
  - "abstract"
  parameters:
  - description: "sequence number of the scheduled message"
    name: "sequenceNumber"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void cancelScheduledMessage(long sequenceNumber)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `cancelScheduledMessageAsync(sequenceNumber).get()`. For better performance, use async methods."
- uid: "com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync(long)"
  fullName: "com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync(long sequenceNumber)"
  name: "cancelScheduledMessageAsync(long sequenceNumber)"
  nameWithType: "IMessageSender.cancelScheduledMessageAsync(long sequenceNumber)"
  summary: "Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued."
  modifiers:
  - "abstract"
  parameters:
  - description: "sequence number of the scheduled message"
    name: "sequenceNumber"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> cancelScheduledMessageAsync(long sequenceNumber)"
  desc: "Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This is an asynchronous method returning a CompletableFuture which completes when the message is cancelled."
  returns:
    description: "a CompletableFuture representing the pending cancellation"
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant)"
  fullName: "com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)"
  name: "scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)"
  nameWithType: "IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)"
  summary: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to."
  modifiers:
  - "abstract"
  parameters:
  - description: "message to be sent to the entity"
    name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  - description: "instant at which the message should be enqueued in the entity"
    name: "scheduledEnqueueTimeUtc"
    type: "<xref href=\"java.time.Instant?alt=java.time.Instant&text=Instant\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `scheduleMessageAsync(message, scheduledEnqueueTimeUtc).get()`. For better performance, use async methods."
  returns:
    description: "sequence number of the scheduled message"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  name: "scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  nameWithType: "IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  summary: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to."
  modifiers:
  - "abstract"
  parameters:
  - description: "message to be sent to the entity"
    name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  - description: "instant at which the message should be enqueued in the entity"
    name: "scheduledEnqueueTimeUtc"
    type: "<xref href=\"java.time.Instant?alt=java.time.Instant&text=Instant\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `scheduleMessageAsync(message, scheduledEnqueueTimeUtc).get()`. For better performance, use async methods."
  returns:
    description: "sequence number of the scheduled message"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant)"
  fullName: "com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)"
  name: "scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)"
  nameWithType: "IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)"
  summary: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to."
  modifiers:
  - "abstract"
  parameters:
  - description: "message to be sent to the entity"
    name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  - description: "instant at which the message should be enqueued in the entity"
    name: "scheduledEnqueueTimeUtc"
    type: "<xref href=\"java.time.Instant?alt=java.time.Instant&text=Instant\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)"
  desc: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message."
  returns:
    description: "a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  name: "scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  nameWithType: "IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  summary: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to."
  modifiers:
  - "abstract"
  parameters:
  - description: "message to be sent to the entity"
    name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  - description: "instant at which the message should be enqueued in the entity"
    name: "scheduledEnqueueTimeUtc"
    type: "<xref href=\"java.time.Instant?alt=java.time.Instant&text=Instant\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  desc: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message."
  returns:
    description: "a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageSender.send(com.microsoft.azure.servicebus.IMessage)"
  fullName: "com.microsoft.azure.servicebus.IMessageSender.send(IMessage message)"
  name: "send(IMessage message)"
  nameWithType: "IMessageSender.send(IMessage message)"
  summary: "Sends a message to the Azure Service Bus entity this sender is connected to."
  modifiers:
  - "abstract"
  parameters:
  - description: "message to be sent to the entity"
    name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void send(IMessage message)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `sendAsync(message).get()`. For better performance, use async methods."
- uid: "com.microsoft.azure.servicebus.IMessageSender.send(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageSender.send(IMessage message, TransactionContext transaction)"
  name: "send(IMessage message, TransactionContext transaction)"
  nameWithType: "IMessageSender.send(IMessage message, TransactionContext transaction)"
  summary: "Sends a message to the Azure Service Bus entity this sender is connected to."
  modifiers:
  - "abstract"
  parameters:
  - description: "message to be sent to the entity"
    name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void send(IMessage message, TransactionContext transaction)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `sendAsync(message).get()`. For better performance, use async methods."
- uid: "com.microsoft.azure.servicebus.IMessageSender.sendAsync(com.microsoft.azure.servicebus.IMessage)"
  fullName: "com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage message)"
  name: "sendAsync(IMessage message)"
  nameWithType: "IMessageSender.sendAsync(IMessage message)"
  summary: "Sends a message to the Azure Service Bus entity this sender is connected to."
  modifiers:
  - "abstract"
  parameters:
  - description: "message to be sent to the entity"
    name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> sendAsync(IMessage message)"
  desc: "Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity."
  returns:
    description: "a CompletableFuture representing the pending send"
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageSender.sendAsync(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage message, TransactionContext transaction)"
  name: "sendAsync(IMessage message, TransactionContext transaction)"
  nameWithType: "IMessageSender.sendAsync(IMessage message, TransactionContext transaction)"
  summary: "Sends a message to the Azure Service Bus entity this sender is connected to."
  modifiers:
  - "abstract"
  parameters:
  - description: "message to be sent to the entity"
    name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> sendAsync(IMessage message, TransactionContext transaction)"
  desc: "Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity."
  returns:
    description: "a CompletableFuture representing the pending send"
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageSender.sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)"
  fullName: "com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage> messages)"
  name: "sendBatch(Collection<? extends IMessage> messages)"
  nameWithType: "IMessageSender.sendBatch(Collection<? extends IMessage> messages)"
  summary: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to."
  modifiers:
  - "abstract"
  parameters:
  - description: "collection of messages to be sent to the entity"
    name: "messages"
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends com.microsoft.azure.servicebus.IMessage?alt=? extends com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract void sendBatch(Collection<? extends IMessage> messages)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling `sendBatchAsync(messages).get()`. For better performance, use async methods. When called on partitioned entities, messages meant for different partitions cannot be batched together."
- uid: "com.microsoft.azure.servicebus.IMessageSender.sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)"
  name: "sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)"
  nameWithType: "IMessageSender.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)"
  summary: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to."
  modifiers:
  - "abstract"
  parameters:
  - description: "collection of messages to be sent to the entity"
    name: "messages"
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends com.microsoft.azure.servicebus.IMessage?alt=? extends com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling `sendBatchAsync(messages).get()`. For better performance, use async methods. When called on partitioned entities, messages meant for different partitions cannot be batched together."
- uid: "com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)"
  fullName: "com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages)"
  name: "sendBatchAsync(Collection<? extends IMessage> messages)"
  nameWithType: "IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages)"
  summary: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to."
  modifiers:
  - "abstract"
  parameters:
  - description: "collection of messages to be sent to the entity"
    name: "messages"
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends com.microsoft.azure.servicebus.IMessage?alt=? extends com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages)"
  desc: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity. When called on partitioned entities, messages meant for different partitions cannot be batched together."
  returns:
    description: "a CompletableFuture representing the pending send"
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)"
  name: "sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)"
  nameWithType: "IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)"
  summary: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to."
  modifiers:
  - "abstract"
  parameters:
  - description: "collection of messages to be sent to the entity"
    name: "messages"
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends com.microsoft.azure.servicebus.IMessage?alt=? extends com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)"
  desc: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity. When called on partitioned entities, messages meant for different partitions cannot be batched together."
  returns:
    description: "a CompletableFuture representing the pending send"
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "interface"
desc: "Represents a message sender that sends messages to Azure Service Bus."
implements:
- "<xref href=\"com.microsoft.azure.servicebus.IMessageEntityClient?alt=com.microsoft.azure.servicebus.IMessageEntityClient&text=IMessageEntityClient\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.microsoft.azure.servicebus"
artifact: com.microsoft.azure:azure-servicebus:3.6.6
