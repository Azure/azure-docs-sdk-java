### YamlMime:JavaType
uid: "com.azure.messaging.servicebus.ServiceBusProcessorClient"
fullName: "com.azure.messaging.servicebus.ServiceBusProcessorClient"
name: "ServiceBusProcessorClient"
nameWithType: "ServiceBusProcessorClient"
summary: "The processor client for processing Service Bus messages."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ServiceBusProcessorClient implements AutoCloseable"
methods:
- uid: "com.azure.messaging.servicebus.ServiceBusProcessorClient.close()"
  fullName: "com.azure.messaging.servicebus.ServiceBusProcessorClient.close()"
  name: "close()"
  nameWithType: "ServiceBusProcessorClient.close()"
  summary: "Stops message processing and closes the processor."
  modifiers:
  - "synchronized"
  syntax: "public synchronized void close()"
  desc: "Stops message processing and closes the processor. The receiving links and sessions are closed and calling <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient.start()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#start()\"></xref> will create a new processing cycle with new links and new sessions."
- uid: "com.azure.messaging.servicebus.ServiceBusProcessorClient.getQueueName()"
  fullName: "com.azure.messaging.servicebus.ServiceBusProcessorClient.getQueueName()"
  name: "getQueueName()"
  nameWithType: "ServiceBusProcessorClient.getQueueName()"
  summary: "Returns the queue name associated with this instance of <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref>."
  syntax: "public String getQueueName()"
  desc: "Returns the queue name associated with this instance of <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref>."
  returns:
    description: "the queue name associated with this instance of <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref> or <code>null</code> if\n the processor instance is for a topic and subscription."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.messaging.servicebus.ServiceBusProcessorClient.getSubscriptionName()"
  fullName: "com.azure.messaging.servicebus.ServiceBusProcessorClient.getSubscriptionName()"
  name: "getSubscriptionName()"
  nameWithType: "ServiceBusProcessorClient.getSubscriptionName()"
  summary: "Returns the subscription name associated with this instance of <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref>."
  syntax: "public String getSubscriptionName()"
  desc: "Returns the subscription name associated with this instance of <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref>."
  returns:
    description: "the subscription name associated with this instance of <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref> or <code>null</code>\n if the processor instance is for a queue."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.messaging.servicebus.ServiceBusProcessorClient.getTopicName()"
  fullName: "com.azure.messaging.servicebus.ServiceBusProcessorClient.getTopicName()"
  name: "getTopicName()"
  nameWithType: "ServiceBusProcessorClient.getTopicName()"
  summary: "Returns the topic name associated with this instance of <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref>."
  syntax: "public String getTopicName()"
  desc: "Returns the topic name associated with this instance of <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref>."
  returns:
    description: "the topic name associated with this instance of <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref> or <code>null</code> if\n the processor instance is for a queue."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.messaging.servicebus.ServiceBusProcessorClient.isRunning()"
  fullName: "com.azure.messaging.servicebus.ServiceBusProcessorClient.isRunning()"
  name: "isRunning()"
  nameWithType: "ServiceBusProcessorClient.isRunning()"
  summary: "Returns `true` if the processor is running."
  modifiers:
  - "synchronized"
  syntax: "public synchronized boolean isRunning()"
  desc: "Returns `true` if the processor is running. If the processor is stopped or closed, this method returns `false`."
  returns:
    description: "<code>true</code> if the processor is running; <code>false</code> otherwise."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.messaging.servicebus.ServiceBusProcessorClient.start()"
  fullName: "com.azure.messaging.servicebus.ServiceBusProcessorClient.start()"
  name: "start()"
  nameWithType: "ServiceBusProcessorClient.start()"
  summary: "Starts the processor in the background."
  modifiers:
  - "synchronized"
  syntax: "public synchronized void start()"
  desc: "Starts the processor in the background. When this method is called, the processor will initiate a message receiver that will invoke the message handler when new messages are available. This method is idempotent (ie. calling `start()` again after the processor is already running is a no-op).\n\nCalling `start()` after calling <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient.stop()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"stop()\"></xref> will resume processing messages using the same underlying connection.\n\nCalling `start()` after calling <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient.close()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"close()\"></xref> will start the processor with a new connection."
- uid: "com.azure.messaging.servicebus.ServiceBusProcessorClient.stop()"
  fullName: "com.azure.messaging.servicebus.ServiceBusProcessorClient.stop()"
  name: "stop()"
  nameWithType: "ServiceBusProcessorClient.stop()"
  summary: "Stops the message processing for this processor."
  modifiers:
  - "synchronized"
  syntax: "public synchronized void stop()"
  desc: "Stops the message processing for this processor. The receiving links and sessions are kept active and this processor can resume processing messages by calling <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient.start()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#start()\"></xref> again."
type: "class"
desc: "The processor client for processing Service Bus messages. <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref> provides a push-based mechanism that invokes the message processing callback when a message is received or the error handler when an error occurs when receiving messages. A <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref> can be created to process messages for a session-enabled or non session-enabled Service Bus entity. It supports auto-settlement of messages by default.\n\n**Create and run a processor**\n\n```java\nConsumer<ServiceBusReceivedMessageContext> onMessage = context -> {\n     ServiceBusReceivedMessage message = context.getMessage();\n     System.out.printf(\"Processing message. Sequence #: %s. Contents: %s%n\",\n         message.getSequenceNumber(), message.getBody());\n };\n\n Consumer<ServiceBusErrorContext> onError = context -> {\n     System.out.printf(\"Error when receiving messages from namespace: '%s'. Entity: '%s'%n\",\n         context.getFullyQualifiedNamespace(), context.getEntityPath());\n\n     if (context.getException() instanceof ServiceBusException) {\n         ServiceBusException exception = (ServiceBusException) context.getException();\n         System.out.printf(\"Error source: %s, reason %s%n\", context.getErrorSource(),\n             exception.getReason());\n     } else {\n         System.out.printf(\"Error occurred: %s%n\", context.getException());\n     }\n };\n\n // Retrieve 'connectionString/queueName' from your configuration.\n\n ServiceBusProcessorClient processor = new ServiceBusClientBuilder()\n     .connectionString(connectionString)\n     .processor()\n     .queueName(queueName)\n     .processMessage(onMessage)\n     .processError(onError)\n     .buildProcessorClient();\n\n // Start the processor in the background\n processor.start();\n```\n\n**Create and run a session-enabled processor**\n\n```java\nConsumer<ServiceBusReceivedMessageContext> onMessage = context -> {\n     ServiceBusReceivedMessage message = context.getMessage();\n     System.out.printf(\"Processing message. Session: %s, Sequence #: %s. Contents: %s%n\",\n         message.getSessionId(), message.getSequenceNumber(), message.getBody());\n };\n\n Consumer<ServiceBusErrorContext> onError = context -> {\n     System.out.printf(\"Error when receiving messages from namespace: '%s'. Entity: '%s'%n\",\n         context.getFullyQualifiedNamespace(), context.getEntityPath());\n\n     if (context.getException() instanceof ServiceBusException) {\n         ServiceBusException exception = (ServiceBusException) context.getException();\n         System.out.printf(\"Error source: %s, reason %s%n\", context.getErrorSource(),\n             exception.getReason());\n     } else {\n         System.out.printf(\"Error occurred: %s%n\", context.getException());\n     }\n };\n\n // Retrieve 'connectionString/queueName' from your configuration.\n\n ServiceBusProcessorClient sessionProcessor = new ServiceBusClientBuilder()\n     .connectionString(connectionString)\n     .sessionProcessor()\n     .queueName(queueName)\n     .maxConcurrentSessions(2)\n     .processMessage(onMessage)\n     .processError(onError)\n     .buildProcessorClient();\n\n // Start the processor in the background\n sessionProcessor.start();\n```"
implements:
- "<xref href=\"java.lang.AutoCloseable?alt=java.lang.AutoCloseable&text=AutoCloseable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.messaging.servicebus"
artifact: com.azure:azure-messaging-servicebus:7.10.1
