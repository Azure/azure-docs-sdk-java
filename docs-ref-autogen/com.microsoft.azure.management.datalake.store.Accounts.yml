### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.management.datalake.store.Accounts.beginCreate(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  name: beginCreate(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  nameWithType: Accounts.beginCreate(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to create. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to create the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the DataLakeStoreAccount object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates the specified Data Lake Store account.</p>

    <p></p>
  syntax: public DataLakeStoreAccount beginCreate(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  uid: com.microsoft.azure.management.datalake.store.Accounts.beginCreate(String,String,DataLakeStoreAccount)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.beginCreateAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  name: beginCreateAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  nameWithType: Accounts.beginCreateAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to create. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to create the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeStoreAccount object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<DataLakeStoreAccount> beginCreateAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  uid: com.microsoft.azure.management.datalake.store.Accounts.beginCreateAsync(String,String,DataLakeStoreAccount)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.beginCreateAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  name: beginCreateAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  nameWithType: Accounts.beginCreateAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to create. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to create the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates the specified Data Lake Store account.</p>

    <p></p>
  syntax: public ServiceFuture<DataLakeStoreAccount> beginCreateAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.Accounts.beginCreateAsync(String,String,DataLakeStoreAccount,final ServiceCallback<DataLakeStoreAccount>)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.beginCreateWithServiceResponseAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  name: beginCreateWithServiceResponseAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  nameWithType: Accounts.beginCreateWithServiceResponseAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to create. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to create the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeStoreAccount object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Creates the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<DataLakeStoreAccount>> beginCreateWithServiceResponseAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  uid: com.microsoft.azure.management.datalake.store.Accounts.beginCreateWithServiceResponseAsync(String,String,DataLakeStoreAccount)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.beginDelete(String resourceGroupName, String name)
  name: beginDelete(String resourceGroupName, String name)
  nameWithType: Accounts.beginDelete(String resourceGroupName, String name)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to delete. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes the specified Data Lake Store account.</p>

    <p></p>
  syntax: public void beginDelete(String resourceGroupName, String name)
  uid: com.microsoft.azure.management.datalake.store.Accounts.beginDelete(String,String)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.beginDeleteAsync(String resourceGroupName, String name)
  name: beginDeleteAsync(String resourceGroupName, String name)
  nameWithType: Accounts.beginDeleteAsync(String resourceGroupName, String name)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to delete. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<Void> beginDeleteAsync(String resourceGroupName, String name)
  uid: com.microsoft.azure.management.datalake.store.Accounts.beginDeleteAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.beginDeleteAsync(String resourceGroupName, String name, final ServiceCallback<Void> serviceCallback)
  name: beginDeleteAsync(String resourceGroupName, String name, final ServiceCallback<Void> serviceCallback)
  nameWithType: Accounts.beginDeleteAsync(String resourceGroupName, String name, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to delete. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified Data Lake Store account.</p>

    <p></p>
  syntax: public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String name, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.Accounts.beginDeleteAsync(String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.beginDeleteWithServiceResponseAsync(String resourceGroupName, String name)
  name: beginDeleteWithServiceResponseAsync(String resourceGroupName, String name)
  nameWithType: Accounts.beginDeleteWithServiceResponseAsync(String resourceGroupName, String name)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to delete. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String name)
  uid: com.microsoft.azure.management.datalake.store.Accounts.beginDeleteWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.beginUpdate(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  name: beginUpdate(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  nameWithType: Accounts.beginUpdate(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to update. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountUpdateParameters?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountUpdateParameters&text=DataLakeStoreAccountUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the DataLakeStoreAccount object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the specified Data Lake Store account information.</p>

    <p></p>
  syntax: public DataLakeStoreAccount beginUpdate(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.store.Accounts.beginUpdate(String,String,DataLakeStoreAccountUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.beginUpdateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  name: beginUpdateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  nameWithType: Accounts.beginUpdateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to update. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountUpdateParameters?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountUpdateParameters&text=DataLakeStoreAccountUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeStoreAccount object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the specified Data Lake Store account information.</p>

    <p></p>
  syntax: public Observable<DataLakeStoreAccount> beginUpdateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.store.Accounts.beginUpdateAsync(String,String,DataLakeStoreAccountUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.beginUpdateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  name: beginUpdateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  nameWithType: Accounts.beginUpdateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to update. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountUpdateParameters?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountUpdateParameters&text=DataLakeStoreAccountUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the specified Data Lake Store account information.</p>

    <p></p>
  syntax: public ServiceFuture<DataLakeStoreAccount> beginUpdateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.Accounts.beginUpdateAsync(String,String,DataLakeStoreAccountUpdateParameters,final ServiceCallback<DataLakeStoreAccount>)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.beginUpdateWithServiceResponseAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  name: beginUpdateWithServiceResponseAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  nameWithType: Accounts.beginUpdateWithServiceResponseAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to update. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountUpdateParameters?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountUpdateParameters&text=DataLakeStoreAccountUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeStoreAccount object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the specified Data Lake Store account information.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<DataLakeStoreAccount>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.store.Accounts.beginUpdateWithServiceResponseAsync(String,String,DataLakeStoreAccountUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.create(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  name: create(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  nameWithType: Accounts.create(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to create. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to create the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the DataLakeStoreAccount object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates the specified Data Lake Store account.</p>

    <p></p>
  syntax: public DataLakeStoreAccount create(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  uid: com.microsoft.azure.management.datalake.store.Accounts.create(String,String,DataLakeStoreAccount)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.createAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  name: createAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  nameWithType: Accounts.createAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to create. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to create the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeStoreAccount object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<DataLakeStoreAccount> createAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  uid: com.microsoft.azure.management.datalake.store.Accounts.createAsync(String,String,DataLakeStoreAccount)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.createAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  name: createAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  nameWithType: Accounts.createAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to create. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to create the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates the specified Data Lake Store account.</p>

    <p></p>
  syntax: public ServiceFuture<DataLakeStoreAccount> createAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.Accounts.createAsync(String,String,DataLakeStoreAccount,final ServiceCallback<DataLakeStoreAccount>)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.createWithServiceResponseAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  name: createWithServiceResponseAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  nameWithType: Accounts.createWithServiceResponseAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to create. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to create the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeStoreAccount object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Creates the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<DataLakeStoreAccount>> createWithServiceResponseAsync(String resourceGroupName, String name, DataLakeStoreAccount parameters)
  uid: com.microsoft.azure.management.datalake.store.Accounts.createWithServiceResponseAsync(String,String,DataLakeStoreAccount)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.delete(String resourceGroupName, String name)
  name: delete(String resourceGroupName, String name)
  nameWithType: Accounts.delete(String resourceGroupName, String name)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to delete. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes the specified Data Lake Store account.</p>

    <p></p>
  syntax: public void delete(String resourceGroupName, String name)
  uid: com.microsoft.azure.management.datalake.store.Accounts.delete(String,String)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.deleteAsync(String resourceGroupName, String name)
  name: deleteAsync(String resourceGroupName, String name)
  nameWithType: Accounts.deleteAsync(String resourceGroupName, String name)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to delete. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String resourceGroupName, String name)
  uid: com.microsoft.azure.management.datalake.store.Accounts.deleteAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.deleteAsync(String resourceGroupName, String name, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String resourceGroupName, String name, final ServiceCallback<Void> serviceCallback)
  nameWithType: Accounts.deleteAsync(String resourceGroupName, String name, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to delete. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified Data Lake Store account.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String resourceGroupName, String name, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.Accounts.deleteAsync(String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.deleteWithServiceResponseAsync(String resourceGroupName, String name)
  name: deleteWithServiceResponseAsync(String resourceGroupName, String name)
  nameWithType: Accounts.deleteWithServiceResponseAsync(String resourceGroupName, String name)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to delete. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String name)
  uid: com.microsoft.azure.management.datalake.store.Accounts.deleteWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.enableKeyVault(String resourceGroupName, String accountName)
  name: enableKeyVault(String resourceGroupName, String accountName)
  nameWithType: Accounts.enableKeyVault(String resourceGroupName, String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to attempt to enable the Key Vault for. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Attempts to enable a user managed Key Vault for encryption of the specified Data Lake Store account.</p>

    <p></p>
  syntax: public void enableKeyVault(String resourceGroupName, String accountName)
  uid: com.microsoft.azure.management.datalake.store.Accounts.enableKeyVault(String,String)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.enableKeyVaultAsync(String resourceGroupName, String accountName)
  name: enableKeyVaultAsync(String resourceGroupName, String accountName)
  nameWithType: Accounts.enableKeyVaultAsync(String resourceGroupName, String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to attempt to enable the Key Vault for. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Attempts to enable a user managed Key Vault for encryption of the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<Void> enableKeyVaultAsync(String resourceGroupName, String accountName)
  uid: com.microsoft.azure.management.datalake.store.Accounts.enableKeyVaultAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.enableKeyVaultAsync(String resourceGroupName, String accountName, final ServiceCallback<Void> serviceCallback)
  name: enableKeyVaultAsync(String resourceGroupName, String accountName, final ServiceCallback<Void> serviceCallback)
  nameWithType: Accounts.enableKeyVaultAsync(String resourceGroupName, String accountName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to attempt to enable the Key Vault for. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Attempts to enable a user managed Key Vault for encryption of the specified Data Lake Store account.</p>

    <p></p>
  syntax: public ServiceFuture<Void> enableKeyVaultAsync(String resourceGroupName, String accountName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.Accounts.enableKeyVaultAsync(String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.enableKeyVaultWithServiceResponseAsync(String resourceGroupName, String accountName)
  name: enableKeyVaultWithServiceResponseAsync(String resourceGroupName, String accountName)
  nameWithType: Accounts.enableKeyVaultWithServiceResponseAsync(String resourceGroupName, String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to attempt to enable the Key Vault for. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Attempts to enable a user managed Key Vault for encryption of the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> enableKeyVaultWithServiceResponseAsync(String resourceGroupName, String accountName)
  uid: com.microsoft.azure.management.datalake.store.Accounts.enableKeyVaultWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.get(String resourceGroupName, String name)
  name: get(String resourceGroupName, String name)
  nameWithType: Accounts.get(String resourceGroupName, String name)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to retrieve. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the DataLakeStoreAccount object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the specified Data Lake Store account.</p>

    <p></p>
  syntax: public DataLakeStoreAccount get(String resourceGroupName, String name)
  uid: com.microsoft.azure.management.datalake.store.Accounts.get(String,String)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.getAsync(String resourceGroupName, String name)
  name: getAsync(String resourceGroupName, String name)
  nameWithType: Accounts.getAsync(String resourceGroupName, String name)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to retrieve. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeStoreAccount object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<DataLakeStoreAccount> getAsync(String resourceGroupName, String name)
  uid: com.microsoft.azure.management.datalake.store.Accounts.getAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.getAsync(String resourceGroupName, String name, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  name: getAsync(String resourceGroupName, String name, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  nameWithType: Accounts.getAsync(String resourceGroupName, String name, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to retrieve. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the specified Data Lake Store account.</p>

    <p></p>
  syntax: public ServiceFuture<DataLakeStoreAccount> getAsync(String resourceGroupName, String name, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.Accounts.getAsync(String,String,final ServiceCallback<DataLakeStoreAccount>)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.getWithServiceResponseAsync(String resourceGroupName, String name)
  name: getWithServiceResponseAsync(String resourceGroupName, String name)
  nameWithType: Accounts.getWithServiceResponseAsync(String resourceGroupName, String name)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to retrieve. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeStoreAccount object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<DataLakeStoreAccount>> getWithServiceResponseAsync(String resourceGroupName, String name)
  uid: com.microsoft.azure.management.datalake.store.Accounts.getWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.list()
  name: list()
  nameWithType: Accounts.list()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;DataLakeStoreAccountBasic&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public PagedList<DataLakeStoreAccountBasic> list()
  uid: com.microsoft.azure.management.datalake.store.Accounts.list()
- fullName: com.microsoft.azure.management.datalake.store.Accounts.list(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: list(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Accounts.list(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;DataLakeStoreAccountBasic&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public PagedList<DataLakeStoreAccountBasic> list(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.store.Accounts.list(final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listAsync()
  name: listAsync()
  nameWithType: Accounts.listAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeStoreAccountBasic&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<Page<DataLakeStoreAccountBasic>> listAsync()
  uid: com.microsoft.azure.management.datalake.store.Accounts.listAsync()
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listAsync(final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  name: listAsync(final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  nameWithType: Accounts.listAsync(final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  parameters:
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<DataLakeStoreAccountBasic>> listAsync(final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.Accounts.listAsync(final ListOperationCallback<DataLakeStoreAccountBasic>)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Accounts.listAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeStoreAccountBasic&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<Page<DataLakeStoreAccountBasic>> listAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.store.Accounts.listAsync(final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  name: listAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  nameWithType: Accounts.listAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  parameters:
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<DataLakeStoreAccountBasic>> listAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.Accounts.listAsync(final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<DataLakeStoreAccountBasic>)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroup(final String resourceGroupName)
  name: listByResourceGroup(final String resourceGroupName)
  nameWithType: Accounts.listByResourceGroup(final String resourceGroupName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account(s). </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;DataLakeStoreAccountBasic&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within a specific resource group. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public PagedList<DataLakeStoreAccountBasic> listByResourceGroup(final String resourceGroupName)
  uid: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroup(final String)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroup(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listByResourceGroup(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Accounts.listByResourceGroup(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account(s). </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;DataLakeStoreAccountBasic&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within a specific resource group. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public PagedList<DataLakeStoreAccountBasic> listByResourceGroup(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroup(final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroupAsync(final String resourceGroupName)
  name: listByResourceGroupAsync(final String resourceGroupName)
  nameWithType: Accounts.listByResourceGroupAsync(final String resourceGroupName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account(s). </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeStoreAccountBasic&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within a specific resource group. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<Page<DataLakeStoreAccountBasic>> listByResourceGroupAsync(final String resourceGroupName)
  uid: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroupAsync(final String)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  name: listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  nameWithType: Accounts.listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account(s). </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within a specific resource group. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<DataLakeStoreAccountBasic>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroupAsync(final String,final ListOperationCallback<DataLakeStoreAccountBasic>)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Accounts.listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account(s). </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeStoreAccountBasic&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within a specific resource group. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<Page<DataLakeStoreAccountBasic>> listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroupAsync(final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  name: listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  nameWithType: Accounts.listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account(s). </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within a specific resource group. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<DataLakeStoreAccountBasic>> listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroupAsync(final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<DataLakeStoreAccountBasic>)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroupNext(final String nextPageLink)
  name: listByResourceGroupNext(final String nextPageLink)
  nameWithType: Accounts.listByResourceGroupNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;DataLakeStoreAccountBasic&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within a specific resource group. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public PagedList<DataLakeStoreAccountBasic> listByResourceGroupNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroupNext(final String)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroupNextAsync(final String nextPageLink)
  name: listByResourceGroupNextAsync(final String nextPageLink)
  nameWithType: Accounts.listByResourceGroupNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeStoreAccountBasic&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within a specific resource group. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<Page<DataLakeStoreAccountBasic>> listByResourceGroupNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroupNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<DataLakeStoreAccountBasic>> serviceFuture, final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  name: listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<DataLakeStoreAccountBasic>> serviceFuture, final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  nameWithType: Accounts.listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<DataLakeStoreAccountBasic>> serviceFuture, final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within a specific resource group. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<DataLakeStoreAccountBasic>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<DataLakeStoreAccountBasic>> serviceFuture, final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroupNextAsync(final String,final ServiceFuture<List<DataLakeStoreAccountBasic>>,final ListOperationCallback<DataLakeStoreAccountBasic>)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink)
  name: listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Accounts.listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeStoreAccountBasic&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within a specific resource group. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<DataLakeStoreAccountBasic>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroupNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroupWithServiceResponseAsync(final String resourceGroupName)
  name: listByResourceGroupWithServiceResponseAsync(final String resourceGroupName)
  nameWithType: Accounts.listByResourceGroupWithServiceResponseAsync(final String resourceGroupName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account(s). </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeStoreAccountBasic&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within a specific resource group. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<DataLakeStoreAccountBasic>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName)
  uid: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroupWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Accounts.listByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account(s). </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeStoreAccountBasic&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within a specific resource group. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<DataLakeStoreAccountBasic>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.store.Accounts.listByResourceGroupWithServiceResponseAsync(final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listNext(final String nextPageLink)
  name: listNext(final String nextPageLink)
  nameWithType: Accounts.listNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;DataLakeStoreAccountBasic&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public PagedList<DataLakeStoreAccountBasic> listNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.store.Accounts.listNext(final String)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listNextAsync(final String nextPageLink)
  name: listNextAsync(final String nextPageLink)
  nameWithType: Accounts.listNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeStoreAccountBasic&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<Page<DataLakeStoreAccountBasic>> listNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.store.Accounts.listNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listNextAsync(final String nextPageLink, final ServiceFuture<List<DataLakeStoreAccountBasic>> serviceFuture, final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  name: listNextAsync(final String nextPageLink, final ServiceFuture<List<DataLakeStoreAccountBasic>> serviceFuture, final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  nameWithType: Accounts.listNextAsync(final String nextPageLink, final ServiceFuture<List<DataLakeStoreAccountBasic>> serviceFuture, final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<DataLakeStoreAccountBasic>> listNextAsync(final String nextPageLink, final ServiceFuture<List<DataLakeStoreAccountBasic>> serviceFuture, final ListOperationCallback<DataLakeStoreAccountBasic> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.Accounts.listNextAsync(final String,final ServiceFuture<List<DataLakeStoreAccountBasic>>,final ListOperationCallback<DataLakeStoreAccountBasic>)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listNextWithServiceResponseAsync(final String nextPageLink)
  name: listNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Accounts.listNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeStoreAccountBasic&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<DataLakeStoreAccountBasic>>> listNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.store.Accounts.listNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listWithServiceResponseAsync()
  name: listWithServiceResponseAsync()
  nameWithType: Accounts.listWithServiceResponseAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeStoreAccountBasic&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<DataLakeStoreAccountBasic>>> listWithServiceResponseAsync()
  uid: com.microsoft.azure.management.datalake.store.Accounts.listWithServiceResponseAsync()
- fullName: com.microsoft.azure.management.datalake.store.Accounts.listWithServiceResponseAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listWithServiceResponseAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Accounts.listWithServiceResponseAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeStoreAccountBasic&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountBasic&text=DataLakeStoreAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<DataLakeStoreAccountBasic>>> listWithServiceResponseAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.store.Accounts.listWithServiceResponseAsync(final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.update(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  name: update(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  nameWithType: Accounts.update(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to update. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountUpdateParameters?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountUpdateParameters&text=DataLakeStoreAccountUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the DataLakeStoreAccount object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the specified Data Lake Store account information.</p>

    <p></p>
  syntax: public DataLakeStoreAccount update(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.store.Accounts.update(String,String,DataLakeStoreAccountUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.updateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  name: updateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  nameWithType: Accounts.updateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to update. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountUpdateParameters?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountUpdateParameters&text=DataLakeStoreAccountUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeStoreAccount object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the specified Data Lake Store account information.</p>

    <p></p>
  syntax: public Observable<DataLakeStoreAccount> updateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.store.Accounts.updateAsync(String,String,DataLakeStoreAccountUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.updateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  name: updateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  nameWithType: Accounts.updateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to update. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountUpdateParameters?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountUpdateParameters&text=DataLakeStoreAccountUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the specified Data Lake Store account information.</p>

    <p></p>
  syntax: public ServiceFuture<DataLakeStoreAccount> updateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.Accounts.updateAsync(String,String,DataLakeStoreAccountUpdateParameters,final ServiceCallback<DataLakeStoreAccount>)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.updateWithServiceResponseAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  name: updateWithServiceResponseAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  nameWithType: Accounts.updateWithServiceResponseAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to update. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountUpdateParameters?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountUpdateParameters&text=DataLakeStoreAccountUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeStoreAccount object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the specified Data Lake Store account information.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<DataLakeStoreAccount>> updateWithServiceResponseAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.store.Accounts.updateWithServiceResponseAsync(String,String,DataLakeStoreAccountUpdateParameters)
nameWithType: Accounts
syntax: public interface Accounts
type: interface
uid: com.microsoft.azure.management.datalake.store.Accounts
fullName: com.microsoft.azure.management.datalake.store.Accounts
name: Accounts
package: com.microsoft.azure.management.datalake.store
summary: <p>An instance of this class provides access to all the operations defined in Accounts. </p>
metadata: {}
