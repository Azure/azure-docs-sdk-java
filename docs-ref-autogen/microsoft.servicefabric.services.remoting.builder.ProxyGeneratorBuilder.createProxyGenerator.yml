### YamlMime:JavaMember
nameWithType: ProxyGeneratorBuilder.createProxyGenerator
type: method
members:
- fullName: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuilder.createProxyGenerator(Class<?> interfaceType, Class<?> proxyActivatorType)
  name: createProxyGenerator(Class<?> interfaceType, Class<?> proxyActivatorType)
  nameWithType: ProxyGeneratorBuilder.createProxyGenerator(Class<?> interfaceType, Class<?> proxyActivatorType)
  parameters:
  - name: interfaceType
    type: <xref href="Class%3C%3F%3E?alt=Class<?>&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  - name: proxyActivatorType
    type: <xref href="Class%3C%3F%3E?alt=Class<?>&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  returns:
    type: abstract <xref href="microsoft.servicefabric.services.remoting.builder.ProxyGenerator?alt=microsoft.servicefabric.services.remoting.builder.ProxyGenerator&text=ProxyGenerator" data-throw-if-not-resolved="False"/>
  syntax: protected abstract ProxyGenerator createProxyGenerator(Class<?> interfaceType, Class<?> proxyActivatorType)
  uid: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuilder.createProxyGenerator(Class<?>,Class<?>)
uid: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuilder.createProxyGenerator*
fullName: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuilder.createProxyGenerator(Class<?> interfaceType, Class<?> proxyActivatorType)
name: createProxyGenerator(Class<?> interfaceType, Class<?> proxyActivatorType)
package: microsoft.servicefabric.services.remoting.builder
metadata: {}
