### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.MqttConnection(String hostname, String clientId, String userName, String password, SSLContext sslContext, MqttListener listener, boolean useWebSockets)
  name: MqttConnection(String hostname, String clientId, String userName, String password, SSLContext sslContext, MqttListener listener, boolean useWebSockets)
  nameWithType: MqttConnection.MqttConnection(String hostname, String clientId, String userName, String password, SSLContext sslContext, MqttListener listener, boolean useWebSockets)
  parameters:
  - description: <p>Uri to connect to </p>
    name: hostname
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Client Id to connect to </p>
    name: clientId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Username </p>
    name: userName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>password </p>
    name: password
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>SSLContext for the connection </p>
    name: sslContext
    type: <xref href="SSLContext?alt=SSLContext&text=SSLContext" data-throw-if-not-resolved="False"/>
  - description: <p>Mqtt listener </p>
    name: listener
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttListener?alt=com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttListener&text=MqttListener" data-throw-if-not-resolved="False"/>
  - description: <p>true to use Mqtt over web sockets </p>
    name: useWebSockets
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>is thrown if any of the parameters are null or empty or client cannot be instantiated </p>
  summary: <p>Constructor to create MqttAsync Client with Paho </p>
  syntax: public MqttConnection(String hostname, String clientId, String userName, String password, SSLContext sslContext, MqttListener listener, boolean useWebSockets)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.MqttConnection(String,String,String,String,SSLContext,MqttListener,boolean)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="MqttCallback" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.connect()
  name: connect()
  nameWithType: MqttConnection.connect()
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>if there is a Mqtt exception. </p>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: <p>Connects to the MQTT broker </p>
  syntax: public synchronized void connect()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.connect()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.connectionLost(Throwable throwable)
  name: connectionLost(Throwable throwable)
  nameWithType: MqttConnection.connectionLost(Throwable throwable)
  parameters:
  - description: <p>the disconnection reason. </p>
    name: throwable
    type: <xref href="Throwable?alt=Throwable&text=Throwable" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: <p>Event fired when the connection is lost on the MQTT broker </p>
  syntax: public synchronized void connectionLost(Throwable throwable)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.connectionLost(Throwable)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken)
  name: deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken)
  nameWithType: MqttConnection.deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken)
  parameters:
  - description: <p>the MqttDeliveryToken for which the message was successfully sent. </p>
    name: iMqttDeliveryToken
    type: <xref href="IMqttDeliveryToken?alt=IMqttDeliveryToken&text=IMqttDeliveryToken" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: <p>Event fired when the message arrived on the MQTT broker. </p>
  syntax: public synchronized void deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.deliveryComplete(IMqttDeliveryToken)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.disconnect()
  name: disconnect()
  nameWithType: MqttConnection.disconnect()
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>if there is a Mqtt exception. </p>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: <p>Disconnects from the MQTT broker </p>
  syntax: public synchronized void disconnect()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.disconnect()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.getConnectionId()
  name: getConnectionId()
  nameWithType: MqttConnection.getConnectionId()
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getConnectionId()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.getConnectionId()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.getHostName()
  name: getHostName()
  nameWithType: MqttConnection.getHostName()
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getHostName()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.getHostName()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.isMqttConnected()
  name: isMqttConnected()
  nameWithType: MqttConnection.isMqttConnected()
  returns:
    description: <p>true if connected using Mqtt </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>Return whether the MQTT broker is connected to the endpoint </p>
  syntax: public boolean isMqttConnected()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.isMqttConnected()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.messageArrived(String topic, org.eclipse.paho.client.mqttv3.MqttMessage mqttMessage)
  name: messageArrived(String topic, org.eclipse.paho.client.mqttv3.MqttMessage mqttMessage)
  nameWithType: MqttConnection.messageArrived(String topic, org.eclipse.paho.client.mqttv3.MqttMessage mqttMessage)
  parameters:
  - description: <p>the topic on which message arrived. </p>
    name: topic
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the message arrived on the Mqtt broker. </p>
    name: mqttMessage
    type: <xref href="org.eclipse.paho.client.mqttv3.MqttMessage?alt=org.eclipse.paho.client.mqttv3.MqttMessage&text=org.eclipse.paho.client.mqttv3.MqttMessage" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: <p>Event fired when the message arrived on the MQTT broker. </p>
  syntax: public synchronized void messageArrived(String topic, org.eclipse.paho.client.mqttv3.MqttMessage mqttMessage)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.messageArrived(String,org.eclipse.paho.client.mqttv3.MqttMessage)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.publishMessage(MqttMessage message)
  name: publishMessage(MqttMessage message)
  nameWithType: MqttConnection.publishMessage(MqttMessage message)
  parameters:
  - description: <p>The message to be sent </p>
    name: message
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage?alt=com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage&text=MqttMessage" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>if there is a Mqtt exception. </p>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: <p>Sends a PUBLISH message to the MQTT broker </p>
  syntax: public synchronized void publishMessage(MqttMessage message)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.publishMessage(MqttMessage)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.publishMessage(String topic, MqttQos qos, byte[] message)
  name: publishMessage(String topic, MqttQos qos, byte[] message)
  nameWithType: MqttConnection.publishMessage(String topic, MqttQos qos, byte[] message)
  parameters:
  - description: <p>The topic of the message </p>
    name: topic
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The QOS of the message </p>
    name: qos
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttQos?alt=com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttQos&text=MqttQos" data-throw-if-not-resolved="False"/>
  - description: <p>The message to be sent </p>
    name: message
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>if there is a Mqtt exception. </p>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: <p>Sends a PUBLISH message to the MQTT broker </p>
  syntax: public synchronized void publishMessage(String topic, MqttQos qos, byte[] message)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.publishMessage(String,MqttQos,byte [])
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.subscribe(String topic, MqttQos qos)
  name: subscribe(String topic, MqttQos qos)
  nameWithType: MqttConnection.subscribe(String topic, MqttQos qos)
  parameters:
  - description: <p>The topic of the message </p>
    name: topic
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The QOS of the message </p>
    name: qos
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttQos?alt=com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttQos&text=MqttQos" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>if there is a Mqtt exception. </p>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: <p>Send the SUBSCRIBE message to the MQTT broker </p>
  syntax: public synchronized void subscribe(String topic, MqttQos qos)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.subscribe(String,MqttQos)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.unsubscribe(String topic)
  name: unsubscribe(String topic)
  nameWithType: MqttConnection.unsubscribe(String topic)
  parameters:
  - description: <p>Name of the Topic to unsubscribe. </p>
    name: topic
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>if there is a Mqtt exception. </p>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: <p>Send the UNSUBSCRIBE message to the MQTT broker </p>
  syntax: public synchronized void unsubscribe(String topic)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection.unsubscribe(String)
nameWithType: MqttConnection
syntax: public class MqttConnection
type: class
uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection
fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttConnection
name: MqttConnection
package: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt
metadata: {}
