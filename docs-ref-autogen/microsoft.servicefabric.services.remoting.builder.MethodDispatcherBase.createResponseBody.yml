### YamlMime:JavaMember
nameWithType: MethodDispatcherBase.createResponseBody
type: method
members:
- fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.createResponseBody(int methodId, Object returnValue)
  name: createResponseBody(int methodId, Object returnValue)
  nameWithType: MethodDispatcherBase.createResponseBody(int methodId, Object returnValue)
  parameters:
  - description: <p>Id of the method. </p>
    name: methodId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>The returned value from the method. </p>
    name: returnValue
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false">Object</xref> that represents the response body to be sent back to the client. </p>
    type: <xref href="abstract+Object?alt=abstract Object&text=abstract+Object" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method is implemented by the generated method dispatcher to create the response from the specified return value as a result of dispatching the method to the remoted object.</p>

    <p></p>
  syntax: protected abstract Object createResponseBody(int methodId, Object returnValue)
  uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.createResponseBody(int,Object)
uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.createResponseBody*
fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.createResponseBody(int methodId, Object returnValue)
name: createResponseBody(int methodId, Object returnValue)
package: microsoft.servicefabric.services.remoting.builder
metadata: {}
