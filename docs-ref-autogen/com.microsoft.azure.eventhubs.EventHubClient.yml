### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.eventhubs.EventHubClient
  id: EventHubClient
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs
  children:
  - com.microsoft.azure.eventhubs.EventHubClient.DEFAULT_CONSUMER_GROUP_NAME
  - com.microsoft.azure.eventhubs.EventHubClient.close()
  - com.microsoft.azure.eventhubs.EventHubClient.closeSync()
  - com.microsoft.azure.eventhubs.EventHubClient.createBatch()
  - com.microsoft.azure.eventhubs.EventHubClient.createBatch(com.microsoft.azure.eventhubs.BatchOptions)
  - com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,long)
  - com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,long,com.microsoft.azure.eventhubs.ReceiverOptions)
  - com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiverSync(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,long)
  - com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiverSync(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,long,com.microsoft.azure.eventhubs.ReceiverOptions)
  - com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService)
  - com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.ProxyConfiguration)
  - com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.ProxyConfiguration,java.time.Duration)
  - com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString(java.lang.String,java.util.concurrent.ScheduledExecutorService)
  - com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionStringSync(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService)
  - com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionStringSync(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.ProxyConfiguration)
  - com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionStringSync(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.ProxyConfiguration,java.time.Duration)
  - com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionStringSync(java.lang.String,java.util.concurrent.ScheduledExecutorService)
  - com.microsoft.azure.eventhubs.EventHubClient.createPartitionSender(java.lang.String)
  - com.microsoft.azure.eventhubs.EventHubClient.createPartitionSenderSync(java.lang.String)
  - com.microsoft.azure.eventhubs.EventHubClient.createReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition)
  - com.microsoft.azure.eventhubs.EventHubClient.createReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,com.microsoft.azure.eventhubs.ReceiverOptions)
  - com.microsoft.azure.eventhubs.EventHubClient.createReceiverSync(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition)
  - com.microsoft.azure.eventhubs.EventHubClient.createReceiverSync(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,com.microsoft.azure.eventhubs.ReceiverOptions)
  - com.microsoft.azure.eventhubs.EventHubClient.createWithAzureActiveDirectory(java.net.URI,java.lang.String,com.microsoft.azure.eventhubs.AzureActiveDirectoryTokenProvider.AuthenticationCallback,java.lang.String,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.EventHubClientOptions)
  - com.microsoft.azure.eventhubs.EventHubClient.createWithTokenProvider(java.net.URI,java.lang.String,com.microsoft.azure.eventhubs.ITokenProvider,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.EventHubClientOptions)
  - com.microsoft.azure.eventhubs.EventHubClient.getEventHubName()
  - com.microsoft.azure.eventhubs.EventHubClient.getPartitionRuntimeInformation(java.lang.String)
  - com.microsoft.azure.eventhubs.EventHubClient.getRuntimeInformation()
  - com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData)
  - com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData,java.lang.String)
  - com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventDataBatch)
  - com.microsoft.azure.eventhubs.EventHubClient.send(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>)
  - com.microsoft.azure.eventhubs.EventHubClient.send(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>,java.lang.String)
  - com.microsoft.azure.eventhubs.EventHubClient.sendSync(com.microsoft.azure.eventhubs.EventData)
  - com.microsoft.azure.eventhubs.EventHubClient.sendSync(com.microsoft.azure.eventhubs.EventData,java.lang.String)
  - com.microsoft.azure.eventhubs.EventHubClient.sendSync(com.microsoft.azure.eventhubs.EventDataBatch)
  - com.microsoft.azure.eventhubs.EventHubClient.sendSync(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>)
  - com.microsoft.azure.eventhubs.EventHubClient.sendSync(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>,java.lang.String)
  langs:
  - java
  name: EventHubClient
  nameWithType: EventHubClient
  fullName: com.microsoft.azure.eventhubs.EventHubClient
  type: Interface
  package: com.microsoft.azure.eventhubs
  summary: Anchor class - all EventHub client operations STARTS here.
  syntax:
    content: public interface EventHubClient
- uid: com.microsoft.azure.eventhubs.EventHubClient.DEFAULT_CONSUMER_GROUP_NAME
  id: DEFAULT_CONSUMER_GROUP_NAME
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: DEFAULT_CONSUMER_GROUP_NAME
  nameWithType: EventHubClient.DEFAULT_CONSUMER_GROUP_NAME
  fullName: com.microsoft.azure.eventhubs.EventHubClient.DEFAULT_CONSUMER_GROUP_NAME
  type: Field
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public static final String DEFAULT_CONSUMER_GROUP_NAME
    return:
      type: java.lang.String
- uid: com.microsoft.azure.eventhubs.EventHubClient.close()
  id: close()
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: close()
  nameWithType: EventHubClient.close()
  fullName: com.microsoft.azure.eventhubs.EventHubClient.close()
  overload: com.microsoft.azure.eventhubs.EventHubClient.close*
  type: Method
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public abstract CompletableFuture<Void> close()
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.eventhubs.EventHubClient.closeSync()
  id: closeSync()
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: closeSync()
  nameWithType: EventHubClient.closeSync()
  fullName: com.microsoft.azure.eventhubs.EventHubClient.closeSync()
  overload: com.microsoft.azure.eventhubs.EventHubClient.closeSync*
  type: Method
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public abstract void closeSync()
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
- uid: com.microsoft.azure.eventhubs.EventHubClient.createBatch()
  id: createBatch()
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createBatch()
  nameWithType: EventHubClient.createBatch()
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createBatch()
  overload: com.microsoft.azure.eventhubs.EventHubClient.createBatch*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Creates an Empty Collection of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>. The same partitionKey must be used while sending these events using <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventDataBatch)" data-throw-if-not-resolved="false">EventHubClient#send(EventDataBatch)</xref>.
  syntax:
    content: public default EventDataBatch createBatch()
    return:
      type: com.microsoft.azure.eventhubs.EventDataBatch
      description: the empty <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false">EventDataBatch</xref>, after negotiating maximum message size with EventHubs service
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: if the Microsoft Azure Event Hubs service encountered problems during the operation.
- uid: com.microsoft.azure.eventhubs.EventHubClient.createBatch(com.microsoft.azure.eventhubs.BatchOptions)
  id: createBatch(com.microsoft.azure.eventhubs.BatchOptions)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createBatch(BatchOptions options)
  nameWithType: EventHubClient.createBatch(BatchOptions options)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createBatch(BatchOptions options)
  overload: com.microsoft.azure.eventhubs.EventHubClient.createBatch*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Creates an Empty Collection of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>. The same partitionKey must be used while sending these events using <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventDataBatch)" data-throw-if-not-resolved="false">EventHubClient#send(EventDataBatch)</xref>.
  syntax:
    content: public abstract EventDataBatch createBatch(BatchOptions options)
    parameters:
    - id: options
      type: com.microsoft.azure.eventhubs.BatchOptions
      description: see <xref uid="com.microsoft.azure.eventhubs.BatchOptions" data-throw-if-not-resolved="false">BatchOptions</xref> for more details
    return:
      type: com.microsoft.azure.eventhubs.EventDataBatch
      description: the empty <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false">EventDataBatch</xref>, after negotiating maximum message size with EventHubs service
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: if the Microsoft Azure Event Hubs service encountered problems during the operation.
- uid: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,long)
  id: createEpochReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,long)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createEpochReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch)
  nameWithType: EventHubClient.createEpochReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch)
  overload: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiver*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: >-
    Create a Epoch based EventHub receiver with given partition id and start receiving from the beginning of the partition stream. The receiver is created for a specific EventHub Partition from the specific consumer group.


    It is important to pay attention to the following when creating epoch based receiver:

     *  Ownership enforcement - Once you created an epoch based receiver, you cannot create a non-epoch receiver to the same consumerGroup-Partition combo until all receivers to the combo are closed.
     *  Ownership stealing - If a receiver with higher epoch value is created for a consumerGroup-Partition combo, any older epoch receiver to that combo will be force closed.
     *  Any receiver closed due to lost of ownership to a consumerGroup-Partition combo will get ReceiverDisconnectedException for all operations from that receiver.
  syntax:
    content: public abstract CompletableFuture<PartitionReceiver> createEpochReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch)
    parameters:
    - id: consumerGroupName
      type: java.lang.String
      description: the consumer group name that this receiver should be grouped under.
    - id: partitionId
      type: java.lang.String
      description: the partition Id that the receiver belongs to. All data received will be from this partition only.
    - id: eventPosition
      type: com.microsoft.azure.eventhubs.EventPosition
      description: the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs.EventPosition" data-throw-if-not-resolved="false">EventPosition</xref>
    - id: epoch
      type: long
      description: an unique identifier (epoch value) that the service uses, to enforce partition/lease ownership.
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.PartitionReceiver>
      description: a CompletableFuture that would result in a PartitionReceiver when it is completed.
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: if Service Bus service encountered problems during the operation.
- uid: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,long,com.microsoft.azure.eventhubs.ReceiverOptions)
  id: createEpochReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,long,com.microsoft.azure.eventhubs.ReceiverOptions)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createEpochReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch, ReceiverOptions receiverOptions)
  nameWithType: EventHubClient.createEpochReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch, ReceiverOptions receiverOptions)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch, ReceiverOptions receiverOptions)
  overload: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiver*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: >-
    Create a Epoch based EventHub receiver with given partition id and start receiving from the beginning of the partition stream. The receiver is created for a specific EventHub Partition from the specific consumer group.


    It is important to pay attention to the following when creating epoch based receiver:

     *  Ownership enforcement - Once you created an epoch based receiver, you cannot create a non-epoch receiver to the same consumerGroup-Partition combo until all receivers to the combo are closed.
     *  Ownership stealing - If a receiver with higher epoch value is created for a consumerGroup-Partition combo, any older epoch receiver to that combo will be force closed.
     *  Any receiver closed due to lost of ownership to a consumerGroup-Partition combo will get ReceiverDisconnectedException for all operations from that receiver.
  syntax:
    content: public abstract CompletableFuture<PartitionReceiver> createEpochReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch, ReceiverOptions receiverOptions)
    parameters:
    - id: consumerGroupName
      type: java.lang.String
      description: the consumer group name that this receiver should be grouped under.
    - id: partitionId
      type: java.lang.String
      description: the partition Id that the receiver belongs to. All data received will be from this partition only.
    - id: eventPosition
      type: com.microsoft.azure.eventhubs.EventPosition
      description: the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs.EventPosition" data-throw-if-not-resolved="false">EventPosition</xref>
    - id: epoch
      type: long
      description: an unique identifier (epoch value) that the service uses, to enforce partition/lease ownership.
    - id: receiverOptions
      type: com.microsoft.azure.eventhubs.ReceiverOptions
      description: the set of options to enable on the event hubs receiver
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.PartitionReceiver>
      description: a CompletableFuture that would result in a PartitionReceiver when it is completed.
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: if Service Bus service encountered problems during the operation.
- uid: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiverSync(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,long)
  id: createEpochReceiverSync(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,long)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createEpochReceiverSync(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch)
  nameWithType: EventHubClient.createEpochReceiverSync(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiverSync(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch)
  overload: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiverSync*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,long)" data-throw-if-not-resolved="false">#createEpochReceiver(String, String, EventPosition, long)</xref>.
  syntax:
    content: public default PartitionReceiver createEpochReceiverSync(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch)
    parameters:
    - id: consumerGroupName
      type: java.lang.String
      description: the consumer group name that this receiver should be grouped under.
    - id: partitionId
      type: java.lang.String
      description: the partition Id that the receiver belongs to. All data received will be from this partition only.
    - id: eventPosition
      type: com.microsoft.azure.eventhubs.EventPosition
      description: the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs.EventPosition" data-throw-if-not-resolved="false">EventPosition</xref>
    - id: epoch
      type: long
      description: an unique identifier (epoch value) that the service uses, to enforce partition/lease ownership.
    return:
      type: com.microsoft.azure.eventhubs.PartitionReceiver
      description: PartitionReceiver instance which can be used for receiving <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>.
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: if Service Bus service encountered problems during the operation.
- uid: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiverSync(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,long,com.microsoft.azure.eventhubs.ReceiverOptions)
  id: createEpochReceiverSync(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,long,com.microsoft.azure.eventhubs.ReceiverOptions)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createEpochReceiverSync(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch, ReceiverOptions receiverOptions)
  nameWithType: EventHubClient.createEpochReceiverSync(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch, ReceiverOptions receiverOptions)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiverSync(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch, ReceiverOptions receiverOptions)
  overload: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiverSync*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,long)" data-throw-if-not-resolved="false">#createEpochReceiver(String, String, EventPosition, long)</xref>.
  syntax:
    content: public default PartitionReceiver createEpochReceiverSync(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch, ReceiverOptions receiverOptions)
    parameters:
    - id: consumerGroupName
      type: java.lang.String
      description: the consumer group name that this receiver should be grouped under.
    - id: partitionId
      type: java.lang.String
      description: the partition Id that the receiver belongs to. All data received will be from this partition only.
    - id: eventPosition
      type: com.microsoft.azure.eventhubs.EventPosition
      description: the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs.EventPosition" data-throw-if-not-resolved="false">EventPosition</xref>
    - id: epoch
      type: long
      description: an unique identifier (epoch value) that the service uses, to enforce partition/lease ownership.
    - id: receiverOptions
      type: com.microsoft.azure.eventhubs.ReceiverOptions
      description: the set of options to enable on the event hubs receiver
    return:
      type: com.microsoft.azure.eventhubs.PartitionReceiver
      description: PartitionReceiver instance which can be used for receiving <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>.
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: if Service Bus service encountered problems during the operation.
- uid: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService)
  id: createFromConnectionString(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createFromConnectionString(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor)
  nameWithType: EventHubClient.createFromConnectionString(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor)
  overload: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: >-
    Factory method to create an instance of <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref> using the supplied connectionString. In a normal scenario (when re-direct is not enabled) - one EventHubClient instance maps to one Connection to the Azure ServiceBus EventHubs service.


    The <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref> created from this method creates a Sender instance internally, which is used by the <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData)" data-throw-if-not-resolved="false">#send(EventData)</xref> methods.
  syntax:
    content: public static CompletableFuture<EventHubClient> createFromConnectionString(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor)
    parameters:
    - id: connectionString
      type: java.lang.String
      description: The connection string to be used. See <xref uid="com.microsoft.azure.eventhubs.ConnectionStringBuilder" data-throw-if-not-resolved="false">ConnectionStringBuilder</xref> to construct a connectionString.
    - id: retryPolicy
      type: com.microsoft.azure.eventhubs.RetryPolicy
      description: A custom <xref uid="com.microsoft.azure.eventhubs.RetryPolicy" data-throw-if-not-resolved="false">RetryPolicy</xref> to be used when communicating with EventHub.
    - id: executor
      type: java.util.concurrent.ScheduledExecutorService
      description: An <xref uid="java.util.concurrent.ScheduledExecutorService" data-throw-if-not-resolved="false">ScheduledExecutorService</xref> to run all tasks performed by <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref>.
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.EventHubClient>
      description: CompletableFuture<EventHubClient> which can be used to create Senders and Receivers to EventHub
  exceptions:
  - type: java.io.IOException
    description: If the underlying Proton-J layer encounter network errors.
- uid: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.ProxyConfiguration)
  id: createFromConnectionString(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.ProxyConfiguration)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createFromConnectionString(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration proxyConfiguration)
  nameWithType: EventHubClient.createFromConnectionString(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration proxyConfiguration)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration proxyConfiguration)
  overload: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: >-
    Factory method to create an instance of <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref> using the supplied `connectionString`. One EventHubClient instance maps to one connection to the Event Hubs service.


    The <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref> created from this method creates a Sender instance internally, which is used by the <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData)" data-throw-if-not-resolved="false">#send(EventData)</xref> methods.
  syntax:
    content: public static CompletableFuture<EventHubClient> createFromConnectionString(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration proxyConfiguration)
    parameters:
    - id: connectionString
      type: java.lang.String
      description: The connection string to be used. See <xref uid="com.microsoft.azure.eventhubs.ConnectionStringBuilder" data-throw-if-not-resolved="false">ConnectionStringBuilder</xref> to construct a connectionString.
    - id: retryPolicy
      type: com.microsoft.azure.eventhubs.RetryPolicy
      description: A custom <xref uid="com.microsoft.azure.eventhubs.RetryPolicy" data-throw-if-not-resolved="false">RetryPolicy</xref> to be used when communicating with EventHub.
    - id: executor
      type: java.util.concurrent.ScheduledExecutorService
      description: An <xref uid="java.util.concurrent.ScheduledExecutorService" data-throw-if-not-resolved="false">ScheduledExecutorService</xref> to run all tasks performed by <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref>.
    - id: proxyConfiguration
      type: com.microsoft.azure.eventhubs.ProxyConfiguration
      description: >-
        The proxy configuration for this EventHubClient connection; <code>null</code> or
              <xref uid="com.microsoft.azure.eventhubs.ProxyConfiguration.SYSTEM_DEFAULTS" data-throw-if-not-resolved="false">ProxyConfiguration#SYSTEM_DEFAULTS</xref> if the system configured proxy settings should be used.
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.EventHubClient>
      description: CompletableFuture<EventHubClient> which can be used to create Senders and Receivers to EventHub.
  exceptions:
  - type: java.io.IOException
    description: If the underlying Proton-J layer encounter network errors.
- uid: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.ProxyConfiguration,java.time.Duration)
  id: createFromConnectionString(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.ProxyConfiguration,java.time.Duration)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createFromConnectionString(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration proxyConfiguration, Duration maximumSilentTime)
  nameWithType: EventHubClient.createFromConnectionString(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration proxyConfiguration, Duration maximumSilentTime)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration proxyConfiguration, Duration maximumSilentTime)
  overload: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: >-
    Factory method to create an instance of <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref> using the supplied `connectionString`. One EventHubClient instance maps to one connection to the Event Hubs service.


    The <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref> created from this method creates a Sender instance internally, which is used by the <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData)" data-throw-if-not-resolved="false">#send(EventData)</xref> methods.
  syntax:
    content: public static CompletableFuture<EventHubClient> createFromConnectionString(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration proxyConfiguration, Duration maximumSilentTime)
    parameters:
    - id: connectionString
      type: java.lang.String
      description: The connection string to be used. See <xref uid="com.microsoft.azure.eventhubs.ConnectionStringBuilder" data-throw-if-not-resolved="false">ConnectionStringBuilder</xref> to construct a connectionString.
    - id: retryPolicy
      type: com.microsoft.azure.eventhubs.RetryPolicy
      description: A custom <xref uid="com.microsoft.azure.eventhubs.RetryPolicy" data-throw-if-not-resolved="false">RetryPolicy</xref> to be used when communicating with EventHub.
    - id: executor
      type: java.util.concurrent.ScheduledExecutorService
      description: An <xref uid="java.util.concurrent.ScheduledExecutorService" data-throw-if-not-resolved="false">ScheduledExecutorService</xref> to run all tasks performed by <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref>.
    - id: proxyConfiguration
      type: com.microsoft.azure.eventhubs.ProxyConfiguration
      description: >-
        The proxy configuration for this EventHubClient connection; <code>null</code> or
              <xref uid="com.microsoft.azure.eventhubs.ProxyConfiguration.SYSTEM_DEFAULTS" data-throw-if-not-resolved="false">ProxyConfiguration#SYSTEM_DEFAULTS</xref> if the system configured proxy settings should be used.
    - id: maximumSilentTime
      type: java.time.Duration
      description: Use <xref uid="com.microsoft.azure.eventhubs.EventHubClientOptions.SILENT_OFF" data-throw-if-not-resolved="false">EventHubClientOptions#SILENT_OFF</xref> except on recommendation from the product group.
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.EventHubClient>
      description: CompletableFuture<EventHubClient> which can be used to create Senders and Receivers to EventHub.
  exceptions:
  - type: java.io.IOException
    description: If the underlying Proton-J layer encounter network errors.
- uid: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString(java.lang.String,java.util.concurrent.ScheduledExecutorService)
  id: createFromConnectionString(java.lang.String,java.util.concurrent.ScheduledExecutorService)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createFromConnectionString(String connectionString, ScheduledExecutorService executor)
  nameWithType: EventHubClient.createFromConnectionString(String connectionString, ScheduledExecutorService executor)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString(String connectionString, ScheduledExecutorService executor)
  overload: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: >-
    Factory method to create an instance of <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref> using the supplied connectionString. In a normal scenario (when re-direct is not enabled) - one EventHubClient instance maps to one Connection to the Azure ServiceBus EventHubs service.


    The <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref> created from this method creates a Sender instance internally, which is used by the <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData)" data-throw-if-not-resolved="false">#send(EventData)</xref> methods.
  syntax:
    content: public static CompletableFuture<EventHubClient> createFromConnectionString(String connectionString, ScheduledExecutorService executor)
    parameters:
    - id: connectionString
      type: java.lang.String
      description: The connection string to be used. See <xref uid="com.microsoft.azure.eventhubs.ConnectionStringBuilder" data-throw-if-not-resolved="false">ConnectionStringBuilder</xref> to construct a connectionString.
    - id: executor
      type: java.util.concurrent.ScheduledExecutorService
      description: An <xref uid="java.util.concurrent.ScheduledExecutorService" data-throw-if-not-resolved="false">ScheduledExecutorService</xref> to run all tasks performed by <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref>.
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.EventHubClient>
      description: CompletableFuture<EventHubClient> which can be used to create Senders and Receivers to EventHub
  exceptions:
  - type: java.io.IOException
    description: If the underlying Proton-J layer encounter network errors.
- uid: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionStringSync(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService)
  id: createFromConnectionStringSync(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createFromConnectionStringSync(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor)
  nameWithType: EventHubClient.createFromConnectionStringSync(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionStringSync(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor)
  overload: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionStringSync*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString(java.lang.String,java.util.concurrent.ScheduledExecutorService)" data-throw-if-not-resolved="false">#createFromConnectionString(String, ScheduledExecutorService)</xref>.
  syntax:
    content: public static EventHubClient createFromConnectionStringSync(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor)
    parameters:
    - id: connectionString
      type: java.lang.String
      description: The connection string to be used. See <xref uid="com.microsoft.azure.eventhubs.ConnectionStringBuilder" data-throw-if-not-resolved="false">ConnectionStringBuilder</xref> to construct a connectionString.
    - id: retryPolicy
      type: com.microsoft.azure.eventhubs.RetryPolicy
      description: A custom <xref uid="com.microsoft.azure.eventhubs.RetryPolicy" data-throw-if-not-resolved="false">RetryPolicy</xref> to be used when communicating with EventHub.
    - id: executor
      type: java.util.concurrent.ScheduledExecutorService
      description: An <xref uid="java.util.concurrent.ScheduledExecutorService" data-throw-if-not-resolved="false">ScheduledExecutorService</xref> to run all tasks performed by <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref>.
    return:
      type: com.microsoft.azure.eventhubs.EventHubClient
      description: EventHubClient which can be used to create Senders and Receivers to EventHub
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: If Service Bus service encountered problems during connection creation.
  - type: java.io.IOException
    description: If Service Bus service encountered problems during connection creation.
- uid: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionStringSync(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.ProxyConfiguration)
  id: createFromConnectionStringSync(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.ProxyConfiguration)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createFromConnectionStringSync(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration configuration)
  nameWithType: EventHubClient.createFromConnectionStringSync(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration configuration)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionStringSync(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration configuration)
  overload: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionStringSync*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.ProxyConfiguration)" data-throw-if-not-resolved="false">#createFromConnectionString(String, RetryPolicy, ScheduledExecutorService, ProxyConfiguration)</xref>.
  syntax:
    content: public static EventHubClient createFromConnectionStringSync(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration configuration)
    parameters:
    - id: connectionString
      type: java.lang.String
      description: The connection string to be used. See <xref uid="com.microsoft.azure.eventhubs.ConnectionStringBuilder" data-throw-if-not-resolved="false">ConnectionStringBuilder</xref> to construct a connectionString.
    - id: retryPolicy
      type: com.microsoft.azure.eventhubs.RetryPolicy
      description: A custom <xref uid="com.microsoft.azure.eventhubs.RetryPolicy" data-throw-if-not-resolved="false">RetryPolicy</xref> to be used when communicating with EventHub.
    - id: executor
      type: java.util.concurrent.ScheduledExecutorService
      description: An <xref uid="java.util.concurrent.ScheduledExecutorService" data-throw-if-not-resolved="false">ScheduledExecutorService</xref> to run all tasks performed by <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref>.
    - id: configuration
      type: com.microsoft.azure.eventhubs.ProxyConfiguration
      description: >-
        The proxy configuration for this EventHubClient connection; <code>null</code> or
              <xref uid="com.microsoft.azure.eventhubs.ProxyConfiguration.SYSTEM_DEFAULTS" data-throw-if-not-resolved="false">ProxyConfiguration#SYSTEM_DEFAULTS</xref> if the system configured proxy settings should be used.
    return:
      type: com.microsoft.azure.eventhubs.EventHubClient
      description: EventHubClient which can be used to create Senders and Receivers to EventHub
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: If Service Bus service encountered problems during connection creation.
  - type: java.io.IOException
    description: If Service Bus service encountered problems during connection creation.
- uid: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionStringSync(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.ProxyConfiguration,java.time.Duration)
  id: createFromConnectionStringSync(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.ProxyConfiguration,java.time.Duration)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createFromConnectionStringSync(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration configuration, Duration maximumSilentTime)
  nameWithType: EventHubClient.createFromConnectionStringSync(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration configuration, Duration maximumSilentTime)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionStringSync(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration configuration, Duration maximumSilentTime)
  overload: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionStringSync*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.ProxyConfiguration,java.time.Duration)" data-throw-if-not-resolved="false">#createFromConnectionString(String, RetryPolicy, ScheduledExecutorService, ProxyConfiguration, Duration)</xref>.
  syntax:
    content: public static EventHubClient createFromConnectionStringSync(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration configuration, Duration maximumSilentTime)
    parameters:
    - id: connectionString
      type: java.lang.String
      description: The connection string to be used. See <xref uid="com.microsoft.azure.eventhubs.ConnectionStringBuilder" data-throw-if-not-resolved="false">ConnectionStringBuilder</xref> to construct a connectionString.
    - id: retryPolicy
      type: com.microsoft.azure.eventhubs.RetryPolicy
      description: A custom <xref uid="com.microsoft.azure.eventhubs.RetryPolicy" data-throw-if-not-resolved="false">RetryPolicy</xref> to be used when communicating with EventHub.
    - id: executor
      type: java.util.concurrent.ScheduledExecutorService
      description: An <xref uid="java.util.concurrent.ScheduledExecutorService" data-throw-if-not-resolved="false">ScheduledExecutorService</xref> to run all tasks performed by <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref>.
    - id: configuration
      type: com.microsoft.azure.eventhubs.ProxyConfiguration
      description: >-
        The proxy configuration for this EventHubClient connection; <code>null</code> or
              <xref uid="com.microsoft.azure.eventhubs.ProxyConfiguration.SYSTEM_DEFAULTS" data-throw-if-not-resolved="false">ProxyConfiguration#SYSTEM_DEFAULTS</xref> if the system configured proxy settings should be used.
    - id: maximumSilentTime
      type: java.time.Duration
      description: Use <xref uid="com.microsoft.azure.eventhubs.EventHubClientOptions.SILENT_OFF" data-throw-if-not-resolved="false">EventHubClientOptions#SILENT_OFF</xref> except on recommendation from the product group.
    return:
      type: com.microsoft.azure.eventhubs.EventHubClient
      description: EventHubClient which can be used to create Senders and Receivers to EventHub
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: If Service Bus service encountered problems during connection creation.
  - type: java.io.IOException
    description: If Service Bus service encountered problems during connection creation.
- uid: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionStringSync(java.lang.String,java.util.concurrent.ScheduledExecutorService)
  id: createFromConnectionStringSync(java.lang.String,java.util.concurrent.ScheduledExecutorService)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createFromConnectionStringSync(String connectionString, ScheduledExecutorService executor)
  nameWithType: EventHubClient.createFromConnectionStringSync(String connectionString, ScheduledExecutorService executor)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionStringSync(String connectionString, ScheduledExecutorService executor)
  overload: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionStringSync*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString(java.lang.String,java.util.concurrent.ScheduledExecutorService)" data-throw-if-not-resolved="false">#createFromConnectionString(String, ScheduledExecutorService)</xref>.
  syntax:
    content: public static EventHubClient createFromConnectionStringSync(String connectionString, ScheduledExecutorService executor)
    parameters:
    - id: connectionString
      type: java.lang.String
      description: The connection string to be used. See <xref uid="com.microsoft.azure.eventhubs.ConnectionStringBuilder" data-throw-if-not-resolved="false">ConnectionStringBuilder</xref> to construct a connectionString.
    - id: executor
      type: java.util.concurrent.ScheduledExecutorService
      description: An <xref uid="java.util.concurrent.ScheduledExecutorService" data-throw-if-not-resolved="false">ScheduledExecutorService</xref> to run all tasks performed by <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref>.
    return:
      type: com.microsoft.azure.eventhubs.EventHubClient
      description: EventHubClient which can be used to create Senders and Receivers to EventHub
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: If Service Bus service encountered problems during connection creation.
  - type: java.io.IOException
    description: If Service Bus service encountered problems during connection creation.
- uid: com.microsoft.azure.eventhubs.EventHubClient.createPartitionSender(java.lang.String)
  id: createPartitionSender(java.lang.String)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createPartitionSender(String partitionId)
  nameWithType: EventHubClient.createPartitionSender(String partitionId)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createPartitionSender(String partitionId)
  overload: com.microsoft.azure.eventhubs.EventHubClient.createPartitionSender*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: >-
    Create a <xref uid="com.microsoft.azure.eventhubs.PartitionSender" data-throw-if-not-resolved="false">PartitionSender</xref> which can publish <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s directly to a specific EventHub partition (sender type iii. in the below list).


    There are 3 patterns/ways to send to EventHubs:


    ```java

    i.   #send(EventData) or #send(Iterable)
     ii.  #send(EventData, String) or #send(Iterable, String)
     iii. PartitionSender#send(EventData) or PartitionSender#send(Iterable)
    ```
  syntax:
    content: public abstract CompletableFuture<PartitionSender> createPartitionSender(String partitionId)
    parameters:
    - id: partitionId
      type: java.lang.String
      description: partitionId of EventHub to send the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s to
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.PartitionSender>
      description: a CompletableFuture that would result in a PartitionSenderImpl when it is completed.
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: if Service Bus service encountered problems during connection creation.
- uid: com.microsoft.azure.eventhubs.EventHubClient.createPartitionSenderSync(java.lang.String)
  id: createPartitionSenderSync(java.lang.String)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createPartitionSenderSync(String partitionId)
  nameWithType: EventHubClient.createPartitionSenderSync(String partitionId)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createPartitionSenderSync(String partitionId)
  overload: com.microsoft.azure.eventhubs.EventHubClient.createPartitionSenderSync*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.createPartitionSender(java.lang.String)" data-throw-if-not-resolved="false">#createPartitionSender(String)</xref>.
  syntax:
    content: public default PartitionSender createPartitionSenderSync(String partitionId)
    parameters:
    - id: partitionId
      type: java.lang.String
      description: partitionId of EventHub to send the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s to
    return:
      type: com.microsoft.azure.eventhubs.PartitionSender
      description: PartitionSenderImpl which can be used to send events to a specific partition.
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: if Service Bus service encountered problems during connection creation.
  - type: java.lang.IllegalArgumentException
    description: if Service Bus service encountered problems during connection creation.
- uid: com.microsoft.azure.eventhubs.EventHubClient.createReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition)
  id: createReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition)
  nameWithType: EventHubClient.createReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition)
  overload: com.microsoft.azure.eventhubs.EventHubClient.createReceiver*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Create the EventHub receiver with given partition id and start receiving from the specified starting offset. The receiver is created for a specific EventHub Partition from the specific consumer group.
  syntax:
    content: public abstract CompletableFuture<PartitionReceiver> createReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition)
    parameters:
    - id: consumerGroupName
      type: java.lang.String
      description: the consumer group name that this receiver should be grouped under.
    - id: partitionId
      type: java.lang.String
      description: the partition Id that the receiver belongs to. All data received will be from this partition only.
    - id: eventPosition
      type: com.microsoft.azure.eventhubs.EventPosition
      description: the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs.EventPosition" data-throw-if-not-resolved="false">EventPosition</xref>
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.PartitionReceiver>
      description: a CompletableFuture that would result in a PartitionReceiver instance when it is completed.
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: if Service Bus service encountered problems during the operation.
- uid: com.microsoft.azure.eventhubs.EventHubClient.createReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,com.microsoft.azure.eventhubs.ReceiverOptions)
  id: createReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,com.microsoft.azure.eventhubs.ReceiverOptions)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, ReceiverOptions receiverOptions)
  nameWithType: EventHubClient.createReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, ReceiverOptions receiverOptions)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, ReceiverOptions receiverOptions)
  overload: com.microsoft.azure.eventhubs.EventHubClient.createReceiver*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Create the EventHub receiver with given partition id and start receiving from the specified starting offset. The receiver is created for a specific EventHub Partition from the specific consumer group.
  syntax:
    content: public abstract CompletableFuture<PartitionReceiver> createReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, ReceiverOptions receiverOptions)
    parameters:
    - id: consumerGroupName
      type: java.lang.String
      description: the consumer group name that this receiver should be grouped under.
    - id: partitionId
      type: java.lang.String
      description: the partition Id that the receiver belongs to. All data received will be from this partition only.
    - id: eventPosition
      type: com.microsoft.azure.eventhubs.EventPosition
      description: the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs.EventPosition" data-throw-if-not-resolved="false">EventPosition</xref>
    - id: receiverOptions
      type: com.microsoft.azure.eventhubs.ReceiverOptions
      description: the set of options to enable on the event hubs receiver
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.PartitionReceiver>
      description: a CompletableFuture that would result in a PartitionReceiver instance when it is completed.
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: if Service Bus service encountered problems during the operation.
- uid: com.microsoft.azure.eventhubs.EventHubClient.createReceiverSync(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition)
  id: createReceiverSync(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createReceiverSync(String consumerGroupName, String partitionId, EventPosition eventPosition)
  nameWithType: EventHubClient.createReceiverSync(String consumerGroupName, String partitionId, EventPosition eventPosition)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createReceiverSync(String consumerGroupName, String partitionId, EventPosition eventPosition)
  overload: com.microsoft.azure.eventhubs.EventHubClient.createReceiverSync*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.createReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition)" data-throw-if-not-resolved="false">#createReceiver(String, String, EventPosition)</xref>.
  syntax:
    content: public default PartitionReceiver createReceiverSync(String consumerGroupName, String partitionId, EventPosition eventPosition)
    parameters:
    - id: consumerGroupName
      type: java.lang.String
      description: the consumer group name that this receiver should be grouped under.
    - id: partitionId
      type: java.lang.String
      description: the partition Id that the receiver belongs to. All data received will be from this partition only.
    - id: eventPosition
      type: com.microsoft.azure.eventhubs.EventPosition
      description: the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs.EventPosition" data-throw-if-not-resolved="false">EventPosition</xref>
    return:
      type: com.microsoft.azure.eventhubs.PartitionReceiver
      description: PartitionReceiver instance which can be used for receiving <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>.
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: if Service Bus service encountered problems during the operation.
- uid: com.microsoft.azure.eventhubs.EventHubClient.createReceiverSync(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,com.microsoft.azure.eventhubs.ReceiverOptions)
  id: createReceiverSync(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,com.microsoft.azure.eventhubs.ReceiverOptions)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createReceiverSync(String consumerGroupName, String partitionId, EventPosition eventPosition, ReceiverOptions receiverOptions)
  nameWithType: EventHubClient.createReceiverSync(String consumerGroupName, String partitionId, EventPosition eventPosition, ReceiverOptions receiverOptions)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createReceiverSync(String consumerGroupName, String partitionId, EventPosition eventPosition, ReceiverOptions receiverOptions)
  overload: com.microsoft.azure.eventhubs.EventHubClient.createReceiverSync*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.createReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition)" data-throw-if-not-resolved="false">#createReceiver(String, String, EventPosition)</xref>.
  syntax:
    content: public default PartitionReceiver createReceiverSync(String consumerGroupName, String partitionId, EventPosition eventPosition, ReceiverOptions receiverOptions)
    parameters:
    - id: consumerGroupName
      type: java.lang.String
      description: the consumer group name that this receiver should be grouped under.
    - id: partitionId
      type: java.lang.String
      description: the partition Id that the receiver belongs to. All data received will be from this partition only.
    - id: eventPosition
      type: com.microsoft.azure.eventhubs.EventPosition
      description: the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs.EventPosition" data-throw-if-not-resolved="false">EventPosition</xref>
    - id: receiverOptions
      type: com.microsoft.azure.eventhubs.ReceiverOptions
      description: the set of options to enable on the event hubs receiver
    return:
      type: com.microsoft.azure.eventhubs.PartitionReceiver
      description: PartitionReceiver instance which can be used for receiving <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>.
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: if Service Bus service encountered problems during the operation.
- uid: com.microsoft.azure.eventhubs.EventHubClient.createWithAzureActiveDirectory(java.net.URI,java.lang.String,com.microsoft.azure.eventhubs.AzureActiveDirectoryTokenProvider.AuthenticationCallback,java.lang.String,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.EventHubClientOptions)
  id: createWithAzureActiveDirectory(java.net.URI,java.lang.String,com.microsoft.azure.eventhubs.AzureActiveDirectoryTokenProvider.AuthenticationCallback,java.lang.String,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.EventHubClientOptions)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createWithAzureActiveDirectory(URI endpointAddress, String eventHubName, AzureActiveDirectoryTokenProvider.AuthenticationCallback authCallback, String authority, ScheduledExecutorService executor, EventHubClientOptions options)
  nameWithType: EventHubClient.createWithAzureActiveDirectory(URI endpointAddress, String eventHubName, AzureActiveDirectoryTokenProvider.AuthenticationCallback authCallback, String authority, ScheduledExecutorService executor, EventHubClientOptions options)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createWithAzureActiveDirectory(URI endpointAddress, String eventHubName, AzureActiveDirectoryTokenProvider.AuthenticationCallback authCallback, String authority, ScheduledExecutorService executor, EventHubClientOptions options)
  overload: com.microsoft.azure.eventhubs.EventHubClient.createWithAzureActiveDirectory*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: >-
    Factory method to create an instance of <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref> using the supplied namespace endpoint address, eventhub name and authentication mechanism. In a normal scenario (when re-direct is not enabled) - one EventHubClient instance maps to one Connection to the Azure ServiceBus EventHubs service.


    The <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref> created from this method creates a Sender instance internally, which is used by the <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData)" data-throw-if-not-resolved="false">#send(EventData)</xref> methods.
  syntax:
    content: public static CompletableFuture<EventHubClient> createWithAzureActiveDirectory(URI endpointAddress, String eventHubName, AzureActiveDirectoryTokenProvider.AuthenticationCallback authCallback, String authority, ScheduledExecutorService executor, EventHubClientOptions options)
    parameters:
    - id: endpointAddress
      type: java.net.URI
      description: namespace level endpoint. This needs to be in the format of scheme://fullyQualifiedServiceBusNamespaceEndpointName
    - id: eventHubName
      type: java.lang.String
      description: EventHub name
    - id: authCallback
      type: com.microsoft.azure.eventhubs.AzureActiveDirectoryTokenProvider.AuthenticationCallback
      description: A callback which returns a JSON Web Token obtained from AAD.
    - id: authority
      type: java.lang.String
      description: Address of the AAD authority to issue the token.
    - id: executor
      type: java.util.concurrent.ScheduledExecutorService
      description: An <xref uid="java.util.concurrent.ScheduledExecutorService" data-throw-if-not-resolved="false">ScheduledExecutorService</xref> to run all tasks performed by <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref>.
    - id: options
      type: com.microsoft.azure.eventhubs.EventHubClientOptions
      description: Options <xref uid="com.microsoft.azure.eventhubs.EventHubClientOptions" data-throw-if-not-resolved="false">EventHubClientOptions</xref> for creating the client. Uses all defaults if null.
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.EventHubClient>
      description: EventHubClient which can be used to create Senders and Receivers to EventHub
  exceptions:
  - type: java.io.IOException
    description: If the underlying Proton-J layer encounter network errors.
- uid: com.microsoft.azure.eventhubs.EventHubClient.createWithTokenProvider(java.net.URI,java.lang.String,com.microsoft.azure.eventhubs.ITokenProvider,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.EventHubClientOptions)
  id: createWithTokenProvider(java.net.URI,java.lang.String,com.microsoft.azure.eventhubs.ITokenProvider,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.EventHubClientOptions)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: createWithTokenProvider(URI endpointAddress, String eventHubName, ITokenProvider tokenProvider, ScheduledExecutorService executor, EventHubClientOptions options)
  nameWithType: EventHubClient.createWithTokenProvider(URI endpointAddress, String eventHubName, ITokenProvider tokenProvider, ScheduledExecutorService executor, EventHubClientOptions options)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createWithTokenProvider(URI endpointAddress, String eventHubName, ITokenProvider tokenProvider, ScheduledExecutorService executor, EventHubClientOptions options)
  overload: com.microsoft.azure.eventhubs.EventHubClient.createWithTokenProvider*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: >-
    Factory method to create an instance of <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref> using the supplied namespace endpoint address, eventhub name and authentication mechanism. In a normal scenario (when re-direct is not enabled) - one EventHubClient instance maps to one Connection to the Azure ServiceBus EventHubs service.


    The <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref> created from this method creates a Sender instance internally, which is used by the <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData)" data-throw-if-not-resolved="false">#send(EventData)</xref> methods.
  syntax:
    content: public static CompletableFuture<EventHubClient> createWithTokenProvider(URI endpointAddress, String eventHubName, ITokenProvider tokenProvider, ScheduledExecutorService executor, EventHubClientOptions options)
    parameters:
    - id: endpointAddress
      type: java.net.URI
      description: namespace level endpoint. This needs to be in the format of scheme://fullyQualifiedServiceBusNamespaceEndpointName
    - id: eventHubName
      type: java.lang.String
      description: EventHub name
    - id: tokenProvider
      type: com.microsoft.azure.eventhubs.ITokenProvider
      description: The <xref uid="com.microsoft.azure.eventhubs.ITokenProvider" data-throw-if-not-resolved="false">ITokenProvider</xref> implementation to be used to authenticate
    - id: executor
      type: java.util.concurrent.ScheduledExecutorService
      description: An <xref uid="java.util.concurrent.ScheduledExecutorService" data-throw-if-not-resolved="false">ScheduledExecutorService</xref> to run all tasks performed by <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false">EventHubClient</xref>.
    - id: options
      type: com.microsoft.azure.eventhubs.EventHubClientOptions
      description: Options <xref uid="com.microsoft.azure.eventhubs.EventHubClientOptions" data-throw-if-not-resolved="false">EventHubClientOptions</xref> for creating the client. Uses all defaults if null.
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.EventHubClient>
      description: EventHubClient which can be used to create Senders and Receivers to EventHub
  exceptions:
  - type: java.io.IOException
    description: If the underlying Proton-J layer encounter network errors.
- uid: com.microsoft.azure.eventhubs.EventHubClient.getEventHubName()
  id: getEventHubName()
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: getEventHubName()
  nameWithType: EventHubClient.getEventHubName()
  fullName: com.microsoft.azure.eventhubs.EventHubClient.getEventHubName()
  overload: com.microsoft.azure.eventhubs.EventHubClient.getEventHubName*
  type: Method
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public abstract String getEventHubName()
    return:
      type: java.lang.String
      description: the name of the Event Hub this client is connected to.
- uid: com.microsoft.azure.eventhubs.EventHubClient.getPartitionRuntimeInformation(java.lang.String)
  id: getPartitionRuntimeInformation(java.lang.String)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: getPartitionRuntimeInformation(String partitionId)
  nameWithType: EventHubClient.getPartitionRuntimeInformation(String partitionId)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.getPartitionRuntimeInformation(String partitionId)
  overload: com.microsoft.azure.eventhubs.EventHubClient.getPartitionRuntimeInformation*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Retrieves dynamic information about a partition of an event hub (see <xref uid="com.microsoft.azure.eventhubs.PartitionRuntimeInformation" data-throw-if-not-resolved="false">PartitionRuntimeInformation</xref> for details. Retries until it reaches the operation timeout, then either rethrows the last error if available or returns null to indicate timeout.
  syntax:
    content: public abstract CompletableFuture<PartitionRuntimeInformation> getPartitionRuntimeInformation(String partitionId)
    parameters:
    - id: partitionId
      type: java.lang.String
      description: Partition to get information about. Must be one of the partition ids returned by <xref uid="com.microsoft.azure.eventhubs.EventHubClient.getRuntimeInformation*" data-throw-if-not-resolved="false">#getRuntimeInformation</xref>.
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.PartitionRuntimeInformation>
      description: CompletableFuture which returns an PartitionRuntimeInformation on success, or null on timeout.
- uid: com.microsoft.azure.eventhubs.EventHubClient.getRuntimeInformation()
  id: getRuntimeInformation()
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: getRuntimeInformation()
  nameWithType: EventHubClient.getRuntimeInformation()
  fullName: com.microsoft.azure.eventhubs.EventHubClient.getRuntimeInformation()
  overload: com.microsoft.azure.eventhubs.EventHubClient.getRuntimeInformation*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Retrieves general information about an event hub (see <xref uid="com.microsoft.azure.eventhubs.EventHubRuntimeInformation" data-throw-if-not-resolved="false">EventHubRuntimeInformation</xref> for details). Retries until it reaches the operation timeout, then either rethrows the last error if available or returns null to indicate timeout.
  syntax:
    content: public abstract CompletableFuture<EventHubRuntimeInformation> getRuntimeInformation()
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.EventHubRuntimeInformation>
      description: CompletableFuture which returns an EventHubRuntimeInformation on success, or null on timeout.
- uid: com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData)
  id: send(com.microsoft.azure.eventhubs.EventData)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: send(EventData data)
  nameWithType: EventHubClient.send(EventData data)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.send(EventData data)
  overload: com.microsoft.azure.eventhubs.EventHubClient.send*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: >-
    Send <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> will land on any arbitrarily chosen EventHubs partition.


    There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload):

     *  <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData)" data-throw-if-not-resolved="false">#send(EventData)</xref>, <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(java.lang.Iterable&lt;com.microsoft.azure.eventhubs.EventData&gt;)" data-throw-if-not-resolved="false">#send(Iterable)</xref>, or <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventDataBatch)" data-throw-if-not-resolved="false">#send(EventDataBatch)</xref>
     *  <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData,java.lang.String)" data-throw-if-not-resolved="false">#send(EventData, String)</xref> or <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(java.lang.Iterable&lt;com.microsoft.azure.eventhubs.EventData&gt;,java.lang.String)" data-throw-if-not-resolved="false">#send(Iterable, String)</xref>
     *  <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(com.microsoft.azure.eventhubs.EventData)" data-throw-if-not-resolved="false">PartitionSender#send(EventData)</xref>, <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(java.lang.Iterable&lt;com.microsoft.azure.eventhubs.EventData&gt;)" data-throw-if-not-resolved="false">PartitionSender#send(Iterable)</xref>, or <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(com.microsoft.azure.eventhubs.EventDataBatch)" data-throw-if-not-resolved="false">PartitionSender#send(EventDataBatch)</xref>

    Use this method to Send, if:


    ```java

    a)  the send(EventData) operation should be highly available and
     b)  the data needs to be evenly distributed among all partitions; exception being, when a subset of partitions are unavailable
    ```


    <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData)" data-throw-if-not-resolved="false">#send(EventData)</xref> send's the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to a Service Gateway, which in-turn will forward the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to one of the EventHubs' partitions. Here's the message forwarding algorithm:


    ```java

    i.  Forward the EventData's to EventHub partitions, by equally distributing the data among all partitions (ex: Round-robin the EventData's to all EventHubs' partitions)
     ii. If one of the EventHub partitions is unavailable for a moment, the Service Gateway will automatically detect it and forward the message to another available partition - making the Send operation highly-available.
    ```
  syntax:
    content: public abstract CompletableFuture<Void> send(EventData data)
    parameters:
    - id: data
      type: com.microsoft.azure.eventhubs.EventData
      description: the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to be sent.
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
      description: a CompletableFuture that can be completed when the send operations is done..
- uid: com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData,java.lang.String)
  id: send(com.microsoft.azure.eventhubs.EventData,java.lang.String)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: send(EventData eventData, String partitionKey)
  nameWithType: EventHubClient.send(EventData eventData, String partitionKey)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.send(EventData eventData, String partitionKey)
  overload: com.microsoft.azure.eventhubs.EventHubClient.send*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: >-
    Send an '<xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> with a partitionKey' to EventHub. All <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s with a partitionKey are guaranteed to land on the same partition. This send pattern emphasize data correlation over general availability and latency.


    There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload):


    ```java

    i.   #send(EventData) or #send(Iterable)
     ii.  #send(EventData, String) or #send(Iterable, String)
     iii. PartitionSender#send(EventData) or PartitionSender#send(Iterable)
    ```


    Use this type of Send, if:


    ```java

    i.  There is a need for correlation of events based on Sender instance; The sender can generate a UniqueId and set it as partitionKey - which on the received Message can be used for correlation
     ii. The client wants to take control of distribution of data across partitions.
    ```


    Multiple PartitionKey's could be mapped to one Partition. EventHubs service uses a proprietary Hash algorithm to map the PartitionKey to a PartitionId. Using this type of Send (Sending using a specific partitionKey), could sometimes result in partitions which are not evenly distributed.
  syntax:
    content: public abstract CompletableFuture<Void> send(EventData eventData, String partitionKey)
    parameters:
    - id: eventData
      type: com.microsoft.azure.eventhubs.EventData
      description: the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to be sent.
    - id: partitionKey
      type: java.lang.String
      description: the partitionKey will be hash'ed to determine the partitionId to send the eventData to. On the Received message this can be accessed at <xref uid="com.microsoft.azure.eventhubs.EventData.SystemProperties.getPartitionKey()" data-throw-if-not-resolved="false">EventData.SystemProperties#getPartitionKey()</xref>
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
      description: a CompletableFuture that can be completed when the send operations is done..
- uid: com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventDataBatch)
  id: send(com.microsoft.azure.eventhubs.EventDataBatch)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: send(EventDataBatch eventDatas)
  nameWithType: EventHubClient.send(EventDataBatch eventDatas)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.send(EventDataBatch eventDatas)
  overload: com.microsoft.azure.eventhubs.EventHubClient.send*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Send <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false">EventDataBatch</xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false">EventDataBatch</xref> will land according the partition key set in the <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false">EventDataBatch</xref>. If a partition key is not set, then we will Round-robin the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s to all EventHubs' partitions.
  syntax:
    content: public abstract CompletableFuture<Void> send(EventDataBatch eventDatas)
    parameters:
    - id: eventDatas
      type: com.microsoft.azure.eventhubs.EventDataBatch
      description: EventDataBatch to send to EventHub
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
      description: a CompleteableFuture that can be completed when the send operations are done
- uid: com.microsoft.azure.eventhubs.EventHubClient.send(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>)
  id: send(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: send(Iterable<EventData> eventDatas)
  nameWithType: EventHubClient.send(Iterable<EventData> eventDatas)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.send(Iterable<EventData> eventDatas)
  overload: com.microsoft.azure.eventhubs.EventHubClient.send*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: >-
    Send a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> will land on any arbitrarily chosen EventHubs partition. This is the most recommended way to Send to EventHubs.


    There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData)" data-throw-if-not-resolved="false">#send(EventData)</xref>, which is used to send single <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>. Use this overload versus <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData)" data-throw-if-not-resolved="false">#send(EventData)</xref>, if you need to send a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>.


    Sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s is useful in the following cases:


    ```java

    i.   Efficient send - sending a batch of EventData maximizes the overall throughput by optimally using the number of sessions created to EventHubs' service.
     ii.  Send multiple EventData's in a Transaction. To achieve ACID properties, the Gateway Service will forward all EventData's in the batch to a single EventHubs' partition.
    ```


    Sample code (sample uses sync version of the api but concept are identical):


    ```java

    Gson gson = new GsonBuilder().create();
     EventHubClient client = EventHubClient.createSync("__connection__");

     while (true)
     {
         LinkedList events = new LinkedList();}
         for (int count = 1; count < 11; count++)
         {
             PayloadEvent payload = new PayloadEvent(count);
             byte[] payloadBytes = gson.toJson(payload).getBytes(Charset.defaultCharset());
             EventData sendEvent = new EventData(payloadBytes);
             sendEvent.getProperties().put("from", "javaClient");
             events.add(sendEvent);
         }

         client.sendSync(events);
         System.out.println(String.format("Sent Batch... Size: %s", events.size()));
     }
    ```


    for Exceptions refer to <xref uid="com.microsoft.azure.eventhubs.EventHubClient.sendSync(java.lang.Iterable&lt;com.microsoft.azure.eventhubs.EventData&gt;)" data-throw-if-not-resolved="false">#sendSync(Iterable)</xref>
  syntax:
    content: public abstract CompletableFuture<Void> send(Iterable<EventData> eventDatas)
    parameters:
    - id: eventDatas
      type: java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>
      description: batch of events to send to EventHub
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
      description: a CompletableFuture that can be completed when the send operations is done..
- uid: com.microsoft.azure.eventhubs.EventHubClient.send(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>,java.lang.String)
  id: send(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>,java.lang.String)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: send(Iterable<EventData> eventDatas, String partitionKey)
  nameWithType: EventHubClient.send(Iterable<EventData> eventDatas, String partitionKey)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.send(Iterable<EventData> eventDatas, String partitionKey)
  overload: com.microsoft.azure.eventhubs.EventHubClient.send*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: >-
    Send a 'batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> with the same partitionKey' to EventHub. All <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s with a partitionKey are guaranteed to land on the same partition. Multiple PartitionKey's will be mapped to one Partition.


    There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData,java.lang.String)" data-throw-if-not-resolved="false">#send(EventData, String)</xref>, which is the same type of Send and is used to send single <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>.


    Sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s is useful in the following cases:


    ```java

    i.   Efficient send - sending a batch of EventData maximizes the overall throughput by optimally using the number of sessions created to EventHubs service.
     ii.  Send multiple events in One Transaction. This is the reason why all events sent in a batch needs to have same partitionKey (so that they are sent to one partition only).
    ```
  syntax:
    content: public abstract CompletableFuture<Void> send(Iterable<EventData> eventDatas, String partitionKey)
    parameters:
    - id: eventDatas
      type: java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>
      description: the batch of events to send to EventHub
    - id: partitionKey
      type: java.lang.String
      description: the partitionKey will be hash'ed to determine the partitionId to send the eventData to. On the Received message this can be accessed at <xref uid="com.microsoft.azure.eventhubs.EventData.SystemProperties.getPartitionKey()" data-throw-if-not-resolved="false">EventData.SystemProperties#getPartitionKey()</xref>
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
      description: a CompletableFuture that can be completed when the send operations is done..
- uid: com.microsoft.azure.eventhubs.EventHubClient.sendSync(com.microsoft.azure.eventhubs.EventData)
  id: sendSync(com.microsoft.azure.eventhubs.EventData)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: sendSync(EventData data)
  nameWithType: EventHubClient.sendSync(EventData data)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.sendSync(EventData data)
  overload: com.microsoft.azure.eventhubs.EventHubClient.sendSync*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData)" data-throw-if-not-resolved="false">#send(EventData)</xref>.
  syntax:
    content: public default void sendSync(EventData data)
    parameters:
    - id: data
      type: com.microsoft.azure.eventhubs.EventData
      description: the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to be sent.
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: if the total size of the <xref uid="EventData" data-throw-if-not-resolved="false">EventData</xref> exceeds a predefined limit set by the service. Default is 256k bytes.
- uid: com.microsoft.azure.eventhubs.EventHubClient.sendSync(com.microsoft.azure.eventhubs.EventData,java.lang.String)
  id: sendSync(com.microsoft.azure.eventhubs.EventData,java.lang.String)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: sendSync(EventData eventData, String partitionKey)
  nameWithType: EventHubClient.sendSync(EventData eventData, String partitionKey)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.sendSync(EventData eventData, String partitionKey)
  overload: com.microsoft.azure.eventhubs.EventHubClient.sendSync*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData,java.lang.String)" data-throw-if-not-resolved="false">#send(EventData, String)</xref>.
  syntax:
    content: public default void sendSync(EventData eventData, String partitionKey)
    parameters:
    - id: eventData
      type: com.microsoft.azure.eventhubs.EventData
      description: the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to be sent.
    - id: partitionKey
      type: java.lang.String
      description: the partitionKey will be hash'ed to determine the partitionId to send the eventData to. On the Received message this can be accessed at <xref uid="com.microsoft.azure.eventhubs.EventData.SystemProperties.getPartitionKey()" data-throw-if-not-resolved="false">EventData.SystemProperties#getPartitionKey()</xref>
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: if the total size of the <xref uid="EventData" data-throw-if-not-resolved="false">EventData</xref> exceeds a pre-defined limit set by the service. Default is 256k bytes.
- uid: com.microsoft.azure.eventhubs.EventHubClient.sendSync(com.microsoft.azure.eventhubs.EventDataBatch)
  id: sendSync(com.microsoft.azure.eventhubs.EventDataBatch)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: sendSync(EventDataBatch eventDatas)
  nameWithType: EventHubClient.sendSync(EventDataBatch eventDatas)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.sendSync(EventDataBatch eventDatas)
  overload: com.microsoft.azure.eventhubs.EventHubClient.sendSync*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventDataBatch)" data-throw-if-not-resolved="false">#send(EventDataBatch)</xref>.
  syntax:
    content: public default void sendSync(EventDataBatch eventDatas)
    parameters:
    - id: eventDatas
      type: com.microsoft.azure.eventhubs.EventDataBatch
      description: EventDataBatch to send to EventHub
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: if Service Bus service encountered problems during the operation.
- uid: com.microsoft.azure.eventhubs.EventHubClient.sendSync(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>)
  id: sendSync(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: sendSync(Iterable<EventData> eventDatas)
  nameWithType: EventHubClient.sendSync(Iterable<EventData> eventDatas)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.sendSync(Iterable<EventData> eventDatas)
  overload: com.microsoft.azure.eventhubs.EventHubClient.sendSync*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(java.lang.Iterable&lt;com.microsoft.azure.eventhubs.EventData&gt;)" data-throw-if-not-resolved="false">#send(Iterable)</xref>.
  syntax:
    content: public default void sendSync(Iterable<EventData> eventDatas)
    parameters:
    - id: eventDatas
      type: java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>
      description: batch of events to send to EventHub
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: if the total size of the <xref uid="EventData" data-throw-if-not-resolved="false">EventData</xref> exceeds a pre-defined limit set by the service. Default is 256k bytes.
- uid: com.microsoft.azure.eventhubs.EventHubClient.sendSync(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>,java.lang.String)
  id: sendSync(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>,java.lang.String)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.EventHubClient
  langs:
  - java
  name: sendSync(Iterable<EventData> eventDatas, String partitionKey)
  nameWithType: EventHubClient.sendSync(Iterable<EventData> eventDatas, String partitionKey)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.sendSync(Iterable<EventData> eventDatas, String partitionKey)
  overload: com.microsoft.azure.eventhubs.EventHubClient.sendSync*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(java.lang.Iterable&lt;com.microsoft.azure.eventhubs.EventData&gt;,java.lang.String)" data-throw-if-not-resolved="false">#send(Iterable, String)</xref>.
  syntax:
    content: public default void sendSync(Iterable<EventData> eventDatas, String partitionKey)
    parameters:
    - id: eventDatas
      type: java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>
      description: the batch of events to send to EventHub
    - id: partitionKey
      type: java.lang.String
      description: the partitionKey will be hash'ed to determine the partitionId to send the eventData to. On the Received message this can be accessed at <xref uid="com.microsoft.azure.eventhubs.EventData.SystemProperties.getPartitionKey()" data-throw-if-not-resolved="false">EventData.SystemProperties#getPartitionKey()</xref>
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: if the total size of the <xref uid="EventData" data-throw-if-not-resolved="false">EventData</xref> exceeds a pre-defined limit set by the service. Default is 256k bytes.
references:
- uid: com.microsoft.azure.eventhubs.EventHubException
  name: EventHubException
  nameWithType: EventHubException
  fullName: com.microsoft.azure.eventhubs.EventHubException
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: java.util.concurrent.ScheduledExecutorService
  spec.java:
  - uid: java.util.concurrent.ScheduledExecutorService
    name: ScheduledExecutorService
    fullName: java.util.concurrent.ScheduledExecutorService
- uid: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionStringSync*
  name: createFromConnectionStringSync
  nameWithType: EventHubClient.createFromConnectionStringSync
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionStringSync
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.RetryPolicy
  name: RetryPolicy
  nameWithType: RetryPolicy
  fullName: com.microsoft.azure.eventhubs.RetryPolicy
- uid: com.microsoft.azure.eventhubs.ProxyConfiguration
  name: ProxyConfiguration
  nameWithType: ProxyConfiguration
  fullName: com.microsoft.azure.eventhubs.ProxyConfiguration
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.EventHubClient>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: com.microsoft.azure.eventhubs.EventHubClient
    name: EventHubClient
    fullName: com.microsoft.azure.eventhubs.EventHubClient
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString*
  name: createFromConnectionString
  nameWithType: EventHubClient.createFromConnectionString
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString
  package: com.microsoft.azure.eventhubs
- uid: java.net.URI
  spec.java:
  - uid: java.net.URI
    name: URI
    fullName: java.net.URI
- uid: com.microsoft.azure.eventhubs.AzureActiveDirectoryTokenProvider.AuthenticationCallback
  name: AzureActiveDirectoryTokenProvider.AuthenticationCallback
  nameWithType: AzureActiveDirectoryTokenProvider.AuthenticationCallback
  fullName: com.microsoft.azure.eventhubs.AzureActiveDirectoryTokenProvider.AuthenticationCallback
- uid: com.microsoft.azure.eventhubs.EventHubClientOptions
  name: EventHubClientOptions
  nameWithType: EventHubClientOptions
  fullName: com.microsoft.azure.eventhubs.EventHubClientOptions
- uid: com.microsoft.azure.eventhubs.EventHubClient.createWithAzureActiveDirectory*
  name: createWithAzureActiveDirectory
  nameWithType: EventHubClient.createWithAzureActiveDirectory
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createWithAzureActiveDirectory
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.ITokenProvider
  name: ITokenProvider
  nameWithType: ITokenProvider
  fullName: com.microsoft.azure.eventhubs.ITokenProvider
- uid: com.microsoft.azure.eventhubs.EventHubClient.createWithTokenProvider*
  name: createWithTokenProvider
  nameWithType: EventHubClient.createWithTokenProvider
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createWithTokenProvider
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.EventHubClient.getEventHubName*
  name: getEventHubName
  nameWithType: EventHubClient.getEventHubName
  fullName: com.microsoft.azure.eventhubs.EventHubClient.getEventHubName
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.BatchOptions
  name: BatchOptions
  nameWithType: BatchOptions
  fullName: com.microsoft.azure.eventhubs.BatchOptions
- uid: com.microsoft.azure.eventhubs.EventDataBatch
  name: EventDataBatch
  nameWithType: EventDataBatch
  fullName: com.microsoft.azure.eventhubs.EventDataBatch
- uid: com.microsoft.azure.eventhubs.EventHubClient.createBatch*
  name: createBatch
  nameWithType: EventHubClient.createBatch
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createBatch
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.EventData
  name: EventData
  nameWithType: EventData
  fullName: com.microsoft.azure.eventhubs.EventData
- uid: com.microsoft.azure.eventhubs.EventHubClient.sendSync*
  name: sendSync
  nameWithType: EventHubClient.sendSync
  fullName: com.microsoft.azure.eventhubs.EventHubClient.sendSync
  package: com.microsoft.azure.eventhubs
- uid: java.util.concurrent.CompletableFuture<java.lang.Void>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.EventHubClient.send*
  name: send
  nameWithType: EventHubClient.send
  fullName: com.microsoft.azure.eventhubs.EventHubClient.send
  package: com.microsoft.azure.eventhubs
- uid: java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: com.microsoft.azure.eventhubs.EventData
    name: EventData
    fullName: com.microsoft.azure.eventhubs.EventData
  - name: '>'
    fullName: '>'
- uid: java.lang.IllegalArgumentException
  spec.java:
  - uid: java.lang.IllegalArgumentException
    name: IllegalArgumentException
    fullName: java.lang.IllegalArgumentException
- uid: com.microsoft.azure.eventhubs.PartitionSender
  name: PartitionSender
  nameWithType: PartitionSender
  fullName: com.microsoft.azure.eventhubs.PartitionSender
- uid: com.microsoft.azure.eventhubs.EventHubClient.createPartitionSenderSync*
  name: createPartitionSenderSync
  nameWithType: EventHubClient.createPartitionSenderSync
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createPartitionSenderSync
  package: com.microsoft.azure.eventhubs
- uid: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.PartitionSender>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: com.microsoft.azure.eventhubs.PartitionSender
    name: PartitionSender
    fullName: com.microsoft.azure.eventhubs.PartitionSender
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.EventHubClient.createPartitionSender*
  name: createPartitionSender
  nameWithType: EventHubClient.createPartitionSender
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createPartitionSender
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.EventPosition
  name: EventPosition
  nameWithType: EventPosition
  fullName: com.microsoft.azure.eventhubs.EventPosition
- uid: com.microsoft.azure.eventhubs.PartitionReceiver
  name: PartitionReceiver
  nameWithType: PartitionReceiver
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver
- uid: com.microsoft.azure.eventhubs.EventHubClient.createReceiverSync*
  name: createReceiverSync
  nameWithType: EventHubClient.createReceiverSync
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createReceiverSync
  package: com.microsoft.azure.eventhubs
- uid: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.PartitionReceiver>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: com.microsoft.azure.eventhubs.PartitionReceiver
    name: PartitionReceiver
    fullName: com.microsoft.azure.eventhubs.PartitionReceiver
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.EventHubClient.createReceiver*
  name: createReceiver
  nameWithType: EventHubClient.createReceiver
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createReceiver
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.ReceiverOptions
  name: ReceiverOptions
  nameWithType: ReceiverOptions
  fullName: com.microsoft.azure.eventhubs.ReceiverOptions
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiverSync*
  name: createEpochReceiverSync
  nameWithType: EventHubClient.createEpochReceiverSync
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiverSync
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiver*
  name: createEpochReceiver
  nameWithType: EventHubClient.createEpochReceiver
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiver
  package: com.microsoft.azure.eventhubs
- uid: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.EventHubRuntimeInformation>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: com.microsoft.azure.eventhubs.EventHubRuntimeInformation
    name: EventHubRuntimeInformation
    fullName: com.microsoft.azure.eventhubs.EventHubRuntimeInformation
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.EventHubClient.getRuntimeInformation*
  name: getRuntimeInformation
  nameWithType: EventHubClient.getRuntimeInformation
  fullName: com.microsoft.azure.eventhubs.EventHubClient.getRuntimeInformation
  package: com.microsoft.azure.eventhubs
- uid: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.PartitionRuntimeInformation>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: com.microsoft.azure.eventhubs.PartitionRuntimeInformation
    name: PartitionRuntimeInformation
    fullName: com.microsoft.azure.eventhubs.PartitionRuntimeInformation
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.EventHubClient.getPartitionRuntimeInformation*
  name: getPartitionRuntimeInformation
  nameWithType: EventHubClient.getPartitionRuntimeInformation
  fullName: com.microsoft.azure.eventhubs.EventHubClient.getPartitionRuntimeInformation
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.EventHubClient.close*
  name: close
  nameWithType: EventHubClient.close
  fullName: com.microsoft.azure.eventhubs.EventHubClient.close
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.EventHubClient.closeSync*
  name: closeSync
  nameWithType: EventHubClient.closeSync
  fullName: com.microsoft.azure.eventhubs.EventHubClient.closeSync
  package: com.microsoft.azure.eventhubs
- uid: java.util.concurrent.CompletableFuture
  name: CompletableFuture
  nameWithType: CompletableFuture
  fullName: java.util.concurrent.CompletableFuture
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: com.microsoft.azure.eventhubs.EventHubRuntimeInformation
  name: EventHubRuntimeInformation
  nameWithType: EventHubRuntimeInformation
  fullName: com.microsoft.azure.eventhubs.EventHubRuntimeInformation
- uid: com.microsoft.azure.eventhubs.PartitionRuntimeInformation
  name: PartitionRuntimeInformation
  nameWithType: PartitionRuntimeInformation
  fullName: com.microsoft.azure.eventhubs.PartitionRuntimeInformation
