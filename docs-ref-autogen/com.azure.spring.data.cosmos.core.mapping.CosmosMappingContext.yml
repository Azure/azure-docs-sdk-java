### YamlMime:ManagedReference
items:
- uid: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext
  id: CosmosMappingContext
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.mapping
  children:
  - com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.<T>createPersistentEntity(org.springframework.data.util.TypeInformation<T>)
  - com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.CosmosMappingContext()
  - com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.createPersistentProperty(org.springframework.data.mapping.model.Property,com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity<?>,org.springframework.data.mapping.model.SimpleTypeHolder)
  - com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.setApplicationContext(org.springframework.context.ApplicationContext)
  langs:
  - java
  name: CosmosMappingContext
  nameWithType: CosmosMappingContext
  fullName: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext
  type: Class
  package: com.azure.spring.data.cosmos.core.mapping
  summary: Class to build mapping metadata and thus create instances of <xref uid="com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity" data-throw-if-not-resolved="false">BasicCosmosPersistentEntity</xref> and <xref uid="com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty" data-throw-if-not-resolved="false">CosmosPersistentProperty</xref>.
  syntax:
    content: public class CosmosMappingContext extends AbstractMappingContext<BasicCosmosPersistentEntity<?>,CosmosPersistentProperty>
  inheritance:
  - java.lang.Object
  - org.springframework.data.mapping.context.AbstractMappingContext
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - org.springframework.data.mapping.context.AbstractMappingContext.<T>createPersistentEntity(org.springframework.data.util.TypeInformation<T>)
  - org.springframework.data.mapping.context.AbstractMappingContext.<T>doFindPersistentPropertyPaths(java.lang.Class<T>,java.util.function.Predicate<? super P>,java.util.function.Predicate<P>)
  - org.springframework.data.mapping.context.AbstractMappingContext.<T>findPersistentPropertyPaths(java.lang.Class<T>,java.util.function.Predicate<? super P>)
  - org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(java.lang.Class<?>)
  - org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(org.springframework.data.util.TypeInformation<?>)
  - org.springframework.data.mapping.context.AbstractMappingContext.afterPropertiesSet()
  - org.springframework.data.mapping.context.AbstractMappingContext.createPersistentProperty(org.springframework.data.mapping.model.Property,E,org.springframework.data.mapping.model.SimpleTypeHolder)
  - org.springframework.data.mapping.context.AbstractMappingContext.getManagedTypes()
  - org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntities()
  - org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(P)
  - org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(java.lang.Class<?>)
  - org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(org.springframework.data.util.TypeInformation<?>)
  - org.springframework.data.mapping.context.AbstractMappingContext.getPersistentPropertyPath(java.lang.String,java.lang.Class<?>)
  - org.springframework.data.mapping.context.AbstractMappingContext.getPersistentPropertyPath(org.springframework.data.mapping.PropertyPath)
  - org.springframework.data.mapping.context.AbstractMappingContext.hasPersistentEntityFor(java.lang.Class<?>)
  - org.springframework.data.mapping.context.AbstractMappingContext.initialize()
  - org.springframework.data.mapping.context.AbstractMappingContext.setApplicationContext(org.springframework.context.ApplicationContext)
  - org.springframework.data.mapping.context.AbstractMappingContext.setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)
  - org.springframework.data.mapping.context.AbstractMappingContext.setInitialEntitySet(java.util.Set<? extends java.lang.Class<?>>)
  - org.springframework.data.mapping.context.AbstractMappingContext.setSimpleTypeHolder(org.springframework.data.mapping.model.SimpleTypeHolder)
  - org.springframework.data.mapping.context.AbstractMappingContext.setStrict(boolean)
  - org.springframework.data.mapping.context.AbstractMappingContext.shouldCreatePersistentEntityFor(org.springframework.data.util.TypeInformation<?>)
- uid: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.<T>createPersistentEntity(org.springframework.data.util.TypeInformation<T>)
  id: <T>createPersistentEntity(org.springframework.data.util.TypeInformation<T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext
  langs:
  - java
  name: <T>createPersistentEntity(TypeInformation<T> typeInformation)
  nameWithType: CosmosMappingContext.<T>createPersistentEntity(TypeInformation<T> typeInformation)
  fullName: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.<T>createPersistentEntity(TypeInformation<T> typeInformation)
  overload: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.createPersistentEntity*
  type: Method
  package: com.azure.spring.data.cosmos.core.mapping
  syntax:
    content: protected BasicCosmosPersistentEntity<T> <T>createPersistentEntity(TypeInformation<T> typeInformation)
    parameters:
    - id: typeInformation
      type: org.springframework.data.util.TypeInformation<T>
    return:
      type: com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity<T>
- uid: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.CosmosMappingContext()
  id: CosmosMappingContext()
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext
  langs:
  - java
  name: CosmosMappingContext()
  nameWithType: CosmosMappingContext.CosmosMappingContext()
  fullName: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.CosmosMappingContext()
  overload: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.CosmosMappingContext*
  type: Constructor
  package: com.azure.spring.data.cosmos.core.mapping
  syntax:
    content: public CosmosMappingContext()
- uid: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.createPersistentProperty(org.springframework.data.mapping.model.Property,com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity<?>,org.springframework.data.mapping.model.SimpleTypeHolder)
  id: createPersistentProperty(org.springframework.data.mapping.model.Property,com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity<?>,org.springframework.data.mapping.model.SimpleTypeHolder)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext
  langs:
  - java
  name: createPersistentProperty(Property property, BasicCosmosPersistentEntity<?> owner, SimpleTypeHolder simpleTypeHolder)
  nameWithType: CosmosMappingContext.createPersistentProperty(Property property, BasicCosmosPersistentEntity<?> owner, SimpleTypeHolder simpleTypeHolder)
  fullName: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.createPersistentProperty(Property property, BasicCosmosPersistentEntity<?> owner, SimpleTypeHolder simpleTypeHolder)
  overload: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.createPersistentProperty*
  type: Method
  package: com.azure.spring.data.cosmos.core.mapping
  syntax:
    content: public CosmosPersistentProperty createPersistentProperty(Property property, BasicCosmosPersistentEntity<?> owner, SimpleTypeHolder simpleTypeHolder)
    parameters:
    - id: property
      type: org.springframework.data.mapping.model.Property
    - id: owner
      type: com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity<?>
    - id: simpleTypeHolder
      type: org.springframework.data.mapping.model.SimpleTypeHolder
    return:
      type: com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty
- uid: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.setApplicationContext(org.springframework.context.ApplicationContext)
  id: setApplicationContext(org.springframework.context.ApplicationContext)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext
  langs:
  - java
  name: setApplicationContext(ApplicationContext applicationContext)
  nameWithType: CosmosMappingContext.setApplicationContext(ApplicationContext applicationContext)
  fullName: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.setApplicationContext(ApplicationContext applicationContext)
  overload: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.setApplicationContext*
  type: Method
  package: com.azure.spring.data.cosmos.core.mapping
  syntax:
    content: public void setApplicationContext(ApplicationContext applicationContext)
    parameters:
    - id: applicationContext
      type: org.springframework.context.ApplicationContext
references:
- uid: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.CosmosMappingContext*
  name: CosmosMappingContext
  nameWithType: CosmosMappingContext.CosmosMappingContext
  fullName: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.CosmosMappingContext
  package: com.azure.spring.data.cosmos.core.mapping
- uid: org.springframework.data.util.TypeInformation<T>
  spec.java:
  - uid: org.springframework.data.util.TypeInformation
    name: TypeInformation
    fullName: org.springframework.data.util.TypeInformation
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity<T>
  spec.java:
  - uid: com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity
    name: BasicCosmosPersistentEntity
    fullName: com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.createPersistentEntity*
  name: <T>createPersistentEntity
  nameWithType: CosmosMappingContext.<T>createPersistentEntity
  fullName: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.<T>createPersistentEntity
  package: com.azure.spring.data.cosmos.core.mapping
- uid: org.springframework.data.mapping.model.Property
  spec.java:
  - uid: org.springframework.data.mapping.model.Property
    name: Property
    fullName: org.springframework.data.mapping.model.Property
- uid: com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity<?>
  spec.java:
  - uid: com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity
    name: BasicCosmosPersistentEntity
    fullName: com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: org.springframework.data.mapping.model.SimpleTypeHolder
  spec.java:
  - uid: org.springframework.data.mapping.model.SimpleTypeHolder
    name: SimpleTypeHolder
    fullName: org.springframework.data.mapping.model.SimpleTypeHolder
- uid: com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty
  name: CosmosPersistentProperty
  nameWithType: CosmosPersistentProperty
  fullName: com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty
- uid: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.createPersistentProperty*
  name: createPersistentProperty
  nameWithType: CosmosMappingContext.createPersistentProperty
  fullName: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.createPersistentProperty
  package: com.azure.spring.data.cosmos.core.mapping
- uid: org.springframework.context.ApplicationContext
  spec.java:
  - uid: org.springframework.context.ApplicationContext
    name: ApplicationContext
    fullName: org.springframework.context.ApplicationContext
- uid: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.setApplicationContext*
  name: setApplicationContext
  nameWithType: CosmosMappingContext.setApplicationContext
  fullName: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext.setApplicationContext
  package: com.azure.spring.data.cosmos.core.mapping
- uid: org.springframework.data.mapping.context.AbstractMappingContext<com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity<?>,com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty>
  name: AbstractMappingContext<BasicCosmosPersistentEntity<?>,CosmosPersistentProperty>
  nameWithType: AbstractMappingContext<BasicCosmosPersistentEntity<?>,CosmosPersistentProperty>
  fullName: org.springframework.data.mapping.context.AbstractMappingContext<com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity<?>,com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty>
- uid: org.springframework.data.mapping.context.AbstractMappingContext.<T>createPersistentEntity(org.springframework.data.util.TypeInformation<T>)
  name: AbstractMappingContext.<T>createPersistentEntity(TypeInformation<T>)
  nameWithType: AbstractMappingContext.<T>createPersistentEntity(TypeInformation<T>)
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.<T>createPersistentEntity(org.springframework.data.util.TypeInformation<T>)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: org.springframework.data.mapping.context.AbstractMappingContext.<T>findPersistentPropertyPaths(java.lang.Class<T>,java.util.function.Predicate<? super P>)
  name: AbstractMappingContext.<T>findPersistentPropertyPaths(Class<T>,Predicate<? super P>)
  nameWithType: AbstractMappingContext.<T>findPersistentPropertyPaths(Class<T>,Predicate<? super P>)
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.<T>findPersistentPropertyPaths(java.lang.Class<T>,java.util.function.Predicate<? super P>)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: org.springframework.data.mapping.context.AbstractMappingContext.createPersistentProperty(org.springframework.data.mapping.model.Property,E,org.springframework.data.mapping.model.SimpleTypeHolder)
  name: AbstractMappingContext.createPersistentProperty(Property,E,SimpleTypeHolder)
  nameWithType: AbstractMappingContext.createPersistentProperty(Property,E,SimpleTypeHolder)
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.createPersistentProperty(org.springframework.data.mapping.model.Property,E,org.springframework.data.mapping.model.SimpleTypeHolder)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: org.springframework.data.mapping.context.AbstractMappingContext.getPersistentPropertyPath(java.lang.String,java.lang.Class<?>)
  name: AbstractMappingContext.getPersistentPropertyPath(String,Class<?>)
  nameWithType: AbstractMappingContext.getPersistentPropertyPath(String,Class<?>)
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.getPersistentPropertyPath(java.lang.String,java.lang.Class<?>)
- uid: org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(java.lang.Class<?>)
  name: AbstractMappingContext.addPersistentEntity(Class<?>)
  nameWithType: AbstractMappingContext.addPersistentEntity(Class<?>)
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(java.lang.Class<?>)
- uid: org.springframework.data.mapping.context.AbstractMappingContext.afterPropertiesSet()
  name: AbstractMappingContext.afterPropertiesSet()
  nameWithType: AbstractMappingContext.afterPropertiesSet()
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.afterPropertiesSet()
- uid: org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(org.springframework.data.util.TypeInformation<?>)
  name: AbstractMappingContext.addPersistentEntity(TypeInformation<?>)
  nameWithType: AbstractMappingContext.addPersistentEntity(TypeInformation<?>)
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(org.springframework.data.util.TypeInformation<?>)
- uid: org.springframework.data.mapping.context.AbstractMappingContext.initialize()
  name: AbstractMappingContext.initialize()
  nameWithType: AbstractMappingContext.initialize()
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.initialize()
- uid: org.springframework.data.mapping.context.AbstractMappingContext.setInitialEntitySet(java.util.Set<? extends java.lang.Class<?>>)
  name: AbstractMappingContext.setInitialEntitySet(Set<? extends Class<?>>)
  nameWithType: AbstractMappingContext.setInitialEntitySet(Set<? extends Class<?>>)
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.setInitialEntitySet(java.util.Set<? extends java.lang.Class<?>>)
- uid: org.springframework.data.mapping.context.AbstractMappingContext.setSimpleTypeHolder(org.springframework.data.mapping.model.SimpleTypeHolder)
  name: AbstractMappingContext.setSimpleTypeHolder(SimpleTypeHolder)
  nameWithType: AbstractMappingContext.setSimpleTypeHolder(SimpleTypeHolder)
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.setSimpleTypeHolder(org.springframework.data.mapping.model.SimpleTypeHolder)
- uid: org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(java.lang.Class<?>)
  name: AbstractMappingContext.getPersistentEntity(Class<?>)
  nameWithType: AbstractMappingContext.getPersistentEntity(Class<?>)
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(java.lang.Class<?>)
- uid: org.springframework.data.mapping.context.AbstractMappingContext.getPersistentPropertyPath(org.springframework.data.mapping.PropertyPath)
  name: AbstractMappingContext.getPersistentPropertyPath(PropertyPath)
  nameWithType: AbstractMappingContext.getPersistentPropertyPath(PropertyPath)
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.getPersistentPropertyPath(org.springframework.data.mapping.PropertyPath)
- uid: org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntities()
  name: AbstractMappingContext.getPersistentEntities()
  nameWithType: AbstractMappingContext.getPersistentEntities()
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntities()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: org.springframework.data.mapping.context.AbstractMappingContext.hasPersistentEntityFor(java.lang.Class<?>)
  name: AbstractMappingContext.hasPersistentEntityFor(Class<?>)
  nameWithType: AbstractMappingContext.hasPersistentEntityFor(Class<?>)
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.hasPersistentEntityFor(java.lang.Class<?>)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: org.springframework.data.mapping.context.AbstractMappingContext.setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)
  name: AbstractMappingContext.setApplicationEventPublisher(ApplicationEventPublisher)
  nameWithType: AbstractMappingContext.setApplicationEventPublisher(ApplicationEventPublisher)
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: org.springframework.data.mapping.context.AbstractMappingContext.shouldCreatePersistentEntityFor(org.springframework.data.util.TypeInformation<?>)
  name: AbstractMappingContext.shouldCreatePersistentEntityFor(TypeInformation<?>)
  nameWithType: AbstractMappingContext.shouldCreatePersistentEntityFor(TypeInformation<?>)
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.shouldCreatePersistentEntityFor(org.springframework.data.util.TypeInformation<?>)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: org.springframework.data.mapping.context.AbstractMappingContext.setApplicationContext(org.springframework.context.ApplicationContext)
  name: AbstractMappingContext.setApplicationContext(ApplicationContext)
  nameWithType: AbstractMappingContext.setApplicationContext(ApplicationContext)
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.setApplicationContext(org.springframework.context.ApplicationContext)
- uid: org.springframework.data.mapping.context.AbstractMappingContext.setStrict(boolean)
  name: AbstractMappingContext.setStrict(boolean)
  nameWithType: AbstractMappingContext.setStrict(boolean)
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.setStrict(boolean)
- uid: org.springframework.data.mapping.context.AbstractMappingContext.<T>doFindPersistentPropertyPaths(java.lang.Class<T>,java.util.function.Predicate<? super P>,java.util.function.Predicate<P>)
  name: AbstractMappingContext.<T>doFindPersistentPropertyPaths(Class<T>,Predicate<? super P>,Predicate<P>)
  nameWithType: AbstractMappingContext.<T>doFindPersistentPropertyPaths(Class<T>,Predicate<? super P>,Predicate<P>)
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.<T>doFindPersistentPropertyPaths(java.lang.Class<T>,java.util.function.Predicate<? super P>,java.util.function.Predicate<P>)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(P)
  name: AbstractMappingContext.getPersistentEntity(P)
  nameWithType: AbstractMappingContext.getPersistentEntity(P)
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(P)
- uid: org.springframework.data.mapping.context.AbstractMappingContext.getManagedTypes()
  name: AbstractMappingContext.getManagedTypes()
  nameWithType: AbstractMappingContext.getManagedTypes()
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.getManagedTypes()
- uid: org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(org.springframework.data.util.TypeInformation<?>)
  name: AbstractMappingContext.getPersistentEntity(TypeInformation<?>)
  nameWithType: AbstractMappingContext.getPersistentEntity(TypeInformation<?>)
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(org.springframework.data.util.TypeInformation<?>)
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: org.springframework.data.util.TypeInformation
  name: TypeInformation
  nameWithType: TypeInformation
  fullName: org.springframework.data.util.TypeInformation
- uid: com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity
  name: BasicCosmosPersistentEntity
  nameWithType: BasicCosmosPersistentEntity
  fullName: com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: org.springframework.data.mapping.context.AbstractMappingContext
  name: AbstractMappingContext
  nameWithType: AbstractMappingContext
  fullName: org.springframework.data.mapping.context.AbstractMappingContext
- uid: ?>,com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty
  name: ?>,CosmosPersistentProperty
  nameWithType: ?>,CosmosPersistentProperty
  fullName: ?>,com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty
- uid: org.springframework.data.mapping.context.AbstractMappingContext.
  name: AbstractMappingContext.
  nameWithType: AbstractMappingContext.
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.
- uid: T>createPersistentEntity(org.springframework.data.util.TypeInformation
  name: T>createPersistentEntity(TypeInformation
  nameWithType: T>createPersistentEntity(TypeInformation
  fullName: T>createPersistentEntity(org.springframework.data.util.TypeInformation
- uid: T>)
  name: T>)
  nameWithType: T>)
  fullName: T>)
- uid: '? super P>)'
  name: '? super P>)'
  nameWithType: '? super P>)'
  fullName: '? super P>)'
- uid: T>,java.util.function.Predicate
  name: T>,Predicate
  nameWithType: T>,Predicate
  fullName: T>,java.util.function.Predicate
- uid: T>findPersistentPropertyPaths(java.lang.Class
  name: T>findPersistentPropertyPaths(Class
  nameWithType: T>findPersistentPropertyPaths(Class
  fullName: T>findPersistentPropertyPaths(java.lang.Class
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: org.springframework.data.mapping.context.AbstractMappingContext.getPersistentPropertyPath(java.lang.String,java.lang.Class
  name: AbstractMappingContext.getPersistentPropertyPath(String,Class
  nameWithType: AbstractMappingContext.getPersistentPropertyPath(String,Class
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.getPersistentPropertyPath(java.lang.String,java.lang.Class
- uid: org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(java.lang.Class
  name: AbstractMappingContext.addPersistentEntity(Class
  nameWithType: AbstractMappingContext.addPersistentEntity(Class
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(java.lang.Class
- uid: org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(org.springframework.data.util.TypeInformation
  name: AbstractMappingContext.addPersistentEntity(TypeInformation
  nameWithType: AbstractMappingContext.addPersistentEntity(TypeInformation
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(org.springframework.data.util.TypeInformation
- uid: org.springframework.data.mapping.context.AbstractMappingContext.setInitialEntitySet(java.util.Set
  name: AbstractMappingContext.setInitialEntitySet(Set
  nameWithType: AbstractMappingContext.setInitialEntitySet(Set
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.setInitialEntitySet(java.util.Set
- uid: '? extends java.lang.Class'
  name: '? extends Class'
  nameWithType: '? extends Class'
  fullName: '? extends java.lang.Class'
- uid: ?>>)
  name: ?>>)
  nameWithType: ?>>)
  fullName: ?>>)
- uid: org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(java.lang.Class
  name: AbstractMappingContext.getPersistentEntity(Class
  nameWithType: AbstractMappingContext.getPersistentEntity(Class
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(java.lang.Class
- uid: org.springframework.data.mapping.context.AbstractMappingContext.hasPersistentEntityFor(java.lang.Class
  name: AbstractMappingContext.hasPersistentEntityFor(Class
  nameWithType: AbstractMappingContext.hasPersistentEntityFor(Class
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.hasPersistentEntityFor(java.lang.Class
- uid: org.springframework.data.mapping.context.AbstractMappingContext.shouldCreatePersistentEntityFor(org.springframework.data.util.TypeInformation
  name: AbstractMappingContext.shouldCreatePersistentEntityFor(TypeInformation
  nameWithType: AbstractMappingContext.shouldCreatePersistentEntityFor(TypeInformation
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.shouldCreatePersistentEntityFor(org.springframework.data.util.TypeInformation
- uid: T>doFindPersistentPropertyPaths(java.lang.Class
  name: T>doFindPersistentPropertyPaths(Class
  nameWithType: T>doFindPersistentPropertyPaths(Class
  fullName: T>doFindPersistentPropertyPaths(java.lang.Class
- uid: P>)
  name: P>)
  nameWithType: P>)
  fullName: P>)
- uid: '? super P>,java.util.function.Predicate'
  name: '? super P>,Predicate'
  nameWithType: '? super P>,Predicate'
  fullName: '? super P>,java.util.function.Predicate'
- uid: org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(org.springframework.data.util.TypeInformation
  name: AbstractMappingContext.getPersistentEntity(TypeInformation
  nameWithType: AbstractMappingContext.getPersistentEntity(TypeInformation
  fullName: org.springframework.data.mapping.context.AbstractMappingContext.getPersistentEntity(org.springframework.data.util.TypeInformation
