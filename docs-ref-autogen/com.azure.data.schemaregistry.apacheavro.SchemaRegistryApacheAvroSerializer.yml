### YamlMime:JavaType
uid: "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer"
fullName: "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer"
name: "SchemaRegistryApacheAvroSerializer"
nameWithType: "SchemaRegistryApacheAvroSerializer"
summary: "Schema Registry-based serializer implementation for Avro data format using Apache Avro."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class SchemaRegistryApacheAvroSerializer"
methods:
- uid: "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>deserialize(com.azure.core.models.MessageContent,com.azure.core.util.serializer.TypeReference<T>)"
  fullName: "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>deserialize(MessageContent message, TypeReference<T> typeReference)"
  name: "<T>deserialize(MessageContent message, TypeReference<T> typeReference)"
  nameWithType: "SchemaRegistryApacheAvroSerializer.<T>deserialize(MessageContent message, TypeReference<T> typeReference)"
  summary: "Deserializes a message into its object."
  parameters:
  - description: "Object to deserialize."
    name: "message"
    type: "<xref href=\"com.azure.core.models.MessageContent?alt=com.azure.core.models.MessageContent&text=MessageContent\" data-throw-if-not-resolved=\"False\" />"
  - description: "Message type to deserialize to."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>deserialize(MessageContent message, TypeReference<T> typeReference)"
  desc: "Deserializes a message into its object."
  returns:
    description: "The message deserialized."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>deserializeAsync(com.azure.core.models.MessageContent,com.azure.core.util.serializer.TypeReference<T>)"
  fullName: "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>deserializeAsync(MessageContent message, TypeReference<T> typeReference)"
  name: "<T>deserializeAsync(MessageContent message, TypeReference<T> typeReference)"
  nameWithType: "SchemaRegistryApacheAvroSerializer.<T>deserializeAsync(MessageContent message, TypeReference<T> typeReference)"
  summary: "Deserializes a message into its object."
  parameters:
  - description: "Object to deserialize."
    name: "message"
    type: "<xref href=\"com.azure.core.models.MessageContent?alt=com.azure.core.models.MessageContent&text=MessageContent\" data-throw-if-not-resolved=\"False\" />"
  - description: "Message to deserialize to."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<T> <T>deserializeAsync(MessageContent message, TypeReference<T> typeReference)"
  desc: "Deserializes a message into its object."
  returns:
    description: "A Mono that completes when the message encoded. If <code>message.getBodyAsBinaryData()</code> is null or\n     empty, then an empty Mono is returned."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>serialize(java.lang.Object,com.azure.core.util.serializer.TypeReference<T>)"
  fullName: "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>serialize(Object object, TypeReference<T> typeReference)"
  name: "<T>serialize(Object object, TypeReference<T> typeReference)"
  nameWithType: "SchemaRegistryApacheAvroSerializer.<T>serialize(Object object, TypeReference<T> typeReference)"
  summary: "Serializes an object into a message."
  parameters:
  - description: "Object to serialize."
    name: "object"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "Type of message to create."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>serialize(Object object, TypeReference<T> typeReference)"
  desc: "Serializes an object into a message."
  returns:
    description: "The message encoded or <code>null</code> if the message could not be serialized."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>serialize(java.lang.Object,com.azure.core.util.serializer.TypeReference<T>,java.util.function.Function<com.azure.core.util.BinaryData,T>)"
  fullName: "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>serialize(Object object, TypeReference<T> typeReference, Function<BinaryData,T> messageFactory)"
  name: "<T>serialize(Object object, TypeReference<T> typeReference, Function<BinaryData,T> messageFactory)"
  nameWithType: "SchemaRegistryApacheAvroSerializer.<T>serialize(Object object, TypeReference<T> typeReference, Function<BinaryData,T> messageFactory)"
  summary: "Serializes an object into a message."
  parameters:
  - description: "Object to serialize."
    name: "object"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "Type of message to create."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Factory to create an instance given the serialized Avro."
    name: "messageFactory"
    type: "<xref href=\"java.util.function.Function?alt=java.util.function.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />,<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>serialize(Object object, TypeReference<T> typeReference, Function<BinaryData,T> messageFactory)"
  desc: "Serializes an object into a message."
  returns:
    description: "The message encoded or <code>null</code> if the message could not be serialized."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>serializeAsync(java.lang.Object,com.azure.core.util.serializer.TypeReference<T>)"
  fullName: "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>serializeAsync(Object object, TypeReference<T> typeReference)"
  name: "<T>serializeAsync(Object object, TypeReference<T> typeReference)"
  nameWithType: "SchemaRegistryApacheAvroSerializer.<T>serializeAsync(Object object, TypeReference<T> typeReference)"
  summary: "Serializes an object into a message."
  parameters:
  - description: "Object to serialize."
    name: "object"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "Type of message to create."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<T> <T>serializeAsync(Object object, TypeReference<T> typeReference)"
  desc: "Serializes an object into a message."
  returns:
    description: "A Mono that completes with the serialized message."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>serializeAsync(java.lang.Object,com.azure.core.util.serializer.TypeReference<T>,java.util.function.Function<com.azure.core.util.BinaryData,T>)"
  fullName: "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>serializeAsync(Object object, TypeReference<T> typeReference, Function<BinaryData,T> messageFactory)"
  name: "<T>serializeAsync(Object object, TypeReference<T> typeReference, Function<BinaryData,T> messageFactory)"
  nameWithType: "SchemaRegistryApacheAvroSerializer.<T>serializeAsync(Object object, TypeReference<T> typeReference, Function<BinaryData,T> messageFactory)"
  summary: "Serializes an object into a message."
  parameters:
  - description: "Object to serialize."
    name: "object"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "Type of message to create."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Factory to create an instance given the serialized Avro. If null is passed in, then the\n     no argument constructor will be used."
    name: "messageFactory"
    type: "<xref href=\"java.util.function.Function?alt=java.util.function.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />,<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<T> <T>serializeAsync(Object object, TypeReference<T> typeReference, Function<BinaryData,T> messageFactory)"
  desc: "Serializes an object into a message."
  returns:
    description: "A Mono that completes with the serialized message."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Schema Registry-based serializer implementation for Avro data format using Apache Avro.\n\n**Creating a <xref uid=\"com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SchemaRegistryApacheAvroSerializer\"></xref>**\n\n```java\nTokenCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n SchemaRegistryAsyncClient schemaRegistryAsyncClient = new SchemaRegistryClientBuilder()\n     .credential(tokenCredential)\n     .fullyQualifiedNamespace(\"{schema-registry-endpoint}\")\n     .buildAsyncClient();\n\n // By setting autoRegisterSchema to true, if the schema does not exist in the Schema Registry instance, it is\n // added to the instance. By default, this is false, so it will error if the schema is not found.\n SchemaRegistryApacheAvroSerializer serializer = new SchemaRegistryApacheAvroSerializerBuilder()\n     .schemaRegistryClient(schemaRegistryAsyncClient)\n     .autoRegisterSchemas(true)\n     .schemaGroup(\"{schema-group}\")\n     .buildSerializer();\n```\n\n**Serialize an object**\n\nSerializes an Avro generated object into <xref uid=\"com.azure.core.models.MessageContent\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessageContent\"></xref>. <xref uid=\"com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>serialize(java.lang.Object,com.azure.core.util.serializer.TypeReference<T>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#serialize(Object, TypeReference)\"></xref> assumes that there is a no argument constructor used to instantiate the <xref uid=\"com.azure.core.models.MessageContent\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessageContent\"></xref> type. If there is a different way to instantiate the concrete type, use the overload which takes a message factory function, <xref uid=\"com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.<T>serialize(java.lang.Object,com.azure.core.util.serializer.TypeReference<T>,java.util.function.Function<com.azure.core.util.BinaryData,T>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#serialize(Object, TypeReference, Function)\"></xref>.\n\n```java\n// The object to encode. The avro schema is:\n // {\n //     \"namespace\": \"com.azure.data.schemaregistry.apacheavro.generatedtestsources\",\n //     \"type\": \"record\",\n //     \"name\": \"Person\",\n //     \"fields\": [\n //         {\"name\":\"name\", \"type\": \"string\"},\n //         {\"name\":\"favourite_number\", \"type\": [\"int\", \"null\"]},\n //         {\"name\":\"favourite_colour\", \"type\": [\"string\", \"null\"]}\n //   ]\n // }\n Person person = Person.newBuilder()\n     .setName(\"Alina\")\n     .setFavouriteColour(\"Turquoise\")\n     .build();\n\n MessageContent message = serializer.serialize(person,\n     TypeReference.createInstance(MessageContent.class));\n```\n\n**Deserialize an object**\n\n```java\n// Message to deserialize. Assume that the body contains data which has been serialized using an Avro encoder.\n MessageContent message = new MessageContent()\n     .setBodyAsBinaryData(BinaryData.fromBytes(new byte[0]))\n     .setContentType(\"avro/binary+{schema-id}\");\n\n // This is an object generated from the Avro schema used in the serialization sample.\n Person person = serializer.deserialize(message, TypeReference.createInstance(Person.class));\n```\n\n**Serialize an object using a message factory**\n\nSerializes an Avro generated object into <xref uid=\"com.azure.core.models.MessageContent\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessageContent\"></xref>. It uses the <xref uid=\"java.util.function.Function\" data-throw-if-not-resolved=\"false\" data-raw-source=\"messageFactory\"></xref> to instantiate and populate the type.\n\n```java\n// The object to encode. The avro schema is:\n // {\n //     \"namespace\": \"com.azure.data.schemaregistry.apacheavro.generatedtestsources\",\n //     \"type\": \"record\",\n //     \"name\": \"Person\",\n //     \"fields\": [\n //         {\"name\":\"name\", \"type\": \"string\"},\n //         {\"name\":\"favourite_number\", \"type\": [\"int\", \"null\"]},\n //         {\"name\":\"favourite_colour\", \"type\": [\"string\", \"null\"]}\n //   ]\n // }\n Person person = Person.newBuilder()\n     .setName(\"Alina\")\n     .setFavouriteColour(\"Turquoise\")\n     .build();\n\n // Serializes and creates an instance of ComplexMessage using the messageFactory function.\n ComplexMessage message = serializer.serialize(person,\n     TypeReference.createInstance(ComplexMessage.class),\n     (encodedData) -> {\n         return new ComplexMessage(\"unique-id\", OffsetDateTime.now());\n     });\n```"
metadata: {}
package: "com.azure.data.schemaregistry.apacheavro"
artifact: com.azure:azure-data-schemaregistry-apacheavro:1.0.3
