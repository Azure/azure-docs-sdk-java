### YamlMime:JavaType
uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient"
name: "CryptographyClient"
nameWithType: "CryptographyClient"
summary: "The <xref uid=\"com.azure.security.keyvault.keys.cryptography.CryptographyClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CryptographyClient\"></xref> provides synchronous methods to perform cryptographic operations using asymmetric and symmetric keys."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class CryptographyClient"
methods:
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.decrypt(com.azure.security.keyvault.keys.cryptography.models.DecryptParameters,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.decrypt(DecryptParameters decryptParameters, Context context)"
  name: "decrypt(DecryptParameters decryptParameters, Context context)"
  nameWithType: "CryptographyClient.decrypt(DecryptParameters decryptParameters, Context context)"
  summary: "Decrypts a single block of encrypted data using the configured key and specified algorithm."
  parameters:
  - description: "The parameters to use in the decryption operation. Microsoft recommends you not use CBC\n without first ensuring the integrity of the ciphertext using an HMAC, for example.\n See https://docs.microsoft.com/dotnet/standard/security/vulnerabilities-cbc-mode for more information."
    name: "decryptParameters"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.DecryptParameters?alt=com.azure.security.keyvault.keys.cryptography.models.DecryptParameters&text=DecryptParameters\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DecryptResult decrypt(DecryptParameters decryptParameters, Context context)"
  desc: "Decrypts a single block of encrypted data using the configured key and specified algorithm. Note that only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The decrypt operation is supported for both asymmetric and symmetric keys. This operation requires the `keys/decrypt` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"encryption algorithm\"></xref> indicates the type of algorithm to use for decrypting the specified encrypted content. Possible values for asymmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA1_5\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP_256\"></xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBCPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC_HS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBC-HS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128GCM\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBCPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC_HS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBC-HS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192GCM\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC_HS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBC-HS512\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256GCM\"></xref>.\n\n**Code Samples**\n\nDecrypts the encrypted content. Subscribes to the call asynchronously and prints out the decrypted content details when a response has been received.\n\n```java\nbyte[] myCiphertext = new byte[100];\n new Random(0x1234567L).nextBytes(myCiphertext);\n byte[] iv = {\n     (byte) 0x1a, (byte) 0xf3, (byte) 0x8c, (byte) 0x2d, (byte) 0xc2, (byte) 0xb9, (byte) 0x6f, (byte) 0xfd,\n     (byte) 0xd8, (byte) 0x66, (byte) 0x94, (byte) 0x09, (byte) 0x23, (byte) 0x41, (byte) 0xbc, (byte) 0x04\n };\n\n DecryptParameters decryptParameters = DecryptParameters.createA128CbcParameters(myCiphertext, iv);\n DecryptResult decryptedResult = cryptographyClient.decrypt(decryptParameters, new Context(\"key1\", \"value1\"));\n\n System.out.printf(\"Received decrypted content of length: %d.%n\", decryptedResult.getPlainText().length);\n```"
  returns:
    description: "The <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.DecryptResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DecryptResult\"></xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.DecryptResult.getPlainText()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"plain text\"></xref> contains the decrypted\n content."
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.DecryptResult?alt=com.azure.security.keyvault.keys.cryptography.models.DecryptResult&text=DecryptResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.decrypt(EncryptionAlgorithm algorithm, byte[] ciphertext)"
  name: "decrypt(EncryptionAlgorithm algorithm, byte[] ciphertext)"
  nameWithType: "CryptographyClient.decrypt(EncryptionAlgorithm algorithm, byte[] ciphertext)"
  summary: "Decrypts a single block of encrypted data using the configured key and specified algorithm."
  parameters:
  - description: "The algorithm to be used for decryption."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm&text=EncryptionAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The content to be decrypted. Microsoft recommends you not use CBC without first ensuring the\n integrity of the ciphertext using an HMAC, for example.\n See https://docs.microsoft.com/dotnet/standard/security/vulnerabilities-cbc-mode for more information."
    name: "ciphertext"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public DecryptResult decrypt(EncryptionAlgorithm algorithm, byte[] ciphertext)"
  desc: "Decrypts a single block of encrypted data using the configured key and specified algorithm. Note that only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The decrypt operation is supported for both asymmetric and symmetric keys. This operation requires the `keys/decrypt` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"encryption algorithm\"></xref> indicates the type of algorithm to use for decrypting the specified encrypted content. Possible values for asymmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA1_5\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP_256\"></xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBCPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC_HS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBC-HS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128GCM\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBCPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC_HS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBC-HS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192GCM\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC_HS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBC-HS512\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256GCM\"></xref>.\n\n**Code Samples**\n\nDecrypts the encrypted content. Subscribes to the call asynchronously and prints out the decrypted content details when a response has been received.\n\n```java\nbyte[] ciphertext = new byte[100];\n new Random(0x1234567L).nextBytes(ciphertext);\n\n DecryptResult decryptResult = cryptographyClient.decrypt(EncryptionAlgorithm.RSA_OAEP, ciphertext);\n\n System.out.printf(\"Received decrypted content of length: %d.%n\", decryptResult.getPlainText().length);\n```"
  returns:
    description: "The <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.DecryptResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DecryptResult\"></xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.DecryptResult.getPlainText()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"plain text\"></xref> contains the decrypted\n content."
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.DecryptResult?alt=com.azure.security.keyvault.keys.cryptography.models.DecryptResult&text=DecryptResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.decrypt(EncryptionAlgorithm algorithm, byte[] ciphertext, Context context)"
  name: "decrypt(EncryptionAlgorithm algorithm, byte[] ciphertext, Context context)"
  nameWithType: "CryptographyClient.decrypt(EncryptionAlgorithm algorithm, byte[] ciphertext, Context context)"
  summary: "Decrypts a single block of encrypted data using the configured key and specified algorithm."
  parameters:
  - description: "The algorithm to be used for decryption."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm&text=EncryptionAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The content to be decrypted. Microsoft recommends you not use CBC without first ensuring the\n integrity of the ciphertext using an HMAC, for example.\n See https://docs.microsoft.com/dotnet/standard/security/vulnerabilities-cbc-mode for more information."
    name: "ciphertext"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Additional context that is passed through the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DecryptResult decrypt(EncryptionAlgorithm algorithm, byte[] ciphertext, Context context)"
  desc: "Decrypts a single block of encrypted data using the configured key and specified algorithm. Note that only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The decrypt operation is supported for both asymmetric and symmetric keys. This operation requires the `keys/decrypt` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"encryption algorithm\"></xref> indicates the type of algorithm to use for decrypting the specified encrypted content. Possible values for asymmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA1_5\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP_256\"></xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBCPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC_HS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBC-HS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128GCM\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBCPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC_HS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBC-HS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192GCM\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC_HS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBC-HS512\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256GCM\"></xref>.\n\n**Code Samples**\n\nDecrypts the encrypted content. Subscribes to the call asynchronously and prints out the decrypted content details when a response has been received.\n\n```java\nbyte[] ciphertextToDecrypt = new byte[100];\n new Random(0x1234567L).nextBytes(ciphertextToDecrypt);\n\n DecryptResult decryptionResult = cryptographyClient.decrypt(EncryptionAlgorithm.RSA_OAEP, ciphertextToDecrypt,\n     new Context(\"key1\", \"value1\"));\n\n System.out.printf(\"Received decrypted content of length: %d.%n\", decryptionResult.getPlainText().length);\n```"
  returns:
    description: "The <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.DecryptResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DecryptResult\"></xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.DecryptResult.getPlainText()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"plain text\"></xref> contains the decrypted\n content."
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.DecryptResult?alt=com.azure.security.keyvault.keys.cryptography.models.DecryptResult&text=DecryptResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptParameters,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.encrypt(EncryptParameters encryptParameters, Context context)"
  name: "encrypt(EncryptParameters encryptParameters, Context context)"
  nameWithType: "CryptographyClient.encrypt(EncryptParameters encryptParameters, Context context)"
  summary: "Encrypts an arbitrary sequence of bytes using the configured key."
  parameters:
  - description: "The parameters to use in the encryption operation."
    name: "encryptParameters"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.EncryptParameters?alt=com.azure.security.keyvault.keys.cryptography.models.EncryptParameters&text=EncryptParameters\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public EncryptResult encrypt(EncryptParameters encryptParameters, Context context)"
  desc: "Encrypts an arbitrary sequence of bytes using the configured key. Note that the encrypt operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The encrypt operation is supported for both symmetric keys and asymmetric keys. In case of asymmetric keys, the public portion of the key is used for encryption. This operation requires the `keys/encrypt` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"encryption algorithm\"></xref> indicates the type of algorithm to use for encrypting the specified `plaintext`. Possible values for asymmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA1_5\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP_256\"></xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBCPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC_HS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBC-HS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128GCM\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBCPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC_HS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBC-HS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192GCM\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC_HS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBC-HS512\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256GCM\"></xref>.\n\n**Code Samples**\n\nEncrypts the content. Subscribes to the call asynchronously and prints out the encrypted content details when a response has been received.\n\n```java\nbyte[] myPlaintext = new byte[100];\n new Random(0x1234567L).nextBytes(myPlaintext);\n byte[] iv = {\n     (byte) 0x1a, (byte) 0xf3, (byte) 0x8c, (byte) 0x2d, (byte) 0xc2, (byte) 0xb9, (byte) 0x6f, (byte) 0xfd,\n     (byte) 0xd8, (byte) 0x66, (byte) 0x94, (byte) 0x09, (byte) 0x23, (byte) 0x41, (byte) 0xbc, (byte) 0x04\n };\n\n EncryptParameters encryptParameters = EncryptParameters.createA128CbcParameters(myPlaintext, iv);\n EncryptResult encryptedResult = cryptographyClient.encrypt(encryptParameters, new Context(\"key1\", \"value1\"));\n\n System.out.printf(\"Received encrypted content of length: %d, with algorithm: %s.%n\",\n     encryptedResult.getCipherText().length, encryptedResult.getAlgorithm());\n```"
  returns:
    description: "The <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EncryptResult\"></xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptResult.getCipherText()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"cipher text\"></xref> contains the encrypted\n content."
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.EncryptResult?alt=com.azure.security.keyvault.keys.cryptography.models.EncryptResult&text=EncryptResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.encrypt(EncryptionAlgorithm algorithm, byte[] plaintext)"
  name: "encrypt(EncryptionAlgorithm algorithm, byte[] plaintext)"
  nameWithType: "CryptographyClient.encrypt(EncryptionAlgorithm algorithm, byte[] plaintext)"
  summary: "Encrypts an arbitrary sequence of bytes using the configured key."
  parameters:
  - description: "The algorithm to be used for encryption."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm&text=EncryptionAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The content to be encrypted."
    name: "plaintext"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public EncryptResult encrypt(EncryptionAlgorithm algorithm, byte[] plaintext)"
  desc: "Encrypts an arbitrary sequence of bytes using the configured key. Note that the encrypt operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The encrypt operation is supported for both symmetric keys and asymmetric keys. In case of asymmetric keys, the public portion of the key is used for encryption. This operation requires the `keys/encrypt` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"encryption algorithm\"></xref> indicates the type of algorithm to use for encrypting the specified `plaintext`. Possible values for asymmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA1_5\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP_256\"></xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBCPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC_HS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBC-HS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128GCM\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBCPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC_HS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBC-HS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192GCM\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC_HS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBC-HS512\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256GCM\"></xref>.\n\n**Code Samples**\n\nEncrypts the content. Subscribes to the call asynchronously and prints out the encrypted content details when a response has been received.\n\n```java\nbyte[] plaintext = new byte[100];\n new Random(0x1234567L).nextBytes(plaintext);\n\n EncryptResult encryptResult = cryptographyClient.encrypt(EncryptionAlgorithm.RSA_OAEP, plaintext);\n\n System.out.printf(\"Received encrypted content of length: %d, with algorithm: %s.%n\",\n     encryptResult.getCipherText().length, encryptResult.getAlgorithm());\n```"
  returns:
    description: "The <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EncryptResult\"></xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptResult.getCipherText()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"cipher text\"></xref> contains the encrypted\n content."
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.EncryptResult?alt=com.azure.security.keyvault.keys.cryptography.models.EncryptResult&text=EncryptResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, Context context)"
  name: "encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, Context context)"
  nameWithType: "CryptographyClient.encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, Context context)"
  summary: "Encrypts an arbitrary sequence of bytes using the configured key."
  parameters:
  - description: "The algorithm to be used for encryption."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm&text=EncryptionAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The content to be encrypted."
    name: "plaintext"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Additional context that is passed through the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public EncryptResult encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, Context context)"
  desc: "Encrypts an arbitrary sequence of bytes using the configured key. Note that the encrypt operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The encrypt operation is supported for both symmetric keys and asymmetric keys. In case of asymmetric keys, the public portion of the key is used for encryption. This operation requires the `keys/encrypt` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"encryption algorithm\"></xref> indicates the type of algorithm to use for encrypting the specified `plaintext`. Possible values for asymmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA1_5\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP_256\"></xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBCPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC_HS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBC-HS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128GCM\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBCPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC_HS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBC-HS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192GCM\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC_HS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBC-HS512\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256GCM\"></xref>.\n\n**Code Samples**\n\nEncrypts the content. Subscribes to the call asynchronously and prints out the encrypted content details when a response has been received.\n\n```java\nbyte[] plaintextToEncrypt = new byte[100];\n new Random(0x1234567L).nextBytes(plaintextToEncrypt);\n\n EncryptResult encryptionResult = cryptographyClient.encrypt(EncryptionAlgorithm.RSA_OAEP, plaintextToEncrypt,\n     new Context(\"key1\", \"value1\"));\n\n System.out.printf(\"Received encrypted content of length: %d, with algorithm: %s.%n\",\n     encryptionResult.getCipherText().length, encryptionResult.getAlgorithm());\n```"
  returns:
    description: "The <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EncryptResult\"></xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptResult.getCipherText()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"cipher text\"></xref> contains the encrypted\n content."
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.EncryptResult?alt=com.azure.security.keyvault.keys.cryptography.models.EncryptResult&text=EncryptResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getKey()"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getKey()"
  name: "getKey()"
  nameWithType: "CryptographyClient.getKey()"
  summary: "Gets the public part of the configured key."
  syntax: "public KeyVaultKey getKey()"
  desc: "Gets the public part of the configured key. The get key operation is applicable to all key types and it requires the `keys/get` permission for non-local operations.\n\n**Code Samples**\n\nGets the configured key in the client. Subscribes to the call asynchronously and prints out the returned key details when a response has been received.\n\n```java\nKeyVaultKey key = cryptographyClient.getKey();\n\n System.out.printf(\"Key returned with name: %s and id: %s.%n\", key.getName(), key.getId());\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the requested <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.KeyVaultKey?alt=com.azure.security.keyvault.keys.models.KeyVaultKey&text=KeyVaultKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getKeyWithResponse(com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.getKeyWithResponse(Context context)"
  name: "getKeyWithResponse(Context context)"
  nameWithType: "CryptographyClient.getKeyWithResponse(Context context)"
  summary: "Gets the public part of the configured key."
  parameters:
  - description: "Additional context that is passed through the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<KeyVaultKey> getKeyWithResponse(Context context)"
  desc: "Gets the public part of the configured key. The get key operation is applicable to all key types and it requires the `keys/get` permission for non-local operations.\n\n**Code Samples**\n\nGets the configured key in the client. Subscribes to the call asynchronously and prints out the returned key details when a response has been received.\n\n```java\nKeyVaultKey keyWithVersion = cryptographyClient.getKeyWithResponse(new Context(\"key1\", \"value1\")).getValue();\n\n System.out.printf(\"Key is returned with name: %s and id %s.%n\", keyWithVersion.getName(),\n     keyWithVersion.getId());\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the\n requested <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.models.KeyVaultKey?alt=com.azure.security.keyvault.keys.models.KeyVaultKey&text=KeyVaultKey\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.sign(SignatureAlgorithm algorithm, byte[] digest)"
  name: "sign(SignatureAlgorithm algorithm, byte[] digest)"
  nameWithType: "CryptographyClient.sign(SignatureAlgorithm algorithm, byte[] digest)"
  summary: "Creates a signature from a digest using the configured key."
  parameters:
  - description: "The algorithm to use for signing."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm&text=SignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The content from which signature is to be created."
    name: "digest"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public SignResult sign(SignatureAlgorithm algorithm, byte[] digest)"
  desc: "Creates a signature from a digest using the configured key. The sign operation supports both asymmetric and symmetric keys. This operation requires the `keys/sign` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"signature algorithm\"></xref> indicates the type of algorithm to use to create the signature from the digest. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"E384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES246K\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>\n\n**Code Samples**\n\nSings the digest. Subscribes to the call asynchronously and prints out the signature details when a response has been received.\n\n```java\nbyte[] data = new byte[100];\n new Random(0x1234567L).nextBytes(data);\n MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n md.update(data);\n byte[] digest = md.digest();\n\n SignResult signResult = cryptographyClient.sign(SignatureAlgorithm.ES256, digest);\n\n System.out.printf(\"Received signature of length: %d, with algorithm: %s.%n\", signResult.getSignature().length,\n     signResult.getAlgorithm());\n```"
  returns:
    description: "A <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SignResult\"></xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult.getSignature()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"signature\"></xref> contains the created signature."
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignResult?alt=com.azure.security.keyvault.keys.cryptography.models.SignResult&text=SignResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.sign(SignatureAlgorithm algorithm, byte[] digest, Context context)"
  name: "sign(SignatureAlgorithm algorithm, byte[] digest, Context context)"
  nameWithType: "CryptographyClient.sign(SignatureAlgorithm algorithm, byte[] digest, Context context)"
  summary: "Creates a signature from a digest using the configured key."
  parameters:
  - description: "The algorithm to use for signing."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm&text=SignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The content from which signature is to be created."
    name: "digest"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Additional context that is passed through the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SignResult sign(SignatureAlgorithm algorithm, byte[] digest, Context context)"
  desc: "Creates a signature from a digest using the configured key. The sign operation supports both asymmetric and symmetric keys. This operation requires the `keys/sign` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"signature algorithm\"></xref> indicates the type of algorithm to use to create the signature from the digest. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"E384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES246K\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>\n\n**Code Samples**\n\nSings the digest. Subscribes to the call asynchronously and prints out the signature details when a response has been received.\n\n```java\nbyte[] dataToVerify = new byte[100];\n new Random(0x1234567L).nextBytes(dataToVerify);\n MessageDigest myMessageDigest = MessageDigest.getInstance(\"SHA-256\");\n myMessageDigest.update(dataToVerify);\n byte[] digestContent = myMessageDigest.digest();\n\n SignResult signResponse = cryptographyClient.sign(SignatureAlgorithm.ES256, digestContent,\n     new Context(\"key1\", \"value1\"));\n\n System.out.printf(\"Received signature of length: %d, with algorithm: %s.%n\", signResponse.getSignature().length,\n     signResponse.getAlgorithm());\n```"
  returns:
    description: "A <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SignResult\"></xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult.getSignature()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"signature\"></xref> contains the created signature."
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignResult?alt=com.azure.security.keyvault.keys.cryptography.models.SignResult&text=SignResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.signData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.signData(SignatureAlgorithm algorithm, byte[] data)"
  name: "signData(SignatureAlgorithm algorithm, byte[] data)"
  nameWithType: "CryptographyClient.signData(SignatureAlgorithm algorithm, byte[] data)"
  summary: "Creates a signature from the raw data using the configured key."
  parameters:
  - description: "The algorithm to use for signing."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm&text=SignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The content from which signature is to be created."
    name: "data"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public SignResult signData(SignatureAlgorithm algorithm, byte[] data)"
  desc: "Creates a signature from the raw data using the configured key. The sign data operation supports both asymmetric and symmetric keys. This operation requires the `keys/sign` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"signature algorithm\"></xref> indicates the type of algorithm to use to sign the digest. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"E384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES246K\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>\n\n**Code Samples**\n\nSigns the raw data. Subscribes to the call asynchronously and prints out the signature details when a response has been received.\n\n```java\nbyte[] data = new byte[100];\n new Random(0x1234567L).nextBytes(data);\n\n SignResult signResult = cryptographyClient.sign(SignatureAlgorithm.ES256, data);\n\n System.out.printf(\"Received signature of length: %d, with algorithm: %s.%n\", signResult.getSignature().length,\n     signResult.getAlgorithm());\n```"
  returns:
    description: "A <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SignResult\"></xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult.getSignature()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"signature\"></xref> contains the created signature."
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignResult?alt=com.azure.security.keyvault.keys.cryptography.models.SignResult&text=SignResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.signData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.signData(SignatureAlgorithm algorithm, byte[] data, Context context)"
  name: "signData(SignatureAlgorithm algorithm, byte[] data, Context context)"
  nameWithType: "CryptographyClient.signData(SignatureAlgorithm algorithm, byte[] data, Context context)"
  summary: "Creates a signature from the raw data using the configured key."
  parameters:
  - description: "The algorithm to use for signing."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm&text=SignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The content from which signature is to be created."
    name: "data"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Additional context that is passed through the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SignResult signData(SignatureAlgorithm algorithm, byte[] data, Context context)"
  desc: "Creates a signature from the raw data using the configured key. The sign data operation supports both asymmetric and symmetric keys. This operation requires the `keys/sign` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"signature algorithm\"></xref> indicates the type of algorithm to use to sign the digest. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"E384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES246K\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>\n\n**Code Samples**\n\nSigns the raw data. Subscribes to the call asynchronously and prints out the signature details when a response has been received.\n\n```java\nbyte[] plainTextData = new byte[100];\n new Random(0x1234567L).nextBytes(plainTextData);\n\n SignResult signingResult = cryptographyClient.sign(SignatureAlgorithm.ES256, plainTextData);\n\n System.out.printf(\"Received signature of length: %d, with algorithm: %s.%n\",\n     signingResult.getSignature().length, new Context(\"key1\", \"value1\"));\n```"
  returns:
    description: "A <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SignResult\"></xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult.getSignature()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"signature\"></xref> contains the created signature."
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignResult?alt=com.azure.security.keyvault.keys.cryptography.models.SignResult&text=SignResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey)"
  name: "unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey)"
  nameWithType: "CryptographyClient.unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey)"
  summary: "Unwraps a symmetric key using the configured key that was initially used for wrapping that key."
  parameters:
  - description: "The encryption algorithm to use for wrapping the key."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm&text=KeyWrapAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The encrypted key content to unwrap."
    name: "encryptedKey"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public UnwrapResult unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey)"
  desc: "Unwraps a symmetric key using the configured key that was initially used for wrapping that key. This operation is the reverse of the wrap operation. The unwrap operation supports asymmetric and symmetric keys to unwrap. This operation requires the `keys/unwrapKey` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"wrap algorithm\"></xref> indicates the type of algorithm to use for unwrapping the specified encrypted key content. Possible values for asymmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA1_5\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP_256\"></xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.A128KW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128KW\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.A192KW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192KW\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.A256KW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256KW\"></xref>.\n\n**Code Samples**\n\nUnwraps the key content. Subscribes to the call asynchronously and prints out the unwrapped key details when a response has been received.\n\n```java\nbyte[] keyContent = new byte[100];\n new Random(0x1234567L).nextBytes(keyContent);\n\n WrapResult wrapKeyResult = cryptographyClient.wrapKey(KeyWrapAlgorithm.RSA_OAEP, keyContent,\n     new Context(\"key1\", \"value1\"));\n UnwrapResult unwrapResult = cryptographyClient.unwrapKey(KeyWrapAlgorithm.RSA_OAEP,\n     wrapKeyResult.getEncryptedKey());\n\n System.out.printf(\"Received key of length %d\", unwrapResult.getKey().length);\n```"
  returns:
    description: "An <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.UnwrapResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UnwrapResult\"></xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.UnwrapResult.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"decrypted key\"></xref> contains the unwrapped key\n result."
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.UnwrapResult?alt=com.azure.security.keyvault.keys.cryptography.models.UnwrapResult&text=UnwrapResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey, Context context)"
  name: "unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey, Context context)"
  nameWithType: "CryptographyClient.unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey, Context context)"
  summary: "Unwraps a symmetric key using the configured key that was initially used for wrapping that key."
  parameters:
  - description: "The encryption algorithm to use for wrapping the key."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm&text=KeyWrapAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The encrypted key content to unwrap."
    name: "encryptedKey"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Additional context that is passed through the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public UnwrapResult unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey, Context context)"
  desc: "Unwraps a symmetric key using the configured key that was initially used for wrapping that key. This operation is the reverse of the wrap operation. The unwrap operation supports asymmetric and symmetric keys to unwrap. This operation requires the `keys/unwrapKey` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"wrap algorithm\"></xref> indicates the type of algorithm to use for unwrapping the specified encrypted key content. Possible values for asymmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA1_5\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP_256\"></xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.A128KW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128KW\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.A192KW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192KW\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.A256KW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256KW\"></xref>.\n\n**Code Samples**\n\nUnwraps the key content. Subscribes to the call asynchronously and prints out the unwrapped key details when a response has been received.\n\n```java\nbyte[] keyContentToWrap = new byte[100];\n new Random(0x1234567L).nextBytes(keyContentToWrap);\n Context context = new Context(\"key1\", \"value1\");\n\n WrapResult wrapKeyContentResult =\n     cryptographyClient.wrapKey(KeyWrapAlgorithm.RSA_OAEP, keyContentToWrap, context);\n UnwrapResult unwrapKeyResponse =\n     cryptographyClient.unwrapKey(KeyWrapAlgorithm.RSA_OAEP, wrapKeyContentResult.getEncryptedKey(), context);\n\n System.out.printf(\"Received key of length %d\", unwrapKeyResponse.getKey().length);\n```"
  returns:
    description: "An <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.UnwrapResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UnwrapResult\"></xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.UnwrapResult.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"decrypted key\"></xref> contains the unwrapped key\n result."
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.UnwrapResult?alt=com.azure.security.keyvault.keys.cryptography.models.UnwrapResult&text=UnwrapResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  name: "verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  nameWithType: "CryptographyClient.verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  summary: "Verifies a signature using the configured key."
  parameters:
  - description: "The algorithm to use for signing."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm&text=SignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The content from which signature was created."
    name: "digest"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "The signature to be verified."
    name: "signature"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public VerifyResult verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  desc: "Verifies a signature using the configured key. The verify operation supports both symmetric keys and asymmetric keys. In case of asymmetric keys public portion of the key is used to verify the signature. This operation requires the `keys/verify` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"signature algorithm\"></xref> indicates the type of algorithm to use to verify the signature. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"E384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES246K\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>\n\n**Code Samples**\n\nVerifies the signature against the specified digest. Subscribes to the call asynchronously and prints out the verification details when a response has been received.\n\n```java\nbyte[] myData = new byte[100];\n new Random(0x1234567L).nextBytes(myData);\n MessageDigest messageDigest = MessageDigest.getInstance(\"SHA-256\");\n messageDigest.update(myData);\n byte[] myDigest = messageDigest.digest();\n\n // A signature can be obtained from the SignResult returned by the CryptographyClient.sign() operation.\n VerifyResult verifyResult = cryptographyClient.verify(SignatureAlgorithm.ES256, myDigest, signature);\n\n System.out.printf(\"Verification status: %s.%n\", verifyResult.isValid());\n```"
  returns:
    description: "A <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.VerifyResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"VerifyResult\"></xref> <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.VerifyResult.isValid()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"indicating the signature verification result\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.VerifyResult?alt=com.azure.security.keyvault.keys.cryptography.models.VerifyResult&text=VerifyResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature, Context context)"
  name: "verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature, Context context)"
  nameWithType: "CryptographyClient.verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature, Context context)"
  summary: "Verifies a signature using the configured key."
  parameters:
  - description: "The algorithm to use for signing."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm&text=SignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The content from which signature was created."
    name: "digest"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "The signature to be verified."
    name: "signature"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Additional context that is passed through the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public VerifyResult verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature, Context context)"
  desc: "Verifies a signature using the configured key. The verify operation supports both symmetric keys and asymmetric keys. In case of asymmetric keys public portion of the key is used to verify the signature. This operation requires the `keys/verify` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"signature algorithm\"></xref> indicates the type of algorithm to use to verify the signature. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"E384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES246K\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>\n\n**Code Samples**\n\nVerifies the signature against the specified digest. Subscribes to the call asynchronously and prints out the verification details when a response has been received.\n\n```java\nbyte[] dataBytes = new byte[100];\n new Random(0x1234567L).nextBytes(dataBytes);\n MessageDigest msgDigest = MessageDigest.getInstance(\"SHA-256\");\n msgDigest.update(dataBytes);\n byte[] digestBytes = msgDigest.digest();\n\n // A signature can be obtained from the SignResult returned by the CryptographyClient.sign() operation.\n VerifyResult verifyResponse = cryptographyClient.verify(SignatureAlgorithm.ES256, digestBytes, signatureBytes,\n     new Context(\"key1\", \"value1\"));\n\n System.out.printf(\"Verification status: %s.%n\", verifyResponse.isValid());\n```"
  returns:
    description: "A <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.VerifyResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"VerifyResult\"></xref> <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.VerifyResult.isValid()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"indicating the signature verification result\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.VerifyResult?alt=com.azure.security.keyvault.keys.cryptography.models.VerifyResult&text=VerifyResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verifyData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature)"
  name: "verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature)"
  nameWithType: "CryptographyClient.verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature)"
  summary: "Verifies a signature against the raw data using the configured key."
  parameters:
  - description: "The algorithm to use for signing."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm&text=SignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The raw content against which signature is to be verified."
    name: "data"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "The signature to be verified."
    name: "signature"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public VerifyResult verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature)"
  desc: "Verifies a signature against the raw data using the configured key. The verify operation supports both symmetric keys and asymmetric keys. In case of asymmetric keys public portion of the key is used to verify the signature. This operation requires the `keys/verify` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"signature algorithm\"></xref> indicates the type of algorithm to use to verify the signature. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"E384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES246K\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>\n\n**Code Samples**\n\nVerifies the signature against the raw data. Subscribes to the call asynchronously and prints out the verification details when a response has been received.\n\n```java\nbyte[] myData = new byte[100];\n new Random(0x1234567L).nextBytes(myData);\n\n // A signature can be obtained from the SignResult returned by the CryptographyClient.sign() operation.\n VerifyResult verifyResult = cryptographyClient.verify(SignatureAlgorithm.ES256, myData, signature);\n\n System.out.printf(\"Verification status: %s.%n\", verifyResult.isValid());\n```"
  returns:
    description: "A <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.VerifyResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"VerifyResult\"></xref> <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.VerifyResult.isValid()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"indicating the signature verification result\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.VerifyResult?alt=com.azure.security.keyvault.keys.cryptography.models.VerifyResult&text=VerifyResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verifyData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature, Context context)"
  name: "verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature, Context context)"
  nameWithType: "CryptographyClient.verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature, Context context)"
  summary: "Verifies a signature against the raw data using the configured key."
  parameters:
  - description: "The algorithm to use for signing."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm&text=SignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The raw content against which signature is to be verified."
    name: "data"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "The signature to be verified."
    name: "signature"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Additional context that is passed through the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public VerifyResult verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature, Context context)"
  desc: "Verifies a signature against the raw data using the configured key. The verify operation supports both symmetric keys and asymmetric keys. In case of asymmetric keys public portion of the key is used to verify the signature. This operation requires the `keys/verify` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"signature algorithm\"></xref> indicates the type of algorithm to use to verify the signature. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"E384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES246K\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>\n\n**Code Samples**\n\nVerifies the signature against the raw data. Subscribes to the call asynchronously and prints out the verification details when a response has been received.\n\n```java\nbyte[] dataToVerify = new byte[100];\n new Random(0x1234567L).nextBytes(dataToVerify);\n\n // A signature can be obtained from the SignResult returned by the CryptographyClient.sign() operation.\n VerifyResult verificationResult = cryptographyClient.verify(SignatureAlgorithm.ES256, dataToVerify,\n     mySignature, new Context(\"key1\", \"value1\"));\n\n System.out.printf(\"Verification status: %s.%n\", verificationResult.isValid());\n```"
  returns:
    description: "A <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.VerifyResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"VerifyResult\"></xref> <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.VerifyResult.isValid()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"indicating the signature verification result\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.VerifyResult?alt=com.azure.security.keyvault.keys.cryptography.models.VerifyResult&text=VerifyResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.wrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  name: "wrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  nameWithType: "CryptographyClient.wrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  summary: "Wraps a symmetric key using the configured key."
  parameters:
  - description: "The encryption algorithm to use for wrapping the key."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm&text=KeyWrapAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The key content to be wrapped."
    name: "key"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public WrapResult wrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  desc: "Wraps a symmetric key using the configured key. The wrap operation supports wrapping a symmetric key with both symmetric and asymmetric keys. This operation requires the `keys/wrapKey` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"wrap algorithm\"></xref> indicates the type of algorithm to use for wrapping the specified key content. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA1_5\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP_256\"></xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128KW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128KW\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192KW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192KW\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256KW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256KW\"></xref>.\n\n**Code Samples**\n\nWraps the key content. Subscribes to the call asynchronously and prints out the wrapped key details when a response has been received.\n\n```java\nbyte[] key = new byte[100];\n new Random(0x1234567L).nextBytes(key);\n\n WrapResult wrapResult = cryptographyClient.wrapKey(KeyWrapAlgorithm.RSA_OAEP, key);\n\n System.out.printf(\"Received encrypted key of length: %d, with algorithm: %s.%n\",\n     wrapResult.getEncryptedKey().length, wrapResult.getAlgorithm());\n```"
  returns:
    description: "The <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.WrapResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"WrapResult\"></xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.WrapResult.getEncryptedKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"encrypted key\"></xref> contains the wrapped\n key result."
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.WrapResult?alt=com.azure.security.keyvault.keys.cryptography.models.WrapResult&text=WrapResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyClient.wrapKey(KeyWrapAlgorithm algorithm, byte[] key, Context context)"
  name: "wrapKey(KeyWrapAlgorithm algorithm, byte[] key, Context context)"
  nameWithType: "CryptographyClient.wrapKey(KeyWrapAlgorithm algorithm, byte[] key, Context context)"
  summary: "Wraps a symmetric key using the configured key."
  parameters:
  - description: "The encryption algorithm to use for wrapping the key."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm&text=KeyWrapAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The key content to be wrapped."
    name: "key"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Additional context that is passed through the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public WrapResult wrapKey(KeyWrapAlgorithm algorithm, byte[] key, Context context)"
  desc: "Wraps a symmetric key using the configured key. The wrap operation supports wrapping a symmetric key with both symmetric and asymmetric keys. This operation requires the `keys/wrapKey` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"wrap algorithm\"></xref> indicates the type of algorithm to use for wrapping the specified key content. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA1_5\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP_256\"></xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128KW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128KW\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192KW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192KW\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256KW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256KW\"></xref>.\n\n**Code Samples**\n\nWraps the key content. Subscribes to the call asynchronously and prints out the wrapped key details when a response has been received.\n\n```java\nbyte[] keyToWrap = new byte[100];\n new Random(0x1234567L).nextBytes(keyToWrap);\n\n WrapResult keyWrapResult = cryptographyClient.wrapKey(KeyWrapAlgorithm.RSA_OAEP, keyToWrap,\n     new Context(\"key1\", \"value1\"));\n\n System.out.printf(\"Received encrypted key of length: %d, with algorithm: %s.%n\",\n     keyWrapResult.getEncryptedKey().length, keyWrapResult.getAlgorithm());\n```"
  returns:
    description: "The <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.WrapResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"WrapResult\"></xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.WrapResult.getEncryptedKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"encrypted key\"></xref> contains the wrapped\n key result."
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.WrapResult?alt=com.azure.security.keyvault.keys.cryptography.models.WrapResult&text=WrapResult\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "The <xref uid=\"com.azure.security.keyvault.keys.cryptography.CryptographyClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CryptographyClient\"></xref> provides synchronous methods to perform cryptographic operations using asymmetric and symmetric keys. The client supports encrypt, decrypt, wrap key, unwrap key, sign and verify operations using the configured key.\n\n**Samples to construct the sync client**\n\n```java\nCryptographyClient cryptographyClient = new CryptographyClientBuilder()\n     .keyIdentifier(\"<your-key-id>\")\n     .credential(new DefaultAzureCredentialBuilder().build())\n     .buildClient();\n```\n\n```java\nJsonWebKey jsonWebKey = new JsonWebKey().setId(\"SampleJsonWebKey\");\n CryptographyClient cryptographyClient = new CryptographyClientBuilder()\n     .jsonWebKey(jsonWebKey)\n     .buildClient();\n```"
metadata: {}
package: "com.azure.security.keyvault.keys.cryptography"
artifact: com.azure:azure-security-keyvault-keys:4.4.6
