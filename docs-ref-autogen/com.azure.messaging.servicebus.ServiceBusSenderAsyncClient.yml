### YamlMime:JavaType
uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient"
fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient"
name: "ServiceBusSenderAsyncClient"
nameWithType: "ServiceBusSenderAsyncClient"
summary: "An **asynchronous** client to send messages to a Service Bus resource.\n\n**Create an instance of sender**\n\n```java\n// The required parameter is a way to authenticate with Service Bus using credentials.\n // The connectionString provides a way to authenticate with Service Bus.\n ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n     .connectionString(\n         \"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key}\")\n     .sender()\n     .queueName(\"<< QUEUE NAME >>\")\n     .buildAsyncClient();\n```\n\n**Create an instance of sender using default credential**\n\n```java\n// The required parameter is a way to authenticate with Service Bus using credentials.\n // The connectionString provides a way to authenticate with Service Bus.\n ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n     .credential(\"<<fully-qualified-namespace>>\",\n         new DefaultAzureCredentialBuilder().build())\n     .sender()\n     .queueName(\"<< QUEUE NAME >>\")\n     .buildAsyncClient();\n```\n\n**Send messages to a Service Bus resource**\n\n```java\n// The required parameter is a way to authenticate with Service Bus using credentials.\n // The connectionString provides a way to authenticate with Service Bus.\n ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n     .connectionString(\n         \"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key}\")\n     .sender()\n     .queueName(\"<QUEUE OR TOPIC NAME>\")\n     .buildAsyncClient();\n \n // Creating a batch without options set, will allow for automatic routing of events to any partition.\n sender.createMessageBatch().flatMap(batch -> {\n     batch.tryAddMessage(new ServiceBusMessage(BinaryData.fromBytes(\"test-1\".getBytes(UTF_8))));\n     batch.tryAddMessage(new ServiceBusMessage(BinaryData.fromBytes(\"test-2\".getBytes(UTF_8))));\n     return sender.sendMessages(batch);\n }).subscribe(unused -> {\n },\n     error -> System.err.println(\"Error occurred while sending batch:\" + error),\n     () -> System.out.println(\"Send complete.\"));\n```\n\n**Send messages using a size-limited <xref uid=\"com.azure.messaging.servicebus.ServiceBusMessageBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusMessageBatch\"></xref> to a Service Bus resource**\n\n```java\nFlux<ServiceBusMessage> telemetryMessages = Flux.just(firstMessage, secondMessage);\n \n // Setting `setMaximumSizeInBytes` when creating a batch, limits the size of that batch.\n // In this case, all the batches created with these options are limited to 256 bytes.\n CreateMessageBatchOptions options = new CreateMessageBatchOptions()\n     .setMaximumSizeInBytes(256);\n AtomicReference<ServiceBusMessageBatch> currentBatch = new AtomicReference<>(\n     sender.createMessageBatch(options).block());\n \n // The sample Flux contains two messages, but it could be an infinite stream of telemetry messages.\n telemetryMessages.flatMap(message -> {\n     ServiceBusMessageBatch batch = currentBatch.get();\n     if (batch.tryAddMessage(message)) {\n         return Mono.empty();\n     }\n \n     return Mono.when(\n         sender.sendMessages(batch),\n         sender.createMessageBatch(options).map(newBatch -> {\n             currentBatch.set(newBatch);\n \n             // Add the message that did not fit in the previous batch.\n             if (!newBatch.tryAddMessage(message)) {\n                 throw Exceptions.propagate(new IllegalArgumentException(\n                     \"Message was too large to fit in an empty batch. Max size: \" + newBatch.getMaxSizeInBytes()));\n             }\n \n             return newBatch;\n         }));\n }).then()\n     .doFinally(signal -> {\n         ServiceBusMessageBatch batch = currentBatch.getAndSet(null);\n         if (batch != null && batch.getCount() > 0) {\n             sender.sendMessages(batch).block();\n         }\n     });\n```"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ServiceBusSenderAsyncClient implements AutoCloseable"
methods:
- "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.cancelScheduledMessage(long)"
- "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.cancelScheduledMessages(java.lang.Iterable<java.lang.Long>)"
- "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.close()"
- "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.commitTransaction(com.azure.messaging.servicebus.ServiceBusTransactionContext)"
- "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.createMessageBatch()"
- "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.createMessageBatch(com.azure.messaging.servicebus.models.CreateMessageBatchOptions)"
- "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.createTransaction()"
- "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.getEntityPath()"
- "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.getFullyQualifiedNamespace()"
- "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.rollbackTransaction(com.azure.messaging.servicebus.ServiceBusTransactionContext)"
- "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.scheduleMessage(com.azure.messaging.servicebus.ServiceBusMessage,java.time.OffsetDateTime)"
- "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.scheduleMessage(com.azure.messaging.servicebus.ServiceBusMessage,java.time.OffsetDateTime,com.azure.messaging.servicebus.ServiceBusTransactionContext)"
- "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.scheduleMessages(java.lang.Iterable<com.azure.messaging.servicebus.ServiceBusMessage>,java.time.OffsetDateTime)"
- "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.scheduleMessages(java.lang.Iterable<com.azure.messaging.servicebus.ServiceBusMessage>,java.time.OffsetDateTime,com.azure.messaging.servicebus.ServiceBusTransactionContext)"
- "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.sendMessage(com.azure.messaging.servicebus.ServiceBusMessage)"
- "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.sendMessage(com.azure.messaging.servicebus.ServiceBusMessage,com.azure.messaging.servicebus.ServiceBusTransactionContext)"
- "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.sendMessages(com.azure.messaging.servicebus.ServiceBusMessageBatch)"
- "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.sendMessages(com.azure.messaging.servicebus.ServiceBusMessageBatch,com.azure.messaging.servicebus.ServiceBusTransactionContext)"
- "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.sendMessages(java.lang.Iterable<com.azure.messaging.servicebus.ServiceBusMessage>)"
- "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.sendMessages(java.lang.Iterable<com.azure.messaging.servicebus.ServiceBusMessage>,com.azure.messaging.servicebus.ServiceBusTransactionContext)"
type: "class"
implements:
- "<xref href=\"java.lang.AutoCloseable?alt=java.lang.AutoCloseable&text=AutoCloseable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.messaging.servicebus"
artifact: com.azure:azure-messaging-servicebus:7.0.1
