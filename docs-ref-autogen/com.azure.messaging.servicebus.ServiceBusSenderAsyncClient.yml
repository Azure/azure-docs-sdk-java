### YamlMime:JavaType
uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient"
fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient"
name: "ServiceBusSenderAsyncClient"
nameWithType: "ServiceBusSenderAsyncClient"
summary: "An **asynchronous** client to send messages to a Service Bus resource."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ServiceBusSenderAsyncClient implements AutoCloseable"
methods:
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.cancelScheduledMessage(long)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.cancelScheduledMessage(long sequenceNumber)"
  name: "cancelScheduledMessage(long sequenceNumber)"
  nameWithType: "ServiceBusSenderAsyncClient.cancelScheduledMessage(long sequenceNumber)"
  summary: "Cancels the enqueuing of a scheduled message, if it was not already enqueued."
  parameters:
  - description: "of the scheduled message to cancel."
    name: "sequenceNumber"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> cancelScheduledMessage(long sequenceNumber)"
  desc: "Cancels the enqueuing of a scheduled message, if it was not already enqueued."
  returns:
    description: "The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that finishes this operation on service bus resource."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.cancelScheduledMessages(java.lang.Iterable<java.lang.Long>)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.cancelScheduledMessages(Iterable<Long> sequenceNumbers)"
  name: "cancelScheduledMessages(Iterable<Long> sequenceNumbers)"
  nameWithType: "ServiceBusSenderAsyncClient.cancelScheduledMessages(Iterable<Long> sequenceNumbers)"
  summary: "Cancels the enqueuing of an already scheduled message, if it was not already enqueued."
  parameters:
  - description: "of the scheduled messages to cancel."
    name: "sequenceNumbers"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> cancelScheduledMessages(Iterable<Long> sequenceNumbers)"
  desc: "Cancels the enqueuing of an already scheduled message, if it was not already enqueued."
  returns:
    description: "The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that finishes this operation on service bus resource."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.close()"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.close()"
  name: "close()"
  nameWithType: "ServiceBusSenderAsyncClient.close()"
  summary: "Disposes of the <xref uid=\"com.azure.messaging.servicebus.ServiceBusSenderAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusSenderAsyncClient\"></xref>."
  syntax: "public void close()"
  desc: "Disposes of the <xref uid=\"com.azure.messaging.servicebus.ServiceBusSenderAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusSenderAsyncClient\"></xref>. If the client has a dedicated connection, the underlying connection is also closed."
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.commitTransaction(com.azure.messaging.servicebus.ServiceBusTransactionContext)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.commitTransaction(ServiceBusTransactionContext transactionContext)"
  name: "commitTransaction(ServiceBusTransactionContext transactionContext)"
  nameWithType: "ServiceBusSenderAsyncClient.commitTransaction(ServiceBusTransactionContext transactionContext)"
  summary: "Commits the transaction given <xref uid=\"com.azure.messaging.servicebus.ServiceBusTransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusTransactionContext\"></xref>."
  parameters:
  - description: "to be committed."
    name: "transactionContext"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusTransactionContext?alt=com.azure.messaging.servicebus.ServiceBusTransactionContext&text=ServiceBusTransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> commitTransaction(ServiceBusTransactionContext transactionContext)"
  desc: "Commits the transaction given <xref uid=\"com.azure.messaging.servicebus.ServiceBusTransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusTransactionContext\"></xref>. This will make a call to Service Bus."
  returns:
    description: "The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that finishes this operation on Service Bus resource."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.createMessageBatch()"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.createMessageBatch()"
  name: "createMessageBatch()"
  nameWithType: "ServiceBusSenderAsyncClient.createMessageBatch()"
  summary: "Creates a <xref uid=\"com.azure.messaging.servicebus.ServiceBusMessageBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusMessageBatch\"></xref> that can fit as many messages as the transport allows."
  syntax: "public Mono<ServiceBusMessageBatch> createMessageBatch()"
  desc: "Creates a <xref uid=\"com.azure.messaging.servicebus.ServiceBusMessageBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusMessageBatch\"></xref> that can fit as many messages as the transport allows."
  returns:
    description: "A <xref uid=\"com.azure.messaging.servicebus.ServiceBusMessageBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusMessageBatch\"></xref> that can fit as many messages as the transport allows."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.servicebus.ServiceBusMessageBatch?alt=com.azure.messaging.servicebus.ServiceBusMessageBatch&text=ServiceBusMessageBatch\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.createMessageBatch(com.azure.messaging.servicebus.models.CreateMessageBatchOptions)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.createMessageBatch(CreateMessageBatchOptions options)"
  name: "createMessageBatch(CreateMessageBatchOptions options)"
  nameWithType: "ServiceBusSenderAsyncClient.createMessageBatch(CreateMessageBatchOptions options)"
  summary: "Creates an <xref uid=\"com.azure.messaging.servicebus.ServiceBusMessageBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusMessageBatch\"></xref> configured with the options specified."
  parameters:
  - description: "A set of options used to configure the <xref uid=\"com.azure.messaging.servicebus.ServiceBusMessageBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusMessageBatch\"></xref>."
    name: "options"
    type: "<xref href=\"com.azure.messaging.servicebus.models.CreateMessageBatchOptions?alt=com.azure.messaging.servicebus.models.CreateMessageBatchOptions&text=CreateMessageBatchOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ServiceBusMessageBatch> createMessageBatch(CreateMessageBatchOptions options)"
  desc: "Creates an <xref uid=\"com.azure.messaging.servicebus.ServiceBusMessageBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusMessageBatch\"></xref> configured with the options specified."
  returns:
    description: "A new <xref uid=\"com.azure.messaging.servicebus.ServiceBusMessageBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusMessageBatch\"></xref> configured with the given options."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.servicebus.ServiceBusMessageBatch?alt=com.azure.messaging.servicebus.ServiceBusMessageBatch&text=ServiceBusMessageBatch\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.createTransaction()"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.createTransaction()"
  name: "createTransaction()"
  nameWithType: "ServiceBusSenderAsyncClient.createTransaction()"
  summary: "Starts a new transaction on Service Bus."
  syntax: "public Mono<ServiceBusTransactionContext> createTransaction()"
  desc: "Starts a new transaction on Service Bus. The <xref uid=\"com.azure.messaging.servicebus.ServiceBusTransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusTransactionContext\"></xref> should be passed along with <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusReceivedMessage\"></xref> all operations that needs to be in this transaction."
  returns:
    description: "A new <xref uid=\"com.azure.messaging.servicebus.ServiceBusTransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusTransactionContext\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.servicebus.ServiceBusTransactionContext?alt=com.azure.messaging.servicebus.ServiceBusTransactionContext&text=ServiceBusTransactionContext\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.getEntityPath()"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.getEntityPath()"
  name: "getEntityPath()"
  nameWithType: "ServiceBusSenderAsyncClient.getEntityPath()"
  summary: "Gets the name of the Service Bus resource."
  syntax: "public String getEntityPath()"
  desc: "Gets the name of the Service Bus resource."
  returns:
    description: "The name of the Service Bus resource."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.getFullyQualifiedNamespace()"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.getFullyQualifiedNamespace()"
  name: "getFullyQualifiedNamespace()"
  nameWithType: "ServiceBusSenderAsyncClient.getFullyQualifiedNamespace()"
  summary: "Gets the fully qualified namespace."
  syntax: "public String getFullyQualifiedNamespace()"
  desc: "Gets the fully qualified namespace."
  returns:
    description: "The fully qualified namespace."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.rollbackTransaction(com.azure.messaging.servicebus.ServiceBusTransactionContext)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.rollbackTransaction(ServiceBusTransactionContext transactionContext)"
  name: "rollbackTransaction(ServiceBusTransactionContext transactionContext)"
  nameWithType: "ServiceBusSenderAsyncClient.rollbackTransaction(ServiceBusTransactionContext transactionContext)"
  summary: "Rollbacks the transaction given <xref uid=\"com.azure.messaging.servicebus.ServiceBusTransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusTransactionContext\"></xref>."
  parameters:
  - description: "Transaction to rollback."
    name: "transactionContext"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusTransactionContext?alt=com.azure.messaging.servicebus.ServiceBusTransactionContext&text=ServiceBusTransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> rollbackTransaction(ServiceBusTransactionContext transactionContext)"
  desc: "Rollbacks the transaction given <xref uid=\"com.azure.messaging.servicebus.ServiceBusTransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusTransactionContext\"></xref>. This will make a call to Service Bus."
  returns:
    description: "The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that finishes this operation on the Service Bus resource."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.scheduleMessage(com.azure.messaging.servicebus.ServiceBusMessage,java.time.OffsetDateTime)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.scheduleMessage(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime)"
  name: "scheduleMessage(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime)"
  nameWithType: "ServiceBusSenderAsyncClient.scheduleMessage(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime)"
  summary: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to."
  parameters:
  - description: "Message to be sent to the Service Bus Queue."
    name: "message"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusMessage?alt=com.azure.messaging.servicebus.ServiceBusMessage&text=ServiceBusMessage\" data-throw-if-not-resolved=\"False\" />"
  - description: "OffsetDateTime at which the message should appear in the Service Bus queue or topic."
    name: "scheduledEnqueueTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Long> scheduleMessage(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime)"
  desc: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time."
  returns:
    description: "The sequence number of the scheduled message which can be used to cancel the scheduling of the message."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.scheduleMessage(com.azure.messaging.servicebus.ServiceBusMessage,java.time.OffsetDateTime,com.azure.messaging.servicebus.ServiceBusTransactionContext)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.scheduleMessage(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime, ServiceBusTransactionContext transactionContext)"
  name: "scheduleMessage(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime, ServiceBusTransactionContext transactionContext)"
  nameWithType: "ServiceBusSenderAsyncClient.scheduleMessage(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime, ServiceBusTransactionContext transactionContext)"
  summary: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to."
  parameters:
  - description: "Message to be sent to the Service Bus Queue."
    name: "message"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusMessage?alt=com.azure.messaging.servicebus.ServiceBusMessage&text=ServiceBusMessage\" data-throw-if-not-resolved=\"False\" />"
  - description: "OffsetDateTime at which the message should appear in the Service Bus queue or topic."
    name: "scheduledEnqueueTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "to be set on message before sending to Service Bus."
    name: "transactionContext"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusTransactionContext?alt=com.azure.messaging.servicebus.ServiceBusTransactionContext&text=ServiceBusTransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Long> scheduleMessage(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime, ServiceBusTransactionContext transactionContext)"
  desc: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time."
  returns:
    description: "The sequence number of the scheduled message which can be used to cancel the scheduling of the message."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.scheduleMessages(java.lang.Iterable<com.azure.messaging.servicebus.ServiceBusMessage>,java.time.OffsetDateTime)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.scheduleMessages(Iterable<ServiceBusMessage> messages, OffsetDateTime scheduledEnqueueTime)"
  name: "scheduleMessages(Iterable<ServiceBusMessage> messages, OffsetDateTime scheduledEnqueueTime)"
  nameWithType: "ServiceBusSenderAsyncClient.scheduleMessages(Iterable<ServiceBusMessage> messages, OffsetDateTime scheduledEnqueueTime)"
  summary: "Sends a batch of scheduled messages to the Azure Service Bus entity this sender is connected to."
  parameters:
  - description: "Messages to be sent to the Service Bus queue or topic."
    name: "messages"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.servicebus.ServiceBusMessage?alt=com.azure.messaging.servicebus.ServiceBusMessage&text=ServiceBusMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "OffsetDateTime at which the message should appear in the Service Bus queue or topic."
    name: "scheduledEnqueueTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<Long> scheduleMessages(Iterable<ServiceBusMessage> messages, OffsetDateTime scheduledEnqueueTime)"
  desc: "Sends a batch of scheduled messages to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time."
  returns:
    description: "Sequence numbers of the scheduled messages which can be used to cancel the messages."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.scheduleMessages(java.lang.Iterable<com.azure.messaging.servicebus.ServiceBusMessage>,java.time.OffsetDateTime,com.azure.messaging.servicebus.ServiceBusTransactionContext)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.scheduleMessages(Iterable<ServiceBusMessage> messages, OffsetDateTime scheduledEnqueueTime, ServiceBusTransactionContext transactionContext)"
  name: "scheduleMessages(Iterable<ServiceBusMessage> messages, OffsetDateTime scheduledEnqueueTime, ServiceBusTransactionContext transactionContext)"
  nameWithType: "ServiceBusSenderAsyncClient.scheduleMessages(Iterable<ServiceBusMessage> messages, OffsetDateTime scheduledEnqueueTime, ServiceBusTransactionContext transactionContext)"
  summary: "Sends a scheduled messages to the Azure Service Bus entity this sender is connected to."
  parameters:
  - description: "Messages to be sent to the Service Bus Queue."
    name: "messages"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.servicebus.ServiceBusMessage?alt=com.azure.messaging.servicebus.ServiceBusMessage&text=ServiceBusMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "OffsetDateTime at which the messages should appear in the Service Bus queue or topic."
    name: "scheduledEnqueueTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "Transaction to associate with the operation."
    name: "transactionContext"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusTransactionContext?alt=com.azure.messaging.servicebus.ServiceBusTransactionContext&text=ServiceBusTransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<Long> scheduleMessages(Iterable<ServiceBusMessage> messages, OffsetDateTime scheduledEnqueueTime, ServiceBusTransactionContext transactionContext)"
  desc: "Sends a scheduled messages to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time."
  returns:
    description: "Sequence numbers of the scheduled messages which can be used to cancel the messages."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.sendMessage(com.azure.messaging.servicebus.ServiceBusMessage)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.sendMessage(ServiceBusMessage message)"
  name: "sendMessage(ServiceBusMessage message)"
  nameWithType: "ServiceBusSenderAsyncClient.sendMessage(ServiceBusMessage message)"
  summary: "Sends a message to a Service Bus queue or topic."
  parameters:
  - description: "Message to be sent to Service Bus queue or topic."
    name: "message"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusMessage?alt=com.azure.messaging.servicebus.ServiceBusMessage&text=ServiceBusMessage\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> sendMessage(ServiceBusMessage message)"
  desc: "Sends a message to a Service Bus queue or topic."
  returns:
    description: "The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> the finishes this operation on service bus resource."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.sendMessage(com.azure.messaging.servicebus.ServiceBusMessage,com.azure.messaging.servicebus.ServiceBusTransactionContext)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.sendMessage(ServiceBusMessage message, ServiceBusTransactionContext transactionContext)"
  name: "sendMessage(ServiceBusMessage message, ServiceBusTransactionContext transactionContext)"
  nameWithType: "ServiceBusSenderAsyncClient.sendMessage(ServiceBusMessage message, ServiceBusTransactionContext transactionContext)"
  summary: "Sends a message to a Service Bus queue or topic."
  parameters:
  - description: "Message to be sent to Service Bus queue or topic."
    name: "message"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusMessage?alt=com.azure.messaging.servicebus.ServiceBusMessage&text=ServiceBusMessage\" data-throw-if-not-resolved=\"False\" />"
  - description: "to be set on batch message before sending to Service Bus."
    name: "transactionContext"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusTransactionContext?alt=com.azure.messaging.servicebus.ServiceBusTransactionContext&text=ServiceBusTransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> sendMessage(ServiceBusMessage message, ServiceBusTransactionContext transactionContext)"
  desc: "Sends a message to a Service Bus queue or topic."
  returns:
    description: "The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> the finishes this operation on service bus resource."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.sendMessages(com.azure.messaging.servicebus.ServiceBusMessageBatch)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.sendMessages(ServiceBusMessageBatch batch)"
  name: "sendMessages(ServiceBusMessageBatch batch)"
  nameWithType: "ServiceBusSenderAsyncClient.sendMessages(ServiceBusMessageBatch batch)"
  summary: "Sends a message batch to the Azure Service Bus entity this sender is connected to."
  parameters:
  - description: "of messages which allows client to send maximum allowed size for a batch of messages."
    name: "batch"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusMessageBatch?alt=com.azure.messaging.servicebus.ServiceBusMessageBatch&text=ServiceBusMessageBatch\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> sendMessages(ServiceBusMessageBatch batch)"
  desc: "Sends a message batch to the Azure Service Bus entity this sender is connected to."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> the finishes this operation on service bus resource."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.sendMessages(com.azure.messaging.servicebus.ServiceBusMessageBatch,com.azure.messaging.servicebus.ServiceBusTransactionContext)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.sendMessages(ServiceBusMessageBatch batch, ServiceBusTransactionContext transactionContext)"
  name: "sendMessages(ServiceBusMessageBatch batch, ServiceBusTransactionContext transactionContext)"
  nameWithType: "ServiceBusSenderAsyncClient.sendMessages(ServiceBusMessageBatch batch, ServiceBusTransactionContext transactionContext)"
  summary: "Sends a message batch to the Azure Service Bus entity this sender is connected to."
  parameters:
  - description: "of messages which allows client to send maximum allowed size for a batch of messages."
    name: "batch"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusMessageBatch?alt=com.azure.messaging.servicebus.ServiceBusMessageBatch&text=ServiceBusMessageBatch\" data-throw-if-not-resolved=\"False\" />"
  - description: "to be set on batch message before sending to Service Bus."
    name: "transactionContext"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusTransactionContext?alt=com.azure.messaging.servicebus.ServiceBusTransactionContext&text=ServiceBusTransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> sendMessages(ServiceBusMessageBatch batch, ServiceBusTransactionContext transactionContext)"
  desc: "Sends a message batch to the Azure Service Bus entity this sender is connected to."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> the finishes this operation on service bus resource."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.sendMessages(java.lang.Iterable<com.azure.messaging.servicebus.ServiceBusMessage>)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.sendMessages(Iterable<ServiceBusMessage> messages)"
  name: "sendMessages(Iterable<ServiceBusMessage> messages)"
  nameWithType: "ServiceBusSenderAsyncClient.sendMessages(Iterable<ServiceBusMessage> messages)"
  summary: "Sends a set of messages to a Service Bus queue or topic using a batched approach."
  parameters:
  - description: "Messages to be sent to Service Bus queue or topic."
    name: "messages"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.servicebus.ServiceBusMessage?alt=com.azure.messaging.servicebus.ServiceBusMessage&text=ServiceBusMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> sendMessages(Iterable<ServiceBusMessage> messages)"
  desc: "Sends a set of messages to a Service Bus queue or topic using a batched approach. If the size of messages exceed the maximum size of a single batch, an exception will be triggered and the send will fail. By default, the message size is the max amount allowed on the link."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when all messages have been sent to the Service Bus resource."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.sendMessages(java.lang.Iterable<com.azure.messaging.servicebus.ServiceBusMessage>,com.azure.messaging.servicebus.ServiceBusTransactionContext)"
  fullName: "com.azure.messaging.servicebus.ServiceBusSenderAsyncClient.sendMessages(Iterable<ServiceBusMessage> messages, ServiceBusTransactionContext transactionContext)"
  name: "sendMessages(Iterable<ServiceBusMessage> messages, ServiceBusTransactionContext transactionContext)"
  nameWithType: "ServiceBusSenderAsyncClient.sendMessages(Iterable<ServiceBusMessage> messages, ServiceBusTransactionContext transactionContext)"
  summary: "Sends a set of messages to a Service Bus queue or topic using a batched approach."
  parameters:
  - description: "Messages to be sent to Service Bus queue or topic."
    name: "messages"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.servicebus.ServiceBusMessage?alt=com.azure.messaging.servicebus.ServiceBusMessage&text=ServiceBusMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "to be set on batch message before sending to Service Bus."
    name: "transactionContext"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusTransactionContext?alt=com.azure.messaging.servicebus.ServiceBusTransactionContext&text=ServiceBusTransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> sendMessages(Iterable<ServiceBusMessage> messages, ServiceBusTransactionContext transactionContext)"
  desc: "Sends a set of messages to a Service Bus queue or topic using a batched approach. If the size of messages exceed the maximum size of a single batch, an exception will be triggered and the send will fail. By default, the message size is the max amount allowed on the link."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when all messages have been sent to the Service Bus resource."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "An **asynchronous** client to send messages to a Service Bus resource.\n\n**Create an instance of sender**\n\n```java\n// The required parameters is connectionString, a way to authenticate with Service Bus using credentials.\n // The connectionString/queueName must be set by the application. The 'connectionString' format is shown below.\n // \"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key}\"\n ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n     .connectionString(connectionString)\n     .sender()\n     .queueName(queueName)\n     .buildAsyncClient();\n```\n\n**Create an instance of sender using default credential**\n\n```java\n// The required parameter is a way to authenticate with Service Bus using credentials.\n // The connectionString provides a way to authenticate with Service Bus.\n ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n     .credential(\"<<fully-qualified-namespace>>\",\n         new DefaultAzureCredentialBuilder().build())\n     .sender()\n     .queueName(\"<< QUEUE NAME >>\")\n     .buildAsyncClient();\n```\n\n**Send messages to a Service Bus resource**\n\n```java\n// The required parameters is connectionString, a way to authenticate with Service Bus using credentials.\n // The connectionString/queueName must be set by the application. The 'connectionString' format is shown below.\n // \"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key}\"\n ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n     .connectionString(connectionString)\n     .sender()\n     .queueName(queueName)\n     .buildAsyncClient();\n\n // Creating a batch without options set, will allow for automatic routing of events to any partition.\n sender.createMessageBatch().flatMap(batch -> {\n     batch.tryAddMessage(new ServiceBusMessage(BinaryData.fromBytes(\"test-1\".getBytes(UTF_8))));\n     batch.tryAddMessage(new ServiceBusMessage(BinaryData.fromBytes(\"test-2\".getBytes(UTF_8))));\n     return sender.sendMessages(batch);\n }).subscribe(unused -> {\n },\n     error -> System.err.println(\"Error occurred while sending batch:\" + error),\n     () -> System.out.println(\"Send complete.\"));\n```\n\n**Send messages using a size-limited <xref uid=\"com.azure.messaging.servicebus.ServiceBusMessageBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusMessageBatch\"></xref> to a Service Bus resource**\n\n```java\nFlux<ServiceBusMessage> telemetryMessages = Flux.just(firstMessage, secondMessage);\n\n // Setting `setMaximumSizeInBytes` when creating a batch, limits the size of that batch.\n // In this case, all the batches created with these options are limited to 256 bytes.\n CreateMessageBatchOptions options = new CreateMessageBatchOptions()\n     .setMaximumSizeInBytes(256);\n AtomicReference<ServiceBusMessageBatch> currentBatch = new AtomicReference<>(\n     sender.createMessageBatch(options).block());\n\n // The sample Flux contains two messages, but it could be an infinite stream of telemetry messages.\n telemetryMessages.flatMap(message -> {\n     ServiceBusMessageBatch batch = currentBatch.get();\n     if (batch.tryAddMessage(message)) {\n         return Mono.empty();\n     }\n\n     return Mono.when(\n         sender.sendMessages(batch),\n         sender.createMessageBatch(options).map(newBatch -> {\n             currentBatch.set(newBatch);\n\n             // Add the message that did not fit in the previous batch.\n             if (!newBatch.tryAddMessage(message)) {\n                 throw Exceptions.propagate(new IllegalArgumentException(\n                     \"Message was too large to fit in an empty batch. Max size: \" + newBatch.getMaxSizeInBytes()));\n             }\n\n             return newBatch;\n         }));\n }).then()\n     .doFinally(signal -> {\n         ServiceBusMessageBatch batch = currentBatch.getAndSet(null);\n         if (batch != null && batch.getCount() > 0) {\n             sender.sendMessages(batch).block();\n         }\n     });\n```"
implements:
- "<xref href=\"java.lang.AutoCloseable?alt=java.lang.AutoCloseable&text=AutoCloseable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.messaging.servicebus"
artifact: com.azure:azure-messaging-servicebus:7.10.1
