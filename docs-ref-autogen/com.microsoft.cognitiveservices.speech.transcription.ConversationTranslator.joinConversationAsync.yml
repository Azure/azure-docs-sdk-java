### YamlMime:JavaMember
nameWithType: ConversationTranslator.joinConversationAsync
type: method
members:
- fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.joinConversationAsync(Conversation conversation, final String nickname)
  name: joinConversationAsync(Conversation conversation, final String nickname)
  nameWithType: ConversationTranslator.joinConversationAsync(Conversation conversation, final String nickname)
  parameters:
  - description: <p>The Conversation to join. </p>
    name: conversation
    type: <xref href="com.microsoft.cognitiveservices.speech.transcription.Conversation?alt=com.microsoft.cognitiveservices.speech.transcription.Conversation&text=Conversation" data-throw-if-not-resolved="False"/>
  - description: <p>The display name to use for the current participant. </p>
    name: nickname
    type: <xref href="final+String?alt=final String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task representing the join operation </p>
    type: <xref href="Future%3CVoid%3E?alt=Future<Void>&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Joins an existing conversation. You should use this method if you have created a conversation using CreateConversationAsync(SpeechConfig, String).</p>

    <p></p>
  syntax: public Future<Void> joinConversationAsync(Conversation conversation, final String nickname)
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.joinConversationAsync(Conversation,final String)
- fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.joinConversationAsync(final String conversationId, final String nickname, final String language)
  name: joinConversationAsync(final String conversationId, final String nickname, final String language)
  nameWithType: ConversationTranslator.joinConversationAsync(final String conversationId, final String nickname, final String language)
  parameters:
  - description: <p>The unique identifier for the conversation to join. </p>
    name: conversationId
    type: <xref href="final+String?alt=final String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The display name to use for the current participant. </p>
    name: nickname
    type: <xref href="final+String?alt=final String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The speech language to use for the current participant. </p>
    name: language
    type: <xref href="final+String?alt=final String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task representing the join operation </p>
    type: <xref href="Future%3CVoid%3E?alt=Future<Void>&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Joins an existing conversation. You should use this method if you have created a conversation using CreateConversationAsync(SpeechConfig, String).</p>

    <p></p>
  syntax: public Future<Void> joinConversationAsync(final String conversationId, final String nickname, final String language)
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.joinConversationAsync(final String,final String,final String)
uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.joinConversationAsync*
fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.joinConversationAsync(Conversation conversation, final String nickname)
name: joinConversationAsync(Conversation conversation, final String nickname)
package: com.microsoft.cognitiveservices.speech.transcription
metadata: {}
