### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.servicebus._receive_mode
  id: _receive_mode
  parent: com.microsoft.azure.servicebus
  children:
  - com.microsoft.azure.servicebus._receive_mode.PEEKLOCK
  - com.microsoft.azure.servicebus._receive_mode.RECEIVEANDDELETE
  href: com.microsoft.azure.servicebus._receive_mode.yml
  langs:
  - java
  name: ReceiveMode
  nameWithType: ReceiveMode
  fullName: com.microsoft.azure.servicebus.ReceiveMode
  type: Enum
  source:
    remote: &o0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/ReceiveMode.java
      branch: master
      repo: https://github.com/Azure/azure-service-bus-java
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/ReceiveMode.java
    startLine: 10
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Enumeration to represent the two receive modes Azure Service Bus supports.</p>

    <p></p>
  syntax:
    content: public enum ReceiveMode
  inheritance:
  - java.lang.Object
  - java.lang.Enum<ReceiveMode>
- uid: com.microsoft.azure.servicebus._receive_mode.PEEKLOCK
  id: PEEKLOCK
  parent: com.microsoft.azure.servicebus._receive_mode
  href: com.microsoft.azure.servicebus._receive_mode.yml
  langs:
  - java
  name: PEEKLOCK
  nameWithType: ReceiveMode.PEEKLOCK
  fullName: com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK
  type: Field
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/ReceiveMode.java
    startLine: 21
  package: com.microsoft.azure.servicebus
  summary: <p>In this mode, received message is not deleted from the queue or subscription, instead it is temporarily locked to the receiver, making it invisible to other receivers. Then the service waits for one of the three events <itemizedlist><listitem><p>If the receiver processes the message successfully, it calls  and the message will be deleted. </p></listitem><listitem><p>If the receiver decides that it can't process the message successfully, it calls  and the message will be unlocked and made available to other receivers. </p></listitem><listitem><p>If the receiver wants to defer the processing of the message to a later point in time, it calls  and the message will be deferred. A deferred can only be received by its sequence number. </p></listitem><listitem><p>If the receiver wants to dead-letter the message, it calls  and the message will be moved to a special sub-queue called deadletter queue. </p></listitem><listitem><p>If the receiver calls neither of these methods within a configurable period of time (by default, 60 seconds), the service assumes the receiver has failed. In this case, it behaves as if the receiver had called , making the message available to other receivers </p></listitem></itemizedlist></p>
  syntax:
    content: public PEEKLOCK
- uid: com.microsoft.azure.servicebus._receive_mode.RECEIVEANDDELETE
  id: RECEIVEANDDELETE
  parent: com.microsoft.azure.servicebus._receive_mode
  href: com.microsoft.azure.servicebus._receive_mode.yml
  langs:
  - java
  name: RECEIVEANDDELETE
  nameWithType: ReceiveMode.RECEIVEANDDELETE
  fullName: com.microsoft.azure.servicebus.ReceiveMode.RECEIVEANDDELETE
  type: Field
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/ReceiveMode.java
    startLine: 26
  package: com.microsoft.azure.servicebus
  summary: <p>In this mode, received message is removed from the queue or subscription and immediately deleted. This option is simple, but if the receiver crashes before it finishes processing the message, the message is lost. Because it's been removed from the queue, no other receiver can access it. </p>
  syntax:
    content: public RECEIVEANDDELETE
references: []
