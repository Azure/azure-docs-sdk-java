### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.elasticdb.shard.store.IStoreTransactionScope.executeCommandBatch(List<StringBuilder> commands)
  name: executeCommandBatch(List<StringBuilder> commands)
  nameWithType: IStoreTransactionScope.executeCommandBatch(List<StringBuilder> commands)
  parameters:
  - description: <p>Collection of commands to execute. </p>
    name: commands
    type: <xref href="List%3CStringBuilder%3E?alt=List%3CStringBuilder%3E&text=List%3CStringBuilder%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Executes the given set of commands.</p>

    <p></p>
  syntax: public void executeCommandBatch(List<StringBuilder> commands)
  uid: com.microsoft.azure.elasticdb.shard.store.IStoreTransactionScope.executeCommandBatch(List<StringBuilder>)
- fullName: com.microsoft.azure.elasticdb.shard.store.IStoreTransactionScope.executeCommandSingle(StringBuilder command)
  name: executeCommandSingle(StringBuilder command)
  nameWithType: IStoreTransactionScope.executeCommandSingle(StringBuilder command)
  parameters:
  - description: <p>Command to execute. </p>
    name: command
    type: <xref href="StringBuilder?alt=StringBuilder&text=StringBuilder" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Storage results object. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.store.StoreResults?alt=com.microsoft.azure.elasticdb.shard.store.StoreResults&text=StoreResults" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Executes the given command.</p>

    <p></p>
  syntax: public StoreResults executeCommandSingle(StringBuilder command)
  uid: com.microsoft.azure.elasticdb.shard.store.IStoreTransactionScope.executeCommandSingle(StringBuilder)
- fullName: com.microsoft.azure.elasticdb.shard.store.IStoreTransactionScope.executeOperation(String operationName, JAXBElement operationData)
  name: executeOperation(String operationName, JAXBElement operationData)
  nameWithType: IStoreTransactionScope.executeOperation(String operationName, JAXBElement operationData)
  parameters:
  - description: <p>Operation to execute. </p>
    name: operationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Input data for operation. </p>
    name: operationData
    type: <xref href="JAXBElement?alt=JAXBElement&text=JAXBElement" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Storage results object. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.store.StoreResults?alt=com.microsoft.azure.elasticdb.shard.store.StoreResults&text=StoreResults" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Executes the given operation using the <em>operationData</em>  values as input to the operation.</p>

    <p></p>
  syntax: public StoreResults executeOperation(String operationName, JAXBElement operationData)
  uid: com.microsoft.azure.elasticdb.shard.store.IStoreTransactionScope.executeOperation(String,JAXBElement)
- fullName: com.microsoft.azure.elasticdb.shard.store.IStoreTransactionScope.executeOperationAsync(String operationName, JAXBElement operationData)
  name: executeOperationAsync(String operationName, JAXBElement operationData)
  nameWithType: IStoreTransactionScope.executeOperationAsync(String operationName, JAXBElement operationData)
  parameters:
  - description: <p>Operation to execute. </p>
    name: operationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Input data for operation. </p>
    name: operationData
    type: <xref href="JAXBElement?alt=JAXBElement&text=JAXBElement" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task encapsulating storage results object. </p>
    type: Callable&lt;<xref href="com.microsoft.azure.elasticdb.shard.store.StoreResults?alt=com.microsoft.azure.elasticdb.shard.store.StoreResults&text=StoreResults" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Asynchronously executes the given operation using the <em>operationData</em>  values as input to the operation.</p>

    <p></p>
  syntax: public Callable<StoreResults> executeOperationAsync(String operationName, JAXBElement operationData)
  uid: com.microsoft.azure.elasticdb.shard.store.IStoreTransactionScope.executeOperationAsync(String,JAXBElement)
- fullName: com.microsoft.azure.elasticdb.shard.store.IStoreTransactionScope.getKind()
  name: getKind()
  nameWithType: IStoreTransactionScope.getKind()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.store.StoreTransactionScopeKind?alt=com.microsoft.azure.elasticdb.shard.store.StoreTransactionScopeKind&text=StoreTransactionScopeKind" data-throw-if-not-resolved="False"/>
  summary: <p>Type of transaction scope. </p>
  syntax: public StoreTransactionScopeKind getKind()
  uid: com.microsoft.azure.elasticdb.shard.store.IStoreTransactionScope.getKind()
- fullName: com.microsoft.azure.elasticdb.shard.store.IStoreTransactionScope.getSuccess()
  name: getSuccess()
  nameWithType: IStoreTransactionScope.getSuccess()
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>When set to true, implies that the transaction is ready for commit. </p>
  syntax: public boolean getSuccess()
  uid: com.microsoft.azure.elasticdb.shard.store.IStoreTransactionScope.getSuccess()
- fullName: com.microsoft.azure.elasticdb.shard.store.IStoreTransactionScope.setSuccess(boolean value)
  name: setSuccess(boolean value)
  nameWithType: IStoreTransactionScope.setSuccess(boolean value)
  parameters:
  - name: value
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public void setSuccess(boolean value)
  uid: com.microsoft.azure.elasticdb.shard.store.IStoreTransactionScope.setSuccess(boolean)
nameWithType: IStoreTransactionScope
syntax: public interface IStoreTransactionScope
type: interface
uid: com.microsoft.azure.elasticdb.shard.store.IStoreTransactionScope
fullName: com.microsoft.azure.elasticdb.shard.store.IStoreTransactionScope
name: IStoreTransactionScope
package: com.microsoft.azure.elasticdb.shard.store
summary: <p>Allows scoping of a transactional operation on the store. </p>
metadata: {}
