### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation
  id: _x509_attestation
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs
  children:
  - com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.createFromClientCertificates(String)
  - com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.createFromClientCertificates(String,String)
  - com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.createFromRootCertificates(String)
  - com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.createFromRootCertificates(String,String)
  - com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getClientCertificates()
  - com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getIntermediateCertificatesChain()
  - com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getPrimaryX509CertificateInfo()
  - com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getSecondaryX509CertificateInfo()
  - com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.X509Attestation()
  - com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.X509Attestation(X509Attestation)
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.yml
  langs:
  - java
  name: X509Attestation
  nameWithType: X509Attestation
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation
  type: Class
  source:
    remote: &o0
      path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Attestation.java
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-java
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Attestation.java
    startLine: 44
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    <p>Representation of a single Device Provisioning Service X509 <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._attestation" data-throw-if-not-resolved="false">Attestation</xref>.</p>

    <p>The provisioning service supports Device Identifier Composition Engine, or DICE, as the device attestation mechanism. To use DICE, user must provide the X509 certificate. This class provide the means to create a new attestation for a X509 certificate and return it as an abstract interface <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._attestation" data-throw-if-not-resolved="false">Attestation</xref>.</p>

    <p>An X509 attestation can contains one of the 2 types of certificate:</p>

    <p>

      <variablelist>

        <varlistentry>

          <b>Client or Alias certificate:</b>

        </varlistentry>

        <listitem>

          <p>Called on this class as clientCertificates, this certificate can authenticate a single device. </p>

        </listitem>

      </variablelist>

      <variablelist>

        <varlistentry>

          <b>Signing or Root certificate:</b>

        </varlistentry>

        <listitem>

          <p>Called on this class as rootCertificates, this certificate can create multiple Client certificates to authenticate multiple devices. </p>

        </listitem>

      </variablelist>

    </p>

    <p>The provisioning service allows user to create <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment" data-throw-if-not-resolved="false">Enrollment</xref> and <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment_group" data-throw-if-not-resolved="false">EnrollmentGroup</xref>. For all operations over <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment" data-throw-if-not-resolved="false">Enrollment</xref> with <b>DICE</b>, user must provide a <b>clientCertificates</b>, and for operations over <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment_group" data-throw-if-not-resolved="false">EnrollmentGroup</xref>, user must provide a <b>rootCertificates</b>.</p>

    <p>For each of this types of certificates, user can provide 2 Certificates, a primary and a secondary. Only the primary is mandatory, the secondary is optional.</p>

    <p>The provisioning service will process the provided certificates, but will never return it back. Instead of it, <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getPrimaryX509CertificateInfo()" data-throw-if-not-resolved="false">getPrimaryX509CertificateInfo()</xref> and <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getSecondaryX509CertificateInfo()" data-throw-if-not-resolved="false">getSecondaryX509CertificateInfo()</xref> will return a translated info in the certificate.</p>

    <p></p>
  syntax: &o1
    content: public class X509Attestation extends Attestation
  inheritance:
  - java.lang.Object
  - com.microsoft.azure.sdk.iot.provisioning.service.configs._attestation
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.createFromClientCertificates(String)
  id: createFromClientCertificates(String)
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.yml
  langs:
  - java
  name: createFromClientCertificates(String primary)
  nameWithType: X509Attestation.createFromClientCertificates(String primary)
  fullName: static X509Attestation com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromClientCertificates(String primary)
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.createFromClientCertificates*
  type: Method
  source:
    remote: *o0
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Attestation.java
    startLine: 135
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    <p>Factory with ClientCertificate with only primary certificate.</p>

    <p>Creates a new instance of the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation" data-throw-if-not-resolved="false">X509Attestation</xref> using the provided primary Certificate.</p>

    <p></p>
  syntax:
    content: public static X509Attestation createFromClientCertificates(String primary)
    parameters:
    - id: primary
      type: "26831127"
      description: >-
        <p>the<code>String 

            </code> with the primary certificate. It cannot be<code>null 

            </code> or empty. </p>
    return:
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation
      description: <p>the new instance of the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation" data-throw-if-not-resolved="false">X509Attestation</xref>. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>if the provide certificate is invalid. </p>
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.createFromClientCertificates(String,String)
  id: createFromClientCertificates(String,String)
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.yml
  langs:
  - java
  name: createFromClientCertificates(String primary, String secondary)
  nameWithType: X509Attestation.createFromClientCertificates(String primary, String secondary)
  fullName: static X509Attestation com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromClientCertificates(String primary, String secondary)
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.createFromClientCertificates*
  type: Method
  source:
    remote: *o0
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Attestation.java
    startLine: 151
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    <p>Factory with ClientCertificates with primary and secondary certificates.</p>

    <p>Creates a new instance of the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation" data-throw-if-not-resolved="false">X509Attestation</xref> with the primary and secondary certificates.</p>

    <p></p>
  syntax:
    content: public static X509Attestation createFromClientCertificates(String primary, String secondary)
    parameters:
    - id: primary
      type: "26831127"
      description: >-
        <p>the<code>String 

            </code> with the primary certificate. It cannot be<code>null 

            </code> or empty. </p>
    - id: secondary
      type: "26831127"
      description: >-
        <p>the<code>String 

            </code> with the secondary certificate. It can be<code>null 

            </code> or empty (ignored). </p>
    return:
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation
      description: <p>the new instance of the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation" data-throw-if-not-resolved="false">X509Attestation</xref>. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>if the provide primary certificate is invalid. </p>
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.createFromRootCertificates(String)
  id: createFromRootCertificates(String)
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.yml
  langs:
  - java
  name: createFromRootCertificates(String primary)
  nameWithType: X509Attestation.createFromRootCertificates(String primary)
  fullName: static X509Attestation com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromRootCertificates(String primary)
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.createFromRootCertificates*
  type: Method
  source:
    remote: *o0
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Attestation.java
    startLine: 175
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    <p>Factory with IntermediateCertificatesChain with only primary certificate.</p>

    <p>Creates a new instance of the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation" data-throw-if-not-resolved="false">X509Attestation</xref> using the provided primary Certificate.</p>

    <p></p>
  syntax:
    content: public static X509Attestation createFromRootCertificates(String primary)
    parameters:
    - id: primary
      type: "26831127"
      description: >-
        <p>the<code>String 

            </code> with the primary certificate. It cannot be<code>null 

            </code> or empty. </p>
    return:
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation
      description: <p>the new instance of the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation" data-throw-if-not-resolved="false">X509Attestation</xref>. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>if the provide certificate is invalid. </p>
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.createFromRootCertificates(String,String)
  id: createFromRootCertificates(String,String)
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.yml
  langs:
  - java
  name: createFromRootCertificates(String primary, String secondary)
  nameWithType: X509Attestation.createFromRootCertificates(String primary, String secondary)
  fullName: static X509Attestation com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromRootCertificates(String primary, String secondary)
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.createFromRootCertificates*
  type: Method
  source:
    remote: *o0
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Attestation.java
    startLine: 191
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    <p>Factory with IntermediateCertificatesChain with primary and secondary certificates.</p>

    <p>Creates a new instance of the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation" data-throw-if-not-resolved="false">X509Attestation</xref> with the primary and secondary certificates.</p>

    <p></p>
  syntax:
    content: public static X509Attestation createFromRootCertificates(String primary, String secondary)
    parameters:
    - id: primary
      type: "26831127"
      description: >-
        <p>the<code>String 

            </code> with the primary certificate. It cannot be<code>null 

            </code> or empty. </p>
    - id: secondary
      type: "26831127"
      description: >-
        <p>the<code>String 

            </code> with the secondary certificate. It can be<code>null 

            </code> or empty (ignored). </p>
    return:
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation
      description: <p>the new instance of the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation" data-throw-if-not-resolved="false">X509Attestation</xref>. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>if the provide primary certificate is invalid. </p>
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getClientCertificates()
  id: getClientCertificates()
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.yml
  langs:
  - java
  name: getClientCertificates()
  nameWithType: X509Attestation.getClientCertificates()
  fullName: X509Certificates com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getClientCertificates()
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getClientCertificates*
  type: Method
  source:
    remote: *o0
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Attestation.java
    startLine: 211
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    <p>Getter for the clientCertificates.</p>

    <p></p>
  syntax:
    content: public X509Certificates getClientCertificates()
    return:
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates
      description: >-
        <p>the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates" data-throw-if-not-resolved="false">X509Certificates</xref> with the stored clientCertificates. it can be<code>null 

            </code> . </p>
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getIntermediateCertificatesChain()
  id: getIntermediateCertificatesChain()
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.yml
  langs:
  - java
  name: getIntermediateCertificatesChain()
  nameWithType: X509Attestation.getIntermediateCertificatesChain()
  fullName: X509Certificates com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getIntermediateCertificatesChain()
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getIntermediateCertificatesChain*
  type: Method
  source:
    remote: *o0
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Attestation.java
    startLine: 222
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    <p>Getter for the rootCertificates.</p>

    <p></p>
  syntax:
    content: public X509Certificates getIntermediateCertificatesChain()
    return:
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates
      description: >-
        <p>the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates" data-throw-if-not-resolved="false">X509Certificates</xref> with the stored rootCertificates. it can be<code>null 

            </code> . </p>
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getPrimaryX509CertificateInfo()
  id: getPrimaryX509CertificateInfo()
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.yml
  langs:
  - java
  name: getPrimaryX509CertificateInfo()
  nameWithType: X509Attestation.getPrimaryX509CertificateInfo()
  fullName: X509CertificateInfo com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getPrimaryX509CertificateInfo()
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getPrimaryX509CertificateInfo*
  type: Method
  source:
    remote: *o0
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Attestation.java
    startLine: 236
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    <p>Getter for the primary X509 certificate info.</p>

    <p>This method is a getter for the information returned from the provisioning service for the provided primary certificate.</p>

    <p></p>
  syntax: &o2
    content: public X509CertificateInfo getPrimaryX509CertificateInfo()
    return:
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificate_info
      description: >-
        <p>the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificate_info" data-throw-if-not-resolved="false">X509CertificateInfo</xref> with the returned certificate information. it can be<code>null 

            </code> . </p>
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getSecondaryX509CertificateInfo()
  id: getSecondaryX509CertificateInfo()
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.yml
  langs:
  - java
  name: getSecondaryX509CertificateInfo()
  nameWithType: X509Attestation.getSecondaryX509CertificateInfo()
  fullName: X509CertificateInfo com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getSecondaryX509CertificateInfo()
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getSecondaryX509CertificateInfo*
  type: Method
  source:
    remote: *o0
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Attestation.java
    startLine: 260
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    <p>Getter for the secondary X509 certificate info.</p>

    <p>This method is a getter for the information returned from the provisioning service for the provided secondary certificate.</p>

    <p></p>
  syntax: &o3
    content: public X509CertificateInfo getSecondaryX509CertificateInfo()
    return:
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificate_info
      description: >-
        <p>the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificate_info" data-throw-if-not-resolved="false">X509CertificateInfo</xref> with the returned certificate information. it can be<code>null 

            </code> . </p>
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.X509Attestation()
  id: X509Attestation()
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.yml
  langs:
  - java
  name: X509Attestation()
  nameWithType: X509Attestation.X509Attestation()
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.X509Attestation()
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.X509Attestation*
  type: Constructor
  source:
    remote: *o0
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Attestation.java
    startLine: 289
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    <p>Empty constructor</p>

    <p>Used only by the tools that will deserialize this class. </p>
  syntax:
    content: protected X509Attestation()
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.X509Attestation(X509Attestation)
  id: X509Attestation(X509Attestation)
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.yml
  langs:
  - java
  name: X509Attestation(X509Attestation x509Attestation)
  nameWithType: X509Attestation.X509Attestation(X509Attestation x509Attestation)
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.X509Attestation(X509Attestation x509Attestation)
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.X509Attestation*
  type: Constructor
  source:
    remote: *o0
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Attestation.java
    startLine: 93
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    <p>Constructor [COPY]</p>

    <p>Creates a new instance of the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation" data-throw-if-not-resolved="false">X509Attestation</xref> copping the content of the provided one.</p>

    <p></p>
  syntax:
    content: public X509Attestation(X509Attestation x509Attestation)
    parameters:
    - id: x509Attestation
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation
      description: <p>the original <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation" data-throw-if-not-resolved="false">X509Attestation</xref> to copy. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>if the provided x509Attestation is null or do not contains a primary certificate. </p>
references:
- uid: 3c87bd19
  spec.java:
  - name: IllegalArgumentException
    fullName: IllegalArgumentException
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.X509Attestation*
  name: X509Attestation
  nameWithType: X509Attestation.X509Attestation
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.X509Attestation
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getClientCertificates*
  name: getClientCertificates
  nameWithType: X509Attestation.getClientCertificates
  fullName: X509Certificates com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getClientCertificates
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getIntermediateCertificatesChain*
  name: getIntermediateCertificatesChain
  nameWithType: X509Attestation.getIntermediateCertificatesChain
  fullName: X509Certificates com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getIntermediateCertificatesChain
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getPrimaryX509CertificateInfo*
  name: getPrimaryX509CertificateInfo
  nameWithType: X509Attestation.getPrimaryX509CertificateInfo
  fullName: X509CertificateInfo com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getPrimaryX509CertificateInfo
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getSecondaryX509CertificateInfo*
  name: getSecondaryX509CertificateInfo
  nameWithType: X509Attestation.getSecondaryX509CertificateInfo
  fullName: X509CertificateInfo com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getSecondaryX509CertificateInfo
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.createFromClientCertificates*
  name: createFromClientCertificates
  nameWithType: X509Attestation.createFromClientCertificates
  fullName: static X509Attestation com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromClientCertificates
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.createFromRootCertificates*
  name: createFromRootCertificates
  nameWithType: X509Attestation.createFromRootCertificates
  fullName: static X509Attestation com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromRootCertificates
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._attestation
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._attestation.yml
  name: Attestation
  nameWithType: Attestation
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.Attestation
  type: Class
  summary: >-
    <p>This is the abstract class that unifies all possible types of attestation that Device Provisioning Service supports.</p>

    <p>For now, the provisioning service supports <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._tpm_attestation" data-throw-if-not-resolved="false">TpmAttestation</xref> or <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation" data-throw-if-not-resolved="false">X509Attestation</xref>.</p>

    <p></p>
  syntax:
    content: public class Attestation
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.yml
  name: X509Certificates
  nameWithType: X509Certificates
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  type: Class
  summary: >-
    <p>Representation of a single Device Provisioning Service X509 Primary and Secondary Certificate.</p>

    <p>this class creates a representation of an X509 certificate. It can receive primary and secondary certificate, but only the primary is mandatory.</p>

    <p>Users must provide the certificate as a<code>String 

        </code> , from a <b>.pem</b> files. This class will encapsulate both in a single <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation" data-throw-if-not-resolved="false">X509Attestation</xref>. The following JSON is an example of the result of this class. <pre><code>{

            "primary": {

                "certificate": "-----BEGIN CERTIFICATE-----\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "-----END CERTIFICATE-----\n";

            },

            "secondary": {

                "certificate": "-----BEGIN CERTIFICATE-----\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "-----END CERTIFICATE-----\n";

            }

        }

        </code></pre></p>

    <p>After send an X509 certificate with success, the provisioning service will return the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificate_info" data-throw-if-not-resolved="false">X509CertificateInfo</xref> for both primary and secondary certificate. User can get these info from this class, and once again, only the primary info is mandatory. The following JSON is an example what info the provisioning service will return for X509. <pre><code>{

            "primary": {

                "info": {

                     "subjectName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",

                     "sha1Thumbprint": "0000000000000000000000000000000000",

                     "sha256Thumbprint": "validEnrollmentGroupId",

                     "issuerName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",

                     "notBeforeUtc": "2017-11-14T12:34:18Z",

                     "notAfterUtc": "2017-11-20T12:34:18Z",

                     "serialNumber": "000000000000000000",

                     "version": 3

                 }

            },

            "secondary": {

                "info": {

                     "subjectName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",

                     "sha1Thumbprint": "0000000000000000000000000000000000",

                     "sha256Thumbprint": "validEnrollmentGroupId",

                     "issuerName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",

                     "notBeforeUtc": "2017-11-14T12:34:18Z",

                     "notAfterUtc": "2017-11-20T12:34:18Z",

                     "serialNumber": "000000000000000000",

                     "version": 3

                 }

            }

        }

        </code></pre></p>

    <p></p>
  syntax:
    content: public class X509Certificates
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.yml
  name: X509Attestation
  nameWithType: X509Attestation
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation
  type: Class
  summary: >-
    <p>Representation of a single Device Provisioning Service X509 <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._attestation" data-throw-if-not-resolved="false">Attestation</xref>.</p>

    <p>The provisioning service supports Device Identifier Composition Engine, or DICE, as the device attestation mechanism. To use DICE, user must provide the X509 certificate. This class provide the means to create a new attestation for a X509 certificate and return it as an abstract interface <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._attestation" data-throw-if-not-resolved="false">Attestation</xref>.</p>

    <p>An X509 attestation can contains one of the 2 types of certificate:</p>

    <p>

      <variablelist>

        <varlistentry>

          <b>Client or Alias certificate:</b>

        </varlistentry>

        <listitem>

          <p>Called on this class as clientCertificates, this certificate can authenticate a single device. </p>

        </listitem>

      </variablelist>

      <variablelist>

        <varlistentry>

          <b>Signing or Root certificate:</b>

        </varlistentry>

        <listitem>

          <p>Called on this class as rootCertificates, this certificate can create multiple Client certificates to authenticate multiple devices. </p>

        </listitem>

      </variablelist>

    </p>

    <p>The provisioning service allows user to create <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment" data-throw-if-not-resolved="false">Enrollment</xref> and <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment_group" data-throw-if-not-resolved="false">EnrollmentGroup</xref>. For all operations over <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment" data-throw-if-not-resolved="false">Enrollment</xref> with <b>DICE</b>, user must provide a <b>clientCertificates</b>, and for operations over <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment_group" data-throw-if-not-resolved="false">EnrollmentGroup</xref>, user must provide a <b>rootCertificates</b>.</p>

    <p>For each of this types of certificates, user can provide 2 Certificates, a primary and a secondary. Only the primary is mandatory, the secondary is optional.</p>

    <p>The provisioning service will process the provided certificates, but will never return it back. Instead of it, <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getPrimaryX509CertificateInfo()" data-throw-if-not-resolved="false">getPrimaryX509CertificateInfo()</xref> and <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getSecondaryX509CertificateInfo()" data-throw-if-not-resolved="false">getSecondaryX509CertificateInfo()</xref> will return a translated info in the certificate.</p>

    <p></p>
  syntax: *o1
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment.yml
  name: Enrollment
  nameWithType: Enrollment
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.Enrollment
  type: Class
  summary: >-
    <p>Representation of a single Device Provisioning Service enrollment with a JSON serializer and deserializer.</p>

    <p>This object is used to send <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment" data-throw-if-not-resolved="false">Enrollment</xref> information to the provisioning service, or receive <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment" data-throw-if-not-resolved="false">Enrollment</xref> information from the provisioning service.</p>

    <p>To create or update an <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment" data-throw-if-not-resolved="false">Enrollment</xref> on the provisioning service you should fill this object and call the public API <xref uid="com.microsoft.azure.sdk.iot.provisioning.service._provisioning_service_client.createOrUpdateIndividualEnrollment(Enrollment)" data-throw-if-not-resolved="false">ProvisioningServiceClient#createOrUpdateIndividualEnrollment(Enrollment)</xref>. The minimum information required by the provisioning service is the<code>registrationId 

        </code> and the <code>attestation 

        </code> .</p>

    <p>A new device can be provisioned by two attestation mechanisms, Trust Platform Module (see <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._tpm_attestation" data-throw-if-not-resolved="false">TpmAttestation</xref>) or DICE (see <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation" data-throw-if-not-resolved="false">X509Attestation</xref>). The definition of each one you should use depending on the physical authentication hardware that the device contains.</p>

    <p>The content of this class will be serialized in a JSON format and sent as a body of the rest API to the provisioning service.</p>

    <p>When serialized, an <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment" data-throw-if-not-resolved="false">Enrollment</xref> will look like the following example: <pre>

    *<code>*{

             "registrationId":"validRegistrationId",

             "deviceId":"ContosoDevice-123",

             "attestation":{

                 "type":"tpm",

                 "tpm":{

                     "endorsementKey":"validEndorsementKey"

                 }

             },

             "iotHubHostName":"ContosoIoTHub.azure-devices.net",

             "provisioningStatus":"enabled"

        *}

        </code></pre></p>

    <p>The content of this class can be filled by a JSON, received from the provisioning service, as result of a <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment" data-throw-if-not-resolved="false">Enrollment</xref> operation like create, update, or query enrollment.</p>

    <p>The following JSON is a sample or the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment" data-throw-if-not-resolved="false">Enrollment</xref> response, received from the provisioning service. <pre>

    *<code>*{

             "registrationId":"validRegistrationId",

             "deviceId":"ContosoDevice-123",

             "attestation":{

                 "type":"tpm",

                 "tpm":{

                     "endorsementKey":"validEndorsementKey"

                 }

             },

             "iotHubHostName":"ContosoIoTHub.azure-devices.net",

             "provisioningStatus":"enabled"

             "createdDateTimeUtc": "2017-09-28T16:29:42.3447817Z",

             "lastUpdatedDateTimeUtc": "2017-09-28T16:29:42.3447817Z",

             "etag": "\"00000000-0000-0000-0000-00000000000\""

        *}

        </code></pre></p>

    <p></p>
  syntax:
    content: public class Enrollment extends Serializable
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificate_info
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificate_info.yml
  name: X509CertificateInfo
  nameWithType: X509CertificateInfo
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateInfo
  type: Class
  summary: >-
    <p>Representation of a single X509 Certificate Info for the Device Provisioning Service.</p>

    <p>User receive this info from the provisioning service as result of X509 operations.</p>

    <p>This info contains a set of parameters, The following JSON is an example of the X509 certificate info. <pre><code>{

            "subjectName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",

            "sha1Thumbprint": "0000000000000000000000000000000000",

            "sha256Thumbprint": "validEnrollmentGroupId",

            "issuerName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",

            "notBeforeUtc": "2017-11-14T12:34:182Z",

            "notAfterUtc": "2017-11-20T12:34:183Z",

            "serialNumber": "000000000000000000",

            "version": 3

        }

        </code></pre></p>

    <p></p>
  syntax:
    content: public class X509CertificateInfo
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment_group
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment_group.yml
  name: EnrollmentGroup
  nameWithType: EnrollmentGroup
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.EnrollmentGroup
  type: Class
  summary: >-
    <p>Representation of a single Device Provisioning Service enrollment group with a JSON serializer and deserializer.</p>

    <p>This object is used to send <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment_group" data-throw-if-not-resolved="false">EnrollmentGroup</xref> information to the provisioning service, or receive <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment_group" data-throw-if-not-resolved="false">EnrollmentGroup</xref> information from the provisioning service.</p>

    <p>To create or update an <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment_group" data-throw-if-not-resolved="false">EnrollmentGroup</xref> on the provisioning service you should fill this object and call the public API <xref uid="com.microsoft.azure.sdk.iot.provisioning.service._provisioning_service_client.createOrUpdateEnrollmentGroup(EnrollmentGroup)" data-throw-if-not-resolved="false">ProvisioningServiceClient#createOrUpdateEnrollmentGroup(EnrollmentGroup)</xref>. The minimum information required by the provisioning service is the <xref uid="" data-throw-if-not-resolved="false">enrollmentGroupId</xref> and the <xref uid="" data-throw-if-not-resolved="false">attestation</xref>.</p>

    <p>To provision a device using <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment_group" data-throw-if-not-resolved="false">EnrollmentGroup</xref>, it must contain a DICE chip with a signingCertificate for the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation" data-throw-if-not-resolved="false">X509Attestation</xref> mechanism.</p>

    <p>The content of this class will be serialized in a JSON format and sent as a body of the rest API to the provisioning service.</p>

    <p>When serialized, an <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment_group" data-throw-if-not-resolved="false">EnrollmentGroup</xref> will look like the following example: <pre><code>{

            "enrollmentGroupId":"validEnrollmentGroupId",

            "attestation":{

                "type":"x509",

                "signingCertificates":{

                    "primary":{

                        "certificate":"[valid certificate]"

                    }

                }

            },

            "iotHubHostName":"ContosoIoTHub.azure-devices.net",

            "provisioningStatus":"enabled"

        }

        </code></pre></p>

    <p>The content of this class can be filled by a JSON, received from the provisioning service, as result of a <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment_group" data-throw-if-not-resolved="false">EnrollmentGroup</xref> operation like create, update, or query <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment_group" data-throw-if-not-resolved="false">EnrollmentGroup</xref>.</p>

    <p>The following JSON is a sample of the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment_group" data-throw-if-not-resolved="false">EnrollmentGroup</xref> response, received from the provisioning service. <pre><code>{

            "enrollmentGroupId":"validEnrollmentGroupId",

            "attestation":{

                "type":"x509",

                "signingCertificates":{

                    "primary":{

                        "certificate":"[valid certificate]",

                        "info": {

                            "subjectName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",

                            "sha1Thumbprint": "0000000000000000000000000000000000",

                            "sha256Thumbprint": "validEnrollmentGroupId",

                            "issuerName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",

                            "notBeforeUtc": "2017-11-14T12:34:18Z",

                            "notAfterUtc": "2017-11-20T12:34:18Z",

                            "serialNumber": "000000000000000000",

                            "version": 3

                        }

                    }

                }

            },

            "iotHubHostName":"ContosoIoTHub.azure-devices.net",

            "provisioningStatus":"enabled",

            "createdDateTimeUtc": "2017-09-28T16:29:42.3447817Z",

            "lastUpdatedDateTimeUtc": "2017-09-28T16:29:42.3447817Z",

            "etag": "\"00000000-0000-0000-0000-00000000000\""

        }

        </code></pre></p>

    <p></p>
  syntax:
    content: public class EnrollmentGroup extends Serializable
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getPrimaryX509CertificateInfo()
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.yml
  name: getPrimaryX509CertificateInfo()
  nameWithType: X509Attestation.getPrimaryX509CertificateInfo()
  fullName: X509CertificateInfo com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getPrimaryX509CertificateInfo()
  type: Method
  summary: >-
    <p>Getter for the primary X509 certificate info.</p>

    <p>This method is a getter for the information returned from the provisioning service for the provided primary certificate.</p>

    <p></p>
  syntax: *o2
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getSecondaryX509CertificateInfo()
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.yml
  name: getSecondaryX509CertificateInfo()
  nameWithType: X509Attestation.getSecondaryX509CertificateInfo()
  fullName: X509CertificateInfo com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getSecondaryX509CertificateInfo()
  type: Method
  summary: >-
    <p>Getter for the secondary X509 certificate info.</p>

    <p>This method is a getter for the information returned from the provisioning service for the provided secondary certificate.</p>

    <p></p>
  syntax: *o3
