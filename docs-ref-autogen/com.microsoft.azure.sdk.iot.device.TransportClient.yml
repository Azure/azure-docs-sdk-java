### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.device.TransportClient"
fullName: "com.microsoft.azure.sdk.iot.device.TransportClient"
name: "TransportClient"
nameWithType: "TransportClient"
summary: "The public-facing API."
deprecatedTag: "This client has been replaced with <xref uid=\"com.microsoft.azure.sdk.iot.device.MultiplexingClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MultiplexingClient\"></xref> since this client does not support adding or removing devices once the connection has been established. <xref uid=\"com.microsoft.azure.sdk.iot.device.MultiplexingClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MultiplexingClient\"></xref> allows for adding and removing of devices from multiplexed connections before or after opening the connection."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "@Deprecated\npublic class TransportClient"
constructors:
- uid: "com.microsoft.azure.sdk.iot.device.TransportClient.TransportClient(com.microsoft.azure.sdk.iot.device.IotHubClientProtocol)"
  fullName: "com.microsoft.azure.sdk.iot.device.TransportClient.TransportClient(IotHubClientProtocol protocol)"
  name: "TransportClient(IotHubClientProtocol protocol)"
  nameWithType: "TransportClient.TransportClient(IotHubClientProtocol protocol)"
  summary: "Constructor that takes a protocol as an argument."
  parameters:
  - description: "the communication protocol used (i.e. AMQPS or AMQPS_WS)."
    name: "protocol"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public TransportClient(IotHubClientProtocol protocol)"
  desc: "Constructor that takes a protocol as an argument."
fields:
- uid: "com.microsoft.azure.sdk.iot.device.TransportClient.RECEIVE_PERIOD_MILLIS_AMQPS"
  fullName: "com.microsoft.azure.sdk.iot.device.TransportClient.RECEIVE_PERIOD_MILLIS_AMQPS"
  name: "RECEIVE_PERIOD_MILLIS_AMQPS"
  nameWithType: "TransportClient.RECEIVE_PERIOD_MILLIS_AMQPS"
  modifiers:
  - "static"
  field:
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static long RECEIVE_PERIOD_MILLIS_AMQPS"
- uid: "com.microsoft.azure.sdk.iot.device.TransportClient.SEND_PERIOD_MILLIS"
  fullName: "com.microsoft.azure.sdk.iot.device.TransportClient.SEND_PERIOD_MILLIS"
  name: "SEND_PERIOD_MILLIS"
  nameWithType: "TransportClient.SEND_PERIOD_MILLIS"
  modifiers:
  - "static"
  field:
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static long SEND_PERIOD_MILLIS"
methods:
- uid: "com.microsoft.azure.sdk.iot.device.TransportClient.closeNow()"
  fullName: "com.microsoft.azure.sdk.iot.device.TransportClient.closeNow()"
  name: "closeNow()"
  nameWithType: "TransportClient.closeNow()"
  summary: "Completes all current outstanding requests and closes the IoT Hub client."
  syntax: "public void closeNow()"
  exceptions:
  - description: "if the connection to an IoT Hub cannot be closed."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Completes all current outstanding requests and closes the IoT Hub client. Must be called to terminate the background thread that is sending data to IoT Hub. After `closeNow()` is called, the IoT Hub client is no longer usable. If the client is already closed, the function shall do nothing."
- uid: "com.microsoft.azure.sdk.iot.device.TransportClient.open()"
  fullName: "com.microsoft.azure.sdk.iot.device.TransportClient.open()"
  name: "open()"
  nameWithType: "TransportClient.open()"
  summary: "Creates a deviceIO and sets it to all the device client."
  syntax: "public void open()"
  exceptions:
  - description: "if the connection is already open."
    type: "<xref href=\"java.lang.IllegalStateException?alt=java.lang.IllegalStateException&text=IllegalStateException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the connection is already open."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Creates a deviceIO and sets it to all the device client. Verifies all device client's SAS tokens and renew them if it is necessary. Opens the transport client connection."
- uid: "com.microsoft.azure.sdk.iot.device.TransportClient.setRetryPolicy(com.microsoft.azure.sdk.iot.device.transport.RetryPolicy)"
  fullName: "com.microsoft.azure.sdk.iot.device.TransportClient.setRetryPolicy(RetryPolicy retryPolicy)"
  name: "setRetryPolicy(RetryPolicy retryPolicy)"
  nameWithType: "TransportClient.setRetryPolicy(RetryPolicy retryPolicy)"
  summary: "Sets the given retry policy on the underlying transport Sets the given retry policy on the underlying transport [ See more details about the default retry policy and about using custom retry policies here][See more details about the default retry policy and about using custom retry policies here]\n\n\n[See more details about the default retry policy and about using custom retry policies here]: https://github.com/Azure/azure-iot-sdk-java/blob/master/device/iot-device-client/devdoc/requirement_docs/com/microsoft/azure/iothub/retryPolicy.md"
  parameters:
  - description: "the new interval in milliseconds"
    name: "retryPolicy"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.transport.RetryPolicy?alt=com.microsoft.azure.sdk.iot.device.transport.RetryPolicy&text=RetryPolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setRetryPolicy(RetryPolicy retryPolicy)"
  desc: "Sets the given retry policy on the underlying transport Sets the given retry policy on the underlying transport [ See more details about the default retry policy and about using custom retry policies here][See more details about the default retry policy and about using custom retry policies here]\n\n\n[See more details about the default retry policy and about using custom retry policies here]: https://github.com/Azure/azure-iot-sdk-java/blob/master/device/iot-device-client/devdoc/requirement_docs/com/microsoft/azure/iothub/retryPolicy.md"
- uid: "com.microsoft.azure.sdk.iot.device.TransportClient.setSendInterval(long)"
  fullName: "com.microsoft.azure.sdk.iot.device.TransportClient.setSendInterval(long newIntervalInMilliseconds)"
  name: "setSendInterval(long newIntervalInMilliseconds)"
  nameWithType: "TransportClient.setSendInterval(long newIntervalInMilliseconds)"
  summary: "Sets the given send interval on the underlying device IO"
  parameters:
  - description: "the new interval in milliseconds"
    name: "newIntervalInMilliseconds"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setSendInterval(long newIntervalInMilliseconds)"
  exceptions:
  - description: "if the given number is less or equal to zero."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sets the given send interval on the underlying device IO"
type: "class"
desc: "The public-facing API. Allows user to create a transport client abstracton object to use it for multiple devices to connect to an IoT Hub using the same connection (multiplexing). Handle to register devices to transport client and open / closeNow the connection.\n\nThe multiplexed connection is supported with AMQPS / AMQPS\\_WS protocols."
hasDeprecatedTag: true
metadata: {}
package: "com.microsoft.azure.sdk.iot.device"
artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.30.1
