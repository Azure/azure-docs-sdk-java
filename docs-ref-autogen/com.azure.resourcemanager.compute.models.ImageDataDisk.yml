### YamlMime:JavaType
uid: "com.azure.resourcemanager.compute.models.ImageDataDisk"
fullName: "com.azure.resourcemanager.compute.models.ImageDataDisk"
name: "ImageDataDisk"
nameWithType: "ImageDataDisk"
summary: "Describes a data disk."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.resourcemanager.compute.models.ImageDisk?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.resourcemanager.compute.models.ImageDisk.blobUri()"
- "com.azure.resourcemanager.compute.models.ImageDisk.caching()"
- "com.azure.resourcemanager.compute.models.ImageDisk.diskEncryptionSet()"
- "com.azure.resourcemanager.compute.models.ImageDisk.diskSizeGB()"
- "com.azure.resourcemanager.compute.models.ImageDisk.managedDisk()"
- "com.azure.resourcemanager.compute.models.ImageDisk.snapshot()"
- "com.azure.resourcemanager.compute.models.ImageDisk.storageAccountType()"
- "com.azure.resourcemanager.compute.models.ImageDisk.validate()"
- "com.azure.resourcemanager.compute.models.ImageDisk.withBlobUri(java.lang.String)"
- "com.azure.resourcemanager.compute.models.ImageDisk.withCaching(com.azure.resourcemanager.compute.models.CachingTypes)"
- "com.azure.resourcemanager.compute.models.ImageDisk.withDiskEncryptionSet(com.azure.resourcemanager.compute.models.DiskEncryptionSetParameters)"
- "com.azure.resourcemanager.compute.models.ImageDisk.withDiskSizeGB(java.lang.Integer)"
- "com.azure.resourcemanager.compute.models.ImageDisk.withManagedDisk(com.azure.core.management.SubResource)"
- "com.azure.resourcemanager.compute.models.ImageDisk.withSnapshot(com.azure.core.management.SubResource)"
- "com.azure.resourcemanager.compute.models.ImageDisk.withStorageAccountType(com.azure.resourcemanager.compute.models.StorageAccountTypes)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ImageDataDisk extends ImageDisk"
constructors:
- uid: "com.azure.resourcemanager.compute.models.ImageDataDisk.ImageDataDisk()"
  fullName: "com.azure.resourcemanager.compute.models.ImageDataDisk.ImageDataDisk()"
  name: "ImageDataDisk()"
  nameWithType: "ImageDataDisk.ImageDataDisk()"
  syntax: "public ImageDataDisk()"
methods:
- uid: "com.azure.resourcemanager.compute.models.ImageDataDisk.lun()"
  fullName: "com.azure.resourcemanager.compute.models.ImageDataDisk.lun()"
  name: "lun()"
  nameWithType: "ImageDataDisk.lun()"
  summary: "Get the lun property: Specifies the logical unit number of the data disk."
  syntax: "public int lun()"
  desc: "Get the lun property: Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM."
  returns:
    description: "the lun value."
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.compute.models.ImageDataDisk.validate()"
  fullName: "com.azure.resourcemanager.compute.models.ImageDataDisk.validate()"
  name: "validate()"
  nameWithType: "ImageDataDisk.validate()"
  summary: "Validates the instance."
  overridden: "com.azure.resourcemanager.compute.models.ImageDisk.validate()"
  syntax: "public void validate()"
  desc: "Validates the instance."
- uid: "com.azure.resourcemanager.compute.models.ImageDataDisk.withBlobUri(java.lang.String)"
  fullName: "com.azure.resourcemanager.compute.models.ImageDataDisk.withBlobUri(String blobUri)"
  name: "withBlobUri(String blobUri)"
  nameWithType: "ImageDataDisk.withBlobUri(String blobUri)"
  summary: "Set the blob<wbr>Uri property: The Virtual Hard Disk."
  overridden: "com.azure.resourcemanager.compute.models.ImageDisk.withBlobUri(java.lang.String)"
  parameters:
  - name: "blobUri"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ImageDataDisk withBlobUri(String blobUri)"
  desc: "Set the blobUri property: The Virtual Hard Disk."
  returns:
    type: "<xref href=\"com.azure.resourcemanager.compute.models.ImageDataDisk?alt=com.azure.resourcemanager.compute.models.ImageDataDisk&text=ImageDataDisk\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.compute.models.ImageDataDisk.withCaching(com.azure.resourcemanager.compute.models.CachingTypes)"
  fullName: "com.azure.resourcemanager.compute.models.ImageDataDisk.withCaching(CachingTypes caching)"
  name: "withCaching(CachingTypes caching)"
  nameWithType: "ImageDataDisk.withCaching(CachingTypes caching)"
  summary: "Set the caching property: Specifies the caching requirements."
  overridden: "com.azure.resourcemanager.compute.models.ImageDisk.withCaching(com.azure.resourcemanager.compute.models.CachingTypes)"
  parameters:
  - name: "caching"
    type: "<xref href=\"com.azure.resourcemanager.compute.models.CachingTypes?alt=com.azure.resourcemanager.compute.models.CachingTypes&text=CachingTypes\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ImageDataDisk withCaching(CachingTypes caching)"
  desc: "Set the caching property: Specifies the caching requirements. <br><br> Possible values are: <br><br> \\*\\*None\\*\\* <br><br> \\*\\*ReadOnly\\*\\* <br><br> \\*\\*ReadWrite\\*\\* <br><br> Default: \\*\\*None for Standard storage. ReadOnly for Premium storage\\*\\*."
  returns:
    type: "<xref href=\"com.azure.resourcemanager.compute.models.ImageDataDisk?alt=com.azure.resourcemanager.compute.models.ImageDataDisk&text=ImageDataDisk\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.compute.models.ImageDataDisk.withDiskEncryptionSet(com.azure.resourcemanager.compute.models.DiskEncryptionSetParameters)"
  fullName: "com.azure.resourcemanager.compute.models.ImageDataDisk.withDiskEncryptionSet(DiskEncryptionSetParameters diskEncryptionSet)"
  name: "withDiskEncryptionSet(DiskEncryptionSetParameters diskEncryptionSet)"
  nameWithType: "ImageDataDisk.withDiskEncryptionSet(DiskEncryptionSetParameters diskEncryptionSet)"
  summary: "Set the disk<wbr>Encryption<wbr>Set property: Specifies the customer managed disk encryption set resource id for the managed image disk."
  overridden: "com.azure.resourcemanager.compute.models.ImageDisk.withDiskEncryptionSet(com.azure.resourcemanager.compute.models.DiskEncryptionSetParameters)"
  parameters:
  - name: "diskEncryptionSet"
    type: "<xref href=\"com.azure.resourcemanager.compute.models.DiskEncryptionSetParameters?alt=com.azure.resourcemanager.compute.models.DiskEncryptionSetParameters&text=DiskEncryptionSetParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ImageDataDisk withDiskEncryptionSet(DiskEncryptionSetParameters diskEncryptionSet)"
  desc: "Set the diskEncryptionSet property: Specifies the customer managed disk encryption set resource id for the managed image disk."
  returns:
    type: "<xref href=\"com.azure.resourcemanager.compute.models.ImageDataDisk?alt=com.azure.resourcemanager.compute.models.ImageDataDisk&text=ImageDataDisk\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.compute.models.ImageDataDisk.withDiskSizeGB(java.lang.Integer)"
  fullName: "com.azure.resourcemanager.compute.models.ImageDataDisk.withDiskSizeGB(Integer diskSizeGB)"
  name: "withDiskSizeGB(Integer diskSizeGB)"
  nameWithType: "ImageDataDisk.withDiskSizeGB(Integer diskSizeGB)"
  summary: "Set the disk<wbr>SizeGB property: Specifies the size of empty data disks in gigabytes."
  overridden: "com.azure.resourcemanager.compute.models.ImageDisk.withDiskSizeGB(java.lang.Integer)"
  parameters:
  - name: "diskSizeGB"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ImageDataDisk withDiskSizeGB(Integer diskSizeGB)"
  desc: "Set the diskSizeGB property: Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB."
  returns:
    type: "<xref href=\"com.azure.resourcemanager.compute.models.ImageDataDisk?alt=com.azure.resourcemanager.compute.models.ImageDataDisk&text=ImageDataDisk\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.compute.models.ImageDataDisk.withLun(int)"
  fullName: "com.azure.resourcemanager.compute.models.ImageDataDisk.withLun(int lun)"
  name: "withLun(int lun)"
  nameWithType: "ImageDataDisk.withLun(int lun)"
  summary: "Set the lun property: Specifies the logical unit number of the data disk."
  parameters:
  - description: "the lun value to set."
    name: "lun"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ImageDataDisk withLun(int lun)"
  desc: "Set the lun property: Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM."
  returns:
    description: "the ImageDataDisk object itself."
    type: "<xref href=\"com.azure.resourcemanager.compute.models.ImageDataDisk?alt=com.azure.resourcemanager.compute.models.ImageDataDisk&text=ImageDataDisk\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.compute.models.ImageDataDisk.withManagedDisk(com.azure.core.management.SubResource)"
  fullName: "com.azure.resourcemanager.compute.models.ImageDataDisk.withManagedDisk(SubResource managedDisk)"
  name: "withManagedDisk(SubResource managedDisk)"
  nameWithType: "ImageDataDisk.withManagedDisk(SubResource managedDisk)"
  summary: "Set the managed<wbr>Disk property: The managed<wbr>Disk."
  overridden: "com.azure.resourcemanager.compute.models.ImageDisk.withManagedDisk(com.azure.core.management.SubResource)"
  parameters:
  - name: "managedDisk"
    type: "<xref href=\"com.azure.core.management.SubResource?alt=com.azure.core.management.SubResource&text=SubResource\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ImageDataDisk withManagedDisk(SubResource managedDisk)"
  desc: "Set the managedDisk property: The managedDisk."
  returns:
    type: "<xref href=\"com.azure.resourcemanager.compute.models.ImageDataDisk?alt=com.azure.resourcemanager.compute.models.ImageDataDisk&text=ImageDataDisk\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.compute.models.ImageDataDisk.withSnapshot(com.azure.core.management.SubResource)"
  fullName: "com.azure.resourcemanager.compute.models.ImageDataDisk.withSnapshot(SubResource snapshot)"
  name: "withSnapshot(SubResource snapshot)"
  nameWithType: "ImageDataDisk.withSnapshot(SubResource snapshot)"
  summary: "Set the snapshot property: The snapshot."
  overridden: "com.azure.resourcemanager.compute.models.ImageDisk.withSnapshot(com.azure.core.management.SubResource)"
  parameters:
  - name: "snapshot"
    type: "<xref href=\"com.azure.core.management.SubResource?alt=com.azure.core.management.SubResource&text=SubResource\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ImageDataDisk withSnapshot(SubResource snapshot)"
  desc: "Set the snapshot property: The snapshot."
  returns:
    type: "<xref href=\"com.azure.resourcemanager.compute.models.ImageDataDisk?alt=com.azure.resourcemanager.compute.models.ImageDataDisk&text=ImageDataDisk\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.compute.models.ImageDataDisk.withStorageAccountType(com.azure.resourcemanager.compute.models.StorageAccountTypes)"
  fullName: "com.azure.resourcemanager.compute.models.ImageDataDisk.withStorageAccountType(StorageAccountTypes storageAccountType)"
  name: "withStorageAccountType(StorageAccountTypes storageAccountType)"
  nameWithType: "ImageDataDisk.withStorageAccountType(StorageAccountTypes storageAccountType)"
  summary: "Set the storage<wbr>Account<wbr>Type property: Specifies the storage account type for the managed disk."
  overridden: "com.azure.resourcemanager.compute.models.ImageDisk.withStorageAccountType(com.azure.resourcemanager.compute.models.StorageAccountTypes)"
  parameters:
  - name: "storageAccountType"
    type: "<xref href=\"com.azure.resourcemanager.compute.models.StorageAccountTypes?alt=com.azure.resourcemanager.compute.models.StorageAccountTypes&text=StorageAccountTypes\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ImageDataDisk withStorageAccountType(StorageAccountTypes storageAccountType)"
  desc: "Set the storageAccountType property: Specifies the storage account type for the managed disk. NOTE: UltraSSD\\_LRS can only be used with data disks, it cannot be used with OS Disk."
  returns:
    type: "<xref href=\"com.azure.resourcemanager.compute.models.ImageDataDisk?alt=com.azure.resourcemanager.compute.models.ImageDataDisk&text=ImageDataDisk\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Describes a data disk."
metadata: {}
package: "com.azure.resourcemanager.compute.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-compute:2.16.0
