### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.deps.transport.amqp.ProtonJExceptionParser"
fullName: "com.microsoft.azure.sdk.iot.deps.transport.amqp.ProtonJExceptionParser"
name: "ProtonJExceptionParser"
nameWithType: "ProtonJExceptionParser"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class ProtonJExceptionParser"
constructors:
- uid: "com.microsoft.azure.sdk.iot.deps.transport.amqp.ProtonJExceptionParser.ProtonJExceptionParser(org.apache.qpid.proton.engine.Event)"
  fullName: "com.microsoft.azure.sdk.iot.deps.transport.amqp.ProtonJExceptionParser.ProtonJExceptionParser(Event event)"
  name: "ProtonJExceptionParser(Event event)"
  nameWithType: "ProtonJExceptionParser.ProtonJExceptionParser(Event event)"
  parameters:
  - name: "event"
    type: "<xref href=\"org.apache.qpid.proton.engine.Event?alt=org.apache.qpid.proton.engine.Event&text=Event\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ProtonJExceptionParser(Event event)"
type: "class"
metadata: {}
package: "com.microsoft.azure.sdk.iot.deps.transport.amqp"
artifact: com.microsoft.azure.sdk.iot:iot-deps:0.12.0
