### YamlMime:JavaType
uid: "com.azure.containers.containerregistry.ContainerRegistryContentClient"
fullName: "com.azure.containers.containerregistry.ContainerRegistryContentClient"
name: "ContainerRegistryContentClient"
nameWithType: "ContainerRegistryContentClient"
summary: "This class provides a client that exposes operations to push and pull images into container registry."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **ContainerRegistryContentClient**"
methods:
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentClient.deleteBlob(java.lang.String)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentClient.deleteBlob(String digest)"
  name: "deleteBlob(String digest)"
  nameWithType: "ContainerRegistryContentClient.deleteBlob(String digest)"
  summary: "Delete the image identified by the given digest"
  parameters:
  - description: "The digest for the given image layer."
    name: "digest"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void deleteBlob(String digest)"
  desc: "Delete the image identified by the given digest\n\n**Code Samples:**\n\n```java\nGetManifestResult manifestResult = contentClient.getManifest(\"latest\");\n\n OciImageManifest manifest = manifestResult.getManifest().toObject(OciImageManifest.class);\n for (OciDescriptor layer : manifest.getLayers()) {\n     contentClient.deleteBlob(layer.getDigest());\n }\n```"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentClient.deleteBlobWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentClient.deleteBlobWithResponse(String digest, Context context)"
  name: "deleteBlobWithResponse(String digest, Context context)"
  nameWithType: "ContainerRegistryContentClient.deleteBlobWithResponse(String digest, Context context)"
  summary: "Delete the image identified by the given digest"
  parameters:
  - description: "The digest for the given image layer."
    name: "digest"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteBlobWithResponse(String digest, Context context)"
  desc: "Delete the image identified by the given digest"
  returns:
    description: "The REST response for the completion."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentClient.deleteManifest(java.lang.String)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentClient.deleteManifest(String digest)"
  name: "deleteManifest(String digest)"
  nameWithType: "ContainerRegistryContentClient.deleteManifest(String digest)"
  summary: "Delete the manifest identified by the given digest."
  parameters:
  - description: "The digest of the manifest."
    name: "digest"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void deleteManifest(String digest)"
  desc: "Delete the manifest identified by the given digest.\n\n**Code Samples:**\n\n```java\nGetManifestResult manifestResult = contentClient.getManifest(\"latest\");\n contentClient.deleteManifest(manifestResult.getDigest());\n```"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentClient.deleteManifestWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentClient.deleteManifestWithResponse(String digest, Context context)"
  name: "deleteManifestWithResponse(String digest, Context context)"
  nameWithType: "ContainerRegistryContentClient.deleteManifestWithResponse(String digest, Context context)"
  summary: "Delete the manifest identified by the given digest."
  parameters:
  - description: "The digest of the manifest."
    name: "digest"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteManifestWithResponse(String digest, Context context)"
  desc: "Delete the manifest identified by the given digest."
  returns:
    description: "The REST response for completion."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentClient.downloadStream(java.lang.String,java.nio.channels.WritableByteChannel)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentClient.downloadStream(String digest, WritableByteChannel channel)"
  name: "downloadStream(String digest, WritableByteChannel channel)"
  nameWithType: "ContainerRegistryContentClient.downloadStream(String digest, WritableByteChannel channel)"
  summary: "Download the blob identified by the given digest."
  parameters:
  - description: "The digest for the given image layer."
    name: "digest"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The channel to write content to."
    name: "channel"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/channels/WritableByteChannel.html\">WritableByteChannel</a>"
  syntax: "public void downloadStream(String digest, WritableByteChannel channel)"
  desc: "Download the blob identified by the given digest.\n\n**Code Samples:**\n\n```java\nPath file = Files.createTempFile(digest, \".tmp\");\n SeekableByteChannel channel = Files.newByteChannel(file, StandardOpenOption.CREATE_NEW, StandardOpenOption.WRITE);\n contentClient.downloadStream(digest, channel);\n```"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentClient.downloadStream(java.lang.String,java.nio.channels.WritableByteChannel,com.azure.core.util.Context)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentClient.downloadStream(String digest, WritableByteChannel channel, Context context)"
  name: "downloadStream(String digest, WritableByteChannel channel, Context context)"
  nameWithType: "ContainerRegistryContentClient.downloadStream(String digest, WritableByteChannel channel, Context context)"
  summary: "Download the blob identified by the given digest."
  parameters:
  - description: "The digest for the given image layer."
    name: "digest"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The channel to write content to."
    name: "channel"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/channels/WritableByteChannel.html\">WritableByteChannel</a>"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void downloadStream(String digest, WritableByteChannel channel, Context context)"
  desc: "Download the blob identified by the given digest."
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentClient.getEndpoint()"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentClient.getEndpoint()"
  name: "getEndpoint()"
  nameWithType: "ContainerRegistryContentClient.getEndpoint()"
  summary: "This method returns the complete registry endpoint."
  syntax: "public String getEndpoint()"
  desc: "This method returns the complete registry endpoint."
  returns:
    description: "The registry endpoint including the authority."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentClient.getManifest(java.lang.String)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentClient.getManifest(String tagOrDigest)"
  name: "getManifest(String tagOrDigest)"
  nameWithType: "ContainerRegistryContentClient.getManifest(String tagOrDigest)"
  summary: "Download the manifest identified by the given tag or digest."
  parameters:
  - description: "Manifest tag or digest."
    name: "tagOrDigest"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public GetManifestResult getManifest(String tagOrDigest)"
  desc: "Download the manifest identified by the given tag or digest.\n\n**Code Samples:**\n\nDownload manifest with tag:\n\n```java\nGetManifestResult latestResult = contentClient.getManifest(\"latest\");\n if (ManifestMediaType.DOCKER_MANIFEST.equals(latestResult.getManifestMediaType())\n     || ManifestMediaType.OCI_IMAGE_MANIFEST.equals(latestResult.getManifestMediaType())) {\n     OciImageManifest manifest = latestResult.getManifest().toObject(OciImageManifest.class);\n } else {\n     throw new IllegalArgumentException(\"Unexpected manifest type: \" + latestResult.getManifestMediaType());\n }\n```\n\nDownload manifest with digest:\n\n```java\nGetManifestResult getManifestResult = contentClient.getManifest(\n     \"sha256:6581596932dc735fd0df8cc240e6c28845a66829126da5ce25b983cf244e2311\");\n```"
  returns:
    description: "The manifest identified by the given tag or digest."
    type: "<xref href=\"com.azure.containers.containerregistry.models.GetManifestResult?alt=com.azure.containers.containerregistry.models.GetManifestResult&text=GetManifestResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentClient.getManifestWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentClient.getManifestWithResponse(String tagOrDigest, Context context)"
  name: "getManifestWithResponse(String tagOrDigest, Context context)"
  nameWithType: "ContainerRegistryContentClient.getManifestWithResponse(String tagOrDigest, Context context)"
  summary: "Download the manifest of custom type identified by the given tag or digest."
  parameters:
  - description: "Manifest reference which can be tag or digest."
    name: "tagOrDigest"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<GetManifestResult> getManifestWithResponse(String tagOrDigest, Context context)"
  desc: "Download the manifest of custom type identified by the given tag or digest.\n\n**Code Samples:**\n\n```java\nResponse<GetManifestResult> downloadResponse = contentClient.getManifestWithResponse(\"latest\",\n     Context.NONE);\n System.out.printf(\"Received manifest: digest - %s, response code: %s\\n\", downloadResponse.getValue().getDigest(),\n     downloadResponse.getStatusCode());\n```"
  returns:
    description: "The response for the manifest identified by the given tag or digest."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.GetManifestResult?alt=com.azure.containers.containerregistry.models.GetManifestResult&text=GetManifestResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentClient.getRepositoryName()"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentClient.getRepositoryName()"
  name: "getRepositoryName()"
  nameWithType: "ContainerRegistryContentClient.getRepositoryName()"
  summary: "This method returns the registry's repository on which operations are being performed."
  syntax: "public String getRepositoryName()"
  desc: "This method returns the registry's repository on which operations are being performed."
  returns:
    description: "The name of the repository"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentClient.setManifest(com.azure.containers.containerregistry.models.OciImageManifest,java.lang.String)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentClient.setManifest(OciImageManifest manifest, String tag)"
  name: "setManifest(OciImageManifest manifest, String tag)"
  nameWithType: "ContainerRegistryContentClient.setManifest(OciImageManifest manifest, String tag)"
  summary: "Upload the OCI manifest to the repository."
  parameters:
  - description: "The <xref uid=\"com.azure.containers.containerregistry.models.OciImageManifest\" data-throw-if-not-resolved=\"false\" data-raw-source=\"OciImageManifest\"></xref> that needs to be updated."
    name: "manifest"
    type: "<xref href=\"com.azure.containers.containerregistry.models.OciImageManifest?alt=com.azure.containers.containerregistry.models.OciImageManifest&text=OciImageManifest\" data-throw-if-not-resolved=\"False\" />"
  - description: "Tag to apply on uploaded manifest. If <code>null</code> is passed, no tags will be applied."
    name: "tag"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public SetManifestResult setManifest(OciImageManifest manifest, String tag)"
  desc: "Upload the OCI manifest to the repository.\n\n**Code Samples:**\n\n```java\ncontentClient.setManifest(manifest, \"v1\");\n```"
  returns:
    description: "upload result."
    type: "<xref href=\"com.azure.containers.containerregistry.models.SetManifestResult?alt=com.azure.containers.containerregistry.models.SetManifestResult&text=SetManifestResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentClient.setManifestWithResponse(com.azure.containers.containerregistry.models.SetManifestOptions,com.azure.core.util.Context)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentClient.setManifestWithResponse(SetManifestOptions options, Context context)"
  name: "setManifestWithResponse(SetManifestOptions options, Context context)"
  nameWithType: "ContainerRegistryContentClient.setManifestWithResponse(SetManifestOptions options, Context context)"
  summary: "Uploads a manifest to the repository."
  parameters:
  - description: "The options for the upload manifest operation."
    name: "options"
    type: "<xref href=\"com.azure.containers.containerregistry.models.SetManifestOptions?alt=com.azure.containers.containerregistry.models.SetManifestOptions&text=SetManifestOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SetManifestResult> setManifestWithResponse(SetManifestOptions options, Context context)"
  desc: "Uploads a manifest to the repository.\n\n**Code Samples:**\n\n```java\nSetManifestOptions options = new SetManifestOptions(manifestList, DOCKER_MANIFEST_LIST_TYPE);\n\n Response<SetManifestResult> response = contentClient.setManifestWithResponse(options, Context.NONE);\n System.out.println(\"Manifest uploaded, digest - \" + response.getValue().getDigest());\n```"
  returns:
    description: "The rest response containing the upload result."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.SetManifestResult?alt=com.azure.containers.containerregistry.models.SetManifestResult&text=SetManifestResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentClient.uploadBlob(com.azure.core.util.BinaryData)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentClient.uploadBlob(BinaryData content)"
  name: "uploadBlob(BinaryData content)"
  nameWithType: "ContainerRegistryContentClient.uploadBlob(BinaryData content)"
  summary: "Uploads a blob to the repository in chunks of 4MB."
  parameters:
  - description: "The blob content. The content may be loaded into memory depending on how <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> is created."
    name: "content"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public UploadRegistryBlobResult uploadBlob(BinaryData content)"
  desc: "Uploads a blob to the repository in chunks of 4MB.\n\n**Code Samples**\n\n```java\nBinaryData configContent = BinaryData.fromObject(Collections.singletonMap(\"hello\", \"world\"));\n\n UploadRegistryBlobResult uploadResult = contentClient.uploadBlob(configContent);\n System.out.printf(\"Uploaded blob: digest - '%s', size - %s\\n\", uploadResult.getDigest(), uploadResult.getSizeInBytes());\n```\n\n```java\nBinaryData configContent = BinaryData.fromObject(Collections.singletonMap(\"hello\", \"world\"));\n\n try {\n     UploadRegistryBlobResult uploadResult = contentClient.uploadBlob(configContent);\n     System.out.printf(\"Uploaded blob: digest - '%s', size - %s\\n\", uploadResult.getDigest(),\n         uploadResult.getSizeInBytes());\n } catch (HttpResponseException ex) {\n     if (ex.getValue() instanceof ResponseError) {\n         ResponseError error = (ResponseError) ex.getValue();\n         System.out.printf(\"Upload failed: code '%s'\\n\", error.getCode());\n         if (\"BLOB_UPLOAD_INVALID\".equals(error.getCode())) {\n             System.out.println(\"Transient upload issue, starting upload over\");\n             // retry upload\n         }\n     }\n }\n```"
  returns:
    description: "The upload response."
    type: "<xref href=\"com.azure.containers.containerregistry.models.UploadRegistryBlobResult?alt=com.azure.containers.containerregistry.models.UploadRegistryBlobResult&text=UploadRegistryBlobResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentClient.uploadBlob(com.azure.core.util.BinaryData,com.azure.core.util.Context)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentClient.uploadBlob(BinaryData content, Context context)"
  name: "uploadBlob(BinaryData content, Context context)"
  nameWithType: "ContainerRegistryContentClient.uploadBlob(BinaryData content, Context context)"
  summary: "Uploads a blob to the repository in chunks of 4MB."
  parameters:
  - description: "The blob content."
    name: "content"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public UploadRegistryBlobResult uploadBlob(BinaryData content, Context context)"
  desc: "Uploads a blob to the repository in chunks of 4MB.\n\n**Code Samples**\n\n```java\nBinaryData content = BinaryData.fromFile(Paths.get(\"artifact.tar.gz\", CHUNK_SIZE));\n UploadRegistryBlobResult uploadResult = contentClient.uploadBlob(content, Context.NONE);\n System.out.printf(\"Uploaded blob: digest - '%s', size - %s\\n\",\n     uploadResult.getDigest(), uploadResult.getSizeInBytes());\n```"
  returns:
    description: "The upload response."
    type: "<xref href=\"com.azure.containers.containerregistry.models.UploadRegistryBlobResult?alt=com.azure.containers.containerregistry.models.UploadRegistryBlobResult&text=UploadRegistryBlobResult\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "This class provides a client that exposes operations to push and pull images into container registry. It exposes methods that upload, download and delete artifacts from the registry i.e. images and manifests.\n\nView <xref uid=\"com.azure.containers.containerregistry.ContainerRegistryContentClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"this\"></xref> for additional ways to construct the client."
metadata: {}
package: "com.azure.containers.containerregistry"
artifact: com.azure:azure-containers-containerregistry:1.2.9
