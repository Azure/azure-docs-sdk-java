### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.build(String accountName, BuildJobParameters parameters)
  name: build(String accountName, BuildJobParameters parameters)
  nameWithType: Jobs.build(String accountName, BuildJobParameters parameters)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters to build a job. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.BuildJobParameters?alt=com.microsoft.azure.management.datalake.analytics.models.BuildJobParameters&text=BuildJobParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the JobInformation object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformation&text=JobInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Builds (compiles) the specified job in the specified Data Lake Analytics account for job correctness and validation.</p>

    <p></p>
  syntax: public JobInformation build(String accountName, BuildJobParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.build(String,BuildJobParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.buildAsync(String accountName, BuildJobParameters parameters)
  name: buildAsync(String accountName, BuildJobParameters parameters)
  nameWithType: Jobs.buildAsync(String accountName, BuildJobParameters parameters)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters to build a job. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.BuildJobParameters?alt=com.microsoft.azure.management.datalake.analytics.models.BuildJobParameters&text=BuildJobParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the JobInformation object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformation&text=JobInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Builds (compiles) the specified job in the specified Data Lake Analytics account for job correctness and validation.</p>

    <p></p>
  syntax: public Observable<JobInformation> buildAsync(String accountName, BuildJobParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.buildAsync(String,BuildJobParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.buildAsync(String accountName, BuildJobParameters parameters, final ServiceCallback<JobInformation> serviceCallback)
  name: buildAsync(String accountName, BuildJobParameters parameters, final ServiceCallback<JobInformation> serviceCallback)
  nameWithType: Jobs.buildAsync(String accountName, BuildJobParameters parameters, final ServiceCallback<JobInformation> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters to build a job. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.BuildJobParameters?alt=com.microsoft.azure.management.datalake.analytics.models.BuildJobParameters&text=BuildJobParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformation&text=JobInformation" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformation&text=JobInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Builds (compiles) the specified job in the specified Data Lake Analytics account for job correctness and validation.</p>

    <p></p>
  syntax: public ServiceFuture<JobInformation> buildAsync(String accountName, BuildJobParameters parameters, final ServiceCallback<JobInformation> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.buildAsync(String,BuildJobParameters,final ServiceCallback<JobInformation>)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.buildWithServiceResponseAsync(String accountName, BuildJobParameters parameters)
  name: buildWithServiceResponseAsync(String accountName, BuildJobParameters parameters)
  nameWithType: Jobs.buildWithServiceResponseAsync(String accountName, BuildJobParameters parameters)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters to build a job. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.BuildJobParameters?alt=com.microsoft.azure.management.datalake.analytics.models.BuildJobParameters&text=BuildJobParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the JobInformation object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformation&text=JobInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Builds (compiles) the specified job in the specified Data Lake Analytics account for job correctness and validation.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<JobInformation>> buildWithServiceResponseAsync(String accountName, BuildJobParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.buildWithServiceResponseAsync(String,BuildJobParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.cancel(String accountName, UUID jobIdentity)
  name: cancel(String accountName, UUID jobIdentity)
  nameWithType: Jobs.cancel(String accountName, UUID jobIdentity)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>JobInfo ID to cancel. </p>
    name: jobIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Cancels the running job specified by the job ID.</p>

    <p></p>
  syntax: public void cancel(String accountName, UUID jobIdentity)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.cancel(String,UUID)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.cancelAsync(String accountName, UUID jobIdentity)
  name: cancelAsync(String accountName, UUID jobIdentity)
  nameWithType: Jobs.cancelAsync(String accountName, UUID jobIdentity)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>JobInfo ID to cancel. </p>
    name: jobIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Cancels the running job specified by the job ID.</p>

    <p></p>
  syntax: public Observable<Void> cancelAsync(String accountName, UUID jobIdentity)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.cancelAsync(String,UUID)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.cancelAsync(String accountName, UUID jobIdentity, final ServiceCallback<Void> serviceCallback)
  name: cancelAsync(String accountName, UUID jobIdentity, final ServiceCallback<Void> serviceCallback)
  nameWithType: Jobs.cancelAsync(String accountName, UUID jobIdentity, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>JobInfo ID to cancel. </p>
    name: jobIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Cancels the running job specified by the job ID.</p>

    <p></p>
  syntax: public ServiceFuture<Void> cancelAsync(String accountName, UUID jobIdentity, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.cancelAsync(String,UUID,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.cancelWithServiceResponseAsync(String accountName, UUID jobIdentity)
  name: cancelWithServiceResponseAsync(String accountName, UUID jobIdentity)
  nameWithType: Jobs.cancelWithServiceResponseAsync(String accountName, UUID jobIdentity)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>JobInfo ID to cancel. </p>
    name: jobIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Cancels the running job specified by the job ID.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> cancelWithServiceResponseAsync(String accountName, UUID jobIdentity)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.cancelWithServiceResponseAsync(String,UUID)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.create(String accountName, UUID jobIdentity, CreateJobParameters parameters)
  name: create(String accountName, UUID jobIdentity, CreateJobParameters parameters)
  nameWithType: Jobs.create(String accountName, UUID jobIdentity, CreateJobParameters parameters)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The job ID (a GUID) for the job being submitted. </p>
    name: jobIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters to submit a job. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.CreateJobParameters?alt=com.microsoft.azure.management.datalake.analytics.models.CreateJobParameters&text=CreateJobParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the JobInformation object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformation&text=JobInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Submits a job to the specified Data Lake Analytics account.</p>

    <p></p>
  syntax: public JobInformation create(String accountName, UUID jobIdentity, CreateJobParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.create(String,UUID,CreateJobParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.createAsync(String accountName, UUID jobIdentity, CreateJobParameters parameters)
  name: createAsync(String accountName, UUID jobIdentity, CreateJobParameters parameters)
  nameWithType: Jobs.createAsync(String accountName, UUID jobIdentity, CreateJobParameters parameters)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The job ID (a GUID) for the job being submitted. </p>
    name: jobIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters to submit a job. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.CreateJobParameters?alt=com.microsoft.azure.management.datalake.analytics.models.CreateJobParameters&text=CreateJobParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the JobInformation object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformation&text=JobInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Submits a job to the specified Data Lake Analytics account.</p>

    <p></p>
  syntax: public Observable<JobInformation> createAsync(String accountName, UUID jobIdentity, CreateJobParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.createAsync(String,UUID,CreateJobParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.createAsync(String accountName, UUID jobIdentity, CreateJobParameters parameters, final ServiceCallback<JobInformation> serviceCallback)
  name: createAsync(String accountName, UUID jobIdentity, CreateJobParameters parameters, final ServiceCallback<JobInformation> serviceCallback)
  nameWithType: Jobs.createAsync(String accountName, UUID jobIdentity, CreateJobParameters parameters, final ServiceCallback<JobInformation> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The job ID (a GUID) for the job being submitted. </p>
    name: jobIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters to submit a job. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.CreateJobParameters?alt=com.microsoft.azure.management.datalake.analytics.models.CreateJobParameters&text=CreateJobParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformation&text=JobInformation" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformation&text=JobInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Submits a job to the specified Data Lake Analytics account.</p>

    <p></p>
  syntax: public ServiceFuture<JobInformation> createAsync(String accountName, UUID jobIdentity, CreateJobParameters parameters, final ServiceCallback<JobInformation> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.createAsync(String,UUID,CreateJobParameters,final ServiceCallback<JobInformation>)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.createWithServiceResponseAsync(String accountName, UUID jobIdentity, CreateJobParameters parameters)
  name: createWithServiceResponseAsync(String accountName, UUID jobIdentity, CreateJobParameters parameters)
  nameWithType: Jobs.createWithServiceResponseAsync(String accountName, UUID jobIdentity, CreateJobParameters parameters)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The job ID (a GUID) for the job being submitted. </p>
    name: jobIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters to submit a job. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.CreateJobParameters?alt=com.microsoft.azure.management.datalake.analytics.models.CreateJobParameters&text=CreateJobParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the JobInformation object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformation&text=JobInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Submits a job to the specified Data Lake Analytics account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<JobInformation>> createWithServiceResponseAsync(String accountName, UUID jobIdentity, CreateJobParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.createWithServiceResponseAsync(String,UUID,CreateJobParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.get(String accountName, UUID jobIdentity)
  name: get(String accountName, UUID jobIdentity)
  nameWithType: Jobs.get(String accountName, UUID jobIdentity)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>JobInfo ID. </p>
    name: jobIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the JobInformation object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformation&text=JobInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the job information for the specified job ID.</p>

    <p></p>
  syntax: public JobInformation get(String accountName, UUID jobIdentity)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.get(String,UUID)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.getAsync(String accountName, UUID jobIdentity)
  name: getAsync(String accountName, UUID jobIdentity)
  nameWithType: Jobs.getAsync(String accountName, UUID jobIdentity)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>JobInfo ID. </p>
    name: jobIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the JobInformation object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformation&text=JobInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the job information for the specified job ID.</p>

    <p></p>
  syntax: public Observable<JobInformation> getAsync(String accountName, UUID jobIdentity)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.getAsync(String,UUID)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.getAsync(String accountName, UUID jobIdentity, final ServiceCallback<JobInformation> serviceCallback)
  name: getAsync(String accountName, UUID jobIdentity, final ServiceCallback<JobInformation> serviceCallback)
  nameWithType: Jobs.getAsync(String accountName, UUID jobIdentity, final ServiceCallback<JobInformation> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>JobInfo ID. </p>
    name: jobIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformation&text=JobInformation" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformation&text=JobInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the job information for the specified job ID.</p>

    <p></p>
  syntax: public ServiceFuture<JobInformation> getAsync(String accountName, UUID jobIdentity, final ServiceCallback<JobInformation> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.getAsync(String,UUID,final ServiceCallback<JobInformation>)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.getDebugDataPath(String accountName, UUID jobIdentity)
  name: getDebugDataPath(String accountName, UUID jobIdentity)
  nameWithType: Jobs.getDebugDataPath(String accountName, UUID jobIdentity)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>JobInfo ID. </p>
    name: jobIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the JobDataPath object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.JobDataPath?alt=com.microsoft.azure.management.datalake.analytics.models.JobDataPath&text=JobDataPath" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the job debug data information specified by the job ID.</p>

    <p></p>
  syntax: public JobDataPath getDebugDataPath(String accountName, UUID jobIdentity)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.getDebugDataPath(String,UUID)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.getDebugDataPathAsync(String accountName, UUID jobIdentity)
  name: getDebugDataPathAsync(String accountName, UUID jobIdentity)
  nameWithType: Jobs.getDebugDataPathAsync(String accountName, UUID jobIdentity)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>JobInfo ID. </p>
    name: jobIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the JobDataPath object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobDataPath?alt=com.microsoft.azure.management.datalake.analytics.models.JobDataPath&text=JobDataPath" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the job debug data information specified by the job ID.</p>

    <p></p>
  syntax: public Observable<JobDataPath> getDebugDataPathAsync(String accountName, UUID jobIdentity)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.getDebugDataPathAsync(String,UUID)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.getDebugDataPathAsync(String accountName, UUID jobIdentity, final ServiceCallback<JobDataPath> serviceCallback)
  name: getDebugDataPathAsync(String accountName, UUID jobIdentity, final ServiceCallback<JobDataPath> serviceCallback)
  nameWithType: Jobs.getDebugDataPathAsync(String accountName, UUID jobIdentity, final ServiceCallback<JobDataPath> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>JobInfo ID. </p>
    name: jobIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobDataPath?alt=com.microsoft.azure.management.datalake.analytics.models.JobDataPath&text=JobDataPath" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobDataPath?alt=com.microsoft.azure.management.datalake.analytics.models.JobDataPath&text=JobDataPath" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the job debug data information specified by the job ID.</p>

    <p></p>
  syntax: public ServiceFuture<JobDataPath> getDebugDataPathAsync(String accountName, UUID jobIdentity, final ServiceCallback<JobDataPath> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.getDebugDataPathAsync(String,UUID,final ServiceCallback<JobDataPath>)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.getDebugDataPathWithServiceResponseAsync(String accountName, UUID jobIdentity)
  name: getDebugDataPathWithServiceResponseAsync(String accountName, UUID jobIdentity)
  nameWithType: Jobs.getDebugDataPathWithServiceResponseAsync(String accountName, UUID jobIdentity)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>JobInfo ID. </p>
    name: jobIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the JobDataPath object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobDataPath?alt=com.microsoft.azure.management.datalake.analytics.models.JobDataPath&text=JobDataPath" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the job debug data information specified by the job ID.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<JobDataPath>> getDebugDataPathWithServiceResponseAsync(String accountName, UUID jobIdentity)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.getDebugDataPathWithServiceResponseAsync(String,UUID)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.getStatistics(String accountName, UUID jobIdentity)
  name: getStatistics(String accountName, UUID jobIdentity)
  nameWithType: Jobs.getStatistics(String accountName, UUID jobIdentity)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Job Information ID. </p>
    name: jobIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the JobStatistics object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.JobStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.JobStatistics&text=JobStatistics" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets statistics of the specified job.</p>

    <p></p>
  syntax: public JobStatistics getStatistics(String accountName, UUID jobIdentity)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.getStatistics(String,UUID)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.getStatisticsAsync(String accountName, UUID jobIdentity)
  name: getStatisticsAsync(String accountName, UUID jobIdentity)
  nameWithType: Jobs.getStatisticsAsync(String accountName, UUID jobIdentity)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Job Information ID. </p>
    name: jobIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the JobStatistics object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.JobStatistics&text=JobStatistics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets statistics of the specified job.</p>

    <p></p>
  syntax: public Observable<JobStatistics> getStatisticsAsync(String accountName, UUID jobIdentity)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.getStatisticsAsync(String,UUID)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.getStatisticsAsync(String accountName, UUID jobIdentity, final ServiceCallback<JobStatistics> serviceCallback)
  name: getStatisticsAsync(String accountName, UUID jobIdentity, final ServiceCallback<JobStatistics> serviceCallback)
  nameWithType: Jobs.getStatisticsAsync(String accountName, UUID jobIdentity, final ServiceCallback<JobStatistics> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Job Information ID. </p>
    name: jobIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.JobStatistics&text=JobStatistics" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.JobStatistics&text=JobStatistics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets statistics of the specified job.</p>

    <p></p>
  syntax: public ServiceFuture<JobStatistics> getStatisticsAsync(String accountName, UUID jobIdentity, final ServiceCallback<JobStatistics> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.getStatisticsAsync(String,UUID,final ServiceCallback<JobStatistics>)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.getStatisticsWithServiceResponseAsync(String accountName, UUID jobIdentity)
  name: getStatisticsWithServiceResponseAsync(String accountName, UUID jobIdentity)
  nameWithType: Jobs.getStatisticsWithServiceResponseAsync(String accountName, UUID jobIdentity)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Job Information ID. </p>
    name: jobIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the JobStatistics object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.JobStatistics&text=JobStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets statistics of the specified job.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<JobStatistics>> getStatisticsWithServiceResponseAsync(String accountName, UUID jobIdentity)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.getStatisticsWithServiceResponseAsync(String,UUID)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.getWithServiceResponseAsync(String accountName, UUID jobIdentity)
  name: getWithServiceResponseAsync(String accountName, UUID jobIdentity)
  nameWithType: Jobs.getWithServiceResponseAsync(String accountName, UUID jobIdentity)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>JobInfo ID. </p>
    name: jobIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the JobInformation object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformation&text=JobInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the job information for the specified job ID.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<JobInformation>> getWithServiceResponseAsync(String accountName, UUID jobIdentity)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.getWithServiceResponseAsync(String,UUID)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.list(final String accountName)
  name: list(final String accountName)
  nameWithType: Jobs.list(final String accountName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;JobInformationBasic&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic&text=JobInformationBasic" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the jobs, if any, associated with the specified Data Lake Analytics account. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public PagedList<JobInformationBasic> list(final String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.list(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.list(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: list(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Jobs.list(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;JobInformationBasic&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic&text=JobInformationBasic" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the jobs, if any, associated with the specified Data Lake Analytics account. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public PagedList<JobInformationBasic> list(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.list(final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.listAsync(final String accountName)
  name: listAsync(final String accountName)
  nameWithType: Jobs.listAsync(final String accountName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;JobInformationBasic&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic&text=JobInformationBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs, if any, associated with the specified Data Lake Analytics account. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<Page<JobInformationBasic>> listAsync(final String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.listAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.listAsync(final String accountName, final ListOperationCallback<JobInformationBasic> serviceCallback)
  name: listAsync(final String accountName, final ListOperationCallback<JobInformationBasic> serviceCallback)
  nameWithType: Jobs.listAsync(final String accountName, final ListOperationCallback<JobInformationBasic> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic&text=JobInformationBasic" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic&text=JobInformationBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs, if any, associated with the specified Data Lake Analytics account. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<JobInformationBasic>> listAsync(final String accountName, final ListOperationCallback<JobInformationBasic> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.listAsync(final String,final ListOperationCallback<JobInformationBasic>)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.listAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Jobs.listAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;JobInformationBasic&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic&text=JobInformationBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs, if any, associated with the specified Data Lake Analytics account. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<Page<JobInformationBasic>> listAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.listAsync(final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.listAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<JobInformationBasic> serviceCallback)
  name: listAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<JobInformationBasic> serviceCallback)
  nameWithType: Jobs.listAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<JobInformationBasic> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic&text=JobInformationBasic" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic&text=JobInformationBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs, if any, associated with the specified Data Lake Analytics account. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<JobInformationBasic>> listAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<JobInformationBasic> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.listAsync(final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<JobInformationBasic>)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.listNext(final String nextPageLink)
  name: listNext(final String nextPageLink)
  nameWithType: Jobs.listNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;JobInformationBasic&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic&text=JobInformationBasic" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the jobs, if any, associated with the specified Data Lake Analytics account. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public PagedList<JobInformationBasic> listNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.listNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.listNextAsync(final String nextPageLink)
  name: listNextAsync(final String nextPageLink)
  nameWithType: Jobs.listNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;JobInformationBasic&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic&text=JobInformationBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs, if any, associated with the specified Data Lake Analytics account. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<Page<JobInformationBasic>> listNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.listNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.listNextAsync(final String nextPageLink, final ServiceFuture<List<JobInformationBasic>> serviceFuture, final ListOperationCallback<JobInformationBasic> serviceCallback)
  name: listNextAsync(final String nextPageLink, final ServiceFuture<List<JobInformationBasic>> serviceFuture, final ListOperationCallback<JobInformationBasic> serviceCallback)
  nameWithType: Jobs.listNextAsync(final String nextPageLink, final ServiceFuture<List<JobInformationBasic>> serviceFuture, final ListOperationCallback<JobInformationBasic> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic&text=JobInformationBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic&text=JobInformationBasic" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic&text=JobInformationBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs, if any, associated with the specified Data Lake Analytics account. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<JobInformationBasic>> listNextAsync(final String nextPageLink, final ServiceFuture<List<JobInformationBasic>> serviceFuture, final ListOperationCallback<JobInformationBasic> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.listNextAsync(final String,final ServiceFuture<List<JobInformationBasic>>,final ListOperationCallback<JobInformationBasic>)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.listNextWithServiceResponseAsync(final String nextPageLink)
  name: listNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Jobs.listNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;JobInformationBasic&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic&text=JobInformationBasic" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists the jobs, if any, associated with the specified Data Lake Analytics account. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<JobInformationBasic>>> listNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.listNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.listWithServiceResponseAsync(final String accountName)
  name: listWithServiceResponseAsync(final String accountName)
  nameWithType: Jobs.listWithServiceResponseAsync(final String accountName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;JobInformationBasic&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic&text=JobInformationBasic" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists the jobs, if any, associated with the specified Data Lake Analytics account. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<JobInformationBasic>>> listWithServiceResponseAsync(final String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.listWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Jobs.listWithServiceResponseAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listWithServiceResponseAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Jobs.listWithServiceResponseAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;JobInformationBasic&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic?alt=com.microsoft.azure.management.datalake.analytics.models.JobInformationBasic&text=JobInformationBasic" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists the jobs, if any, associated with the specified Data Lake Analytics account. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<JobInformationBasic>>> listWithServiceResponseAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Jobs.listWithServiceResponseAsync(final String,final String,final Integer,final Integer,final String,final String,final Boolean)
nameWithType: Jobs
syntax: public interface Jobs
type: interface
uid: com.microsoft.azure.management.datalake.analytics.Jobs
fullName: com.microsoft.azure.management.datalake.analytics.Jobs
name: Jobs
package: com.microsoft.azure.management.datalake.analytics
summary: <p>An instance of this class provides access to all the operations defined in Jobs. </p>
metadata: {}
