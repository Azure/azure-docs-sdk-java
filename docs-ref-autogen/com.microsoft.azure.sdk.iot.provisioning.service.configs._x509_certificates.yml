### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates
  id: _x509_certificates
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs
  children:
  - com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.getPrimary()
  - com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.getSecondary()
  - com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.X509Certificates()
  - com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.X509Certificates(X509Certificates)
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.yml
  langs:
  - java
  name: X509Certificates
  nameWithType: X509Certificates
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  type: Class
  source:
    remote: &o0
      path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Certificates.java
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-java
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Certificates.java
    startLine: 90
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    <p>Representation of a single Device Provisioning Service X509 Primary and Secondary Certificate.</p>

    <p>this class creates a representation of an X509 certificate. It can receive primary and secondary certificate, but only the primary is mandatory.</p>

    <p>Users must provide the certificate as a<code>String 

        </code> , from a <b>.pem</b> files. This class will encapsulate both in a single <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation" data-throw-if-not-resolved="false">X509Attestation</xref>. The following JSON is an example of the result of this class. <pre><code>{

            "primary": {

                "certificate": "-----BEGIN CERTIFICATE-----\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "-----END CERTIFICATE-----\n";

            },

            "secondary": {

                "certificate": "-----BEGIN CERTIFICATE-----\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "-----END CERTIFICATE-----\n";

            }

        }

        </code></pre></p>

    <p>After send an X509 certificate with success, the provisioning service will return the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificate_info" data-throw-if-not-resolved="false">X509CertificateInfo</xref> for both primary and secondary certificate. User can get these info from this class, and once again, only the primary info is mandatory. The following JSON is an example what info the provisioning service will return for X509. <pre><code>{

            "primary": {

                "info": {

                     "subjectName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",

                     "sha1Thumbprint": "0000000000000000000000000000000000",

                     "sha256Thumbprint": "validEnrollmentGroupId",

                     "issuerName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",

                     "notBeforeUtc": "2017-11-14T12:34:18Z",

                     "notAfterUtc": "2017-11-20T12:34:18Z",

                     "serialNumber": "000000000000000000",

                     "version": 3

                 }

            },

            "secondary": {

                "info": {

                     "subjectName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",

                     "sha1Thumbprint": "0000000000000000000000000000000000",

                     "sha256Thumbprint": "validEnrollmentGroupId",

                     "issuerName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",

                     "notBeforeUtc": "2017-11-14T12:34:18Z",

                     "notAfterUtc": "2017-11-20T12:34:18Z",

                     "serialNumber": "000000000000000000",

                     "version": 3

                 }

            }

        }

        </code></pre></p>

    <p></p>
  syntax: &o1
    content: public class X509Certificates
  inheritance:
  - java.lang.Object
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.getPrimary()
  id: getPrimary()
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.yml
  langs:
  - java
  name: getPrimary()
  nameWithType: X509Certificates.getPrimary()
  fullName: X509CertificateWithInfo com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimary()
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.getPrimary*
  type: Method
  source:
    remote: *o0
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Certificates.java
    startLine: 179
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    <p>Getter for the primary.</p>

    <p></p>
  syntax:
    content: public X509CertificateWithInfo getPrimary()
    return:
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificate_with_info
      description: >-
        <p>the<code>String 

            </code> with the stored primary. It cannot be<code>null 

            </code> . </p>
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.getSecondary()
  id: getSecondary()
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.yml
  langs:
  - java
  name: getSecondary()
  nameWithType: X509Certificates.getSecondary()
  fullName: X509CertificateWithInfo com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondary()
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.getSecondary*
  type: Method
  source:
    remote: *o0
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Certificates.java
    startLine: 190
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    <p>Getter for the secondary.</p>

    <p></p>
  syntax:
    content: public X509CertificateWithInfo getSecondary()
    return:
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificate_with_info
      description: >-
        <p>the<code>String 

            </code> with the stored secondary. It can be<code>null 

            </code> . </p>
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.X509Certificates()
  id: X509Certificates()
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.yml
  langs:
  - java
  name: X509Certificates()
  nameWithType: X509Certificates.X509Certificates()
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.X509Certificates()
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.X509Certificates*
  type: Constructor
  source:
    remote: *o0
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Certificates.java
    startLine: 204
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    <p>Empty constructor</p>

    <p>Used only by the tools that will deserialize this class. </p>
  syntax:
    content: protected X509Certificates()
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.X509Certificates(X509Certificates)
  id: X509Certificates(X509Certificates)
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.yml
  langs:
  - java
  name: X509Certificates(X509Certificates x509Certificates)
  nameWithType: X509Certificates.X509Certificates(X509Certificates x509Certificates)
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.X509Certificates(X509Certificates x509Certificates)
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.X509Certificates*
  type: Constructor
  source:
    remote: *o0
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Certificates.java
    startLine: 157
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    <p>Constructor [COPY]</p>

    <p>Creates a new instance of the x509Certificates copping the content of the provided one.</p>

    <p></p>
  syntax:
    content: public X509Certificates(X509Certificates x509Certificates)
    parameters:
    - id: x509Certificates
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates
      description: >-
        <p>the original<code>X509Certificates 

            </code> to copy. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>if the provided x509Certificates is null or if its primary certificate is null. </p>
references:
- uid: 3c87bd19
  spec.java:
  - name: IllegalArgumentException
    fullName: IllegalArgumentException
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.X509Certificates*
  name: X509Certificates
  nameWithType: X509Certificates.X509Certificates
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.X509Certificates
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.getPrimary*
  name: getPrimary
  nameWithType: X509Certificates.getPrimary
  fullName: X509CertificateWithInfo com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimary
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.getSecondary*
  name: getSecondary
  nameWithType: X509Certificates.getSecondary
  fullName: X509CertificateWithInfo com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondary
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificate_with_info
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificate_with_info.yml
  name: X509CertificateWithInfo
  nameWithType: X509CertificateWithInfo
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo
  type: Class
  summary: >-
    <p>Representation of a single Device Provisioning Service X509 Certificate with its info.</p>

    <p>this class creates a representation of an X509 certificate that can contains the certificate, the info of the certificate or both.</p>

    <p>To create this class, users must provide the certificate as a<code>String 

        </code> , from a <b>.pem</b> or <b>.cert</b> files.</p>

    <p>The following JSON is an example of the result of this class. <pre><code>{

            "certificate": "-----BEGIN CERTIFICATE-----\n" +

                           "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                           "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                           "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                           "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                           "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                           "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                           "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                           "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                           "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                           "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                           "-----END CERTIFICATE-----\n";

        }

        </code></pre></p>

    <p>After send an X509 certificate to the provisioning service, it will return the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificate_info" data-throw-if-not-resolved="false">X509CertificateInfo</xref>. User can get this info from this class,</p>

    <p>The following JSON is an example what info the provisioning service will return for X509. <pre><code>{

            "info": {

                 "subjectName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",

                 "sha1Thumbprint": "0000000000000000000000000000000000",

                 "sha256Thumbprint": "validEnrollmentGroupId",

                 "issuerName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",

                 "notBeforeUtc": "2017-11-14T12:34:18Z",

                 "notAfterUtc": "2017-11-20T12:34:18Z",

                 "serialNumber": "000000000000000000",

                 "version": 3

            }

        }

        </code></pre></p>

    <p></p>
  syntax:
    content: public class X509CertificateWithInfo
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificates.yml
  name: X509Certificates
  nameWithType: X509Certificates
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  type: Class
  summary: >-
    <p>Representation of a single Device Provisioning Service X509 Primary and Secondary Certificate.</p>

    <p>this class creates a representation of an X509 certificate. It can receive primary and secondary certificate, but only the primary is mandatory.</p>

    <p>Users must provide the certificate as a<code>String 

        </code> , from a <b>.pem</b> files. This class will encapsulate both in a single <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation" data-throw-if-not-resolved="false">X509Attestation</xref>. The following JSON is an example of the result of this class. <pre><code>{

            "primary": {

                "certificate": "-----BEGIN CERTIFICATE-----\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "-----END CERTIFICATE-----\n";

            },

            "secondary": {

                "certificate": "-----BEGIN CERTIFICATE-----\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +

                               "-----END CERTIFICATE-----\n";

            }

        }

        </code></pre></p>

    <p>After send an X509 certificate with success, the provisioning service will return the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificate_info" data-throw-if-not-resolved="false">X509CertificateInfo</xref> for both primary and secondary certificate. User can get these info from this class, and once again, only the primary info is mandatory. The following JSON is an example what info the provisioning service will return for X509. <pre><code>{

            "primary": {

                "info": {

                     "subjectName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",

                     "sha1Thumbprint": "0000000000000000000000000000000000",

                     "sha256Thumbprint": "validEnrollmentGroupId",

                     "issuerName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",

                     "notBeforeUtc": "2017-11-14T12:34:18Z",

                     "notAfterUtc": "2017-11-20T12:34:18Z",

                     "serialNumber": "000000000000000000",

                     "version": 3

                 }

            },

            "secondary": {

                "info": {

                     "subjectName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",

                     "sha1Thumbprint": "0000000000000000000000000000000000",

                     "sha256Thumbprint": "validEnrollmentGroupId",

                     "issuerName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",

                     "notBeforeUtc": "2017-11-14T12:34:18Z",

                     "notAfterUtc": "2017-11-20T12:34:18Z",

                     "serialNumber": "000000000000000000",

                     "version": 3

                 }

            }

        }

        </code></pre></p>

    <p></p>
  syntax: *o1
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.yml
  name: X509Attestation
  nameWithType: X509Attestation
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation
  type: Class
  summary: >-
    <p>Representation of a single Device Provisioning Service X509 <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._attestation" data-throw-if-not-resolved="false">Attestation</xref>.</p>

    <p>The provisioning service supports Device Identifier Composition Engine, or DICE, as the device attestation mechanism. To use DICE, user must provide the X509 certificate. This class provide the means to create a new attestation for a X509 certificate and return it as an abstract interface <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._attestation" data-throw-if-not-resolved="false">Attestation</xref>.</p>

    <p>An X509 attestation can contains one of the 2 types of certificate:</p>

    <p>

      <variablelist>

        <varlistentry>

          <b>Client or Alias certificate:</b>

        </varlistentry>

        <listitem>

          <p>Called on this class as clientCertificates, this certificate can authenticate a single device. </p>

        </listitem>

      </variablelist>

      <variablelist>

        <varlistentry>

          <b>Signing or Root certificate:</b>

        </varlistentry>

        <listitem>

          <p>Called on this class as rootCertificates, this certificate can create multiple Client certificates to authenticate multiple devices. </p>

        </listitem>

      </variablelist>

    </p>

    <p>The provisioning service allows user to create <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment" data-throw-if-not-resolved="false">Enrollment</xref> and <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment_group" data-throw-if-not-resolved="false">EnrollmentGroup</xref>. For all operations over <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment" data-throw-if-not-resolved="false">Enrollment</xref> with <b>DICE</b>, user must provide a <b>clientCertificates</b>, and for operations over <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._enrollment_group" data-throw-if-not-resolved="false">EnrollmentGroup</xref>, user must provide a <b>rootCertificates</b>.</p>

    <p>For each of this types of certificates, user can provide 2 Certificates, a primary and a secondary. Only the primary is mandatory, the secondary is optional.</p>

    <p>The provisioning service will process the provided certificates, but will never return it back. Instead of it, <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getPrimaryX509CertificateInfo()" data-throw-if-not-resolved="false">getPrimaryX509CertificateInfo()</xref> and <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_attestation.getSecondaryX509CertificateInfo()" data-throw-if-not-resolved="false">getSecondaryX509CertificateInfo()</xref> will return a translated info in the certificate.</p>

    <p></p>
  syntax:
    content: public class X509Attestation extends Attestation
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificate_info
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs._x509_certificate_info.yml
  name: X509CertificateInfo
  nameWithType: X509CertificateInfo
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateInfo
  type: Class
  summary: >-
    <p>Representation of a single X509 Certificate Info for the Device Provisioning Service.</p>

    <p>User receive this info from the provisioning service as result of X509 operations.</p>

    <p>This info contains a set of parameters, The following JSON is an example of the X509 certificate info. <pre><code>{

            "subjectName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",

            "sha1Thumbprint": "0000000000000000000000000000000000",

            "sha256Thumbprint": "validEnrollmentGroupId",

            "issuerName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",

            "notBeforeUtc": "2017-11-14T12:34:182Z",

            "notAfterUtc": "2017-11-20T12:34:183Z",

            "serialNumber": "000000000000000000",

            "version": 3

        }

        </code></pre></p>

    <p></p>
  syntax:
    content: public class X509CertificateInfo
