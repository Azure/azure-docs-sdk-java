### YamlMime:ManagedReference
items:
- uid: com.azure.storage.file.share.ShareFileAsyncClient
  id: ShareFileAsyncClient
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share
  children:
  - com.azure.storage.file.share.ShareFileAsyncClient.abortCopy(java.lang.String)
  - com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse(java.lang.String)
  - com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)
  - com.azure.storage.file.share.ShareFileAsyncClient.beginCopy(java.lang.String,com.azure.storage.file.share.FileSmbProperties,java.lang.String,com.azure.storage.file.share.models.PermissionCopyModeType,java.lang.Boolean,java.lang.Boolean,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.storage.file.share.models.ShareRequestConditions)
  - com.azure.storage.file.share.ShareFileAsyncClient.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration)
  - com.azure.storage.file.share.ShareFileAsyncClient.clearRange(long)
  - com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse(long,long)
  - com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse(long,long,com.azure.storage.file.share.models.ShareRequestConditions)
  - com.azure.storage.file.share.ShareFileAsyncClient.create(long)
  - com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)
  - com.azure.storage.file.share.ShareFileAsyncClient.delete()
  - com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse()
  - com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse(com.azure.storage.file.share.models.ShareRequestConditions)
  - com.azure.storage.file.share.ShareFileAsyncClient.download()
  - com.azure.storage.file.share.ShareFileAsyncClient.downloadToFile(java.lang.String)
  - com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareFileRange)
  - com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions)
  - com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse(com.azure.storage.file.share.models.ShareFileRange,java.lang.Boolean)
  - com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse(com.azure.storage.file.share.models.ShareFileRange,java.lang.Boolean,com.azure.storage.file.share.models.ShareRequestConditions)
  - com.azure.storage.file.share.ShareFileAsyncClient.exists()
  - com.azure.storage.file.share.ShareFileAsyncClient.existsWithResponse()
  - com.azure.storage.file.share.ShareFileAsyncClient.forceCloseAllHandles()
  - com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandle(java.lang.String)
  - com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandleWithResponse(java.lang.String)
  - com.azure.storage.file.share.ShareFileAsyncClient.generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues)
  - com.azure.storage.file.share.ShareFileAsyncClient.getAccountName()
  - com.azure.storage.file.share.ShareFileAsyncClient.getFilePath()
  - com.azure.storage.file.share.ShareFileAsyncClient.getFileUrl()
  - com.azure.storage.file.share.ShareFileAsyncClient.getHttpPipeline()
  - com.azure.storage.file.share.ShareFileAsyncClient.getProperties()
  - com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse()
  - com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse(com.azure.storage.file.share.models.ShareRequestConditions)
  - com.azure.storage.file.share.ShareFileAsyncClient.getServiceVersion()
  - com.azure.storage.file.share.ShareFileAsyncClient.getShareName()
  - com.azure.storage.file.share.ShareFileAsyncClient.getShareSnapshotId()
  - com.azure.storage.file.share.ShareFileAsyncClient.listHandles()
  - com.azure.storage.file.share.ShareFileAsyncClient.listHandles(java.lang.Integer)
  - com.azure.storage.file.share.ShareFileAsyncClient.listRanges()
  - com.azure.storage.file.share.ShareFileAsyncClient.listRanges(com.azure.storage.file.share.models.ShareFileRange)
  - com.azure.storage.file.share.ShareFileAsyncClient.listRanges(com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions)
  - com.azure.storage.file.share.ShareFileAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)
  - com.azure.storage.file.share.ShareFileAsyncClient.setProperties(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String)
  - com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String)
  - com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)
  - com.azure.storage.file.share.ShareFileAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  - com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile(java.lang.String)
  - com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)
  - com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrl(long,long,long,java.lang.String)
  - com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long,long,long,java.lang.String)
  - com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long,long,long,java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)
  - com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Long)
  - com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Long,com.azure.storage.file.share.models.ShareRequestConditions)
  langs:
  - java
  name: ShareFileAsyncClient
  nameWithType: ShareFileAsyncClient
  fullName: com.azure.storage.file.share.ShareFileAsyncClient
  type: Class
  package: com.azure.storage.file.share
  summary: >-
    This class provides a client that contains all the operations for interacting with file in Azure Storage File Service. Operations allowed by the client are creating, copying, uploading, downloading, deleting and listing on a file, retrieving properties, setting metadata and list or force close handles of the file.


    **Instantiating an Asynchronous File Client**


    ```java

    ShareFileAsyncClient client = new ShareFileClientBuilder()
         .connectionString("${connectionString}")
         .endpoint("${endpoint}")
         .buildFileAsyncClient();
    ```


    View <xref uid="com.azure.storage.file.share.ShareFileClientBuilder" data-throw-if-not-resolved="false">this</xref> for additional ways to construct the client.
  syntax:
    content: public class ShareFileAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.file.share.ShareFileAsyncClient.ShareFileAsyncClient(com.azure.storage.file.share.implementation.AzureFileStorageImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.share.ShareServiceVersion)
  id: ShareFileAsyncClient(com.azure.storage.file.share.implementation.AzureFileStorageImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.share.ShareServiceVersion)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: ShareFileAsyncClient(AzureFileStorageImpl azureFileStorageClient, String shareName, String filePath, String snapshot, String accountName, ShareServiceVersion serviceVersion)
  nameWithType: ShareFileAsyncClient.ShareFileAsyncClient(AzureFileStorageImpl azureFileStorageClient, String shareName, String filePath, String snapshot, String accountName, ShareServiceVersion serviceVersion)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.ShareFileAsyncClient(AzureFileStorageImpl azureFileStorageClient, String shareName, String filePath, String snapshot, String accountName, ShareServiceVersion serviceVersion)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.ShareFileAsyncClient*
  type: Constructor
  package: com.azure.storage.file.share
  summary: Creates a ShareFileAsyncClient that sends requests to the storage file at <xref uid="com.azure.storage.file.share.implementation.AzureFileStorageImpl.getUrl*" data-throw-if-not-resolved="false">endpoint</xref>. Each service call goes through the <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">pipeline</xref> in the `client`.
  syntax:
    content: " ShareFileAsyncClient(AzureFileStorageImpl azureFileStorageClient, String shareName, String filePath, String snapshot, String accountName, ShareServiceVersion serviceVersion)"
    parameters:
    - id: azureFileStorageClient
      type: com.azure.storage.file.share.implementation.AzureFileStorageImpl
      description: Client that interacts with the service interfaces
    - id: shareName
      type: java.lang.String
      description: Name of the share
    - id: filePath
      type: java.lang.String
      description: Path to the file
    - id: snapshot
      type: java.lang.String
      description: The snapshot of the share
    - id: accountName
      type: java.lang.String
    - id: serviceVersion
      type: com.azure.storage.file.share.ShareServiceVersion
- uid: com.azure.storage.file.share.ShareFileAsyncClient.abortCopy(java.lang.String)
  id: abortCopy(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: abortCopy(String copyId)
  nameWithType: ShareFileAsyncClient.abortCopy(String copyId)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.abortCopy(String copyId)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.abortCopy*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Aborts a pending Copy File operation, and leaves a destination file with zero length and full metadata.


    **Code Samples**


    Abort copy file from copy id("someCopyId")


    ```java

    shareFileAsyncClient.abortCopy("someCopyId")
         .doOnSuccess(response -> System.out.println("Abort copying the file completed."));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-file
  syntax:
    content: public Mono<Void> abortCopy(String copyId)
    parameters:
    - id: copyId
      type: java.lang.String
      description: Specifies the copy id which has copying pending status associate with it.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty response.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse(java.lang.String)
  id: abortCopyWithResponse(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: abortCopyWithResponse(String copyId)
  nameWithType: ShareFileAsyncClient.abortCopyWithResponse(String copyId)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse(String copyId)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Aborts a pending Copy File operation, and leaves a destination file with zero length and full metadata.


    **Code Samples**


    Abort copy file from copy id("someCopyId")


    ```java

    shareFileAsyncClient.abortCopyWithResponse("someCopyId")
         .subscribe(response -> System.out.printf("Abort copying the file completed with status code %d",
             response.getStatusCode()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-file
  syntax:
    content: public Mono<Response<Void>> abortCopyWithResponse(String copyId)
    parameters:
    - id: copyId
      type: java.lang.String
      description: Specifies the copy id which has copying pending status associate with it.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A response containing the status of aborting copy the file.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)
  id: abortCopyWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: abortCopyWithResponse(String copyId, ShareRequestConditions requestConditions)
  nameWithType: ShareFileAsyncClient.abortCopyWithResponse(String copyId, ShareRequestConditions requestConditions)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse(String copyId, ShareRequestConditions requestConditions)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Aborts a pending Copy File operation, and leaves a destination file with zero length and full metadata.


    **Code Samples**


    Abort copy file from copy id("someCopyId")


    ```java

    ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);
     shareFileAsyncClient.abortCopyWithResponse("someCopyId", requestConditions)
         .subscribe(response -> System.out.printf("Abort copying the file completed with status code %d",
             response.getStatusCode()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-file
  syntax:
    content: public Mono<Response<Void>> abortCopyWithResponse(String copyId, ShareRequestConditions requestConditions)
    parameters:
    - id: copyId
      type: java.lang.String
      description: Specifies the copy id which has copying pending status associate with it.
    - id: requestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A response containing the status of aborting copy the file.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.beginCopy(java.lang.String,com.azure.storage.file.share.FileSmbProperties,java.lang.String,com.azure.storage.file.share.models.PermissionCopyModeType,java.lang.Boolean,java.lang.Boolean,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.storage.file.share.models.ShareRequestConditions)
  id: beginCopy(java.lang.String,com.azure.storage.file.share.FileSmbProperties,java.lang.String,com.azure.storage.file.share.models.PermissionCopyModeType,java.lang.Boolean,java.lang.Boolean,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.storage.file.share.models.ShareRequestConditions)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: beginCopy(String sourceUrl, FileSmbProperties smbProperties, String filePermission, PermissionCopyModeType filePermissionCopyMode, Boolean ignoreReadOnly, Boolean setArchiveAttribute, Map<String,String> metadata, Duration pollInterval, ShareRequestConditions destinationRequestConditions)
  nameWithType: ShareFileAsyncClient.beginCopy(String sourceUrl, FileSmbProperties smbProperties, String filePermission, PermissionCopyModeType filePermissionCopyMode, Boolean ignoreReadOnly, Boolean setArchiveAttribute, Map<String,String> metadata, Duration pollInterval, ShareRequestConditions destinationRequestConditions)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.beginCopy(String sourceUrl, FileSmbProperties smbProperties, String filePermission, PermissionCopyModeType filePermissionCopyMode, Boolean ignoreReadOnly, Boolean setArchiveAttribute, Map<String,String> metadata, Duration pollInterval, ShareRequestConditions destinationRequestConditions)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.beginCopy*
  type: Method
  package: com.azure.storage.file.share
  summary: "Copies a blob or file to a destination file within the storage account.\n\n**Code Samples**\n\nCopy file from source url to the `resourcePath`\n\n```java\nFileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n boolean ignoreReadOnly = false; // Default value\n boolean setArchiveAttribute = true; // Default value\n ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n \n PollerFlux<ShareFileCopyInfo, Void> poller = shareFileAsyncClient.beginCopy(\n     \"https://{accountName}.file.core.windows.net?{SASToken}\",\n     smbProperties, filePermission, PermissionCopyModeType.SOURCE, ignoreReadOnly, setArchiveAttribute,\n     Collections.singletonMap(\"file\", \"metadata\"), Duration.ofSeconds(2), requestConditions);\n \n poller.subscribe(response -> {\n     final ShareFileCopyInfo value = response.getValue();\n     System.out.printf(\"Copy source: %s. Status: %s.%n\", value.getCopySourceUrl(), value.getCopyStatus());\n }, error -> System.err.println(\"Error: \" + error), () -> System.out.println(\"Complete copying the file.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/copy-file"
  syntax:
    content: public PollerFlux<ShareFileCopyInfo,Void> beginCopy(String sourceUrl, FileSmbProperties smbProperties, String filePermission, PermissionCopyModeType filePermissionCopyMode, Boolean ignoreReadOnly, Boolean setArchiveAttribute, Map<String,String> metadata, Duration pollInterval, ShareRequestConditions destinationRequestConditions)
    parameters:
    - id: sourceUrl
      type: java.lang.String
      description: Specifies the URL of the source file or blob, up to 2 KB in length.
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The user settable file smb properties.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the file.
    - id: filePermissionCopyMode
      type: com.azure.storage.file.share.models.PermissionCopyModeType
      description: Mode of file permission acquisition.
    - id: ignoreReadOnly
      type: java.lang.Boolean
      description: Whether or not to copy despite target being read only. (default is false)
    - id: setArchiveAttribute
      type: java.lang.Boolean
      description: Whether or not the archive attribute is to be set on the target. (default is true)
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: >-
        Optional name-value pairs associated with the file as metadata. Metadata names must adhere to the
         naming rules.
    - id: pollInterval
      type: java.time.Duration
      description: >-
        Duration between each poll for the copy status. If none is specified, a default of one second
         is used.
    - id: destinationRequestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.storage.file.share.models.ShareFileCopyInfo,java.lang.Void>
      description: A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the file copy operation until it has completed or has been cancelled.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration)
  id: beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: beginCopy(String sourceUrl, Map<String,String> metadata, Duration pollInterval)
  nameWithType: ShareFileAsyncClient.beginCopy(String sourceUrl, Map<String,String> metadata, Duration pollInterval)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.beginCopy(String sourceUrl, Map<String,String> metadata, Duration pollInterval)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.beginCopy*
  type: Method
  package: com.azure.storage.file.share
  summary: "Copies a blob or file to a destination file within the storage account.\n\n**Code Samples**\n\nCopy file from source url to the `resourcePath`\n\n```java\nPollerFlux<ShareFileCopyInfo, Void> poller = shareFileAsyncClient.beginCopy(\n     \"https://{accountName}.file.core.windows.net?{SASToken}\",\n     Collections.singletonMap(\"file\", \"metadata\"), Duration.ofSeconds(2));\n \n poller.subscribe(response -> {\n     final ShareFileCopyInfo value = response.getValue();\n     System.out.printf(\"Copy source: %s. Status: %s.%n\", value.getCopySourceUrl(), value.getCopyStatus());\n }, error -> System.err.println(\"Error: \" + error),\n     () -> System.out.println(\"Complete copying the file.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/copy-file"
  syntax:
    content: public PollerFlux<ShareFileCopyInfo,Void> beginCopy(String sourceUrl, Map<String,String> metadata, Duration pollInterval)
    parameters:
    - id: sourceUrl
      type: java.lang.String
      description: Specifies the URL of the source file or blob, up to 2 KB in length.
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: >-
        Optional name-value pairs associated with the file as metadata. Metadata names must adhere to the
         naming rules.
    - id: pollInterval
      type: java.time.Duration
      description: >-
        Duration between each poll for the copy status. If none is specified, a default of one second
         is used.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.storage.file.share.models.ShareFileCopyInfo,java.lang.Void>
      description: A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the file copy operation until it has completed or has been cancelled.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.clearRange(long)
  id: clearRange(long)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: clearRange(long length)
  nameWithType: ShareFileAsyncClient.clearRange(long length)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.clearRange(long length)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.clearRange*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Clear a range of bytes to specific of a file in storage file service. Clear operations performs an in-place write on the specified file.


    **Code Samples**


    Clears the first 1024 bytes.


    ```java

    shareFileAsyncClient.clearRange(1024).subscribe(
         response -> { },
         error -> System.err.print(error.toString()),
         () -> System.out.println("Complete clearing the range!")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range
  syntax:
    content: public Mono<ShareFileUploadInfo> clearRange(long length)
    parameters:
    - id: length
      type: long
      description: Specifies the number of bytes being cleared.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileUploadInfo>
      description: The <xref uid="com.azure.storage.file.share.models.ShareFileUploadInfo" data-throw-if-not-resolved="false">file upload info</xref>
- uid: com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse(long,long)
  id: clearRangeWithResponse(long,long)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: clearRangeWithResponse(long length, long offset)
  nameWithType: ShareFileAsyncClient.clearRangeWithResponse(long length, long offset)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse(long length, long offset)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Clear a range of bytes to specific of a file in storage file service. Clear operations performs an in-place write on the specified file.


    **Code Samples**


    Clear the range starting from 1024 with length of 1024.


    ```java

    shareFileAsyncClient.clearRangeWithResponse(1024, 1024).subscribe(
         response -> { },
         error -> System.err.print(error.toString()),
         () -> System.out.println("Complete clearing the range!")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range
  syntax:
    content: public Mono<Response<ShareFileUploadInfo>> clearRangeWithResponse(long length, long offset)
    parameters:
    - id: length
      type: long
      description: Specifies the number of bytes being cleared in the request body.
    - id: offset
      type: long
      description: >-
        Optional starting point of the upload range. It will start from the beginning if it is
         <code>null</code>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileUploadInfo>>
      description: >-
        A response of <xref uid="com.azure.storage.file.share.models.ShareFileUploadInfo" data-throw-if-not-resolved="false">file upload info</xref> that only contains headers and response
         status code.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse(long,long,com.azure.storage.file.share.models.ShareRequestConditions)
  id: clearRangeWithResponse(long,long,com.azure.storage.file.share.models.ShareRequestConditions)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: clearRangeWithResponse(long length, long offset, ShareRequestConditions requestConditions)
  nameWithType: ShareFileAsyncClient.clearRangeWithResponse(long length, long offset, ShareRequestConditions requestConditions)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse(long length, long offset, ShareRequestConditions requestConditions)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Clear a range of bytes to specific of a file in storage file service. Clear operations performs an in-place write on the specified file.


    **Code Samples**


    Clear the range starting from 1024 with length of 1024.


    ```java

    ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);
     shareFileAsyncClient.clearRangeWithResponse(1024, 1024, requestConditions).subscribe(
         response -> { },
         error -> System.err.print(error.toString()),
         () -> System.out.println("Complete clearing the range!")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range
  syntax:
    content: public Mono<Response<ShareFileUploadInfo>> clearRangeWithResponse(long length, long offset, ShareRequestConditions requestConditions)
    parameters:
    - id: length
      type: long
      description: Specifies the number of bytes being cleared in the request body.
    - id: offset
      type: long
      description: >-
        Optional starting point of the upload range. It will start from the beginning if it is
         <code>null</code>
    - id: requestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileUploadInfo>>
      description: >-
        A response of <xref uid="com.azure.storage.file.share.models.ShareFileUploadInfo" data-throw-if-not-resolved="false">file upload info</xref> that only contains headers and response
         status code.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.create(long)
  id: create(long)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: create(long maxSize)
  nameWithType: ShareFileAsyncClient.create(long maxSize)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.create(long maxSize)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.create*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a file in the storage account and returns a response of <xref uid="com.azure.storage.file.share.models.ShareFileInfo" data-throw-if-not-resolved="false">ShareFileInfo</xref> to interact with it.


    **Code Samples**


    Create the file with size 1KB.


    ```java

    shareFileAsyncClient.create(1024).subscribe(
         response -> { },
         error -> System.err.print(error.toString()),
         () -> System.out.println("Complete creating the file!")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file
  syntax:
    content: public Mono<ShareFileInfo> create(long maxSize)
    parameters:
    - id: maxSize
      type: long
      description: The maximum size in bytes for the file.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileInfo>
      description: A response containing the file info and the status of creating the file.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)
  id: createWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
  nameWithType: ShareFileAsyncClient.createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a file in the storage account and returns a response of ShareFileInfo to interact with it.


    **Code Samples**


    Create the file with length of 1024 bytes, some headers, file smb properties and metadata.


    ```java

    ShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()
         .setContentType("text/html")
         .setContentEncoding("gzip")
         .setContentLanguage("en")
         .setCacheControl("no-transform")
         .setContentDisposition("attachment");
     FileSmbProperties smbProperties = new FileSmbProperties()
         .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))
         .setFileCreationTime(OffsetDateTime.now())
         .setFileLastWriteTime(OffsetDateTime.now())
         .setFilePermissionKey("filePermissionKey");
     String filePermission = "filePermission";
     // NOTE: filePermission and filePermissionKey should never be both set
     shareFileAsyncClient.createWithResponse(1024, httpHeaders, smbProperties, filePermission,
         Collections.singletonMap("directory", "metadata"))
         .subscribe(response -> System.out.printf("Creating the file completed with status code %d",
             response.getStatusCode()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file
  syntax:
    content: public Mono<Response<ShareFileInfo>> createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
    parameters:
    - id: maxSize
      type: long
      description: The maximum size in bytes for the file.
    - id: httpHeaders
      type: com.azure.storage.file.share.models.ShareFileHttpHeaders
      description: The user settable file http headers.
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The user settable file smb properties.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the file.
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Optional name-value pairs associated with the file as metadata.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileInfo>>
      description: A response containing the <xref uid="com.azure.storage.file.share.models.ShareFileInfo" data-throw-if-not-resolved="false">file info</xref> and the status of creating the file.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)
  id: createWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)
  nameWithType: ShareFileAsyncClient.createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: "Creates a file in the storage account and returns a response of ShareFileInfo to interact with it.\n\n**Code Samples**\n\nCreate the file with length of 1024 bytes, some headers, file smb properties and metadata.\n\n```java\nShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()\n     .setContentType(\"text/html\")\n     .setContentEncoding(\"gzip\")\n     .setContentLanguage(\"en\")\n     .setCacheControl(\"no-transform\")\n     .setContentDisposition(\"attachment\");\n FileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n \n ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n \n shareFileAsyncClient.createWithResponse(1024, httpHeaders, smbProperties, filePermission,\n     Collections.singletonMap(\"directory\", \"metadata\"), requestConditions)\n     .subscribe(response -> System.out.printf(\"Creating the file completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file"
  syntax:
    content: public Mono<Response<ShareFileInfo>> createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)
    parameters:
    - id: maxSize
      type: long
      description: The maximum size in bytes for the file.
    - id: httpHeaders
      type: com.azure.storage.file.share.models.ShareFileHttpHeaders
      description: The user settable file http headers.
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The user settable file smb properties.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the file.
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Optional name-value pairs associated with the file as metadata.
    - id: requestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileInfo>>
      description: A response containing the <xref uid="com.azure.storage.file.share.models.ShareFileInfo" data-throw-if-not-resolved="false">file info</xref> and the status of creating the file.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.delete()
  id: delete()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: delete()
  nameWithType: ShareFileAsyncClient.delete()
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.delete()
  overload: com.azure.storage.file.share.ShareFileAsyncClient.delete*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the file associate with the client.


    **Code Samples**


    Delete the file


    ```java

    shareFileAsyncClient.delete().subscribe(
         response -> { },
         error -> System.err.print(error.toString()),
         () -> System.out.println("Complete deleting the file!")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2
  syntax:
    content: public Mono<Void> delete()
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty response
- uid: com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse()
  id: deleteWithResponse()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: deleteWithResponse()
  nameWithType: ShareFileAsyncClient.deleteWithResponse()
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse()
  overload: com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the file associate with the client.


    **Code Samples**


    Delete the file


    ```java

    shareFileAsyncClient.deleteWithResponse().subscribe(
         response -> System.out.println("Complete deleting the file with status code:" + response.getStatusCode()),
         error -> System.err.print(error.toString())
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2
  syntax:
    content: public Mono<Response<Void>> deleteWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse(com.azure.storage.file.share.models.ShareRequestConditions)
  id: deleteWithResponse(com.azure.storage.file.share.models.ShareRequestConditions)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: deleteWithResponse(ShareRequestConditions requestConditions)
  nameWithType: ShareFileAsyncClient.deleteWithResponse(ShareRequestConditions requestConditions)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse(ShareRequestConditions requestConditions)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the file associate with the client.


    **Code Samples**


    Delete the file


    ```java

    ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);
     shareFileAsyncClient.deleteWithResponse(requestConditions).subscribe(
         response -> System.out.println("Complete deleting the file with status code:" + response.getStatusCode()),
         error -> System.err.print(error.toString())
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2
  syntax:
    content: public Mono<Response<Void>> deleteWithResponse(ShareRequestConditions requestConditions)
    parameters:
    - id: requestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.file.share.ShareFileAsyncClient.download()
  id: download()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: download()
  nameWithType: ShareFileAsyncClient.download()
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.download()
  overload: com.azure.storage.file.share.ShareFileAsyncClient.download*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Downloads a file from the system, including its metadata and properties


    **Code Samples**


    Download the file with its metadata and properties.


    ```java

    shareFileAsyncClient.download().subscribe(
         response -> { },
         error -> System.err.print(error.toString()),
         () -> System.out.println("Complete downloading the data!")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file
  syntax:
    content: public Flux<ByteBuffer> download()
    return:
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: A reactive response containing the file data.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.downloadToFile(java.lang.String)
  id: downloadToFile(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: downloadToFile(String downloadFilePath)
  nameWithType: ShareFileAsyncClient.downloadToFile(String downloadFilePath)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.downloadToFile(String downloadFilePath)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.downloadToFile*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Downloads a file from the system, including its metadata and properties into a file specified by the path.


    The file will be created and must not exist, if the file already exists a <xref uid="" data-throw-if-not-resolved="false">FileAlreadyExistsException</xref> will be thrown.


    **Code Samples**


    Download the file to current folder.


    ```java

    shareFileAsyncClient.downloadToFile("somelocalfilepath").subscribe(
         response -> {
             if (Files.exists(Paths.get("somelocalfilepath"))) {
                 System.out.println("Successfully downloaded the file.");
             }
         },
         error -> System.err.print(error.toString()),
         () -> System.out.println("Complete downloading the file!")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file
  syntax:
    content: public Mono<ShareFileProperties> downloadToFile(String downloadFilePath)
    parameters:
    - id: downloadFilePath
      type: java.lang.String
      description: The path where store the downloaded file
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileProperties>
      description: An empty response.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareFileRange)
  id: downloadToFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareFileRange)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: downloadToFileWithResponse(String downloadFilePath, ShareFileRange range)
  nameWithType: ShareFileAsyncClient.downloadToFileWithResponse(String downloadFilePath, ShareFileRange range)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse(String downloadFilePath, ShareFileRange range)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Downloads a file from the system, including its metadata and properties into a file specified by the path.


    The file will be created and must not exist, if the file already exists a <xref uid="" data-throw-if-not-resolved="false">FileAlreadyExistsException</xref> will be thrown.


    **Code Samples**


    Download the file from 1024 to 2048 bytes to current folder.


    ```java

    shareFileAsyncClient.downloadToFileWithResponse("somelocalfilepath", new ShareFileRange(1024, 2047L))
         .subscribe(
             response -> {
                 if (Files.exists(Paths.get("somelocalfilepath"))) {
                     System.out.println("Successfully downloaded the file with status code "
                         + response.getStatusCode());
                 }
             },
             error -> System.err.print(error.toString()),
             () -> System.out.println("Complete downloading the file!")
         );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file
  syntax:
    content: public Mono<Response<ShareFileProperties>> downloadToFileWithResponse(String downloadFilePath, ShareFileRange range)
    parameters:
    - id: downloadFilePath
      type: java.lang.String
      description: The path where store the downloaded file
    - id: range
      type: com.azure.storage.file.share.models.ShareFileRange
      description: Optional byte range which returns file data only from the specified range.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileProperties>>
      description: An empty response.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions)
  id: downloadToFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, ShareRequestConditions requestConditions)
  nameWithType: ShareFileAsyncClient.downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, ShareRequestConditions requestConditions)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, ShareRequestConditions requestConditions)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Downloads a file from the system, including its metadata and properties into a file specified by the path.


    The file will be created and must not exist, if the file already exists a <xref uid="" data-throw-if-not-resolved="false">FileAlreadyExistsException</xref> will be thrown.


    **Code Samples**


    Download the file from 1024 to 2048 bytes to current folder.


    ```java

    ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);
     shareFileAsyncClient.downloadToFileWithResponse("somelocalfilepath", new ShareFileRange(1024, 2047L),
         requestConditions)
         .subscribe(
             response -> {
                 if (Files.exists(Paths.get("somelocalfilepath"))) {
                     System.out.println("Successfully downloaded the file with status code "
                         + response.getStatusCode());
                 }
             },
             error -> System.err.print(error.toString()),
             () -> System.out.println("Complete downloading the file!")
         );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file
  syntax:
    content: public Mono<Response<ShareFileProperties>> downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, ShareRequestConditions requestConditions)
    parameters:
    - id: downloadFilePath
      type: java.lang.String
      description: The path where store the downloaded file
    - id: range
      type: com.azure.storage.file.share.models.ShareFileRange
      description: Optional byte range which returns file data only from the specified range.
    - id: requestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileProperties>>
      description: An empty response.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse(com.azure.storage.file.share.models.ShareFileRange,java.lang.Boolean)
  id: downloadWithResponse(com.azure.storage.file.share.models.ShareFileRange,java.lang.Boolean)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5)
  nameWithType: ShareFileAsyncClient.downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Downloads a file from the system, including its metadata and properties


    **Code Samples**


    Download the file from 1024 to 2048 bytes with its metadata and properties and without the contentMD5.


    ```java

    shareFileAsyncClient.downloadWithResponse(new ShareFileRange(1024, 2047L), false)
         .subscribe(response ->
                 System.out.printf("Complete downloading the data with status code %d%n", response.getStatusCode()),
             error -> System.err.println(error.getMessage())
         );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file
  syntax:
    content: public Mono<ShareFileDownloadAsyncResponse> downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5)
    parameters:
    - id: range
      type: com.azure.storage.file.share.models.ShareFileRange
      description: Optional byte range which returns file data only from the specified range.
    - id: rangeGetContentMD5
      type: java.lang.Boolean
      description: >-
        Optional boolean which the service returns the MD5 hash for the range when it sets to
         true, as long as the range is less than or equal to 4 MB in size.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileDownloadAsyncResponse>
      description: A reactive response containing response data and the file data.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse(com.azure.storage.file.share.models.ShareFileRange,java.lang.Boolean,com.azure.storage.file.share.models.ShareRequestConditions)
  id: downloadWithResponse(com.azure.storage.file.share.models.ShareFileRange,java.lang.Boolean,com.azure.storage.file.share.models.ShareRequestConditions)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5, ShareRequestConditions requestConditions)
  nameWithType: ShareFileAsyncClient.downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5, ShareRequestConditions requestConditions)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5, ShareRequestConditions requestConditions)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Downloads a file from the system, including its metadata and properties


    **Code Samples**


    Download the file from 1024 to 2048 bytes with its metadata and properties and without the contentMD5.


    ```java

    ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);
     shareFileAsyncClient.downloadWithResponse(new ShareFileRange(1024, 2047L), false, requestConditions)
         .subscribe(response ->
                 System.out.printf("Complete downloading the data with status code %d%n", response.getStatusCode()),
             error -> System.err.println(error.getMessage())
         );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file
  syntax:
    content: public Mono<ShareFileDownloadAsyncResponse> downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5, ShareRequestConditions requestConditions)
    parameters:
    - id: range
      type: com.azure.storage.file.share.models.ShareFileRange
      description: Optional byte range which returns file data only from the specified range.
    - id: rangeGetContentMD5
      type: java.lang.Boolean
      description: Optional boolean which the service returns the MD5 hash for the range when it sets to
    - id: requestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: >-
        <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
         true, as long as the range is less than or equal to 4 MB in size.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileDownloadAsyncResponse>
      description: A reactive response containing response data and the file data.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.exists()
  id: exists()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: exists()
  nameWithType: ShareFileAsyncClient.exists()
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.exists()
  overload: com.azure.storage.file.share.ShareFileAsyncClient.exists*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Determines if the file this client represents exists in the cloud.


    **Code Samples**


    ```java

    client.exists().subscribe(response -> System.out.printf("Exists? %b%n", response));

    ```
  syntax:
    content: public Mono<Boolean> exists()
    return:
      type: reactor.core.publisher.Mono<java.lang.Boolean>
      description: Flag indicating existence of the file.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.existsWithResponse()
  id: existsWithResponse()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: existsWithResponse()
  nameWithType: ShareFileAsyncClient.existsWithResponse()
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.existsWithResponse()
  overload: com.azure.storage.file.share.ShareFileAsyncClient.existsWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Determines if the file this client represents exists in the cloud.


    **Code Samples**


    ```java

    client.existsWithResponse().subscribe(response -> System.out.printf("Exists? %b%n", response.getValue()));

    ```
  syntax:
    content: public Mono<Response<Boolean>> existsWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Boolean>>
      description: Flag indicating existence of the file.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.forceCloseAllHandles()
  id: forceCloseAllHandles()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: forceCloseAllHandles()
  nameWithType: ShareFileAsyncClient.forceCloseAllHandles()
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.forceCloseAllHandles()
  overload: com.azure.storage.file.share.ShareFileAsyncClient.forceCloseAllHandles*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Closes all handles opened on the file at the service.


    **Code Samples**


    Force close all handles.


    ```java

    shareFileAsyncClient.forceCloseAllHandles().subscribe(handlesClosedInfo ->
         System.out.printf("Closed %d open handles on the file.%nFailed to close %d open handles on the file%n",
             handlesClosedInfo.getClosedHandles(), handlesClosedInfo.getFailedHandles()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles
  syntax:
    content: public Mono<CloseHandlesInfo> forceCloseAllHandles()
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.CloseHandlesInfo>
      description: A response that contains information about the closed handles.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandle(java.lang.String)
  id: forceCloseHandle(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: forceCloseHandle(String handleId)
  nameWithType: ShareFileAsyncClient.forceCloseHandle(String handleId)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandle(String handleId)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandle*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Closes a handle on the file. This is intended to be used alongside <xref uid="com.azure.storage.file.share.ShareFileAsyncClient.listHandles()" data-throw-if-not-resolved="false">#listHandles()</xref>.


    **Code Samples**


    Force close handles returned by list handles.


    ```java

    shareFileAsyncClient.listHandles().subscribe(handleItem ->
         shareFileAsyncClient.forceCloseHandle(handleItem.getHandleId()).subscribe(ignored ->
             System.out.printf("Closed handle %s on resource %s%n",
                 handleItem.getHandleId(), handleItem.getPath())));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles
  syntax:
    content: public Mono<CloseHandlesInfo> forceCloseHandle(String handleId)
    parameters:
    - id: handleId
      type: java.lang.String
      description: Handle ID to be closed.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.CloseHandlesInfo>
      description: A response that contains information about the closed handles.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandleWithResponse(java.lang.String)
  id: forceCloseHandleWithResponse(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: forceCloseHandleWithResponse(String handleId)
  nameWithType: ShareFileAsyncClient.forceCloseHandleWithResponse(String handleId)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandleWithResponse(String handleId)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandleWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Closes a handle on the file. This is intended to be used alongside <xref uid="com.azure.storage.file.share.ShareFileAsyncClient.listHandles()" data-throw-if-not-resolved="false">#listHandles()</xref>.


    **Code Samples**


    Force close handles returned by list handles.


    ```java

    shareFileAsyncClient.listHandles().subscribe(handleItem ->
         shareFileAsyncClient.forceCloseHandleWithResponse(handleItem.getHandleId()).subscribe(response ->
             System.out.printf("Closing handle %s on resource %s completed with status code %d%n",
                 handleItem.getHandleId(), handleItem.getPath(), response.getStatusCode())));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles
  syntax:
    content: public Mono<Response<CloseHandlesInfo>> forceCloseHandleWithResponse(String handleId)
    parameters:
    - id: handleId
      type: java.lang.String
      description: Handle ID to be closed.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.CloseHandlesInfo>>
      description: >-
        A response that contains information about the closed handles along with headers and response status
         code.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues)
  id: generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)
  nameWithType: ShareFileAsyncClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.generateSas*
  type: Method
  package: com.azure.storage.file.share
  summary: "Generates a service SAS for the file using the specified <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">ShareServiceSasSignatureValues</xref> Note : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\">StorageSharedKeyCredential</xref>\n\nSee <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">ShareServiceSasSignatureValues</xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n ShareFileSasPermission permission = new ShareFileSasPermission().setReadPermission(true);\n \n ShareServiceSasSignatureValues values = new ShareServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n \n shareFileAsyncClient.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  syntax:
    content: public String generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)
    parameters:
    - id: shareServiceSasSignatureValues
      type: com.azure.storage.file.share.sas.ShareServiceSasSignatureValues
      description: <xref uid="com.azure.storage.file.share.sas.ShareServiceSasSignatureValues" data-throw-if-not-resolved="false">ShareServiceSasSignatureValues</xref>
    return:
      type: java.lang.String
      description: A <code>String</code> representing all SAS query parameters.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.getAccountName()
  id: getAccountName()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: getAccountName()
  nameWithType: ShareFileAsyncClient.getAccountName()
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.getAccountName()
  overload: com.azure.storage.file.share.ShareFileAsyncClient.getAccountName*
  type: Method
  package: com.azure.storage.file.share
  summary: Get associated account name.
  syntax:
    content: public String getAccountName()
    return:
      type: java.lang.String
      description: account name associated with this storage resource.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.getFilePath()
  id: getFilePath()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: getFilePath()
  nameWithType: ShareFileAsyncClient.getFilePath()
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.getFilePath()
  overload: com.azure.storage.file.share.ShareFileAsyncClient.getFilePath*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Get file path of the client.


    Get the file path.


    ```java

    String filePath = shareFileAsyncClient.getFilePath();
     System.out.println("The name of the file is " + filePath);
    ```
  syntax:
    content: public String getFilePath()
    return:
      type: java.lang.String
      description: The path of the file.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.getFileUrl()
  id: getFileUrl()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: getFileUrl()
  nameWithType: ShareFileAsyncClient.getFileUrl()
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.getFileUrl()
  overload: com.azure.storage.file.share.ShareFileAsyncClient.getFileUrl*
  type: Method
  package: com.azure.storage.file.share
  summary: Get the url of the storage file client.
  syntax:
    content: public String getFileUrl()
    return:
      type: java.lang.String
      description: the URL of the storage file client
- uid: com.azure.storage.file.share.ShareFileAsyncClient.getHttpPipeline()
  id: getHttpPipeline()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: getHttpPipeline()
  nameWithType: ShareFileAsyncClient.getHttpPipeline()
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.getHttpPipeline()
  overload: com.azure.storage.file.share.ShareFileAsyncClient.getHttpPipeline*
  type: Method
  package: com.azure.storage.file.share
  summary: Gets the <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">HttpPipeline</xref> powering this client.
  syntax:
    content: public HttpPipeline getHttpPipeline()
    return:
      type: com.azure.core.http.HttpPipeline
      description: The pipeline.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.getProperties()
  id: getProperties()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: getProperties()
  nameWithType: ShareFileAsyncClient.getProperties()
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.getProperties()
  overload: com.azure.storage.file.share.ShareFileAsyncClient.getProperties*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Retrieves the properties of the storage account's file. The properties includes file metadata, last modified date, is server encrypted, and eTag.


    **Code Samples**


    Retrieve file properties


    ```java

    shareFileAsyncClient.getProperties()
         .subscribe(properties -> {
             System.out.printf("File latest modified date is %s.", properties.getLastModified());
         });
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file-properties
  syntax:
    content: public Mono<ShareFileProperties> getProperties()
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileProperties>
      description: <xref uid="com.azure.storage.file.share.models.ShareFileProperties" data-throw-if-not-resolved="false">Storage file properties</xref>
- uid: com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse()
  id: getPropertiesWithResponse()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: getPropertiesWithResponse()
  nameWithType: ShareFileAsyncClient.getPropertiesWithResponse()
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse()
  overload: com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Retrieves the properties of the storage account's file. The properties includes file metadata, last modified date, is server encrypted, and eTag.


    **Code Samples**


    Retrieve file properties


    ```java

    shareFileAsyncClient.getPropertiesWithResponse()
         .subscribe(response -> {
             ShareFileProperties properties = response.getValue();
             System.out.printf("File latest modified date is %s.", properties.getLastModified());
         });
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file-properties
  syntax:
    content: public Mono<Response<ShareFileProperties>> getPropertiesWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileProperties>>
      description: A response containing the <xref uid="com.azure.storage.file.share.models.ShareFileProperties" data-throw-if-not-resolved="false">storage file properties</xref> and response status code
- uid: com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse(com.azure.storage.file.share.models.ShareRequestConditions)
  id: getPropertiesWithResponse(com.azure.storage.file.share.models.ShareRequestConditions)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: getPropertiesWithResponse(ShareRequestConditions requestConditions)
  nameWithType: ShareFileAsyncClient.getPropertiesWithResponse(ShareRequestConditions requestConditions)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse(ShareRequestConditions requestConditions)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Retrieves the properties of the storage account's file. The properties includes file metadata, last modified date, is server encrypted, and eTag.


    **Code Samples**


    Retrieve file properties


    ```java

    ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);
     shareFileAsyncClient.getPropertiesWithResponse(requestConditions)
         .subscribe(response -> {
             ShareFileProperties properties = response.getValue();
             System.out.printf("File latest modified date is %s.", properties.getLastModified());
         });
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file-properties
  syntax:
    content: public Mono<Response<ShareFileProperties>> getPropertiesWithResponse(ShareRequestConditions requestConditions)
    parameters:
    - id: requestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileProperties>>
      description: A response containing the <xref uid="com.azure.storage.file.share.models.ShareFileProperties" data-throw-if-not-resolved="false">storage file properties</xref> and response status code
- uid: com.azure.storage.file.share.ShareFileAsyncClient.getServiceVersion()
  id: getServiceVersion()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: getServiceVersion()
  nameWithType: ShareFileAsyncClient.getServiceVersion()
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.getServiceVersion()
  overload: com.azure.storage.file.share.ShareFileAsyncClient.getServiceVersion*
  type: Method
  package: com.azure.storage.file.share
  summary: Gets the service version the client is using.
  syntax:
    content: public ShareServiceVersion getServiceVersion()
    return:
      type: com.azure.storage.file.share.ShareServiceVersion
      description: the service version the client is using.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.getShareName()
  id: getShareName()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: getShareName()
  nameWithType: ShareFileAsyncClient.getShareName()
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.getShareName()
  overload: com.azure.storage.file.share.ShareFileAsyncClient.getShareName*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Get the share name of file client.


    Get the share name.


    ```java

    String shareName = directoryAsyncClient.getShareName();
     System.out.println("The share name of the directory is " + shareName);
    ```
  syntax:
    content: public String getShareName()
    return:
      type: java.lang.String
      description: The share name of the file.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.getShareSnapshotId()
  id: getShareSnapshotId()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: getShareSnapshotId()
  nameWithType: ShareFileAsyncClient.getShareSnapshotId()
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.getShareSnapshotId()
  overload: com.azure.storage.file.share.ShareFileAsyncClient.getShareSnapshotId*
  type: Method
  package: com.azure.storage.file.share
  summary: "Get snapshot id which attached to <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient\" data-throw-if-not-resolved=\"false\">ShareFileAsyncClient</xref>. Return `null` if no snapshot id attached.\n\n**Code Samples**\n\nGet the share snapshot id.\n\n```java\nOffsetDateTime currentTime = OffsetDateTime.of(LocalDateTime.now(), ZoneOffset.UTC);\n ShareFileAsyncClient shareFileAsyncClient = new ShareFileClientBuilder()\n     .endpoint(\"https://${accountName}.file.core.windows.net\")\n     .sasToken(\"${SASToken}\")\n     .shareName(\"myshare\")\n     .resourcePath(\"myfiile\")\n     .snapshot(currentTime.toString())\n     .buildFileAsyncClient();\n \n System.out.printf(\"Snapshot ID: %s%n\", shareFileAsyncClient.getShareSnapshotId());\n```"
  syntax:
    content: public String getShareSnapshotId()
    return:
      type: java.lang.String
      description: >-
        The snapshot id which is a unique <code>DateTime</code> value that identifies the share snapshot to its base
         share.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.listHandles()
  id: listHandles()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: listHandles()
  nameWithType: ShareFileAsyncClient.listHandles()
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.listHandles()
  overload: com.azure.storage.file.share.ShareFileAsyncClient.listHandles*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    List of open handles on a file.


    **Code Samples**


    List all handles for the file client.


    ```java

    shareFileAsyncClient.listHandles()
         .subscribe(result -> System.out.printf("List handles completed with handle id %s", result.getHandleId()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-handles
  syntax:
    content: public PagedFlux<HandleItem> listHandles()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.HandleItem>
      description: <xref uid="com.azure.storage.file.share.models.HandleItem" data-throw-if-not-resolved="false">handles</xref> in the files that satisfy the requirements
- uid: com.azure.storage.file.share.ShareFileAsyncClient.listHandles(java.lang.Integer)
  id: listHandles(java.lang.Integer)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: listHandles(Integer maxResultsPerPage)
  nameWithType: ShareFileAsyncClient.listHandles(Integer maxResultsPerPage)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.listHandles(Integer maxResultsPerPage)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.listHandles*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    List of open handles on a file.


    **Code Samples**


    List 10 handles for the file client.


    ```java

    shareFileAsyncClient.listHandles(10)
         .subscribe(result -> System.out.printf("List handles completed with handle id %s", result.getHandleId()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-handles
  syntax:
    content: public PagedFlux<HandleItem> listHandles(Integer maxResultsPerPage)
    parameters:
    - id: maxResultsPerPage
      type: java.lang.Integer
      description: Optional maximum number of results will return per page
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.HandleItem>
      description: <xref uid="com.azure.storage.file.share.models.HandleItem" data-throw-if-not-resolved="false">handles</xref> in the file that satisfy the requirements
- uid: com.azure.storage.file.share.ShareFileAsyncClient.listRanges()
  id: listRanges()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: listRanges()
  nameWithType: ShareFileAsyncClient.listRanges()
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.listRanges()
  overload: com.azure.storage.file.share.ShareFileAsyncClient.listRanges*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    List of valid ranges for a file.


    **Code Samples**


    List all ranges for the file client.


    ```java

    shareFileAsyncClient.listRanges().subscribe(range ->
         System.out.printf("List ranges completed with start: %d, end: %d", range.getStart(), range.getEnd()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-ranges
  syntax:
    content: public PagedFlux<ShareFileRange> listRanges()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.ShareFileRange>
      description: <xref uid="com.azure.storage.file.share.models.ShareFileRange" data-throw-if-not-resolved="false">ranges</xref> in the files.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.listRanges(com.azure.storage.file.share.models.ShareFileRange)
  id: listRanges(com.azure.storage.file.share.models.ShareFileRange)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: listRanges(ShareFileRange range)
  nameWithType: ShareFileAsyncClient.listRanges(ShareFileRange range)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.listRanges(ShareFileRange range)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.listRanges*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    List of valid ranges for a file.


    **Code Samples**


    List all ranges within the file range from 1KB to 2KB.


    ```java

    shareFileAsyncClient.listRanges(new ShareFileRange(1024, 2048L))
         .subscribe(result -> System.out.printf("List ranges completed with start: %d, end: %d",
             result.getStart(), result.getEnd()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-ranges
  syntax:
    content: public PagedFlux<ShareFileRange> listRanges(ShareFileRange range)
    parameters:
    - id: range
      type: com.azure.storage.file.share.models.ShareFileRange
      description: Optional byte range which returns file data only from the specified range.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.ShareFileRange>
      description: <xref uid="com.azure.storage.file.share.models.ShareFileRange" data-throw-if-not-resolved="false">ranges</xref> in the files that satisfy the requirements
- uid: com.azure.storage.file.share.ShareFileAsyncClient.listRanges(com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions)
  id: listRanges(com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: listRanges(ShareFileRange range, ShareRequestConditions requestConditions)
  nameWithType: ShareFileAsyncClient.listRanges(ShareFileRange range, ShareRequestConditions requestConditions)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.listRanges(ShareFileRange range, ShareRequestConditions requestConditions)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.listRanges*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    List of valid ranges for a file.


    **Code Samples**


    List all ranges within the file range from 1KB to 2KB.


    ```java

    ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);
     shareFileAsyncClient.listRanges(new ShareFileRange(1024, 2048L), requestConditions)
         .subscribe(result -> System.out.printf("List ranges completed with start: %d, end: %d",
             result.getStart(), result.getEnd()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-ranges
  syntax:
    content: public PagedFlux<ShareFileRange> listRanges(ShareFileRange range, ShareRequestConditions requestConditions)
    parameters:
    - id: range
      type: com.azure.storage.file.share.models.ShareFileRange
      description: Optional byte range which returns file data only from the specified range.
    - id: requestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.ShareFileRange>
      description: <xref uid="com.azure.storage.file.share.models.ShareFileRange" data-throw-if-not-resolved="false">ranges</xref> in the files that satisfy the requirements
- uid: com.azure.storage.file.share.ShareFileAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  id: setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: setMetadata(Map<String,String> metadata)
  nameWithType: ShareFileAsyncClient.setMetadata(Map<String,String> metadata)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.setMetadata(Map<String,String> metadata)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.setMetadata*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the user-defined metadata to associate to the file.


    If `null` is passed for the metadata it will clear the metadata associated to the file.


    **Code Samples**


    Set the metadata to "file:updatedMetadata"


    ```java

    shareFileAsyncClient.setMetadata(Collections.singletonMap("file", "updatedMetadata"))
         .doOnSuccess(response -> System.out.println("Setting the file metadata completed."));
    ```


    Clear the metadata of the file


    ```java

    shareFileAsyncClient.setMetadataWithResponse(null).subscribe(
         response -> System.out.printf("Setting the file metadata completed with status code %d",
             response.getStatusCode()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-metadata
  syntax:
    content: public Mono<ShareFileMetadataInfo> setMetadata(Map<String,String> metadata)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Options.Metadata to set on the file, if null is passed the metadata for the file is cleared
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileMetadataInfo>
      description: <xref uid="com.azure.storage.file.share.models.ShareFileMetadataInfo" data-throw-if-not-resolved="false">file meta info</xref>
- uid: com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)
  id: setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: setMetadataWithResponse(Map<String,String> metadata)
  nameWithType: ShareFileAsyncClient.setMetadataWithResponse(Map<String,String> metadata)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse(Map<String,String> metadata)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the user-defined metadata to associate to the file.


    If `null` is passed for the metadata it will clear the metadata associated to the file.


    **Code Samples**


    Set the metadata to "file:updatedMetadata"


    ```java

    shareFileAsyncClient.setMetadataWithResponse(Collections.singletonMap("file", "updatedMetadata"))
         .subscribe(response -> System.out.printf("Setting the file metadata completed with status code %d",
             response.getStatusCode()));
    ```


    Clear the metadata of the file


    ```java

    shareFileAsyncClient.setMetadataWithResponse(null).subscribe(
         response -> System.out.printf("Setting the file metadata completed with status code %d",
             response.getStatusCode()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-metadata
  syntax:
    content: public Mono<Response<ShareFileMetadataInfo>> setMetadataWithResponse(Map<String,String> metadata)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Options.Metadata to set on the file, if null is passed the metadata for the file is cleared
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileMetadataInfo>>
      description: A response containing the <xref uid="com.azure.storage.file.share.models.ShareFileMetadataInfo" data-throw-if-not-resolved="false">file meta info</xref> and status code
- uid: com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)
  id: setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: setMetadataWithResponse(Map<String,String> metadata, ShareRequestConditions requestConditions)
  nameWithType: ShareFileAsyncClient.setMetadataWithResponse(Map<String,String> metadata, ShareRequestConditions requestConditions)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse(Map<String,String> metadata, ShareRequestConditions requestConditions)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the user-defined metadata to associate to the file.


    If `null` is passed for the metadata it will clear the metadata associated to the file.


    **Code Samples**


    Set the metadata to "file:updatedMetadata"


    ```java

    ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);
     shareFileAsyncClient.setMetadataWithResponse(Collections.singletonMap("file", "updatedMetadata"), requestConditions)
         .subscribe(response -> System.out.printf("Setting the file metadata completed with status code %d",
             response.getStatusCode()));
    ```


    Clear the metadata of the file


    ```java

    ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);
     shareFileAsyncClient.setMetadataWithResponse(null, requestConditions).subscribe(
         response -> System.out.printf("Setting the file metadata completed with status code %d",
             response.getStatusCode()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-metadata
  syntax:
    content: public Mono<Response<ShareFileMetadataInfo>> setMetadataWithResponse(Map<String,String> metadata, ShareRequestConditions requestConditions)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Options.Metadata to set on the file, if null is passed the metadata for the file is cleared
    - id: requestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileMetadataInfo>>
      description: A response containing the <xref uid="com.azure.storage.file.share.models.ShareFileMetadataInfo" data-throw-if-not-resolved="false">file meta info</xref> and status code
- uid: com.azure.storage.file.share.ShareFileAsyncClient.setProperties(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String)
  id: setProperties(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: setProperties(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)
  nameWithType: ShareFileAsyncClient.setProperties(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.setProperties(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.setProperties*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the user-defined file properties to associate to the file.


    If `null` is passed for the fileProperties.httpHeaders it will clear the httpHeaders associated to the file. If `null` is passed for the fileProperties.filesmbproperties it will preserve the filesmb properties associated with the file.


    **Code Samples**


    Set the httpHeaders of contentType of "text/plain"


    ```java

    ShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()
         .setContentType("text/html")
         .setContentEncoding("gzip")
         .setContentLanguage("en")
         .setCacheControl("no-transform")
         .setContentDisposition("attachment");
     FileSmbProperties smbProperties = new FileSmbProperties()
         .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))
         .setFileCreationTime(OffsetDateTime.now())
         .setFileLastWriteTime(OffsetDateTime.now())
         .setFilePermissionKey("filePermissionKey");
     String filePermission = "filePermission";
     // NOTE: filePermission and filePermissionKey should never be both set
     shareFileAsyncClient.setProperties(1024, httpHeaders, smbProperties, filePermission)
         .doOnSuccess(response -> System.out.println("Setting the file properties completed."));
    ```


    Clear the metadata of the file and preserve the SMB properties


    ```java

    shareFileAsyncClient.setProperties(1024, null, null, null)
         .subscribe(response -> System.out.println("Setting the file httpHeaders completed."));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-properties
  syntax:
    content: public Mono<ShareFileInfo> setProperties(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)
    parameters:
    - id: newFileSize
      type: long
      description: New file size of the file
    - id: httpHeaders
      type: com.azure.storage.file.share.models.ShareFileHttpHeaders
      description: The user settable file http headers.
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The user settable file smb properties.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the file
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileInfo>
      description: The <xref uid="com.azure.storage.file.share.models.ShareFileInfo" data-throw-if-not-resolved="false">file info</xref>
- uid: com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String)
  id: setPropertiesWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)
  nameWithType: ShareFileAsyncClient.setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the user-defined file properties to associate to the file.


    If `null` is passed for the httpHeaders it will clear the httpHeaders associated to the file. If `null` is passed for the filesmbproperties it will preserve the filesmbproperties associated with the file.


    **Code Samples**


    Set the httpHeaders of contentType of "text/plain"


    ```java

    ShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()
         .setContentType("text/html")
         .setContentEncoding("gzip")
         .setContentLanguage("en")
         .setCacheControl("no-transform")
         .setContentDisposition("attachment");
     FileSmbProperties smbProperties = new FileSmbProperties()
         .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))
         .setFileCreationTime(OffsetDateTime.now())
         .setFileLastWriteTime(OffsetDateTime.now())
         .setFilePermissionKey("filePermissionKey");
     String filePermission = "filePermission";
     // NOTE: filePermission and filePermissionKey should never be both set
     shareFileAsyncClient.setPropertiesWithResponse(1024, httpHeaders, smbProperties, filePermission)
         .subscribe(response -> System.out.printf("Setting the file properties completed with status code %d",
             response.getStatusCode()));
    ```


    Clear the metadata of the file and preserve the SMB properties


    ```java

    shareFileAsyncClient.setPropertiesWithResponse(1024, null, null, null)
         .subscribe(response -> System.out.printf("Setting the file httpHeaders completed with status code %d",
             response.getStatusCode()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-properties
  syntax:
    content: public Mono<Response<ShareFileInfo>> setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)
    parameters:
    - id: newFileSize
      type: long
      description: New file size of the file.
    - id: httpHeaders
      type: com.azure.storage.file.share.models.ShareFileHttpHeaders
      description: The user settable file http headers.
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The user settable file smb properties.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the file.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileInfo>>
      description: Response containing the <xref uid="com.azure.storage.file.share.models.ShareFileInfo" data-throw-if-not-resolved="false">file info</xref> and response status code.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)
  id: setPropertiesWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, ShareRequestConditions requestConditions)
  nameWithType: ShareFileAsyncClient.setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, ShareRequestConditions requestConditions)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, ShareRequestConditions requestConditions)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the user-defined file properties to associate to the file.


    If `null` is passed for the httpHeaders it will clear the httpHeaders associated to the file. If `null` is passed for the filesmbproperties it will preserve the filesmbproperties associated with the file.


    **Code Samples**


    Set the httpHeaders of contentType of "text/plain"


    ```java

    ShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()
         .setContentType("text/html")
         .setContentEncoding("gzip")
         .setContentLanguage("en")
         .setCacheControl("no-transform")
         .setContentDisposition("attachment");
     FileSmbProperties smbProperties = new FileSmbProperties()
         .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))
         .setFileCreationTime(OffsetDateTime.now())
         .setFileLastWriteTime(OffsetDateTime.now())
         .setFilePermissionKey("filePermissionKey");
     String filePermission = "filePermission";
     // NOTE: filePermission and filePermissionKey should never be both set
     ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);
     shareFileAsyncClient.setPropertiesWithResponse(1024, httpHeaders, smbProperties, filePermission, requestConditions)
         .subscribe(response -> System.out.printf("Setting the file properties completed with status code %d",
             response.getStatusCode()));
    ```


    Clear the metadata of the file and preserve the SMB properties


    ```java

    ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);
     shareFileAsyncClient.setPropertiesWithResponse(1024, null, null, null, requestConditions)
         .subscribe(response -> System.out.printf("Setting the file httpHeaders completed with status code %d",
             response.getStatusCode()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-properties
  syntax:
    content: public Mono<Response<ShareFileInfo>> setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, ShareRequestConditions requestConditions)
    parameters:
    - id: newFileSize
      type: long
      description: New file size of the file.
    - id: httpHeaders
      type: com.azure.storage.file.share.models.ShareFileHttpHeaders
      description: The user settable file http headers.
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The user settable file smb properties.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the file.
    - id: requestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileInfo>>
      description: Response containing the <xref uid="com.azure.storage.file.share.models.ShareFileInfo" data-throw-if-not-resolved="false">file info</xref> and response status code.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  id: upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: upload(Flux<ByteBuffer> data, long length)
  nameWithType: ShareFileAsyncClient.upload(Flux<ByteBuffer> data, long length)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.upload(Flux<ByteBuffer> data, long length)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.upload*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Uploads a range of bytes to the beginning of a file in storage file service. Upload operations performs an in-place write on the specified file.


    **Code Samples**


    Upload data "default" to the file in Storage File Service.


    ```java

    ByteBuffer defaultData = ByteBuffer.wrap("default".getBytes(StandardCharsets.UTF_8));
     shareFileAsyncClient.upload(Flux.just(defaultData), defaultData.remaining()).subscribe(
         response -> { },
         error -> System.err.print(error.toString()),
         () -> System.out.println("Complete deleting the file!")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range
  syntax:
    content: public Mono<ShareFileUploadInfo> upload(Flux<ByteBuffer> data, long length)
    parameters:
    - id: data
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data which will upload to the storage file.
    - id: length
      type: long
      description: Specifies the number of bytes being transmitted in the request body.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileUploadInfo>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile(java.lang.String)
  id: uploadFromFile(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: uploadFromFile(String uploadFilePath)
  nameWithType: ShareFileAsyncClient.uploadFromFile(String uploadFilePath)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile(String uploadFilePath)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Uploads file to storage file service.


    **Code Samples**


    Upload the file from the source file path.


    (@codesnippet com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile\#string\}


    For more information, see the [Azure Docs Create File][] and [Azure Docs Upload][].



    [Azure Docs Create File]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file

    [Azure Docs Upload]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range
  syntax:
    content: public Mono<Void> uploadFromFile(String uploadFilePath)
    parameters:
    - id: uploadFilePath
      type: java.lang.String
      description: The path where store the source file to upload
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty response.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)
  id: uploadFromFile(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: uploadFromFile(String uploadFilePath, ShareRequestConditions requestConditions)
  nameWithType: ShareFileAsyncClient.uploadFromFile(String uploadFilePath, ShareRequestConditions requestConditions)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile(String uploadFilePath, ShareRequestConditions requestConditions)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Uploads file to storage file service.


    **Code Samples**


    Upload the file from the source file path.


    (@codesnippet com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile\#string-ShareRequestConditions\}


    For more information, see the [Azure Docs Create File][] and [Azure Docs Upload][].



    [Azure Docs Create File]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file

    [Azure Docs Upload]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range
  syntax:
    content: public Mono<Void> uploadFromFile(String uploadFilePath, ShareRequestConditions requestConditions)
    parameters:
    - id: uploadFilePath
      type: java.lang.String
      description: The path where store the source file to upload
    - id: requestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty response.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrl(long,long,long,java.lang.String)
  id: uploadRangeFromUrl(long,long,long,java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: uploadRangeFromUrl(long length, long destinationOffset, long sourceOffset, String sourceUrl)
  nameWithType: ShareFileAsyncClient.uploadRangeFromUrl(long length, long destinationOffset, long sourceOffset, String sourceUrl)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrl(long length, long destinationOffset, long sourceOffset, String sourceUrl)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrl*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Uploads a range of bytes from one file to another file.


    **Code Samples**


    Upload a number of bytes from a file at defined source and destination offsets


    ```java

    shareFileAsyncClient.uploadRangeFromUrl(6, 8, 0, "sourceUrl").subscribe(
         response -> { },
         error -> System.err.print(error.toString()),
         () -> System.out.println("Completed upload range from url!")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range
  syntax:
    content: public Mono<ShareFileUploadRangeFromUrlInfo> uploadRangeFromUrl(long length, long destinationOffset, long sourceOffset, String sourceUrl)
    parameters:
    - id: length
      type: long
      description: Specifies the number of bytes being transmitted in the request body.
    - id: destinationOffset
      type: long
      description: Starting point of the upload range on the destination.
    - id: sourceOffset
      type: long
      description: Starting point of the upload range on the source.
    - id: sourceUrl
      type: java.lang.String
      description: Specifies the URL of the source file.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo>
      description: The <xref uid="com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo" data-throw-if-not-resolved="false">file upload range from url info</xref>
- uid: com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long,long,long,java.lang.String)
  id: uploadRangeFromUrlWithResponse(long,long,long,java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl)
  nameWithType: ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Uploads a range of bytes from one file to another file.


    **Code Samples**


    Upload a number of bytes from a file at defined source and destination offsets


    ```java

    shareFileAsyncClient.uploadRangeFromUrlWithResponse(6, 8, 0, "sourceUrl").subscribe(
         response -> { },
         error -> System.err.print(error.toString()),
         () -> System.out.println("Completed upload range from url!")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range
  syntax:
    content: public Mono<Response<ShareFileUploadRangeFromUrlInfo>> uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl)
    parameters:
    - id: length
      type: long
      description: Specifies the number of bytes being transmitted in the request body.
    - id: destinationOffset
      type: long
      description: Starting point of the upload range on the destination.
    - id: sourceOffset
      type: long
      description: Starting point of the upload range on the source.
    - id: sourceUrl
      type: java.lang.String
      description: Specifies the URL of the source file.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo>>
      description: >-
        A response containing the <xref uid="com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo" data-throw-if-not-resolved="false">file upload range from url info</xref> with
         headers and response status code.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long,long,long,java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)
  id: uploadRangeFromUrlWithResponse(long,long,long,java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl, ShareRequestConditions destinationRequestConditions)
  nameWithType: ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl, ShareRequestConditions destinationRequestConditions)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl, ShareRequestConditions destinationRequestConditions)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Uploads a range of bytes from one file to another file.


    **Code Samples**


    Upload a number of bytes from a file at defined source and destination offsets


    ```java

    ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);
     shareFileAsyncClient.uploadRangeFromUrlWithResponse(6, 8, 0, "sourceUrl", requestConditions).subscribe(
         response -> { },
         error -> System.err.print(error.toString()),
         () -> System.out.println("Completed upload range from url!")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range
  syntax:
    content: public Mono<Response<ShareFileUploadRangeFromUrlInfo>> uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl, ShareRequestConditions destinationRequestConditions)
    parameters:
    - id: length
      type: long
      description: Specifies the number of bytes being transmitted in the request body.
    - id: destinationOffset
      type: long
      description: Starting point of the upload range on the destination.
    - id: sourceOffset
      type: long
      description: Starting point of the upload range on the source.
    - id: sourceUrl
      type: java.lang.String
      description: Specifies the URL of the source file.
    - id: destinationRequestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo>>
      description: >-
        A response containing the <xref uid="com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo" data-throw-if-not-resolved="false">file upload range from url info</xref> with
         headers and response status code.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Long)
  id: uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Long)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset)
  nameWithType: ShareFileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Uploads a range of bytes to specific of a file in storage file service. Upload operations performs an in-place write on the specified file.


    **Code Samples**


    Upload the file from 1024 to 2048 bytes with its metadata and properties and without the contentMD5.


    ```java

    ByteBuffer defaultData = ByteBuffer.wrap("default".getBytes(StandardCharsets.UTF_8));
     shareFileAsyncClient.uploadWithResponse(Flux.just(defaultData), defaultData.remaining(), 0L).subscribe(
         response -> { },
         error -> System.err.print(error.toString()),
         () -> System.out.println("Complete deleting the file!")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range
  syntax:
    content: public Mono<Response<ShareFileUploadInfo>> uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset)
    parameters:
    - id: data
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data which will upload to the storage file.
    - id: length
      type: long
      description: >-
        Specifies the number of bytes being transmitted in the request body. When the
         ShareFileRangeWriteType is set to clear, the value of this header must be set to zero.
    - id: offset
      type: java.lang.Long
      description: >-
        Optional starting point of the upload range. It will start from the beginning if it is
         <code>null</code>.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileUploadInfo>>
      description: >-
        A response containing the <xref uid="com.azure.storage.file.share.models.ShareFileUploadInfo" data-throw-if-not-resolved="false">file upload info</xref> with headers and response
         status code.
- uid: com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Long,com.azure.storage.file.share.models.ShareRequestConditions)
  id: uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Long,com.azure.storage.file.share.models.ShareRequestConditions)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareFileAsyncClient
  langs:
  - java
  name: uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset, ShareRequestConditions requestConditions)
  nameWithType: ShareFileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset, ShareRequestConditions requestConditions)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset, ShareRequestConditions requestConditions)
  overload: com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Uploads a range of bytes to specific of a file in storage file service. Upload operations performs an in-place write on the specified file.


    **Code Samples**


    Upload the file from 1024 to 2048 bytes with its metadata and properties and without the contentMD5.


    ```java

    ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);
     ByteBuffer defaultData = ByteBuffer.wrap("default".getBytes(StandardCharsets.UTF_8));
     shareFileAsyncClient.uploadWithResponse(Flux.just(defaultData), defaultData.remaining(), 0L, requestConditions)
         .subscribe(
             response -> { },
             error -> System.err.print(error.toString()),
             () -> System.out.println("Complete deleting the file!")
         );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range
  syntax:
    content: public Mono<Response<ShareFileUploadInfo>> uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset, ShareRequestConditions requestConditions)
    parameters:
    - id: data
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data which will upload to the storage file.
    - id: length
      type: long
      description: >-
        Specifies the number of bytes being transmitted in the request body. When the
         ShareFileRangeWriteType is set to clear, the value of this header must be set to zero.
    - id: offset
      type: java.lang.Long
      description: >-
        Optional starting point of the upload range. It will start from the beginning if it is
         <code>null</code>.
    - id: requestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileUploadInfo>>
      description: >-
        A response containing the <xref uid="com.azure.storage.file.share.models.ShareFileUploadInfo" data-throw-if-not-resolved="false">file upload info</xref> with headers and response
         status code.
references:
- uid: com.azure.storage.file.share.implementation.AzureFileStorageImpl
  name: AzureFileStorageImpl
  nameWithType: AzureFileStorageImpl
  fullName: com.azure.storage.file.share.implementation.AzureFileStorageImpl
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.file.share.ShareServiceVersion
  name: ShareServiceVersion
  nameWithType: ShareServiceVersion
  fullName: com.azure.storage.file.share.ShareServiceVersion
- uid: com.azure.storage.file.share.ShareFileAsyncClient.ShareFileAsyncClient*
  name: ShareFileAsyncClient
  nameWithType: ShareFileAsyncClient.ShareFileAsyncClient
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.ShareFileAsyncClient
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareFileAsyncClient.getFileUrl*
  name: getFileUrl
  nameWithType: ShareFileAsyncClient.getFileUrl
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.getFileUrl
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareFileAsyncClient.getServiceVersion*
  name: getServiceVersion
  nameWithType: ShareFileAsyncClient.getServiceVersion
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.getServiceVersion
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<java.lang.Boolean>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareFileAsyncClient.exists*
  name: exists
  nameWithType: ShareFileAsyncClient.exists
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.exists
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Boolean>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareFileAsyncClient.existsWithResponse*
  name: existsWithResponse
  nameWithType: ShareFileAsyncClient.existsWithResponse
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.existsWithResponse
  package: com.azure.storage.file.share
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileInfo>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareFileInfo
    name: ShareFileInfo
    fullName: com.azure.storage.file.share.models.ShareFileInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareFileAsyncClient.create*
  name: create
  nameWithType: ShareFileAsyncClient.create
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.create
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.ShareFileHttpHeaders
  name: ShareFileHttpHeaders
  nameWithType: ShareFileHttpHeaders
  fullName: com.azure.storage.file.share.models.ShareFileHttpHeaders
- uid: com.azure.storage.file.share.FileSmbProperties
  name: FileSmbProperties
  nameWithType: FileSmbProperties
  fullName: com.azure.storage.file.share.FileSmbProperties
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileInfo>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareFileInfo
    name: ShareFileInfo
    fullName: com.azure.storage.file.share.models.ShareFileInfo
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse*
  name: createWithResponse
  nameWithType: ShareFileAsyncClient.createWithResponse
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.ShareRequestConditions
  name: ShareRequestConditions
  nameWithType: ShareRequestConditions
  fullName: com.azure.storage.file.share.models.ShareRequestConditions
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: com.azure.core.util.polling.PollerFlux<com.azure.storage.file.share.models.ShareFileCopyInfo,java.lang.Void>
  spec.java:
  - uid: com.azure.core.util.polling.PollerFlux
    name: PollerFlux
    fullName: com.azure.core.util.polling.PollerFlux
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareFileCopyInfo
    name: ShareFileCopyInfo
    fullName: com.azure.storage.file.share.models.ShareFileCopyInfo
  - name: ','
    fullName: ','
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareFileAsyncClient.beginCopy*
  name: beginCopy
  nameWithType: ShareFileAsyncClient.beginCopy
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.beginCopy
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.PermissionCopyModeType
  name: PermissionCopyModeType
  nameWithType: PermissionCopyModeType
  fullName: com.azure.storage.file.share.models.PermissionCopyModeType
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareFileAsyncClient.abortCopy*
  name: abortCopy
  nameWithType: ShareFileAsyncClient.abortCopy
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.abortCopy
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse*
  name: abortCopyWithResponse
  nameWithType: ShareFileAsyncClient.abortCopyWithResponse
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareFileProperties
    name: ShareFileProperties
    fullName: com.azure.storage.file.share.models.ShareFileProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareFileAsyncClient.downloadToFile*
  name: downloadToFile
  nameWithType: ShareFileAsyncClient.downloadToFile
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.downloadToFile
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.ShareFileRange
  name: ShareFileRange
  nameWithType: ShareFileRange
  fullName: com.azure.storage.file.share.models.ShareFileRange
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileProperties>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareFileProperties
    name: ShareFileProperties
    fullName: com.azure.storage.file.share.models.ShareFileProperties
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse*
  name: downloadToFileWithResponse
  nameWithType: ShareFileAsyncClient.downloadToFileWithResponse
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Flux<java.nio.ByteBuffer>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: java.nio.ByteBuffer
    name: ByteBuffer
    fullName: java.nio.ByteBuffer
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareFileAsyncClient.download*
  name: download
  nameWithType: ShareFileAsyncClient.download
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.download
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileDownloadAsyncResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareFileDownloadAsyncResponse
    name: ShareFileDownloadAsyncResponse
    fullName: com.azure.storage.file.share.models.ShareFileDownloadAsyncResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse*
  name: downloadWithResponse
  nameWithType: ShareFileAsyncClient.downloadWithResponse
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareFileAsyncClient.delete*
  name: delete
  nameWithType: ShareFileAsyncClient.delete
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.delete
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse*
  name: deleteWithResponse
  nameWithType: ShareFileAsyncClient.deleteWithResponse
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareFileAsyncClient.getProperties*
  name: getProperties
  nameWithType: ShareFileAsyncClient.getProperties
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.getProperties
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse*
  name: getPropertiesWithResponse
  nameWithType: ShareFileAsyncClient.getPropertiesWithResponse
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareFileAsyncClient.setProperties*
  name: setProperties
  nameWithType: ShareFileAsyncClient.setProperties
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.setProperties
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse*
  name: setPropertiesWithResponse
  nameWithType: ShareFileAsyncClient.setPropertiesWithResponse
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileMetadataInfo>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareFileMetadataInfo
    name: ShareFileMetadataInfo
    fullName: com.azure.storage.file.share.models.ShareFileMetadataInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareFileAsyncClient.setMetadata*
  name: setMetadata
  nameWithType: ShareFileAsyncClient.setMetadata
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.setMetadata
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileMetadataInfo>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareFileMetadataInfo
    name: ShareFileMetadataInfo
    fullName: com.azure.storage.file.share.models.ShareFileMetadataInfo
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse*
  name: setMetadataWithResponse
  nameWithType: ShareFileAsyncClient.setMetadataWithResponse
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileUploadInfo>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareFileUploadInfo
    name: ShareFileUploadInfo
    fullName: com.azure.storage.file.share.models.ShareFileUploadInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareFileAsyncClient.upload*
  name: upload
  nameWithType: ShareFileAsyncClient.upload
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.upload
  package: com.azure.storage.file.share
- uid: java.lang.Long
  spec.java:
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileUploadInfo>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareFileUploadInfo
    name: ShareFileUploadInfo
    fullName: com.azure.storage.file.share.models.ShareFileUploadInfo
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse*
  name: uploadWithResponse
  nameWithType: ShareFileAsyncClient.uploadWithResponse
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo
    name: ShareFileUploadRangeFromUrlInfo
    fullName: com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrl*
  name: uploadRangeFromUrl
  nameWithType: ShareFileAsyncClient.uploadRangeFromUrl
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrl
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo
    name: ShareFileUploadRangeFromUrlInfo
    fullName: com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse*
  name: uploadRangeFromUrlWithResponse
  nameWithType: ShareFileAsyncClient.uploadRangeFromUrlWithResponse
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareFileAsyncClient.clearRange*
  name: clearRange
  nameWithType: ShareFileAsyncClient.clearRange
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.clearRange
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse*
  name: clearRangeWithResponse
  nameWithType: ShareFileAsyncClient.clearRangeWithResponse
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile*
  name: uploadFromFile
  nameWithType: ShareFileAsyncClient.uploadFromFile
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile
  package: com.azure.storage.file.share
- uid: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.ShareFileRange>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareFileRange
    name: ShareFileRange
    fullName: com.azure.storage.file.share.models.ShareFileRange
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareFileAsyncClient.listRanges*
  name: listRanges
  nameWithType: ShareFileAsyncClient.listRanges
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.listRanges
  package: com.azure.storage.file.share
- uid: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.HandleItem>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.HandleItem
    name: HandleItem
    fullName: com.azure.storage.file.share.models.HandleItem
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareFileAsyncClient.listHandles*
  name: listHandles
  nameWithType: ShareFileAsyncClient.listHandles
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.listHandles
  package: com.azure.storage.file.share
- uid: java.lang.Integer
  spec.java:
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
- uid: reactor.core.publisher.Mono<com.azure.storage.file.share.models.CloseHandlesInfo>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.CloseHandlesInfo
    name: CloseHandlesInfo
    fullName: com.azure.storage.file.share.models.CloseHandlesInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandle*
  name: forceCloseHandle
  nameWithType: ShareFileAsyncClient.forceCloseHandle
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandle
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.CloseHandlesInfo>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.CloseHandlesInfo
    name: CloseHandlesInfo
    fullName: com.azure.storage.file.share.models.CloseHandlesInfo
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandleWithResponse*
  name: forceCloseHandleWithResponse
  nameWithType: ShareFileAsyncClient.forceCloseHandleWithResponse
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandleWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareFileAsyncClient.forceCloseAllHandles*
  name: forceCloseAllHandles
  nameWithType: ShareFileAsyncClient.forceCloseAllHandles
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.forceCloseAllHandles
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareFileAsyncClient.getShareSnapshotId*
  name: getShareSnapshotId
  nameWithType: ShareFileAsyncClient.getShareSnapshotId
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.getShareSnapshotId
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareFileAsyncClient.getShareName*
  name: getShareName
  nameWithType: ShareFileAsyncClient.getShareName
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.getShareName
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareFileAsyncClient.getFilePath*
  name: getFilePath
  nameWithType: ShareFileAsyncClient.getFilePath
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.getFilePath
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareFileAsyncClient.getAccountName*
  name: getAccountName
  nameWithType: ShareFileAsyncClient.getAccountName
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.getAccountName
  package: com.azure.storage.file.share
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: com.azure.storage.file.share.ShareFileAsyncClient.getHttpPipeline*
  name: getHttpPipeline
  nameWithType: ShareFileAsyncClient.getHttpPipeline
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.getHttpPipeline
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.sas.ShareServiceSasSignatureValues
  name: ShareServiceSasSignatureValues
  nameWithType: ShareServiceSasSignatureValues
  fullName: com.azure.storage.file.share.sas.ShareServiceSasSignatureValues
- uid: com.azure.storage.file.share.ShareFileAsyncClient.generateSas*
  name: generateSas
  nameWithType: ShareFileAsyncClient.generateSas
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.generateSas
  package: com.azure.storage.file.share
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.storage.file.share.models.ShareFileInfo
  name: ShareFileInfo
  nameWithType: ShareFileInfo
  fullName: com.azure.storage.file.share.models.ShareFileInfo
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: com.azure.storage.file.share.models.ShareFileCopyInfo,java.lang.Void
  name: ShareFileCopyInfo,Void
  nameWithType: ShareFileCopyInfo,Void
  fullName: com.azure.storage.file.share.models.ShareFileCopyInfo,java.lang.Void
- uid: com.azure.core.util.polling.PollerFlux
  name: PollerFlux
  nameWithType: PollerFlux
  fullName: com.azure.core.util.polling.PollerFlux
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.storage.file.share.models.ShareFileProperties
  name: ShareFileProperties
  nameWithType: ShareFileProperties
  fullName: com.azure.storage.file.share.models.ShareFileProperties
- uid: reactor.core.publisher.Flux
  name: Flux
  nameWithType: Flux
  fullName: reactor.core.publisher.Flux
- uid: java.nio.ByteBuffer
  name: ByteBuffer
  nameWithType: ByteBuffer
  fullName: java.nio.ByteBuffer
- uid: com.azure.storage.file.share.models.ShareFileDownloadAsyncResponse
  name: ShareFileDownloadAsyncResponse
  nameWithType: ShareFileDownloadAsyncResponse
  fullName: com.azure.storage.file.share.models.ShareFileDownloadAsyncResponse
- uid: com.azure.storage.file.share.models.ShareFileMetadataInfo
  name: ShareFileMetadataInfo
  nameWithType: ShareFileMetadataInfo
  fullName: com.azure.storage.file.share.models.ShareFileMetadataInfo
- uid: com.azure.storage.file.share.models.ShareFileUploadInfo
  name: ShareFileUploadInfo
  nameWithType: ShareFileUploadInfo
  fullName: com.azure.storage.file.share.models.ShareFileUploadInfo
- uid: com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo
  name: ShareFileUploadRangeFromUrlInfo
  nameWithType: ShareFileUploadRangeFromUrlInfo
  fullName: com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
- uid: com.azure.storage.file.share.models.HandleItem
  name: HandleItem
  nameWithType: HandleItem
  fullName: com.azure.storage.file.share.models.HandleItem
- uid: com.azure.storage.file.share.models.CloseHandlesInfo
  name: CloseHandlesInfo
  nameWithType: CloseHandlesInfo
  fullName: com.azure.storage.file.share.models.CloseHandlesInfo
