### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.file.share.ShareFileAsyncClient"
  id: "ShareFileAsyncClient"
  parent: "com.azure.storage.file.share"
  children:
  - "com.azure.storage.file.share.ShareFileAsyncClient.FILE_DEFAULT_BLOCK_SIZE"
  - "com.azure.storage.file.share.ShareFileAsyncClient.ShareFileAsyncClient(com.azure.storage.file.share.implementation.AzureFileStorageImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.share.ShareServiceVersion)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.abortCopy(java.lang.String)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse(java.lang.String)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.beginCopy(java.lang.String,com.azure.storage.file.share.FileSmbProperties,java.lang.String,com.azure.storage.file.share.models.PermissionCopyModeType,java.lang.Boolean,java.lang.Boolean,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.storage.file.share.models.ShareRequestConditions)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.clearRange(long)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse(long,long)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse(long,long,com.azure.storage.file.share.models.ShareRequestConditions)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse(long,long,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.create(long)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.delete()"
  - "com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse()"
  - "com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse(com.azure.storage.file.share.models.ShareRequestConditions)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse(com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.download()"
  - "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFile(java.lang.String)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareFileRange)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse(com.azure.storage.file.share.models.ShareFileRange,java.lang.Boolean)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse(com.azure.storage.file.share.models.ShareFileRange,java.lang.Boolean,com.azure.storage.file.share.models.ShareRequestConditions)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse(com.azure.storage.file.share.models.ShareFileRange,java.lang.Boolean,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.exists()"
  - "com.azure.storage.file.share.ShareFileAsyncClient.existsWithResponse()"
  - "com.azure.storage.file.share.ShareFileAsyncClient.existsWithResponse(com.azure.core.util.Context)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseAllHandles()"
  - "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseAllHandlesWithOptionalTimeout(java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandle(java.lang.String)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandleWithResponse(java.lang.String)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandleWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.getAccountName()"
  - "com.azure.storage.file.share.ShareFileAsyncClient.getFilePath()"
  - "com.azure.storage.file.share.ShareFileAsyncClient.getFileUrl()"
  - "com.azure.storage.file.share.ShareFileAsyncClient.getHttpPipeline()"
  - "com.azure.storage.file.share.ShareFileAsyncClient.getProperties()"
  - "com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse()"
  - "com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse(com.azure.storage.file.share.models.ShareRequestConditions)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse(com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.getServiceVersion()"
  - "com.azure.storage.file.share.ShareFileAsyncClient.getShareName()"
  - "com.azure.storage.file.share.ShareFileAsyncClient.getShareSnapshotId()"
  - "com.azure.storage.file.share.ShareFileAsyncClient.listHandles()"
  - "com.azure.storage.file.share.ShareFileAsyncClient.listHandles(java.lang.Integer)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.listHandlesWithOptionalTimeout(java.lang.Integer,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.listRanges()"
  - "com.azure.storage.file.share.ShareFileAsyncClient.listRanges(com.azure.storage.file.share.models.ShareFileRange)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.listRanges(com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.listRangesWithOptionalTimeout(com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.setProperties(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile(java.lang.String)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrl(long,long,long,java.lang.String)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long,long,long,java.lang.String)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long,long,long,java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long,long,long,java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Long)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Long,com.azure.storage.file.share.models.ShareRequestConditions)"
  - "com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Long,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  langs:
  - "java"
  name: "ShareFileAsyncClient"
  nameWithType: "ShareFileAsyncClient"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient"
  type: "Class"
  package: "com.azure.storage.file.share"
  summary: "This class provides a client that contains all the operations for interacting with file in Azure Storage File Service. Operations allowed by the client are creating, copying, uploading, downloading, deleting and listing on a file, retrieving properties, setting metadata and list or force close handles of the file.\n\n**Instantiating an Asynchronous File Client**\n\n```java\nShareFileAsyncClient client = new ShareFileClientBuilder()\n     .connectionString(\"${connectionString}\")\n     .endpoint(\"${endpoint}\")\n     .buildFileAsyncClient();\n```\n\nView <xref uid=\"com.azure.storage.file.share.ShareFileClientBuilder\" data-throw-if-not-resolved=\"false\">this</xref> for additional ways to construct the client."
  syntax:
    content: "public class ShareFileAsyncClient"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.FILE_DEFAULT_BLOCK_SIZE"
  id: "FILE_DEFAULT_BLOCK_SIZE"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "FILE_DEFAULT_BLOCK_SIZE"
  nameWithType: "ShareFileAsyncClient.FILE_DEFAULT_BLOCK_SIZE"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.FILE_DEFAULT_BLOCK_SIZE"
  type: "Field"
  package: "com.azure.storage.file.share"
  syntax:
    content: "static final long FILE_DEFAULT_BLOCK_SIZE"
    return:
      type: "long"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.ShareFileAsyncClient(com.azure.storage.file.share.implementation.AzureFileStorageImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.share.ShareServiceVersion)"
  id: "ShareFileAsyncClient(com.azure.storage.file.share.implementation.AzureFileStorageImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.share.ShareServiceVersion)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "ShareFileAsyncClient(AzureFileStorageImpl azureFileStorageClient, String shareName, String filePath, String snapshot, String accountName, ShareServiceVersion serviceVersion)"
  nameWithType: "ShareFileAsyncClient.ShareFileAsyncClient(AzureFileStorageImpl azureFileStorageClient, String shareName, String filePath, String snapshot, String accountName, ShareServiceVersion serviceVersion)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.ShareFileAsyncClient(AzureFileStorageImpl azureFileStorageClient, String shareName, String filePath, String snapshot, String accountName, ShareServiceVersion serviceVersion)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.ShareFileAsyncClient*"
  type: "Constructor"
  package: "com.azure.storage.file.share"
  summary: "Creates a ShareFileAsyncClient that sends requests to the storage file at <xref uid=\"\" data-throw-if-not-resolved=\"false\">endpoint</xref>. Each service call goes through the <xref uid=\"\" data-throw-if-not-resolved=\"false\">pipeline</xref> in the `client`."
  syntax:
    content: " ShareFileAsyncClient(AzureFileStorageImpl azureFileStorageClient, String shareName, String filePath, String snapshot, String accountName, ShareServiceVersion serviceVersion)"
    parameters:
    - id: "azureFileStorageClient"
      type: "com.azure.storage.file.share.implementation.AzureFileStorageImpl"
      description: "Client that interacts with the service interfaces"
    - id: "shareName"
      type: "java.lang.String"
      description: "Name of the share"
    - id: "filePath"
      type: "java.lang.String"
      description: "Path to the file"
    - id: "snapshot"
      type: "java.lang.String"
      description: "The snapshot of the share"
    - id: "accountName"
      type: "java.lang.String"
    - id: "serviceVersion"
      type: "com.azure.storage.file.share.ShareServiceVersion"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopy(java.lang.String)"
  id: "abortCopy(java.lang.String)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "abortCopy(String copyId)"
  nameWithType: "ShareFileAsyncClient.abortCopy(String copyId)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopy(String copyId)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopy*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Aborts a pending Copy File operation, and leaves a destination file with zero length and full metadata.\n\n**Code Samples**\n\nAbort copy file from copy id(\"someCopyId\")\n\n```java\nshareFileAsyncClient.abortCopy(\"someCopyId\")\n     .doOnSuccess(response -> System.out.println(\"Abort copying the file completed.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-file"
  syntax:
    content: "public Mono<Void> abortCopy(String copyId)"
    parameters:
    - id: "copyId"
      type: "java.lang.String"
      description: "Specifies the copy id which has copying pending status associate with it."
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "An empty response."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse(java.lang.String)"
  id: "abortCopyWithResponse(java.lang.String)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "abortCopyWithResponse(String copyId)"
  nameWithType: "ShareFileAsyncClient.abortCopyWithResponse(String copyId)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse(String copyId)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Aborts a pending Copy File operation, and leaves a destination file with zero length and full metadata.\n\n**Code Samples**\n\nAbort copy file from copy id(\"someCopyId\")\n\n```java\nshareFileAsyncClient.abortCopyWithResponse(\"someCopyId\")\n     .subscribe(response -> System.out.printf(\"Abort copying the file completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-file"
  syntax:
    content: "public Mono<Response<Void>> abortCopyWithResponse(String copyId)"
    parameters:
    - id: "copyId"
      type: "java.lang.String"
      description: "Specifies the copy id which has copying pending status associate with it."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "A response containing the status of aborting copy the file."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)"
  id: "abortCopyWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "abortCopyWithResponse(String copyId, ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.abortCopyWithResponse(String copyId, ShareRequestConditions requestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse(String copyId, ShareRequestConditions requestConditions)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Aborts a pending Copy File operation, and leaves a destination file with zero length and full metadata.\n\n**Code Samples**\n\nAbort copy file from copy id(\"someCopyId\")\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.abortCopyWithResponse(\"someCopyId\", requestConditions)\n     .subscribe(response -> System.out.printf(\"Abort copying the file completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-file"
  syntax:
    content: "public Mono<Response<Void>> abortCopyWithResponse(String copyId, ShareRequestConditions requestConditions)"
    parameters:
    - id: "copyId"
      type: "java.lang.String"
      description: "Specifies the copy id which has copying pending status associate with it."
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\">ShareRequestConditions</xref>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "A response containing the status of aborting copy the file."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  id: "abortCopyWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "abortCopyWithResponse(String copyId, ShareRequestConditions requestConditions, Context context)"
  nameWithType: "ShareFileAsyncClient.abortCopyWithResponse(String copyId, ShareRequestConditions requestConditions, Context context)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse(String copyId, ShareRequestConditions requestConditions, Context context)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  syntax:
    content: " Mono<Response<Void>> abortCopyWithResponse(String copyId, ShareRequestConditions requestConditions, Context context)"
    parameters:
    - id: "copyId"
      type: "java.lang.String"
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.beginCopy(java.lang.String,com.azure.storage.file.share.FileSmbProperties,java.lang.String,com.azure.storage.file.share.models.PermissionCopyModeType,java.lang.Boolean,java.lang.Boolean,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.storage.file.share.models.ShareRequestConditions)"
  id: "beginCopy(java.lang.String,com.azure.storage.file.share.FileSmbProperties,java.lang.String,com.azure.storage.file.share.models.PermissionCopyModeType,java.lang.Boolean,java.lang.Boolean,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.storage.file.share.models.ShareRequestConditions)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "beginCopy(String sourceUrl, FileSmbProperties smbProperties, String filePermission, PermissionCopyModeType filePermissionCopyMode, Boolean ignoreReadOnly, Boolean setArchiveAttribute, Map<String,String> metadata, Duration pollInterval, ShareRequestConditions destinationRequestConditions)"
  nameWithType: "ShareFileAsyncClient.beginCopy(String sourceUrl, FileSmbProperties smbProperties, String filePermission, PermissionCopyModeType filePermissionCopyMode, Boolean ignoreReadOnly, Boolean setArchiveAttribute, Map<String,String> metadata, Duration pollInterval, ShareRequestConditions destinationRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.beginCopy(String sourceUrl, FileSmbProperties smbProperties, String filePermission, PermissionCopyModeType filePermissionCopyMode, Boolean ignoreReadOnly, Boolean setArchiveAttribute, Map<String,String> metadata, Duration pollInterval, ShareRequestConditions destinationRequestConditions)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.beginCopy*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Copies a blob or file to a destination file within the storage account.\n\n**Code Samples**\n\nCopy file from source url to the `resourcePath`\n\n```java\nFileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n boolean ignoreReadOnly = false; // Default value\n boolean setArchiveAttribute = true; // Default value\n ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n \n PollerFlux<ShareFileCopyInfo, Void> poller = shareFileAsyncClient.beginCopy(\n     \"https://{accountName}.file.core.windows.net?{SASToken}\",\n     smbProperties, filePermission, PermissionCopyModeType.SOURCE, ignoreReadOnly, setArchiveAttribute,\n     Collections.singletonMap(\"file\", \"metadata\"), Duration.ofSeconds(2), requestConditions);\n \n poller.subscribe(response -> {\n     final ShareFileCopyInfo value = response.getValue();\n     System.out.printf(\"Copy source: %s. Status: %s.%n\", value.getCopySourceUrl(), value.getCopyStatus());\n }, error -> System.err.println(\"Error: \" + error), () -> System.out.println(\"Complete copying the file.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/copy-file"
  syntax:
    content: "public PollerFlux<ShareFileCopyInfo,Void> beginCopy(String sourceUrl, FileSmbProperties smbProperties, String filePermission, PermissionCopyModeType filePermissionCopyMode, Boolean ignoreReadOnly, Boolean setArchiveAttribute, Map<String,String> metadata, Duration pollInterval, ShareRequestConditions destinationRequestConditions)"
    parameters:
    - id: "sourceUrl"
      type: "java.lang.String"
      description: "Specifies the URL of the source file or blob, up to 2 KB in length."
    - id: "smbProperties"
      type: "com.azure.storage.file.share.FileSmbProperties"
      description: "The user settable file smb properties."
    - id: "filePermission"
      type: "java.lang.String"
      description: "The file permission of the file."
    - id: "filePermissionCopyMode"
      type: "com.azure.storage.file.share.models.PermissionCopyModeType"
      description: "Mode of file permission acquisition."
    - id: "ignoreReadOnly"
      type: "java.lang.Boolean"
      description: "Whether or not to copy despite target being read only. (default is false)"
    - id: "setArchiveAttribute"
      type: "java.lang.Boolean"
      description: "Whether or not the archive attribute is to be set on the target. (default is true)"
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional name-value pairs associated with the file as metadata. Metadata names must adhere to the\n naming rules."
    - id: "pollInterval"
      type: "java.time.Duration"
      description: "Duration between each poll for the copy status. If none is specified, a default of one second\n is used."
    - id: "destinationRequestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\">ShareRequestConditions</xref>"
    return:
      type: "com.azure.core.util.polling.PollerFlux<com.azure.storage.file.share.models.ShareFileCopyInfo,java.lang.Void>"
      description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\">PollerFlux</xref> that polls the file copy operation until it has completed or has been cancelled."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration)"
  id: "beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "beginCopy(String sourceUrl, Map<String,String> metadata, Duration pollInterval)"
  nameWithType: "ShareFileAsyncClient.beginCopy(String sourceUrl, Map<String,String> metadata, Duration pollInterval)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.beginCopy(String sourceUrl, Map<String,String> metadata, Duration pollInterval)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.beginCopy*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Copies a blob or file to a destination file within the storage account.\n\n**Code Samples**\n\nCopy file from source url to the `resourcePath`\n\n```java\nPollerFlux<ShareFileCopyInfo, Void> poller = shareFileAsyncClient.beginCopy(\n     \"https://{accountName}.file.core.windows.net?{SASToken}\",\n     Collections.singletonMap(\"file\", \"metadata\"), Duration.ofSeconds(2));\n \n poller.subscribe(response -> {\n     final ShareFileCopyInfo value = response.getValue();\n     System.out.printf(\"Copy source: %s. Status: %s.%n\", value.getCopySourceUrl(), value.getCopyStatus());\n }, error -> System.err.println(\"Error: \" + error),\n     () -> System.out.println(\"Complete copying the file.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/copy-file"
  syntax:
    content: "public PollerFlux<ShareFileCopyInfo,Void> beginCopy(String sourceUrl, Map<String,String> metadata, Duration pollInterval)"
    parameters:
    - id: "sourceUrl"
      type: "java.lang.String"
      description: "Specifies the URL of the source file or blob, up to 2 KB in length."
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional name-value pairs associated with the file as metadata. Metadata names must adhere to the\n naming rules."
    - id: "pollInterval"
      type: "java.time.Duration"
      description: "Duration between each poll for the copy status. If none is specified, a default of one second\n is used."
    return:
      type: "com.azure.core.util.polling.PollerFlux<com.azure.storage.file.share.models.ShareFileCopyInfo,java.lang.Void>"
      description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\">PollerFlux</xref> that polls the file copy operation until it has completed or has been cancelled."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.clearRange(long)"
  id: "clearRange(long)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "clearRange(long length)"
  nameWithType: "ShareFileAsyncClient.clearRange(long length)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.clearRange(long length)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.clearRange*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Clear a range of bytes to specific of a file in storage file service. Clear operations performs an in-place write on the specified file.\n\n**Code Samples**\n\nClears the first 1024 bytes.\n\n```java\nshareFileAsyncClient.clearRange(1024).subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete clearing the range!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range"
  syntax:
    content: "public Mono<ShareFileUploadInfo> clearRange(long length)"
    parameters:
    - id: "length"
      type: "long"
      description: "Specifies the number of bytes being cleared."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileUploadInfo>"
      description: "The <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadInfo\" data-throw-if-not-resolved=\"false\">file upload info</xref>"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse(long,long)"
  id: "clearRangeWithResponse(long,long)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "clearRangeWithResponse(long length, long offset)"
  nameWithType: "ShareFileAsyncClient.clearRangeWithResponse(long length, long offset)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse(long length, long offset)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Clear a range of bytes to specific of a file in storage file service. Clear operations performs an in-place write on the specified file.\n\n**Code Samples**\n\nClear the range starting from 1024 with length of 1024.\n\n```java\nshareFileAsyncClient.clearRangeWithResponse(1024, 1024).subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete clearing the range!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range"
  syntax:
    content: "public Mono<Response<ShareFileUploadInfo>> clearRangeWithResponse(long length, long offset)"
    parameters:
    - id: "length"
      type: "long"
      description: "Specifies the number of bytes being cleared in the request body."
    - id: "offset"
      type: "long"
      description: "Optional starting point of the upload range. It will start from the beginning if it is\n <code>null</code>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileUploadInfo>>"
      description: "A response of <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadInfo\" data-throw-if-not-resolved=\"false\">file upload info</xref> that only contains headers and response\n status code."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse(long,long,com.azure.storage.file.share.models.ShareRequestConditions)"
  id: "clearRangeWithResponse(long,long,com.azure.storage.file.share.models.ShareRequestConditions)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "clearRangeWithResponse(long length, long offset, ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.clearRangeWithResponse(long length, long offset, ShareRequestConditions requestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse(long length, long offset, ShareRequestConditions requestConditions)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Clear a range of bytes to specific of a file in storage file service. Clear operations performs an in-place write on the specified file.\n\n**Code Samples**\n\nClear the range starting from 1024 with length of 1024.\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.clearRangeWithResponse(1024, 1024, requestConditions).subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete clearing the range!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range"
  syntax:
    content: "public Mono<Response<ShareFileUploadInfo>> clearRangeWithResponse(long length, long offset, ShareRequestConditions requestConditions)"
    parameters:
    - id: "length"
      type: "long"
      description: "Specifies the number of bytes being cleared in the request body."
    - id: "offset"
      type: "long"
      description: "Optional starting point of the upload range. It will start from the beginning if it is\n <code>null</code>"
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\">ShareRequestConditions</xref>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileUploadInfo>>"
      description: "A response of <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadInfo\" data-throw-if-not-resolved=\"false\">file upload info</xref> that only contains headers and response\n status code."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse(long,long,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  id: "clearRangeWithResponse(long,long,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "clearRangeWithResponse(long length, long offset, ShareRequestConditions requestConditions, Context context)"
  nameWithType: "ShareFileAsyncClient.clearRangeWithResponse(long length, long offset, ShareRequestConditions requestConditions, Context context)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse(long length, long offset, ShareRequestConditions requestConditions, Context context)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  syntax:
    content: " Mono<Response<ShareFileUploadInfo>> clearRangeWithResponse(long length, long offset, ShareRequestConditions requestConditions, Context context)"
    parameters:
    - id: "length"
      type: "long"
    - id: "offset"
      type: "long"
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileUploadInfo>>"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.create(long)"
  id: "create(long)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "create(long maxSize)"
  nameWithType: "ShareFileAsyncClient.create(long maxSize)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.create(long maxSize)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.create*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Creates a file in the storage account and returns a response of <xref uid=\"com.azure.storage.file.share.models.ShareFileInfo\" data-throw-if-not-resolved=\"false\">ShareFileInfo</xref> to interact with it.\n\n**Code Samples**\n\nCreate the file with size 1KB.\n\n```java\nshareFileAsyncClient.create(1024).subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete creating the file!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file"
  syntax:
    content: "public Mono<ShareFileInfo> create(long maxSize)"
    parameters:
    - id: "maxSize"
      type: "long"
      description: "The maximum size in bytes for the file, up to 1 TiB."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileInfo>"
      description: "A response containing the file info and the status of creating the file."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  id: "createWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  nameWithType: "ShareFileAsyncClient.createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Creates a file in the storage account and returns a response of ShareFileInfo to interact with it.\n\n**Code Samples**\n\nCreate the file with length of 1024 bytes, some headers, file smb properties and metadata.\n\n```java\nShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()\n     .setContentType(\"text/html\")\n     .setContentEncoding(\"gzip\")\n     .setContentLanguage(\"en\")\n     .setCacheControl(\"no-transform\")\n     .setContentDisposition(\"attachment\");\n FileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n shareFileAsyncClient.createWithResponse(1024, httpHeaders, smbProperties, filePermission,\n     Collections.singletonMap(\"directory\", \"metadata\"))\n     .subscribe(response -> System.out.printf(\"Creating the file completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file"
  syntax:
    content: "public Mono<Response<ShareFileInfo>> createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
    parameters:
    - id: "maxSize"
      type: "long"
      description: "The maximum size in bytes for the file, up to 1 TiB."
    - id: "httpHeaders"
      type: "com.azure.storage.file.share.models.ShareFileHttpHeaders"
      description: "The user settable file http headers."
    - id: "smbProperties"
      type: "com.azure.storage.file.share.FileSmbProperties"
      description: "The user settable file smb properties."
    - id: "filePermission"
      type: "java.lang.String"
      description: "The file permission of the file."
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional name-value pairs associated with the file as metadata."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileInfo>>"
      description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileInfo\" data-throw-if-not-resolved=\"false\">file info</xref> and the status of creating the file."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)"
  id: "createWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Creates a file in the storage account and returns a response of ShareFileInfo to interact with it.\n\n**Code Samples**\n\nCreate the file with length of 1024 bytes, some headers, file smb properties and metadata.\n\n```java\nShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()\n     .setContentType(\"text/html\")\n     .setContentEncoding(\"gzip\")\n     .setContentLanguage(\"en\")\n     .setCacheControl(\"no-transform\")\n     .setContentDisposition(\"attachment\");\n FileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n \n ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n \n shareFileAsyncClient.createWithResponse(1024, httpHeaders, smbProperties, filePermission,\n     Collections.singletonMap(\"directory\", \"metadata\"), requestConditions)\n     .subscribe(response -> System.out.printf(\"Creating the file completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file"
  syntax:
    content: "public Mono<Response<ShareFileInfo>> createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)"
    parameters:
    - id: "maxSize"
      type: "long"
      description: "The maximum size in bytes for the file, up to 1 TiB."
    - id: "httpHeaders"
      type: "com.azure.storage.file.share.models.ShareFileHttpHeaders"
      description: "The user settable file http headers."
    - id: "smbProperties"
      type: "com.azure.storage.file.share.FileSmbProperties"
      description: "The user settable file smb properties."
    - id: "filePermission"
      type: "java.lang.String"
      description: "The file permission of the file."
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional name-value pairs associated with the file as metadata."
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\">ShareRequestConditions</xref>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileInfo>>"
      description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileInfo\" data-throw-if-not-resolved=\"false\">file info</xref> and the status of creating the file."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  id: "createWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions, Context context)"
  nameWithType: "ShareFileAsyncClient.createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions, Context context)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions, Context context)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  syntax:
    content: " Mono<Response<ShareFileInfo>> createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions, Context context)"
    parameters:
    - id: "maxSize"
      type: "long"
    - id: "httpHeaders"
      type: "com.azure.storage.file.share.models.ShareFileHttpHeaders"
    - id: "smbProperties"
      type: "com.azure.storage.file.share.FileSmbProperties"
    - id: "filePermission"
      type: "java.lang.String"
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileInfo>>"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.delete()"
  id: "delete()"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "delete()"
  nameWithType: "ShareFileAsyncClient.delete()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.delete()"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.delete*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Deletes the file associate with the client.\n\n**Code Samples**\n\nDelete the file\n\n```java\nshareFileAsyncClient.delete().subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete deleting the file!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2"
  syntax:
    content: "public Mono<Void> delete()"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "An empty response"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse()"
  id: "deleteWithResponse()"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "deleteWithResponse()"
  nameWithType: "ShareFileAsyncClient.deleteWithResponse()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse()"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Deletes the file associate with the client.\n\n**Code Samples**\n\nDelete the file\n\n```java\nshareFileAsyncClient.deleteWithResponse().subscribe(\n     response -> System.out.println(\"Complete deleting the file with status code:\" + response.getStatusCode()),\n     error -> System.err.print(error.toString())\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2"
  syntax:
    content: "public Mono<Response<Void>> deleteWithResponse()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "A response that only contains headers and response status code"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse(com.azure.storage.file.share.models.ShareRequestConditions)"
  id: "deleteWithResponse(com.azure.storage.file.share.models.ShareRequestConditions)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "deleteWithResponse(ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.deleteWithResponse(ShareRequestConditions requestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse(ShareRequestConditions requestConditions)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Deletes the file associate with the client.\n\n**Code Samples**\n\nDelete the file\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.deleteWithResponse(requestConditions).subscribe(\n     response -> System.out.println(\"Complete deleting the file with status code:\" + response.getStatusCode()),\n     error -> System.err.print(error.toString())\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2"
  syntax:
    content: "public Mono<Response<Void>> deleteWithResponse(ShareRequestConditions requestConditions)"
    parameters:
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\">ShareRequestConditions</xref>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "A response that only contains headers and response status code"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse(com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  id: "deleteWithResponse(com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "deleteWithResponse(ShareRequestConditions requestConditions, Context context)"
  nameWithType: "ShareFileAsyncClient.deleteWithResponse(ShareRequestConditions requestConditions, Context context)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse(ShareRequestConditions requestConditions, Context context)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  syntax:
    content: " Mono<Response<Void>> deleteWithResponse(ShareRequestConditions requestConditions, Context context)"
    parameters:
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.download()"
  id: "download()"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "download()"
  nameWithType: "ShareFileAsyncClient.download()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.download()"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.download*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Downloads a file from the system, including its metadata and properties\n\n**Code Samples**\n\nDownload the file with its metadata and properties.\n\n```java\nshareFileAsyncClient.download().subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete downloading the data!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file"
  syntax:
    content: "public Flux<ByteBuffer> download()"
    return:
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "A reactive response containing the file data."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFile(java.lang.String)"
  id: "downloadToFile(java.lang.String)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "downloadToFile(String downloadFilePath)"
  nameWithType: "ShareFileAsyncClient.downloadToFile(String downloadFilePath)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFile(String downloadFilePath)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFile*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Downloads a file from the system, including its metadata and properties into a file specified by the path.\n\nThe file will be created and must not exist, if the file already exists a <xref uid=\"\" data-throw-if-not-resolved=\"false\">FileAlreadyExistsException</xref> will be thrown.\n\n**Code Samples**\n\nDownload the file to current folder.\n\n```java\nshareFileAsyncClient.downloadToFile(\"somelocalfilepath\").subscribe(\n     response -> {\n         if (Files.exists(Paths.get(\"somelocalfilepath\"))) {\n             System.out.println(\"Successfully downloaded the file.\");\n         }\n     },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete downloading the file!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file"
  syntax:
    content: "public Mono<ShareFileProperties> downloadToFile(String downloadFilePath)"
    parameters:
    - id: "downloadFilePath"
      type: "java.lang.String"
      description: "The path where store the downloaded file"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileProperties>"
      description: "An empty response."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareFileRange)"
  id: "downloadToFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareFileRange)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "downloadToFileWithResponse(String downloadFilePath, ShareFileRange range)"
  nameWithType: "ShareFileAsyncClient.downloadToFileWithResponse(String downloadFilePath, ShareFileRange range)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse(String downloadFilePath, ShareFileRange range)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Downloads a file from the system, including its metadata and properties into a file specified by the path.\n\nThe file will be created and must not exist, if the file already exists a <xref uid=\"\" data-throw-if-not-resolved=\"false\">FileAlreadyExistsException</xref> will be thrown.\n\n**Code Samples**\n\nDownload the file from 1024 to 2048 bytes to current folder.\n\n```java\nshareFileAsyncClient.downloadToFileWithResponse(\"somelocalfilepath\", new ShareFileRange(1024, 2047L))\n     .subscribe(\n         response -> {\n             if (Files.exists(Paths.get(\"somelocalfilepath\"))) {\n                 System.out.println(\"Successfully downloaded the file with status code \"\n                     + response.getStatusCode());\n             }\n         },\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete downloading the file!\")\n     );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file"
  syntax:
    content: "public Mono<Response<ShareFileProperties>> downloadToFileWithResponse(String downloadFilePath, ShareFileRange range)"
    parameters:
    - id: "downloadFilePath"
      type: "java.lang.String"
      description: "The path where store the downloaded file"
    - id: "range"
      type: "com.azure.storage.file.share.models.ShareFileRange"
      description: "Optional byte range which returns file data only from the specified range."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileProperties>>"
      description: "An empty response."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions)"
  id: "downloadToFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, ShareRequestConditions requestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, ShareRequestConditions requestConditions)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Downloads a file from the system, including its metadata and properties into a file specified by the path.\n\nThe file will be created and must not exist, if the file already exists a <xref uid=\"\" data-throw-if-not-resolved=\"false\">FileAlreadyExistsException</xref> will be thrown.\n\n**Code Samples**\n\nDownload the file from 1024 to 2048 bytes to current folder.\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.downloadToFileWithResponse(\"somelocalfilepath\", new ShareFileRange(1024, 2047L),\n     requestConditions)\n     .subscribe(\n         response -> {\n             if (Files.exists(Paths.get(\"somelocalfilepath\"))) {\n                 System.out.println(\"Successfully downloaded the file with status code \"\n                     + response.getStatusCode());\n             }\n         },\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete downloading the file!\")\n     );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file"
  syntax:
    content: "public Mono<Response<ShareFileProperties>> downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, ShareRequestConditions requestConditions)"
    parameters:
    - id: "downloadFilePath"
      type: "java.lang.String"
      description: "The path where store the downloaded file"
    - id: "range"
      type: "com.azure.storage.file.share.models.ShareFileRange"
      description: "Optional byte range which returns file data only from the specified range."
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\">ShareRequestConditions</xref>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileProperties>>"
      description: "An empty response."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  id: "downloadToFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, ShareRequestConditions requestConditions, Context context)"
  nameWithType: "ShareFileAsyncClient.downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, ShareRequestConditions requestConditions, Context context)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, ShareRequestConditions requestConditions, Context context)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  syntax:
    content: " Mono<Response<ShareFileProperties>> downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, ShareRequestConditions requestConditions, Context context)"
    parameters:
    - id: "downloadFilePath"
      type: "java.lang.String"
    - id: "range"
      type: "com.azure.storage.file.share.models.ShareFileRange"
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileProperties>>"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse(com.azure.storage.file.share.models.ShareFileRange,java.lang.Boolean)"
  id: "downloadWithResponse(com.azure.storage.file.share.models.ShareFileRange,java.lang.Boolean)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5)"
  nameWithType: "ShareFileAsyncClient.downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Downloads a file from the system, including its metadata and properties\n\n**Code Samples**\n\nDownload the file from 1024 to 2048 bytes with its metadata and properties and without the contentMD5.\n\n```java\nshareFileAsyncClient.downloadWithResponse(new ShareFileRange(1024, 2047L), false)\n     .subscribe(response ->\n             System.out.printf(\"Complete downloading the data with status code %d%n\", response.getStatusCode()),\n         error -> System.err.println(error.getMessage())\n     );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file"
  syntax:
    content: "public Mono<ShareFileDownloadAsyncResponse> downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5)"
    parameters:
    - id: "range"
      type: "com.azure.storage.file.share.models.ShareFileRange"
      description: "Optional byte range which returns file data only from the specified range."
    - id: "rangeGetContentMD5"
      type: "java.lang.Boolean"
      description: "Optional boolean which the service returns the MD5 hash for the range when it sets to\n true, as long as the range is less than or equal to 4 MB in size."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileDownloadAsyncResponse>"
      description: "A reactive response containing response data and the file data."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse(com.azure.storage.file.share.models.ShareFileRange,java.lang.Boolean,com.azure.storage.file.share.models.ShareRequestConditions)"
  id: "downloadWithResponse(com.azure.storage.file.share.models.ShareFileRange,java.lang.Boolean,com.azure.storage.file.share.models.ShareRequestConditions)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5, ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5, ShareRequestConditions requestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5, ShareRequestConditions requestConditions)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Downloads a file from the system, including its metadata and properties\n\n**Code Samples**\n\nDownload the file from 1024 to 2048 bytes with its metadata and properties and without the contentMD5.\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.downloadWithResponse(new ShareFileRange(1024, 2047L), false, requestConditions)\n     .subscribe(response ->\n             System.out.printf(\"Complete downloading the data with status code %d%n\", response.getStatusCode()),\n         error -> System.err.println(error.getMessage())\n     );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file"
  syntax:
    content: "public Mono<ShareFileDownloadAsyncResponse> downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5, ShareRequestConditions requestConditions)"
    parameters:
    - id: "range"
      type: "com.azure.storage.file.share.models.ShareFileRange"
      description: "Optional byte range which returns file data only from the specified range."
    - id: "rangeGetContentMD5"
      type: "java.lang.Boolean"
      description: "Optional boolean which the service returns the MD5 hash for the range when it sets to"
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\">ShareRequestConditions</xref>\n true, as long as the range is less than or equal to 4 MB in size."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileDownloadAsyncResponse>"
      description: "A reactive response containing response data and the file data."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse(com.azure.storage.file.share.models.ShareFileRange,java.lang.Boolean,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  id: "downloadWithResponse(com.azure.storage.file.share.models.ShareFileRange,java.lang.Boolean,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5, ShareRequestConditions requestConditions, Context context)"
  nameWithType: "ShareFileAsyncClient.downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5, ShareRequestConditions requestConditions, Context context)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5, ShareRequestConditions requestConditions, Context context)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  syntax:
    content: " Mono<ShareFileDownloadAsyncResponse> downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5, ShareRequestConditions requestConditions, Context context)"
    parameters:
    - id: "range"
      type: "com.azure.storage.file.share.models.ShareFileRange"
    - id: "rangeGetContentMD5"
      type: "java.lang.Boolean"
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileDownloadAsyncResponse>"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.exists()"
  id: "exists()"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "exists()"
  nameWithType: "ShareFileAsyncClient.exists()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.exists()"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.exists*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Determines if the file this client represents exists in the cloud.\n\n**Code Samples**\n\n```java\nclient.exists().subscribe(response -> System.out.printf(\"Exists? %b%n\", response));\n```"
  syntax:
    content: "public Mono<Boolean> exists()"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Boolean>"
      description: "Flag indicating existence of the file."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.existsWithResponse()"
  id: "existsWithResponse()"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "existsWithResponse()"
  nameWithType: "ShareFileAsyncClient.existsWithResponse()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.existsWithResponse()"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.existsWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Determines if the file this client represents exists in the cloud.\n\n**Code Samples**\n\n```java\nclient.existsWithResponse().subscribe(response -> System.out.printf(\"Exists? %b%n\", response.getValue()));\n```"
  syntax:
    content: "public Mono<Response<Boolean>> existsWithResponse()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Boolean>>"
      description: "Flag indicating existence of the file."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.existsWithResponse(com.azure.core.util.Context)"
  id: "existsWithResponse(com.azure.core.util.Context)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "existsWithResponse(Context context)"
  nameWithType: "ShareFileAsyncClient.existsWithResponse(Context context)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.existsWithResponse(Context context)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.existsWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  syntax:
    content: " Mono<Response<Boolean>> existsWithResponse(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Boolean>>"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseAllHandles()"
  id: "forceCloseAllHandles()"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "forceCloseAllHandles()"
  nameWithType: "ShareFileAsyncClient.forceCloseAllHandles()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseAllHandles()"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseAllHandles*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Closes all handles opened on the file at the service.\n\n**Code Samples**\n\nForce close all handles.\n\n```java\nshareFileAsyncClient.forceCloseAllHandles().subscribe(handlesClosedInfo ->\n     System.out.printf(\"Closed %d open handles on the file.%nFailed to close %d open handles on the file%n\",\n         handlesClosedInfo.getClosedHandles(), handlesClosedInfo.getFailedHandles()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles"
  syntax:
    content: "public Mono<CloseHandlesInfo> forceCloseAllHandles()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.share.models.CloseHandlesInfo>"
      description: "A response that contains information about the closed handles."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseAllHandlesWithOptionalTimeout(java.time.Duration,com.azure.core.util.Context)"
  id: "forceCloseAllHandlesWithOptionalTimeout(java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "forceCloseAllHandlesWithOptionalTimeout(Duration timeout, Context context)"
  nameWithType: "ShareFileAsyncClient.forceCloseAllHandlesWithOptionalTimeout(Duration timeout, Context context)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseAllHandlesWithOptionalTimeout(Duration timeout, Context context)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseAllHandlesWithOptionalTimeout*"
  type: "Method"
  package: "com.azure.storage.file.share"
  syntax:
    content: " PagedFlux<CloseHandlesInfo> forceCloseAllHandlesWithOptionalTimeout(Duration timeout, Context context)"
    parameters:
    - id: "timeout"
      type: "java.time.Duration"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.CloseHandlesInfo>"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandle(java.lang.String)"
  id: "forceCloseHandle(java.lang.String)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "forceCloseHandle(String handleId)"
  nameWithType: "ShareFileAsyncClient.forceCloseHandle(String handleId)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandle(String handleId)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandle*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Closes a handle on the file. This is intended to be used alongside <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient.listHandles()\" data-throw-if-not-resolved=\"false\">#listHandles()</xref>.\n\n**Code Samples**\n\nForce close handles returned by list handles.\n\n```java\nshareFileAsyncClient.listHandles().subscribe(handleItem ->\n     shareFileAsyncClient.forceCloseHandle(handleItem.getHandleId()).subscribe(ignored ->\n         System.out.printf(\"Closed handle %s on resource %s%n\",\n             handleItem.getHandleId(), handleItem.getPath())));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles"
  syntax:
    content: "public Mono<CloseHandlesInfo> forceCloseHandle(String handleId)"
    parameters:
    - id: "handleId"
      type: "java.lang.String"
      description: "Handle ID to be closed."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.share.models.CloseHandlesInfo>"
      description: "A response that contains information about the closed handles."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandleWithResponse(java.lang.String)"
  id: "forceCloseHandleWithResponse(java.lang.String)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "forceCloseHandleWithResponse(String handleId)"
  nameWithType: "ShareFileAsyncClient.forceCloseHandleWithResponse(String handleId)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandleWithResponse(String handleId)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandleWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Closes a handle on the file. This is intended to be used alongside <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient.listHandles()\" data-throw-if-not-resolved=\"false\">#listHandles()</xref>.\n\n**Code Samples**\n\nForce close handles returned by list handles.\n\n```java\nshareFileAsyncClient.listHandles().subscribe(handleItem ->\n     shareFileAsyncClient.forceCloseHandleWithResponse(handleItem.getHandleId()).subscribe(response ->\n         System.out.printf(\"Closing handle %s on resource %s completed with status code %d%n\",\n             handleItem.getHandleId(), handleItem.getPath(), response.getStatusCode())));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles"
  syntax:
    content: "public Mono<Response<CloseHandlesInfo>> forceCloseHandleWithResponse(String handleId)"
    parameters:
    - id: "handleId"
      type: "java.lang.String"
      description: "Handle ID to be closed."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.CloseHandlesInfo>>"
      description: "A response that contains information about the closed handles along with headers and response status\n code."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandleWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "forceCloseHandleWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "forceCloseHandleWithResponse(String handleId, Context context)"
  nameWithType: "ShareFileAsyncClient.forceCloseHandleWithResponse(String handleId, Context context)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandleWithResponse(String handleId, Context context)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandleWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  syntax:
    content: " Mono<Response<CloseHandlesInfo>> forceCloseHandleWithResponse(String handleId, Context context)"
    parameters:
    - id: "handleId"
      type: "java.lang.String"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.CloseHandlesInfo>>"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues)"
  id: "generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)"
  nameWithType: "ShareFileAsyncClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.generateSas*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Generates a service SAS for the file using the specified <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">ShareServiceSasSignatureValues</xref> Note : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\">StorageSharedKeyCredential</xref>\n\nSee <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">ShareServiceSasSignatureValues</xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n ShareFileSasPermission permission = new ShareFileSasPermission().setReadPermission(true);\n \n ShareServiceSasSignatureValues values = new ShareServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n \n shareFileAsyncClient.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  syntax:
    content: "public String generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)"
    parameters:
    - id: "shareServiceSasSignatureValues"
      type: "com.azure.storage.file.share.sas.ShareServiceSasSignatureValues"
      description: "<xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">ShareServiceSasSignatureValues</xref>"
    return:
      type: "java.lang.String"
      description: "A <code>String</code> representing all SAS query parameters."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getAccountName()"
  id: "getAccountName()"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "getAccountName()"
  nameWithType: "ShareFileAsyncClient.getAccountName()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getAccountName()"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.getAccountName*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Get associated account name."
  syntax:
    content: "public String getAccountName()"
    return:
      type: "java.lang.String"
      description: "account name associated with this storage resource."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getFilePath()"
  id: "getFilePath()"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "getFilePath()"
  nameWithType: "ShareFileAsyncClient.getFilePath()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getFilePath()"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.getFilePath*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Get file path of the client.\n\nGet the file path.\n\n```java\nString filePath = shareFileAsyncClient.getFilePath();\n System.out.println(\"The name of the file is \" + filePath);\n```"
  syntax:
    content: "public String getFilePath()"
    return:
      type: "java.lang.String"
      description: "The path of the file."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getFileUrl()"
  id: "getFileUrl()"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "getFileUrl()"
  nameWithType: "ShareFileAsyncClient.getFileUrl()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getFileUrl()"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.getFileUrl*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Get the url of the storage file client."
  syntax:
    content: "public String getFileUrl()"
    return:
      type: "java.lang.String"
      description: "the URL of the storage file client"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getHttpPipeline()"
  id: "getHttpPipeline()"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "getHttpPipeline()"
  nameWithType: "ShareFileAsyncClient.getHttpPipeline()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getHttpPipeline()"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.getHttpPipeline*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Gets the <xref uid=\"\" data-throw-if-not-resolved=\"false\">HttpPipeline</xref> powering this client."
  syntax:
    content: "public HttpPipeline getHttpPipeline()"
    return:
      type: "com.azure.core.http.HttpPipeline"
      description: "The pipeline."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getProperties()"
  id: "getProperties()"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "getProperties()"
  nameWithType: "ShareFileAsyncClient.getProperties()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getProperties()"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.getProperties*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Retrieves the properties of the storage account's file. The properties includes file metadata, last modified date, is server encrypted, and eTag.\n\n**Code Samples**\n\nRetrieve file properties\n\n```java\nshareFileAsyncClient.getProperties()\n     .subscribe(properties -> {\n         System.out.printf(\"File latest modified date is %s.\", properties.getLastModified());\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file-properties"
  syntax:
    content: "public Mono<ShareFileProperties> getProperties()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileProperties>"
      description: "<xref uid=\"com.azure.storage.file.share.models.ShareFileProperties\" data-throw-if-not-resolved=\"false\">Storage file properties</xref>"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse()"
  id: "getPropertiesWithResponse()"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "getPropertiesWithResponse()"
  nameWithType: "ShareFileAsyncClient.getPropertiesWithResponse()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse()"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Retrieves the properties of the storage account's file. The properties includes file metadata, last modified date, is server encrypted, and eTag.\n\n**Code Samples**\n\nRetrieve file properties\n\n```java\nshareFileAsyncClient.getPropertiesWithResponse()\n     .subscribe(response -> {\n         ShareFileProperties properties = response.getValue();\n         System.out.printf(\"File latest modified date is %s.\", properties.getLastModified());\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file-properties"
  syntax:
    content: "public Mono<Response<ShareFileProperties>> getPropertiesWithResponse()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileProperties>>"
      description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileProperties\" data-throw-if-not-resolved=\"false\">storage file properties</xref> and response status code"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse(com.azure.storage.file.share.models.ShareRequestConditions)"
  id: "getPropertiesWithResponse(com.azure.storage.file.share.models.ShareRequestConditions)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "getPropertiesWithResponse(ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.getPropertiesWithResponse(ShareRequestConditions requestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse(ShareRequestConditions requestConditions)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Retrieves the properties of the storage account's file. The properties includes file metadata, last modified date, is server encrypted, and eTag.\n\n**Code Samples**\n\nRetrieve file properties\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.getPropertiesWithResponse(requestConditions)\n     .subscribe(response -> {\n         ShareFileProperties properties = response.getValue();\n         System.out.printf(\"File latest modified date is %s.\", properties.getLastModified());\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file-properties"
  syntax:
    content: "public Mono<Response<ShareFileProperties>> getPropertiesWithResponse(ShareRequestConditions requestConditions)"
    parameters:
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\">ShareRequestConditions</xref>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileProperties>>"
      description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileProperties\" data-throw-if-not-resolved=\"false\">storage file properties</xref> and response status code"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse(com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  id: "getPropertiesWithResponse(com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "getPropertiesWithResponse(ShareRequestConditions requestConditions, Context context)"
  nameWithType: "ShareFileAsyncClient.getPropertiesWithResponse(ShareRequestConditions requestConditions, Context context)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse(ShareRequestConditions requestConditions, Context context)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  syntax:
    content: " Mono<Response<ShareFileProperties>> getPropertiesWithResponse(ShareRequestConditions requestConditions, Context context)"
    parameters:
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileProperties>>"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getServiceVersion()"
  id: "getServiceVersion()"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "getServiceVersion()"
  nameWithType: "ShareFileAsyncClient.getServiceVersion()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getServiceVersion()"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.getServiceVersion*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Gets the service version the client is using."
  syntax:
    content: "public ShareServiceVersion getServiceVersion()"
    return:
      type: "com.azure.storage.file.share.ShareServiceVersion"
      description: "the service version the client is using."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getShareName()"
  id: "getShareName()"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "getShareName()"
  nameWithType: "ShareFileAsyncClient.getShareName()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getShareName()"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.getShareName*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Get the share name of file client.\n\nGet the share name.\n\n```java\nString shareName = directoryAsyncClient.getShareName();\n System.out.println(\"The share name of the directory is \" + shareName);\n```"
  syntax:
    content: "public String getShareName()"
    return:
      type: "java.lang.String"
      description: "The share name of the file."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getShareSnapshotId()"
  id: "getShareSnapshotId()"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "getShareSnapshotId()"
  nameWithType: "ShareFileAsyncClient.getShareSnapshotId()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getShareSnapshotId()"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.getShareSnapshotId*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Get snapshot id which attached to <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient\" data-throw-if-not-resolved=\"false\">ShareFileAsyncClient</xref>. Return `null` if no snapshot id attached.\n\n**Code Samples**\n\nGet the share snapshot id.\n\n```java\nOffsetDateTime currentTime = OffsetDateTime.of(LocalDateTime.now(), ZoneOffset.UTC);\n ShareFileAsyncClient shareFileAsyncClient = new ShareFileClientBuilder()\n     .endpoint(\"https://${accountName}.file.core.windows.net\")\n     .sasToken(\"${SASToken}\")\n     .shareName(\"myshare\")\n     .resourcePath(\"myfiile\")\n     .snapshot(currentTime.toString())\n     .buildFileAsyncClient();\n \n System.out.printf(\"Snapshot ID: %s%n\", shareFileAsyncClient.getShareSnapshotId());\n```"
  syntax:
    content: "public String getShareSnapshotId()"
    return:
      type: "java.lang.String"
      description: "The snapshot id which is a unique <code>DateTime</code> value that identifies the share snapshot to its base\n share."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.listHandles()"
  id: "listHandles()"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "listHandles()"
  nameWithType: "ShareFileAsyncClient.listHandles()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listHandles()"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.listHandles*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "List of open handles on a file.\n\n**Code Samples**\n\nList all handles for the file client.\n\n```java\nshareFileAsyncClient.listHandles()\n     .subscribe(result -> System.out.printf(\"List handles completed with handle id %s\", result.getHandleId()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-handles"
  syntax:
    content: "public PagedFlux<HandleItem> listHandles()"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.HandleItem>"
      description: "<xref uid=\"com.azure.storage.file.share.models.HandleItem\" data-throw-if-not-resolved=\"false\">handles</xref> in the files that satisfy the requirements"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.listHandles(java.lang.Integer)"
  id: "listHandles(java.lang.Integer)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "listHandles(Integer maxResultsPerPage)"
  nameWithType: "ShareFileAsyncClient.listHandles(Integer maxResultsPerPage)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listHandles(Integer maxResultsPerPage)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.listHandles*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "List of open handles on a file.\n\n**Code Samples**\n\nList 10 handles for the file client.\n\n```java\nshareFileAsyncClient.listHandles(10)\n     .subscribe(result -> System.out.printf(\"List handles completed with handle id %s\", result.getHandleId()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-handles"
  syntax:
    content: "public PagedFlux<HandleItem> listHandles(Integer maxResultsPerPage)"
    parameters:
    - id: "maxResultsPerPage"
      type: "java.lang.Integer"
      description: "Optional maximum number of results will return per page"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.HandleItem>"
      description: "<xref uid=\"com.azure.storage.file.share.models.HandleItem\" data-throw-if-not-resolved=\"false\">handles</xref> in the file that satisfy the requirements"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.listHandlesWithOptionalTimeout(java.lang.Integer,java.time.Duration,com.azure.core.util.Context)"
  id: "listHandlesWithOptionalTimeout(java.lang.Integer,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "listHandlesWithOptionalTimeout(Integer maxResultsPerPage, Duration timeout, Context context)"
  nameWithType: "ShareFileAsyncClient.listHandlesWithOptionalTimeout(Integer maxResultsPerPage, Duration timeout, Context context)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listHandlesWithOptionalTimeout(Integer maxResultsPerPage, Duration timeout, Context context)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.listHandlesWithOptionalTimeout*"
  type: "Method"
  package: "com.azure.storage.file.share"
  syntax:
    content: " PagedFlux<HandleItem> listHandlesWithOptionalTimeout(Integer maxResultsPerPage, Duration timeout, Context context)"
    parameters:
    - id: "maxResultsPerPage"
      type: "java.lang.Integer"
    - id: "timeout"
      type: "java.time.Duration"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.HandleItem>"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges()"
  id: "listRanges()"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "listRanges()"
  nameWithType: "ShareFileAsyncClient.listRanges()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges()"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "List of valid ranges for a file.\n\n**Code Samples**\n\nList all ranges for the file client.\n\n```java\nshareFileAsyncClient.listRanges().subscribe(range ->\n     System.out.printf(\"List ranges completed with start: %d, end: %d\", range.getStart(), range.getEnd()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-ranges"
  syntax:
    content: "public PagedFlux<ShareFileRange> listRanges()"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.ShareFileRange>"
      description: "<xref uid=\"com.azure.storage.file.share.models.ShareFileRange\" data-throw-if-not-resolved=\"false\">ranges</xref> in the files."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges(com.azure.storage.file.share.models.ShareFileRange)"
  id: "listRanges(com.azure.storage.file.share.models.ShareFileRange)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "listRanges(ShareFileRange range)"
  nameWithType: "ShareFileAsyncClient.listRanges(ShareFileRange range)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges(ShareFileRange range)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "List of valid ranges for a file.\n\n**Code Samples**\n\nList all ranges within the file range from 1KB to 2KB.\n\n```java\nshareFileAsyncClient.listRanges(new ShareFileRange(1024, 2048L))\n     .subscribe(result -> System.out.printf(\"List ranges completed with start: %d, end: %d\",\n         result.getStart(), result.getEnd()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-ranges"
  syntax:
    content: "public PagedFlux<ShareFileRange> listRanges(ShareFileRange range)"
    parameters:
    - id: "range"
      type: "com.azure.storage.file.share.models.ShareFileRange"
      description: "Optional byte range which returns file data only from the specified range."
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.ShareFileRange>"
      description: "<xref uid=\"com.azure.storage.file.share.models.ShareFileRange\" data-throw-if-not-resolved=\"false\">ranges</xref> in the files that satisfy the requirements"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges(com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions)"
  id: "listRanges(com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "listRanges(ShareFileRange range, ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.listRanges(ShareFileRange range, ShareRequestConditions requestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges(ShareFileRange range, ShareRequestConditions requestConditions)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "List of valid ranges for a file.\n\n**Code Samples**\n\nList all ranges within the file range from 1KB to 2KB.\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.listRanges(new ShareFileRange(1024, 2048L), requestConditions)\n     .subscribe(result -> System.out.printf(\"List ranges completed with start: %d, end: %d\",\n         result.getStart(), result.getEnd()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-ranges"
  syntax:
    content: "public PagedFlux<ShareFileRange> listRanges(ShareFileRange range, ShareRequestConditions requestConditions)"
    parameters:
    - id: "range"
      type: "com.azure.storage.file.share.models.ShareFileRange"
      description: "Optional byte range which returns file data only from the specified range."
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\">ShareRequestConditions</xref>"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.ShareFileRange>"
      description: "<xref uid=\"com.azure.storage.file.share.models.ShareFileRange\" data-throw-if-not-resolved=\"false\">ranges</xref> in the files that satisfy the requirements"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.listRangesWithOptionalTimeout(com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  id: "listRangesWithOptionalTimeout(com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "listRangesWithOptionalTimeout(ShareFileRange range, ShareRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "ShareFileAsyncClient.listRangesWithOptionalTimeout(ShareFileRange range, ShareRequestConditions requestConditions, Duration timeout, Context context)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listRangesWithOptionalTimeout(ShareFileRange range, ShareRequestConditions requestConditions, Duration timeout, Context context)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.listRangesWithOptionalTimeout*"
  type: "Method"
  package: "com.azure.storage.file.share"
  syntax:
    content: " PagedFlux<ShareFileRange> listRangesWithOptionalTimeout(ShareFileRange range, ShareRequestConditions requestConditions, Duration timeout, Context context)"
    parameters:
    - id: "range"
      type: "com.azure.storage.file.share.models.ShareFileRange"
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
    - id: "timeout"
      type: "java.time.Duration"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.ShareFileRange>"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  id: "setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "setMetadata(Map<String,String> metadata)"
  nameWithType: "ShareFileAsyncClient.setMetadata(Map<String,String> metadata)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadata(Map<String,String> metadata)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadata*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Sets the user-defined metadata to associate to the file.\n\nIf `null` is passed for the metadata it will clear the metadata associated to the file.\n\n**Code Samples**\n\nSet the metadata to \"file:updatedMetadata\"\n\n```java\nshareFileAsyncClient.setMetadata(Collections.singletonMap(\"file\", \"updatedMetadata\"))\n     .doOnSuccess(response -> System.out.println(\"Setting the file metadata completed.\"));\n```\n\nClear the metadata of the file\n\n```java\nshareFileAsyncClient.setMetadataWithResponse(null).subscribe(\n     response -> System.out.printf(\"Setting the file metadata completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-metadata"
  syntax:
    content: "public Mono<ShareFileMetadataInfo> setMetadata(Map<String,String> metadata)"
    parameters:
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Options.Metadata to set on the file, if null is passed the metadata for the file is cleared"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileMetadataInfo>"
      description: "<xref uid=\"com.azure.storage.file.share.models.ShareFileMetadataInfo\" data-throw-if-not-resolved=\"false\">file meta info</xref>"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  id: "setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "setMetadataWithResponse(Map<String,String> metadata)"
  nameWithType: "ShareFileAsyncClient.setMetadataWithResponse(Map<String,String> metadata)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse(Map<String,String> metadata)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Sets the user-defined metadata to associate to the file.\n\nIf `null` is passed for the metadata it will clear the metadata associated to the file.\n\n**Code Samples**\n\nSet the metadata to \"file:updatedMetadata\"\n\n```java\nshareFileAsyncClient.setMetadataWithResponse(Collections.singletonMap(\"file\", \"updatedMetadata\"))\n     .subscribe(response -> System.out.printf(\"Setting the file metadata completed with status code %d\",\n         response.getStatusCode()));\n```\n\nClear the metadata of the file\n\n```java\nshareFileAsyncClient.setMetadataWithResponse(null).subscribe(\n     response -> System.out.printf(\"Setting the file metadata completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-metadata"
  syntax:
    content: "public Mono<Response<ShareFileMetadataInfo>> setMetadataWithResponse(Map<String,String> metadata)"
    parameters:
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Options.Metadata to set on the file, if null is passed the metadata for the file is cleared"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileMetadataInfo>>"
      description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileMetadataInfo\" data-throw-if-not-resolved=\"false\">file meta info</xref> and status code"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)"
  id: "setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "setMetadataWithResponse(Map<String,String> metadata, ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.setMetadataWithResponse(Map<String,String> metadata, ShareRequestConditions requestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse(Map<String,String> metadata, ShareRequestConditions requestConditions)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Sets the user-defined metadata to associate to the file.\n\nIf `null` is passed for the metadata it will clear the metadata associated to the file.\n\n**Code Samples**\n\nSet the metadata to \"file:updatedMetadata\"\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.setMetadataWithResponse(Collections.singletonMap(\"file\", \"updatedMetadata\"), requestConditions)\n     .subscribe(response -> System.out.printf(\"Setting the file metadata completed with status code %d\",\n         response.getStatusCode()));\n```\n\nClear the metadata of the file\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.setMetadataWithResponse(null, requestConditions).subscribe(\n     response -> System.out.printf(\"Setting the file metadata completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-metadata"
  syntax:
    content: "public Mono<Response<ShareFileMetadataInfo>> setMetadataWithResponse(Map<String,String> metadata, ShareRequestConditions requestConditions)"
    parameters:
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Options.Metadata to set on the file, if null is passed the metadata for the file is cleared"
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\">ShareRequestConditions</xref>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileMetadataInfo>>"
      description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileMetadataInfo\" data-throw-if-not-resolved=\"false\">file meta info</xref> and status code"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  id: "setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "setMetadataWithResponse(Map<String,String> metadata, ShareRequestConditions requestConditions, Context context)"
  nameWithType: "ShareFileAsyncClient.setMetadataWithResponse(Map<String,String> metadata, ShareRequestConditions requestConditions, Context context)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse(Map<String,String> metadata, ShareRequestConditions requestConditions, Context context)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  syntax:
    content: " Mono<Response<ShareFileMetadataInfo>> setMetadataWithResponse(Map<String,String> metadata, ShareRequestConditions requestConditions, Context context)"
    parameters:
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileMetadataInfo>>"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.setProperties(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String)"
  id: "setProperties(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "setProperties(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
  nameWithType: "ShareFileAsyncClient.setProperties(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.setProperties(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.setProperties*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Sets the user-defined file properties to associate to the file.\n\nIf `null` is passed for the fileProperties.httpHeaders it will clear the httpHeaders associated to the file. If `null` is passed for the fileProperties.filesmbproperties it will preserve the filesmb properties associated with the file.\n\n**Code Samples**\n\nSet the httpHeaders of contentType of \"text/plain\"\n\n```java\nShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()\n     .setContentType(\"text/html\")\n     .setContentEncoding(\"gzip\")\n     .setContentLanguage(\"en\")\n     .setCacheControl(\"no-transform\")\n     .setContentDisposition(\"attachment\");\n FileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n shareFileAsyncClient.setProperties(1024, httpHeaders, smbProperties, filePermission)\n     .doOnSuccess(response -> System.out.println(\"Setting the file properties completed.\"));\n```\n\nClear the metadata of the file and preserve the SMB properties\n\n```java\nshareFileAsyncClient.setProperties(1024, null, null, null)\n     .subscribe(response -> System.out.println(\"Setting the file httpHeaders completed.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-properties"
  syntax:
    content: "public Mono<ShareFileInfo> setProperties(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
    parameters:
    - id: "newFileSize"
      type: "long"
      description: "New file size of the file"
    - id: "httpHeaders"
      type: "com.azure.storage.file.share.models.ShareFileHttpHeaders"
      description: "The user settable file http headers."
    - id: "smbProperties"
      type: "com.azure.storage.file.share.FileSmbProperties"
      description: "The user settable file smb properties."
    - id: "filePermission"
      type: "java.lang.String"
      description: "The file permission of the file"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileInfo>"
      description: "The <xref uid=\"com.azure.storage.file.share.models.ShareFileInfo\" data-throw-if-not-resolved=\"false\">file info</xref>"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String)"
  id: "setPropertiesWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
  nameWithType: "ShareFileAsyncClient.setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Sets the user-defined file properties to associate to the file.\n\nIf `null` is passed for the httpHeaders it will clear the httpHeaders associated to the file. If `null` is passed for the filesmbproperties it will preserve the filesmbproperties associated with the file.\n\n**Code Samples**\n\nSet the httpHeaders of contentType of \"text/plain\"\n\n```java\nShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()\n     .setContentType(\"text/html\")\n     .setContentEncoding(\"gzip\")\n     .setContentLanguage(\"en\")\n     .setCacheControl(\"no-transform\")\n     .setContentDisposition(\"attachment\");\n FileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n shareFileAsyncClient.setPropertiesWithResponse(1024, httpHeaders, smbProperties, filePermission)\n     .subscribe(response -> System.out.printf(\"Setting the file properties completed with status code %d\",\n         response.getStatusCode()));\n```\n\nClear the metadata of the file and preserve the SMB properties\n\n```java\nshareFileAsyncClient.setPropertiesWithResponse(1024, null, null, null)\n     .subscribe(response -> System.out.printf(\"Setting the file httpHeaders completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-properties"
  syntax:
    content: "public Mono<Response<ShareFileInfo>> setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
    parameters:
    - id: "newFileSize"
      type: "long"
      description: "New file size of the file."
    - id: "httpHeaders"
      type: "com.azure.storage.file.share.models.ShareFileHttpHeaders"
      description: "The user settable file http headers."
    - id: "smbProperties"
      type: "com.azure.storage.file.share.FileSmbProperties"
      description: "The user settable file smb properties."
    - id: "filePermission"
      type: "java.lang.String"
      description: "The file permission of the file."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileInfo>>"
      description: "Response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileInfo\" data-throw-if-not-resolved=\"false\">file info</xref> and response status code."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)"
  id: "setPropertiesWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, ShareRequestConditions requestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, ShareRequestConditions requestConditions)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Sets the user-defined file properties to associate to the file.\n\nIf `null` is passed for the httpHeaders it will clear the httpHeaders associated to the file. If `null` is passed for the filesmbproperties it will preserve the filesmbproperties associated with the file.\n\n**Code Samples**\n\nSet the httpHeaders of contentType of \"text/plain\"\n\n```java\nShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()\n     .setContentType(\"text/html\")\n     .setContentEncoding(\"gzip\")\n     .setContentLanguage(\"en\")\n     .setCacheControl(\"no-transform\")\n     .setContentDisposition(\"attachment\");\n FileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.setPropertiesWithResponse(1024, httpHeaders, smbProperties, filePermission, requestConditions)\n     .subscribe(response -> System.out.printf(\"Setting the file properties completed with status code %d\",\n         response.getStatusCode()));\n```\n\nClear the metadata of the file and preserve the SMB properties\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.setPropertiesWithResponse(1024, null, null, null, requestConditions)\n     .subscribe(response -> System.out.printf(\"Setting the file httpHeaders completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-properties"
  syntax:
    content: "public Mono<Response<ShareFileInfo>> setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, ShareRequestConditions requestConditions)"
    parameters:
    - id: "newFileSize"
      type: "long"
      description: "New file size of the file."
    - id: "httpHeaders"
      type: "com.azure.storage.file.share.models.ShareFileHttpHeaders"
      description: "The user settable file http headers."
    - id: "smbProperties"
      type: "com.azure.storage.file.share.FileSmbProperties"
      description: "The user settable file smb properties."
    - id: "filePermission"
      type: "java.lang.String"
      description: "The file permission of the file."
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\">ShareRequestConditions</xref>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileInfo>>"
      description: "Response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileInfo\" data-throw-if-not-resolved=\"false\">file info</xref> and response status code."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  id: "setPropertiesWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, ShareRequestConditions requestConditions, Context context)"
  nameWithType: "ShareFileAsyncClient.setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, ShareRequestConditions requestConditions, Context context)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, ShareRequestConditions requestConditions, Context context)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  syntax:
    content: " Mono<Response<ShareFileInfo>> setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, ShareRequestConditions requestConditions, Context context)"
    parameters:
    - id: "newFileSize"
      type: "long"
    - id: "httpHeaders"
      type: "com.azure.storage.file.share.models.ShareFileHttpHeaders"
    - id: "smbProperties"
      type: "com.azure.storage.file.share.FileSmbProperties"
    - id: "filePermission"
      type: "java.lang.String"
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileInfo>>"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  id: "upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "upload(Flux<ByteBuffer> data, long length)"
  nameWithType: "ShareFileAsyncClient.upload(Flux<ByteBuffer> data, long length)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.upload(Flux<ByteBuffer> data, long length)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.upload*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Uploads a range of bytes to the beginning of a file in storage file service. Upload operations performs an in-place write on the specified file.\n\n**Code Samples**\n\nUpload data \"default\" to the file in Storage File Service.\n\n```java\nByteBuffer defaultData = ByteBuffer.wrap(\"default\".getBytes(StandardCharsets.UTF_8));\n shareFileAsyncClient.upload(Flux.just(defaultData), defaultData.remaining()).subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete deleting the file!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range"
  syntax:
    content: "public Mono<ShareFileUploadInfo> upload(Flux<ByteBuffer> data, long length)"
    parameters:
    - id: "data"
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "The data which will upload to the storage file."
    - id: "length"
      type: "long"
      description: "Specifies the number of bytes being transmitted in the request body."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileUploadInfo>"
      description: "A response that only contains headers and response status code"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile(java.lang.String)"
  id: "uploadFromFile(java.lang.String)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "uploadFromFile(String uploadFilePath)"
  nameWithType: "ShareFileAsyncClient.uploadFromFile(String uploadFilePath)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile(String uploadFilePath)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Uploads file to storage file service.\n\n**Code Samples**\n\nUpload the file from the source file path.\n\n(@codesnippet com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile\\#string\\}\n\nFor more information, see the [Azure Docs Create File][] and [Azure Docs Upload][].\n\n\n[Azure Docs Create File]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file\n[Azure Docs Upload]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range"
  syntax:
    content: "public Mono<Void> uploadFromFile(String uploadFilePath)"
    parameters:
    - id: "uploadFilePath"
      type: "java.lang.String"
      description: "The path where store the source file to upload"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "An empty response."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)"
  id: "uploadFromFile(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "uploadFromFile(String uploadFilePath, ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.uploadFromFile(String uploadFilePath, ShareRequestConditions requestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile(String uploadFilePath, ShareRequestConditions requestConditions)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Uploads file to storage file service.\n\n**Code Samples**\n\nUpload the file from the source file path.\n\n(@codesnippet com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile\\#string-ShareRequestConditions\\}\n\nFor more information, see the [Azure Docs Create File][] and [Azure Docs Upload][].\n\n\n[Azure Docs Create File]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file\n[Azure Docs Upload]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range"
  syntax:
    content: "public Mono<Void> uploadFromFile(String uploadFilePath, ShareRequestConditions requestConditions)"
    parameters:
    - id: "uploadFilePath"
      type: "java.lang.String"
      description: "The path where store the source file to upload"
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\">ShareRequestConditions</xref>"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "An empty response."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrl(long,long,long,java.lang.String)"
  id: "uploadRangeFromUrl(long,long,long,java.lang.String)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "uploadRangeFromUrl(long length, long destinationOffset, long sourceOffset, String sourceUrl)"
  nameWithType: "ShareFileAsyncClient.uploadRangeFromUrl(long length, long destinationOffset, long sourceOffset, String sourceUrl)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrl(long length, long destinationOffset, long sourceOffset, String sourceUrl)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrl*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Uploads a range of bytes from one file to another file.\n\n**Code Samples**\n\nUpload a number of bytes from a file at defined source and destination offsets\n\n```java\nshareFileAsyncClient.uploadRangeFromUrl(6, 8, 0, \"sourceUrl\").subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Completed upload range from url!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range"
  syntax:
    content: "public Mono<ShareFileUploadRangeFromUrlInfo> uploadRangeFromUrl(long length, long destinationOffset, long sourceOffset, String sourceUrl)"
    parameters:
    - id: "length"
      type: "long"
      description: "Specifies the number of bytes being transmitted in the request body."
    - id: "destinationOffset"
      type: "long"
      description: "Starting point of the upload range on the destination."
    - id: "sourceOffset"
      type: "long"
      description: "Starting point of the upload range on the source."
    - id: "sourceUrl"
      type: "java.lang.String"
      description: "Specifies the URL of the source file."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo>"
      description: "The <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo\" data-throw-if-not-resolved=\"false\">file upload range from url info</xref>"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long,long,long,java.lang.String)"
  id: "uploadRangeFromUrlWithResponse(long,long,long,java.lang.String)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl)"
  nameWithType: "ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Uploads a range of bytes from one file to another file.\n\n**Code Samples**\n\nUpload a number of bytes from a file at defined source and destination offsets\n\n```java\nshareFileAsyncClient.uploadRangeFromUrlWithResponse(6, 8, 0, \"sourceUrl\").subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Completed upload range from url!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range"
  syntax:
    content: "public Mono<Response<ShareFileUploadRangeFromUrlInfo>> uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl)"
    parameters:
    - id: "length"
      type: "long"
      description: "Specifies the number of bytes being transmitted in the request body."
    - id: "destinationOffset"
      type: "long"
      description: "Starting point of the upload range on the destination."
    - id: "sourceOffset"
      type: "long"
      description: "Starting point of the upload range on the source."
    - id: "sourceUrl"
      type: "java.lang.String"
      description: "Specifies the URL of the source file."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo>>"
      description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo\" data-throw-if-not-resolved=\"false\">file upload range from url info</xref> with\n headers and response status code."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long,long,long,java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)"
  id: "uploadRangeFromUrlWithResponse(long,long,long,java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl, ShareRequestConditions destinationRequestConditions)"
  nameWithType: "ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl, ShareRequestConditions destinationRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl, ShareRequestConditions destinationRequestConditions)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Uploads a range of bytes from one file to another file.\n\n**Code Samples**\n\nUpload a number of bytes from a file at defined source and destination offsets\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.uploadRangeFromUrlWithResponse(6, 8, 0, \"sourceUrl\", requestConditions).subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Completed upload range from url!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range"
  syntax:
    content: "public Mono<Response<ShareFileUploadRangeFromUrlInfo>> uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl, ShareRequestConditions destinationRequestConditions)"
    parameters:
    - id: "length"
      type: "long"
      description: "Specifies the number of bytes being transmitted in the request body."
    - id: "destinationOffset"
      type: "long"
      description: "Starting point of the upload range on the destination."
    - id: "sourceOffset"
      type: "long"
      description: "Starting point of the upload range on the source."
    - id: "sourceUrl"
      type: "java.lang.String"
      description: "Specifies the URL of the source file."
    - id: "destinationRequestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\">ShareRequestConditions</xref>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo>>"
      description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo\" data-throw-if-not-resolved=\"false\">file upload range from url info</xref> with\n headers and response status code."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long,long,long,java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  id: "uploadRangeFromUrlWithResponse(long,long,long,java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl, ShareRequestConditions destinationRequestConditions, Context context)"
  nameWithType: "ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl, ShareRequestConditions destinationRequestConditions, Context context)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl, ShareRequestConditions destinationRequestConditions, Context context)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  syntax:
    content: " Mono<Response<ShareFileUploadRangeFromUrlInfo>> uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl, ShareRequestConditions destinationRequestConditions, Context context)"
    parameters:
    - id: "length"
      type: "long"
    - id: "destinationOffset"
      type: "long"
    - id: "sourceOffset"
      type: "long"
    - id: "sourceUrl"
      type: "java.lang.String"
    - id: "destinationRequestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo>>"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Long)"
  id: "uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Long)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset)"
  nameWithType: "ShareFileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Uploads a range of bytes to specific of a file in storage file service. Upload operations performs an in-place write on the specified file.\n\n**Code Samples**\n\nUpload the file from 1024 to 2048 bytes with its metadata and properties and without the contentMD5.\n\n```java\nByteBuffer defaultData = ByteBuffer.wrap(\"default\".getBytes(StandardCharsets.UTF_8));\n shareFileAsyncClient.uploadWithResponse(Flux.just(defaultData), defaultData.remaining(), 0L).subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete deleting the file!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range"
  syntax:
    content: "public Mono<Response<ShareFileUploadInfo>> uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset)"
    parameters:
    - id: "data"
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "The data which will upload to the storage file."
    - id: "length"
      type: "long"
      description: "Specifies the number of bytes being transmitted in the request body. When the\n ShareFileRangeWriteType is set to clear, the value of this header must be set to zero."
    - id: "offset"
      type: "java.lang.Long"
      description: "Optional starting point of the upload range. It will start from the beginning if it is\n <code>null</code>."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileUploadInfo>>"
      description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadInfo\" data-throw-if-not-resolved=\"false\">file upload info</xref> with headers and response\n status code."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Long,com.azure.storage.file.share.models.ShareRequestConditions)"
  id: "uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Long,com.azure.storage.file.share.models.ShareRequestConditions)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset, ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset, ShareRequestConditions requestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset, ShareRequestConditions requestConditions)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  summary: "Uploads a range of bytes to specific of a file in storage file service. Upload operations performs an in-place write on the specified file.\n\n**Code Samples**\n\nUpload the file from 1024 to 2048 bytes with its metadata and properties and without the contentMD5.\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n ByteBuffer defaultData = ByteBuffer.wrap(\"default\".getBytes(StandardCharsets.UTF_8));\n shareFileAsyncClient.uploadWithResponse(Flux.just(defaultData), defaultData.remaining(), 0L, requestConditions)\n     .subscribe(\n         response -> { },\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete deleting the file!\")\n     );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range"
  syntax:
    content: "public Mono<Response<ShareFileUploadInfo>> uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset, ShareRequestConditions requestConditions)"
    parameters:
    - id: "data"
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "The data which will upload to the storage file."
    - id: "length"
      type: "long"
      description: "Specifies the number of bytes being transmitted in the request body. When the\n ShareFileRangeWriteType is set to clear, the value of this header must be set to zero."
    - id: "offset"
      type: "java.lang.Long"
      description: "Optional starting point of the upload range. It will start from the beginning if it is\n <code>null</code>."
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
      description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\">ShareRequestConditions</xref>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileUploadInfo>>"
      description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadInfo\" data-throw-if-not-resolved=\"false\">file upload info</xref> with headers and response\n status code."
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Long,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  id: "uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Long,com.azure.storage.file.share.models.ShareRequestConditions,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.share.ShareFileAsyncClient"
  langs:
  - "java"
  name: "uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset, ShareRequestConditions requestConditions, Context context)"
  nameWithType: "ShareFileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset, ShareRequestConditions requestConditions, Context context)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset, ShareRequestConditions requestConditions, Context context)"
  overload: "com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse*"
  type: "Method"
  package: "com.azure.storage.file.share"
  syntax:
    content: " Mono<Response<ShareFileUploadInfo>> uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset, ShareRequestConditions requestConditions, Context context)"
    parameters:
    - id: "data"
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
    - id: "length"
      type: "long"
    - id: "offset"
      type: "java.lang.Long"
    - id: "requestConditions"
      type: "com.azure.storage.file.share.models.ShareRequestConditions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileUploadInfo>>"
references:
- uid: "com.azure.storage.file.share.implementation.AzureFileStorageImpl"
  name: "AzureFileStorageImpl"
  nameWithType: "AzureFileStorageImpl"
  fullName: "com.azure.storage.file.share.implementation.AzureFileStorageImpl"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.storage.file.share.ShareServiceVersion"
  name: "ShareServiceVersion"
  nameWithType: "ShareServiceVersion"
  fullName: "com.azure.storage.file.share.ShareServiceVersion"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.ShareFileAsyncClient*"
  name: "ShareFileAsyncClient"
  nameWithType: "ShareFileAsyncClient.ShareFileAsyncClient"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.ShareFileAsyncClient"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getFileUrl*"
  name: "getFileUrl"
  nameWithType: "ShareFileAsyncClient.getFileUrl"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getFileUrl"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getServiceVersion*"
  name: "getServiceVersion"
  nameWithType: "ShareFileAsyncClient.getServiceVersion"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getServiceVersion"
  package: "com.azure.storage.file.share"
- uid: "reactor.core.publisher.Mono<java.lang.Boolean>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.exists*"
  name: "exists"
  nameWithType: "ShareFileAsyncClient.exists"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.exists"
  package: "com.azure.storage.file.share"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Boolean>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.existsWithResponse*"
  name: "existsWithResponse"
  nameWithType: "ShareFileAsyncClient.existsWithResponse"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.existsWithResponse"
  package: "com.azure.storage.file.share"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileInfo>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.share.models.ShareFileInfo"
    name: "ShareFileInfo"
    fullName: "com.azure.storage.file.share.models.ShareFileInfo"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.create*"
  name: "create"
  nameWithType: "ShareFileAsyncClient.create"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.create"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.models.ShareFileHttpHeaders"
  name: "ShareFileHttpHeaders"
  nameWithType: "ShareFileHttpHeaders"
  fullName: "com.azure.storage.file.share.models.ShareFileHttpHeaders"
- uid: "com.azure.storage.file.share.FileSmbProperties"
  name: "FileSmbProperties"
  nameWithType: "FileSmbProperties"
  fullName: "com.azure.storage.file.share.FileSmbProperties"
- uid: "java.util.Map<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileInfo>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.share.models.ShareFileInfo"
    name: "ShareFileInfo"
    fullName: "com.azure.storage.file.share.models.ShareFileInfo"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse*"
  name: "createWithResponse"
  nameWithType: "ShareFileAsyncClient.createWithResponse"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.models.ShareRequestConditions"
  name: "ShareRequestConditions"
  nameWithType: "ShareRequestConditions"
  fullName: "com.azure.storage.file.share.models.ShareRequestConditions"
- uid: "java.time.Duration"
  spec.java:
  - uid: "java.time.Duration"
    name: "Duration"
    fullName: "java.time.Duration"
- uid: "com.azure.core.util.polling.PollerFlux<com.azure.storage.file.share.models.ShareFileCopyInfo,java.lang.Void>"
  spec.java:
  - uid: "com.azure.core.util.polling.PollerFlux"
    name: "PollerFlux"
    fullName: "com.azure.core.util.polling.PollerFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.share.models.ShareFileCopyInfo"
    name: "ShareFileCopyInfo"
    fullName: "com.azure.storage.file.share.models.ShareFileCopyInfo"
  - name: ","
    fullName: ","
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.beginCopy*"
  name: "beginCopy"
  nameWithType: "ShareFileAsyncClient.beginCopy"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.beginCopy"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.models.PermissionCopyModeType"
  name: "PermissionCopyModeType"
  nameWithType: "PermissionCopyModeType"
  fullName: "com.azure.storage.file.share.models.PermissionCopyModeType"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "reactor.core.publisher.Mono<java.lang.Void>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopy*"
  name: "abortCopy"
  nameWithType: "ShareFileAsyncClient.abortCopy"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopy"
  package: "com.azure.storage.file.share"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse*"
  name: "abortCopyWithResponse"
  nameWithType: "ShareFileAsyncClient.abortCopyWithResponse"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse"
  package: "com.azure.storage.file.share"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileProperties>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.share.models.ShareFileProperties"
    name: "ShareFileProperties"
    fullName: "com.azure.storage.file.share.models.ShareFileProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFile*"
  name: "downloadToFile"
  nameWithType: "ShareFileAsyncClient.downloadToFile"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFile"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.models.ShareFileRange"
  name: "ShareFileRange"
  nameWithType: "ShareFileRange"
  fullName: "com.azure.storage.file.share.models.ShareFileRange"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileProperties>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.share.models.ShareFileProperties"
    name: "ShareFileProperties"
    fullName: "com.azure.storage.file.share.models.ShareFileProperties"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse*"
  name: "downloadToFileWithResponse"
  nameWithType: "ShareFileAsyncClient.downloadToFileWithResponse"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse"
  package: "com.azure.storage.file.share"
- uid: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "java.nio.ByteBuffer"
    name: "ByteBuffer"
    fullName: "java.nio.ByteBuffer"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.download*"
  name: "download"
  nameWithType: "ShareFileAsyncClient.download"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.download"
  package: "com.azure.storage.file.share"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileDownloadAsyncResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.share.models.ShareFileDownloadAsyncResponse"
    name: "ShareFileDownloadAsyncResponse"
    fullName: "com.azure.storage.file.share.models.ShareFileDownloadAsyncResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse*"
  name: "downloadWithResponse"
  nameWithType: "ShareFileAsyncClient.downloadWithResponse"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.delete*"
  name: "delete"
  nameWithType: "ShareFileAsyncClient.delete"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.delete"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse*"
  name: "deleteWithResponse"
  nameWithType: "ShareFileAsyncClient.deleteWithResponse"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getProperties*"
  name: "getProperties"
  nameWithType: "ShareFileAsyncClient.getProperties"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getProperties"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse*"
  name: "getPropertiesWithResponse"
  nameWithType: "ShareFileAsyncClient.getPropertiesWithResponse"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.setProperties*"
  name: "setProperties"
  nameWithType: "ShareFileAsyncClient.setProperties"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.setProperties"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse*"
  name: "setPropertiesWithResponse"
  nameWithType: "ShareFileAsyncClient.setPropertiesWithResponse"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse"
  package: "com.azure.storage.file.share"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileMetadataInfo>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.share.models.ShareFileMetadataInfo"
    name: "ShareFileMetadataInfo"
    fullName: "com.azure.storage.file.share.models.ShareFileMetadataInfo"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadata*"
  name: "setMetadata"
  nameWithType: "ShareFileAsyncClient.setMetadata"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadata"
  package: "com.azure.storage.file.share"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileMetadataInfo>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.share.models.ShareFileMetadataInfo"
    name: "ShareFileMetadataInfo"
    fullName: "com.azure.storage.file.share.models.ShareFileMetadataInfo"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse*"
  name: "setMetadataWithResponse"
  nameWithType: "ShareFileAsyncClient.setMetadataWithResponse"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse"
  package: "com.azure.storage.file.share"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileUploadInfo>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.share.models.ShareFileUploadInfo"
    name: "ShareFileUploadInfo"
    fullName: "com.azure.storage.file.share.models.ShareFileUploadInfo"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.upload*"
  name: "upload"
  nameWithType: "ShareFileAsyncClient.upload"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.upload"
  package: "com.azure.storage.file.share"
- uid: "java.lang.Long"
  spec.java:
  - uid: "java.lang.Long"
    name: "Long"
    fullName: "java.lang.Long"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileUploadInfo>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.share.models.ShareFileUploadInfo"
    name: "ShareFileUploadInfo"
    fullName: "com.azure.storage.file.share.models.ShareFileUploadInfo"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse*"
  name: "uploadWithResponse"
  nameWithType: "ShareFileAsyncClient.uploadWithResponse"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse"
  package: "com.azure.storage.file.share"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo"
    name: "ShareFileUploadRangeFromUrlInfo"
    fullName: "com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrl*"
  name: "uploadRangeFromUrl"
  nameWithType: "ShareFileAsyncClient.uploadRangeFromUrl"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrl"
  package: "com.azure.storage.file.share"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo"
    name: "ShareFileUploadRangeFromUrlInfo"
    fullName: "com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse*"
  name: "uploadRangeFromUrlWithResponse"
  nameWithType: "ShareFileAsyncClient.uploadRangeFromUrlWithResponse"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.clearRange*"
  name: "clearRange"
  nameWithType: "ShareFileAsyncClient.clearRange"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.clearRange"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse*"
  name: "clearRangeWithResponse"
  nameWithType: "ShareFileAsyncClient.clearRangeWithResponse"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile*"
  name: "uploadFromFile"
  nameWithType: "ShareFileAsyncClient.uploadFromFile"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile"
  package: "com.azure.storage.file.share"
- uid: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.ShareFileRange>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.share.models.ShareFileRange"
    name: "ShareFileRange"
    fullName: "com.azure.storage.file.share.models.ShareFileRange"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges*"
  name: "listRanges"
  nameWithType: "ShareFileAsyncClient.listRanges"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.listRangesWithOptionalTimeout*"
  name: "listRangesWithOptionalTimeout"
  nameWithType: "ShareFileAsyncClient.listRangesWithOptionalTimeout"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listRangesWithOptionalTimeout"
  package: "com.azure.storage.file.share"
- uid: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.HandleItem>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.share.models.HandleItem"
    name: "HandleItem"
    fullName: "com.azure.storage.file.share.models.HandleItem"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.listHandles*"
  name: "listHandles"
  nameWithType: "ShareFileAsyncClient.listHandles"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listHandles"
  package: "com.azure.storage.file.share"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.listHandlesWithOptionalTimeout*"
  name: "listHandlesWithOptionalTimeout"
  nameWithType: "ShareFileAsyncClient.listHandlesWithOptionalTimeout"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listHandlesWithOptionalTimeout"
  package: "com.azure.storage.file.share"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.share.models.CloseHandlesInfo>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.share.models.CloseHandlesInfo"
    name: "CloseHandlesInfo"
    fullName: "com.azure.storage.file.share.models.CloseHandlesInfo"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandle*"
  name: "forceCloseHandle"
  nameWithType: "ShareFileAsyncClient.forceCloseHandle"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandle"
  package: "com.azure.storage.file.share"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.CloseHandlesInfo>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.share.models.CloseHandlesInfo"
    name: "CloseHandlesInfo"
    fullName: "com.azure.storage.file.share.models.CloseHandlesInfo"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandleWithResponse*"
  name: "forceCloseHandleWithResponse"
  nameWithType: "ShareFileAsyncClient.forceCloseHandleWithResponse"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandleWithResponse"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseAllHandles*"
  name: "forceCloseAllHandles"
  nameWithType: "ShareFileAsyncClient.forceCloseAllHandles"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseAllHandles"
  package: "com.azure.storage.file.share"
- uid: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.CloseHandlesInfo>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.share.models.CloseHandlesInfo"
    name: "CloseHandlesInfo"
    fullName: "com.azure.storage.file.share.models.CloseHandlesInfo"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseAllHandlesWithOptionalTimeout*"
  name: "forceCloseAllHandlesWithOptionalTimeout"
  nameWithType: "ShareFileAsyncClient.forceCloseAllHandlesWithOptionalTimeout"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseAllHandlesWithOptionalTimeout"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getShareSnapshotId*"
  name: "getShareSnapshotId"
  nameWithType: "ShareFileAsyncClient.getShareSnapshotId"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getShareSnapshotId"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getShareName*"
  name: "getShareName"
  nameWithType: "ShareFileAsyncClient.getShareName"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getShareName"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getFilePath*"
  name: "getFilePath"
  nameWithType: "ShareFileAsyncClient.getFilePath"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getFilePath"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getAccountName*"
  name: "getAccountName"
  nameWithType: "ShareFileAsyncClient.getAccountName"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getAccountName"
  package: "com.azure.storage.file.share"
- uid: "com.azure.core.http.HttpPipeline"
  spec.java:
  - uid: "com.azure.core.http.HttpPipeline"
    name: "HttpPipeline"
    fullName: "com.azure.core.http.HttpPipeline"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getHttpPipeline*"
  name: "getHttpPipeline"
  nameWithType: "ShareFileAsyncClient.getHttpPipeline"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getHttpPipeline"
  package: "com.azure.storage.file.share"
- uid: "com.azure.storage.file.share.sas.ShareServiceSasSignatureValues"
  name: "ShareServiceSasSignatureValues"
  nameWithType: "ShareServiceSasSignatureValues"
  fullName: "com.azure.storage.file.share.sas.ShareServiceSasSignatureValues"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.generateSas*"
  name: "generateSas"
  nameWithType: "ShareFileAsyncClient.generateSas"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.generateSas"
  package: "com.azure.storage.file.share"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.core.http.rest.Response"
  name: "Response"
  nameWithType: "Response"
  fullName: "com.azure.core.http.rest.Response"
- uid: "com.azure.storage.file.share.models.ShareFileInfo"
  name: "ShareFileInfo"
  nameWithType: "ShareFileInfo"
  fullName: "com.azure.storage.file.share.models.ShareFileInfo"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
- uid: "com.azure.storage.file.share.models.ShareFileCopyInfo,java.lang.Void"
  name: "ShareFileCopyInfo,Void"
  nameWithType: "ShareFileCopyInfo,Void"
  fullName: "com.azure.storage.file.share.models.ShareFileCopyInfo,java.lang.Void"
- uid: "com.azure.core.util.polling.PollerFlux"
  name: "PollerFlux"
  nameWithType: "PollerFlux"
  fullName: "com.azure.core.util.polling.PollerFlux"
- uid: "java.lang.Void"
  name: "Void"
  nameWithType: "Void"
  fullName: "java.lang.Void"
- uid: "com.azure.storage.file.share.models.ShareFileProperties"
  name: "ShareFileProperties"
  nameWithType: "ShareFileProperties"
  fullName: "com.azure.storage.file.share.models.ShareFileProperties"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"
- uid: "java.nio.ByteBuffer"
  name: "ByteBuffer"
  nameWithType: "ByteBuffer"
  fullName: "java.nio.ByteBuffer"
- uid: "com.azure.storage.file.share.models.ShareFileDownloadAsyncResponse"
  name: "ShareFileDownloadAsyncResponse"
  nameWithType: "ShareFileDownloadAsyncResponse"
  fullName: "com.azure.storage.file.share.models.ShareFileDownloadAsyncResponse"
- uid: "com.azure.storage.file.share.models.ShareFileMetadataInfo"
  name: "ShareFileMetadataInfo"
  nameWithType: "ShareFileMetadataInfo"
  fullName: "com.azure.storage.file.share.models.ShareFileMetadataInfo"
- uid: "com.azure.storage.file.share.models.ShareFileUploadInfo"
  name: "ShareFileUploadInfo"
  nameWithType: "ShareFileUploadInfo"
  fullName: "com.azure.storage.file.share.models.ShareFileUploadInfo"
- uid: "com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo"
  name: "ShareFileUploadRangeFromUrlInfo"
  nameWithType: "ShareFileUploadRangeFromUrlInfo"
  fullName: "com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo"
- uid: "com.azure.core.http.rest.PagedFlux"
  name: "PagedFlux"
  nameWithType: "PagedFlux"
  fullName: "com.azure.core.http.rest.PagedFlux"
- uid: "com.azure.storage.file.share.models.HandleItem"
  name: "HandleItem"
  nameWithType: "HandleItem"
  fullName: "com.azure.storage.file.share.models.HandleItem"
- uid: "com.azure.storage.file.share.models.CloseHandlesInfo"
  name: "CloseHandlesInfo"
  nameWithType: "CloseHandlesInfo"
  fullName: "com.azure.storage.file.share.models.CloseHandlesInfo"
