### YamlMime:JavaType
uid: "com.azure.spring.messaging.annotation.AzureMessageListener"
fullName: "com.azure.spring.messaging.annotation.AzureMessageListener"
name: "AzureMessageListener"
nameWithType: "AzureMessageListener"
summary: "Annotation that marks a method to be the target of a Azure message listener on the specified <xref uid=\"com.azure.spring.messaging.annotation.AzureMessageListener.destination*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#destination\"></xref>. The <xref uid=\"com.azure.spring.messaging.annotation.AzureMessageListener.containerFactory*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#containerFactory\"></xref> identifies the <xref uid=\"com.azure.spring.messaging.container.ListenerContainerFactory\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ListenerContainerFactory\"></xref> to use to build the Azure listener container. If not set, a *default* container factory is assumed to be available with a bean name of `azureListenerContainerFactory` unless an explicit default has been provided through configuration.\n\nProcessing of `@AzureMessageListener` annotations is performed by registering a <xref uid=\"com.azure.spring.messaging.config.AzureListenerAnnotationBeanPostProcessor\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureListenerAnnotationBeanPostProcessor\"></xref>. This can be done through the <xref uid=\"com.azure.spring.messaging.annotation.EnableAzureMessaging\" data-throw-if-not-resolved=\"false\" data-raw-source=\"@EnableAzureMessaging\"></xref> annotation.\n\nAnnotated Azure listener methods are allowed to have flexible signatures similar to what <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessageMapping\"></xref> provides:\n\n *  <xref uid=\"org.springframework.messaging.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"org.springframework.messaging.Message\"></xref> to use Spring's messaging abstraction counterpart\n *  <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"@Payload\"></xref>\\-annotated method arguments, including support for validation\n *  <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"@Header\"></xref>\\-annotated method arguments to extract specific header values, including standard Azure headers defined by <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"String\"></xref>\n *  <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"@Headers\"></xref>\\-annotated method argument that must also be assignable to <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref> for obtaining access to all headers\n *  <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"org.springframework.messaging.MessageHeaders\"></xref> arguments for obtaining access to all headers\n *  <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"org.springframework.messaging.support.MessageHeaderAccessor\"></xref> or access to all method arguments\n\nThis annotation may be used as a *meta-annotation* to create custom *composed annotations* with attribute overrides."
syntax: "public interface AzureMessageListener implements Annotation"
methods:
- "com.azure.spring.messaging.annotation.AzureMessageListener.concurrency()"
- "com.azure.spring.messaging.annotation.AzureMessageListener.containerFactory()"
- "com.azure.spring.messaging.annotation.AzureMessageListener.destination()"
- "com.azure.spring.messaging.annotation.AzureMessageListener.group()"
- "com.azure.spring.messaging.annotation.AzureMessageListener.id()"
type: "interface"
implements:
- "<xref href=\"java.lang.annotation.Annotation?alt=java.lang.annotation.Annotation&text=Annotation\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.spring.messaging.annotation"
artifact: com.azure.spring:azure-spring-cloud-messaging:2.0.0
