### YamlMime:ManagedReference
items:
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  id: _volatile_actor_state_provider
  parent: microsoft.servicefabric.actors.runtime
  children:
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.abort()
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.actorActivatedAsync(ActorId,CancellationToken)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.backupAsync(BackupOption,Duration,CancellationToken,BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.changeRoleAsync(ReplicaRole,CancellationToken)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.closeAsync(CancellationToken)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.containsStateAsync(ActorId,String,CancellationToken)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.currentReplicaRole()
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.deleteReminderAsync(ActorId,String,CancellationToken)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.deleteRemindersAsync(Map<ActorId, Collection<String>>,CancellationToken)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.enumerateStateNamesAsync(ActorId,CancellationToken)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.getActorsAsync(int,ContinuationToken,CancellationToken)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.getCopyContext()
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.getCopyState(SequenceNumber,OperationDataStream)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.getLastCommittedSequenceNumber()
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.initialize(ActorTypeInformation)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.initialize(StatefulServiceInitializationParameters)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.loadRemindersAsync(CancellationToken)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.loadStateAsync(ActorId,String,CancellationToken)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.onDataLossAsync(CancellationToken)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.onSnapshotAsync(Duration)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.reminderCallbackCompletedAsync(ActorId,ActorReminder,CancellationToken)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.removeActorAsync(ActorId,CancellationToken)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.restoreAsync(String)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.restoreAsync(String,RestorePolicy,Duration,CancellationToken)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.saveReminderAsync(ActorId,ActorReminder,CancellationToken)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.saveStateAsync(ActorId,List<ActorStateChange>,CancellationToken)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>>)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.traceId()
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.traceType()
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.transientErrorRetryDelay()
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.VolatileActorStateProvider()
  - microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.VolatileActorStateProvider(ReplicatorSettings)
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: VolatileActorStateProvider
  nameWithType: VolatileActorStateProvider
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 76
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>ActorStateProvider implementation for Volatile persistence i.e Actor state is kept in-memory only. </p>"
  syntax: &o1
    content: public class VolatileActorStateProvider implements ActorStateProvider,StateProvider
  inheritance:
  - java.lang.Object
  - microsoft.servicefabric.data._state_provider_replica
  - microsoft.servicefabric.actors.runtime._actor_state_provider
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.abort()
  id: abort()
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: abort()
  nameWithType: VolatileActorStateProvider.abort()
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.abort()
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.abort*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 261
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Forcefully abort the state provider replica. </p>\r\n<p>\r\n  <b>Remarks:</b>This generally occurs when a permanent fault is detected on the node, or when Service Fabric cannot reliably manage the replica's life-cycle due to internal failures. </p>"
  syntax:
    content: public void abort()
  overridden: microsoft.servicefabric.data._state_provider_replica.abort()
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.actorActivatedAsync(ActorId,CancellationToken)
  id: actorActivatedAsync(ActorId,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: actorActivatedAsync(ActorId actorId, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.actorActivatedAsync(ActorId actorId, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.actorActivatedAsync(ActorId actorId, CancellationToken cancellationToken)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.actorActivatedAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 571
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>This method is invoked as part of the activation process of the actor with the specified Id.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<?> actorActivatedAsync(ActorId actorId, CancellationToken cancellationToken)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Id of the actor that is activated. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>A task that represents the asynchronous Actor activation notification processing. </p>
  overridden: microsoft.servicefabric.actors.runtime._actor_state_provider.actorActivatedAsync(ActorId,CancellationToken)
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.backupAsync(BackupOption,Duration,CancellationToken,BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
  id: backupAsync(BackupOption,Duration,CancellationToken,BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  nameWithType: VolatileActorStateProvider.backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.backupAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 301
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Performs a full backup of state managed by this actor state provider</p>\r\n<p>\r\n  <b>Remarks:</b>Backup/restore is not supported by <xref uid=\"microsoft.servicefabric.actors.runtime._volatile_actor_state_provider\" data-throw-if-not-resolved=\"false\">VolatileActorStateProvider</xref>. </p>"
  syntax:
    content: public CompletableFuture<?> backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
    parameters:
    - id: option
      type: microsoft.servicefabric.data._backup_option
      description: >-
        <p>

          <xref uid="microsoft.servicefabric.data._backup_option" data-throw-if-not-resolved="false">microsoft.servicefabric.data.BackupOption</xref> for the callback </p>
    - id: timeout
      type: e02a2de0
      description: >-
        <p>

          <xref uid="" data-throw-if-not-resolved="false">java.time.Duration</xref> that describes timeout for the backup </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: <p>The token to monitor for cancellation requests. </p>
    - id: backupCallback
      type: 8ead6242microsoft.servicefabric.data._backup_infob33c76fcsystem.fabric._cancellation_token774bd4f0
      description: <p>BackupCallbackCallback to be called when the backup folder has been created locally and is ready to be moved out of the node. </p>
    return:
      type: 16409f84
      description: <p>Task that represents the asynchronous backup operation. </p>
  overridden: microsoft.servicefabric.data._state_provider_replica.backupAsync(BackupOption,Duration,CancellationToken,BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
  exceptions:
  - type: b1c38b44
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
  id: backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  nameWithType: VolatileActorStateProvider.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.backupAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 277
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Performs a full backup of state managed by this actor state provider</p>\r\n<p>\r\n  <b>Remarks:</b>Backup/restore is not supported by <xref uid=\"microsoft.servicefabric.actors.runtime._volatile_actor_state_provider\" data-throw-if-not-resolved=\"false\">VolatileActorStateProvider</xref>. </p>"
  syntax:
    content: public CompletableFuture<?> backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
    parameters:
    - id: backupCallback
      type: 8ead6242microsoft.servicefabric.data._backup_infob33c76fcsystem.fabric._cancellation_token774bd4f0
      description: <p>BackupCallbackCallback to be called when the backup folder has been created locally and is ready to be moved out of the node. </p>
    return:
      type: 16409f84
      description: <p>Task that represents the asynchronous backup operation. </p>
  overridden: microsoft.servicefabric.data._state_provider_replica.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
  exceptions:
  - type: b1c38b44
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.changeRoleAsync(ReplicaRole,CancellationToken)
  id: changeRoleAsync(ReplicaRole,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.changeRoleAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 197
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Notify the state provider replica that its role is changing, for example to Primary or Secondary.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<?> changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
    parameters:
    - id: newRole
      type: system.fabric._replica_role
      description: <p>The new <xref uid="" data-throw-if-not-resolved="false">ReplicaRole</xref>, such as primary or secondary. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>Task that represents the asynchronous change role operation. </p>
  overridden: microsoft.servicefabric.data._state_provider_replica.changeRoleAsync(ReplicaRole,CancellationToken)
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.closeAsync(CancellationToken)
  id: closeAsync(CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: closeAsync(CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.closeAsync(CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.closeAsync(CancellationToken cancellationToken)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.closeAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 248
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Gracefully close the state provider replica.</p>\r\n<p>\r\n  <b>Remarks:</b>This generally occurs when the replica's code is being upgrade, the replica is being moved due to load balancing, or a transient fault is detected. </p>"
  syntax:
    content: public CompletableFuture<?> closeAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>Task that represents the asynchronous close operation. </p>
  overridden: microsoft.servicefabric.data._state_provider_replica.closeAsync(CancellationToken)
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.containsStateAsync(ActorId,String,CancellationToken)
  id: containsStateAsync(ActorId,String,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: containsStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.containsStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.containsStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.containsStateAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 692
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Checks whether actor state provider contains an actor state with specified state name.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Boolean> containsStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>ID of the actor for which to check state existence. </p>
    - id: stateName
      type: "26831127"
      description: <p>Name of the actor state to check for existence. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 7e53ac82
      description: <p>A task that represents the asynchronous check operation. The value of TResult parameter is true if state with specified name exists otherwise false. </p>
  overridden: microsoft.servicefabric.actors.runtime._actor_state_provider.containsStateAsync(ActorId,String,CancellationToken)
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.currentReplicaRole()
  id: currentReplicaRole()
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: currentReplicaRole()
  nameWithType: VolatileActorStateProvider.currentReplicaRole()
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.currentReplicaRole()
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.currentReplicaRole*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 977
  package: microsoft.servicefabric.actors.runtime
  syntax:
    content: public ReplicaRole currentReplicaRole()
    return:
      type: system.fabric._replica_role
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.deleteReminderAsync(ActorId,String,CancellationToken)
  id: deleteReminderAsync(ActorId,String,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: deleteReminderAsync(ActorId actorId, String reminderName, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.deleteReminderAsync(ActorId actorId, String reminderName, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.deleteReminderAsync(ActorId actorId, String reminderName, CancellationToken cancellationToken)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.deleteReminderAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 870
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Deletes the specified actor reminder if it exists.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<?> deleteReminderAsync(ActorId actorId, String reminderName, CancellationToken cancellationToken)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>ID of the actor to delete the reminder. </p>
    - id: reminderName
      type: "26831127"
      description: <p>Name of the reminder to delete. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>A task that represents the asynchronous delete operation. </p>
  overridden: microsoft.servicefabric.actors.runtime._actor_state_provider.deleteReminderAsync(ActorId,String,CancellationToken)
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.deleteRemindersAsync(Map<ActorId, Collection<String>>,CancellationToken)
  id: deleteRemindersAsync(Map<ActorId, Collection<String>>,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: deleteRemindersAsync(Map<ActorId, Collection<String>> reminderNames, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.deleteRemindersAsync(Map<ActorId, Collection<String>> reminderNames, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.deleteRemindersAsync(Map<ActorId, Collection<String>> reminderNames, CancellationToken cancellationToken)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.deleteRemindersAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 892
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Deletes the specified set of reminders</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<?> deleteRemindersAsync(Map<ActorId, Collection<String>> reminderNames, CancellationToken cancellationToken)
    parameters:
    - id: reminderNames
      type: 6110eba5microsoft.servicefabric.actors._actor_id89fe8e3d
      description: <p>The set of reminders to delete </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>A task that represents the asynchronous delete operation. </p>
  overridden: microsoft.servicefabric.actors.runtime._actor_state_provider.deleteRemindersAsync(Map<ActorId, Collection<String>>,CancellationToken)
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.enumerateStateNamesAsync(ActorId,CancellationToken)
  id: enumerateStateNamesAsync(ActorId,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: enumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.enumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.enumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.enumerateStateNamesAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 783
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Creates an enumerable of all the state names associated with specified actor.</p>\r\n<p>\r\n  <b>Remarks:</b>The enumerator returned from actor state provider is safe to use concurrently with reads and writes to the state provider. It represents a snapshot consistent view of the state provider. </p>"
  syntax:
    content: public CompletableFuture<List<String>> enumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>ID of the actor for which to create enumerable. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: d20512af
      description: <p>A task that represents the asynchronous enumeration operation. The value of TResult parameter is an enumerable of all state names associated with specified actor. </p>
  overridden: microsoft.servicefabric.actors.runtime._actor_state_provider.enumerateStateNamesAsync(ActorId,CancellationToken)
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.getActorsAsync(int,ContinuationToken,CancellationToken)
  id: getActorsAsync(int,ContinuationToken,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: getActorsAsync(int itemsCount, ContinuationToken continuationToken, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.getActorsAsync(int itemsCount, ContinuationToken continuationToken, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.getActorsAsync(int itemsCount, ContinuationToken continuationToken, CancellationToken cancellationToken)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.getActorsAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 820
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Gets ActorIds from the State Provider.</p>\r\n<p>\r\n  <b>Remarks:</b> The </p>"
  syntax:
    content: public CompletableFuture<PagedResult<ActorId>> getActorsAsync(int itemsCount, ContinuationToken continuationToken, CancellationToken cancellationToken)
    parameters:
    - id: itemsCount
      type: f75371fa
      description: <p>Number of items requested to be returned. </p>
    - id: continuationToken
      type: microsoft.servicefabric.actors._continuation_token
      description: <p>A continuation token to start querying the results from. A null value of continuation token means start returning values form the beginning. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 9cdf14d0microsoft.servicefabric.actors._paged_result78504a52microsoft.servicefabric.actors._actor_ide7daa122
      description: <p>A task that represents the asynchronous operation of call to server. </p>
  overridden: microsoft.servicefabric.actors.runtime._actor_state_provider.getActorsAsync(int,ContinuationToken,CancellationToken)
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.getCopyContext()
  id: getCopyContext()
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: getCopyContext()
  nameWithType: VolatileActorStateProvider.getCopyContext()
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.getCopyContext()
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.getCopyContext*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 486
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Obtains context on a Secondary replica after it is created and opened to send context to the Primary replica.</p>\r\n<p>\r\n  <b>Remarks:</b>The Primary replica analyzes the context and sends back state via <xref uid=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\">StateProvider#getCopyState(SequenceNumber, OperationDataStream)</xref>. <xref uid=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\">StateProvider#getCopyContext()</xref> is called on newly created, idle Secondary replicas and provides a mechanism to asynchronously establish a bidirectional conversation with the Primary replica. The Secondary replica sends <xref uid=\"\" data-throw-if-not-resolved=\"false\">OperationData</xref> objects with which the Primary replica can determine the progress of collecting context on the Secondary replica. The Primary replica responds by sending the required state back. See <xref uid=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\">StateProvider#getCopyState(SequenceNumber, OperationDataStream)</xref> at the Primary replica for the other half of the exchange. For in-memory services, the <xref uid=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\">StateProvider#getCopyContext()</xref> method is not called, as the state of the Secondary replicas is known (they are empty and will require all of the state). </p>"
  syntax:
    content: public OperationDataStream getCopyContext()
    return:
      type: system.fabric._operation_data_stream
      description: <p>Returns <xref uid="" data-throw-if-not-resolved="false">OperationDataStream</xref>. </p>
  overridden: system.fabric._state_provider.getCopyContext()
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.getCopyState(SequenceNumber,OperationDataStream)
  id: getCopyState(SequenceNumber,OperationDataStream)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
  nameWithType: VolatileActorStateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.getCopyState*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 520
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Obtains state on a Primary replica that is required to build a Secondary replica.</p>\r\n<p>\r\n  <b>Remarks:</b>Just as <xref uid=\"system.fabric._state_provider.getCopyContext()\" data-throw-if-not-resolved=\"false\">StateProvider#getCopyContext()</xref> enables the Secondary replica to send context to the Primary replica via an <xref uid=\"\" data-throw-if-not-resolved=\"false\">OperationDataStream</xref>, <xref uid=\"system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\">StateProvider#getCopyState(SequenceNumber, OperationDataStream)</xref> enables the Primary replica to respond with an <xref uid=\"\" data-throw-if-not-resolved=\"false\">OperationDataStream</xref>. The stream contains objects that are delivered to the Secondary replica via the <xref uid=\"system.fabric._state_replicator.getCopyStream()\" data-throw-if-not-resolved=\"false\">StateReplicator#getCopyStream()</xref> method of the <xref uid=\"\" data-throw-if-not-resolved=\"false\">FabricReplicator</xref> class. The objects implement <xref uid=\"\" data-throw-if-not-resolved=\"false\">Operation</xref> and contain the specified data. When the Primary replica receives this call, it should create and return another <xref uid=\"\" data-throw-if-not-resolved=\"false\">OperationDataStream</xref> that contains <xref uid=\"\" data-throw-if-not-resolved=\"false\">OperationData</xref>. <xref uid=\"\" data-throw-if-not-resolved=\"false\">OperationData</xref> represents the data/state that the Secondary replica </p>"
  syntax:
    content: public OperationDataStream getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
    parameters:
    - id: upToSequenceNumber
      type: system.fabric._sequence_number
      description: <p>The maximum last sequence number (LSN) that should be placed in the copy stream via the <xref uid="system.fabric._state_replicator.getCopyStream()" data-throw-if-not-resolved="false">StateReplicator#getCopyStream()</xref> method. LSNs greater than this number are delivered to the Secondary replica as a part of the replication stream via the <xref uid="system.fabric._state_replicator.getReplicationStream()" data-throw-if-not-resolved="false">StateReplicator#getReplicationStream()</xref> method. </p>
    - id: copyContext
      type: system.fabric._operation_data_stream
      description: <p>An <xref uid="" data-throw-if-not-resolved="false">OperationDataStream</xref> that contains the <xref uid="" data-throw-if-not-resolved="false">OperationData</xref> objects that are created by the Secondary replica. requires to catch up to the provided </p>
    return:
      type: system.fabric._operation_data_stream
      description: <p>Returns <xref uid="" data-throw-if-not-resolved="false">OperationDataStream</xref>. </p>
  overridden: system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)
  exceptions:
  - type: 12fe80de
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.getLastCommittedSequenceNumber()
  id: getLastCommittedSequenceNumber()
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: getLastCommittedSequenceNumber()
  nameWithType: VolatileActorStateProvider.getLastCommittedSequenceNumber()
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.getLastCommittedSequenceNumber()
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.getLastCommittedSequenceNumber*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 388
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Obtains the last sequence number that the service has committed.</p>\r\n<p>\r\n  <b>Remarks:</b>This method is called on a service when it first starts up, in case it has any persistent state, and when data loss is suspected. When a stateful service replica starts up, it has the option to restore any data that might have persisted from previous updates. If it restores some state in this manner, its current progress is the last written sequence number for that data. A volatile service can simply return 0. Note that this method is not called to determine a new primary election during fail-over, because the current committed progress is already known by the <xref uid=\"\" data-throw-if-not-resolved=\"false\">FabricReplicator</xref> class at that time. </p>"
  syntax:
    content: public long getLastCommittedSequenceNumber()
    return:
      type: 0364520f
      description: <p>Returns long. </p>
  overridden: system.fabric._state_provider.getLastCommittedSequenceNumber()
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.initialize(ActorTypeInformation)
  id: initialize(ActorTypeInformation)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: initialize(ActorTypeInformation actorTypeInformation)
  nameWithType: VolatileActorStateProvider.initialize(ActorTypeInformation actorTypeInformation)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.initialize(ActorTypeInformation actorTypeInformation)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.initialize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 556
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Initializes the actor state provider with type information of the actor type associated with it.</p>\r\n<p></p>"
  syntax:
    content: public void initialize(ActorTypeInformation actorTypeInformation)
    parameters:
    - id: actorTypeInformation
      type: microsoft.servicefabric.actors.runtime._actor_type_information
      description: >-
        <p>

          <xref uid="microsoft.servicefabric.actors.runtime._actor_type_information" data-throw-if-not-resolved="false">ActorTypeInformation</xref> Type information of the actor class. </p>
  overridden: microsoft.servicefabric.actors.runtime._actor_state_provider.initialize(ActorTypeInformation)
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.initialize(StatefulServiceInitializationParameters)
  id: initialize(StatefulServiceInitializationParameters)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: initialize(StatefulServiceInitializationParameters initializationParameters)
  nameWithType: VolatileActorStateProvider.initialize(StatefulServiceInitializationParameters initializationParameters)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.initialize(StatefulServiceInitializationParameters initializationParameters)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.initialize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 146
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Initialize the state provider replica using the service initialization information.</p>\r\n<p>\r\n  <b>Remarks:</b>No complex processing should be done during Initialize. Expensive or long-running initialization should be done in OpenAsync. </p>"
  syntax:
    content: public void initialize(StatefulServiceInitializationParameters initializationParameters)
    parameters:
    - id: initializationParameters
      type: system.fabric._stateful_service_initialization_parameters
      description: >-
        <p>

          <xref uid="" data-throw-if-not-resolved="false">StatefulServiceInitializationParameters</xref> such as service name, partition id, replica id, and code package information. </p>
  overridden: microsoft.servicefabric.data._state_provider_replica.initialize(StatefulServiceInitializationParameters)
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.loadRemindersAsync(CancellationToken)
  id: loadRemindersAsync(CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: loadRemindersAsync(CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.loadRemindersAsync(CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.loadRemindersAsync(CancellationToken cancellationToken)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.loadRemindersAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 941
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Loads all the reminders contained in the actor state provider.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<ActorReminderCollection> loadRemindersAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 9cdf14d0microsoft.servicefabric.actors.runtime._actor_reminder_collectiona08ddfce
      description: <p>A task that represents the asynchronous load operation. The value of TResult parameter is a collection of all actor reminders contained in the actor state provider. </p>
  overridden: microsoft.servicefabric.actors.runtime._actor_state_provider.loadRemindersAsync(CancellationToken)
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.loadStateAsync(ActorId,String,CancellationToken)
  id: loadStateAsync(ActorId,String,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: loadStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.loadStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.loadStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.loadStateAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 603
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Loads the actor state associated with the specified state name.</p>\r\n<p></p>"
  syntax:
    content: public <T> CompletableFuture<T> loadStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Id of the actor that is activated. </p>
    - id: stateName
      type: "26831127"
      description: <p>StateName. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 6d056e8b
      description: <p>A task that represents the asynchronous load operation. The value of TResult parameter contains value of actor state associated with given state name. </p>
  overridden: microsoft.servicefabric.actors.runtime._actor_state_provider.loadStateAsync(ActorId,String,CancellationToken)
  exceptions:
  - type: c27a23df
    description: <p>If Actor state associated with specified state name does not exist. </p>
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.onDataLossAsync(CancellationToken)
  id: onDataLossAsync(CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: onDataLossAsync(CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.onDataLossAsync(CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.onDataLossAsync(CancellationToken cancellationToken)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.onDataLossAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 461
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Indicates that a write quorum of replicas in this replica set has been lost, and that therefore data loss might have occurred. The replica set consists of a majority of replicas, which includes the Primary replica.</p>\r\n<p>\r\n  <b>Remarks:</b>When the Service Fabric runtime observes the failure of a quorum of replicas, which includes the Primary replica, it elects a new Primary replica and immediately calls this method on the new Primary replica. A Primary replica that is informed of possible data loss can choose to restore its state from some external data source or can continue to run with the state that it currently has. If the service continues to run with its current state, it should return false from this method, which indicates that no state change has been made. If it has restored or altered its state, such as rolling back incomplete work, it should return true. If true is returned, then the state in other replicas must be assumed to be incorrect. Therefore, the Service Fabric runtime removes the other replicas from the replica set and recreates them. </p>"
  syntax:
    content: public CompletableFuture<Boolean> onDataLossAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 7e53ac82
      description: <p>Returns <xref uid="" data-throw-if-not-resolved="false">java.util.concurrent.CompletableFuture</xref> of type <xref uid="" data-throw-if-not-resolved="false">java.lang.Boolean</xref>, that indicates whether state changed. When it changed, the method returns true or when it did not change, the method returns false. </p>
  overridden: system.fabric._state_provider.onDataLossAsync(CancellationToken)
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.onSnapshotAsync(Duration)
  id: onSnapshotAsync(Duration)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: onSnapshotAsync(Duration currentLogicalTime)
  nameWithType: VolatileActorStateProvider.onSnapshotAsync(Duration currentLogicalTime)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.onSnapshotAsync(Duration currentLogicalTime)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.onSnapshotAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 363
  package: microsoft.servicefabric.actors.runtime
  syntax:
    content: public CompletableFuture<?> onSnapshotAsync(Duration currentLogicalTime)
    parameters:
    - id: currentLogicalTime
      type: e02a2de0
    return:
      type: 16409f84
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)
  id: openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.openAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 172
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Open the state provider replica for use.</p>\r\n<p>\r\n  <b>Remarks:</b>Extended state provider initialization tasks can be started at this time. </p>"
  syntax:
    content: public CompletableFuture<Replicator> openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)
    parameters:
    - id: openMode
      type: system.fabric._replica_open_mode
      description: <p>The <xref uid="" data-throw-if-not-resolved="false">ReplicaOpenMode</xref> that indicates whether this is a new or existing replica. </p>
    - id: partition
      type: system.fabric._stateful_service_partition
      description: <p>The <xref uid="" data-throw-if-not-resolved="false">StatefulServicePartition</xref> partition the replica belongs to. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 9cdf14d0system.fabric._replicatora08ddfce
      description: <p>Task that represents the asynchronous open operation. The result contains the replicator responsible for replicating state between other state provider replicas in the partition. </p>
  overridden: microsoft.servicefabric.data._state_provider_replica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.reminderCallbackCompletedAsync(ActorId,ActorReminder,CancellationToken)
  id: reminderCallbackCompletedAsync(ActorId,ActorReminder,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: reminderCallbackCompletedAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.reminderCallbackCompletedAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.reminderCallbackCompletedAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.reminderCallbackCompletedAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 916
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Invoked when a reminder fires and finishes executing its callback <xref uid=\"microsoft.servicefabric.actors.runtime._remindable.receiveReminderAsync(String,byte [],Duration,Duration)\" data-throw-if-not-resolved=\"false\">Remindable#receiveReminderAsync</xref> successfully </p>"
  syntax:
    content: public CompletableFuture<?> reminderCallbackCompletedAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>ID of the actor which own reminder </p>
    - id: reminder
      type: microsoft.servicefabric.actors.runtime._actor_reminder
      description: <p>Actor reminder that completed successfully. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: <p>The token to monitor for cancellation requests. </p>
    return:
      type: 16409f84
      description: <p>A task that represents the asynchronous reminder callback completed notification processing. </p>
  overridden: microsoft.servicefabric.actors.runtime._actor_state_provider.reminderCallbackCompletedAsync(ActorId,ActorReminder,CancellationToken)
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.removeActorAsync(ActorId,CancellationToken)
  id: removeActorAsync(ActorId,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: removeActorAsync(ActorId actorId, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.removeActorAsync(ActorId actorId, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.removeActorAsync(ActorId actorId, CancellationToken cancellationToken)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.removeActorAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 715
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Removes all the existing states and reminders associated with specified actor atomically.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<?> removeActorAsync(ActorId actorId, CancellationToken cancellationToken)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>ID of the actor for which to remove state. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>A task that represents the asynchronous remove operation. </p>
  overridden: microsoft.servicefabric.actors.runtime._actor_state_provider.removeActorAsync(ActorId,CancellationToken)
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.restoreAsync(String)
  id: restoreAsync(String)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: restoreAsync(String backupFolderPath)
  nameWithType: VolatileActorStateProvider.restoreAsync(String backupFolderPath)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.restoreAsync(String backupFolderPath)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.restoreAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 325
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Restore a backup taken by <xref uid=\"\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.data.StateProviderReplica#backupAsync(BiFunction)</xref> or <xref uid=\"\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.data.StateProviderReplica#backupAsync(BackupOption, Duration, CancellationToken, BiFunction)</xref><b>Remarks:</b>Backup/restore is not supported by <xref uid=\"microsoft.servicefabric.actors.runtime._volatile_actor_state_provider\" data-throw-if-not-resolved=\"false\">VolatileActorStateProvider</xref>. </p>"
  syntax:
    content: public CompletableFuture<?> restoreAsync(String backupFolderPath)
    parameters:
    - id: backupFolderPath
      type: "26831127"
      description: <p>Directory from where replica will be restored from. </p>
    return:
      type: 16409f84
      description: <p>Task that represents the asynchronous restore operation. </p>
  overridden: microsoft.servicefabric.data._state_provider_replica.restoreAsync(String)
  exceptions:
  - type: b1c38b44
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.restoreAsync(String,RestorePolicy,Duration,CancellationToken)
  id: restoreAsync(String,RestorePolicy,Duration,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: restoreAsync(String backupFolderPath, RestorePolicy restorePolicy, Duration timeout, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.restoreAsync(String backupFolderPath, RestorePolicy restorePolicy, Duration timeout, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.restoreAsync(String backupFolderPath, RestorePolicy restorePolicy, Duration timeout, CancellationToken cancellationToken)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.restoreAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 351
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Restore a backup taken by <xref uid=\"\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.data.StateProviderReplica#backupAsync(BiFunction)</xref> or <xref uid=\"\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.data.StateProviderReplica#backupAsync(BackupOption, Duration, CancellationToken, BiFunction)</xref><b>Remarks:</b>Backup/restore is not supported by <xref uid=\"microsoft.servicefabric.actors.runtime._volatile_actor_state_provider\" data-throw-if-not-resolved=\"false\">VolatileActorStateProvider</xref>. </p>"
  syntax:
    content: public CompletableFuture<?> restoreAsync(String backupFolderPath, RestorePolicy restorePolicy, Duration timeout, CancellationToken cancellationToken)
    parameters:
    - id: backupFolderPath
      type: "26831127"
      description: <p>Directory from where replica will be restored from. </p>
    - id: restorePolicy
      type: microsoft.servicefabric.data._restore_policy
      description: <p>The <xref uid="" data-throw-if-not-resolved="false">RestorePolicy</xref>. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The timeout for this operation. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: <p>The token to monitor for cancellation requests. </p>
    return:
      type: 16409f84
      description: <p>Task that represents the asynchronous restore operation. </p>
  overridden: microsoft.servicefabric.data._state_provider_replica.restoreAsync(String,RestorePolicy,Duration,CancellationToken)
  exceptions:
  - type: b1c38b44
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.saveReminderAsync(ActorId,ActorReminder,CancellationToken)
  id: saveReminderAsync(ActorId,ActorReminder,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: saveReminderAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.saveReminderAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.saveReminderAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.saveReminderAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 845
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Saves the specified actor reminder. If an actor reminder with given name does not exist, it adds the actor reminder otherwise existing actor reminder with same name is updated.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<?> saveReminderAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>ID of actor for which to save reminder. </p>
    - id: reminder
      type: microsoft.servicefabric.actors.runtime._actor_reminder
      description: <p>Actor reminder to save. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>A task that represents the asynchronous save operation. </p>
  overridden: microsoft.servicefabric.actors.runtime._actor_state_provider.saveReminderAsync(ActorId,ActorReminder,CancellationToken)
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.saveStateAsync(ActorId,List<ActorStateChange>,CancellationToken)
  id: saveStateAsync(ActorId,List<ActorStateChange>,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.saveStateAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 641
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Saves the specified set of actor state changes atomically.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<?> saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>ID of the actor for which to save the state changes. </p>
    - id: stateChanges
      type: 5618da2dmicrosoft.servicefabric.actors.runtime._actor_state_changea08ddfce
      description: <p>Collection of state changes to save. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>A task that represents the asynchronous save operation. The collection of state changes should contain only one item for a given state name. The save operation will fail on trying to add an actor state which already exists or update/remove an actor state which does not exist. </p>
  overridden: microsoft.servicefabric.actors.runtime._actor_state_provider.saveStateAsync(ActorId,List<ActorStateChange>,CancellationToken)
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>>)
  id: setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>>)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)
  nameWithType: VolatileActorStateProvider.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.setOnDataLossCallback*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 357
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Function called during suspected data-loss</p>\r\n<p></p>"
  syntax:
    content: public void setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)
    parameters:
    - id: onDataLossAsync
      type: 432ffe41system.fabric._cancellation_token774bd4f0
      description: <p>TODO. Function called as part of suspected data loss processing. Function takes in CancellationToken and returns a CompletableFuture that represents the asynchronous processing of the event. Returning true, indicates that the replica's state has been restored. False indicates that the replica's state has not been changed. </p>
  overridden: microsoft.servicefabric.data._state_provider_replica.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>>)
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.traceId()
  id: traceId()
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: traceId()
  nameWithType: VolatileActorStateProvider.traceId()
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.traceId()
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.traceId*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 972
  package: microsoft.servicefabric.actors.runtime
  syntax:
    content: public String traceId()
    return:
      type: "26831127"
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.traceType()
  id: traceType()
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: traceType()
  nameWithType: VolatileActorStateProvider.traceType()
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.traceType()
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.traceType*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 967
  package: microsoft.servicefabric.actors.runtime
  syntax:
    content: public String traceType()
    return:
      type: "26831127"
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.transientErrorRetryDelay()
  id: transientErrorRetryDelay()
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: transientErrorRetryDelay()
  nameWithType: VolatileActorStateProvider.transientErrorRetryDelay()
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.transientErrorRetryDelay()
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.transientErrorRetryDelay*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 982
  package: microsoft.servicefabric.actors.runtime
  syntax:
    content: public Duration transientErrorRetryDelay()
    return:
      type: e02a2de0
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)
  id: updateEpochAsync(Epoch,SequenceNumber,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.updateEpochAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 428
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Indicates to a replica that the configuration of a replica set has changed due to a change or attempted change to the Primary replica. The change occurs due to failure or load balancing of the previous Primary replica. Epoch changes act as a barrier by segmenting operations into the exact configuration periods in which they were sent by a specific Primary replica.</p>\r\n<p>\r\n  <b>Remarks:</b>This method is called because the Primary replica of the replica set has changed, or a change was attempted. Secondary replicas receive this method either when they are about to become the new Primary replica, or, if they are not the new Primary replica, they receive it when they attempt to get the first operation from the new Primary replica from the replication stream. Primary replicas might occasionally receive this method if there is an attempt to swap the Primary replica, which fails. The information in the <xref uid=\"system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\">StateProvider#updateEpochAsync(Epoch, SequenceNumber, CancellationToken)</xref> method enables the service to maintain a progress vector, which is a list of each epoch that the replica has received, and the maximum LSN that they contained. The progress vector data along with the current applied maximum LSN is useful for a Secondary replica to send during the copy operation to describe how far the operation has progressed. Comparing progress vectors that are received from Secondary replicas during the copy operation enables Primary replicas to determine whether the Secondary replica is up-to-date, what state must be sent to the Secondary replica, and whether the Secondary replica has made false progress. False progress means that an LSN in a previous epoch was greater than the LSN that the Primary replica receives. </p>"
  syntax:
    content: public CompletableFuture<?> updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)
    parameters:
    - id: epoch
      type: system.fabric._epoch
      description: <p>The new <xref uid="" data-throw-if-not-resolved="false">Epoch</xref>. </p>
    - id: previousEpochLastSequenceNumber
      type: system.fabric._sequence_number
      description: <p>The maximum sequence number (LSN) that should have been observed in the previous epoch. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>Returns Task. </p>
  overridden: system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.VolatileActorStateProvider()
  id: VolatileActorStateProvider()
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: VolatileActorStateProvider()
  nameWithType: VolatileActorStateProvider.VolatileActorStateProvider()
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.VolatileActorStateProvider()
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.VolatileActorStateProvider*
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 108
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Creates an instance of <xref uid=\"microsoft.servicefabric.actors.runtime._volatile_actor_state_provider\" data-throw-if-not-resolved=\"false\">VolatileActorStateProvider</xref>. </p>"
  syntax:
    content: public VolatileActorStateProvider()
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.VolatileActorStateProvider(ReplicatorSettings)
  id: VolatileActorStateProvider(ReplicatorSettings)
  parent: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  langs:
  - java
  name: VolatileActorStateProvider(ReplicatorSettings replicatorSettings)
  nameWithType: VolatileActorStateProvider.VolatileActorStateProvider(ReplicatorSettings replicatorSettings)
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.VolatileActorStateProvider(ReplicatorSettings replicatorSettings)
  overload: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.VolatileActorStateProvider*
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/VolatileActorStateProvider.java
    startLine: 119
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Creates an instance of <xref uid=\"microsoft.servicefabric.actors.runtime._volatile_actor_state_provider\" data-throw-if-not-resolved=\"false\">VolatileActorStateProvider</xref> with specified replicator settings.</p>\r\n<p></p>"
  syntax:
    content: public VolatileActorStateProvider(ReplicatorSettings replicatorSettings)
    parameters:
    - id: replicatorSettings
      type: system.fabric._replicator_settings
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">ReplicatorSettings</xref> object that describes replicator settings. </p>
references:
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.VolatileActorStateProvider*
  name: VolatileActorStateProvider
  nameWithType: VolatileActorStateProvider.VolatileActorStateProvider
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.VolatileActorStateProvider
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.initialize*
  name: initialize
  nameWithType: VolatileActorStateProvider.initialize
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.initialize
  package: microsoft.servicefabric.actors.runtime
- uid: 9cdf14d0system.fabric._replicatora08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: system.fabric._replicator
    name: Replicator
    fullName: system.fabric.Replicator
    href: system.fabric._replicator.yml
  - name: '>'
    fullName: '>'
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.openAsync*
  name: openAsync
  nameWithType: VolatileActorStateProvider.openAsync
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.openAsync
  package: microsoft.servicefabric.actors.runtime
- uid: 16409f84
  spec.java:
  - name: CompletableFuture<?>
    fullName: CompletableFuture<?>
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.changeRoleAsync*
  name: changeRoleAsync
  nameWithType: VolatileActorStateProvider.changeRoleAsync
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.changeRoleAsync
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.closeAsync*
  name: closeAsync
  nameWithType: VolatileActorStateProvider.closeAsync
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.closeAsync
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.abort*
  name: abort
  nameWithType: VolatileActorStateProvider.abort
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.abort
  package: microsoft.servicefabric.actors.runtime
- uid: b1c38b44
  spec.java:
  - name: UnsupportedOperationException
    fullName: UnsupportedOperationException
- uid: 8ead6242microsoft.servicefabric.data._backup_infob33c76fcsystem.fabric._cancellation_token774bd4f0
  spec.java:
  - name: BiFunction<
    fullName: BiFunction<
  - uid: microsoft.servicefabric.data._backup_info
    name: BackupInfo
    fullName: microsoft.servicefabric.data.BackupInfo
    href: microsoft.servicefabric.data._backup_info.yml
  - name: ', '
    fullName: ', '
  - uid: system.fabric._cancellation_token
    name: CancellationToken
    fullName: system.fabric.CancellationToken
    href: system.fabric._cancellation_token.yml
  - name: ', CompletableFuture<Boolean>>'
    fullName: ', CompletableFuture<Boolean>>'
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.backupAsync*
  name: backupAsync
  nameWithType: VolatileActorStateProvider.backupAsync
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.backupAsync
  package: microsoft.servicefabric.actors.runtime
- uid: e02a2de0
  spec.java:
  - name: Duration
    fullName: Duration
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.restoreAsync*
  name: restoreAsync
  nameWithType: VolatileActorStateProvider.restoreAsync
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.restoreAsync
  package: microsoft.servicefabric.actors.runtime
- uid: 432ffe41system.fabric._cancellation_token774bd4f0
  spec.java:
  - name: Function<
    fullName: Function<
  - uid: system.fabric._cancellation_token
    name: CancellationToken
    fullName: system.fabric.CancellationToken
    href: system.fabric._cancellation_token.yml
  - name: ', CompletableFuture<Boolean>>'
    fullName: ', CompletableFuture<Boolean>>'
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.setOnDataLossCallback*
  name: setOnDataLossCallback
  nameWithType: VolatileActorStateProvider.setOnDataLossCallback
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.setOnDataLossCallback
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.onSnapshotAsync*
  name: onSnapshotAsync
  nameWithType: VolatileActorStateProvider.onSnapshotAsync
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.onSnapshotAsync
  package: microsoft.servicefabric.actors.runtime
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.getLastCommittedSequenceNumber*
  name: getLastCommittedSequenceNumber
  nameWithType: VolatileActorStateProvider.getLastCommittedSequenceNumber
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.getLastCommittedSequenceNumber
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.updateEpochAsync*
  name: updateEpochAsync
  nameWithType: VolatileActorStateProvider.updateEpochAsync
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.updateEpochAsync
  package: microsoft.servicefabric.actors.runtime
- uid: 7e53ac82
  spec.java:
  - name: CompletableFuture<Boolean>
    fullName: CompletableFuture<Boolean>
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.onDataLossAsync*
  name: onDataLossAsync
  nameWithType: VolatileActorStateProvider.onDataLossAsync
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.onDataLossAsync
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.getCopyContext*
  name: getCopyContext
  nameWithType: VolatileActorStateProvider.getCopyContext
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.getCopyContext
  package: microsoft.servicefabric.actors.runtime
- uid: 12fe80de
  spec.java:
  - name: IllegalStateException
    fullName: IllegalStateException
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.getCopyState*
  name: getCopyState
  nameWithType: VolatileActorStateProvider.getCopyState
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.getCopyState
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.actorActivatedAsync*
  name: actorActivatedAsync
  nameWithType: VolatileActorStateProvider.actorActivatedAsync
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.actorActivatedAsync
  package: microsoft.servicefabric.actors.runtime
- uid: 5618da2dmicrosoft.servicefabric.actors.runtime._actor_state_changea08ddfce
  spec.java:
  - name: List<
    fullName: List<
  - uid: microsoft.servicefabric.actors.runtime._actor_state_change
    name: ActorStateChange
    fullName: microsoft.servicefabric.actors.runtime.ActorStateChange
    href: microsoft.servicefabric.actors.runtime._actor_state_change.yml
  - name: '>'
    fullName: '>'
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.saveStateAsync*
  name: saveStateAsync
  nameWithType: VolatileActorStateProvider.saveStateAsync
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.saveStateAsync
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.containsStateAsync*
  name: containsStateAsync
  nameWithType: VolatileActorStateProvider.containsStateAsync
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.containsStateAsync
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.removeActorAsync*
  name: removeActorAsync
  nameWithType: VolatileActorStateProvider.removeActorAsync
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.removeActorAsync
  package: microsoft.servicefabric.actors.runtime
- uid: d20512af
  spec.java:
  - name: CompletableFuture<List<String>>
    fullName: CompletableFuture<List<String>>
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.enumerateStateNamesAsync*
  name: enumerateStateNamesAsync
  nameWithType: VolatileActorStateProvider.enumerateStateNamesAsync
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.enumerateStateNamesAsync
  package: microsoft.servicefabric.actors.runtime
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: 9cdf14d0microsoft.servicefabric.actors._paged_result78504a52microsoft.servicefabric.actors._actor_ide7daa122
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: microsoft.servicefabric.actors._paged_result
    name: PagedResult
    fullName: microsoft.servicefabric.actors.PagedResult
    href: microsoft.servicefabric.actors._paged_result.yml
  - name: <
    fullName: <
  - uid: microsoft.servicefabric.actors._actor_id
    name: ActorId
    fullName: microsoft.servicefabric.actors.ActorId
    href: microsoft.servicefabric.actors._actor_id.yml
  - name: '>>'
    fullName: '>>'
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.getActorsAsync*
  name: getActorsAsync
  nameWithType: VolatileActorStateProvider.getActorsAsync
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.getActorsAsync
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.saveReminderAsync*
  name: saveReminderAsync
  nameWithType: VolatileActorStateProvider.saveReminderAsync
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.saveReminderAsync
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.deleteReminderAsync*
  name: deleteReminderAsync
  nameWithType: VolatileActorStateProvider.deleteReminderAsync
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.deleteReminderAsync
  package: microsoft.servicefabric.actors.runtime
- uid: 6110eba5microsoft.servicefabric.actors._actor_id89fe8e3d
  spec.java:
  - name: Map<
    fullName: Map<
  - uid: microsoft.servicefabric.actors._actor_id
    name: ActorId
    fullName: microsoft.servicefabric.actors.ActorId
    href: microsoft.servicefabric.actors._actor_id.yml
  - name: ', Collection<String>>'
    fullName: ', Collection<String>>'
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.deleteRemindersAsync*
  name: deleteRemindersAsync
  nameWithType: VolatileActorStateProvider.deleteRemindersAsync
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.deleteRemindersAsync
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.reminderCallbackCompletedAsync*
  name: reminderCallbackCompletedAsync
  nameWithType: VolatileActorStateProvider.reminderCallbackCompletedAsync
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.reminderCallbackCompletedAsync
  package: microsoft.servicefabric.actors.runtime
- uid: 9cdf14d0microsoft.servicefabric.actors.runtime._actor_reminder_collectiona08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: microsoft.servicefabric.actors.runtime._actor_reminder_collection
    name: ActorReminderCollection
    fullName: microsoft.servicefabric.actors.runtime.ActorReminderCollection
    href: microsoft.servicefabric.actors.runtime._actor_reminder_collection.yml
  - name: '>'
    fullName: '>'
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.loadRemindersAsync*
  name: loadRemindersAsync
  nameWithType: VolatileActorStateProvider.loadRemindersAsync
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.loadRemindersAsync
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.traceType*
  name: traceType
  nameWithType: VolatileActorStateProvider.traceType
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.traceType
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.traceId*
  name: traceId
  nameWithType: VolatileActorStateProvider.traceId
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.traceId
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.currentReplicaRole*
  name: currentReplicaRole
  nameWithType: VolatileActorStateProvider.currentReplicaRole
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.currentReplicaRole
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.transientErrorRetryDelay*
  name: transientErrorRetryDelay
  nameWithType: VolatileActorStateProvider.transientErrorRetryDelay
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.transientErrorRetryDelay
  package: microsoft.servicefabric.actors.runtime
- uid: c27a23df
  spec.java:
  - name: FabricKeyNotFoundException
    fullName: FabricKeyNotFoundException
- uid: 6d056e8b
  spec.java:
  - name: <T> CompletableFuture<T>
    fullName: <T> CompletableFuture<T>
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.loadStateAsync*
  name: loadStateAsync
  nameWithType: VolatileActorStateProvider.loadStateAsync
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.loadStateAsync
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._actor_state_provider
  parent: microsoft.servicefabric.actors.runtime
  href: microsoft.servicefabric.actors.runtime._actor_state_provider.yml
  name: ActorStateProvider
  nameWithType: ActorStateProvider
  fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider
  type: Interface
  summary: <p>Represents the interface that an actor state provider needs to implement for actor runtime to communicate with it. </p>
  syntax:
    content: public interface ActorStateProvider extends StateProviderReplica
- uid: system.fabric._state_provider
  parent: system.fabric
  href: system.fabric._state_provider.yml
  name: StateProvider
  nameWithType: StateProvider
  fullName: system.fabric.StateProvider
  type: Interface
  summary: <p>Defines the behavior that a service must implement to interact with the <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">FabricReplicator</xref>. </p>
  syntax:
    content: public interface StateProvider
- uid: microsoft.servicefabric.actors.runtime._actor_type_information
  parent: microsoft.servicefabric.actors.runtime
  href: microsoft.servicefabric.actors.runtime._actor_type_information.yml
  name: ActorTypeInformation
  nameWithType: ActorTypeInformation
  fullName: microsoft.servicefabric.actors.runtime.ActorTypeInformation
  type: Class
  summary: <p>Contains information about the type implementing an actor. </p>
  syntax:
    content: public class ActorTypeInformation
- uid: system.fabric._fabric_replicator
  parent: system.fabric
  href: system.fabric._fabric_replicator.yml
  name: FabricReplicator
  nameWithType: FabricReplicator
  fullName: system.fabric.FabricReplicator
  type: Class
  summary: >-
    <p>Replicates state for high availability and reliability. </p>

    <p>

      <b>Remarks:</b>Provides the default implementation of the <xref uid="system.fabric._state_replicator" data-throw-if-not-resolved="false">system.fabric.StateReplicator</xref>, <xref uid="system.fabric._replicator" data-throw-if-not-resolved="false">system.fabric.Replicator</xref>, and <xref uid="system.fabric._primary_replicator" data-throw-if-not-resolved="false">system.fabric.PrimaryReplicator</xref> interfaces, which user services can use, along with their implementation of the <xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">system.fabric.StateProvider</xref> interface. An instance of the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref> class is obtained via the <xref uid="system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)" data-throw-if-not-resolved="false">system.fabric.StatefulServicePartition#createReplicator( system.fabric.StateProvider, system.fabric.ReplicatorSettings)</xref> method, which can be cast to <xref uid="system.fabric._state_replicator" data-throw-if-not-resolved="false">system.fabric.StateReplicator</xref> for use. </p>
  syntax:
    content: public class FabricReplicator implements Replicator
- uid: system.fabric._state_replicator2
  parent: system.fabric
  href: system.fabric._state_replicator2.yml
  name: StateReplicator2
  nameWithType: StateReplicator2
  fullName: system.fabric.StateReplicator2
  type: Interface
  summary: <p>Exposes replication-related functions of the <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref> class that are used by <xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">system.fabric.StateProvider</xref> to replicate state to ensure high availability. </p>
  syntax:
    content: public interface StateReplicator2 extends StateReplicator
- uid: system.fabric._replica_role
  parent: system.fabric
  href: system.fabric._replica_role.yml
  name: ReplicaRole
  nameWithType: ReplicaRole
  fullName: system.fabric.ReplicaRole
  type: Enum
  summary: >-
    <p>Indicates the role of a stateful service replica. </p>

    <p>

      <b>Remarks:</b>Service Fabric requires different behaviors from a service replica depending on what role it currently performs. </p>
  syntax:
    content: public enum ReplicaRole
- uid: system.fabric._stateful_service_partition
  parent: system.fabric
  href: system.fabric._stateful_service_partition.yml
  name: StatefulServicePartition
  nameWithType: StatefulServicePartition
  fullName: system.fabric.StatefulServicePartition
  type: Interface
  syntax:
    content: public interface StatefulServicePartition extends ServicePartition
- uid: system.fabric._stateful_service_initialization_parameters
  parent: system.fabric
  href: system.fabric._stateful_service_initialization_parameters.yml
  name: StatefulServiceInitializationParameters
  nameWithType: StatefulServiceInitializationParameters
  fullName: system.fabric.StatefulServiceInitializationParameters
  type: Class
  summary: <p>Defines service initialization parameters for a stateful service. </p>
  syntax:
    content: public class StatefulServiceInitializationParameters extends ServiceInitializationParameters
- uid: system.fabric._replicator_settings
  parent: system.fabric
  href: system.fabric._replicator_settings.yml
  name: ReplicatorSettings
  nameWithType: ReplicatorSettings
  fullName: system.fabric.ReplicatorSettings
  type: Class
  summary: <p>Allows a stateful replica to configure the <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref> when creating it <xref uid="system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)" data-throw-if-not-resolved="false">system.fabric.StatefulServicePartition#createReplicator(system.fabric.StateProvider,system.fabric.ReplicatorSettings)</xref></p>
  syntax:
    content: public class ReplicatorSettings
- uid: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider
  parent: microsoft.servicefabric.actors.runtime
  href: microsoft.servicefabric.actors.runtime._volatile_actor_state_provider.yml
  name: VolatileActorStateProvider
  nameWithType: VolatileActorStateProvider
  fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider
  type: Class
  summary: <p>ActorStateProvider implementation for Volatile persistence i.e Actor state is kept in-memory only. </p>
  syntax: *o1
- uid: microsoft.servicefabric.data._state_provider_replica.initialize(StatefulServiceInitializationParameters)
  parent: microsoft.servicefabric.data._state_provider_replica
  href: microsoft.servicefabric.data._state_provider_replica.yml
  name: initialize(StatefulServiceInitializationParameters initializationParameters)
  nameWithType: StateProviderReplica.initialize(StatefulServiceInitializationParameters initializationParameters)
  fullName: microsoft.servicefabric.data.StateProviderReplica.initialize(StatefulServiceInitializationParameters initializationParameters)
  type: Method
  summary: >-
    <p>Initialize the state provider replica using the service initialization information.</p>

    <p>

      <b>Remarks:</b>No complex processing should be done during Initialize. Expensive or long-running initialization should be done in OpenAsync. </p>
  syntax:
    content: public void initialize(StatefulServiceInitializationParameters initializationParameters)
    parameters:
    - id: initializationParameters
      type: system.fabric._stateful_service_initialization_parameters
      description: <p>Service initialization information such as service name, partition id, replica id, and code package information. </p>
- uid: system.fabric._replicator
  parent: system.fabric
  href: system.fabric._replicator.yml
  name: Replicator
  nameWithType: Replicator
  fullName: system.fabric.Replicator
  type: Interface
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax:
    content: public interface Replicator extends PrimaryReplicator
- uid: microsoft.servicefabric.data._state_provider_replica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)
  parent: microsoft.servicefabric.data._state_provider_replica
  href: microsoft.servicefabric.data._state_provider_replica.yml
  name: openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)
  nameWithType: StateProviderReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.data.StateProviderReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>Open the state provider replica for use.</p>

    <p>

      <b>Remarks:</b>Extended state provider initialization tasks can be started at this time. </p>
  syntax:
    content: public CompletableFuture<Replicator> openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)
    parameters:
    - id: openMode
      type: system.fabric._replica_open_mode
      description: <p>Indicates whether this is a new or existing replica. </p>
    - id: partition
      type: system.fabric._stateful_service_partition
      description: <p>The partition this replica belongs to. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 9cdf14d0system.fabric._replicatora08ddfce
      description: <p>Task that represents the asynchronous open operation. The result contains the replicator responsible for replicating state between other state provider replicas in the partition. </p>
- uid: system.fabric._replica_open_mode
  parent: system.fabric
  href: system.fabric._replica_open_mode.yml
  name: ReplicaOpenMode
  nameWithType: ReplicaOpenMode
  fullName: system.fabric.ReplicaOpenMode
  type: Enum
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax:
    content: public enum ReplicaOpenMode
- uid: system.fabric._cancellation_token
  parent: system.fabric
  href: system.fabric._cancellation_token.yml
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: system.fabric.CancellationToken
  type: Class
  summary: <p>A CancellationToken is used to propagate notification that operations should be canceled. You create a cancellation token by instantiating a <xref uid="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource</xref> object, which manages cancellation tokens retrieved from its <xref uid="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#getToken()</xref> method. You then pass the cancellation token to any number of operations that should receive notice of cancellation. The token cannot be used to initiate cancellation. When the owning object calls <xref uid="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#cancel()</xref>, the cancelled property on the cancellation token is set to true. The objects that receive the notification can respond in whatever manner is appropriate. </p>
  syntax:
    content: public class CancellationToken
- uid: microsoft.servicefabric.data._state_provider_replica.changeRoleAsync(ReplicaRole,CancellationToken)
  parent: microsoft.servicefabric.data._state_provider_replica
  href: microsoft.servicefabric.data._state_provider_replica.yml
  name: changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  nameWithType: StateProviderReplica.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.data.StateProviderReplica.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>Notify the state provider replica that its role is changing, for example to Primary or Secondary.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<?> changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
    parameters:
    - id: newRole
      type: system.fabric._replica_role
      description: <p>The new replica role, such as primary or secondary. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>Task that represents the asynchronous change role operation. </p>
- uid: microsoft.servicefabric.data._state_provider_replica.closeAsync(CancellationToken)
  parent: microsoft.servicefabric.data._state_provider_replica
  href: microsoft.servicefabric.data._state_provider_replica.yml
  name: closeAsync(CancellationToken cancellationToken)
  nameWithType: StateProviderReplica.closeAsync(CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.data.StateProviderReplica.closeAsync(CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>Gracefully close the state provider replica.</p>

    <p>

      <b>Remarks:</b>This generally occurs when the replica's code is being upgrade, the replica is being moved due to load balancing, or a transient fault is detected. </p>
  syntax:
    content: public CompletableFuture<?> closeAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>Task that represents the asynchronous close operation. </p>
- uid: microsoft.servicefabric.data._state_provider_replica.abort()
  parent: microsoft.servicefabric.data._state_provider_replica
  href: microsoft.servicefabric.data._state_provider_replica.yml
  name: abort()
  nameWithType: StateProviderReplica.abort()
  fullName: microsoft.servicefabric.data.StateProviderReplica.abort()
  type: Method
  summary: >-
    <p>Forcefully abort the state provider replica. </p>

    <p>

      <b>Remarks:</b>This generally occurs when a permanent fault is detected on the node, or when Service Fabric cannot reliably manage the replica's lifecycle due to internal failures. </p>
  syntax:
    content: public void abort()
- uid: microsoft.servicefabric.data._state_provider_replica.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
  parent: microsoft.servicefabric.data._state_provider_replica
  href: microsoft.servicefabric.data._state_provider_replica.yml
  name: backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  nameWithType: StateProviderReplica.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  fullName: microsoft.servicefabric.data.StateProviderReplica.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  type: Method
  summary: >-
    <p>Performs a full backup of all reliable state managed by this ReliableStateManager.</p>

    <p>

      <b>Remarks:</b> A FULL backup will be performed with a one-hour timeout. Boolean returned by the backupCallback indicate whether the service was able to successfully move the backup folder to an external location. If false is returned, BackupAsync throws UnsupportedOperationException with the relevant message indicating backupCallback returned false. Also, backup will be marked as unsuccessful. </p>
  syntax:
    content: public CompletableFuture<?> backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
    parameters:
    - id: backupCallback
      type: 8ead6242microsoft.servicefabric.data._backup_infob33c76fcsystem.fabric._cancellation_token774bd4f0
      description: <p>Callback to be called when the backup folder has been created locally and is ready to be moved out of the node </p>
    return:
      type: 16409f84
      description: <p>Task that represents the asynchronous backup operation. </p>
- uid: microsoft.servicefabric.data._backup_info
  parent: microsoft.servicefabric.data
  href: microsoft.servicefabric.data._backup_info.yml
  name: BackupInfo
  nameWithType: BackupInfo
  fullName: microsoft.servicefabric.data.BackupInfo
  type: Class
  summary: <p>Provides info about the backup. </p>
  syntax:
    content: public class BackupInfo
- uid: microsoft.servicefabric.data._state_provider_replica.backupAsync(BackupOption,Duration,CancellationToken,BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
  parent: microsoft.servicefabric.data._state_provider_replica
  href: microsoft.servicefabric.data._state_provider_replica.yml
  name: backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  nameWithType: StateProviderReplica.backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  fullName: microsoft.servicefabric.data.StateProviderReplica.backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  type: Method
  summary: >-
    <p>Performs a full backup of all reliable state managed by this ReliableStateManager.</p>

    <p>

      <b>Remarks:</b> A FULL backup will be performed with a one-hour timeout. Boolean returned by the backupCallback indicate whether the service was able to successfully move the backup folder to an external location. If false is returned, BackupAsync throws UnsupportedOperationException with the relevant message indicating backupCallback returned false. Also, backup will be marked as unsuccessful. </p>
  syntax:
    content: public CompletableFuture<?> backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
    parameters:
    - id: option
      type: microsoft.servicefabric.data._backup_option
      description: <p>The type of backup to perform. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The timeout for this operation. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: <p>The token to monitor for cancellation requests. </p>
    - id: backupCallback
      type: 8ead6242microsoft.servicefabric.data._backup_infob33c76fcsystem.fabric._cancellation_token774bd4f0
      description: <p>Callback to be called when the backup folder has been created locally and is ready to be moved out of the node </p>
    return:
      type: 16409f84
      description: <p>Task that represents the asynchronous backup operation. </p>
- uid: microsoft.servicefabric.data._backup_option
  parent: microsoft.servicefabric.data
  href: microsoft.servicefabric.data._backup_option.yml
  name: BackupOption
  nameWithType: BackupOption
  fullName: microsoft.servicefabric.data.BackupOption
  type: Enum
  summary: <p>Indicates the kind of the backup. </p>
  syntax:
    content: public enum BackupOption
- uid: microsoft.servicefabric.data._state_provider_replica.restoreAsync(String)
  parent: microsoft.servicefabric.data._state_provider_replica
  href: microsoft.servicefabric.data._state_provider_replica.yml
  name: restoreAsync(String backupFolderPath)
  nameWithType: StateProviderReplica.restoreAsync(String backupFolderPath)
  fullName: microsoft.servicefabric.data.StateProviderReplica.restoreAsync(String backupFolderPath)
  type: Method
  summary: >-
    <p>Restore a backup taken.</p>

    <p>

      <b>Remarks:</b>A safe restore will be performed, meaning the restore will only be completed if the data to restore is ahead of state of the current replica. </p>
  syntax:
    content: public CompletableFuture<?> restoreAsync(String backupFolderPath)
    parameters:
    - id: backupFolderPath
      type: "26831127"
      description: <p>The directory where the replica is to be restored from. This parameter cannot be null, empty or contain just whitespace. UNC paths may also be provided. </p>
    return:
      type: 16409f84
      description: <p>Task that represents the asynchronous restore operation. </p>
- uid: microsoft.servicefabric.data._state_provider_replica.restoreAsync(String,RestorePolicy,Duration,CancellationToken)
  parent: microsoft.servicefabric.data._state_provider_replica
  href: microsoft.servicefabric.data._state_provider_replica.yml
  name: restoreAsync(String backupFolderPath, RestorePolicy restorePolicy, Duration timeout, CancellationToken cancellationToken)
  nameWithType: StateProviderReplica.restoreAsync(String backupFolderPath, RestorePolicy restorePolicy, Duration timeout, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.data.StateProviderReplica.restoreAsync(String backupFolderPath, RestorePolicy restorePolicy, Duration timeout, CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>Restore a backup taken</p>

    <p></p>
  syntax:
    content: public CompletableFuture<?> restoreAsync(String backupFolderPath, RestorePolicy restorePolicy, Duration timeout, CancellationToken cancellationToken)
    parameters:
    - id: backupFolderPath
      type: "26831127"
      description: <p>The directory where the replica is to be restored from. This parameter cannot be null, empty or contain just whitespace. UNC paths may also be provided. </p>
    - id: restorePolicy
      type: microsoft.servicefabric.data._restore_policy
      description: <p>The restore policy. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The timeout for this operation. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: <p>The token to monitor for cancellation requests. </p>
    return:
      type: 16409f84
      description: <p>Task that represents the asynchronous restore operation. </p>
- uid: microsoft.servicefabric.data._restore_policy
  parent: microsoft.servicefabric.data
  href: microsoft.servicefabric.data._restore_policy.yml
  name: RestorePolicy
  nameWithType: RestorePolicy
  fullName: microsoft.servicefabric.data.RestorePolicy
  type: Enum
  summary: <p>Policy for restore operation. </p>
  syntax:
    content: public enum RestorePolicy
- uid: microsoft.servicefabric.data._state_provider_replica.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>>)
  parent: microsoft.servicefabric.data._state_provider_replica
  href: microsoft.servicefabric.data._state_provider_replica.yml
  name: setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)
  nameWithType: StateProviderReplica.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)
  fullName: microsoft.servicefabric.data.StateProviderReplica.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)
  type: Method
  summary: >-
    <p>Function called during suspected data-loss</p>

    <p></p>
  syntax:
    content: public void setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)
    parameters:
    - id: onDataLossAsync
      type: 432ffe41system.fabric._cancellation_token774bd4f0
      description: <p>TODO. Function called as part of suspected data loss processing. Function takes in CancellationToken and returns a CompletableFuture that represents the asynchronous processing of the event. Returning true, indicates that the replica's state has been restored. False indicates that the replica's state has not been changed. </p>
- uid: system.fabric._state_provider.getLastCommittedSequenceNumber()
  parent: system.fabric._state_provider
  href: system.fabric._state_provider.yml
  name: getLastCommittedSequenceNumber()
  nameWithType: StateProvider.getLastCommittedSequenceNumber()
  fullName: system.fabric.StateProvider.getLastCommittedSequenceNumber()
  type: Method
  summary: >-
    <p>Obtains the last sequence number that the service has committed.</p>

    <p></p>
  syntax:
    content: public long getLastCommittedSequenceNumber()
    return:
      type: 0364520f
      description: <p>Returns long. </p>
- uid: system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)
  parent: system.fabric._state_provider
  href: system.fabric._state_provider.yml
  name: updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)
  nameWithType: StateProvider.updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)
  fullName: system.fabric.StateProvider.updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>Indicates to a replica that the configuration of a replica set has changed due to a change or attempted change to the Primary replica. The change occurs due to failure or load balancing of the previous Primary replica. Epoch changes act as a barrier by segmenting operations into the exact configuration periods in which they were sent by a specific Primary replica.</p>

    <p>

      <b>Remarks:</b>The information in the <xref uid="system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false">system.fabric.StateProvider#updateEpochAsync(Epoch, SequenceNumber, CancellationToken)</xref> method enables the service to maintain a progress vector, which is a list of each epoch that the replica has received, and the maximum LSN that they contained. The progress vector data along with the current applied maximum LSN is useful for a Secondary replica to send during the copy operation to describe the state of the replica. Comparing progress vectors that are received from Secondary replicas during the copy operation enables Primary replicas to determine whether the Secondary replica is up-to-date, what state must be sent to the Secondary replica, and whether the Secondary replica has made false progress. False progress means that a secondary replica reports an LSN in a previous epoch was greater than the LSN that the Primary replica has in its progress vector. </p>
  syntax:
    content: public CompletableFuture<?> updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)
    parameters:
    - id: epoch
      type: system.fabric._epoch
      description: <p>The new <xref uid="system.fabric._epoch" data-throw-if-not-resolved="false">system.fabric.Epoch</xref>. </p>
    - id: previousEpochLastSequenceNumber
      type: system.fabric._sequence_number
      description: <p>The maximum sequence number (LSN) in the previous epoch. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>Returns <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref>. </p>
- uid: system.fabric._epoch
  parent: system.fabric
  href: system.fabric._epoch.yml
  name: Epoch
  nameWithType: Epoch
  fullName: system.fabric.Epoch
  type: Class
  summary: >-
    <p>Represents the current version of the partition in Service Fabric. </p>

    <p>

      <b>Remarks:</b>An Epoch is a configuration number for the partition as a whole. When the configuration of the replica set changes, for example when the Primary replica changes, the operations that are replicated from the new Primary replica are said to be a new Epoch from the ones which were sent by the old Primary replica. The fact that the Primary has changed is not directly visible to Secondary replicas, which are usually unaffected by the failure that affected the original Primary replica. To track that the Primary replica has changed has to be communicated to the Secondary replica. This communication occurs via the <xref uid="system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false">system.fabric.StateProvider#updateEpochAsync(system.fabric.Epoch, system.fabric.SequenceNumber, system.fabric.CancellationToken)</xref> method. Most services can ignore the details of the inner fields of the Epoch as it is usually sufficient to know that the Epoch has changed and to compare Epochs to determine relative ordering of operations and events in the system. Comparison operations are provided for this purpose. </p>
  syntax:
    content: public class Epoch
- uid: system.fabric._sequence_number
  parent: system.fabric
  href: system.fabric._sequence_number.yml
  name: SequenceNumber
  nameWithType: SequenceNumber
  fullName: system.fabric.SequenceNumber
  type: Class
  summary: <p>Long, represents the last sequence number (LSN) of the operation. </p>
  syntax:
    content: public class SequenceNumber
- uid: system.fabric._state_provider.onDataLossAsync(CancellationToken)
  parent: system.fabric._state_provider
  href: system.fabric._state_provider.yml
  name: onDataLossAsync(CancellationToken cancellationToken)
  nameWithType: StateProvider.onDataLossAsync(CancellationToken cancellationToken)
  fullName: system.fabric.StateProvider.onDataLossAsync(CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>Indicates that a write quorum of replicas in this replica set has been lost, and that therefore data loss might have occurred. The replica set consists of a majority of replicas, which includes the Primary replica.</p>

    <p>

      <b>Remarks:</b>When the Service Fabric runtime observes the failure of a quorum of replicas, which includes the Primary replica, it elects a new Primary replica and immediately calls this method on the new Primary replica. A Primary replica that is informed of possible data loss can choose to restore its state from some external data source or can continue to run with the state that it currently has. If the service continues to run with its current state, it should return false from this method, which indicates that no state change has been made. If it has restored or altered its state, such as rolling back incomplete work, it should return true. If true is returned, then the state in other replicas must be assumed to be incorrect. Therefore, the Service Fabric runtime removes the other replicas from the replica set and recreates them. </p>
  syntax:
    content: public CompletableFuture<Boolean> onDataLossAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 7e53ac82
      description: <p>Returns <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref> of type <xref uid="" data-throw-if-not-resolved="false">java.lang.Boolean</xref>, that indicates whether the state provider as part of processing this notification has changed its state </p>
- uid: system.fabric._operation_data_stream
  parent: system.fabric
  href: system.fabric._operation_data_stream.yml
  name: OperationDataStream
  nameWithType: OperationDataStream
  fullName: system.fabric.OperationDataStream
  type: Interface
  summary: <p>An <xref uid="" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref> encapsulates a stream of <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">system.fabric.OperationData</xref> objects that are exchanged between Primary replica and Secondary replica. Objects that implement <xref uid="" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref> are used during the copy process. Both the copy context <xref uid="system.fabric._state_provider.getCopyContext()" data-throw-if-not-resolved="false">system.fabric.StateProvider#getCopyContext()</xref> method that is sent from the Secondary replica to the Primary replica and the copy state <xref uid="system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false">system.fabric.StateProvider#getCopyState(SequenceNumber, OperationDataStream)</xref> method implement the <xref uid="" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref> interface. </p>
  syntax:
    content: public interface OperationDataStream
- uid: system.fabric._state_provider.getCopyContext()
  parent: system.fabric._state_provider
  href: system.fabric._state_provider.yml
  name: getCopyContext()
  nameWithType: StateProvider.getCopyContext()
  fullName: system.fabric.StateProvider.getCopyContext()
  type: Method
  summary: >-
    <p>Obtains context on a Secondary replica after it is created and opened to send context to the Primary replica.</p>

    <p>

      <b>Remarks:</b>The Primary replica analyzes the context and sends back state via <xref uid="system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false">system.fabric.StateProvider#getCopyState(SequenceNumber, OperationDataStream)</xref> . <xref uid="system.fabric._state_provider.getCopyContext()" data-throw-if-not-resolved="false">system.fabric.StateProvider#getCopyContext()</xref> is called on newly created, idle Secondary replicas and provides a mechanism to asynchronously establish a bidirectional conversation with the Primary replica. The Secondary replica sends <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">system.fabric.OperationData</xref> objects with which the Primary replica can determine the progress of collecting context on the Secondary replica. The Primary replica responds by sending the required state back. See <xref uid="system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false">system.fabric.StateProvider#getCopyState(SequenceNumber, OperationDataStream)</xref> at the Primary replica for the other half of the exchange. For in-memory services, the <xref uid="system.fabric._state_provider.getCopyContext()" data-throw-if-not-resolved="false">system.fabric.StateProvider#getCopyContext()</xref> method is not called, as the state of the Secondary replicas is known (they are empty and will require all of the state). </p>
  syntax:
    content: public OperationDataStream getCopyContext()
    return:
      type: system.fabric._operation_data_stream
      description: <p>Returns <xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref>. </p>
- uid: system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)
  parent: system.fabric._state_provider
  href: system.fabric._state_provider.yml
  name: getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
  nameWithType: StateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
  fullName: system.fabric.StateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
  type: Method
  summary: >-
    <p>Obtains state on a Primary replica that is required to build a Secondary replica.</p>

    <p>

      <b>Remarks:</b>Just as <xref uid="system.fabric._state_provider.getCopyContext()" data-throw-if-not-resolved="false">system.fabric.StateProvider#getCopyContext()</xref> enables the Secondary replica to send context to the Primary replica via an <xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref>, <xref uid="system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false">system.fabric.StateProvider#getCopyState(SequenceNumber, OperationDataStream)</xref> enables the Primary replica to respond with an <xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref>. The stream contains objects that are delivered to the Secondary replica via the <xref uid="system.fabric._state_replicator.getCopyStream()" data-throw-if-not-resolved="false">system.fabric.StateReplicator#getCopyStream()</xref> method of the <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref> class. The objects implement <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">system.fabric.Operation</xref> and contain the specified data. When the Primary replica receives this call, it should create and return another <xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref> that contains <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">system.fabric.OperationData</xref>. <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">system.fabric.OperationData</xref> represents the data/state that the Secondary replica </p>
  syntax:
    content: public OperationDataStream getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
    parameters:
    - id: upToSequenceNumber
      type: system.fabric._sequence_number
      description: <p>The maximum last sequence number (LSN) that should be placed in the copy stream via the <xref uid="system.fabric._state_replicator.getCopyStream()" data-throw-if-not-resolved="false">system.fabric.StateReplicator#getCopyStream()</xref> method. LSNs greater than this number are delivered to the Secondary replica as a part of the replication stream via the <xref uid="system.fabric._state_replicator.getReplicationStream()" data-throw-if-not-resolved="false">system.fabric.StateReplicator#getReplicationStream()</xref> method. </p>
    - id: copyContext
      type: system.fabric._operation_data_stream
      description: <p>An <xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref> that contains the <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">system.fabric.OperationData</xref> objects that are created by the Secondary replica. requires to catch up to the provided </p>
    return:
      type: system.fabric._operation_data_stream
      description: <p>Returns <xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref>. </p>
- uid: system.fabric._state_replicator.getCopyStream()
  parent: system.fabric._state_replicator
  href: system.fabric._state_replicator.yml
  name: getCopyStream()
  nameWithType: StateReplicator.getCopyStream()
  fullName: system.fabric.StateReplicator.getCopyStream()
  type: Method
  summary: <p>Gets copy stream </p>
  syntax:
    content: public OperationStream getCopyStream()
    return:
      type: system.fabric._operation_stream
      description: <p>The returned CopyStream contains <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref> objects that implement <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Operation</xref>. The <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref> objects are obtained from the CopyState <xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">OperationDataStream</xref> that the Primary replica returns from <xref uid="system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false">StateProvider#getCopyState(SequenceNumber, OperationDataStream)</xref>. When a replica is created and has to catch up, it should obtain the CopyStream and begin to send, apply, and acknowledge the Copy objects that implement <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Operation</xref>. In parallel, the replica responds to the corresponding <xref uid="system.fabric._state_provider.getCopyContext()" data-throw-if-not-resolved="false">StateProvider#getCopyContext()</xref> and <xref uid="system.fabric._operation_data_stream.getNextAsync(CancellationToken)" data-throw-if-not-resolved="false">OperationDataStream#getNextAsync(CancellationToken)</xref>calls. The stream is empty when the returned <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Operation</xref> method is null. </p>
- uid: system.fabric._state_replicator.getReplicationStream()
  parent: system.fabric._state_replicator
  href: system.fabric._state_replicator.yml
  name: getReplicationStream()
  nameWithType: StateReplicator.getReplicationStream()
  fullName: system.fabric.StateReplicator.getReplicationStream()
  type: Method
  summary: <p>Gets replication stream. </p>
  syntax:
    content: public OperationStream getReplicationStream()
    return:
      type: system.fabric._operation_stream
      description: <p>The ReplicationStream implements <xref uid="system.fabric._operation_stream" data-throw-if-not-resolved="false">OperationStream</xref>. The ReplicationStream contains <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref> objects that implement <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Operation</xref>. The objects are provided by the Primary replica via <xref uid="system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false">StateReplicator#replicateAsync(OperationData, SequenceNumber, CancellationToken)</xref>. Generally a Secondary replica should send <xref uid="system.fabric._operation_stream.getOperationAsync(CancellationToken)" data-throw-if-not-resolved="false">OperationStream#getOperationAsync(CancellationToken)</xref>. Although Service Fabric does not require services to do so, generally services should transfer all <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref> objects out of the copy stream first, and then transfer operations out of the replication stream. The transfer from both copies in parallel is supported but increases the complexity of applying state updates correctly and is recommended only for advanced services. The stream is empty when the returned <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Operation</xref> method is null. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_state_provider.initialize(ActorTypeInformation)
  parent: microsoft.servicefabric.actors.runtime._actor_state_provider
  href: microsoft.servicefabric.actors.runtime._actor_state_provider.yml
  name: initialize(ActorTypeInformation actorTypeInformation)
  nameWithType: ActorStateProvider.initialize(ActorTypeInformation actorTypeInformation)
  fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.initialize(ActorTypeInformation actorTypeInformation)
  type: Method
  summary: >-
    <p>Initializes the actor state provider with type information of the actor type associated with it.</p>

    <p></p>
  syntax:
    content: public void initialize(ActorTypeInformation actorTypeInformation)
    parameters:
    - id: actorTypeInformation
      type: microsoft.servicefabric.actors.runtime._actor_type_information
      description: <p>Type information of the actor class </p>
- uid: microsoft.servicefabric.actors.runtime._actor_state_provider.actorActivatedAsync(ActorId,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._actor_state_provider
  href: microsoft.servicefabric.actors.runtime._actor_state_provider.yml
  name: actorActivatedAsync(ActorId actorId, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.actorActivatedAsync(ActorId actorId, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.actorActivatedAsync(ActorId actorId, CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>This method is invoked as part of the activation process of the actor with the specified Id.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<?> actorActivatedAsync(ActorId actorId, CancellationToken cancellationToken)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>ID of the actor that is activated. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>A task that represents the asynchronous Actor activation notification processing. </p>
- uid: microsoft.servicefabric.actors._actor_id
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._actor_id.yml
  name: ActorId
  nameWithType: ActorId
  fullName: microsoft.servicefabric.actors.ActorId
  type: Class
  summary: <p>ActorId represents identity of an actor within an actor service. The actors can be identified by <xref uid="" data-throw-if-not-resolved="false">java.lang.String</xref>, <xref uid="" data-throw-if-not-resolved="false">java.util.UUID</xref> or long. </p>
  syntax:
    content: public class ActorId
- uid: microsoft.servicefabric.actors.runtime._actor_state_provider.saveStateAsync(ActorId,List<ActorStateChange>,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._actor_state_provider
  href: microsoft.servicefabric.actors.runtime._actor_state_provider.yml
  name: saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>Saves the specified set of actor state changes atomically.</p>

    <p>

      <b>Remarks:</b> The collection of state changes should contain only one item for a given state name. The save operation will fail on trying to add an actor state which already exists or update/remove an actor state which does not exist. </p>
  syntax:
    content: public CompletableFuture<?> saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>ID of the actor for which to save the state changes. </p>
    - id: stateChanges
      type: 5618da2dmicrosoft.servicefabric.actors.runtime._actor_state_changea08ddfce
      description: <p>Collection of state changes to save. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>A task that represents the asynchronous save operation. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_state_change
  parent: microsoft.servicefabric.actors.runtime
  href: microsoft.servicefabric.actors.runtime._actor_state_change.yml
  name: ActorStateChange
  nameWithType: ActorStateChange
  fullName: microsoft.servicefabric.actors.runtime.ActorStateChange
  type: Class
  summary: <p>Represents change to an actor state with a given state name. </p>
  syntax:
    content: public class ActorStateChange
- uid: microsoft.servicefabric.actors.runtime._actor_state_provider.containsStateAsync(ActorId,String,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._actor_state_provider
  href: microsoft.servicefabric.actors.runtime._actor_state_provider.yml
  name: containsStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.containsStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.containsStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>Checks whether actor state provider contains an actor state with specified state name.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Boolean> containsStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>ID of the actor for which to check state existence. </p>
    - id: stateName
      type: "26831127"
      description: <p>Name of the actor state to check for existence. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 7e53ac82
      description: <p>A task that represents the asynchronous check operation. The value of TResult parameter is true if state with specified name exists otherwise false. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_state_provider.removeActorAsync(ActorId,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._actor_state_provider
  href: microsoft.servicefabric.actors.runtime._actor_state_provider.yml
  name: removeActorAsync(ActorId actorId, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.removeActorAsync(ActorId actorId, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.removeActorAsync(ActorId actorId, CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>Removes all the existing states and reminders associated with specified actor atomically.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<?> removeActorAsync(ActorId actorId, CancellationToken cancellationToken)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>ID of the actor for which to remove state. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>A task that represents the asynchronous remove operation. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_state_provider.enumerateStateNamesAsync(ActorId,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._actor_state_provider
  href: microsoft.servicefabric.actors.runtime._actor_state_provider.yml
  name: enumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.enumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.enumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>Creates an enumerable of all the state names associated with specified actor.</p>

    <p>

      <b>Remarks:</b>The enumerator returned from actor state provider is safe to use concurrently with reads and writes to the state provider. It represents a snapshot consistent view of the state provider. </p>
  syntax:
    content: public CompletableFuture<List<String>> enumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>ID of the actor for which to create enumerable. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: d20512af
      description: <p>A task that represents the asynchronous enumeration operation. The value of TResult parameter is an enumerable of all state names associated with specified actor. </p>
- uid: microsoft.servicefabric.actors._paged_result
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._paged_result.yml
  name: PagedResult<T>
  nameWithType: PagedResult<T>
  fullName: microsoft.servicefabric.actors.PagedResult<T>
  type: Class
  summary: >-
    <p>Represents the result of actor query calls.</p>

    <p></p>
  syntax:
    content: public class PagedResult<T>
    typeParameters:
    - id: T
      type: 8ce1ecb9
      description: <p>Type of the items this query result contains. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_state_provider.getActorsAsync(int,ContinuationToken,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._actor_state_provider
  href: microsoft.servicefabric.actors.runtime._actor_state_provider.yml
  name: getActorsAsync(int numItemsToReturn, ContinuationToken continuationToken, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.getActorsAsync(int numItemsToReturn, ContinuationToken continuationToken, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.getActorsAsync(int numItemsToReturn, ContinuationToken continuationToken, CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>Gets ActorIds from the State Provider.</p>

    <p>

      <b>Remarks:</b> The </p>
  syntax:
    content: public CompletableFuture<PagedResult<ActorId>> getActorsAsync(int numItemsToReturn, ContinuationToken continuationToken, CancellationToken cancellationToken)
    parameters:
    - id: numItemsToReturn
      type: f75371fa
      description: <p>Number of items requested to be returned. </p>
    - id: continuationToken
      type: microsoft.servicefabric.actors._continuation_token
      description: <p>A continuation token to start querying the results from. A null value of continuation token means start returning values form the beginning. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 9cdf14d0microsoft.servicefabric.actors._paged_result78504a52microsoft.servicefabric.actors._actor_ide7daa122
      description: <p>A task that represents the asynchronous operation of call to server. </p>
- uid: microsoft.servicefabric.actors._continuation_token
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._continuation_token.yml
  name: ContinuationToken
  nameWithType: ContinuationToken
  fullName: microsoft.servicefabric.actors.ContinuationToken
  type: Class
  summary: >-
    <p>Represents a continuation token for query operations. </p>

    <p>

      <b>Remarks:</b>A method that may return a partial set of results via a <xref uid="microsoft.servicefabric.actors._paged_result" data-throw-if-not-resolved="false">PagedResult</xref> object also returns a continuation token in the object, which can be used in a subsequent call to return the next set of available results. </p>
  syntax:
    content: public class ContinuationToken
- uid: microsoft.servicefabric.actors.runtime._actor_state_provider.saveReminderAsync(ActorId,ActorReminder,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._actor_state_provider
  href: microsoft.servicefabric.actors.runtime._actor_state_provider.yml
  name: saveReminderAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.saveReminderAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.saveReminderAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>Saves the specified actor reminder. If an actor reminder with given name does not exist, it adds the actor reminder otherwise existing actor reminder with same name is updated.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<?> saveReminderAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>ID of the actor for which to save the reminder. </p>
    - id: reminder
      type: microsoft.servicefabric.actors.runtime._actor_reminder
      description: <p>Actor reminder to save. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>A task that represents the asynchronous save operation. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_reminder
  parent: microsoft.servicefabric.actors.runtime
  href: microsoft.servicefabric.actors.runtime._actor_reminder.yml
  name: ActorReminder
  nameWithType: ActorReminder
  fullName: microsoft.servicefabric.actors.runtime.ActorReminder
  type: Interface
  summary: <p>Encapsulates Reminder set on an Actor </p>
  syntax:
    content: public interface ActorReminder
- uid: microsoft.servicefabric.actors.runtime._actor_state_provider.deleteReminderAsync(ActorId,String,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._actor_state_provider
  href: microsoft.servicefabric.actors.runtime._actor_state_provider.yml
  name: deleteReminderAsync(ActorId actorId, String reminderName, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.deleteReminderAsync(ActorId actorId, String reminderName, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.deleteReminderAsync(ActorId actorId, String reminderName, CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>Deletes the specified actor reminder if it exists.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<?> deleteReminderAsync(ActorId actorId, String reminderName, CancellationToken cancellationToken)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>ID of the actor for which to delete the reminder. </p>
    - id: reminderName
      type: "26831127"
      description: <p>Name of the reminder to delete. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>A task that represents the asynchronous delete operation. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_state_provider.deleteRemindersAsync(Map<ActorId, Collection<String>>,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._actor_state_provider
  href: microsoft.servicefabric.actors.runtime._actor_state_provider.yml
  name: deleteRemindersAsync(Map<ActorId, Collection<String>> reminderNames, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.deleteRemindersAsync(Map<ActorId, Collection<String>> reminderNames, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.deleteRemindersAsync(Map<ActorId, Collection<String>> reminderNames, CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>Deletes the specified set of reminders</p>

    <p></p>
  syntax:
    content: public CompletableFuture<?> deleteRemindersAsync(Map<ActorId, Collection<String>> reminderNames, CancellationToken cancellationToken)
    parameters:
    - id: reminderNames
      type: 6110eba5microsoft.servicefabric.actors._actor_id89fe8e3d
      description: <p>The set of reminders to delete </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>A task that represents the asynchronous delete operation. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_state_provider.reminderCallbackCompletedAsync(ActorId,ActorReminder,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._actor_state_provider
  href: microsoft.servicefabric.actors.runtime._actor_state_provider.yml
  name: reminderCallbackCompletedAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.reminderCallbackCompletedAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.reminderCallbackCompletedAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  type: Method
  summary: <p>Invoked when a reminder fires and finishes executing its callback <xref uid="microsoft.servicefabric.actors.runtime._remindable.receiveReminderAsync(String,byte [],Duration,Duration)" data-throw-if-not-resolved="false">Remindable#receiveReminderAsync</xref> successfully </p>
  syntax:
    content: public CompletableFuture<?> reminderCallbackCompletedAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>ID of the actor which own reminder </p>
    - id: reminder
      type: microsoft.servicefabric.actors.runtime._actor_reminder
      description: <p>Actor reminder that completed successfully. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: <p>The token to monitor for cancellation requests. </p>
    return:
      type: 16409f84
      description: <p>A task that represents the asynchronous reminder callback completed notification processing. </p>
- uid: microsoft.servicefabric.actors.runtime._remindable.receiveReminderAsync(String,byte [],Duration,Duration)
  parent: microsoft.servicefabric.actors.runtime._remindable
  href: microsoft.servicefabric.actors.runtime._remindable.yml
  name: receiveReminderAsync(String reminderName, byte[] context, Duration timeSpan, Duration period)
  nameWithType: Remindable.receiveReminderAsync(String reminderName, byte[] context, Duration timeSpan, Duration period)
  fullName: microsoft.servicefabric.actors.runtime.Remindable.receiveReminderAsync(String reminderName, byte[] context, Duration timeSpan, Duration period)
  type: Method
  summary: >-
    <p>Reminder call back invoked when an actor reminder is triggered.</p>

    <p>

      <b>Remarks:</b> When a reminder is triggered, Actors runtime will invoke receiveReminderAsync method on the Actor. An actor can register multiple reminders and the ReceiveReminderAsync method is invoked any time any of those reminders is triggered. The actor can use the reminder name that is passed in to the receiveReminderAsync method to figure out which reminder was triggered. The Actors runtime saves the actor state when the receiveReminderAsync call completes. If an error occurs in saving the state, that actor object will be deactivated and a new instance will be activated, to specify that the state need not be saved upon completion of the reminder. </p>
  syntax:
    content: public CompletableFuture<?> receiveReminderAsync(String reminderName, byte[] context, Duration timeSpan, Duration period)
    parameters:
    - id: reminderName
      type: "26831127"
      description: <p>Name of the reminder. </p>
    - id: context
      type: ccd9418d
      description: <p>Context associated with this reminder was passed to Actors runtime when reminder was created. </p>
    - id: timeSpan
      type: e02a2de0
      description: <p>Time when reminder with name reminderName is due </p>
    - id: period
      type: e02a2de0
      description: <p>The time interval between triggering of reminder with name reminderName. </p>
    return:
      type: 16409f84
      description: <p>A task that represents the asynchronous operation performed by this callback. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_reminder_collection
  parent: microsoft.servicefabric.actors.runtime
  href: microsoft.servicefabric.actors.runtime._actor_reminder_collection.yml
  name: ActorReminderCollection
  nameWithType: ActorReminderCollection
  fullName: microsoft.servicefabric.actors.runtime.ActorReminderCollection
  type: Interface
  summary: <p>Captures ActorReminderState for Actors </p>
  syntax:
    content: public interface ActorReminderCollection
- uid: microsoft.servicefabric.actors.runtime._actor_state_provider.loadRemindersAsync(CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._actor_state_provider
  href: microsoft.servicefabric.actors.runtime._actor_state_provider.yml
  name: loadRemindersAsync(CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.loadRemindersAsync(CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.loadRemindersAsync(CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>Loads all the reminders contained in the actor state provider.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ActorReminderCollection> loadRemindersAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 9cdf14d0microsoft.servicefabric.actors.runtime._actor_reminder_collectiona08ddfce
      description: <p>A task that represents the asynchronous load operation. The value of TResult parameter is a collection of all actor reminders contained in the actor state provider. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_state_provider.loadStateAsync(ActorId,String,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime._actor_state_provider
  href: microsoft.servicefabric.actors.runtime._actor_state_provider.yml
  name: loadStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.loadStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.loadStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>Loads the actor state associated with the specified state name.</p>

    <p></p>
  syntax:
    content: public <T> CompletableFuture<T> loadStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>ID of the actor for which to load the state. </p>
    - id: stateName
      type: "26831127"
      description: <p>Name of the actor state to load. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 6d056e8b
      description: <p>A task that represents the asynchronous load operation. The value of TResult parameter contains value of actor state associated with given state name. </p>
- uid: system.fabric._configuration_package
  parent: system.fabric
  href: system.fabric._configuration_package.yml
  name: ConfigurationPackage
  nameWithType: ConfigurationPackage
  fullName: system.fabric.ConfigurationPackage
  type: Class
  summary: <p>Represents a configuration package. </p>
  syntax:
    content: public class ConfigurationPackage
