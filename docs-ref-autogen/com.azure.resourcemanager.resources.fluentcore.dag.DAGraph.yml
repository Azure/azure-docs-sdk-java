### YamlMime:JavaType
uid: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph"
fullName: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>"
name: "DAGraph<DataT,NodeT>"
nameWithType: "DAGraph<DataT,NodeT>"
summary: "Type representing a DAG (directed acyclic graph)."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.dag.Graph?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "<xref href=\"com.azure.resourcemanager.resources.fluentcore.dag.Graph?alt=com.azure.resourcemanager.resources.fluentcore.dag.Graph&text=Graph\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"com.azure.resourcemanager.resources.fluentcore.dag.Graph.addNode(NodeT)?alt=com.azure.resourcemanager.resources.fluentcore.dag.Graph.addNode&text=addNode\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.resourcemanager.resources.fluentcore.dag.Graph.findPath(java.lang.String,java.lang.String)?alt=com.azure.resourcemanager.resources.fluentcore.dag.Graph.findPath&text=findPath\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.resourcemanager.resources.fluentcore.dag.Graph.getNodes()?alt=com.azure.resourcemanager.resources.fluentcore.dag.Graph.getNodes&text=getNodes\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.resourcemanager.resources.fluentcore.dag.Graph.visit(com.azure.resourcemanager.resources.fluentcore.dag.Graph.Visitor<com.azure.resourcemanager.resources.fluentcore.dag.Node<DataT,NodeT>>)?alt=com.azure.resourcemanager.resources.fluentcore.dag.Graph.visit&text=visit\" data-throw-if-not-resolved=\"False\" />"
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public class DAGraph<DataT,NodeT> extends Graph<DataT,NodeT>"
constructors:
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.DAGraph(NodeT)"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.DAGraph(NodeT rootNode)"
  name: "DAGraph(NodeT rootNode)"
  nameWithType: "DAGraph<DataT,NodeT>.DAGraph(NodeT rootNode)"
  summary: "Creates a new DAG."
  parameters:
  - description: "the root node of this DAG"
    name: "rootNode"
    type: "<xref href=\"NodeT?alt=NodeT&text=NodeT\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DAGraph(NodeT rootNode)"
  desc: "Creates a new DAG."
fields:
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.parentDAGs"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.parentDAGs"
  name: "parentDAGs"
  nameWithType: "DAGraph<DataT,NodeT>.parentDAGs"
  summary: "the immediate parent graphs of this graph."
  modifiers:
  - "protected"
  field:
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.resourcemanager.resources.fluentcore.dag.DAGraph?alt=com.azure.resourcemanager.resources.fluentcore.dag.DAGraph&text=DAGraph\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"DataT?alt=DataT&text=DataT\" data-throw-if-not-resolved=\"False\" />,<xref href=\"NodeT?alt=NodeT&text=NodeT\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "protected List<DAGraph<DataT,NodeT>> parentDAGs"
  desc: "the immediate parent graphs of this graph. A parent graph is the one with it's root depends on this graph's root."
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.queue"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.queue"
  name: "queue"
  nameWithType: "DAGraph<DataT,NodeT>.queue"
  summary: "to perform topological sort on the graph."
  modifiers:
  - "protected"
  field:
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html\">ConcurrentLinkedQueue</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
  syntax: "protected ConcurrentLinkedQueue<String> queue"
  desc: "to perform topological sort on the graph. During sorting queue contains the nodes which are ready to invoke."
methods:
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.addDependencyGraph(com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>)"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.addDependencyGraph(DAGraph<DataT,NodeT> dependencyGraph)"
  name: "addDependencyGraph(DAGraph<DataT,NodeT> dependencyGraph)"
  nameWithType: "DAGraph<DataT,NodeT>.addDependencyGraph(DAGraph<DataT,NodeT> dependencyGraph)"
  summary: "Mark root of this DAG depends on given DAG's root."
  parameters:
  - description: "the dependency DAG"
    name: "dependencyGraph"
    type: "<xref href=\"com.azure.resourcemanager.resources.fluentcore.dag.DAGraph?alt=com.azure.resourcemanager.resources.fluentcore.dag.DAGraph&text=DAGraph\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"DataT?alt=DataT&text=DataT\" data-throw-if-not-resolved=\"False\" />,<xref href=\"NodeT?alt=NodeT&text=NodeT\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void addDependencyGraph(DAGraph<DataT,NodeT> dependencyGraph)"
  desc: "Mark root of this DAG depends on given DAG's root."
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.addDependentGraph(com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>)"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.addDependentGraph(DAGraph<DataT,NodeT> dependentGraph)"
  name: "addDependentGraph(DAGraph<DataT,NodeT> dependentGraph)"
  nameWithType: "DAGraph<DataT,NodeT>.addDependentGraph(DAGraph<DataT,NodeT> dependentGraph)"
  summary: "Mark root of the given DAG depends on this DAG's root."
  parameters:
  - description: "the dependent DAG"
    name: "dependentGraph"
    type: "<xref href=\"com.azure.resourcemanager.resources.fluentcore.dag.DAGraph?alt=com.azure.resourcemanager.resources.fluentcore.dag.DAGraph&text=DAGraph\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"DataT?alt=DataT&text=DataT\" data-throw-if-not-resolved=\"False\" />,<xref href=\"NodeT?alt=NodeT&text=NodeT\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void addDependentGraph(DAGraph<DataT,NodeT> dependentGraph)"
  desc: "Mark root of the given DAG depends on this DAG's root."
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.getNext()"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.getNext()"
  name: "getNext()"
  nameWithType: "DAGraph<DataT,NodeT>.getNext()"
  summary: "Gets next node in the DAG which has no dependency or all of it's dependencies are resolved and ready to be consumed."
  syntax: "public NodeT getNext()"
  desc: "Gets next node in the DAG which has no dependency or all of it's dependencies are resolved and ready to be consumed."
  returns:
    description: "next node or null if all the nodes have been explored or no node is available at this moment."
    type: "<xref href=\"NodeT?alt=NodeT&text=NodeT\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.getNode(java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.getNode(String key)"
  name: "getNode(String key)"
  nameWithType: "DAGraph<DataT,NodeT>.getNode(String key)"
  summary: "Gets a node from the graph with the given key."
  parameters:
  - description: "the key of the node"
    name: "key"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public NodeT getNode(String key)"
  desc: "Gets a node from the graph with the given key."
  returns:
    description: "the node"
    type: "<xref href=\"NodeT?alt=NodeT&text=NodeT\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.hasParents()"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.hasParents()"
  name: "hasParents()"
  nameWithType: "DAGraph<DataT,NodeT>.hasParents()"
  syntax: "public boolean hasParents()"
  returns:
    description: "true if this DAG is merged with one or more DAG and hence has parents"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.isPreparer()"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.isPreparer()"
  name: "isPreparer()"
  nameWithType: "DAGraph<DataT,NodeT>.isPreparer()"
  syntax: "public boolean isPreparer()"
  returns:
    description: "true if this dag is the preparer responsible for\n preparing the DAG for traversal."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.isRootNode(NodeT)"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.isRootNode(NodeT node)"
  name: "isRootNode(NodeT node)"
  nameWithType: "DAGraph<DataT,NodeT>.isRootNode(NodeT node)"
  summary: "Checks whether the given node is root node of this DAG."
  parameters:
  - description: "the node <xref uid=\"com.azure.resourcemanager.resources.fluentcore.dag.DAGNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DAGNode\"></xref> to be checked"
    name: "node"
    type: "<xref href=\"NodeT?alt=NodeT&text=NodeT\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean isRootNode(NodeT node)"
  desc: "Checks whether the given node is root node of this DAG."
  returns:
    description: "true if the given node is root node"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.prepareForEnumeration()"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.prepareForEnumeration()"
  name: "prepareForEnumeration()"
  nameWithType: "DAGraph<DataT,NodeT>.prepareForEnumeration()"
  summary: "Prepares this DAG for node enumeration using get<wbr>Next method, each call to get<wbr>Next returns next node in the DAG with no dependencies."
  syntax: "public void prepareForEnumeration()"
  desc: "Prepares this DAG for node enumeration using getNext method, each call to getNext returns next node in the DAG with no dependencies."
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.reportCompletion(NodeT)"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.reportCompletion(NodeT completed)"
  name: "reportCompletion(NodeT completed)"
  nameWithType: "DAGraph<DataT,NodeT>.reportCompletion(NodeT completed)"
  summary: "Reports that a node is resolved hence other nodes depends on it can consume it."
  parameters:
  - description: "the node ready to be consumed"
    name: "completed"
    type: "<xref href=\"NodeT?alt=NodeT&text=NodeT\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void reportCompletion(NodeT completed)"
  desc: "Reports that a node is resolved hence other nodes depends on it can consume it."
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.reportError(NodeT,java.lang.Throwable)"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.reportError(NodeT faulted, Throwable throwable)"
  name: "reportError(NodeT faulted, Throwable throwable)"
  nameWithType: "DAGraph<DataT,NodeT>.reportError(NodeT faulted, Throwable throwable)"
  summary: "Reports that a node is faulted."
  parameters:
  - description: "the node faulted"
    name: "faulted"
    type: "<xref href=\"NodeT?alt=NodeT&text=NodeT\" data-throw-if-not-resolved=\"False\" />"
  - description: "the reason for fault"
    name: "throwable"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Throwable.html\">Throwable</a>"
  syntax: "public void reportError(NodeT faulted, Throwable throwable)"
  desc: "Reports that a node is faulted."
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.root()"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.root()"
  name: "root()"
  nameWithType: "DAGraph<DataT,NodeT>.root()"
  modifiers:
  - "protected"
  syntax: "protected NodeT root()"
  returns:
    description: "the root node of the DAG."
    type: "<xref href=\"NodeT?alt=NodeT&text=NodeT\" data-throw-if-not-resolved=\"False\" />"
type: "class"
typeParameters:
- description: "the type of the data stored in the graph nodes"
  name: "DataT"
- description: "the type of the nodes in the graph"
  name: "NodeT"
desc: "Type representing a DAG (directed acyclic graph).\n\neach node in a DAG is represented by <xref uid=\"com.azure.resourcemanager.resources.fluentcore.dag.DAGNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DAGNode\"></xref>"
metadata: {}
package: "com.azure.resourcemanager.resources.fluentcore.dag"
artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.19.0
