### YamlMime:JavaType
uid: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph"
fullName: "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>"
name: "DAGraph<DataT,NodeT>"
nameWithType: "DAGraph<DataT,NodeT>"
summary: "Type representing a DAG (directed acyclic graph).\n\neach node in a DAG is represented by <xref uid=\"com.azure.resourcemanager.resources.fluentcore.dag.DAGNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DAGNode\"></xref>"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.dag.Graph\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.resourcemanager.resources.fluentcore.dag.Graph.addNode(NodeT)"
- "com.azure.resourcemanager.resources.fluentcore.dag.Graph.findPath(java.lang.String,java.lang.String)"
- "com.azure.resourcemanager.resources.fluentcore.dag.Graph.getNodes()"
- "com.azure.resourcemanager.resources.fluentcore.dag.Graph.visit(com.azure.resourcemanager.resources.fluentcore.dag.Graph.Visitor<com.azure.resourcemanager.resources.fluentcore.dag.Node<DataT,NodeT>>)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class DAGraph<DataT,NodeT> extends Graph<DataT,NodeT>"
constructors:
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.DAGraph(NodeT)"
fields:
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.parentDAGs"
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.queue"
methods:
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.addDependencyGraph(com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>)"
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.addDependentGraph(com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>)"
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.getNext()"
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.getNode(java.lang.String)"
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.hasParents()"
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.isPreparer()"
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.isRootNode(NodeT)"
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.prepareForEnumeration()"
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.reportCompletion(NodeT)"
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.reportError(NodeT,java.lang.Throwable)"
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.root()"
type: "class"
typeParameters:
- name: "DataT"
- name: "NodeT"
metadata: {}
package: "com.azure.resourcemanager.resources.fluentcore.dag"
artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.1.0
