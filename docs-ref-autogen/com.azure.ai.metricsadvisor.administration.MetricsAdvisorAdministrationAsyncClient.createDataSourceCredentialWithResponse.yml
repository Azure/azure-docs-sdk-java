### YamlMime:JavaMember
uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataSourceCredentialWithResponse*"
fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataSourceCredentialWithResponse"
name: "createDataSourceCredentialWithResponse"
nameWithType: "MetricsAdvisorAdministrationAsyncClient.createDataSourceCredentialWithResponse"
members:
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataSourceCredentialWithResponse(com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataSourceCredentialWithResponse(DataSourceCredentialEntity dataSourceCredential)"
  name: "createDataSourceCredentialWithResponse(DataSourceCredentialEntity dataSourceCredential)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.createDataSourceCredentialWithResponse(DataSourceCredentialEntity dataSourceCredential)"
  summary: "Create a data source credential entity with REST response.\n\n**Code sample**\n\n```java\nDataSourceCredentialEntity datasourceCredential;\n final String name = \"sample_name\" + UUID.randomUUID();\n final String cId = \"f45668b2-bffa-11eb-8529-0246ac130003\";\n final String tId = \"67890ded-5e07-4e52-b225-4ae8f905afb5\";\n final String mockSecr = \"890hy69-5e07-4e52-b225-4ae8f905afb5\";\n\n datasourceCredential = new DataSourceServicePrincipalInKeyVault()\n     .setName(name)\n     .setKeyVaultForDataSourceSecrets(\"kv\", cId, mockSecr)\n     .setTenantId(tId)\n     .setSecretNameForDataSourceClientId(\"DSClientID_1\")\n     .setSecretNameForDataSourceClientSecret(\"DSClientSer_1\");\n\n metricsAdvisorAdminAsyncClient.createDataSourceCredentialWithResponse(datasourceCredential)\n     .subscribe(credentialEntityWithResponse -> {\n         System.out.printf(\"Credential Entity creation operation status: %s%n\",\n             credentialEntityWithResponse.getStatusCode());\n         if (credentialEntityWithResponse.getValue() instanceof DataSourceServicePrincipalInKeyVault) {\n             DataSourceServicePrincipalInKeyVault actualCredentialSPInKV\n                 = (DataSourceServicePrincipalInKeyVault) credentialEntityWithResponse.getValue();\n             System.out\n                 .printf(\"Actual credential entity key vault endpoint: %s%n\",\n                     actualCredentialSPInKV.getKeyVaultEndpoint());\n             System.out.printf(\"Actual credential entity key vault client Id: %s%n\",\n                 actualCredentialSPInKV.getKeyVaultClientId());\n             System.out.printf(\"Actual credential entity key vault secret name for data source: %s%n\",\n                 actualCredentialSPInKV.getSecretNameForDataSourceClientId());\n             System.out.printf(\"Actual credential entity key vault secret for data source: %s%n\",\n                 actualCredentialSPInKV.getSecretNameForDataSourceClientSecret());\n         }\n     });\n```"
  parameters:
  - description: "The credential entity."
    name: "dataSourceCredential"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataSourceCredentialEntity>> createDataSourceCredentialWithResponse(DataSourceCredentialEntity dataSourceCredential)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the created <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataSourceCredentialEntity\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.metricsadvisor.administration"
artifact: com.azure:azure-ai-metricsadvisor:1.1.1
