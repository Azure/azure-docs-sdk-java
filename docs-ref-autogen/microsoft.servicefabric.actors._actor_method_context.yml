items:
- uid: microsoft.servicefabric.actors._actor_method_context
  id: _actor_method_context
  parent: microsoft.servicefabric.actors
  children:
  - microsoft.servicefabric.actors._actor_method_context.getCallType()
  - microsoft.servicefabric.actors._actor_method_context.getMethodName()
  href: microsoft.servicefabric.actors._actor_method_context.yml
  langs:
  - java
  name: ActorMethodContext
  nameWithType: ActorMethodContext
  fullName: microsoft.servicefabric.actors.ActorMethodContext
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorMethodContext.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorMethodContext.java
    startLine: 8
  package: microsoft.servicefabric.actors
  summary: <p>An <xref href="microsoft.servicefabric.actors._actor_method_context" data-throw-if-not-resolved="false"></xref> contains information about the method that is invoked by actor runtime and is passed as an argument to <xref href="microsoft.servicefabric.actors._actor_base.onPreActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false"></xref> and <xref href="microsoft.servicefabric.actors._actor_base.onPostActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false"></xref>. </p>
  syntax: &o1
    content: public class ActorMethodContext
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - microsoft.servicefabric.actors._actor_method_context.createForActor(String)
  - microsoft.servicefabric.actors._actor_method_context.createForReminder(String)
  - microsoft.servicefabric.actors._actor_method_context.createForTimer(String)
- uid: microsoft.servicefabric.actors._actor_method_context.getCallType()
  id: getCallType()
  parent: microsoft.servicefabric.actors._actor_method_context
  href: microsoft.servicefabric.actors._actor_method_context.yml
  langs:
  - java
  name: getCallType()
  nameWithType: ActorMethodContext.getCallType()
  fullName: ActorCallType microsoft.servicefabric.actors.ActorMethodContext.getCallType()
  overload: microsoft.servicefabric.actors._actor_method_context.getCallType*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorMethodContext.java
    startLine: 43
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Type of call by actor runtime (e.g. actor interface method, timer callback etc.).</p>

    <p></p>
  syntax:
    content: public ActorCallType getCallType()
    return:
      type: microsoft.servicefabric.actors._actor_call_type
      description: <p>An <xref href="microsoft.servicefabric.actors._actor_call_type" data-throw-if-not-resolved="false"></xref> representing the call type. </p>
- uid: microsoft.servicefabric.actors._actor_method_context.getMethodName()
  id: getMethodName()
  parent: microsoft.servicefabric.actors._actor_method_context
  href: microsoft.servicefabric.actors._actor_method_context.yml
  langs:
  - java
  name: getMethodName()
  nameWithType: ActorMethodContext.getMethodName()
  fullName: String microsoft.servicefabric.actors.ActorMethodContext.getMethodName()
  overload: microsoft.servicefabric.actors._actor_method_context.getMethodName*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorMethodContext.java
    startLine: 34
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Name of the method invoked by actor runtime.</p>

    <p></p>
  syntax:
    content: public String getMethodName()
    return:
      type: "26831127"
      description: <p>A string representing the name of method. </p>
references:
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: microsoft.servicefabric.actors._actor_method_context.getMethodName*
  name: getMethodName
  nameWithType: ActorMethodContext.getMethodName
  fullName: String microsoft.servicefabric.actors.ActorMethodContext.getMethodName
  package: microsoft.servicefabric.actors
- uid: microsoft.servicefabric.actors._actor_method_context.getCallType*
  name: getCallType
  nameWithType: ActorMethodContext.getCallType
  fullName: ActorCallType microsoft.servicefabric.actors.ActorMethodContext.getCallType
  package: microsoft.servicefabric.actors
- uid: microsoft.servicefabric.actors._actor_method_context.createForActor(String)
- uid: microsoft.servicefabric.actors._actor_method_context.createForReminder(String)
- uid: microsoft.servicefabric.actors._actor_method_context.createForTimer(String)
- uid: microsoft.servicefabric.actors._actor_call_type
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._actor_call_type.yml
  name: ActorCallType
  nameWithType: ActorCallType
  fullName: microsoft.servicefabric.actors.ActorCallType
  type: Enum
  summary: >-
    <p>Represents the call-type associated with the method invoked by actor runtime. </p>

    <p>

      <bold>Remarks:</bold>This is provided as part of <xref href="microsoft.servicefabric.actors._actor_method_context" data-throw-if-not-resolved="false"></xref> which is passed as argument to <xref href="microsoft.servicefabric.actors._actor_base.onPreActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false"></xref> and <xref href="microsoft.servicefabric.actors._actor_base.onPostActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public enum ActorCallType
- uid: microsoft.servicefabric.actors._actor_method_context
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._actor_method_context.yml
  name: ActorMethodContext
  nameWithType: ActorMethodContext
  fullName: microsoft.servicefabric.actors.ActorMethodContext
  type: Class
  summary: <p>An <xref href="microsoft.servicefabric.actors._actor_method_context" data-throw-if-not-resolved="false"></xref> contains information about the method that is invoked by actor runtime and is passed as an argument to <xref href="microsoft.servicefabric.actors._actor_base.onPreActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false"></xref> and <xref href="microsoft.servicefabric.actors._actor_base.onPostActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false"></xref>. </p>
  syntax: *o1
- uid: microsoft.servicefabric.actors._actor_base.onPreActorMethodAsync(ActorMethodContext)
  parent: microsoft.servicefabric.actors._actor_base
  href: microsoft.servicefabric.actors._actor_base.yml
  name: onPreActorMethodAsync(ActorMethodContext actorMethodContext)
  nameWithType: ActorBase.onPreActorMethodAsync(ActorMethodContext actorMethodContext)
  fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorBase.onPreActorMethodAsync(ActorMethodContext actorMethodContext)
  type: Method
  summary: >-
    <p>This method is invoked by actor runtime just before invoking an actor method. Override this method for performing any actions prior to an actor method is invoked.</p>

    <p></p>
  syntax:
    content: protected CompletableFuture<?> onPreActorMethodAsync(ActorMethodContext actorMethodContext)
    parameters:
    - id: actorMethodContext
      type: microsoft.servicefabric.actors._actor_method_context
      description: <p>An <xref href="microsoft.servicefabric.actors._actor_method_context" data-throw-if-not-resolved="false"></xref> describing the method that will be invoked by actor runtime after this method finishes. </p>
    return:
      type: 16409f84
      description: >-
        <p>A <ref refid="" kindref="compound">CompletableFuture</ref> representing pre-actor-method operation. <verbatim>    &lt;b&gt;Remarks:&lt;/b&gt;This method is invoked by actor runtime prior to:

            &lt;ul&gt;

            &lt;li&gt;Invoking an actor interface method when a client request comes.&lt;/li&gt;

            &lt;li&gt;Invoking a method on {@link Remindable} interface when a reminder fires.&lt;/li&gt;

            &lt;li&gt;Invoking a timer callback when timer fires.&lt;/li&gt;

            &lt;/ul&gt;</verbatim></p>
- uid: microsoft.servicefabric.actors._actor_base.onPostActorMethodAsync(ActorMethodContext)
  parent: microsoft.servicefabric.actors._actor_base
  href: microsoft.servicefabric.actors._actor_base.yml
  name: onPostActorMethodAsync(ActorMethodContext actorMethodContext)
  nameWithType: ActorBase.onPostActorMethodAsync(ActorMethodContext actorMethodContext)
  fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorBase.onPostActorMethodAsync(ActorMethodContext actorMethodContext)
  type: Method
  summary: >-
    <p>This method is invoked by actor runtime an actor method has finished execution. Override this method for performing any actions after an actor method has finished execution.</p>

    <p></p>
  syntax:
    content: protected CompletableFuture<?> onPostActorMethodAsync(ActorMethodContext actorMethodContext)
    parameters:
    - id: actorMethodContext
      type: microsoft.servicefabric.actors._actor_method_context
      description: <p>An <xref href="microsoft.servicefabric.actors._actor_method_context" data-throw-if-not-resolved="false"></xref> describing the method that was invoked by actor runtime prior to this method. </p>
    return:
      type: 16409f84
      description: >-
        <p>A <ref refid="" kindref="compound">CompletableFuture</ref> representing post-actor-method operation. <verbatim>    &lt;b&gt;Remarks:&lt;/b&gt; This method is invoked by actor runtime prior to:

            &lt;ul&gt;

            &lt;li&gt;Invoking an actor interface method when a client request comes.&lt;/li&gt;

            &lt;li&gt;Invoking a method on {@link Remindable} interface when a reminder fires.&lt;/li&gt;

            &lt;li&gt;Invoking a timer callback when timer fires.&lt;/li&gt;

            &lt;/ul&gt;</verbatim></p>
