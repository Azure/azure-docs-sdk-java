### YamlMime:JavaMember
uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPages*"
fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPages"
name: "uploadPages"
nameWithType: "PageBlobAsyncClient.uploadPages"
members:
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPages(com.azure.storage.blob.models.PageRange,reactor.core.publisher.Flux<java.nio.ByteBuffer>)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPages(PageRange pageRange, Flux<ByteBuffer> body)"
  name: "uploadPages(PageRange pageRange, Flux<ByteBuffer> body)"
  nameWithType: "PageBlobAsyncClient.uploadPages(PageRange pageRange, Flux<ByteBuffer> body)"
  summary: "Writes one or more pages to the page blob. The write size must be a multiple of 512. For more information, see the [Azure Docs][].\n\nNote that the data passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code Samples**\n\n```java\nPageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n \n client.uploadPages(pageRange, body).subscribe(response -> System.out.printf(\n     \"Uploaded page blob with sequence number %s%n\", response.getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  parameters:
  - description: "A <xref uid=\"com.azure.storage.blob.models.PageRange\" data-throw-if-not-resolved=\"false\">PageRange</xref> object. Given that pages must be aligned with 512-byte boundaries, the start\n offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte ranges\n are 0-511, 512-1023, etc."
    name: "pageRange"
    type: "<xref href=\"com.azure.storage.blob.models.PageRange?alt=com.azure.storage.blob.models.PageRange&text=PageRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "The data to upload. Note that this <code>Flux</code> must be replayable if retries are enabled (the\n default). In other words, the Flowable must produce the same data each time it is subscribed to."
    name: "body"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<PageBlobItem> uploadPages(PageRange pageRange, Flux<ByteBuffer> body)"
  returns:
    description: "A reactive response containing the information of the uploaded pages."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.storage.blob.specialized"
artifact: com.azure:azure-storage-blob:12.8.0
