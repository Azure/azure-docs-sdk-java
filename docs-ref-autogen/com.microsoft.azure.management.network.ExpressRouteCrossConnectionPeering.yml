### YamlMime:JavaType
uid: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering"
fullName: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering"
name: "ExpressRouteCrossConnectionPeering"
nameWithType: "ExpressRouteCrossConnectionPeering"
summary: "Client-side representation of express route cross connection peering object, associated with express route cross connection."
syntax: "public interface ExpressRouteCrossConnectionPeering extends IndependentChild<NetworkManager>, HasInner<ExpressRouteCrossConnectionPeeringInner>, Refreshable<ExpressRouteCrossConnectionPeering>, Updatable<ExpressRouteCrossConnectionPeering.Update>"
methods:
- uid: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.azureASN()"
  fullName: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.azureASN()"
  name: "azureASN()"
  nameWithType: "ExpressRouteCrossConnectionPeering.azureASN()"
  modifiers:
  - "abstract"
  syntax: "public abstract int azureASN()"
  returns:
    description: "the Azure ASN"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.gatewayManagerEtag()"
  fullName: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.gatewayManagerEtag()"
  name: "gatewayManagerEtag()"
  nameWithType: "ExpressRouteCrossConnectionPeering.gatewayManagerEtag()"
  modifiers:
  - "abstract"
  syntax: "public abstract String gatewayManagerEtag()"
  returns:
    description: "the GatewayManager Etag"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.ipv6PeeringConfig()"
  fullName: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.ipv6PeeringConfig()"
  name: "ipv6PeeringConfig()"
  nameWithType: "ExpressRouteCrossConnectionPeering.ipv6PeeringConfig()"
  modifiers:
  - "abstract"
  syntax: "public abstract Ipv6ExpressRouteCircuitPeeringConfig ipv6PeeringConfig()"
  returns:
    description: "the IPv6 peering configuration."
    type: "<xref href=\"com.microsoft.azure.management.network.Ipv6ExpressRouteCircuitPeeringConfig?alt=com.microsoft.azure.management.network.Ipv6ExpressRouteCircuitPeeringConfig&text=Ipv6ExpressRouteCircuitPeeringConfig\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.lastModifiedBy()"
  fullName: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.lastModifiedBy()"
  name: "lastModifiedBy()"
  nameWithType: "ExpressRouteCrossConnectionPeering.lastModifiedBy()"
  modifiers:
  - "abstract"
  syntax: "public abstract String lastModifiedBy()"
  returns:
    description: "whether the provider or the customer last modified the peering"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.microsoftPeeringConfig()"
  fullName: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.microsoftPeeringConfig()"
  name: "microsoftPeeringConfig()"
  nameWithType: "ExpressRouteCrossConnectionPeering.microsoftPeeringConfig()"
  modifiers:
  - "abstract"
  syntax: "public abstract ExpressRouteCircuitPeeringConfig microsoftPeeringConfig()"
  returns:
    description: "the Microsoft peering configuration"
    type: "<xref href=\"com.microsoft.azure.management.network.ExpressRouteCircuitPeeringConfig?alt=com.microsoft.azure.management.network.ExpressRouteCircuitPeeringConfig&text=ExpressRouteCircuitPeeringConfig\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.peerASN()"
  fullName: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.peerASN()"
  name: "peerASN()"
  nameWithType: "ExpressRouteCrossConnectionPeering.peerASN()"
  modifiers:
  - "abstract"
  syntax: "public abstract long peerASN()"
  returns:
    description: "the peer ASN"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.peeringType()"
  fullName: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.peeringType()"
  name: "peeringType()"
  nameWithType: "ExpressRouteCrossConnectionPeering.peeringType()"
  modifiers:
  - "abstract"
  syntax: "public abstract ExpressRoutePeeringType peeringType()"
  returns:
    description: "the peering type"
    type: "<xref href=\"com.microsoft.azure.management.network.ExpressRoutePeeringType?alt=com.microsoft.azure.management.network.ExpressRoutePeeringType&text=ExpressRoutePeeringType\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.primaryAzurePort()"
  fullName: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.primaryAzurePort()"
  name: "primaryAzurePort()"
  nameWithType: "ExpressRouteCrossConnectionPeering.primaryAzurePort()"
  modifiers:
  - "abstract"
  syntax: "public abstract String primaryAzurePort()"
  returns:
    description: "the primary port"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.primaryPeerAddressPrefix()"
  fullName: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.primaryPeerAddressPrefix()"
  name: "primaryPeerAddressPrefix()"
  nameWithType: "ExpressRouteCrossConnectionPeering.primaryPeerAddressPrefix()"
  modifiers:
  - "abstract"
  syntax: "public abstract String primaryPeerAddressPrefix()"
  returns:
    description: "the primary address prefix"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.provisioningState()"
  fullName: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.provisioningState()"
  name: "provisioningState()"
  nameWithType: "ExpressRouteCrossConnectionPeering.provisioningState()"
  modifiers:
  - "abstract"
  syntax: "public abstract ProvisioningState provisioningState()"
  returns:
    description: "the provisioning state of the public IP resource"
    type: "<xref href=\"com.microsoft.azure.management.network.ProvisioningState?alt=com.microsoft.azure.management.network.ProvisioningState&text=ProvisioningState\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.secondaryAzurePort()"
  fullName: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.secondaryAzurePort()"
  name: "secondaryAzurePort()"
  nameWithType: "ExpressRouteCrossConnectionPeering.secondaryAzurePort()"
  modifiers:
  - "abstract"
  syntax: "public abstract String secondaryAzurePort()"
  returns:
    description: "the secondary port"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.secondaryPeerAddressPrefix()"
  fullName: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.secondaryPeerAddressPrefix()"
  name: "secondaryPeerAddressPrefix()"
  nameWithType: "ExpressRouteCrossConnectionPeering.secondaryPeerAddressPrefix()"
  modifiers:
  - "abstract"
  syntax: "public abstract String secondaryPeerAddressPrefix()"
  returns:
    description: "the secondary address prefix"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.sharedKey()"
  fullName: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.sharedKey()"
  name: "sharedKey()"
  nameWithType: "ExpressRouteCrossConnectionPeering.sharedKey()"
  modifiers:
  - "abstract"
  syntax: "public abstract String sharedKey()"
  returns:
    description: "the shared key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.state()"
  fullName: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.state()"
  name: "state()"
  nameWithType: "ExpressRouteCrossConnectionPeering.state()"
  modifiers:
  - "abstract"
  syntax: "public abstract ExpressRoutePeeringState state()"
  returns:
    description: "the peering state"
    type: "<xref href=\"com.microsoft.azure.management.network.ExpressRoutePeeringState?alt=com.microsoft.azure.management.network.ExpressRoutePeeringState&text=ExpressRoutePeeringState\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.vlanId()"
  fullName: "com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.vlanId()"
  name: "vlanId()"
  nameWithType: "ExpressRouteCrossConnectionPeering.vlanId()"
  modifiers:
  - "abstract"
  syntax: "public abstract int vlanId()"
  returns:
    description: "the VLAN ID"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
desc: "Client-side representation of express route cross connection peering object, associated with express route cross connection."
implements:
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.arm.models.IndependentChild?alt=com.microsoft.azure.management.resources.fluentcore.arm.models.IndependentChild&text=IndependentChild\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.network.implementation.NetworkManager?alt=com.microsoft.azure.management.network.implementation.NetworkManager&text=NetworkManager\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.HasInner?alt=com.microsoft.azure.management.resources.fluentcore.model.HasInner&text=HasInner\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.network.implementation.ExpressRouteCrossConnectionPeeringInner?alt=com.microsoft.azure.management.network.implementation.ExpressRouteCrossConnectionPeeringInner&text=ExpressRouteCrossConnectionPeeringInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.Refreshable?alt=com.microsoft.azure.management.resources.fluentcore.model.Refreshable&text=Refreshable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering?alt=com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering&text=ExpressRouteCrossConnectionPeering\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.Updatable?alt=com.microsoft.azure.management.resources.fluentcore.model.Updatable&text=Updatable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.Update?alt=com.microsoft.azure.management.network.ExpressRouteCrossConnectionPeering.Update&text=Update\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.microsoft.azure.management.network"
artifact: com.microsoft.azure:azure-mgmt-network:1.41.4
