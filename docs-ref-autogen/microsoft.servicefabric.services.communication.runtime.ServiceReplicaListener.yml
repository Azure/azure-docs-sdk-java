### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.services.communication.runtime.ServiceReplicaListener.ServiceReplicaListener(Function<StatefulServiceContext, CommunicationListener> createCommunicationListener)
  name: ServiceReplicaListener(Function<StatefulServiceContext, CommunicationListener> createCommunicationListener)
  nameWithType: ServiceReplicaListener.ServiceReplicaListener(Function<StatefulServiceContext, CommunicationListener> createCommunicationListener)
  parameters:
  - name: createCommunicationListener
    type: Function&lt;<xref href="system.fabric.StatefulServiceContext?alt=system.fabric.StatefulServiceContext&text=StatefulServiceContext" data-throw-if-not-resolved="False"/>, <xref href="microsoft.servicefabric.services.communication.runtime.CommunicationListener?alt=microsoft.servicefabric.services.communication.runtime.CommunicationListener&text=CommunicationListener" data-throw-if-not-resolved="False"/>&gt;
  syntax: public ServiceReplicaListener(Function<StatefulServiceContext, CommunicationListener> createCommunicationListener)
  uid: microsoft.servicefabric.services.communication.runtime.ServiceReplicaListener.ServiceReplicaListener(Function<StatefulServiceContext, CommunicationListener>)
- fullName: microsoft.servicefabric.services.communication.runtime.ServiceReplicaListener.ServiceReplicaListener(Function<StatefulServiceContext, CommunicationListener> createCommunicationListener, String name)
  name: ServiceReplicaListener(Function<StatefulServiceContext, CommunicationListener> createCommunicationListener, String name)
  nameWithType: ServiceReplicaListener.ServiceReplicaListener(Function<StatefulServiceContext, CommunicationListener> createCommunicationListener, String name)
  parameters:
  - description: <p>Factory method for creating the communication listener </p>
    name: createCommunicationListener
    type: Function&lt;<xref href="system.fabric.StatefulServiceContext?alt=system.fabric.StatefulServiceContext&text=StatefulServiceContext" data-throw-if-not-resolved="False"/>, <xref href="microsoft.servicefabric.services.communication.runtime.CommunicationListener?alt=microsoft.servicefabric.services.communication.runtime.CommunicationListener&text=CommunicationListener" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>Name of the communication listener. This parameter is optional, if the service has only one communication listener </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates the ServiceReplicaListener</p>

    <p></p>
  syntax: public ServiceReplicaListener(Function<StatefulServiceContext, CommunicationListener> createCommunicationListener, String name)
  uid: microsoft.servicefabric.services.communication.runtime.ServiceReplicaListener.ServiceReplicaListener(Function<StatefulServiceContext, CommunicationListener>,String)
- fullName: microsoft.servicefabric.services.communication.runtime.ServiceReplicaListener.ServiceReplicaListener(Function<StatefulServiceContext, CommunicationListener> createCommunicationListener, String name, boolean listenOnSecondary)
  name: ServiceReplicaListener(Function<StatefulServiceContext, CommunicationListener> createCommunicationListener, String name, boolean listenOnSecondary)
  nameWithType: ServiceReplicaListener.ServiceReplicaListener(Function<StatefulServiceContext, CommunicationListener> createCommunicationListener, String name, boolean listenOnSecondary)
  parameters:
  - name: createCommunicationListener
    type: Function&lt;<xref href="system.fabric.StatefulServiceContext?alt=system.fabric.StatefulServiceContext&text=StatefulServiceContext" data-throw-if-not-resolved="False"/>, <xref href="microsoft.servicefabric.services.communication.runtime.CommunicationListener?alt=microsoft.servicefabric.services.communication.runtime.CommunicationListener&text=CommunicationListener" data-throw-if-not-resolved="False"/>&gt;
  - name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: listenOnSecondary
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public ServiceReplicaListener(Function<StatefulServiceContext, CommunicationListener> createCommunicationListener, String name, boolean listenOnSecondary)
  uid: microsoft.servicefabric.services.communication.runtime.ServiceReplicaListener.ServiceReplicaListener(Function<StatefulServiceContext, CommunicationListener>,String,boolean)
fields:
- field:
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  fullName: microsoft.servicefabric.services.communication.runtime.ServiceReplicaListener.defaultName
  name: defaultName
  nameWithType: ServiceReplicaListener.defaultName
  summary: <p>The default name used when the ServiceReplicaListener is not given a name. </p>
  syntax: public static final String defaultName= ""
  uid: microsoft.servicefabric.services.communication.runtime.ServiceReplicaListener.defaultName
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: microsoft.servicefabric.services.communication.runtime.ServiceReplicaListener.createCommunicationListener()
  name: createCommunicationListener()
  nameWithType: ServiceReplicaListener.createCommunicationListener()
  returns:
    description: <p>Factory method </p>
    type: Function&lt;<xref href="system.fabric.StatefulServiceContext?alt=system.fabric.StatefulServiceContext&text=StatefulServiceContext" data-throw-if-not-resolved="False"/>, <xref href="microsoft.servicefabric.services.communication.runtime.CommunicationListener?alt=microsoft.servicefabric.services.communication.runtime.CommunicationListener&text=CommunicationListener" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Factory method for creating the communication listener.</p>

    <p></p>
  syntax: public Function<StatefulServiceContext, CommunicationListener> createCommunicationListener()
  uid: microsoft.servicefabric.services.communication.runtime.ServiceReplicaListener.createCommunicationListener()
- fullName: microsoft.servicefabric.services.communication.runtime.ServiceReplicaListener.listenOnSecondary()
  name: listenOnSecondary()
  nameWithType: ServiceReplicaListener.listenOnSecondary()
  returns:
    description: <p>Boolean value that indicates if this communication listener should be opened when the replica is ActiveSecondary </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Indicates if this communication listener should be opened when the stateful service replica becomes an ActiveSecondary. When this member is not set(or set to false), the communication listener is opened only when the replica becomes Primary.</p>

    <p></p>
  syntax: public boolean listenOnSecondary()
  uid: microsoft.servicefabric.services.communication.runtime.ServiceReplicaListener.listenOnSecondary()
- fullName: microsoft.servicefabric.services.communication.runtime.ServiceReplicaListener.name()
  name: name()
  nameWithType: ServiceReplicaListener.name()
  returns:
    description: <p>Name </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Name of the communication listener.</p>

    <p></p>
  syntax: public String name()
  uid: microsoft.servicefabric.services.communication.runtime.ServiceReplicaListener.name()
nameWithType: ServiceReplicaListener
syntax: public class ServiceReplicaListener
type: class
uid: microsoft.servicefabric.services.communication.runtime.ServiceReplicaListener
fullName: microsoft.servicefabric.services.communication.runtime.ServiceReplicaListener
name: ServiceReplicaListener
package: microsoft.servicefabric.services.communication.runtime
summary: <p>Represents the communication listener and its properties for a Stateful Service Replica. Endpoints given out by the communication listener are associated with name of the communication listener. </p>
metadata: {}
