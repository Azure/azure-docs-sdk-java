### YamlMime:JavaType
uid: "com.azure.cosmos.CosmosAsyncClient"
fullName: "com.azure.cosmos.CosmosAsyncClient"
name: "CosmosAsyncClient"
nameWithType: "CosmosAsyncClient"
summary: "Provides a client-side logical representation of the Azure Cosmos DB service."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class CosmosAsyncClient implements Closeable"
methods:
- uid: "com.azure.cosmos.CosmosAsyncClient.close()"
  fullName: "com.azure.cosmos.CosmosAsyncClient.close()"
  name: "close()"
  nameWithType: "CosmosAsyncClient.close()"
  summary: "Close this <xref uid=\"com.azure.cosmos.CosmosAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosAsyncClient\"></xref> instance and cleans up the resources."
  syntax: "public void close()"
  desc: "Close this <xref uid=\"com.azure.cosmos.CosmosAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosAsyncClient\"></xref> instance and cleans up the resources."
- uid: "com.azure.cosmos.CosmosAsyncClient.createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.createDatabase(CosmosDatabaseProperties databaseProperties)"
  name: "createDatabase(CosmosDatabaseProperties databaseProperties)"
  nameWithType: "CosmosAsyncClient.createDatabase(CosmosDatabaseProperties databaseProperties)"
  summary: "Creates a database."
  parameters:
  - description: "<xref uid=\"com.azure.cosmos.models.CosmosDatabaseProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosDatabaseProperties\"></xref>."
    name: "databaseProperties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosDatabaseProperties?alt=com.azure.cosmos.models.CosmosDatabaseProperties&text=CosmosDatabaseProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosDatabaseResponse> createDatabase(CosmosDatabaseProperties databaseProperties)"
  desc: "Creates a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single resource response with the created database. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single cosmos database response with the created database or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosDatabaseResponse?alt=com.azure.cosmos.models.CosmosDatabaseResponse&text=CosmosDatabaseResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncClient.createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties,com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.createDatabase(CosmosDatabaseProperties databaseProperties, CosmosDatabaseRequestOptions options)"
  name: "createDatabase(CosmosDatabaseProperties databaseProperties, CosmosDatabaseRequestOptions options)"
  nameWithType: "CosmosAsyncClient.createDatabase(CosmosDatabaseProperties databaseProperties, CosmosDatabaseRequestOptions options)"
  summary: "Creates a database."
  parameters:
  - description: "<xref uid=\"com.azure.cosmos.models.CosmosDatabaseProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosDatabaseProperties\"></xref>."
    name: "databaseProperties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosDatabaseProperties?alt=com.azure.cosmos.models.CosmosDatabaseProperties&text=CosmosDatabaseProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.cosmos.models.CosmosDatabaseRequestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosDatabaseRequestOptions\"></xref>."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosDatabaseRequestOptions?alt=com.azure.cosmos.models.CosmosDatabaseRequestOptions&text=CosmosDatabaseRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosDatabaseResponse> createDatabase(CosmosDatabaseProperties databaseProperties, CosmosDatabaseRequestOptions options)"
  desc: "Creates a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single resource response with the created database. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single cosmos database response with the created database or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosDatabaseResponse?alt=com.azure.cosmos.models.CosmosDatabaseResponse&text=CosmosDatabaseResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncClient.createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties,com.azure.cosmos.models.ThroughputProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.createDatabase(CosmosDatabaseProperties databaseProperties, ThroughputProperties throughputProperties)"
  name: "createDatabase(CosmosDatabaseProperties databaseProperties, ThroughputProperties throughputProperties)"
  nameWithType: "CosmosAsyncClient.createDatabase(CosmosDatabaseProperties databaseProperties, ThroughputProperties throughputProperties)"
  summary: "Creates a database."
  parameters:
  - description: "<xref uid=\"com.azure.cosmos.models.CosmosDatabaseProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosDatabaseProperties\"></xref>."
    name: "databaseProperties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosDatabaseProperties?alt=com.azure.cosmos.models.CosmosDatabaseProperties&text=CosmosDatabaseProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "the throughput properties for the database."
    name: "throughputProperties"
    type: "<xref href=\"com.azure.cosmos.models.ThroughputProperties?alt=com.azure.cosmos.models.ThroughputProperties&text=ThroughputProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosDatabaseResponse> createDatabase(CosmosDatabaseProperties databaseProperties, ThroughputProperties throughputProperties)"
  desc: "Creates a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single resource response with the created database. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single cosmos database response with the created database or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosDatabaseResponse?alt=com.azure.cosmos.models.CosmosDatabaseResponse&text=CosmosDatabaseResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncClient.createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties,com.azure.cosmos.models.ThroughputProperties,com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.createDatabase(CosmosDatabaseProperties databaseProperties, ThroughputProperties throughputProperties, CosmosDatabaseRequestOptions options)"
  name: "createDatabase(CosmosDatabaseProperties databaseProperties, ThroughputProperties throughputProperties, CosmosDatabaseRequestOptions options)"
  nameWithType: "CosmosAsyncClient.createDatabase(CosmosDatabaseProperties databaseProperties, ThroughputProperties throughputProperties, CosmosDatabaseRequestOptions options)"
  summary: "Creates a database."
  parameters:
  - description: "<xref uid=\"com.azure.cosmos.models.CosmosDatabaseProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosDatabaseProperties\"></xref>."
    name: "databaseProperties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosDatabaseProperties?alt=com.azure.cosmos.models.CosmosDatabaseProperties&text=CosmosDatabaseProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "the throughput properties for the database."
    name: "throughputProperties"
    type: "<xref href=\"com.azure.cosmos.models.ThroughputProperties?alt=com.azure.cosmos.models.ThroughputProperties&text=ThroughputProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.cosmos.models.CosmosDatabaseRequestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosDatabaseRequestOptions\"></xref>."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosDatabaseRequestOptions?alt=com.azure.cosmos.models.CosmosDatabaseRequestOptions&text=CosmosDatabaseRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosDatabaseResponse> createDatabase(CosmosDatabaseProperties databaseProperties, ThroughputProperties throughputProperties, CosmosDatabaseRequestOptions options)"
  desc: "Creates a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single resource response with the created database. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single cosmos database response with the created database or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosDatabaseResponse?alt=com.azure.cosmos.models.CosmosDatabaseResponse&text=CosmosDatabaseResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncClient.createDatabase(java.lang.String)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.createDatabase(String id)"
  name: "createDatabase(String id)"
  nameWithType: "CosmosAsyncClient.createDatabase(String id)"
  summary: "Creates a database."
  parameters:
  - description: "id of the database."
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosDatabaseResponse> createDatabase(String id)"
  desc: "Creates a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single resource response with the created database. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single cosmos database response with the created database or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosDatabaseResponse?alt=com.azure.cosmos.models.CosmosDatabaseResponse&text=CosmosDatabaseResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncClient.createDatabase(java.lang.String,com.azure.cosmos.models.ThroughputProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.createDatabase(String id, ThroughputProperties throughputProperties)"
  name: "createDatabase(String id, ThroughputProperties throughputProperties)"
  nameWithType: "CosmosAsyncClient.createDatabase(String id, ThroughputProperties throughputProperties)"
  summary: "Creates a database."
  parameters:
  - description: "the id."
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the throughputProperties."
    name: "throughputProperties"
    type: "<xref href=\"com.azure.cosmos.models.ThroughputProperties?alt=com.azure.cosmos.models.ThroughputProperties&text=ThroughputProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosDatabaseResponse> createDatabase(String id, ThroughputProperties throughputProperties)"
  desc: "Creates a database."
  returns:
    description: "the mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosDatabaseResponse?alt=com.azure.cosmos.models.CosmosDatabaseResponse&text=CosmosDatabaseResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncClient.createDatabaseIfNotExists(com.azure.cosmos.models.CosmosDatabaseProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.createDatabaseIfNotExists(CosmosDatabaseProperties databaseProperties)"
  name: "createDatabaseIfNotExists(CosmosDatabaseProperties databaseProperties)"
  nameWithType: "CosmosAsyncClient.createDatabaseIfNotExists(CosmosDatabaseProperties databaseProperties)"
  summary: "CREATE a Database if it does not already exist on the service."
  parameters:
  - description: "CosmosDatabaseProperties."
    name: "databaseProperties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosDatabaseProperties?alt=com.azure.cosmos.models.CosmosDatabaseProperties&text=CosmosDatabaseProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosDatabaseResponse> createDatabaseIfNotExists(CosmosDatabaseProperties databaseProperties)"
  desc: "CREATE a Database if it does not already exist on the service.\n\nThe <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single cosmos database response with the created or existing database."
  returns:
    description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the cosmos database response with the created or existing database or\n an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosDatabaseResponse?alt=com.azure.cosmos.models.CosmosDatabaseResponse&text=CosmosDatabaseResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncClient.createDatabaseIfNotExists(java.lang.String)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.createDatabaseIfNotExists(String id)"
  name: "createDatabaseIfNotExists(String id)"
  nameWithType: "CosmosAsyncClient.createDatabaseIfNotExists(String id)"
  summary: "Create a Database if it does not already exist on the service."
  parameters:
  - description: "the id of the database."
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosDatabaseResponse> createDatabaseIfNotExists(String id)"
  desc: "Create a Database if it does not already exist on the service.\n\nThe <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single cosmos database response with the created or existing database."
  returns:
    description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the cosmos database response with the created or existing database or\n an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosDatabaseResponse?alt=com.azure.cosmos.models.CosmosDatabaseResponse&text=CosmosDatabaseResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncClient.createDatabaseIfNotExists(java.lang.String,com.azure.cosmos.models.ThroughputProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.createDatabaseIfNotExists(String id, ThroughputProperties throughputProperties)"
  name: "createDatabaseIfNotExists(String id, ThroughputProperties throughputProperties)"
  nameWithType: "CosmosAsyncClient.createDatabaseIfNotExists(String id, ThroughputProperties throughputProperties)"
  summary: "Create a Database if it does not already exist on the service."
  parameters:
  - description: "the id."
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the throughputProperties."
    name: "throughputProperties"
    type: "<xref href=\"com.azure.cosmos.models.ThroughputProperties?alt=com.azure.cosmos.models.ThroughputProperties&text=ThroughputProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosDatabaseResponse> createDatabaseIfNotExists(String id, ThroughputProperties throughputProperties)"
  desc: "Create a Database if it does not already exist on the service.\n\nThe throughputProperties will only be used if the specified database does not exist and therefor a new database will be created with throughputProperties.\n\nThe <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single cosmos database response with the created or existing database."
  returns:
    description: "the mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosDatabaseResponse?alt=com.azure.cosmos.models.CosmosDatabaseResponse&text=CosmosDatabaseResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncClient.createGlobalThroughputControlConfigBuilder(java.lang.String,java.lang.String)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.createGlobalThroughputControlConfigBuilder(String databaseId, String containerId)"
  name: "createGlobalThroughputControlConfigBuilder(String databaseId, String containerId)"
  nameWithType: "CosmosAsyncClient.createGlobalThroughputControlConfigBuilder(String databaseId, String containerId)"
  summary: "Create global throughput control config builder which will be used to build <xref uid=\"com.azure.cosmos.GlobalThroughputControlConfig\" data-throw-if-not-resolved=\"false\" data-raw-source=\"GlobalThroughputControlConfig\"></xref>."
  parameters:
  - description: "The database id of the control container."
    name: "databaseId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The container id of the control container."
    name: "containerId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public GlobalThroughputControlConfigBuilder createGlobalThroughputControlConfigBuilder(String databaseId, String containerId)"
  desc: "Create global throughput control config builder which will be used to build <xref uid=\"com.azure.cosmos.GlobalThroughputControlConfig\" data-throw-if-not-resolved=\"false\" data-raw-source=\"GlobalThroughputControlConfig\"></xref>."
  returns:
    description: "A <xref uid=\"com.azure.cosmos.GlobalThroughputControlConfigBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"GlobalThroughputControlConfigBuilder\"></xref>."
    type: "<xref href=\"com.azure.cosmos.GlobalThroughputControlConfigBuilder?alt=com.azure.cosmos.GlobalThroughputControlConfigBuilder&text=GlobalThroughputControlConfigBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosAsyncClient.getDatabase(java.lang.String)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.getDatabase(String id)"
  name: "getDatabase(String id)"
  nameWithType: "CosmosAsyncClient.getDatabase(String id)"
  summary: "Gets a database object without making a service call."
  parameters:
  - description: "name of the database."
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosAsyncDatabase getDatabase(String id)"
  desc: "Gets a database object without making a service call."
  returns:
    description: "<xref uid=\"com.azure.cosmos.CosmosAsyncDatabase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosAsyncDatabase\"></xref>."
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncDatabase?alt=com.azure.cosmos.CosmosAsyncDatabase&text=CosmosAsyncDatabase\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosAsyncClient.queryDatabases(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.queryDatabases(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  name: "queryDatabases(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  nameWithType: "CosmosAsyncClient.queryDatabases(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  summary: "Query for databases."
  parameters:
  - description: "the SQL query specification."
    name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  - description: "the feed options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosDatabaseProperties> queryDatabases(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  desc: "Query for databases.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the read databases. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of read databases or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosDatabaseProperties?alt=com.azure.cosmos.models.CosmosDatabaseProperties&text=CosmosDatabaseProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncClient.queryDatabases(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.queryDatabases(String query, CosmosQueryRequestOptions options)"
  name: "queryDatabases(String query, CosmosQueryRequestOptions options)"
  nameWithType: "CosmosAsyncClient.queryDatabases(String query, CosmosQueryRequestOptions options)"
  summary: "Query for databases."
  parameters:
  - description: "the query."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the feed options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosDatabaseProperties> queryDatabases(String query, CosmosQueryRequestOptions options)"
  desc: "Query for databases.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the read databases. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of read databases or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosDatabaseProperties?alt=com.azure.cosmos.models.CosmosDatabaseProperties&text=CosmosDatabaseProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncClient.readAllDatabases()"
  fullName: "com.azure.cosmos.CosmosAsyncClient.readAllDatabases()"
  name: "readAllDatabases()"
  nameWithType: "CosmosAsyncClient.readAllDatabases()"
  summary: "Reads all databases."
  syntax: "public CosmosPagedFlux<CosmosDatabaseProperties> readAllDatabases()"
  desc: "Reads all databases.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the read databases. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of read databases or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosDatabaseProperties?alt=com.azure.cosmos.models.CosmosDatabaseProperties&text=CosmosDatabaseProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Provides a client-side logical representation of the Azure Cosmos DB service. This asynchronous client is used to configure and execute requests against the service."
implements:
- "<xref href=\"java.io.Closeable?alt=java.io.Closeable&text=Closeable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.cosmos"
artifact: com.azure:azure-cosmos:4.35.0
