items:
- uid: microsoft.servicefabric.actors._actor_base
  id: _actor_base
  parent: microsoft.servicefabric.actors
  children:
  - microsoft.servicefabric.actors._actor_base.getActorService()
  - microsoft.servicefabric.actors._actor_base.getApplicationName()
  - microsoft.servicefabric.actors._actor_base.getEvent(Class<T>)
  - microsoft.servicefabric.actors._actor_base.getId()
  - microsoft.servicefabric.actors._actor_base.getReminder(String)
  - microsoft.servicefabric.actors._actor_base.getServiceUri()
  - microsoft.servicefabric.actors._actor_base.onActivateAsync()
  - microsoft.servicefabric.actors._actor_base.onDeactivateAsync()
  - microsoft.servicefabric.actors._actor_base.onPostActorMethodAsync(ActorMethodContext)
  - microsoft.servicefabric.actors._actor_base.onPreActorMethodAsync(ActorMethodContext)
  - microsoft.servicefabric.actors._actor_base.registerReminderAsync(String,byte [],Duration,Duration)
  - microsoft.servicefabric.actors._actor_base.registerTimer(Function<Object, CompletableFuture<?>>,Object,Duration,Duration)
  - microsoft.servicefabric.actors._actor_base.registerTimer(Function<Object, CompletableFuture<?>>,String,Object,Duration,Duration)
  - microsoft.servicefabric.actors._actor_base.unregisterReminderAsync(ActorReminder)
  - microsoft.servicefabric.actors._actor_base.unregisterTimer(ActorTimer)
  href: microsoft.servicefabric.actors._actor_base.yml
  langs:
  - java
  name: ActorBase
  nameWithType: ActorBase
  fullName: microsoft.servicefabric.actors.ActorBase
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorBase.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorBase.java
    startLine: 24
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Represents base class for actors. <xref href="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false"></xref></p>

    <p>

      <bold>Remarks:</bold>This is a base type for actor, it provides the functionality that is common across actors implemented by actor deriving from <xref href="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false"></xref> The state is preserved across actor garbage collections and fail-overs. The storage and retrieval of the state is provided by the actor state provider <xref href="microsoft.servicefabric.actors._actor_state_provider" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public class ActorBase
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - microsoft.servicefabric.actors._actor_base.ActorBase(FabricActorService,ActorId)
  - microsoft.servicefabric.actors._actor_base.getConcurrencyLockImpl()
  - microsoft.servicefabric.actors._actor_base.getDiagnosticsContext()
  - microsoft.servicefabric.actors._actor_base.getGcHandler()
  - microsoft.servicefabric.actors._actor_base.getManager()
  - microsoft.servicefabric.actors._actor_base.isDirty()
  - microsoft.servicefabric.actors._actor_base.isDummy()
  - microsoft.servicefabric.actors._actor_base.isInitialized()
  - microsoft.servicefabric.actors._actor_base.isMarkedForDeletion()
  - microsoft.servicefabric.actors._actor_base.onActivateInternalAsync()
  - microsoft.servicefabric.actors._actor_base.onDeactivateInternalAsync()
  - microsoft.servicefabric.actors._actor_base.onInvokeFailedInternal()
  - microsoft.servicefabric.actors._actor_base.onPostActiviateAsync()
  - microsoft.servicefabric.actors._actor_base.onPostActorMethodAsyncInternal(ActorMethodContext)
  - microsoft.servicefabric.actors._actor_base.onPreActorMethodAsyncInternal(ActorMethodContext)
  - microsoft.servicefabric.actors._actor_base.onResetStateAsyncInternal()
  - microsoft.servicefabric.actors._actor_base.onSaveStateAsyncInternal()
  - microsoft.servicefabric.actors._actor_base.resetStateAsyncInternal()
  - microsoft.servicefabric.actors._actor_base.saveStateAsyncInternal()
  - microsoft.servicefabric.actors._actor_base.setDirty(boolean)
  - microsoft.servicefabric.actors._actor_base.setDummy(boolean)
  - microsoft.servicefabric.actors._actor_base.setInitialized(boolean)
  - microsoft.servicefabric.actors._actor_base.setMarkedForDeletion(boolean)
- uid: microsoft.servicefabric.actors._actor_base.getActorService()
  id: getActorService()
  parent: microsoft.servicefabric.actors._actor_base
  href: microsoft.servicefabric.actors._actor_base.yml
  langs:
  - java
  name: getActorService()
  nameWithType: ActorBase.getActorService()
  fullName: FabricActorService microsoft.servicefabric.actors.ActorBase.getActorService()
  overload: microsoft.servicefabric.actors._actor_base.getActorService*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorBase.java
    startLine: 96
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Gets the stateful service replica that is hosting the actor.</p>

    <p></p>
  syntax:
    content: public FabricActorService getActorService()
    return:
      type: microsoft.servicefabric.actors._fabric_actor_service
      description: >-
        <p>

          <xref href="microsoft.servicefabric.actors._fabric_actor_service" data-throw-if-not-resolved="false"></xref> that represents the stateful service replica hosting the actor. actor. </p>
- uid: microsoft.servicefabric.actors._actor_base.getApplicationName()
  id: getApplicationName()
  parent: microsoft.servicefabric.actors._actor_base
  href: microsoft.servicefabric.actors._actor_base.yml
  langs:
  - java
  name: getApplicationName()
  nameWithType: ActorBase.getApplicationName()
  fullName: String microsoft.servicefabric.actors.ActorBase.getApplicationName()
  overload: microsoft.servicefabric.actors._actor_base.getApplicationName*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorBase.java
    startLine: 68
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Gets the name of the application that contains the actor service that is hosting this actor.</p>

    <p></p>
  syntax:
    content: public String getApplicationName()
    return:
      type: "26831127"
      description: <p>Name of application that contains the actor service that is hosting this actor. </p>
- uid: microsoft.servicefabric.actors._actor_base.getEvent(Class<T>)
  id: getEvent(Class<T>)
  parent: microsoft.servicefabric.actors._actor_base
  href: microsoft.servicefabric.actors._actor_base.yml
  langs:
  - java
  name: getEvent(Class<T> eventClass)
  nameWithType: ActorBase.getEvent(Class<T> eventClass)
  fullName: protected<T> T microsoft.servicefabric.actors.ActorBase.getEvent(Class<T> eventClass)
  overload: microsoft.servicefabric.actors._actor_base.getEvent*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorBase.java
    startLine: 259
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Gets the event for the specified event interface.</p>

    <p></p>
  syntax:
    content: protected <T> T getEvent(Class<T> eventClass)
    parameters:
    - id: eventClass
      type: ffb09d2d
      description: <p>Event class. </p>
    return:
      type: "34698212"
      description: <p>Returns Event that represents the specified interface. </p>
- uid: microsoft.servicefabric.actors._actor_base.getId()
  id: getId()
  parent: microsoft.servicefabric.actors._actor_base
  href: microsoft.servicefabric.actors._actor_base.yml
  langs:
  - java
  name: getId()
  nameWithType: ActorBase.getId()
  fullName: ActorId microsoft.servicefabric.actors.ActorBase.getId()
  overload: microsoft.servicefabric.actors._actor_base.getId*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorBase.java
    startLine: 77
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Gets the identity of this actor with the actor service.</p>

    <p></p>
  syntax:
    content: public ActorId getId()
    return:
      type: microsoft.servicefabric.actors._actor_id
      description: >-
        <p>

          <xref href="microsoft.servicefabric.actors._actor_id" data-throw-if-not-resolved="false"></xref> for the actor. </p>
- uid: microsoft.servicefabric.actors._actor_base.getReminder(String)
  id: getReminder(String)
  parent: microsoft.servicefabric.actors._actor_base
  href: microsoft.servicefabric.actors._actor_base.yml
  langs:
  - java
  name: getReminder(String reminderName)
  nameWithType: ActorBase.getReminder(String reminderName)
  fullName: ActorReminder microsoft.servicefabric.actors.ActorBase.getReminder(String reminderName)
  overload: microsoft.servicefabric.actors._actor_base.getReminder*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorBase.java
    startLine: 270
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Gets the actor reminder with specified reminder name.</p>

    <p></p>
  syntax:
    content: protected ActorReminder getReminder(String reminderName)
    parameters:
    - id: reminderName
      type: "26831127"
      description: <p>Name of the reminder to get. </p>
    return:
      type: microsoft.servicefabric.actors._actor_reminder
      description: <p>An <xref href="microsoft.servicefabric.actors._actor_reminder" data-throw-if-not-resolved="false"></xref> that represents an actor reminder. </p>
- uid: microsoft.servicefabric.actors._actor_base.getServiceUri()
  id: getServiceUri()
  parent: microsoft.servicefabric.actors._actor_base
  href: microsoft.servicefabric.actors._actor_base.yml
  langs:
  - java
  name: getServiceUri()
  nameWithType: ActorBase.getServiceUri()
  fullName: URI microsoft.servicefabric.actors.ActorBase.getServiceUri()
  overload: microsoft.servicefabric.actors._actor_base.getServiceUri*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorBase.java
    startLine: 86
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Gets the Uri of the actor service that is hosting this actor.</p>

    <p></p>
  syntax:
    content: public URI getServiceUri()
    return:
      type: "62304784"
      description: >-
        <p>

          <ref refid="" kindref="compound">java.net.URI</ref> of the actor service that is hosting this actor. </p>
- uid: microsoft.servicefabric.actors._actor_base.onActivateAsync()
  id: onActivateAsync()
  parent: microsoft.servicefabric.actors._actor_base
  href: microsoft.servicefabric.actors._actor_base.yml
  langs:
  - java
  name: onActivateAsync()
  nameWithType: ActorBase.onActivateAsync()
  fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorBase.onActivateAsync()
  overload: microsoft.servicefabric.actors._actor_base.onActivateAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorBase.java
    startLine: 107
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Override this method to initialize the members, initialize state or register timers. This method is called right after the actor is activated and before any method call or reminders are dispatched on it.</p>

    <p></p>
  syntax:
    content: protected CompletableFuture<?> onActivateAsync()
    return:
      type: 16409f84
      description: <p>A CompletableFuture that represents outstanding OnActivateAsync operation. </p>
- uid: microsoft.servicefabric.actors._actor_base.onDeactivateAsync()
  id: onDeactivateAsync()
  parent: microsoft.servicefabric.actors._actor_base
  href: microsoft.servicefabric.actors._actor_base.yml
  langs:
  - java
  name: onDeactivateAsync()
  nameWithType: ActorBase.onDeactivateAsync()
  fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorBase.onDeactivateAsync()
  overload: microsoft.servicefabric.actors._actor_base.onDeactivateAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorBase.java
    startLine: 117
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Override this method to release any resources including unregistering the timers. This method is called right before the actor is deactivated.</p>

    <p></p>
  syntax:
    content: protected CompletableFuture<?> onDeactivateAsync()
    return:
      type: 16409f84
      description: <p>A CompletableFuture that represents outstanding OnDeactivateAsync operation. </p>
- uid: microsoft.servicefabric.actors._actor_base.onPostActorMethodAsync(ActorMethodContext)
  id: onPostActorMethodAsync(ActorMethodContext)
  parent: microsoft.servicefabric.actors._actor_base
  href: microsoft.servicefabric.actors._actor_base.yml
  langs:
  - java
  name: onPostActorMethodAsync(ActorMethodContext actorMethodContext)
  nameWithType: ActorBase.onPostActorMethodAsync(ActorMethodContext actorMethodContext)
  fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorBase.onPostActorMethodAsync(ActorMethodContext actorMethodContext)
  overload: microsoft.servicefabric.actors._actor_base.onPostActorMethodAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorBase.java
    startLine: 159
  package: microsoft.servicefabric.actors
  summary: >-
    <p>This method is invoked by actor runtime an actor method has finished execution. Override this method for performing any actions after an actor method has finished execution.</p>

    <p></p>
  syntax: &o2
    content: protected CompletableFuture<?> onPostActorMethodAsync(ActorMethodContext actorMethodContext)
    parameters:
    - id: actorMethodContext
      type: microsoft.servicefabric.actors._actor_method_context
      description: <p>An <xref href="microsoft.servicefabric.actors._actor_method_context" data-throw-if-not-resolved="false"></xref> describing the method that was invoked by actor runtime prior to this method. </p>
    return:
      type: 16409f84
      description: >-
        <p>A <ref refid="" kindref="compound">CompletableFuture</ref> representing post-actor-method operation. <verbatim>    &lt;b&gt;Remarks:&lt;/b&gt; This method is invoked by actor runtime prior to:

            &lt;ul&gt;

            &lt;li&gt;Invoking an actor interface method when a client request comes.&lt;/li&gt;

            &lt;li&gt;Invoking a method on {@link Remindable} interface when a reminder fires.&lt;/li&gt;

            &lt;li&gt;Invoking a timer callback when timer fires.&lt;/li&gt;

            &lt;/ul&gt;</verbatim></p>
- uid: microsoft.servicefabric.actors._actor_base.onPreActorMethodAsync(ActorMethodContext)
  id: onPreActorMethodAsync(ActorMethodContext)
  parent: microsoft.servicefabric.actors._actor_base
  href: microsoft.servicefabric.actors._actor_base.yml
  langs:
  - java
  name: onPreActorMethodAsync(ActorMethodContext actorMethodContext)
  nameWithType: ActorBase.onPreActorMethodAsync(ActorMethodContext actorMethodContext)
  fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorBase.onPreActorMethodAsync(ActorMethodContext actorMethodContext)
  overload: microsoft.servicefabric.actors._actor_base.onPreActorMethodAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorBase.java
    startLine: 138
  package: microsoft.servicefabric.actors
  summary: >-
    <p>This method is invoked by actor runtime just before invoking an actor method. Override this method for performing any actions prior to an actor method is invoked.</p>

    <p></p>
  syntax: &o1
    content: protected CompletableFuture<?> onPreActorMethodAsync(ActorMethodContext actorMethodContext)
    parameters:
    - id: actorMethodContext
      type: microsoft.servicefabric.actors._actor_method_context
      description: <p>An <xref href="microsoft.servicefabric.actors._actor_method_context" data-throw-if-not-resolved="false"></xref> describing the method that will be invoked by actor runtime after this method finishes. </p>
    return:
      type: 16409f84
      description: >-
        <p>A <ref refid="" kindref="compound">CompletableFuture</ref> representing pre-actor-method operation. <verbatim>    &lt;b&gt;Remarks:&lt;/b&gt;This method is invoked by actor runtime prior to:

            &lt;ul&gt;

            &lt;li&gt;Invoking an actor interface method when a client request comes.&lt;/li&gt;

            &lt;li&gt;Invoking a method on {@link Remindable} interface when a reminder fires.&lt;/li&gt;

            &lt;li&gt;Invoking a timer callback when timer fires.&lt;/li&gt;

            &lt;/ul&gt;</verbatim></p>
- uid: microsoft.servicefabric.actors._actor_base.registerReminderAsync(String,byte [],Duration,Duration)
  id: registerReminderAsync(String,byte [],Duration,Duration)
  parent: microsoft.servicefabric.actors._actor_base
  href: microsoft.servicefabric.actors._actor_base.yml
  langs:
  - java
  name: registerReminderAsync(String reminderName, byte[] state, Duration dueTime, Duration period)
  nameWithType: ActorBase.registerReminderAsync(String reminderName, byte[] state, Duration dueTime, Duration period)
  fullName: CompletableFuture<ActorReminder> microsoft.servicefabric.actors.ActorBase.registerReminderAsync(String reminderName, byte[] state, Duration dueTime, Duration period)
  overload: microsoft.servicefabric.actors._actor_base.registerReminderAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorBase.java
    startLine: 293
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Registers the specified reminder with actor.</p>

    <p></p>
  syntax:
    content: protected CompletableFuture<ActorReminder> registerReminderAsync(String reminderName, byte[] state, Duration dueTime, Duration period)
    parameters:
    - id: reminderName
      type: "26831127"
      description: <p>Name of the reminder to register </p>
    - id: state
      type: ccd9418d
      description: <p>State associated with reminder. </p>
    - id: dueTime
      type: e02a2de0
      description: <p>A <ref refid="" kindref="compound">java.time.Duration</ref> representing the amount of time to delay before firing the reminder. Specify negative one (-1) milliseconds to prevent reminder from firing. Specify zero (0) to fire the reminder immediately. </p>
    - id: period
      type: e02a2de0
      description: <p>The time interval between firing of reminders. Specify negative one (-1) milliseconds to disable periodic firing. </p>
    return:
      type: 9cdf14d0microsoft.servicefabric.actors._actor_remindera08ddfce
      description: <p>A task that represents the asynchronous registration operation. The value of TResult parameter is an <xref href="microsoft.servicefabric.actors._actor_reminder" data-throw-if-not-resolved="false"></xref> that represents the actor reminder that was registered. </p>
- uid: microsoft.servicefabric.actors._actor_base.registerTimer(Function<Object, CompletableFuture<?>>,Object,Duration,Duration)
  id: registerTimer(Function<Object, CompletableFuture<?>>,Object,Duration,Duration)
  parent: microsoft.servicefabric.actors._actor_base
  href: microsoft.servicefabric.actors._actor_base.yml
  langs:
  - java
  name: registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, Object state, Duration dueTime, Duration period)
  nameWithType: ActorBase.registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, Object state, Duration dueTime, Duration period)
  fullName: ActorTimer microsoft.servicefabric.actors.ActorBase.registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, Object state, Duration dueTime, Duration period)
  overload: microsoft.servicefabric.actors._actor_base.registerTimer*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorBase.java
    startLine: 176
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Registers a Timer for the actor.</p>

    <p></p>
  syntax:
    content: protected ActorTimer registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, Object state, Duration dueTime, Duration period)
    parameters:
    - id: asyncCallback
      type: 05842176
      description: <p>Callback to invoke when timer fires. </p>
    - id: state
      type: "79317049"
      description: <p>State to pass into timer callback. </p>
    - id: dueTime
      type: e02a2de0
      description: <p>TimeSpan when actor timer is first due. </p>
    - id: period
      type: e02a2de0
      description: <p>TimeSpan for subsequent actor timer invocation. </p>
    return:
      type: microsoft.servicefabric.actors._actor_timer
      description: <p>Returns <xref href="microsoft.servicefabric.actors._actor_timer" data-throw-if-not-resolved="false"></xref> object. </p>
- uid: microsoft.servicefabric.actors._actor_base.registerTimer(Function<Object, CompletableFuture<?>>,String,Object,Duration,Duration)
  id: registerTimer(Function<Object, CompletableFuture<?>>,String,Object,Duration,Duration)
  parent: microsoft.servicefabric.actors._actor_base
  href: microsoft.servicefabric.actors._actor_base.yml
  langs:
  - java
  name: registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, String asyncCallbackFunctionName, Object state, Duration dueTime, Duration period)
  nameWithType: ActorBase.registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, String asyncCallbackFunctionName, Object state, Duration dueTime, Duration period)
  fullName: ActorTimer microsoft.servicefabric.actors.ActorBase.registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, String asyncCallbackFunctionName, Object state, Duration dueTime, Duration period)
  overload: microsoft.servicefabric.actors._actor_base.registerTimer*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorBase.java
    startLine: 213
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Registers a Timer for the actor.</p>

    <p></p>
  syntax:
    content: protected ActorTimer registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, String asyncCallbackFunctionName, Object state, Duration dueTime, Duration period)
    parameters:
    - id: asyncCallback
      type: 05842176
      description: <p>Callback to invoke when timer fires. </p>
    - id: asyncCallbackFunctionName
      type: "26831127"
      description: <p>name of AsyncCallBack function. It can be used in <xref href="microsoft.servicefabric.actors._actor_base.onPreActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false"></xref> and <xref href="microsoft.servicefabric.actors._actor_base.onPostActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false"></xref> to initiate any user task on pre- and post- calling of this function. The property <xref href="microsoft.servicefabric.actors._actor_method_context.getMethodName()" data-throw-if-not-resolved="false"></xref> will give the method name. </p>
    - id: state
      type: "79317049"
      description: <p>State to pass into timer callback. </p>
    - id: dueTime
      type: e02a2de0
      description: <p>TimeSpan when actor timer is first due. </p>
    - id: period
      type: e02a2de0
      description: <p>TimeSpan for subsequent actor timer invocation. </p>
    return:
      type: microsoft.servicefabric.actors._actor_timer
      description: <p>Returns <xref href="microsoft.servicefabric.actors._actor_timer" data-throw-if-not-resolved="false"></xref> object. </p>
- uid: microsoft.servicefabric.actors._actor_base.unregisterReminderAsync(ActorReminder)
  id: unregisterReminderAsync(ActorReminder)
  parent: microsoft.servicefabric.actors._actor_base
  href: microsoft.servicefabric.actors._actor_base.yml
  langs:
  - java
  name: unregisterReminderAsync(ActorReminder reminder)
  nameWithType: ActorBase.unregisterReminderAsync(ActorReminder reminder)
  fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorBase.unregisterReminderAsync(ActorReminder reminder)
  overload: microsoft.servicefabric.actors._actor_base.unregisterReminderAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorBase.java
    startLine: 310
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Unregisters the specified reminder with actor.</p>

    <p></p>
  syntax:
    content: protected CompletableFuture<?> unregisterReminderAsync(ActorReminder reminder)
    parameters:
    - id: reminder
      type: microsoft.servicefabric.actors._actor_reminder
      description: <p>The actor reminder to unregister. </p>
    return:
      type: 16409f84
      description: <p>A task that represents the asynchronous unregister operation. </p>
- uid: microsoft.servicefabric.actors._actor_base.unregisterTimer(ActorTimer)
  id: unregisterTimer(ActorTimer)
  parent: microsoft.servicefabric.actors._actor_base
  href: microsoft.servicefabric.actors._actor_base.yml
  langs:
  - java
  name: unregisterTimer(ActorTimer timer)
  nameWithType: ActorBase.unregisterTimer(ActorTimer timer)
  fullName: void microsoft.servicefabric.actors.ActorBase.unregisterTimer(ActorTimer timer)
  overload: microsoft.servicefabric.actors._actor_base.unregisterTimer*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorBase.java
    startLine: 238
  package: microsoft.servicefabric.actors
  summary: >-
    <p>Unregisters a Timer previously set on this actor.</p>

    <p></p>
  syntax:
    content: protected void unregisterTimer(ActorTimer timer)
    parameters:
    - id: timer
      type: microsoft.servicefabric.actors._actor_timer
      description: >-
        <p>

          <xref href="microsoft.servicefabric.actors._actor_timer" data-throw-if-not-resolved="false"></xref> representing timer that needs to be unregistered. </p>
references:
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: microsoft.servicefabric.actors._actor_base.getApplicationName*
  name: getApplicationName
  nameWithType: ActorBase.getApplicationName
  fullName: String microsoft.servicefabric.actors.ActorBase.getApplicationName
  package: microsoft.servicefabric.actors
- uid: microsoft.servicefabric.actors._actor_base.getId*
  name: getId
  nameWithType: ActorBase.getId
  fullName: ActorId microsoft.servicefabric.actors.ActorBase.getId
  package: microsoft.servicefabric.actors
- uid: "62304784"
  spec.java:
  - name: URI
    fullName: URI
- uid: microsoft.servicefabric.actors._actor_base.getServiceUri*
  name: getServiceUri
  nameWithType: ActorBase.getServiceUri
  fullName: URI microsoft.servicefabric.actors.ActorBase.getServiceUri
  package: microsoft.servicefabric.actors
- uid: microsoft.servicefabric.actors._actor_base.getActorService*
  name: getActorService
  nameWithType: ActorBase.getActorService
  fullName: FabricActorService microsoft.servicefabric.actors.ActorBase.getActorService
  package: microsoft.servicefabric.actors
- uid: 16409f84
  spec.java:
  - name: CompletableFuture<?>
    fullName: CompletableFuture<?>
- uid: microsoft.servicefabric.actors._actor_base.onActivateAsync*
  name: onActivateAsync
  nameWithType: ActorBase.onActivateAsync
  fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorBase.onActivateAsync
  package: microsoft.servicefabric.actors
- uid: microsoft.servicefabric.actors._actor_base.onDeactivateAsync*
  name: onDeactivateAsync
  nameWithType: ActorBase.onDeactivateAsync
  fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorBase.onDeactivateAsync
  package: microsoft.servicefabric.actors
- uid: microsoft.servicefabric.actors._actor_base.onPreActorMethodAsync*
  name: onPreActorMethodAsync
  nameWithType: ActorBase.onPreActorMethodAsync
  fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorBase.onPreActorMethodAsync
  package: microsoft.servicefabric.actors
- uid: microsoft.servicefabric.actors._actor_base.onPostActorMethodAsync*
  name: onPostActorMethodAsync
  nameWithType: ActorBase.onPostActorMethodAsync
  fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorBase.onPostActorMethodAsync
  package: microsoft.servicefabric.actors
- uid: 05842176
  spec.java:
  - name: Function<Object, CompletableFuture<?>>
    fullName: Function<Object, CompletableFuture<?>>
- uid: "79317049"
  spec.java:
  - name: Object
    fullName: Object
- uid: e02a2de0
  spec.java:
  - name: Duration
    fullName: Duration
- uid: microsoft.servicefabric.actors._actor_base.registerTimer*
  name: registerTimer
  nameWithType: ActorBase.registerTimer
  fullName: ActorTimer microsoft.servicefabric.actors.ActorBase.registerTimer
  package: microsoft.servicefabric.actors
- uid: microsoft.servicefabric.actors._actor_base.unregisterTimer*
  name: unregisterTimer
  nameWithType: ActorBase.unregisterTimer
  fullName: void microsoft.servicefabric.actors.ActorBase.unregisterTimer
  package: microsoft.servicefabric.actors
- uid: microsoft.servicefabric.actors._actor_base.getReminder*
  name: getReminder
  nameWithType: ActorBase.getReminder
  fullName: ActorReminder microsoft.servicefabric.actors.ActorBase.getReminder
  package: microsoft.servicefabric.actors
- uid: ccd9418d
  spec.java:
  - name: byte []
    fullName: byte []
- uid: 9cdf14d0microsoft.servicefabric.actors._actor_remindera08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: microsoft.servicefabric.actors._actor_reminder
    name: ActorReminder
    fullName: microsoft.servicefabric.actors.ActorReminder
    href: microsoft.servicefabric.actors._actor_reminder.yml
  - name: '>'
    fullName: '>'
- uid: microsoft.servicefabric.actors._actor_base.registerReminderAsync*
  name: registerReminderAsync
  nameWithType: ActorBase.registerReminderAsync
  fullName: CompletableFuture<ActorReminder> microsoft.servicefabric.actors.ActorBase.registerReminderAsync
  package: microsoft.servicefabric.actors
- uid: microsoft.servicefabric.actors._actor_base.unregisterReminderAsync*
  name: unregisterReminderAsync
  nameWithType: ActorBase.unregisterReminderAsync
  fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorBase.unregisterReminderAsync
  package: microsoft.servicefabric.actors
- uid: ffb09d2d
  spec.java:
  - name: Class<T>
    fullName: Class<T>
- uid: "34698212"
  spec.java:
  - name: <T> T
    fullName: <T> T
- uid: microsoft.servicefabric.actors._actor_base.getEvent*
  name: getEvent
  nameWithType: ActorBase.getEvent
  fullName: protected<T> T microsoft.servicefabric.actors.ActorBase.getEvent
  package: microsoft.servicefabric.actors
- uid: microsoft.servicefabric.actors._actor_base.ActorBase(FabricActorService,ActorId)
- uid: microsoft.servicefabric.actors._actor_base.getConcurrencyLockImpl()
- uid: microsoft.servicefabric.actors._actor_base.getDiagnosticsContext()
- uid: microsoft.servicefabric.actors._actor_base.getGcHandler()
- uid: microsoft.servicefabric.actors._actor_base.getManager()
- uid: microsoft.servicefabric.actors._actor_base.isDirty()
- uid: microsoft.servicefabric.actors._actor_base.isDummy()
- uid: microsoft.servicefabric.actors._actor_base.isInitialized()
- uid: microsoft.servicefabric.actors._actor_base.isMarkedForDeletion()
- uid: microsoft.servicefabric.actors._actor_base.onActivateInternalAsync()
- uid: microsoft.servicefabric.actors._actor_base.onDeactivateInternalAsync()
- uid: microsoft.servicefabric.actors._actor_base.onInvokeFailedInternal()
- uid: microsoft.servicefabric.actors._actor_base.onPostActiviateAsync()
- uid: microsoft.servicefabric.actors._actor_base.onPostActorMethodAsyncInternal(ActorMethodContext)
- uid: microsoft.servicefabric.actors._actor_base.onPreActorMethodAsyncInternal(ActorMethodContext)
- uid: microsoft.servicefabric.actors._actor_base.onResetStateAsyncInternal()
- uid: microsoft.servicefabric.actors._actor_base.onSaveStateAsyncInternal()
- uid: microsoft.servicefabric.actors._actor_base.resetStateAsyncInternal()
- uid: microsoft.servicefabric.actors._actor_base.saveStateAsyncInternal()
- uid: microsoft.servicefabric.actors._actor_base.setDirty(boolean)
- uid: microsoft.servicefabric.actors._actor_base.setDummy(boolean)
- uid: microsoft.servicefabric.actors._actor_base.setInitialized(boolean)
- uid: microsoft.servicefabric.actors._actor_base.setMarkedForDeletion(boolean)
- uid: microsoft.servicefabric.actors._dummy_actor
- uid: microsoft.servicefabric.actors._fabric_actor
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._fabric_actor.yml
  name: FabricActor
  nameWithType: FabricActor
  fullName: microsoft.servicefabric.actors.FabricActor
  type: Class
  summary: >-
    <p>Represents a actor that can have multiple reliable 'named' states associated with it. <xref href="microsoft.servicefabric.actors._actor_base" data-throw-if-not-resolved="false"></xref></p>

    <p>

      <bold>Remarks:</bold>The state is preserved across actor garbage collections and fail-overs. The storage and retrieval of the state is provided by the actor state provider <xref href="microsoft.servicefabric.actors._actor_state_provider" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public class FabricActor
- uid: microsoft.servicefabric.actors._actor_timer
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._actor_timer.yml
  name: ActorTimer
  nameWithType: ActorTimer
  fullName: microsoft.servicefabric.actors.ActorTimer
  type: Interface
  summary: <p>Represents Timer set on an <xref href="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false"></xref></p>
  syntax:
    content: public interface ActorTimer
- uid: microsoft.servicefabric.actors._actor_id
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._actor_id.yml
  name: ActorId
  nameWithType: ActorId
  fullName: microsoft.servicefabric.actors.ActorId
  type: Class
  summary: >-
    <p>

      <xref href="microsoft.servicefabric.actors._actor_id" data-throw-if-not-resolved="false"></xref> represents identity of an actor within an actor service. The actors can be identified by <ref refid="" kindref="compound">java.lang.String</ref>, <ref refid="" kindref="compound">java.util.UUID</ref> or long. </p>
  syntax:
    content: public class ActorId
- uid: microsoft.servicefabric.actors._fabric_actor_service
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._fabric_actor_service.yml
  name: FabricActorService
  nameWithType: FabricActorService
  fullName: microsoft.servicefabric.actors.FabricActorService
  type: Class
  summary: >-
    <p>Represents the base class for Microsoft Service Fabric based reliable actors service. </p>

    <p>

      <bold>Remarks:</bold>Derive from this class to implement your own custom actor service if you want to override any service level behavior for your actors. </p>
  syntax:
    content: public class FabricActorService
- uid: microsoft.servicefabric.actors._actor_method_context
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._actor_method_context.yml
  name: ActorMethodContext
  nameWithType: ActorMethodContext
  fullName: microsoft.servicefabric.actors.ActorMethodContext
  type: Class
  summary: <p>An <xref href="microsoft.servicefabric.actors._actor_method_context" data-throw-if-not-resolved="false"></xref> contains information about the method that is invoked by actor runtime and is passed as an argument to <xref href="microsoft.servicefabric.actors._actor_base.onPreActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false"></xref> and <xref href="microsoft.servicefabric.actors._actor_base.onPostActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public class ActorMethodContext
- uid: microsoft.servicefabric.actors._actor_base.onPreActorMethodAsync(ActorMethodContext)
  parent: microsoft.servicefabric.actors._actor_base
  href: microsoft.servicefabric.actors._actor_base.yml
  name: onPreActorMethodAsync(ActorMethodContext actorMethodContext)
  nameWithType: ActorBase.onPreActorMethodAsync(ActorMethodContext actorMethodContext)
  fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorBase.onPreActorMethodAsync(ActorMethodContext actorMethodContext)
  type: Method
  summary: >-
    <p>This method is invoked by actor runtime just before invoking an actor method. Override this method for performing any actions prior to an actor method is invoked.</p>

    <p></p>
  syntax: *o1
- uid: microsoft.servicefabric.actors._actor_base.onPostActorMethodAsync(ActorMethodContext)
  parent: microsoft.servicefabric.actors._actor_base
  href: microsoft.servicefabric.actors._actor_base.yml
  name: onPostActorMethodAsync(ActorMethodContext actorMethodContext)
  nameWithType: ActorBase.onPostActorMethodAsync(ActorMethodContext actorMethodContext)
  fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorBase.onPostActorMethodAsync(ActorMethodContext actorMethodContext)
  type: Method
  summary: >-
    <p>This method is invoked by actor runtime an actor method has finished execution. Override this method for performing any actions after an actor method has finished execution.</p>

    <p></p>
  syntax: *o2
- uid: microsoft.servicefabric.actors._actor_method_context.getMethodName()
  parent: microsoft.servicefabric.actors._actor_method_context
  href: microsoft.servicefabric.actors._actor_method_context.yml
  name: getMethodName()
  nameWithType: ActorMethodContext.getMethodName()
  fullName: String microsoft.servicefabric.actors.ActorMethodContext.getMethodName()
  type: Method
  summary: >-
    <p>Name of the method invoked by actor runtime.</p>

    <p></p>
  syntax:
    content: public String getMethodName()
    return:
      type: "26831127"
      description: <p>A string representing the name of method. </p>
- uid: microsoft.servicefabric.actors._actor_reminder
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._actor_reminder.yml
  name: ActorReminder
  nameWithType: ActorReminder
  fullName: microsoft.servicefabric.actors.ActorReminder
  type: Interface
  summary: <p>Encapsulates Reminder set on an <xref href="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false"></xref></p>
  syntax:
    content: public interface ActorReminder
- uid: microsoft.servicefabric.actors._actor
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._actor.yml
  name: Actor
  nameWithType: Actor
  fullName: microsoft.servicefabric.actors.Actor
  type: Interface
  summary: <p>Base interface for inheriting reliable actor interfaces. </p>
  syntax:
    content: public interface Actor
- uid: microsoft.servicefabric.actors._actor_state_provider
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._actor_state_provider.yml
  name: ActorStateProvider
  nameWithType: ActorStateProvider
  fullName: microsoft.servicefabric.actors.ActorStateProvider
  type: Interface
  summary: <p>Represents the interface that an actor state provider needs to implement for actor runtime to communicate with it. </p>
  syntax:
    content: public interface ActorStateProvider
