### YamlMime:JavaMember
uid: "com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLeaseWithResponse*"
fullName: "com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLeaseWithResponse"
name: "breakLeaseWithResponse"
nameWithType: "BlobLeaseAsyncClient.breakLeaseWithResponse"
members:
- uid: "com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLeaseWithResponse(com.azure.storage.blob.options.BlobBreakLeaseOptions)"
  fullName: "com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLeaseWithResponse(BlobBreakLeaseOptions options)"
  name: "breakLeaseWithResponse(BlobBreakLeaseOptions options)"
  nameWithType: "BlobLeaseAsyncClient.breakLeaseWithResponse(BlobBreakLeaseOptions options)"
  summary: "Breaks the previously acquired lease, if it exists.\n\nIf `null` is passed for `breakPeriodInSeconds` a fixed duration lease will break after the remaining lease period elapses and an infinite lease will break immediately.\n\n**Code Samples**\n\n```java\nInteger retainLeaseInSeconds = 5;\n BlobLeaseRequestConditions requestConditions = new BlobLeaseRequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n \n BlobBreakLeaseOptions options = new BlobBreakLeaseOptions()\n     .setBreakPeriod(Duration.ofSeconds(retainLeaseInSeconds))\n     .setRequestConditions(requestConditions);\n \n client.breakLeaseWithResponse(options).subscribe(response ->\n     System.out.printf(\"The broken lease has %d seconds remaining on the lease\", response.getValue()));\n```"
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.BlobBreakLeaseOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobBreakLeaseOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.BlobBreakLeaseOptions?alt=com.azure.storage.blob.options.BlobBreakLeaseOptions&text=BlobBreakLeaseOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Integer>> breakLeaseWithResponse(BlobBreakLeaseOptions options)"
  returns:
    description: "A reactive response containing the remaining time in the broken lease in seconds."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLeaseWithResponse(java.lang.Integer,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLeaseWithResponse(Integer breakPeriodInSeconds, RequestConditions modifiedRequestConditions)"
  name: "breakLeaseWithResponse(Integer breakPeriodInSeconds, RequestConditions modifiedRequestConditions)"
  nameWithType: "BlobLeaseAsyncClient.breakLeaseWithResponse(Integer breakPeriodInSeconds, RequestConditions modifiedRequestConditions)"
  summary: "Breaks the previously acquired lease, if it exists.\n\nIf `null` is passed for `breakPeriodInSeconds` a fixed duration lease will break after the remaining lease period elapses and an infinite lease will break immediately.\n\n**Code Samples**\n\n```java\nInteger retainLeaseInSeconds = 5;\n RequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n \n client.breakLeaseWithResponse(retainLeaseInSeconds, modifiedRequestConditions).subscribe(response ->\n     System.out.printf(\"The broken lease has %d seconds remaining on the lease\", response.getValue()));\n```"
  parameters:
  - description: "An optional duration, between 0 and 60 seconds, that the lease should continue before\n it is broken. If the break period is longer than the time remaining on the lease the remaining time on the lease\n is used. A new lease will not be available before the break period has expired, but the lease may be held for\n longer than the break period."
    name: "breakPeriodInSeconds"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  - description: "Standard HTTP Access conditions related to the modification of data. ETag and\n LastModifiedTime are used to construct conditions related to when the resource was changed relative to the given\n request. The request will fail if the specified condition is not satisfied."
    name: "modifiedRequestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Integer>> breakLeaseWithResponse(Integer breakPeriodInSeconds, RequestConditions modifiedRequestConditions)"
  returns:
    description: "A reactive response containing the remaining time in the broken lease in seconds."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.storage.blob.specialized"
artifact: com.azure:azure-storage-blob:12.8.0
