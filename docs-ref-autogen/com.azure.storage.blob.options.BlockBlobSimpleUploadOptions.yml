### YamlMime:JavaType
uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions"
fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions"
name: "BlockBlobSimpleUploadOptions"
nameWithType: "BlockBlobSimpleUploadOptions"
summary: "Extended options that may be passed when uploading a Block Blob in a single request."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class BlockBlobSimpleUploadOptions"
constructors:
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.BlockBlobSimpleUploadOptions(com.azure.core.util.BinaryData)"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.BlockBlobSimpleUploadOptions(BinaryData data)"
  name: "BlockBlobSimpleUploadOptions(BinaryData data)"
  nameWithType: "BlockBlobSimpleUploadOptions.BlockBlobSimpleUploadOptions(BinaryData data)"
  parameters:
  - description: "The data to write to the block. Note that this <code>BinaryData</code> must have defined length\n and must be replayable if retries are enabled (the default), see <xref uid=\"com.azure.core.util.BinaryData.isReplayable*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData#isReplayable()\"></xref>."
    name: "data"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlockBlobSimpleUploadOptions(BinaryData data)"
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.BlockBlobSimpleUploadOptions(java.io.InputStream,long)"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.BlockBlobSimpleUploadOptions(InputStream data, long length)"
  name: "BlockBlobSimpleUploadOptions(InputStream data, long length)"
  nameWithType: "BlockBlobSimpleUploadOptions.BlockBlobSimpleUploadOptions(InputStream data, long length)"
  parameters:
  - description: "The data to write to the blob."
    name: "data"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  - description: "The exact length of the data. It is important that this value match precisely the length of the\n data emitted by the data source."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlockBlobSimpleUploadOptions(InputStream data, long length)"
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.BlockBlobSimpleUploadOptions(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.BlockBlobSimpleUploadOptions(Flux<ByteBuffer> data, long length)"
  name: "BlockBlobSimpleUploadOptions(Flux<ByteBuffer> data, long length)"
  nameWithType: "BlockBlobSimpleUploadOptions.BlockBlobSimpleUploadOptions(Flux<ByteBuffer> data, long length)"
  parameters:
  - description: "The data to write to the blob. Note that this <code>Flux</code> must be replayable if retries are enabled\n (the default). In other words, the Flux must produce the same data each time it is subscribed to."
    name: "data"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The exact length of the data. It is important that this value match precisely the length of the\n data emitted by the data source."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlockBlobSimpleUploadOptions(Flux<ByteBuffer> data, long length)"
methods:
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getContentMd5()"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getContentMd5()"
  name: "getContentMd5()"
  nameWithType: "BlockBlobSimpleUploadOptions.getContentMd5()"
  syntax: "public byte[] getContentMd5()"
  returns:
    description: "An MD5 hash of the content. This hash is used to verify the integrity of the content during\n transport. When this header is specified, the storage service compares the hash of the content that has arrived\n with this header value. Note that this MD5 hash is not stored with the blob. If the two hashes do not match, the\n operation will fail."
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getData()"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getData()"
  name: "getData()"
  nameWithType: "BlockBlobSimpleUploadOptions.getData()"
  syntax: "public BinaryData getData()"
  returns:
    description: "The data to write to the blob."
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getDataFlux()"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getDataFlux()"
  name: "getDataFlux()"
  nameWithType: "BlockBlobSimpleUploadOptions.getDataFlux()"
  syntax: "public Flux<ByteBuffer> getDataFlux()"
  returns:
    description: "The data to write to the blob. Note that this <code>Flux</code> must be replayable if retries are enabled\n (the default). In other words, the Flux must produce the same data each time it is subscribed to."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getDataStream()"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getDataStream()"
  name: "getDataStream()"
  nameWithType: "BlockBlobSimpleUploadOptions.getDataStream()"
  syntax: "public InputStream getDataStream()"
  returns:
    description: "The data to write to the blob."
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getHeaders()"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getHeaders()"
  name: "getHeaders()"
  nameWithType: "BlockBlobSimpleUploadOptions.getHeaders()"
  syntax: "public BlobHttpHeaders getHeaders()"
  returns:
    description: "<xref uid=\"com.azure.storage.blob.models.BlobHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobHttpHeaders\"></xref>"
    type: "<xref href=\"com.azure.storage.blob.models.BlobHttpHeaders?alt=com.azure.storage.blob.models.BlobHttpHeaders&text=BlobHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getImmutabilityPolicy()"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getImmutabilityPolicy()"
  name: "getImmutabilityPolicy()"
  nameWithType: "BlockBlobSimpleUploadOptions.getImmutabilityPolicy()"
  syntax: "public BlobImmutabilityPolicy getImmutabilityPolicy()"
  returns:
    description: "<xref uid=\"com.azure.storage.blob.models.BlobImmutabilityPolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobImmutabilityPolicy\"></xref>"
    type: "<xref href=\"com.azure.storage.blob.models.BlobImmutabilityPolicy?alt=com.azure.storage.blob.models.BlobImmutabilityPolicy&text=BlobImmutabilityPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getLength()"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getLength()"
  name: "getLength()"
  nameWithType: "BlockBlobSimpleUploadOptions.getLength()"
  syntax: "public long getLength()"
  returns:
    description: "The exact length of the data. It is important that this value match precisely the length of the\n data emitted by the data source."
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getMetadata()"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getMetadata()"
  name: "getMetadata()"
  nameWithType: "BlockBlobSimpleUploadOptions.getMetadata()"
  syntax: "public Map<String,String> getMetadata()"
  returns:
    description: "The metadata to associate with the blob."
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getRequestConditions()"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getRequestConditions()"
  name: "getRequestConditions()"
  nameWithType: "BlockBlobSimpleUploadOptions.getRequestConditions()"
  syntax: "public BlobRequestConditions getRequestConditions()"
  returns:
    description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getTags()"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getTags()"
  name: "getTags()"
  nameWithType: "BlockBlobSimpleUploadOptions.getTags()"
  syntax: "public Map<String,String> getTags()"
  returns:
    description: "The tags to associate with the blob."
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getTier()"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.getTier()"
  name: "getTier()"
  nameWithType: "BlockBlobSimpleUploadOptions.getTier()"
  syntax: "public AccessTier getTier()"
  returns:
    description: "<xref uid=\"com.azure.storage.blob.models.AccessTier\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccessTier\"></xref>"
    type: "<xref href=\"com.azure.storage.blob.models.AccessTier?alt=com.azure.storage.blob.models.AccessTier&text=AccessTier\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.isLegalHold()"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.isLegalHold()"
  name: "isLegalHold()"
  nameWithType: "BlockBlobSimpleUploadOptions.isLegalHold()"
  syntax: "public Boolean isLegalHold()"
  returns:
    description: "If a legal hold should be placed on the blob."
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.setContentMd5(byte[])"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.setContentMd5(byte[] contentMd5)"
  name: "setContentMd5(byte[] contentMd5)"
  nameWithType: "BlockBlobSimpleUploadOptions.setContentMd5(byte[] contentMd5)"
  parameters:
  - description: "An MD5 hash of the block content. This hash is used to verify the integrity of the block during\n transport. When this header is specified, the storage service compares the hash of the content that has arrived\n with this header value. Note that this MD5 hash is not stored with the blob. If the two hashes do not match, the\n operation will fail."
    name: "contentMd5"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public BlockBlobSimpleUploadOptions setContentMd5(byte[] contentMd5)"
  returns:
    description: "The updated options"
    type: "<xref href=\"com.azure.storage.blob.options.BlockBlobSimpleUploadOptions?alt=com.azure.storage.blob.options.BlockBlobSimpleUploadOptions&text=BlockBlobSimpleUploadOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.setHeaders(com.azure.storage.blob.models.BlobHttpHeaders)"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.setHeaders(BlobHttpHeaders headers)"
  name: "setHeaders(BlobHttpHeaders headers)"
  nameWithType: "BlockBlobSimpleUploadOptions.setHeaders(BlobHttpHeaders headers)"
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobHttpHeaders\"></xref>"
    name: "headers"
    type: "<xref href=\"com.azure.storage.blob.models.BlobHttpHeaders?alt=com.azure.storage.blob.models.BlobHttpHeaders&text=BlobHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlockBlobSimpleUploadOptions setHeaders(BlobHttpHeaders headers)"
  returns:
    description: "The updated options"
    type: "<xref href=\"com.azure.storage.blob.options.BlockBlobSimpleUploadOptions?alt=com.azure.storage.blob.options.BlockBlobSimpleUploadOptions&text=BlockBlobSimpleUploadOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.setImmutabilityPolicy(com.azure.storage.blob.models.BlobImmutabilityPolicy)"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.setImmutabilityPolicy(BlobImmutabilityPolicy immutabilityPolicy)"
  name: "setImmutabilityPolicy(BlobImmutabilityPolicy immutabilityPolicy)"
  nameWithType: "BlockBlobSimpleUploadOptions.setImmutabilityPolicy(BlobImmutabilityPolicy immutabilityPolicy)"
  summary: "Note that this parameter is only applicable to a blob within a container that has immutable storage with versioning enabled."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobImmutabilityPolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobImmutabilityPolicy\"></xref>"
    name: "immutabilityPolicy"
    type: "<xref href=\"com.azure.storage.blob.models.BlobImmutabilityPolicy?alt=com.azure.storage.blob.models.BlobImmutabilityPolicy&text=BlobImmutabilityPolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlockBlobSimpleUploadOptions setImmutabilityPolicy(BlobImmutabilityPolicy immutabilityPolicy)"
  desc: "Note that this parameter is only applicable to a blob within a container that has immutable storage with versioning enabled."
  returns:
    description: "The updated options."
    type: "<xref href=\"com.azure.storage.blob.options.BlockBlobSimpleUploadOptions?alt=com.azure.storage.blob.options.BlockBlobSimpleUploadOptions&text=BlockBlobSimpleUploadOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.setLegalHold(java.lang.Boolean)"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.setLegalHold(Boolean legalHold)"
  name: "setLegalHold(Boolean legalHold)"
  nameWithType: "BlockBlobSimpleUploadOptions.setLegalHold(Boolean legalHold)"
  summary: "Note that this parameter is only applicable to a blob within a container that has immutable storage with versioning enabled."
  parameters:
  - description: "Indicates if a legal hold should be placed on the blob."
    name: "legalHold"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlockBlobSimpleUploadOptions setLegalHold(Boolean legalHold)"
  desc: "Note that this parameter is only applicable to a blob within a container that has immutable storage with versioning enabled."
  returns:
    description: "The updated options."
    type: "<xref href=\"com.azure.storage.blob.options.BlockBlobSimpleUploadOptions?alt=com.azure.storage.blob.options.BlockBlobSimpleUploadOptions&text=BlockBlobSimpleUploadOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.setMetadata(Map<String,String> metadata)"
  name: "setMetadata(Map<String,String> metadata)"
  nameWithType: "BlockBlobSimpleUploadOptions.setMetadata(Map<String,String> metadata)"
  parameters:
  - description: "The metadata to associate with the blob."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public BlockBlobSimpleUploadOptions setMetadata(Map<String,String> metadata)"
  returns:
    description: "The updated options"
    type: "<xref href=\"com.azure.storage.blob.options.BlockBlobSimpleUploadOptions?alt=com.azure.storage.blob.options.BlockBlobSimpleUploadOptions&text=BlockBlobSimpleUploadOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.setRequestConditions(com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.setRequestConditions(BlobRequestConditions requestConditions)"
  name: "setRequestConditions(BlobRequestConditions requestConditions)"
  nameWithType: "BlockBlobSimpleUploadOptions.setRequestConditions(BlobRequestConditions requestConditions)"
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlockBlobSimpleUploadOptions setRequestConditions(BlobRequestConditions requestConditions)"
  returns:
    description: "The updated options."
    type: "<xref href=\"com.azure.storage.blob.options.BlockBlobSimpleUploadOptions?alt=com.azure.storage.blob.options.BlockBlobSimpleUploadOptions&text=BlockBlobSimpleUploadOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.setTags(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.setTags(Map<String,String> tags)"
  name: "setTags(Map<String,String> tags)"
  nameWithType: "BlockBlobSimpleUploadOptions.setTags(Map<String,String> tags)"
  parameters:
  - description: "The tags to associate with the blob."
    name: "tags"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public BlockBlobSimpleUploadOptions setTags(Map<String,String> tags)"
  returns:
    description: "The updated options."
    type: "<xref href=\"com.azure.storage.blob.options.BlockBlobSimpleUploadOptions?alt=com.azure.storage.blob.options.BlockBlobSimpleUploadOptions&text=BlockBlobSimpleUploadOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.setTier(com.azure.storage.blob.models.AccessTier)"
  fullName: "com.azure.storage.blob.options.BlockBlobSimpleUploadOptions.setTier(AccessTier tier)"
  name: "setTier(AccessTier tier)"
  nameWithType: "BlockBlobSimpleUploadOptions.setTier(AccessTier tier)"
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.AccessTier\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccessTier\"></xref>"
    name: "tier"
    type: "<xref href=\"com.azure.storage.blob.models.AccessTier?alt=com.azure.storage.blob.models.AccessTier&text=AccessTier\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlockBlobSimpleUploadOptions setTier(AccessTier tier)"
  returns:
    description: "The updated options."
    type: "<xref href=\"com.azure.storage.blob.options.BlockBlobSimpleUploadOptions?alt=com.azure.storage.blob.options.BlockBlobSimpleUploadOptions&text=BlockBlobSimpleUploadOptions\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Extended options that may be passed when uploading a Block Blob in a single request."
metadata: {}
package: "com.azure.storage.blob.options"
artifact: com.azure:azure-storage-blob:12.19.0
