### YamlMime:JavaPackage
uid: "com.azure.security.keyvault.certificates"
fullName: "com.azure.security.keyvault.certificates"
name: "com.azure.security.keyvault.certificates"
summary: "<p><a href=\"https://learn.microsoft.com/azure/certificate-vault/general/\">Azure Key Vault</a> is a cloud-based service\n provided by Microsoft Azure that allows users to securely store and manage cryptographic certificates used for encrypting\n and decrypting data."
classes:
- "com.azure.security.keyvault.certificates.CertificateAsyncClient"
- "com.azure.security.keyvault.certificates.CertificateClient"
- "com.azure.security.keyvault.certificates.CertificateClientBuilder"
enums:
- "com.azure.security.keyvault.certificates.CertificateServiceVersion"
desc: "<p><a href=\"https://learn.microsoft.com/azure/certificate-vault/general/\">Azure Key Vault</a> is a cloud-based service\n provided by Microsoft Azure that allows users to securely store and manage cryptographic certificates used for encrypting\n and decrypting data. It is a part of Azure Key Vault, which is a cloud-based service for managing cryptographic certificates,\n keys, and secrets.</p>\n\n <p>Azure Key Vault Certificates provides a centralized and highly secure location for storing certificates, which\n eliminates the need to store sensitive certificate material in application code or configuration files.\n By leveraging Azure Key Vault, you can better protect your certificates and ensure their availability\n when needed.</p>\n\n <p>Key features of the Azure Key Vault Certificates service include:</p>\n\n <ul>\n  <li>Secure storage: Certificates are stored securely within Azure Key Vault, which provides robust encryption\n  and access control mechanisms to protect against unauthorized access.</li>\n  <li>Certificate lifecycle management: You can create, import, and manage certificates within Azure Key Vault.\n  It supports common certificate formats such as X.509 and PFX.</li>\n  <li>Certificate management operations: Azure Key Vault provides a comprehensive set of management operations,\n  including certificate creation, deletion, retrieval, renewal, and revocation.</li>\n  <li>Integration with Azure services: Key Vault Certificates can be easily integrated with other Azure services,\n  such as Azure App Service, Azure Functions, and Azure Virtual Machines, to enable secure authentication\n  and encryption.</li>\n </ul>\n\n <p>The Azure Key Vault Certificates client library allows developers to securely store and manage certificates\n within Azure Key Vault. The library provides a set of APIs that enable developers to securely create, import,\n retrieve, update, and perform other certificate-related operations.</p>\n\n <p><strong>Key Concepts:</strong></p>\n\n <p>What is a Certificate Client?</p>\n\n <p>The certificate client performs the interactions with the Azure Key Vault service for getting, setting, updating,\n deleting, and listing certificates and its versions. Asynchronous (CertificateAsyncClient) and synchronous (CertificateClient) clients\n exist in the SDK allowing for the selection of a client based on an application's use case. Once you have\n initialized a certificate, you can interact with the primary resource types in Azure Key Vault.</p>\n\n <p>What is an Azure Key Vault Certificate ?</p>\n\n <p>Azure Key Vault supports certificates with secret content types (PKCS12 and PEM). The certificate can be\n backed by keys in Azure Key Vault of types (EC and RSA). In addition to the certificate policy, the following\n attributes may be specified:.</p>\n\n <ul>\n <li>enabled: Specifies whether the certificate is enabled and usable.</li>\n <li>created: Indicates when this version of the certificate was created.</li>\n <li>updated: Indicates when this version of the certificate was updated.</li>\n </ul>\n\n <h2>Getting Started</h2>\n\n <p>In order to interact with the Azure Key Vault service, you will need to create an instance of the\n <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.certificates.CertificateClient\"></xref> or <xref uid=\"com.azure.security.keyvault.certificates.CertificateAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.certificates.CertificateAsyncClient\"></xref> class, a vault url and a credential object.</p>\n\n <p>The examples shown in this document use a credential object named DefaultAzureCredential for authentication,\n which is appropriate for most scenarios, including local development and production environments. Additionally,\n we recommend using a\n <a href=\"https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/\">\n managed identity</a> for authentication in production environments.\n You can find more information on different ways of authenticating and their corresponding credential types in the\n <a href=\"https://learn.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable\">\n Azure Identity documentation\"</a>.</p>\n\n <p><strong>Sample: Construct Synchronous Certificate Client</strong></p>\n\n <p>The following code sample demonstrates the creation of a <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.certificates.CertificateClient\"></xref>,\n using the <xref uid=\"com.azure.security.keyvault.certificates.CertificateClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.certificates.CertificateClientBuilder\"></xref> to configure it.</p>\n\n <!-- src_embed com.azure.security.keyvault.certificates.CertificateClient.instantiation -->\n <pre>\n CertificateClient certificateClient = new CertificateClientBuilder&#40;&#41;\n     .credential&#40;new DefaultAzureCredentialBuilder&#40;&#41;.build&#40;&#41;&#41;\n     .vaultUrl&#40;&quot;&lt;your-key-vault-url&gt;&quot;&#41;\n     .httpLogOptions&#40;new HttpLogOptions&#40;&#41;.setLogLevel&#40;HttpLogDetailLevel.BODY_AND_HEADERS&#41;&#41;\n     .buildClient&#40;&#41;;\n </pre>\n <!-- end com.azure.security.keyvault.certificates.CertificateClient.instantiation  -->\n\n <p><strong>Sample: Construct Asynchronous Certificate Client</strong></p>\n\n <p>The following code sample demonstrates the creation of a\n <xref uid=\"com.azure.security.keyvault.certificates.CertificateAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.certificates.CertificateAsyncClient\"></xref>, using the\n <xref uid=\"com.azure.security.keyvault.certificates.CertificateClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.certificates.CertificateClientBuilder\"></xref> to configure it.</p>\n\n <!-- src_embed com.azure.security.keyvault.certificates.CertificateAsyncClient.instantiation -->\n <pre>\n CertificateAsyncClient certificateAsyncClient = new CertificateClientBuilder&#40;&#41;\n     .credential&#40;new DefaultAzureCredentialBuilder&#40;&#41;.build&#40;&#41;&#41;\n     .vaultUrl&#40;&quot;&lt;your-key-vault-url&gt;&quot;&#41;\n     .httpLogOptions&#40;new HttpLogOptions&#40;&#41;.setLogLevel&#40;HttpLogDetailLevel.BODY_AND_HEADERS&#41;&#41;\n     .buildAsyncClient&#40;&#41;;\n </pre>\n <!-- end com.azure.security.keyvault.certificates.CertificateAsyncClient.instantiation -->\n\n <br/>\n\n <hr/>\n\n <h2>Create a Certificate</h2>\n The <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.certificates.CertificateClient\"></xref> or\n <xref uid=\"com.azure.security.keyvault.certificates.CertificateAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.certificates.CertificateAsyncClient\"></xref> can be used to create a certificate in\n the key vault.\n\n <p><strong>Synchronous Code Sample:</strong></p>\n <p>The following code sample demonstrates how to synchronously create a certificate in the key vault,\n using the <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient#beginCreateCertificate(java.lang.String, com.azure.security.keyvault.certificates.models.CertificatePolicy)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.certificates.CertificateClient#beginCreateCertificate(java.lang.String, com.azure.security.keyvault.certificates.models.CertificatePolicy)\"></xref> API.</p>\n\n <!-- src_embed com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate#String-CertificatePolicy -->\n <pre>\n CertificatePolicy certPolicy = new CertificatePolicy&#40;&quot;Self&quot;,\n     &quot;CN=SelfSignedJavaPkcs12&quot;&#41;;\n SyncPoller&lt;CertificateOperation, KeyVaultCertificateWithPolicy&gt; certPoller = certificateClient\n     .beginCreateCertificate&#40;&quot;certificateName&quot;, certPolicy&#41;;\n certPoller.waitUntil&#40;LongRunningOperationStatus.SUCCESSFULLY_COMPLETED&#41;;\n KeyVaultCertificate cert = certPoller.getFinalResult&#40;&#41;;\n System.out.printf&#40;&quot;Certificate created with name %s%n&quot;, cert.getName&#40;&#41;&#41;;\n </pre>\n <!-- end com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate#String-CertificatePolicy -->\n\n <p><strong>Note:</strong> For the asynchronous sample, refer to\n <xref uid=\"com.azure.security.keyvault.certificates.CertificateAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.certificates.CertificateAsyncClient\"></xref>.</p>\n\n <br/>\n\n <hr/>\n\n <h2>Get a Certificate</h2>\n The <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.certificates.CertificateClient\"></xref> or\n <xref uid=\"com.azure.security.keyvault.certificates.CertificateAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.certificates.CertificateAsyncClient\"></xref> can be used to retrieve a certificate from the\n key vault.\n\n <p><strong>Synchronous Code Sample:</strong></p>\n <p>The following code sample demonstrates how to synchronously retrieve a certificate from the key vault, using\n the <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient#getCertificate(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.certificates.CertificateClient#getCertificate(java.lang.String)\"></xref>.</p>\n\n <!-- src_embed com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicy#string -->\n <pre>\n CertificatePolicy policy = certificateClient.getCertificatePolicy&#40;&quot;certificateName&quot;&#41;;\n System.out.printf&#40;&quot;Received policy with subject name %s%n&quot;, policy.getSubject&#40;&#41;&#41;;\n </pre>\n <!-- end com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicy#string -->\n\n <p><strong>Note:</strong> For the asynchronous sample, refer to\n <xref uid=\"com.azure.security.keyvault.certificates.CertificateAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.certificates.CertificateAsyncClient\"></xref>.</p>\n\n <br/>\n\n <hr/>\n\n <h2>Delete a Certificate</h2>\n The <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.certificates.CertificateClient\"></xref> or\n <xref uid=\"com.azure.security.keyvault.certificates.CertificateAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.certificates.CertificateAsyncClient\"></xref> can be used to delete a certificate from\n the key vault.\n\n <p><strong>Synchronous Code Sample:</strong></p>\n <p>The following code sample demonstrates how to synchronously delete a certificate from the\n key vault, using the <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient#beginDeleteCertificate(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.certificates.CertificateClient#beginDeleteCertificate(java.lang.String)\"></xref> API.</p>\n\n <!-- src_embed com.azure.security.keyvault.certificates.CertificateClient.beginDeleteCertificate#String -->\n <pre>\n SyncPoller&lt;DeletedCertificate, Void&gt; deleteCertPoller =\n     certificateClient.beginDeleteCertificate&#40;&quot;certificateName&quot;&#41;;\n &#47;&#47; Deleted Certificate is accessible as soon as polling beings.\n PollResponse&lt;DeletedCertificate&gt; deleteCertPollResponse = deleteCertPoller.poll&#40;&#41;;\n System.out.printf&#40;&quot;Deleted certificate with name %s and recovery id %s%n&quot;,\n     deleteCertPollResponse.getValue&#40;&#41;.getName&#40;&#41;, deleteCertPollResponse.getValue&#40;&#41;.getRecoveryId&#40;&#41;&#41;;\n deleteCertPoller.waitForCompletion&#40;&#41;;\n </pre>\n <!-- end com.azure.security.keyvault.certificates.CertificateClient.beginDeleteCertificate#String -->\n\n <p><strong>Note:</strong> For the asynchronous sample, refer to\n <xref uid=\"com.azure.security.keyvault.certificates.CertificateAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.certificates.CertificateAsyncClient\"></xref>.</p>"
metadata: {}
package: "com.azure.security.keyvault.certificates"
artifact: com.azure:azure-security-keyvault-certificates:4.6.2
