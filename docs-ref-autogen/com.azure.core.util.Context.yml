### YamlMime:ManagedReference
items:
- uid: com.azure.core.util.Context
  id: Context
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util
  children:
  - com.azure.core.util.Context.Context(java.lang.Object,java.lang.Object)
  - com.azure.core.util.Context.NONE
  - com.azure.core.util.Context.addData(java.lang.Object,java.lang.Object)
  - com.azure.core.util.Context.getData(java.lang.Object)
  - com.azure.core.util.Context.getValues()
  - com.azure.core.util.Context.of(java.util.Map<java.lang.Object,java.lang.Object>)
  langs:
  - java
  name: Context
  nameWithType: Context
  fullName: com.azure.core.util.Context
  type: Class
  package: com.azure.core.util
  summary: >-
    `Context` offers a means of passing arbitrary data (key-value pairs) to pipeline policies. Most applications do not need to pass arbitrary data to the pipeline and can pass `Context.NONE` or `null`.


    Each context object is immutable. The <xref uid="com.azure.core.util.Context.addData(java.lang.Object,java.lang.Object)" data-throw-if-not-resolved="false">#addData(Object, Object)</xref> method creates a new `Context` object that refers to its parent, forming a linked list.
  syntax:
    content: public class Context
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.core.util.Context.Context(com.azure.core.util.Context,java.lang.Object,java.lang.Object)
  id: Context(com.azure.core.util.Context,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.Context
  langs:
  - java
  name: Context(Context parent, Object key, Object value)
  nameWithType: Context.Context(Context parent, Object key, Object value)
  fullName: com.azure.core.util.Context.Context(Context parent, Object key, Object value)
  overload: com.azure.core.util.Context.Context*
  type: Constructor
  package: com.azure.core.util
  syntax:
    content: private Context(Context parent, Object key, Object value)
    parameters:
    - id: parent
      type: com.azure.core.util.Context
    - id: key
      type: java.lang.Object
    - id: value
      type: java.lang.Object
- uid: com.azure.core.util.Context.Context(java.lang.Object,java.lang.Object)
  id: Context(java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.Context
  langs:
  - java
  name: Context(Object key, Object value)
  nameWithType: Context.Context(Object key, Object value)
  fullName: com.azure.core.util.Context.Context(Object key, Object value)
  overload: com.azure.core.util.Context.Context*
  type: Constructor
  package: com.azure.core.util
  summary: "Constructs a new <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\">Context</xref> object.\n\n**Code samples**\n\n```java\n// Create an empty context having no data\n Context emptyContext = Context.NONE;\n \n // Tracing spans created by users can be passed to calling methods in sdk clients using Context object\n final String userParentSpan = \"user-parent-span\";\n \n // Create a context using the provided key and user parent span\n Context keyValueContext = new Context(PARENT_SPAN_KEY, userParentSpan);\n```"
  syntax:
    content: public Context(Object key, Object value)
    parameters:
    - id: key
      type: java.lang.Object
      description: The key with which the specified value should be associated.
    - id: value
      type: java.lang.Object
      description: The value to be associated with the specified key.
- uid: com.azure.core.util.Context.NONE
  id: NONE
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.Context
  langs:
  - java
  name: NONE
  nameWithType: Context.NONE
  fullName: com.azure.core.util.Context.NONE
  type: Field
  package: com.azure.core.util
  summary: Signifies that no data needs to be passed to the pipeline.
  syntax:
    content: public static final Context NONE
    return:
      type: com.azure.core.util.Context
- uid: com.azure.core.util.Context.addData(java.lang.Object,java.lang.Object)
  id: addData(java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.Context
  langs:
  - java
  name: addData(Object key, Object value)
  nameWithType: Context.addData(Object key, Object value)
  fullName: com.azure.core.util.Context.addData(Object key, Object value)
  overload: com.azure.core.util.Context.addData*
  type: Method
  package: com.azure.core.util
  summary: "Adds a new immutable <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\">Context</xref> object with the specified key-value pair to the existing <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\">Context</xref> chain.\n\n**Code samples**\n\n```java\n// Users can send parent span information and pass additional metadata to attach to spans of the calling methods\n // using the Context object\n final String hostNameValue = \"host-name-value\";\n final String entityPathValue = \"entity-path-value\";\n final String userParentSpan = \"user-parent-span\";\n Context parentSpanContext = new Context(PARENT_SPAN_KEY, userParentSpan);\n \n // Add a new key value pair to the existing context object.\n Context updatedContext = parentSpanContext.addData(HOST_NAME_KEY, hostNameValue)\n     .addData(ENTITY_PATH_KEY, entityPathValue);\n \n // Both key values found on the same updated context object\n System.out.printf(\"Hostname value: %s%n\", updatedContext.getData(HOST_NAME_KEY).get());\n System.out.printf(\"Entity Path value: %s%n\", updatedContext.getData(ENTITY_PATH_KEY).get());\n```"
  syntax:
    content: public Context addData(Object key, Object value)
    parameters:
    - id: key
      type: java.lang.Object
      description: The key with which the specified value should be associated.
    - id: value
      type: java.lang.Object
      description: The value to be associated with the specified key.
    return:
      type: com.azure.core.util.Context
      description: the new <xref uid="com.azure.core.util.Context" data-throw-if-not-resolved="false">Context</xref> object containing the specified pair added to the set of pairs.
- uid: com.azure.core.util.Context.getData(java.lang.Object)
  id: getData(java.lang.Object)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.Context
  langs:
  - java
  name: getData(Object key)
  nameWithType: Context.getData(Object key)
  fullName: com.azure.core.util.Context.getData(Object key)
  overload: com.azure.core.util.Context.getData*
  type: Method
  package: com.azure.core.util
  summary: "Scans the linked-list of <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\">Context</xref> objects looking for one with the specified key. Note that the first key found, i.e. the most recently added, will be returned.\n\n**Code samples**\n\n```java\nfinal String key1 = \"Key1\";\n final String value1 = \"first-value\";\n \n // Create a context object with given key and value\n Context context = new Context(key1, value1);\n \n // Look for the specified key in the returned context object\n Optional<Object> optionalObject = context.getData(key1);\n if (optionalObject.isPresent()) {\n     System.out.printf(\"Key1 value: %s%n\", optionalObject.get());\n } else {\n     System.out.println(\"Key1 does not exist or have data.\");\n }\n```"
  syntax:
    content: public Optional<Object> getData(Object key)
    parameters:
    - id: key
      type: java.lang.Object
      description: The key to search for.
    return:
      type: java.util.Optional<java.lang.Object>
      description: The value of the specified key if it exists.
- uid: com.azure.core.util.Context.getValues()
  id: getValues()
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.Context
  langs:
  - java
  name: getValues()
  nameWithType: Context.getValues()
  fullName: com.azure.core.util.Context.getValues()
  overload: com.azure.core.util.Context.getValues*
  type: Method
  package: com.azure.core.util
  summary: "Scans the linked-list of <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\">Context</xref> objects populating a <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\">Map</xref> with the values of the context.\n\n**Code samples**\n\n```java\nfinal String key1 = \"Key1\";\n final String value1 = \"first-value\";\n final String key2 = \"Key2\";\n final String value2 = \"second-value\";\n \n Context context = new Context(key1, value1)\n     .addData(key2, value2);\n \n Map<Object, Object> contextValues = context.getValues();\n if (contextValues.containsKey(key1)) {\n     System.out.printf(\"Key1 value: %s%n\", contextValues.get(key1));\n } else {\n     System.out.println(\"Key1 does not exist.\");\n }\n \n if (contextValues.containsKey(key2)) {\n     System.out.printf(\"Key2 value: %s%n\", contextValues.get(key2));\n } else {\n     System.out.println(\"Key2 does not exist.\");\n }\n```"
  syntax:
    content: public Map<Object,Object> getValues()
    return:
      type: java.util.Map<java.lang.Object,java.lang.Object>
      description: A map containing all values of the context linked-list.
- uid: com.azure.core.util.Context.of(java.util.Map<java.lang.Object,java.lang.Object>)
  id: of(java.util.Map<java.lang.Object,java.lang.Object>)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.Context
  langs:
  - java
  name: of(Map<Object,Object> keyValues)
  nameWithType: Context.of(Map<Object,Object> keyValues)
  fullName: com.azure.core.util.Context.of(Map<Object,Object> keyValues)
  overload: com.azure.core.util.Context.of*
  type: Method
  package: com.azure.core.util
  summary: "Creates a new immutable <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\">Context</xref> object with all the keys and values provided by the input <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\">Map</xref>.\n\n**Code samples**\n\n```java\nfinal String key1 = \"Key1\";\n final String value1 = \"first-value\";\n Map<Object, Object> keyValueMap = new HashMap<>();\n keyValueMap.put(key1, value1);\n \n // Create a context using the provided key value pair map\n Context keyValueContext = Context.of(keyValueMap);\n System.out.printf(\"Key1 value %s%n\", keyValueContext.getData(key1).get());\n```"
  syntax:
    content: public static Context of(Map<Object,Object> keyValues)
    parameters:
    - id: keyValues
      type: java.util.Map<java.lang.Object,java.lang.Object>
      description: The input key value pairs that will be added to this context.
    return:
      type: com.azure.core.util.Context
      description: Context object containing all the key-value pairs in the input map.
references:
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.core.util.Context.Context*
  name: Context
  nameWithType: Context.Context
  fullName: com.azure.core.util.Context.Context
  package: com.azure.core.util
- uid: com.azure.core.util.Context.addData*
  name: addData
  nameWithType: Context.addData
  fullName: com.azure.core.util.Context.addData
  package: com.azure.core.util
- uid: java.util.Map<java.lang.Object,java.lang.Object>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: ','
    fullName: ','
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.Context.of*
  name: of
  nameWithType: Context.of
  fullName: com.azure.core.util.Context.of
  package: com.azure.core.util
- uid: java.util.Optional<java.lang.Object>
  spec.java:
  - uid: java.util.Optional
    name: Optional
    fullName: java.util.Optional
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.Context.getData*
  name: getData
  nameWithType: Context.getData
  fullName: com.azure.core.util.Context.getData
  package: com.azure.core.util
- uid: com.azure.core.util.Context.getValues*
  name: getValues
  nameWithType: Context.getValues
  fullName: com.azure.core.util.Context.getValues
  package: com.azure.core.util
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Object,java.lang.Object
  name: Object,Object
  nameWithType: Object,Object
  fullName: java.lang.Object,java.lang.Object
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.util.Optional
  name: Optional
  nameWithType: Optional
  fullName: java.util.Optional
