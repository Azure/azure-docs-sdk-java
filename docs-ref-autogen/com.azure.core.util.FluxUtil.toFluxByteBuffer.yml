### YamlMime:JavaMember
uid: "com.azure.core.util.FluxUtil.toFluxByteBuffer*"
fullName: "com.azure.core.util.FluxUtil.toFluxByteBuffer"
name: "toFluxByteBuffer"
nameWithType: "FluxUtil.toFluxByteBuffer"
members:
- uid: "com.azure.core.util.FluxUtil.toFluxByteBuffer(java.io.InputStream)"
  fullName: "com.azure.core.util.FluxUtil.toFluxByteBuffer(InputStream inputStream)"
  name: "toFluxByteBuffer(InputStream inputStream)"
  nameWithType: "FluxUtil.toFluxByteBuffer(InputStream inputStream)"
  summary: "Converts an <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref> into a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref> using a chunk size of 4096.\n\nGiven that <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref> is not guaranteed to be replayable the returned <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> should be considered non-replayable as well.\n\nIf the passed <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref> is `null` <xref uid=\"reactor.core.publisher.Flux.empty*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux#empty()\"></xref> will be returned."
  parameters:
  - description: "The <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref> to convert into a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref>."
    name: "inputStream"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Flux<ByteBuffer> toFluxByteBuffer(InputStream inputStream)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffers\"></xref> that contains the contents of the stream."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.FluxUtil.toFluxByteBuffer(java.io.InputStream,int)"
  fullName: "com.azure.core.util.FluxUtil.toFluxByteBuffer(InputStream inputStream, int chunkSize)"
  name: "toFluxByteBuffer(InputStream inputStream, int chunkSize)"
  nameWithType: "FluxUtil.toFluxByteBuffer(InputStream inputStream, int chunkSize)"
  summary: "Converts an <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref> into a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref>.\n\nGiven that <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref> is not guaranteed to be replayable the returned <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> should be considered non-replayable as well.\n\nIf the passed <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref> is `null` <xref uid=\"reactor.core.publisher.Flux.empty*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux#empty()\"></xref> will be returned."
  parameters:
  - description: "The <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref> to convert into a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref>."
    name: "inputStream"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  - description: "The requested size for each <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref>."
    name: "chunkSize"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Flux<ByteBuffer> toFluxByteBuffer(InputStream inputStream, int chunkSize)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffers\"></xref> that contains the contents of the stream."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.core.util"
artifact: com.azure:azure-core:1.12.0
