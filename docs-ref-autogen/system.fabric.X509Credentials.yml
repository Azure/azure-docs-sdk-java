### YamlMime:JavaType
constructors:
- fullName: system.fabric.X509Credentials.X509Credentials()
  name: X509Credentials()
  nameWithType: X509Credentials.X509Credentials()
  summary: <p>Creates a new instance of the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.X509Credentials"></xref> class. </p>
  syntax: public X509Credentials()
  uid: system.fabric.X509Credentials.X509Credentials()
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="system.fabric.SecurityCredentials?alt=system.fabric.SecurityCredentials&text=SecurityCredentials" data-throw-if-not-resolved="False"/>
inheritedMembers:
- system.fabric.SecurityCredentials.getCredentialType()
- system.fabric.SecurityCredentials.loadFrom(FabricCodePackageActivationContext,String,String)
- system.fabric.SecurityCredentials.setCredentialType(CredentialType)
methods:
- fullName: system.fabric.X509Credentials.getFindType()
  name: getFindType()
  nameWithType: X509Credentials.getFindType()
  returns:
    description: <p>The find type used to look for certificate. </p>
    type: <xref href="system.fabric.X509FindType?alt=system.fabric.X509FindType&text=X509FindType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the value which indicates how to find local certificate in Windows certificate store</p>

    <p></p>
  syntax: public X509FindType getFindType()
  uid: system.fabric.X509Credentials.getFindType()
- fullName: system.fabric.X509Credentials.getFindValue()
  name: getFindValue()
  nameWithType: X509Credentials.getFindValue()
  returns:
    description: <p>The value of security credentials to use to secure the cluster. </p>
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies the filter value used to search local certificate in certificate store. FindType specifies the type of filter value.</p>

    <p></p>
  syntax: public Object getFindValue()
  uid: system.fabric.X509Credentials.getFindValue()
- fullName: system.fabric.X509Credentials.getFindValueSecondary()
  name: getFindValueSecondary()
  nameWithType: X509Credentials.getFindValueSecondary()
  returns:
    description: <p>The secondary find value for loading local certificate credential. </p>
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the secondary find value for loading local certificate credential.</p>

    <p></p>
  syntax: public Object getFindValueSecondary()
  uid: system.fabric.X509Credentials.getFindValueSecondary()
- fullName: system.fabric.X509Credentials.getIssuerThumbprints()
  name: getIssuerThumbprints()
  nameWithType: X509Credentials.getIssuerThumbprints()
  returns:
    description: <p>The certificate thumbprints of direct issuer of remote certificates. </p>
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>When not empty, this dictates the certificate thumbprints of direct issuer of remote certificates.</p>

    <p></p>
  syntax: public List<String> getIssuerThumbprints()
  uid: system.fabric.X509Credentials.getIssuerThumbprints()
- fullName: system.fabric.X509Credentials.getProtectionLevel()
  name: getProtectionLevel()
  nameWithType: X509Credentials.getProtectionLevel()
  returns:
    description: <p>The protection level of the credential. </p>
    type: <xref href="system.fabric.ProtectionLevel?alt=system.fabric.ProtectionLevel&text=ProtectionLevel" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets how communication is protected, default value is <xref uid="system.fabric.ProtectionLevel.ENCRYPTANDSIGN" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ProtectionLevel#ENCRYPTANDSIGN"></xref>.</p>

    <p></p>
  syntax: public ProtectionLevel getProtectionLevel()
  uid: system.fabric.X509Credentials.getProtectionLevel()
- fullName: system.fabric.X509Credentials.getRemoteCertThumbprints()
  name: getRemoteCertThumbprints()
  nameWithType: X509Credentials.getRemoteCertThumbprints()
  returns:
    description: <p>List of remote certificate thumbprints, used to validate remote X509Credentials </p>
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the list of remote certificate thumbprints, used to validate remote X509Credentials</p>

    <p></p>
  syntax: public List<String> getRemoteCertThumbprints()
  uid: system.fabric.X509Credentials.getRemoteCertThumbprints()
- fullName: system.fabric.X509Credentials.getRemoteCommonNames()
  name: getRemoteCommonNames()
  nameWithType: X509Credentials.getRemoteCommonNames()
  returns:
    description: <p>The expected common names of remote certificates that you want Service Fabric to validate against. </p>
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Indicates the expected common names of remote certificates that you want Service Fabric to validate against.</p>

    <p></p>
  syntax: public List<String> getRemoteCommonNames()
  uid: system.fabric.X509Credentials.getRemoteCommonNames()
- fullName: system.fabric.X509Credentials.getRemoteX509Names()
  name: getRemoteX509Names()
  nameWithType: X509Credentials.getRemoteX509Names()
  returns:
    description: <p>the list of X509Name to validate remote X509Credentials </p>
    type: List&lt;<xref href="system.fabric.X509Name?alt=system.fabric.X509Name&text=X509Name" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the list of X509Name to validate remote X509Credentials</p>

    <p></p>
  syntax: public List<X509Name> getRemoteX509Names()
  uid: system.fabric.X509Credentials.getRemoteX509Names()
- fullName: system.fabric.X509Credentials.getStoreLocation()
  name: getStoreLocation()
  nameWithType: X509Credentials.getStoreLocation()
  returns:
    description: <p>The location of the certificate store. </p>
    type: <xref href="system.fabric.X509StoreLocation?alt=system.fabric.X509StoreLocation&text=X509StoreLocation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the location of the certificate store.</p>

    <p></p>
  syntax: public X509StoreLocation getStoreLocation()
  uid: system.fabric.X509Credentials.getStoreLocation()
- fullName: system.fabric.X509Credentials.getStoreName()
  name: getStoreName()
  nameWithType: X509Credentials.getStoreName()
  returns:
    description: <p>The name of the store where the certificate is stored. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the name of the store where the certificate is stored.</p>

    <p></p>
  syntax: public String getStoreName()
  uid: system.fabric.X509Credentials.getStoreName()
- fullName: system.fabric.X509Credentials.setFindType(X509FindType findType)
  name: setFindType(X509FindType findType)
  nameWithType: X509Credentials.setFindType(X509FindType findType)
  parameters:
  - description: <p>The find type used to look for certificate. </p>
    name: findType
    type: <xref href="system.fabric.X509FindType?alt=system.fabric.X509FindType&text=X509FindType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies how to find local certificate in Windows certificate store. Supported values: <xref uid="system.fabric.X509FindType.FINDBYTHUMBPRINT" data-throw-if-not-resolved="false" data-raw-source="system.fabric.X509FindType#FINDBYTHUMBPRINT"></xref> - find certificate by certificate thumbprint <xref uid="system.fabric.X509FindType.FINDBYSUBJECTNAME" data-throw-if-not-resolved="false" data-raw-source="system.fabric.X509FindType#FINDBYSUBJECTNAME"></xref> - find certificate by subject distinguished name or common name, when subject distinguished name is provided in FindValue, subject name in the certificate must be encoded in ASN encoding due to a restriction in native Windows crypto API. There is no such restriction when common name is provided in FindValue.</p>

    <p></p>
  syntax: public void setFindType(X509FindType findType)
  uid: system.fabric.X509Credentials.setFindType(X509FindType)
- fullName: system.fabric.X509Credentials.setFindValue(Object findValue)
  name: setFindValue(Object findValue)
  nameWithType: X509Credentials.setFindValue(Object findValue)
  parameters:
  - description: <p>The value of security credentials to use to secure the cluster. </p>
    name: findValue
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies the filter value used to search local certificate in certificate store. FindType specifies the type of filter value.</p>

    <p></p>
  syntax: public void setFindValue(Object findValue)
  uid: system.fabric.X509Credentials.setFindValue(Object)
- fullName: system.fabric.X509Credentials.setFindValueSecondary(Object findValueSecondary)
  name: setFindValueSecondary(Object findValueSecondary)
  nameWithType: X509Credentials.setFindValueSecondary(Object findValueSecondary)
  parameters:
  - description: <p>Secondary find value for loading local certificate credential. </p>
    name: findValueSecondary
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the secondary find value for loading local certificate credential.</p>

    <p></p>
  syntax: public void setFindValueSecondary(Object findValueSecondary)
  uid: system.fabric.X509Credentials.setFindValueSecondary(Object)
- fullName: system.fabric.X509Credentials.setProtectionLevel(ProtectionLevel protectionLevel)
  name: setProtectionLevel(ProtectionLevel protectionLevel)
  nameWithType: X509Credentials.setProtectionLevel(ProtectionLevel protectionLevel)
  parameters:
  - description: <p>The protection level of the credential. </p>
    name: protectionLevel
    type: <xref href="system.fabric.ProtectionLevel?alt=system.fabric.ProtectionLevel&text=ProtectionLevel" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets how communication is protected, default value is <xref uid="system.fabric.ProtectionLevel.ENCRYPTANDSIGN" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ProtectionLevel#ENCRYPTANDSIGN"></xref>.</p>

    <p></p>
  syntax: public void setProtectionLevel(ProtectionLevel protectionLevel)
  uid: system.fabric.X509Credentials.setProtectionLevel(ProtectionLevel)
- fullName: system.fabric.X509Credentials.setStoreLocation(X509StoreLocation storeLocation)
  name: setStoreLocation(X509StoreLocation storeLocation)
  nameWithType: X509Credentials.setStoreLocation(X509StoreLocation storeLocation)
  parameters:
  - description: <p>The location of the certificate store. </p>
    name: storeLocation
    type: <xref href="system.fabric.X509StoreLocation?alt=system.fabric.X509StoreLocation&text=X509StoreLocation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the location of the certificate store.</p>

    <p></p>
  syntax: public void setStoreLocation(X509StoreLocation storeLocation)
  uid: system.fabric.X509Credentials.setStoreLocation(X509StoreLocation)
- fullName: system.fabric.X509Credentials.setStoreName(String storeName)
  name: setStoreName(String storeName)
  nameWithType: X509Credentials.setStoreName(String storeName)
  parameters:
  - description: <p>The name of the store where the certificate is stored. </p>
    name: storeName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the name of the store where the certificate is stored.</p>

    <p></p>
  syntax: public void setStoreName(String storeName)
  uid: system.fabric.X509Credentials.setStoreName(String)
nameWithType: X509Credentials
syntax: public class X509Credentials extends SecurityCredentials
type: class
uid: system.fabric.X509Credentials
fullName: system.fabric.X509Credentials
name: X509Credentials
package: system.fabric
summary: <p>Specifies the security credentials that are based upon X.509 certificates which are located in Windows certificate store. </p>
metadata: {}
