### YamlMime:JavaType
uid: "com.microsoft.azure.functions.annotation.TimerTrigger"
fullName: "com.microsoft.azure.functions.annotation.TimerTrigger"
name: "TimerTrigger"
nameWithType: "TimerTrigger"
summary: "The timer trigger lets you run a function on a schedule by specifying a CRON expression for when the function should run."
syntax: "public interface TimerTrigger implements Annotation"
methods:
- uid: "com.microsoft.azure.functions.annotation.TimerTrigger.dataType()"
  fullName: "com.microsoft.azure.functions.annotation.TimerTrigger.dataType()"
  name: "dataType()"
  nameWithType: "TimerTrigger.dataType()"
  summary: "Defines how Functions runtime should treat the parameter value."
  modifiers:
  - "abstract"
  syntax: "public abstract String dataType()"
  desc: "Defines how Functions runtime should treat the parameter value. Possible values are:\n\n *  \"\": get the value as a string, and try to deserialize to actual parameter type like POJO\n *  string: always get the value as a string\n *  binary: get the value as a binary data, and try to deserialize to actual parameter type byte\\[\\]"
  returns:
    description: "The dataType which will be used by the Functions runtime."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.functions.annotation.TimerTrigger.name()"
  fullName: "com.microsoft.azure.functions.annotation.TimerTrigger.name()"
  name: "name()"
  nameWithType: "TimerTrigger.name()"
  summary: "The name of the variable that represents the timer object in function code."
  modifiers:
  - "abstract"
  syntax: "public abstract String name()"
  desc: "The name of the variable that represents the timer object in function code."
  returns:
    description: "The name of the variable that represents the timer object in function code."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.functions.annotation.TimerTrigger.schedule()"
  fullName: "com.microsoft.azure.functions.annotation.TimerTrigger.schedule()"
  name: "schedule()"
  nameWithType: "TimerTrigger.schedule()"
  summary: "A [CRON expression][] in the format `{second} {minute} {hour} {day} {month} {day-of-week}`.\n\n\n[CRON expression]: http://en.wikipedia.org/wiki/Cron#CRON_expression"
  modifiers:
  - "abstract"
  syntax: "public abstract String schedule()"
  desc: "A [CRON expression][] in the format `{second} {minute} {hour} {day} {month} {day-of-week}`.\n\n    | --------------------------------------------- | ------------------ |\n    | Goal                                          | CRON Expression    |\n    | To trigger once every five minutes:           | 0 \\*/5 \\* \\* \\* \\* |\n    | To trigger once at the top of every hour:     | 0 0 \\* \\* \\* \\*    |\n    | To trigger once every two hours:              | 0 0 \\*/2 \\* \\* \\*  |\n    | To trigger once every hour from 9 AM to 5 PM: | 0 0 9-17 \\* \\* \\*  |\n    | To trigger at 9:30 AM every day:              | 0 30 9 \\* \\* \\*    |\n    | To trigger at 9:30 AM every weekday:          | 0 30 9 \\* \\* 1-5   |\n\n\n[CRON expression]: http://en.wikipedia.org/wiki/Cron#CRON_expression"
  returns:
    description: "A string representing a CRON expression that will be used to schedule a function to run."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
desc: "The timer trigger lets you run a function on a schedule by specifying a CRON expression for when the function should run. For more details and examples on how to specify a CRON expression, refer to the <xref uid=\"com.microsoft.azure.functions.annotation.TimerTrigger.schedule()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#schedule()\"></xref> attribute of this annotation.\n\nAn example of using the timer trigger is shown below, where the `keepAlive` function is set to trigger and execute every five minutes:\n\n```java\n@FunctionName(\"keepAlive\")\n public void keepAlive(\n    @TimerTrigger(name = \"keepAliveTrigger\", schedule = \"0 */5 * * * *\") String timerInfo,\n     ExecutionContext context\n ) {\n     // timeInfo is a JSON string, you can deserialize it to an object using your favorite JSON library\n     context.getLogger().info(\"Timer is triggered: \" + timerInfo);\n }\n```"
implements:
- "<xref href=\"java.lang.annotation.Annotation?alt=java.lang.annotation.Annotation&text=Annotation\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.microsoft.azure.functions.annotation"
artifact: com.microsoft.azure.functions:azure-functions-java-library:1.3.1
