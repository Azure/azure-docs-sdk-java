### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.functions.annotation.TimerTrigger
  id: TimerTrigger
  artifact: com.microsoft.azure.functions:azure-functions-java-library:1.3.1
  parent: com.microsoft.azure.functions.annotation
  children:
  - com.microsoft.azure.functions.annotation.TimerTrigger.dataType()
  - com.microsoft.azure.functions.annotation.TimerTrigger.name()
  - com.microsoft.azure.functions.annotation.TimerTrigger.schedule()
  langs:
  - java
  name: TimerTrigger
  nameWithType: TimerTrigger
  fullName: com.microsoft.azure.functions.annotation.TimerTrigger
  type: Interface
  package: com.microsoft.azure.functions.annotation
  summary: >-
    The timer trigger lets you run a function on a schedule by specifying a CRON expression for when the function should run. For more details and examples on how to specify a CRON expression, refer to the <xref uid="com.microsoft.azure.functions.annotation.TimerTrigger.schedule()" data-throw-if-not-resolved="false">#schedule()</xref> attribute of this annotation.


    An example of using the timer trigger is shown below, where the `keepAlive` function is set to trigger and execute every five minutes:


    ```java

    @FunctionName("keepAlive")
     public void keepAlive(
        @TimerTrigger(name = "keepAliveTrigger", schedule = "0 */5 * * * *") String timerInfo,
         ExecutionContext context
     ) {
         // timeInfo is a JSON string, you can deserialize it to an object using your favorite JSON library
         context.getLogger().info("Timer is triggered: " + timerInfo);
     }
    ```
  syntax:
    content: public interface TimerTrigger implements Annotation
  implements:
  - java.lang.annotation.Annotation
- uid: com.microsoft.azure.functions.annotation.TimerTrigger.dataType()
  id: dataType()
  artifact: com.microsoft.azure.functions:azure-functions-java-library:1.3.1
  parent: com.microsoft.azure.functions.annotation.TimerTrigger
  langs:
  - java
  name: dataType()
  nameWithType: TimerTrigger.dataType()
  fullName: com.microsoft.azure.functions.annotation.TimerTrigger.dataType()
  overload: com.microsoft.azure.functions.annotation.TimerTrigger.dataType*
  type: Method
  package: com.microsoft.azure.functions.annotation
  summary: >-
    Defines how Functions runtime should treat the parameter value. Possible values are:

     *  "": get the value as a string, and try to deserialize to actual parameter type like POJO
     *  string: always get the value as a string
     *  binary: get the value as a binary data, and try to deserialize to actual parameter type byte\[\]
  syntax:
    content: public abstract String dataType()
    return:
      type: java.lang.String
      description: The dataType which will be used by the Functions runtime.
- uid: com.microsoft.azure.functions.annotation.TimerTrigger.name()
  id: name()
  artifact: com.microsoft.azure.functions:azure-functions-java-library:1.3.1
  parent: com.microsoft.azure.functions.annotation.TimerTrigger
  langs:
  - java
  name: name()
  nameWithType: TimerTrigger.name()
  fullName: com.microsoft.azure.functions.annotation.TimerTrigger.name()
  overload: com.microsoft.azure.functions.annotation.TimerTrigger.name*
  type: Method
  package: com.microsoft.azure.functions.annotation
  summary: The name of the variable that represents the timer object in function code.
  syntax:
    content: public abstract String name()
    return:
      type: java.lang.String
      description: The name of the variable that represents the timer object in function code.
- uid: com.microsoft.azure.functions.annotation.TimerTrigger.schedule()
  id: schedule()
  artifact: com.microsoft.azure.functions:azure-functions-java-library:1.3.1
  parent: com.microsoft.azure.functions.annotation.TimerTrigger
  langs:
  - java
  name: schedule()
  nameWithType: TimerTrigger.schedule()
  fullName: com.microsoft.azure.functions.annotation.TimerTrigger.schedule()
  overload: com.microsoft.azure.functions.annotation.TimerTrigger.schedule*
  type: Method
  package: com.microsoft.azure.functions.annotation
  summary: >-
    A [CRON expression][] in the format `{second} {minute} {hour} {day} {month} {day-of-week}`.

        | --------------------------------------------- | ------------------ |
        | Goal                                          | CRON Expression    |
        | To trigger once every five minutes:           | 0 \*/5 \* \* \* \* |
        | To trigger once at the top of every hour:     | 0 0 \* \* \* \*    |
        | To trigger once every two hours:              | 0 0 \*/2 \* \* \*  |
        | To trigger once every hour from 9 AM to 5 PM: | 0 0 9-17 \* \* \*  |
        | To trigger at 9:30 AM every day:              | 0 30 9 \* \* \*    |
        | To trigger at 9:30 AM every weekday:          | 0 30 9 \* \* 1-5   |


    [CRON expression]: http://en.wikipedia.org/wiki/Cron#CRON_expression
  syntax:
    content: public abstract String schedule()
    return:
      type: java.lang.String
      description: A string representing a CRON expression that will be used to schedule a function to run.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.functions.annotation.TimerTrigger.name*
  name: name
  nameWithType: TimerTrigger.name
  fullName: com.microsoft.azure.functions.annotation.TimerTrigger.name
  package: com.microsoft.azure.functions.annotation
- uid: com.microsoft.azure.functions.annotation.TimerTrigger.dataType*
  name: dataType
  nameWithType: TimerTrigger.dataType
  fullName: com.microsoft.azure.functions.annotation.TimerTrigger.dataType
  package: com.microsoft.azure.functions.annotation
- uid: com.microsoft.azure.functions.annotation.TimerTrigger.schedule*
  name: schedule
  nameWithType: TimerTrigger.schedule
  fullName: com.microsoft.azure.functions.annotation.TimerTrigger.schedule
  package: com.microsoft.azure.functions.annotation
- uid: java.lang.annotation.Annotation
  name: Annotation
  nameWithType: Annotation
  fullName: java.lang.annotation.Annotation
