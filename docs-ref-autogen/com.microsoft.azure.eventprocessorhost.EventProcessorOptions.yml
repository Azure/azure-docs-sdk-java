### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.EventProcessorOptions()
  name: EventProcessorOptions()
  nameWithType: EventProcessorOptions.EventProcessorOptions()
  syntax: public EventProcessorOptions()
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.EventProcessorOptions()
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.getDefaultOptions()
  name: getDefaultOptions()
  nameWithType: EventProcessorOptions.getDefaultOptions()
  returns:
    type: <xref href="com.microsoft.azure.eventprocessorhost.EventProcessorOptions?alt=com.microsoft.azure.eventprocessorhost.EventProcessorOptions&text=EventProcessorOptions" data-throw-if-not-resolved="False"/>
  syntax: public static EventProcessorOptions getDefaultOptions()
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.getDefaultOptions()
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.getInitialPositionProvider()
  name: getInitialPositionProvider()
  nameWithType: EventProcessorOptions.getInitialPositionProvider()
  returns:
    type: Function&lt;String, <xref href="com.microsoft.azure.eventhubs.EventPosition?alt=com.microsoft.azure.eventhubs.EventPosition&text=EventPosition" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Function<String, EventPosition> getInitialPositionProvider()
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.getInitialPositionProvider()
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.getInvokeProcessorAfterReceiveTimeout()
  name: getInvokeProcessorAfterReceiveTimeout()
  nameWithType: EventProcessorOptions.getInvokeProcessorAfterReceiveTimeout()
  returns:
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  syntax: public Boolean getInvokeProcessorAfterReceiveTimeout()
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.getInvokeProcessorAfterReceiveTimeout()
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.getMaxBatchSize()
  name: getMaxBatchSize()
  nameWithType: EventProcessorOptions.getMaxBatchSize()
  returns:
    description: <p>the maximum maximum number of events that will be passed to one call to IEventProcessor.onEvents </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the maximum number of events that will be passed to one call to IEventProcessor.onEvents</p>

    <p></p>
  syntax: public int getMaxBatchSize()
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.getMaxBatchSize()
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.getPrefetchCount()
  name: getPrefetchCount()
  nameWithType: EventProcessorOptions.getPrefetchCount()
  returns:
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int getPrefetchCount()
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.getPrefetchCount()
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.getReceiverRuntimeMetricEnabled()
  name: getReceiverRuntimeMetricEnabled()
  nameWithType: EventProcessorOptions.getReceiverRuntimeMetricEnabled()
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="boolean"></xref> indicating, whether, the runtime metric of the receiver was enabled </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Knob to enable/disable runtime metric of the receiver. If this is set to true, the first parameter <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.eventprocessorhost.PartitionContext#runtimeInformation"></xref> of <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IEventProcessor#onEvents(com.microsoft.azure.eventprocessorhost.PartitionContext, java.lang.Iterable)"></xref> will be populated. </p>

    <p>Enabling this knob will add 3 additional properties to all raw AMQP events received.</p>

    <p></p>
  syntax: public boolean getReceiverRuntimeMetricEnabled()
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.getReceiverRuntimeMetricEnabled()
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.getReceiveTimeOut()
  name: getReceiveTimeOut()
  nameWithType: EventProcessorOptions.getReceiveTimeOut()
  returns:
    description: <p>the timeout for receive operations </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the timeout for receive operations.</p>

    <p></p>
  syntax: public Duration getReceiveTimeOut()
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.getReceiveTimeOut()
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.setExceptionNotification(Consumer<ExceptionReceivedEventArgs> notificationHandler)
  name: setExceptionNotification(Consumer<ExceptionReceivedEventArgs> notificationHandler)
  nameWithType: EventProcessorOptions.setExceptionNotification(Consumer<ExceptionReceivedEventArgs> notificationHandler)
  parameters:
  - description: <p>Handler which is called when an exception occurs. Set to null to stop handling. </p>
    name: notificationHandler
    type: Consumer&lt;<xref href="com.microsoft.azure.eventprocessorhost.ExceptionReceivedEventArgs?alt=com.microsoft.azure.eventprocessorhost.ExceptionReceivedEventArgs&text=ExceptionReceivedEventArgs" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Sets a handler which receives notification of general exceptions. </p>

    <p>Exceptions which occur while processing events from a particular Event Hub partition are delivered to the onError method of the event processor for that partition. This handler is called on occasions when there is no event processor associated with the throwing activity, or the event processor could not be created. </p>

    <p>The handler is not expected to do anything about the exception. If it is possible to recover, the event processor host instance will recover automatically.</p>

    <p></p>
  syntax: public void setExceptionNotification(Consumer<ExceptionReceivedEventArgs> notificationHandler)
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.setExceptionNotification(Consumer<ExceptionReceivedEventArgs>)
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.setInitialPositionProvider(Function<String, EventPosition> initialPositionProvider)
  name: setInitialPositionProvider(Function<String, EventPosition> initialPositionProvider)
  nameWithType: EventProcessorOptions.setInitialPositionProvider(Function<String, EventPosition> initialPositionProvider)
  parameters:
  - name: initialPositionProvider
    type: Function&lt;String, <xref href="com.microsoft.azure.eventhubs.EventPosition?alt=com.microsoft.azure.eventhubs.EventPosition&text=EventPosition" data-throw-if-not-resolved="False"/>&gt;
  syntax: public void setInitialPositionProvider(Function<String, EventPosition> initialPositionProvider)
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.setInitialPositionProvider(Function<String, EventPosition>)
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.setInvokeProcessorAfterReceiveTimeout(Boolean invokeProcessorAfterReceiveTimeout)
  name: setInvokeProcessorAfterReceiveTimeout(Boolean invokeProcessorAfterReceiveTimeout)
  nameWithType: EventProcessorOptions.setInvokeProcessorAfterReceiveTimeout(Boolean invokeProcessorAfterReceiveTimeout)
  parameters:
  - description: <p>the new value for what to do </p>
    name: invokeProcessorAfterReceiveTimeout
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Changes whether the EventProcessorHost will call IEventProcessor.onEvents() with an empty iterable when a receive timeout occurs (true) or not (false). </p>

    <p>The default is false (no call).</p>

    <p></p>
  syntax: public void setInvokeProcessorAfterReceiveTimeout(Boolean invokeProcessorAfterReceiveTimeout)
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.setInvokeProcessorAfterReceiveTimeout(Boolean)
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.setMaxBatchSize(int maxBatchSize)
  name: setMaxBatchSize(int maxBatchSize)
  nameWithType: EventProcessorOptions.setMaxBatchSize(int maxBatchSize)
  parameters:
  - description: <p>the maximum number of events that will be passed to one call to IEventProcessor.onEvents </p>
    name: maxBatchSize
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the maximum number of events that will be passed to one call to IEventProcessor.onEvents</p>

    <p></p>
  syntax: public void setMaxBatchSize(int maxBatchSize)
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.setMaxBatchSize(int)
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.setPrefetchCount(int prefetchCount)
  name: setPrefetchCount(int prefetchCount)
  nameWithType: EventProcessorOptions.setPrefetchCount(int prefetchCount)
  parameters:
  - name: prefetchCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public void setPrefetchCount(int prefetchCount)
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.setPrefetchCount(int)
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.setReceiverRuntimeMetricEnabled(boolean value)
  name: setReceiverRuntimeMetricEnabled(boolean value)
  nameWithType: EventProcessorOptions.setReceiverRuntimeMetricEnabled(boolean value)
  parameters:
  - description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="boolean"></xref> to indicate, whether, the runtime metric of the receiver should be enabled </p>
    name: value
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Knob to enable/disable runtime metric of the receiver. If this is set to true, the first parameter <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.eventprocessorhost.PartitionContext#runtimeInformation"></xref> of <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IEventProcessor#onEvents(com.microsoft.azure.eventprocessorhost.PartitionContext, java.lang.Iterable)"></xref> will be populated. </p>

    <p>Enabling this knob will add 3 additional properties to all raw AMQP events received.</p>

    <p></p>
  syntax: public void setReceiverRuntimeMetricEnabled(boolean value)
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.setReceiverRuntimeMetricEnabled(boolean)
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.setReceiveTimeOut(Duration receiveTimeOut)
  name: setReceiveTimeOut(Duration receiveTimeOut)
  nameWithType: EventProcessorOptions.setReceiveTimeOut(Duration receiveTimeOut)
  parameters:
  - description: <p>new timeout for receive operations </p>
    name: receiveTimeOut
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the timeout for receive operations.</p>

    <p></p>
  syntax: public void setReceiveTimeOut(Duration receiveTimeOut)
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.setReceiveTimeOut(Duration)
nameWithType: EventProcessorOptions
syntax: public class EventProcessorOptions
type: class
uid: com.microsoft.azure.eventprocessorhost.EventProcessorOptions
fullName: com.microsoft.azure.eventprocessorhost.EventProcessorOptions
name: EventProcessorOptions
package: com.microsoft.azure.eventprocessorhost
metadata: {}
