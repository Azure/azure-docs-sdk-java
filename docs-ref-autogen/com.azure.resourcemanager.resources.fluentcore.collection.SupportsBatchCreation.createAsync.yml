### YamlMime:JavaMember
uid: "com.azure.resourcemanager.resources.fluentcore.collection.SupportsBatchCreation.createAsync*"
fullName: "com.azure.resourcemanager.resources.fluentcore.collection.SupportsBatchCreation<ResourceT>.createAsync"
name: "createAsync"
nameWithType: "SupportsBatchCreation<ResourceT>.createAsync"
members:
- uid: "com.azure.resourcemanager.resources.fluentcore.collection.SupportsBatchCreation.createAsync(com.azure.resourcemanager.resources.fluentcore.model.Creatable<ResourceT>...)"
  fullName: "com.azure.resourcemanager.resources.fluentcore.collection.SupportsBatchCreation<ResourceT>.createAsync(Creatable<ResourceT>[] creatables)"
  name: "createAsync(Creatable<ResourceT>[] creatables)"
  nameWithType: "SupportsBatchCreation<ResourceT>.createAsync(Creatable<ResourceT>[] creatables)"
  summary: "Puts the requests to create a batch of resources into the queue and allow the HTTP client to execute it when system resources are available."
  parameters:
  - description: "the creatables in the batch"
    name: "creatables"
    type: "<xref href=\"com.azure.resourcemanager.resources.fluentcore.model.Creatable?alt=com.azure.resourcemanager.resources.fluentcore.model.Creatable&text=Creatable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"ResourceT?alt=ResourceT&text=ResourceT\" data-throw-if-not-resolved=\"False\" />&gt;[]"
  syntax: "public abstract Flux<ResourceT> createAsync(Creatable<ResourceT>[] creatables)"
  returns:
    description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that emits the found resource asynchronously."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"ResourceT?alt=ResourceT&text=ResourceT\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluentcore.collection.SupportsBatchCreation.createAsync(java.util.List<com.azure.resourcemanager.resources.fluentcore.model.Creatable<ResourceT>>)"
  fullName: "com.azure.resourcemanager.resources.fluentcore.collection.SupportsBatchCreation<ResourceT>.createAsync(List<Creatable<ResourceT>> creatables)"
  name: "createAsync(List<Creatable<ResourceT>> creatables)"
  nameWithType: "SupportsBatchCreation<ResourceT>.createAsync(List<Creatable<ResourceT>> creatables)"
  summary: "Puts the requests to create a batch of resources into the queue and allow the HTTP client to execute it when system resources are available."
  parameters:
  - description: "the list of creatables in the batch"
    name: "creatables"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluentcore.model.Creatable?alt=com.azure.resourcemanager.resources.fluentcore.model.Creatable&text=Creatable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"ResourceT?alt=ResourceT&text=ResourceT\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "public abstract Flux<ResourceT> createAsync(List<Creatable<ResourceT>> creatables)"
  returns:
    description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that emits the found resource asynchronously."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"ResourceT?alt=ResourceT&text=ResourceT\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.resourcemanager.resources.fluentcore.collection"
artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.1.0
