### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.blob.implementation.BlockBlobsImpl"
  id: "BlockBlobsImpl"
  parent: "com.azure.storage.blob.implementation"
  children:
  - "com.azure.storage.blob.implementation.BlockBlobsImpl.BlockBlobsImpl(com.azure.storage.blob.implementation.AzureBlobStorageImpl)"
  - "com.azure.storage.blob.implementation.BlockBlobsImpl.commitBlockListWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlockLookupList,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlockBlobsImpl.commitBlockListWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlockLookupList,java.lang.Integer,byte[],byte[],java.util.Map<java.lang.String,java.lang.String>,java.lang.String,com.azure.storage.blob.models.AccessTier,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlockBlobsImpl.getBlockListWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlockListType,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlockBlobsImpl.getBlockListWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlockListType,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlockBlobsImpl.stageBlockFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,long,java.net.URL,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlockBlobsImpl.stageBlockFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,long,java.net.URL,java.lang.String,byte[],byte[],java.lang.Integer,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlockBlobsImpl.stageBlockWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,long,reactor.core.publisher.Flux<java.nio.ByteBuffer>,byte[],byte[],java.lang.Integer,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlockBlobsImpl.stageBlockWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,long,reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlockBlobsImpl.uploadWithRestResponseAsync(java.lang.String,java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlockBlobsImpl.uploadWithRestResponseAsync(java.lang.String,java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Integer,byte[],java.util.Map<java.lang.String,java.lang.String>,java.lang.String,com.azure.storage.blob.models.AccessTier,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,com.azure.core.util.Context)"
  langs:
  - "java"
  name: "BlockBlobsImpl"
  nameWithType: "BlockBlobsImpl"
  fullName: "com.azure.storage.blob.implementation.BlockBlobsImpl"
  type: "Class"
  package: "com.azure.storage.blob.implementation"
  summary: "An instance of this class provides access to all the operations defined in BlockBlobs."
  syntax:
    content: "public final class BlockBlobsImpl"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.blob.implementation.BlockBlobsImpl.BlockBlobsImpl(com.azure.storage.blob.implementation.AzureBlobStorageImpl)"
  id: "BlockBlobsImpl(com.azure.storage.blob.implementation.AzureBlobStorageImpl)"
  parent: "com.azure.storage.blob.implementation.BlockBlobsImpl"
  langs:
  - "java"
  name: "BlockBlobsImpl(AzureBlobStorageImpl client)"
  nameWithType: "BlockBlobsImpl.BlockBlobsImpl(AzureBlobStorageImpl client)"
  fullName: "com.azure.storage.blob.implementation.BlockBlobsImpl.BlockBlobsImpl(AzureBlobStorageImpl client)"
  overload: "com.azure.storage.blob.implementation.BlockBlobsImpl.BlockBlobsImpl*"
  type: "Constructor"
  package: "com.azure.storage.blob.implementation"
  summary: "Initializes an instance of BlockBlobsImpl."
  syntax:
    content: "public BlockBlobsImpl(AzureBlobStorageImpl client)"
    parameters:
    - id: "client"
      type: "com.azure.storage.blob.implementation.AzureBlobStorageImpl"
      description: "the instance of the service client containing this operation class."
- uid: "com.azure.storage.blob.implementation.BlockBlobsImpl.commitBlockListWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlockLookupList,com.azure.core.util.Context)"
  id: "commitBlockListWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlockLookupList,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlockBlobsImpl"
  langs:
  - "java"
  name: "commitBlockListWithRestResponseAsync(String containerName, String blob, BlockLookupList blocks, Context context)"
  nameWithType: "BlockBlobsImpl.commitBlockListWithRestResponseAsync(String containerName, String blob, BlockLookupList blocks, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlockBlobsImpl.commitBlockListWithRestResponseAsync(String containerName, String blob, BlockLookupList blocks, Context context)"
  overload: "com.azure.storage.blob.implementation.BlockBlobsImpl.commitBlockListWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Commit Block List operation writes a blob by specifying the list of block IDs that make up the blob. In order to be written as part of a blob, a block must have been successfully written to the server in a prior Put Block operation. You can call Put Block List to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together. You can do this by specifying whether to commit a block from the committed block list or from the uncommitted block list, or to commit the most recently uploaded version of the block, whichever list it may belong to."
  syntax:
    content: "public Mono<BlockBlobsCommitBlockListResponse> commitBlockListWithRestResponseAsync(String containerName, String blob, BlockLookupList blocks, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "blocks"
      type: "com.azure.storage.blob.models.BlockLookupList"
      description: "the BlockLookupList value."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlockBlobsCommitBlockListResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlockBlobsImpl.commitBlockListWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlockLookupList,java.lang.Integer,byte[],byte[],java.util.Map<java.lang.String,java.lang.String>,java.lang.String,com.azure.storage.blob.models.AccessTier,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,com.azure.core.util.Context)"
  id: "commitBlockListWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlockLookupList,java.lang.Integer,byte[],byte[],java.util.Map<java.lang.String,java.lang.String>,java.lang.String,com.azure.storage.blob.models.AccessTier,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlockBlobsImpl"
  langs:
  - "java"
  name: "commitBlockListWithRestResponseAsync(String containerName, String blob, BlockLookupList blocks, Integer timeout, byte[] transactionalContentMD5, byte[] transactionalContentCrc64, Map<String,String> metadata, String leaseId, AccessTier tier, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, BlobHttpHeaders blobHttpHeaders, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
  nameWithType: "BlockBlobsImpl.commitBlockListWithRestResponseAsync(String containerName, String blob, BlockLookupList blocks, Integer timeout, byte[] transactionalContentMD5, byte[] transactionalContentCrc64, Map<String,String> metadata, String leaseId, AccessTier tier, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, BlobHttpHeaders blobHttpHeaders, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlockBlobsImpl.commitBlockListWithRestResponseAsync(String containerName, String blob, BlockLookupList blocks, Integer timeout, byte[] transactionalContentMD5, byte[] transactionalContentCrc64, Map<String,String> metadata, String leaseId, AccessTier tier, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, BlobHttpHeaders blobHttpHeaders, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
  overload: "com.azure.storage.blob.implementation.BlockBlobsImpl.commitBlockListWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Commit Block List operation writes a blob by specifying the list of block IDs that make up the blob. In order to be written as part of a blob, a block must have been successfully written to the server in a prior Put Block operation. You can call Put Block List to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together. You can do this by specifying whether to commit a block from the committed block list or from the uncommitted block list, or to commit the most recently uploaded version of the block, whichever list it may belong to."
  syntax:
    content: "public Mono<BlockBlobsCommitBlockListResponse> commitBlockListWithRestResponseAsync(String containerName, String blob, BlockLookupList blocks, Integer timeout, byte[] transactionalContentMD5, byte[] transactionalContentCrc64, Map<String,String> metadata, String leaseId, AccessTier tier, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, BlobHttpHeaders blobHttpHeaders, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "blocks"
      type: "com.azure.storage.blob.models.BlockLookupList"
      description: "the BlockLookupList value."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "transactionalContentMD5"
      type: "byte[]"
      description: "Specify the transactional md5 for the body, to be validated by the service."
    - id: "transactionalContentCrc64"
      type: "byte[]"
      description: "Specify the transactional crc64 for the body, to be validated by the service."
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional. Specifies a user-defined name-value pair associated with the blob. If no name-value pairs are specified, the operation will copy the metadata from the source blob or file to the destination blob. If one or more name-value pairs are specified, the destination blob is created with the specified metadata, and metadata is not copied from the source blob or file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming rules for C# identifiers. See Naming and Referencing Containers, Blobs, and Metadata for more information."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "tier"
      type: "com.azure.storage.blob.models.AccessTier"
      description: "Optional. Indicates the tier to be set on the blob. Possible values include: 'P4', 'P6', 'P10', 'P15', 'P20', 'P30', 'P40', 'P50', 'P60', 'P70', 'P80', 'Hot', 'Cool', 'Archive'."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "blobHttpHeaders"
      type: "com.azure.storage.blob.models.BlobHttpHeaders"
      description: "Additional parameters for the operation."
    - id: "cpkInfo"
      type: "com.azure.storage.blob.models.CpkInfo"
      description: "Additional parameters for the operation."
    - id: "encryptionScope"
      type: "com.azure.storage.blob.implementation.models.EncryptionScope"
      description: "Additional parameters for the operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlockBlobsCommitBlockListResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlockBlobsImpl.getBlockListWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlockListType,com.azure.core.util.Context)"
  id: "getBlockListWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlockListType,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlockBlobsImpl"
  langs:
  - "java"
  name: "getBlockListWithRestResponseAsync(String containerName, String blob, BlockListType listType, Context context)"
  nameWithType: "BlockBlobsImpl.getBlockListWithRestResponseAsync(String containerName, String blob, BlockListType listType, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlockBlobsImpl.getBlockListWithRestResponseAsync(String containerName, String blob, BlockListType listType, Context context)"
  overload: "com.azure.storage.blob.implementation.BlockBlobsImpl.getBlockListWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block blob."
  syntax:
    content: "public Mono<BlockBlobsGetBlockListResponse> getBlockListWithRestResponseAsync(String containerName, String blob, BlockListType listType, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "listType"
      type: "com.azure.storage.blob.models.BlockListType"
      description: "Specifies whether to return the list of committed blocks, the list of uncommitted blocks, or both lists together. Possible values include: 'committed', 'uncommitted', 'all'."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlockBlobsGetBlockListResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlockBlobsImpl.getBlockListWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlockListType,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "getBlockListWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlockListType,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlockBlobsImpl"
  langs:
  - "java"
  name: "getBlockListWithRestResponseAsync(String containerName, String blob, BlockListType listType, String snapshot, Integer timeout, String leaseId, String requestId, Context context)"
  nameWithType: "BlockBlobsImpl.getBlockListWithRestResponseAsync(String containerName, String blob, BlockListType listType, String snapshot, Integer timeout, String leaseId, String requestId, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlockBlobsImpl.getBlockListWithRestResponseAsync(String containerName, String blob, BlockListType listType, String snapshot, Integer timeout, String leaseId, String requestId, Context context)"
  overload: "com.azure.storage.blob.implementation.BlockBlobsImpl.getBlockListWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block blob."
  syntax:
    content: "public Mono<BlockBlobsGetBlockListResponse> getBlockListWithRestResponseAsync(String containerName, String blob, BlockListType listType, String snapshot, Integer timeout, String leaseId, String requestId, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "listType"
      type: "com.azure.storage.blob.models.BlockListType"
      description: "Specifies whether to return the list of committed blocks, the list of uncommitted blocks, or both lists together. Possible values include: 'committed', 'uncommitted', 'all'."
    - id: "snapshot"
      type: "java.lang.String"
      description: "The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlockBlobsGetBlockListResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlockBlobsImpl.stageBlockFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,long,java.net.URL,com.azure.core.util.Context)"
  id: "stageBlockFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,long,java.net.URL,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlockBlobsImpl"
  langs:
  - "java"
  name: "stageBlockFromURLWithRestResponseAsync(String containerName, String blob, String blockId, long contentLength, URL sourceUrl, Context context)"
  nameWithType: "BlockBlobsImpl.stageBlockFromURLWithRestResponseAsync(String containerName, String blob, String blockId, long contentLength, URL sourceUrl, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlockBlobsImpl.stageBlockFromURLWithRestResponseAsync(String containerName, String blob, String blockId, long contentLength, URL sourceUrl, Context context)"
  overload: "com.azure.storage.blob.implementation.BlockBlobsImpl.stageBlockFromURLWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Stage Block operation creates a new block to be committed as part of a blob where the contents are read from a URL."
  syntax:
    content: "public Mono<BlockBlobsStageBlockFromURLResponse> stageBlockFromURLWithRestResponseAsync(String containerName, String blob, String blockId, long contentLength, URL sourceUrl, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "blockId"
      type: "java.lang.String"
      description: "A valid Base64 string value that identifies the block. Prior to encoding, the string must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified for the blockid parameter must be the same size for each block."
    - id: "contentLength"
      type: "long"
      description: "The length of the request."
    - id: "sourceUrl"
      type: "java.net.URL"
      description: "Specify a URL to the copy source."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlockBlobsStageBlockFromURLResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlockBlobsImpl.stageBlockFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,long,java.net.URL,java.lang.String,byte[],byte[],java.lang.Integer,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,com.azure.core.util.Context)"
  id: "stageBlockFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,long,java.net.URL,java.lang.String,byte[],byte[],java.lang.Integer,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlockBlobsImpl"
  langs:
  - "java"
  name: "stageBlockFromURLWithRestResponseAsync(String containerName, String blob, String blockId, long contentLength, URL sourceUrl, String sourceRange, byte[] sourceContentMD5, byte[] sourceContentcrc64, Integer timeout, String leaseId, OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, String requestId, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
  nameWithType: "BlockBlobsImpl.stageBlockFromURLWithRestResponseAsync(String containerName, String blob, String blockId, long contentLength, URL sourceUrl, String sourceRange, byte[] sourceContentMD5, byte[] sourceContentcrc64, Integer timeout, String leaseId, OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, String requestId, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlockBlobsImpl.stageBlockFromURLWithRestResponseAsync(String containerName, String blob, String blockId, long contentLength, URL sourceUrl, String sourceRange, byte[] sourceContentMD5, byte[] sourceContentcrc64, Integer timeout, String leaseId, OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, String requestId, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
  overload: "com.azure.storage.blob.implementation.BlockBlobsImpl.stageBlockFromURLWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Stage Block operation creates a new block to be committed as part of a blob where the contents are read from a URL."
  syntax:
    content: "public Mono<BlockBlobsStageBlockFromURLResponse> stageBlockFromURLWithRestResponseAsync(String containerName, String blob, String blockId, long contentLength, URL sourceUrl, String sourceRange, byte[] sourceContentMD5, byte[] sourceContentcrc64, Integer timeout, String leaseId, OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, String requestId, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "blockId"
      type: "java.lang.String"
      description: "A valid Base64 string value that identifies the block. Prior to encoding, the string must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified for the blockid parameter must be the same size for each block."
    - id: "contentLength"
      type: "long"
      description: "The length of the request."
    - id: "sourceUrl"
      type: "java.net.URL"
      description: "Specify a URL to the copy source."
    - id: "sourceRange"
      type: "java.lang.String"
      description: "Bytes of source data in the specified range."
    - id: "sourceContentMD5"
      type: "byte[]"
      description: "Specify the md5 calculated for the range of bytes that must be read from the copy source."
    - id: "sourceContentcrc64"
      type: "byte[]"
      description: "Specify the crc64 calculated for the range of bytes that must be read from the copy source."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "sourceIfModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "sourceIfUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "sourceIfMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "sourceIfNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "cpkInfo"
      type: "com.azure.storage.blob.models.CpkInfo"
      description: "Additional parameters for the operation."
    - id: "encryptionScope"
      type: "com.azure.storage.blob.implementation.models.EncryptionScope"
      description: "Additional parameters for the operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlockBlobsStageBlockFromURLResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlockBlobsImpl.stageBlockWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,long,reactor.core.publisher.Flux<java.nio.ByteBuffer>,byte[],byte[],java.lang.Integer,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,com.azure.core.util.Context)"
  id: "stageBlockWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,long,reactor.core.publisher.Flux<java.nio.ByteBuffer>,byte[],byte[],java.lang.Integer,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlockBlobsImpl"
  langs:
  - "java"
  name: "stageBlockWithRestResponseAsync(String containerName, String blob, String blockId, long contentLength, Flux<ByteBuffer> body, byte[] transactionalContentMD5, byte[] transactionalContentCrc64, Integer timeout, String leaseId, String requestId, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
  nameWithType: "BlockBlobsImpl.stageBlockWithRestResponseAsync(String containerName, String blob, String blockId, long contentLength, Flux<ByteBuffer> body, byte[] transactionalContentMD5, byte[] transactionalContentCrc64, Integer timeout, String leaseId, String requestId, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlockBlobsImpl.stageBlockWithRestResponseAsync(String containerName, String blob, String blockId, long contentLength, Flux<ByteBuffer> body, byte[] transactionalContentMD5, byte[] transactionalContentCrc64, Integer timeout, String leaseId, String requestId, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
  overload: "com.azure.storage.blob.implementation.BlockBlobsImpl.stageBlockWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Stage Block operation creates a new block to be committed as part of a blob."
  syntax:
    content: "public Mono<BlockBlobsStageBlockResponse> stageBlockWithRestResponseAsync(String containerName, String blob, String blockId, long contentLength, Flux<ByteBuffer> body, byte[] transactionalContentMD5, byte[] transactionalContentCrc64, Integer timeout, String leaseId, String requestId, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "blockId"
      type: "java.lang.String"
      description: "A valid Base64 string value that identifies the block. Prior to encoding, the string must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified for the blockid parameter must be the same size for each block."
    - id: "contentLength"
      type: "long"
      description: "The length of the request."
    - id: "body"
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "Initial data."
    - id: "transactionalContentMD5"
      type: "byte[]"
      description: "Specify the transactional md5 for the body, to be validated by the service."
    - id: "transactionalContentCrc64"
      type: "byte[]"
      description: "Specify the transactional crc64 for the body, to be validated by the service."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "cpkInfo"
      type: "com.azure.storage.blob.models.CpkInfo"
      description: "Additional parameters for the operation."
    - id: "encryptionScope"
      type: "com.azure.storage.blob.implementation.models.EncryptionScope"
      description: "Additional parameters for the operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlockBlobsStageBlockResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlockBlobsImpl.stageBlockWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,long,reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.core.util.Context)"
  id: "stageBlockWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,long,reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlockBlobsImpl"
  langs:
  - "java"
  name: "stageBlockWithRestResponseAsync(String containerName, String blob, String blockId, long contentLength, Flux<ByteBuffer> body, Context context)"
  nameWithType: "BlockBlobsImpl.stageBlockWithRestResponseAsync(String containerName, String blob, String blockId, long contentLength, Flux<ByteBuffer> body, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlockBlobsImpl.stageBlockWithRestResponseAsync(String containerName, String blob, String blockId, long contentLength, Flux<ByteBuffer> body, Context context)"
  overload: "com.azure.storage.blob.implementation.BlockBlobsImpl.stageBlockWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Stage Block operation creates a new block to be committed as part of a blob."
  syntax:
    content: "public Mono<BlockBlobsStageBlockResponse> stageBlockWithRestResponseAsync(String containerName, String blob, String blockId, long contentLength, Flux<ByteBuffer> body, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "blockId"
      type: "java.lang.String"
      description: "A valid Base64 string value that identifies the block. Prior to encoding, the string must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified for the blockid parameter must be the same size for each block."
    - id: "contentLength"
      type: "long"
      description: "The length of the request."
    - id: "body"
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "Initial data."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlockBlobsStageBlockResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlockBlobsImpl.uploadWithRestResponseAsync(java.lang.String,java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.core.util.Context)"
  id: "uploadWithRestResponseAsync(java.lang.String,java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlockBlobsImpl"
  langs:
  - "java"
  name: "uploadWithRestResponseAsync(String containerName, String blob, Flux<ByteBuffer> body, long contentLength, Context context)"
  nameWithType: "BlockBlobsImpl.uploadWithRestResponseAsync(String containerName, String blob, Flux<ByteBuffer> body, long contentLength, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlockBlobsImpl.uploadWithRestResponseAsync(String containerName, String blob, Flux<ByteBuffer> body, long contentLength, Context context)"
  overload: "com.azure.storage.blob.implementation.BlockBlobsImpl.uploadWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Upload Block Blob operation updates the content of an existing block blob. Updating an existing block blob overwrites any existing metadata on the blob. Partial updates are not supported with Put Blob; the content of the existing blob is overwritten with the content of the new blob. To perform a partial update of the content of a block blob, use the Put Block List operation."
  syntax:
    content: "public Mono<BlockBlobsUploadResponse> uploadWithRestResponseAsync(String containerName, String blob, Flux<ByteBuffer> body, long contentLength, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "body"
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "Initial data."
    - id: "contentLength"
      type: "long"
      description: "The length of the request."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlockBlobsUploadResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlockBlobsImpl.uploadWithRestResponseAsync(java.lang.String,java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Integer,byte[],java.util.Map<java.lang.String,java.lang.String>,java.lang.String,com.azure.storage.blob.models.AccessTier,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,com.azure.core.util.Context)"
  id: "uploadWithRestResponseAsync(java.lang.String,java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Integer,byte[],java.util.Map<java.lang.String,java.lang.String>,java.lang.String,com.azure.storage.blob.models.AccessTier,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlockBlobsImpl"
  langs:
  - "java"
  name: "uploadWithRestResponseAsync(String containerName, String blob, Flux<ByteBuffer> body, long contentLength, Integer timeout, byte[] transactionalContentMD5, Map<String,String> metadata, String leaseId, AccessTier tier, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, BlobHttpHeaders blobHttpHeaders, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
  nameWithType: "BlockBlobsImpl.uploadWithRestResponseAsync(String containerName, String blob, Flux<ByteBuffer> body, long contentLength, Integer timeout, byte[] transactionalContentMD5, Map<String,String> metadata, String leaseId, AccessTier tier, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, BlobHttpHeaders blobHttpHeaders, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlockBlobsImpl.uploadWithRestResponseAsync(String containerName, String blob, Flux<ByteBuffer> body, long contentLength, Integer timeout, byte[] transactionalContentMD5, Map<String,String> metadata, String leaseId, AccessTier tier, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, BlobHttpHeaders blobHttpHeaders, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
  overload: "com.azure.storage.blob.implementation.BlockBlobsImpl.uploadWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Upload Block Blob operation updates the content of an existing block blob. Updating an existing block blob overwrites any existing metadata on the blob. Partial updates are not supported with Put Blob; the content of the existing blob is overwritten with the content of the new blob. To perform a partial update of the content of a block blob, use the Put Block List operation."
  syntax:
    content: "public Mono<BlockBlobsUploadResponse> uploadWithRestResponseAsync(String containerName, String blob, Flux<ByteBuffer> body, long contentLength, Integer timeout, byte[] transactionalContentMD5, Map<String,String> metadata, String leaseId, AccessTier tier, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, BlobHttpHeaders blobHttpHeaders, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "body"
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "Initial data."
    - id: "contentLength"
      type: "long"
      description: "The length of the request."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "transactionalContentMD5"
      type: "byte[]"
      description: "Specify the transactional md5 for the body, to be validated by the service."
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional. Specifies a user-defined name-value pair associated with the blob. If no name-value pairs are specified, the operation will copy the metadata from the source blob or file to the destination blob. If one or more name-value pairs are specified, the destination blob is created with the specified metadata, and metadata is not copied from the source blob or file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming rules for C# identifiers. See Naming and Referencing Containers, Blobs, and Metadata for more information."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "tier"
      type: "com.azure.storage.blob.models.AccessTier"
      description: "Optional. Indicates the tier to be set on the blob. Possible values include: 'P4', 'P6', 'P10', 'P15', 'P20', 'P30', 'P40', 'P50', 'P60', 'P70', 'P80', 'Hot', 'Cool', 'Archive'."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "blobHttpHeaders"
      type: "com.azure.storage.blob.models.BlobHttpHeaders"
      description: "Additional parameters for the operation."
    - id: "cpkInfo"
      type: "com.azure.storage.blob.models.CpkInfo"
      description: "Additional parameters for the operation."
    - id: "encryptionScope"
      type: "com.azure.storage.blob.implementation.models.EncryptionScope"
      description: "Additional parameters for the operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlockBlobsUploadResponse>"
      description: "a Mono which performs the network request upon subscription."
references:
- uid: "com.azure.storage.blob.implementation.AzureBlobStorageImpl"
  name: "AzureBlobStorageImpl"
  nameWithType: "AzureBlobStorageImpl"
  fullName: "com.azure.storage.blob.implementation.AzureBlobStorageImpl"
- uid: "com.azure.storage.blob.implementation.BlockBlobsImpl.BlockBlobsImpl*"
  name: "BlockBlobsImpl"
  nameWithType: "BlockBlobsImpl.BlockBlobsImpl"
  fullName: "com.azure.storage.blob.implementation.BlockBlobsImpl.BlockBlobsImpl"
  package: "com.azure.storage.blob.implementation"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "java.nio.ByteBuffer"
    name: "ByteBuffer"
    fullName: "java.nio.ByteBuffer"
  - name: ">"
    fullName: ">"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlockBlobsUploadResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlockBlobsUploadResponse"
    name: "BlockBlobsUploadResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlockBlobsUploadResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlockBlobsImpl.uploadWithRestResponseAsync*"
  name: "uploadWithRestResponseAsync"
  nameWithType: "BlockBlobsImpl.uploadWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlockBlobsImpl.uploadWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "java.util.Map<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.models.AccessTier"
  name: "AccessTier"
  nameWithType: "AccessTier"
  fullName: "com.azure.storage.blob.models.AccessTier"
- uid: "java.time.OffsetDateTime"
  spec.java:
  - uid: "java.time.OffsetDateTime"
    name: "OffsetDateTime"
    fullName: "java.time.OffsetDateTime"
- uid: "com.azure.storage.blob.models.BlobHttpHeaders"
  name: "BlobHttpHeaders"
  nameWithType: "BlobHttpHeaders"
  fullName: "com.azure.storage.blob.models.BlobHttpHeaders"
- uid: "com.azure.storage.blob.models.CpkInfo"
  name: "CpkInfo"
  nameWithType: "CpkInfo"
  fullName: "com.azure.storage.blob.models.CpkInfo"
- uid: "com.azure.storage.blob.implementation.models.EncryptionScope"
  name: "EncryptionScope"
  nameWithType: "EncryptionScope"
  fullName: "com.azure.storage.blob.implementation.models.EncryptionScope"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlockBlobsStageBlockResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlockBlobsStageBlockResponse"
    name: "BlockBlobsStageBlockResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlockBlobsStageBlockResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlockBlobsImpl.stageBlockWithRestResponseAsync*"
  name: "stageBlockWithRestResponseAsync"
  nameWithType: "BlockBlobsImpl.stageBlockWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlockBlobsImpl.stageBlockWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "java.net.URL"
  spec.java:
  - uid: "java.net.URL"
    name: "URL"
    fullName: "java.net.URL"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlockBlobsStageBlockFromURLResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlockBlobsStageBlockFromURLResponse"
    name: "BlockBlobsStageBlockFromURLResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlockBlobsStageBlockFromURLResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlockBlobsImpl.stageBlockFromURLWithRestResponseAsync*"
  name: "stageBlockFromURLWithRestResponseAsync"
  nameWithType: "BlockBlobsImpl.stageBlockFromURLWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlockBlobsImpl.stageBlockFromURLWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "com.azure.storage.blob.models.BlockLookupList"
  name: "BlockLookupList"
  nameWithType: "BlockLookupList"
  fullName: "com.azure.storage.blob.models.BlockLookupList"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlockBlobsCommitBlockListResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlockBlobsCommitBlockListResponse"
    name: "BlockBlobsCommitBlockListResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlockBlobsCommitBlockListResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlockBlobsImpl.commitBlockListWithRestResponseAsync*"
  name: "commitBlockListWithRestResponseAsync"
  nameWithType: "BlockBlobsImpl.commitBlockListWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlockBlobsImpl.commitBlockListWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "com.azure.storage.blob.models.BlockListType"
  name: "BlockListType"
  nameWithType: "BlockListType"
  fullName: "com.azure.storage.blob.models.BlockListType"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlockBlobsGetBlockListResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlockBlobsGetBlockListResponse"
    name: "BlockBlobsGetBlockListResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlockBlobsGetBlockListResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlockBlobsImpl.getBlockListWithRestResponseAsync*"
  name: "getBlockListWithRestResponseAsync"
  nameWithType: "BlockBlobsImpl.getBlockListWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlockBlobsImpl.getBlockListWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.storage.blob.implementation.BlockBlobsImpl.BlockBlobsService"
  name: "BlockBlobsImpl.BlockBlobsService"
  nameWithType: "BlockBlobsImpl.BlockBlobsService"
  fullName: "com.azure.storage.blob.implementation.BlockBlobsImpl.BlockBlobsService"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"
- uid: "java.nio.ByteBuffer"
  name: "ByteBuffer"
  nameWithType: "ByteBuffer"
  fullName: "java.nio.ByteBuffer"
- uid: "com.azure.storage.blob.implementation.models.BlockBlobsUploadResponse"
  name: "BlockBlobsUploadResponse"
  nameWithType: "BlockBlobsUploadResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlockBlobsUploadResponse"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
- uid: "com.azure.storage.blob.implementation.models.BlockBlobsStageBlockResponse"
  name: "BlockBlobsStageBlockResponse"
  nameWithType: "BlockBlobsStageBlockResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlockBlobsStageBlockResponse"
- uid: "com.azure.storage.blob.implementation.models.BlockBlobsStageBlockFromURLResponse"
  name: "BlockBlobsStageBlockFromURLResponse"
  nameWithType: "BlockBlobsStageBlockFromURLResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlockBlobsStageBlockFromURLResponse"
- uid: "com.azure.storage.blob.implementation.models.BlockBlobsCommitBlockListResponse"
  name: "BlockBlobsCommitBlockListResponse"
  nameWithType: "BlockBlobsCommitBlockListResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlockBlobsCommitBlockListResponse"
- uid: "com.azure.storage.blob.implementation.models.BlockBlobsGetBlockListResponse"
  name: "BlockBlobsGetBlockListResponse"
  nameWithType: "BlockBlobsGetBlockListResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlockBlobsGetBlockListResponse"
