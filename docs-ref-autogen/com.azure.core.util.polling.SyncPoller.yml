### YamlMime:ManagedReference
items:
- uid: "com.azure.core.util.polling.SyncPoller"
  id: "SyncPoller"
  parent: "com.azure.core.util.polling"
  children:
  - "com.azure.core.util.polling.SyncPoller.cancelOperation()"
  - "com.azure.core.util.polling.SyncPoller.getFinalResult()"
  - "com.azure.core.util.polling.SyncPoller.poll()"
  - "com.azure.core.util.polling.SyncPoller.waitForCompletion()"
  - "com.azure.core.util.polling.SyncPoller.waitForCompletion(java.time.Duration)"
  - "com.azure.core.util.polling.SyncPoller.waitUntil(com.azure.core.util.polling.LongRunningOperationStatus)"
  - "com.azure.core.util.polling.SyncPoller.waitUntil(java.time.Duration,com.azure.core.util.polling.LongRunningOperationStatus)"
  langs:
  - "java"
  name: "SyncPoller<T,U>"
  nameWithType: "SyncPoller<T,U>"
  fullName: "com.azure.core.util.polling.SyncPoller<T,U>"
  type: "Interface"
  package: "com.azure.core.util.polling"
  summary: "A type that offers API that simplifies the task of executing long-running operations against an Azure service.\n\nIt provides the following functionality:\n\n *  Querying the current state of the long-running operation.\n *  Requesting cancellation of long-running operation, if supported by the service.\n *  Fetching final result of long-running operation, if supported by the service.\n *  Wait for long-running operation to complete, with optional timeout.\n *  Wait for long-running operation to reach a specific state."
  syntax:
    content: "public interface SyncPoller<T,U>"
    typeParameters:
    - id: "T"
    - id: "U"
- uid: "com.azure.core.util.polling.SyncPoller.cancelOperation()"
  id: "cancelOperation()"
  parent: "com.azure.core.util.polling.SyncPoller"
  langs:
  - "java"
  name: "cancelOperation()"
  nameWithType: "SyncPoller<T,U>.cancelOperation()"
  fullName: "com.azure.core.util.polling.SyncPoller<T,U>.cancelOperation()"
  overload: "com.azure.core.util.polling.SyncPoller.cancelOperation*"
  type: "Method"
  package: "com.azure.core.util.polling"
  summary: "cancels the remote long-running operation if cancellation is supported by the service."
  syntax:
    content: "public abstract void cancelOperation()"
- uid: "com.azure.core.util.polling.SyncPoller.getFinalResult()"
  id: "getFinalResult()"
  parent: "com.azure.core.util.polling.SyncPoller"
  langs:
  - "java"
  name: "getFinalResult()"
  nameWithType: "SyncPoller<T,U>.getFinalResult()"
  fullName: "com.azure.core.util.polling.SyncPoller<T,U>.getFinalResult()"
  overload: "com.azure.core.util.polling.SyncPoller.getFinalResult*"
  type: "Method"
  package: "com.azure.core.util.polling"
  summary: "Retrieve the final result of the long running operation."
  syntax:
    content: "public abstract U getFinalResult()"
    return:
      type: "U"
      description: "the final result of the long-running operation if there is one."
- uid: "com.azure.core.util.polling.SyncPoller.poll()"
  id: "poll()"
  parent: "com.azure.core.util.polling.SyncPoller"
  langs:
  - "java"
  name: "poll()"
  nameWithType: "SyncPoller<T,U>.poll()"
  fullName: "com.azure.core.util.polling.SyncPoller<T,U>.poll()"
  overload: "com.azure.core.util.polling.SyncPoller.poll*"
  type: "Method"
  package: "com.azure.core.util.polling"
  summary: "Poll once and return the poll response received."
  syntax:
    content: "public abstract PollResponse<T> poll()"
    return:
      type: "com.azure.core.util.polling.PollResponse<T>"
      description: "the poll response"
- uid: "com.azure.core.util.polling.SyncPoller.waitForCompletion()"
  id: "waitForCompletion()"
  parent: "com.azure.core.util.polling.SyncPoller"
  langs:
  - "java"
  name: "waitForCompletion()"
  nameWithType: "SyncPoller<T,U>.waitForCompletion()"
  fullName: "com.azure.core.util.polling.SyncPoller<T,U>.waitForCompletion()"
  overload: "com.azure.core.util.polling.SyncPoller.waitForCompletion*"
  type: "Method"
  package: "com.azure.core.util.polling"
  summary: "Wait for polling to complete. The polling is considered complete based on status defined in <xref uid=\"com.azure.core.util.polling.LongRunningOperationStatus\" data-throw-if-not-resolved=\"false\">LongRunningOperationStatus</xref>."
  syntax:
    content: "public abstract PollResponse<T> waitForCompletion()"
    return:
      type: "com.azure.core.util.polling.PollResponse<T>"
      description: "the final poll response"
- uid: "com.azure.core.util.polling.SyncPoller.waitForCompletion(java.time.Duration)"
  id: "waitForCompletion(java.time.Duration)"
  parent: "com.azure.core.util.polling.SyncPoller"
  langs:
  - "java"
  name: "waitForCompletion(Duration timeout)"
  nameWithType: "SyncPoller<T,U>.waitForCompletion(Duration timeout)"
  fullName: "com.azure.core.util.polling.SyncPoller<T,U>.waitForCompletion(Duration timeout)"
  overload: "com.azure.core.util.polling.SyncPoller.waitForCompletion*"
  type: "Method"
  package: "com.azure.core.util.polling"
  summary: "Wait for polling to complete with a timeout. The polling is considered complete based on status defined in <xref uid=\"com.azure.core.util.polling.LongRunningOperationStatus\" data-throw-if-not-resolved=\"false\">LongRunningOperationStatus</xref>."
  syntax:
    content: "public abstract PollResponse<T> waitForCompletion(Duration timeout)"
    parameters:
    - id: "timeout"
      type: "java.time.Duration"
      description: "the duration to waits for polling completion."
    return:
      type: "com.azure.core.util.polling.PollResponse<T>"
      description: "the final poll response."
- uid: "com.azure.core.util.polling.SyncPoller.waitUntil(com.azure.core.util.polling.LongRunningOperationStatus)"
  id: "waitUntil(com.azure.core.util.polling.LongRunningOperationStatus)"
  parent: "com.azure.core.util.polling.SyncPoller"
  langs:
  - "java"
  name: "waitUntil(LongRunningOperationStatus statusToWaitFor)"
  nameWithType: "SyncPoller<T,U>.waitUntil(LongRunningOperationStatus statusToWaitFor)"
  fullName: "com.azure.core.util.polling.SyncPoller<T,U>.waitUntil(LongRunningOperationStatus statusToWaitFor)"
  overload: "com.azure.core.util.polling.SyncPoller.waitUntil*"
  type: "Method"
  package: "com.azure.core.util.polling"
  summary: "Wait for the given <xref uid=\"com.azure.core.util.polling.LongRunningOperationStatus\" data-throw-if-not-resolved=\"false\">LongRunningOperationStatus</xref> to receive."
  syntax:
    content: "public abstract PollResponse<T> waitUntil(LongRunningOperationStatus statusToWaitFor)"
    parameters:
    - id: "statusToWaitFor"
      type: "com.azure.core.util.polling.LongRunningOperationStatus"
      description: "the desired <xref uid=\"com.azure.core.util.polling.LongRunningOperationStatus\" data-throw-if-not-resolved=\"false\">LongRunningOperationStatus</xref> to block for."
    return:
      type: "com.azure.core.util.polling.PollResponse<T>"
      description: "<xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\">PollResponse</xref> whose <xref uid=\"com.azure.core.util.polling.PollResponse.getStatus()\" data-throw-if-not-resolved=\"false\">PollResponse#getStatus()</xref> matches <code>statusToWaitFor</code>."
- uid: "com.azure.core.util.polling.SyncPoller.waitUntil(java.time.Duration,com.azure.core.util.polling.LongRunningOperationStatus)"
  id: "waitUntil(java.time.Duration,com.azure.core.util.polling.LongRunningOperationStatus)"
  parent: "com.azure.core.util.polling.SyncPoller"
  langs:
  - "java"
  name: "waitUntil(Duration timeout, LongRunningOperationStatus statusToWaitFor)"
  nameWithType: "SyncPoller<T,U>.waitUntil(Duration timeout, LongRunningOperationStatus statusToWaitFor)"
  fullName: "com.azure.core.util.polling.SyncPoller<T,U>.waitUntil(Duration timeout, LongRunningOperationStatus statusToWaitFor)"
  overload: "com.azure.core.util.polling.SyncPoller.waitUntil*"
  type: "Method"
  package: "com.azure.core.util.polling"
  summary: "Wait for the given <xref uid=\"com.azure.core.util.polling.LongRunningOperationStatus\" data-throw-if-not-resolved=\"false\">LongRunningOperationStatus</xref>."
  syntax:
    content: "public abstract PollResponse<T> waitUntil(Duration timeout, LongRunningOperationStatus statusToWaitFor)"
    parameters:
    - id: "timeout"
      type: "java.time.Duration"
      description: "the duration to waits for the polling."
    - id: "statusToWaitFor"
      type: "com.azure.core.util.polling.LongRunningOperationStatus"
      description: "the desired <xref uid=\"com.azure.core.util.polling.LongRunningOperationStatus\" data-throw-if-not-resolved=\"false\">LongRunningOperationStatus</xref> to block for."
    return:
      type: "com.azure.core.util.polling.PollResponse<T>"
      description: "<xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\">PollResponse</xref> whose <xref uid=\"com.azure.core.util.polling.PollResponse.getStatus()\" data-throw-if-not-resolved=\"false\">PollResponse#getStatus()</xref> matches <code>statusToWaitFor</code>."
references:
- uid: "com.azure.core.util.polling.PollResponse<T>"
  spec.java:
  - uid: "com.azure.core.util.polling.PollResponse"
    name: "PollResponse"
    fullName: "com.azure.core.util.polling.PollResponse"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.util.polling.SyncPoller.poll*"
  name: "poll"
  nameWithType: "SyncPoller<T,U>.poll"
  fullName: "com.azure.core.util.polling.SyncPoller<T,U>.poll"
  package: "com.azure.core.util.polling"
- uid: "com.azure.core.util.polling.SyncPoller.waitForCompletion*"
  name: "waitForCompletion"
  nameWithType: "SyncPoller<T,U>.waitForCompletion"
  fullName: "com.azure.core.util.polling.SyncPoller<T,U>.waitForCompletion"
  package: "com.azure.core.util.polling"
- uid: "java.time.Duration"
  spec.java:
  - uid: "java.time.Duration"
    name: "Duration"
    fullName: "java.time.Duration"
- uid: "com.azure.core.util.polling.LongRunningOperationStatus"
  name: "LongRunningOperationStatus"
  nameWithType: "LongRunningOperationStatus"
  fullName: "com.azure.core.util.polling.LongRunningOperationStatus"
- uid: "com.azure.core.util.polling.SyncPoller.waitUntil*"
  name: "waitUntil"
  nameWithType: "SyncPoller<T,U>.waitUntil"
  fullName: "com.azure.core.util.polling.SyncPoller<T,U>.waitUntil"
  package: "com.azure.core.util.polling"
- uid: "U"
  spec.java:
  - uid: "U"
    name: "U"
    fullName: "U"
- uid: "com.azure.core.util.polling.SyncPoller.getFinalResult*"
  name: "getFinalResult"
  nameWithType: "SyncPoller<T,U>.getFinalResult"
  fullName: "com.azure.core.util.polling.SyncPoller<T,U>.getFinalResult"
  package: "com.azure.core.util.polling"
- uid: "com.azure.core.util.polling.SyncPoller.cancelOperation*"
  name: "cancelOperation"
  nameWithType: "SyncPoller<T,U>.cancelOperation"
  fullName: "com.azure.core.util.polling.SyncPoller<T,U>.cancelOperation"
  package: "com.azure.core.util.polling"
- uid: "T"
  name: "T"
  nameWithType: "T"
  fullName: "T"
- uid: "com.azure.core.util.polling.PollResponse"
  name: "PollResponse"
  nameWithType: "PollResponse"
  fullName: "com.azure.core.util.polling.PollResponse"
