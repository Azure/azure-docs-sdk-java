### YamlMime:ManagedReference
items:
- uid: com.microsoft.applicationinsights.extensibility
  id: extensibility
  children:
  - com.microsoft.applicationinsights.extensibility.ContextInitializer
  - com.microsoft.applicationinsights.extensibility.PerformanceCountersCollectionPlugin
  - com.microsoft.applicationinsights.extensibility.PerformanceCountersFactory
  - com.microsoft.applicationinsights.extensibility.TelemetryInitializer
  - com.microsoft.applicationinsights.extensibility.TelemetryModule
  - com.microsoft.applicationinsights.extensibility.TelemetryProcessor
  href: com.microsoft.applicationinsights.extensibility.yml
  langs:
  - java
  name: com.microsoft.applicationinsights.extensibility
  nameWithType: com.microsoft.applicationinsights.extensibility
  fullName: com.microsoft.applicationinsights.extensibility
  type: Namespace
  source:
    remote:
      path: '[generated]'
    path: '[generated]'
  syntax:
    content: package com.microsoft.applicationinsights.extensibility
references:
- uid: com.microsoft.applicationinsights.extensibility.context
  href: com.microsoft.applicationinsights.extensibility.context.yml
  name: com.microsoft.applicationinsights.extensibility.context
  nameWithType: com.microsoft.applicationinsights.extensibility.context
  fullName: com.microsoft.applicationinsights.extensibility.context
  type: Namespace
  syntax:
    content: package com.microsoft.applicationinsights.extensibility.context
- uid: com.microsoft.applicationinsights.extensibility.initializer
  href: com.microsoft.applicationinsights.extensibility.initializer.yml
  name: com.microsoft.applicationinsights.extensibility.initializer
  nameWithType: com.microsoft.applicationinsights.extensibility.initializer
  fullName: com.microsoft.applicationinsights.extensibility.initializer
  type: Namespace
  syntax:
    content: package com.microsoft.applicationinsights.extensibility.initializer
- uid: com.microsoft.applicationinsights.extensibility.ContextInitializer
  parent: com.microsoft.applicationinsights.extensibility
  href: com.microsoft.applicationinsights.extensibility.ContextInitializer.yml
  name: ContextInitializer
  nameWithType: ContextInitializer
  fullName: com.microsoft.applicationinsights.extensibility.ContextInitializer
  type: Interface
  summary: "<p>Represents an object that implements supporting logic for TelemetryContext. <xref uid=\"com.microsoft.applicationinsights.telemetry.TelemetryContext\" data-throw-if-not-resolved=\"false\">com.microsoft.applicationinsights.telemetry.TelemetryContext</xref></p>"
  syntax:
    content: public interface ContextInitializer
- uid: com.microsoft.applicationinsights.extensibility.PerformanceCountersCollectionPlugin
  parent: com.microsoft.applicationinsights.extensibility
  href: com.microsoft.applicationinsights.extensibility.PerformanceCountersCollectionPlugin.yml
  name: PerformanceCountersCollectionPlugin
  nameWithType: PerformanceCountersCollectionPlugin
  fullName: com.microsoft.applicationinsights.extensibility.PerformanceCountersCollectionPlugin
  type: Interface
  summary: "<p>Created by gupele on 9/13/2016. </p>"
  syntax:
    content: public interface PerformanceCountersCollectionPlugin
- uid: com.microsoft.applicationinsights.extensibility.PerformanceCountersFactory
  parent: com.microsoft.applicationinsights.extensibility
  href: com.microsoft.applicationinsights.extensibility.PerformanceCountersFactory.yml
  name: PerformanceCountersFactory
  nameWithType: PerformanceCountersFactory
  fullName: com.microsoft.applicationinsights.extensibility.PerformanceCountersFactory
  type: Interface
  summary: "<p>Defines the interface that concrete factories should follow. The major method is the one that will be able create the needed Performance Counters.</p>\r\n<p>Created by gupele on 3/3/2015. </p>"
  syntax:
    content: public interface PerformanceCountersFactory
- uid: com.microsoft.applicationinsights.extensibility.TelemetryInitializer
  parent: com.microsoft.applicationinsights.extensibility
  href: com.microsoft.applicationinsights.extensibility.TelemetryInitializer.yml
  name: TelemetryInitializer
  nameWithType: TelemetryInitializer
  fullName: com.microsoft.applicationinsights.extensibility.TelemetryInitializer
  type: Interface
  summary: "<p>Interface for telemetry intitializers </p>"
  syntax:
    content: public interface TelemetryInitializer
- uid: com.microsoft.applicationinsights.extensibility.TelemetryModule
  parent: com.microsoft.applicationinsights.extensibility
  href: com.microsoft.applicationinsights.extensibility.TelemetryModule.yml
  name: TelemetryModule
  nameWithType: TelemetryModule
  fullName: com.microsoft.applicationinsights.extensibility.TelemetryModule
  type: Interface
  summary: "<p>Interface for telemetry modules. </p>"
  syntax:
    content: public interface TelemetryModule
- uid: com.microsoft.applicationinsights.extensibility.TelemetryProcessor
  parent: com.microsoft.applicationinsights.extensibility
  href: com.microsoft.applicationinsights.extensibility.TelemetryProcessor.yml
  name: TelemetryProcessor
  nameWithType: TelemetryProcessor
  fullName: com.microsoft.applicationinsights.extensibility.TelemetryProcessor
  type: Interface
  summary: "<p>The method gets a <xref uid=\"\" data-throw-if-not-resolved=\"false\">Telemetry</xref> instance that is ready to be sent. This is your chance to approve or deny it. Returning 'false' means that the Telemetry will not be sent while 'true' means you approve it.</p>\r\n<p>The Telemetry might go through other filters though, that might deny its sending.</p>\r\n<p>To enable this processor you need to add it in the ApplicationInsights.xml like this:</p>\r\n<p>\r\n  <pre>\r\n    <code>&lt;TelemetryProcessors&gt;\r\n        &lt;CustomProcessors&gt;\r\n            &lt;Processor type=\"full.path.to.Filter\"&gt;\r\n                &lt;Add name=\"Property\" value=\"stringValue\"/&gt;\r\n            &lt;/Processor&gt;\r\n        &lt;/CustomProcessors&gt;\r\n    &lt;/TelemetryProcessors&gt;\r\n    </code> \r\n*</pre>\r\n</p>\r\n<p>Note that the class defines a property named 'Property' which is configured too. Every property that you wish to configure needs to have a 'setX' public method like 'setProperty' in this example <b>Exceptions thrown from the 'setX' methods will be caught by the framework that will ignore the filter</b></p>\r\n<p>Created by gupele on 7/26/2016. </p>"
  syntax:
    content: public interface TelemetryProcessor
