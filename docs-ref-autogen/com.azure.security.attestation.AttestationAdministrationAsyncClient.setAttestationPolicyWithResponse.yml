### YamlMime:JavaMember
uid: "com.azure.security.attestation.AttestationAdministrationAsyncClient.setAttestationPolicyWithResponse*"
fullName: "com.azure.security.attestation.AttestationAdministrationAsyncClient.setAttestationPolicyWithResponse"
name: "setAttestationPolicyWithResponse"
nameWithType: "AttestationAdministrationAsyncClient.setAttestationPolicyWithResponse"
members:
- uid: "com.azure.security.attestation.AttestationAdministrationAsyncClient.setAttestationPolicyWithResponse(com.azure.security.attestation.models.AttestationType,com.azure.security.attestation.models.AttestationPolicySetOptions)"
  fullName: "com.azure.security.attestation.AttestationAdministrationAsyncClient.setAttestationPolicyWithResponse(AttestationType attestationType, AttestationPolicySetOptions options)"
  name: "setAttestationPolicyWithResponse(AttestationType attestationType, AttestationPolicySetOptions options)"
  nameWithType: "AttestationAdministrationAsyncClient.setAttestationPolicyWithResponse(AttestationType attestationType, AttestationPolicySetOptions options)"
  summary: "Sets the current policy for an attestation type. Setting the attestation requires that the caller provide an <xref uid=\"com.azure.security.attestation.models.AttestationPolicySetOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationPolicySetOptions\"></xref> object which provides the options for setting the policy. There are two major components to a setPolicy request:\n\n *  The policy to set\n *  A signing key used to sign the policy sent to the service (OPTIONAL)\n\nOn Isolated mode attestation instances, the signing key MUST include one of the configured policy signing certificates.\n\n```java\nMono<AttestationResponse<PolicyResult>> resultWithResponseMono = client.setAttestationPolicyWithResponse(\n     AttestationType.OPEN_ENCLAVE, new AttestationPolicySetOptions()\n         .setAttestationPolicy(policyToSet)\n         .setAttestationSigner(new AttestationSigningKey(certificate, privateKey)));\n resultWithResponseMono.subscribe(response -> {\n     // Retrieve the token returned by the service from the response object and dump the issuer of\n     // that token.\n     System.out.printf(\"Response token issuer: %s\\n\", response.getToken().getIssuer());\n });\n```"
  parameters:
  - description: "Specifies the trusted execution environment to be used to validate the evidence."
    name: "attestationType"
    type: "<xref href=\"com.azure.security.attestation.models.AttestationType?alt=com.azure.security.attestation.models.AttestationType&text=AttestationType\" data-throw-if-not-resolved=\"False\" />"
  - description: "Options for the setPolicy operation."
    name: "options"
    type: "<xref href=\"com.azure.security.attestation.models.AttestationPolicySetOptions?alt=com.azure.security.attestation.models.AttestationPolicySetOptions&text=AttestationPolicySetOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AttestationResponse<PolicyResult>> setAttestationPolicyWithResponse(AttestationType attestationType, AttestationPolicySetOptions options)"
  returns:
    description: "the response to an attestation policy operation."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.attestation.models.AttestationResponse?alt=com.azure.security.attestation.models.AttestationResponse&text=AttestationResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.attestation.models.PolicyResult?alt=com.azure.security.attestation.models.PolicyResult&text=PolicyResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.security.attestation"
artifact: com.azure:azure-security-attestation:1.1.0
