### YamlMime:JavaType
constructors:
- microsoft.servicefabric.services.remoting.builder.ProxyBase.ProxyBase()
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- microsoft.servicefabric.services.remoting.builder.ProxyBase.continueWith(CompletableFuture<Object>)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.continueWithResult(int,int,CompletableFuture<Object>)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.createRequestMessageBody(Object)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.deserializeMessage(byte [])
- microsoft.servicefabric.services.remoting.builder.ProxyBase.getResponseMessageBodyValue(Object)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.getReturnValue(int,int,Object)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.invoke(int,int,byte [])
- microsoft.servicefabric.services.remoting.builder.ProxyBase.invoke(int,int,Object)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.invokeAsync(int,int,byte [],CancellationToken)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.invokeAsync(int,int,Object,CancellationToken)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.serializeMessage(Object)
nameWithType: ProxyBase
syntax: public class ProxyBase
type: class
uid: microsoft.servicefabric.services.remoting.builder.ProxyBase
fullName: microsoft.servicefabric.services.remoting.builder.ProxyBase
name: ProxyBase
package: microsoft.servicefabric.services.remoting.builder
summary: <p>The base class used by remoting code generator to generate the proxy for the remoted interfaces. </p>
metadata: {}
