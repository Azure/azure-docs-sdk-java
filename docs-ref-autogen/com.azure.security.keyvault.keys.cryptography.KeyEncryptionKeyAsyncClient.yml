### YamlMime:ManagedReference
items:
- uid: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient
  id: KeyEncryptionKeyAsyncClient
  artifact: com.azure:azure-security-keyvault-keys:4.1.3
  parent: com.azure.security.keyvault.keys.cryptography
  children:
  - com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.getKeyId()
  - com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.unwrapKey(java.lang.String,byte[])
  - com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.wrapKey(java.lang.String,byte[])
  langs:
  - java
  name: KeyEncryptionKeyAsyncClient
  nameWithType: KeyEncryptionKeyAsyncClient
  fullName: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient
  type: Class
  package: com.azure.security.keyvault.keys.cryptography
  summary: A key client which is used to asynchronously encrypt, or wrap, another key.
  syntax:
    content: public final class KeyEncryptionKeyAsyncClient extends CryptographyAsyncClient implements AsyncKeyEncryptionKey
  inheritance:
  - java.lang.Object
  - com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient
  implements:
  - com.azure.core.cryptography.AsyncKeyEncryptionKey
  inheritedMembers:
  - com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])
  - com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])
  - com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])
  - com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.signData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])
  - com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])
  - com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])
  - com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verifyData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])
  - com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.KeyEncryptionKeyAsyncClient(java.lang.String,com.azure.core.http.HttpPipeline,com.azure.security.keyvault.keys.cryptography.CryptographyServiceVersion)
  id: KeyEncryptionKeyAsyncClient(java.lang.String,com.azure.core.http.HttpPipeline,com.azure.security.keyvault.keys.cryptography.CryptographyServiceVersion)
  artifact: com.azure:azure-security-keyvault-keys:4.1.3
  parent: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient
  langs:
  - java
  name: KeyEncryptionKeyAsyncClient(String keyId, HttpPipeline pipeline, CryptographyServiceVersion version)
  nameWithType: KeyEncryptionKeyAsyncClient.KeyEncryptionKeyAsyncClient(String keyId, HttpPipeline pipeline, CryptographyServiceVersion version)
  fullName: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.KeyEncryptionKeyAsyncClient(String keyId, HttpPipeline pipeline, CryptographyServiceVersion version)
  overload: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.KeyEncryptionKeyAsyncClient*
  type: Constructor
  package: com.azure.security.keyvault.keys.cryptography
  summary: Creates a KeyEncryptionKeyAsyncClient that uses `pipeline` to service requests
  syntax:
    content: " KeyEncryptionKeyAsyncClient(String keyId, HttpPipeline pipeline, CryptographyServiceVersion version)"
    parameters:
    - id: keyId
      type: java.lang.String
      description: The identifier of the key to use for cryptography operations.
    - id: pipeline
      type: com.azure.core.http.HttpPipeline
      description: The HttpPipeline that the HTTP requests and responses flow through.
    - id: version
      type: com.azure.security.keyvault.keys.cryptography.CryptographyServiceVersion
      description: <xref uid="com.azure.security.keyvault.keys.cryptography.CryptographyServiceVersion" data-throw-if-not-resolved="false">CryptographyServiceVersion</xref> of the service to be used when making requests.
- uid: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.getKeyId()
  id: getKeyId()
  artifact: com.azure:azure-security-keyvault-keys:4.1.3
  parent: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient
  langs:
  - java
  name: getKeyId()
  nameWithType: KeyEncryptionKeyAsyncClient.getKeyId()
  fullName: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.getKeyId()
  overload: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.getKeyId*
  type: Method
  package: com.azure.security.keyvault.keys.cryptography
  summary: Get the identifier of the key to use for cryptography operations.
  syntax:
    content: public Mono<String> getKeyId()
    return:
      type: reactor.core.publisher.Mono<java.lang.String>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the key identifier.
- uid: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.unwrapKey(java.lang.String,byte[])
  id: unwrapKey(java.lang.String,byte[])
  artifact: com.azure:azure-security-keyvault-keys:4.1.3
  parent: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient
  langs:
  - java
  name: unwrapKey(String algorithm, byte[] encryptedKey)
  nameWithType: KeyEncryptionKeyAsyncClient.unwrapKey(String algorithm, byte[] encryptedKey)
  fullName: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.unwrapKey(String algorithm, byte[] encryptedKey)
  overload: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.unwrapKey*
  type: Method
  package: com.azure.security.keyvault.keys.cryptography
  syntax:
    content: public Mono<byte[]> unwrapKey(String algorithm, byte[] encryptedKey)
    parameters:
    - id: algorithm
      type: java.lang.String
    - id: encryptedKey
      type: byte[]
    return:
      type: reactor.core.publisher.Mono<byte[]>
- uid: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.wrapKey(java.lang.String,byte[])
  id: wrapKey(java.lang.String,byte[])
  artifact: com.azure:azure-security-keyvault-keys:4.1.3
  parent: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient
  langs:
  - java
  name: wrapKey(String algorithm, byte[] key)
  nameWithType: KeyEncryptionKeyAsyncClient.wrapKey(String algorithm, byte[] key)
  fullName: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.wrapKey(String algorithm, byte[] key)
  overload: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.wrapKey*
  type: Method
  package: com.azure.security.keyvault.keys.cryptography
  syntax:
    content: public Mono<byte[]> wrapKey(String algorithm, byte[] key)
    parameters:
    - id: algorithm
      type: java.lang.String
    - id: key
      type: byte[]
    return:
      type: reactor.core.publisher.Mono<byte[]>
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: com.azure.security.keyvault.keys.cryptography.CryptographyServiceVersion
  name: CryptographyServiceVersion
  nameWithType: CryptographyServiceVersion
  fullName: com.azure.security.keyvault.keys.cryptography.CryptographyServiceVersion
- uid: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.KeyEncryptionKeyAsyncClient*
  name: KeyEncryptionKeyAsyncClient
  nameWithType: KeyEncryptionKeyAsyncClient.KeyEncryptionKeyAsyncClient
  fullName: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.KeyEncryptionKeyAsyncClient
  package: com.azure.security.keyvault.keys.cryptography
- uid: reactor.core.publisher.Mono<java.lang.String>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.getKeyId*
  name: getKeyId
  nameWithType: KeyEncryptionKeyAsyncClient.getKeyId
  fullName: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.getKeyId
  package: com.azure.security.keyvault.keys.cryptography
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: reactor.core.publisher.Mono<byte[]>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.wrapKey*
  name: wrapKey
  nameWithType: KeyEncryptionKeyAsyncClient.wrapKey
  fullName: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.wrapKey
  package: com.azure.security.keyvault.keys.cryptography
- uid: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.unwrapKey*
  name: unwrapKey
  nameWithType: KeyEncryptionKeyAsyncClient.unwrapKey
  fullName: com.azure.security.keyvault.keys.cryptography.KeyEncryptionKeyAsyncClient.unwrapKey
  package: com.azure.security.keyvault.keys.cryptography
- uid: com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient
  name: CryptographyAsyncClient
  nameWithType: CryptographyAsyncClient
  fullName: com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient
- uid: com.azure.core.cryptography.AsyncKeyEncryptionKey
  name: AsyncKeyEncryptionKey
  nameWithType: AsyncKeyEncryptionKey
  fullName: com.azure.core.cryptography.AsyncKeyEncryptionKey
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.signData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])
  name: CryptographyAsyncClient.signData(SignatureAlgorithm,byte[])
  nameWithType: CryptographyAsyncClient.signData(SignatureAlgorithm,byte[])
  fullName: com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.signData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])
- uid: com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])
  name: CryptographyAsyncClient.encrypt(EncryptionAlgorithm,byte[])
  nameWithType: CryptographyAsyncClient.encrypt(EncryptionAlgorithm,byte[])
  fullName: com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])
- uid: com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])
  name: CryptographyAsyncClient.unwrapKey(KeyWrapAlgorithm,byte[])
  nameWithType: CryptographyAsyncClient.unwrapKey(KeyWrapAlgorithm,byte[])
  fullName: com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])
- uid: com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])
  name: CryptographyAsyncClient.sign(SignatureAlgorithm,byte[])
  nameWithType: CryptographyAsyncClient.sign(SignatureAlgorithm,byte[])
  fullName: com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])
  name: CryptographyAsyncClient.verify(SignatureAlgorithm,byte[],byte[])
  nameWithType: CryptographyAsyncClient.verify(SignatureAlgorithm,byte[],byte[])
  fullName: com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])
  name: CryptographyAsyncClient.wrapKey(KeyWrapAlgorithm,byte[])
  nameWithType: CryptographyAsyncClient.wrapKey(KeyWrapAlgorithm,byte[])
  fullName: com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verifyData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])
  name: CryptographyAsyncClient.verifyData(SignatureAlgorithm,byte[],byte[])
  nameWithType: CryptographyAsyncClient.verifyData(SignatureAlgorithm,byte[],byte[])
  fullName: com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verifyData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])
  name: CryptographyAsyncClient.decrypt(EncryptionAlgorithm,byte[])
  nameWithType: CryptographyAsyncClient.decrypt(EncryptionAlgorithm,byte[])
  fullName: com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
