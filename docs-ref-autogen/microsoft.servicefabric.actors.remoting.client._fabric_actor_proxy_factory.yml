### YamlMime:ManagedReference
items:
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory
  id: _fabric_actor_proxy_factory
  parent: microsoft.servicefabric.actors.remoting.client
  children:
  - microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorProxy(Class<T>,ActorId)
  - microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorProxy(Class<T>,ActorId,String,String,String)
  - microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId)
  - microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId,String)
  - microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId)
  - microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId,String)
  - microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long)
  - microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long,String)
  - microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createServiceRemotingClientFactory(ServiceRemotingCallbackClient)
  - microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.FabricActorProxyFactory()
  - microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.FabricActorProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory>,OperationRetrySettings)
  href: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.yml
  langs:
  - java
  name: FabricActorProxyFactory
  nameWithType: FabricActorProxyFactory
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/remoting/client/FabricActorProxyFactory.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/remoting/client/FabricActorProxyFactory.java
    startLine: 29
  package: microsoft.servicefabric.actors.remoting.client
  summary: "<p>Factory class to create a proxy to the remote actor objects. </p>"
  syntax:
    content: public class FabricActorProxyFactory implements ActorProxyFactory
  inheritance:
  - java.lang.Object
  - microsoft.servicefabric.actors.client._actor_proxy_factory
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorProxy(Class<T>,ActorId)
  id: createActorProxy(Class<T>,ActorId)
  parent: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory
  href: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.yml
  langs:
  - java
  name: createActorProxy(Class<T> actorInterfaceType, ActorId actorId)
  nameWithType: FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId)
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId)
  overload: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorProxy*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/remoting/client/FabricActorProxyFactory.java
    startLine: 122
  package: microsoft.servicefabric.actors.remoting.client
  summary: "<p>Creates a proxy to the actor object that implements an actor interface.</p>\r\n<p></p>"
  syntax:
    content: public <T extends Actor> T createActorProxy(Class<T> actorInterfaceType, ActorId actorId)
    parameters:
    - id: actorInterfaceType
      type: ffb09d2d
      description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    return:
      type: 36136266microsoft.servicefabric.actors._actor21353812
      description: <p>An actor proxy object that implements <xref uid="" data-throw-if-not-resolved="false">ActorProxy</xref> and Actor Interface. </p>
  overridden: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorProxy(Class<T>,ActorId)
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorProxy(Class<T>,ActorId,String,String,String)
  id: createActorProxy(Class<T>,ActorId,String,String,String)
  parent: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory
  href: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.yml
  langs:
  - java
  name: createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
  nameWithType: FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
  overload: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorProxy*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/remoting/client/FabricActorProxyFactory.java
    startLine: 163
  package: microsoft.servicefabric.actors.remoting.client
  summary: "<p>Creates a proxy to the actor object that implements an actor interface.</p>\r\n<p></p>"
  syntax:
    content: public <T extends Actor> T createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
    parameters:
    - id: actorInterfaceType
      type: ffb09d2d
      description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    - id: applicationName
      type: "26831127"
      description: <p>Name of the Service Fabric application that contains the actor service hosting the actor objects. This parameter can be null if the client is running as part of that same Service Fabric application. For more information, see Remarks. </p>
    - id: serviceName
      type: "26831127"
      description: <p>Name of the Service Fabric service as configured by <xref uid="" data-throw-if-not-resolved="false">ActorServiceAttribute</xref> on the actor implementation. By default, the name of the service is derived from the name of the actor interface. However <xref uid="" data-throw-if-not-resolved="false">ActorServiceAttribute</xref> is required when an actor implements more than one actor interfaces or an actor interface derives from another actor interface as the determination of the serviceName cannot be made automatically. </p>
    - id: listenerName
      type: "26831127"
      description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    return:
      type: 36136266microsoft.servicefabric.actors._actor21353812
      description: <p>An actor proxy object that implements <xref uid="" data-throw-if-not-resolved="false">ActorProxy</xref> and Actor Interface. </p>
  overridden: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorProxy(Class<T>,ActorId,String,String,String)
  exceptions:
  - type: "44102508"
    description: <p>Throws exception when invalid URI format is passed as applicationName </p>
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId)
  id: createActorProxy(Class<T>,URI,ActorId)
  parent: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory
  href: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.yml
  langs:
  - java
  name: createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)
  nameWithType: FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)
  overload: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorProxy*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/remoting/client/FabricActorProxyFactory.java
    startLine: 73
  package: microsoft.servicefabric.actors.remoting.client
  summary: "<p>Creates a proxy to the actor object that implements an actor interface.</p>\r\n<p></p>"
  syntax:
    content: public <T extends Actor> T createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)
    parameters:
    - id: actorInterfaceType
      type: ffb09d2d
      description: <p>The actor interface type implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    return:
      type: 36136266microsoft.servicefabric.actors._actor21353812
      description: <p>An actor proxy object that implements <xref uid="" data-throw-if-not-resolved="false">ActorProxy</xref> and Actor Interface. </p>
  overridden: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId)
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId,String)
  id: createActorProxy(Class<T>,URI,ActorId,String)
  parent: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory
  href: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.yml
  langs:
  - java
  name: createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  nameWithType: FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  overload: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorProxy*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/remoting/client/FabricActorProxyFactory.java
    startLine: 96
  package: microsoft.servicefabric.actors.remoting.client
  summary: "<p>Creates a proxy to the actor object that implements an actor interface.</p>\r\n<p></p>"
  syntax:
    content: public <T extends Actor> T createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
    parameters:
    - id: actorInterfaceType
      type: ffb09d2d
      description: <p>The actor interface type implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    - id: listenerName
      type: "26831127"
      description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    return:
      type: 36136266microsoft.servicefabric.actors._actor21353812
      description: <p>An actor proxy object that implements <xref uid="" data-throw-if-not-resolved="false">ActorProxy</xref> and Actor Interface. </p>
  overridden: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId,String)
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId)
  id: createActorServiceProxy(Class<T>,URI,ActorId)
  parent: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory
  href: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.yml
  langs:
  - java
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  nameWithType: FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  overload: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorServiceProxy*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/remoting/client/FabricActorProxyFactory.java
    startLine: 196
  package: microsoft.servicefabric.actors.remoting.client
  summary: "<p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>\r\n<p></p>"
  syntax:
    content: public <T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
      description: <p>The service interface type implemented by the actor service. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id. </p>
    return:
      type: 36136266microsoft.servicefabric.services.remoting._service21353812
      description: <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy_base" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxyBase</xref> and T (Service Interface). </p>
  overridden: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId)
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId,String)
  id: createActorServiceProxy(Class<T>,URI,ActorId,String)
  parent: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory
  href: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.yml
  langs:
  - java
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  nameWithType: FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  overload: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorServiceProxy*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/remoting/client/FabricActorProxyFactory.java
    startLine: 225
  package: microsoft.servicefabric.actors.remoting.client
  summary: "<p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>\r\n<p></p>"
  syntax:
    content: public <T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
      description: <p>The service interface type implemented by the actor service. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id. </p>
    - id: listenerName
      type: "26831127"
      description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    return:
      type: 36136266microsoft.servicefabric.services.remoting._service21353812
      description: <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy_base" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxyBase</xref> and T (Service Interface). </p>
  overridden: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId,String)
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long)
  id: createActorServiceProxy(Class<T>,URI,long)
  parent: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory
  href: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.yml
  langs:
  - java
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  nameWithType: FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  overload: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorServiceProxy*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/remoting/client/FabricActorProxyFactory.java
    startLine: 249
  package: microsoft.servicefabric.actors.remoting.client
  summary: "<p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>\r\n<p></p>"
  syntax:
    content: public <T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
      description: <p>The service interface type implemented by the actor service. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: partitionKey
      type: 0364520f
      description: <p>The key of the actor service partition to connect to. </p>
    return:
      type: 36136266microsoft.servicefabric.services.remoting._service21353812
      description: <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy_base" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxyBase</xref> and T (Service Interface). </p>
  overridden: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long)
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long,String)
  id: createActorServiceProxy(Class<T>,URI,long,String)
  parent: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory
  href: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.yml
  langs:
  - java
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  nameWithType: FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  overload: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorServiceProxy*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/remoting/client/FabricActorProxyFactory.java
    startLine: 278
  package: microsoft.servicefabric.actors.remoting.client
  summary: "<p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>\r\n<p></p>"
  syntax:
    content: public <T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
      description: <p>The service interface type implemented by the actor service. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: partitionKey
      type: 0364520f
      description: <p>The key of the actor service partition to connect to. </p>
    - id: listenerName
      type: "26831127"
      description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    return:
      type: 36136266microsoft.servicefabric.services.remoting._service21353812
      description: <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy_base" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxyBase</xref> and T (Service Interface). </p>
  overridden: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long,String)
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createServiceRemotingClientFactory(ServiceRemotingCallbackClient)
  id: createServiceRemotingClientFactory(ServiceRemotingCallbackClient)
  parent: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory
  href: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.yml
  langs:
  - java
  name: createServiceRemotingClientFactory(ServiceRemotingCallbackClient callbackClient)
  nameWithType: FabricActorProxyFactory.createServiceRemotingClientFactory(ServiceRemotingCallbackClient callbackClient)
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createServiceRemotingClientFactory(ServiceRemotingCallbackClient callbackClient)
  overload: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createServiceRemotingClientFactory*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/remoting/client/FabricActorProxyFactory.java
    startLine: 299
  package: microsoft.servicefabric.actors.remoting.client
  summary: "<p>Creates service remoting client factory.</p>\r\n<p></p>"
  syntax:
    content: protected ServiceRemotingClientFactory createServiceRemotingClientFactory(ServiceRemotingCallbackClient callbackClient)
    parameters:
    - id: callbackClient
      type: microsoft.servicefabric.services.remoting.runtime._service_remoting_callback_client
      description: <p>Callback from the remoting listener to the client. </p>
    return:
      type: microsoft.servicefabric.services.remoting.client._service_remoting_client_factory
      description: <p>Created service remoting client factory as <xref uid="" data-throw-if-not-resolved="false">ServiceRemotingClientFactory</xref>. </p>
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.FabricActorProxyFactory()
  id: FabricActorProxyFactory()
  parent: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory
  href: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.yml
  langs:
  - java
  name: FabricActorProxyFactory()
  nameWithType: FabricActorProxyFactory.FabricActorProxyFactory()
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.FabricActorProxyFactory()
  overload: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.FabricActorProxyFactory*
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/remoting/client/FabricActorProxyFactory.java
    startLine: 39
  package: microsoft.servicefabric.actors.remoting.client
  summary: "<p>Initializes a new instance of the ActorProxyFactory class. </p>"
  syntax:
    content: public FabricActorProxyFactory()
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.FabricActorProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory>,OperationRetrySettings)
  id: FabricActorProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory>,OperationRetrySettings)
  parent: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory
  href: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.yml
  langs:
  - java
  name: FabricActorProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings)
  nameWithType: FabricActorProxyFactory.FabricActorProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings)
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.FabricActorProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings)
  overload: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.FabricActorProxyFactory*
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/remoting/client/FabricActorProxyFactory.java
    startLine: 51
  package: microsoft.servicefabric.actors.remoting.client
  summary: "<p>Initializes a new instance of the ActorProxyFactory class.</p>\r\n<p></p>"
  syntax:
    content: public FabricActorProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings)
    parameters:
    - id: createServiceRemotingClientFactory
      type: 432ffe41microsoft.servicefabric.services.remoting.runtime._service_remoting_callback_clientb33c76fcmicrosoft.servicefabric.services.remoting.client._service_remoting_client_factorya08ddfce
      description: <p>Factory method to create remoting communication client factor. </p>
    - id: retrySettings
      type: microsoft.servicefabric.services.communication.client._operation_retry_settings
      description: <p>Retry settings for the remote object calls made by proxy. </p>
references:
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.FabricActorProxyFactory*
  name: FabricActorProxyFactory
  nameWithType: FabricActorProxyFactory.FabricActorProxyFactory
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.FabricActorProxyFactory
  package: microsoft.servicefabric.actors.remoting.client
- uid: 432ffe41microsoft.servicefabric.services.remoting.runtime._service_remoting_callback_clientb33c76fcmicrosoft.servicefabric.services.remoting.client._service_remoting_client_factorya08ddfce
  spec.java:
  - name: Function<
    fullName: Function<
  - uid: microsoft.servicefabric.services.remoting.runtime._service_remoting_callback_client
    name: ServiceRemotingCallbackClient
    fullName: microsoft.servicefabric.services.remoting.runtime.ServiceRemotingCallbackClient
    href: microsoft.servicefabric.services.remoting.runtime._service_remoting_callback_client.yml
  - name: ', '
    fullName: ', '
  - uid: microsoft.servicefabric.services.remoting.client._service_remoting_client_factory
    name: ServiceRemotingClientFactory
    fullName: microsoft.servicefabric.services.remoting.client.ServiceRemotingClientFactory
    href: microsoft.servicefabric.services.remoting.client._service_remoting_client_factory.yml
  - name: '>'
    fullName: '>'
- uid: ffb09d2d
  spec.java:
  - name: Class<T>
    fullName: Class<T>
- uid: "62304784"
  spec.java:
  - name: URI
    fullName: URI
- uid: 36136266microsoft.servicefabric.actors._actor21353812
  spec.java:
  - name: '<T extends '
    fullName: '<T extends '
  - uid: microsoft.servicefabric.actors._actor
    name: Actor
    fullName: microsoft.servicefabric.actors.Actor
    href: microsoft.servicefabric.actors._actor.yml
  - name: '> T'
    fullName: '> T'
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorProxy*
  name: createActorProxy
  nameWithType: FabricActorProxyFactory.createActorProxy
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorProxy
  package: microsoft.servicefabric.actors.remoting.client
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: "44102508"
  spec.java:
  - name: URISyntaxException
    fullName: URISyntaxException
- uid: 36136266microsoft.servicefabric.services.remoting._service21353812
  spec.java:
  - name: '<T extends '
    fullName: '<T extends '
  - uid: microsoft.servicefabric.services.remoting._service
    name: Service
    fullName: microsoft.servicefabric.services.remoting.Service
    href: microsoft.servicefabric.services.remoting._service.yml
  - name: '> T'
    fullName: '> T'
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createActorServiceProxy*
  name: createActorServiceProxy
  nameWithType: FabricActorProxyFactory.createActorServiceProxy
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy
  package: microsoft.servicefabric.actors.remoting.client
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: microsoft.servicefabric.actors.remoting.client._fabric_actor_proxy_factory.createServiceRemotingClientFactory*
  name: createServiceRemotingClientFactory
  nameWithType: FabricActorProxyFactory.createServiceRemotingClientFactory
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createServiceRemotingClientFactory
  package: microsoft.servicefabric.actors.remoting.client
- uid: microsoft.servicefabric.actors.client._actor_proxy_factory
  parent: microsoft.servicefabric.actors.client
  href: microsoft.servicefabric.actors.client._actor_proxy_factory.yml
  name: ActorProxyFactory
  nameWithType: ActorProxyFactory
  fullName: microsoft.servicefabric.actors.client.ActorProxyFactory
  type: Interface
  summary: <p>Defines the interface containing methods to create actor proxy factory class. </p>
  syntax:
    content: public interface ActorProxyFactory
- uid: microsoft.servicefabric.services.remoting.runtime._service_remoting_callback_client
  parent: microsoft.servicefabric.services.remoting.runtime
  href: microsoft.servicefabric.services.remoting.runtime._service_remoting_callback_client.yml
  name: ServiceRemotingCallbackClient
  nameWithType: ServiceRemotingCallbackClient
  fullName: microsoft.servicefabric.services.remoting.runtime.ServiceRemotingCallbackClient
  type: Interface
  summary: <p>Defines the interface that must be implemented for providing callback mechanism from the remoting listener to the client. </p>
  syntax:
    content: public interface ServiceRemotingCallbackClient
- uid: microsoft.servicefabric.services.remoting.client._service_remoting_client_factory
  parent: microsoft.servicefabric.services.remoting.client
  href: microsoft.servicefabric.services.remoting.client._service_remoting_client_factory.yml
  name: ServiceRemotingClientFactory
  nameWithType: ServiceRemotingClientFactory
  fullName: microsoft.servicefabric.services.remoting.client.ServiceRemotingClientFactory
  type: Interface
  summary: <p>Defines the interface that must be implemented for providing the remoting communication client factory. </p>
  syntax:
    content: public interface ServiceRemotingClientFactory
- uid: microsoft.servicefabric.services.communication.client._operation_retry_settings
  parent: microsoft.servicefabric.services.communication.client
  href: microsoft.servicefabric.services.communication.client._operation_retry_settings.yml
  name: OperationRetrySettings
  nameWithType: OperationRetrySettings
  fullName: microsoft.servicefabric.services.communication.client.OperationRetrySettings
  type: Class
  syntax:
    content: public class OperationRetrySettings
- uid: microsoft.servicefabric.actors._actor
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._actor.yml
  name: Actor
  nameWithType: Actor
  fullName: microsoft.servicefabric.actors.Actor
  type: Interface
  summary: <p>Base interface for inheriting reliable actor interfaces. </p>
  syntax:
    content: public interface Actor
- uid: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId)
  parent: microsoft.servicefabric.actors.client._actor_proxy_factory
  href: microsoft.servicefabric.actors.client._actor_proxy_factory.yml
  name: createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)
  nameWithType: ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)
  fullName: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)
  type: Method
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p></p>
  syntax:
    content: public public<T extends Actor> T createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)
    parameters:
    - id: actorInterfaceType
      type: ffb09d2d
      description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    return:
      type: 21d1468cmicrosoft.servicefabric.actors._actor21353812
      description: <p>An actor proxy object that implements <xref uid="microsoft.servicefabric.actors.client._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref> and Actor Interface. </p>
- uid: microsoft.servicefabric.actors._actor_id
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._actor_id.yml
  name: ActorId
  nameWithType: ActorId
  fullName: microsoft.servicefabric.actors.ActorId
  type: Class
  summary: <p>ActorId represents identity of an actor within an actor service. The actors can be identified by <xref uid="" data-throw-if-not-resolved="false">java.lang.String</xref>, <xref uid="" data-throw-if-not-resolved="false">java.util.UUID</xref> or long. </p>
  syntax:
    content: public class ActorId
- uid: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorProxy(Class<T>,URI,ActorId,String)
  parent: microsoft.servicefabric.actors.client._actor_proxy_factory
  href: microsoft.servicefabric.actors.client._actor_proxy_factory.yml
  name: createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  nameWithType: ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  fullName: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  type: Method
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p></p>
  syntax:
    content: public public<T extends Actor> T createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
    parameters:
    - id: actorInterfaceType
      type: ffb09d2d
      description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    - id: listenerName
      type: "26831127"
      description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    return:
      type: 21d1468cmicrosoft.servicefabric.actors._actor21353812
      description: <p>An actor proxy object that implements <xref uid="microsoft.servicefabric.actors.client._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref> and Actor Interface. </p>
- uid: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorProxy(Class<T>,ActorId)
  parent: microsoft.servicefabric.actors.client._actor_proxy_factory
  href: microsoft.servicefabric.actors.client._actor_proxy_factory.yml
  name: createActorProxy(Class<T> actorInterfaceType, ActorId actorId)
  nameWithType: ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId)
  fullName: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId)
  type: Method
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p></p>
  syntax:
    content: public public<T extends Actor> T createActorProxy(Class<T> actorInterfaceType, ActorId actorId)
    parameters:
    - id: actorInterfaceType
      type: ffb09d2d
      description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    return:
      type: 21d1468cmicrosoft.servicefabric.actors._actor21353812
      description: <p>An actor proxy object that implements <xref uid="microsoft.servicefabric.actors.client._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref> and Actor Interface. </p>
- uid: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorProxy(Class<T>,ActorId,String,String,String)
  parent: microsoft.servicefabric.actors.client._actor_proxy_factory
  href: microsoft.servicefabric.actors.client._actor_proxy_factory.yml
  name: createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
  nameWithType: ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
  fullName: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
  type: Method
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p></p>
  syntax:
    content: public public<T extends Actor> T createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
    parameters:
    - id: actorInterfaceType
      type: ffb09d2d
      description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    - id: applicationName
      type: "26831127"
      description: <p>Name of the Service Fabric application that contains the actor service hosting the actor objects. This parameter can be null if the client is running as part of that same Service Fabric application. For more information, see Remarks. </p>
    - id: serviceName
      type: "26831127"
      description: <p>Name of the Service Fabric service as configured by <xref uid="" data-throw-if-not-resolved="false">ActorServiceAttribute</xref> on the actor implementation. By default, the name of the service is derived from the name of the actor interface. However <xref uid="" data-throw-if-not-resolved="false">ActorServiceAttribute</xref> is required when an actor implements more than one actor interfaces or an actor interface derives from another actor interface as the determination of the serviceName cannot be made automatically. </p>
    - id: listenerName
      type: "26831127"
      description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    return:
      type: 21d1468cmicrosoft.servicefabric.actors._actor21353812
      description: <p>An actor proxy object that implements <xref uid="microsoft.servicefabric.actors.client._actor_proxy" data-throw-if-not-resolved="false">ActorProxy</xref> and Actor Interface. </p>
- uid: microsoft.servicefabric.services.remoting._service
  parent: microsoft.servicefabric.services.remoting
  href: microsoft.servicefabric.services.remoting._service.yml
  name: Service
  nameWithType: Service
  fullName: microsoft.servicefabric.services.remoting.Service
  type: Interface
  summary: <p>This is the marker interface for enabling interface Remoting for services. An <xref uid="microsoft.servicefabric.services.remoting.runtime._service_remoting_listener" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.runtime.ServiceRemotingListener</xref> provides remoting for all interfaces implemented by the service that derive from this interface. The remoted interfaces can be accessed via Proxy on the client side. </p>
  syntax:
    content: public interface Service
- uid: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId)
  parent: microsoft.servicefabric.actors.client._actor_proxy_factory
  href: microsoft.servicefabric.actors.client._actor_proxy_factory.yml
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  nameWithType: ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  fullName: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  type: Method
  summary: >-
    <p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>

    <p></p>
  syntax:
    content: public public<T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
      description: <p>The service interface type implemented by the actor service. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id. </p>
    return:
      type: 21d1468cmicrosoft.servicefabric.services.remoting._service21353812
      description: >-
        <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref> and<code>&lt;T&gt; 

            </code> . </p>
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base
  parent: microsoft.servicefabric.services.remoting.client
  href: microsoft.servicefabric.services.remoting.client._service_proxy_base.yml
  name: ServiceProxyBase
  nameWithType: ServiceProxyBase
  fullName: microsoft.servicefabric.services.remoting.client.ServiceProxyBase
  type: Class
  summary: <p>Provides the base implementation for the proxy to the remoted IService interfaces. </p>
  syntax:
    content: public class ServiceProxyBase
- uid: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,ActorId,String)
  parent: microsoft.servicefabric.actors.client._actor_proxy_factory
  href: microsoft.servicefabric.actors.client._actor_proxy_factory.yml
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  nameWithType: ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  fullName: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  type: Method
  summary: >-
    <p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>

    <p></p>
  syntax:
    content: public public<T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
      description: <p>The service interface type implemented by the actor service. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
      description: <p>Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id. </p>
    - id: listenerName
      type: "26831127"
      description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    return:
      type: 21d1468cmicrosoft.servicefabric.services.remoting._service21353812
      description: >-
        <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref> and<code>&lt;T&gt; 

            </code> . </p>
- uid: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long)
  parent: microsoft.servicefabric.actors.client._actor_proxy_factory
  href: microsoft.servicefabric.actors.client._actor_proxy_factory.yml
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  nameWithType: ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  fullName: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  type: Method
  summary: >-
    <p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>

    <p></p>
  syntax:
    content: public public<T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
      description: <p>The service interface type implemented by the actor service. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: partitionKey
      type: 0364520f
      description: <p>The key of the actor service partition to connect to. </p>
    return:
      type: 21d1468cmicrosoft.servicefabric.services.remoting._service21353812
      description: >-
        <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref> and<code>&lt;T&gt; 

            </code> . </p>
- uid: microsoft.servicefabric.actors.client._actor_proxy_factory.createActorServiceProxy(Class<T>,URI,long,String)
  parent: microsoft.servicefabric.actors.client._actor_proxy_factory
  href: microsoft.servicefabric.actors.client._actor_proxy_factory.yml
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  nameWithType: ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  fullName: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  type: Method
  summary: >-
    <p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>

    <p></p>
  syntax:
    content: public public<T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
      description: <p>The service interface type implemented by the actor service. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: partitionKey
      type: 0364520f
      description: <p>The key of the actor service partition to connect to. </p>
    - id: listenerName
      type: "26831127"
      description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    return:
      type: 21d1468cmicrosoft.servicefabric.services.remoting._service21353812
      description: >-
        <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref> and<code>&lt;T&gt; 

            </code> . </p>
- uid: microsoft.servicefabric.actors.client._actor_proxy
  parent: microsoft.servicefabric.actors.client
  href: microsoft.servicefabric.actors.client._actor_proxy.yml
  name: ActorProxy
  nameWithType: ActorProxy
  fullName: microsoft.servicefabric.actors.client.ActorProxy
  type: Interface
  summary: <p>Provides the interface for implementation of proxy access for actor service. </p>
  syntax:
    content: public interface ActorProxy
