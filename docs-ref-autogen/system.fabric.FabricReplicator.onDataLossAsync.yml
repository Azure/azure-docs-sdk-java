### YamlMime:JavaMember
nameWithType: FabricReplicator.onDataLossAsync
type: method
members:
- fullName: system.fabric.FabricReplicator.onDataLossAsync(CancellationToken cancellationToken)
  name: onDataLossAsync(CancellationToken cancellationToken)
  nameWithType: FabricReplicator.onDataLossAsync(CancellationToken cancellationToken)
  overridden: system.fabric.PrimaryReplicator.onDataLossAsync(CancellationToken)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A CompletableFuture that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false">FabricException</xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture<Boolean>&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> onDataLossAsync(CancellationToken cancellationToken)
  uid: system.fabric.FabricReplicator.onDataLossAsync(CancellationToken)
uid: system.fabric.FabricReplicator.onDataLossAsync*
fullName: system.fabric.FabricReplicator.onDataLossAsync(CancellationToken cancellationToken)
name: onDataLossAsync(CancellationToken cancellationToken)
package: system.fabric
metadata: {}
