### YamlMime:ManagedReference
items:
- uid: "com.azure.core.amqp.implementation.RequestResponseChannel"
  id: "RequestResponseChannel"
  parent: "com.azure.core.amqp.implementation"
  children:
  - "com.azure.core.amqp.implementation.RequestResponseChannel.RequestResponseChannel(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.qpid.proton.engine.Session,com.azure.core.amqp.AmqpRetryOptions,com.azure.core.amqp.implementation.ReactorHandlerProvider,com.azure.core.amqp.implementation.ReactorProvider,com.azure.core.amqp.implementation.MessageSerializer,org.apache.qpid.proton.amqp.transport.SenderSettleMode,org.apache.qpid.proton.amqp.transport.ReceiverSettleMode)"
  - "com.azure.core.amqp.implementation.RequestResponseChannel.dispose()"
  - "com.azure.core.amqp.implementation.RequestResponseChannel.getEndpointStates()"
  - "com.azure.core.amqp.implementation.RequestResponseChannel.getReceiveLinkName()"
  - "com.azure.core.amqp.implementation.RequestResponseChannel.isDisposed()"
  - "com.azure.core.amqp.implementation.RequestResponseChannel.sendWithAck(org.apache.qpid.proton.message.Message)"
  langs:
  - "java"
  name: "RequestResponseChannel"
  nameWithType: "RequestResponseChannel"
  fullName: "com.azure.core.amqp.implementation.RequestResponseChannel"
  type: "Class"
  package: "com.azure.core.amqp.implementation"
  summary: "Represents a bidirectional link between the message broker and the client. Allows client to send a request to the broker and receive the associated response."
  syntax:
    content: "public class RequestResponseChannel implements Disposable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "reactor.core.Disposable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.core.amqp.implementation.RequestResponseChannel.RequestResponseChannel(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.qpid.proton.engine.Session,com.azure.core.amqp.AmqpRetryOptions,com.azure.core.amqp.implementation.ReactorHandlerProvider,com.azure.core.amqp.implementation.ReactorProvider,com.azure.core.amqp.implementation.MessageSerializer,org.apache.qpid.proton.amqp.transport.SenderSettleMode,org.apache.qpid.proton.amqp.transport.ReceiverSettleMode)"
  id: "RequestResponseChannel(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.qpid.proton.engine.Session,com.azure.core.amqp.AmqpRetryOptions,com.azure.core.amqp.implementation.ReactorHandlerProvider,com.azure.core.amqp.implementation.ReactorProvider,com.azure.core.amqp.implementation.MessageSerializer,org.apache.qpid.proton.amqp.transport.SenderSettleMode,org.apache.qpid.proton.amqp.transport.ReceiverSettleMode)"
  parent: "com.azure.core.amqp.implementation.RequestResponseChannel"
  langs:
  - "java"
  name: "RequestResponseChannel(String connectionId, String fullyQualifiedNamespace, String linkName, String entityPath, Session session, AmqpRetryOptions retryOptions, ReactorHandlerProvider handlerProvider, ReactorProvider provider, MessageSerializer messageSerializer, SenderSettleMode senderSettleMode, ReceiverSettleMode receiverSettleMode)"
  nameWithType: "RequestResponseChannel.RequestResponseChannel(String connectionId, String fullyQualifiedNamespace, String linkName, String entityPath, Session session, AmqpRetryOptions retryOptions, ReactorHandlerProvider handlerProvider, ReactorProvider provider, MessageSerializer messageSerializer, SenderSettleMode senderSettleMode, ReceiverSettleMode receiverSettleMode)"
  fullName: "com.azure.core.amqp.implementation.RequestResponseChannel.RequestResponseChannel(String connectionId, String fullyQualifiedNamespace, String linkName, String entityPath, Session session, AmqpRetryOptions retryOptions, ReactorHandlerProvider handlerProvider, ReactorProvider provider, MessageSerializer messageSerializer, SenderSettleMode senderSettleMode, ReceiverSettleMode receiverSettleMode)"
  overload: "com.azure.core.amqp.implementation.RequestResponseChannel.RequestResponseChannel*"
  type: "Constructor"
  package: "com.azure.core.amqp.implementation"
  summary: "Creates a new instance of <xref uid=\"com.azure.core.amqp.implementation.RequestResponseChannel\" data-throw-if-not-resolved=\"false\">RequestResponseChannel</xref> to send and receive responses from the `entityPath` in the message broker."
  syntax:
    content: "protected RequestResponseChannel(String connectionId, String fullyQualifiedNamespace, String linkName, String entityPath, Session session, AmqpRetryOptions retryOptions, ReactorHandlerProvider handlerProvider, ReactorProvider provider, MessageSerializer messageSerializer, SenderSettleMode senderSettleMode, ReceiverSettleMode receiverSettleMode)"
    parameters:
    - id: "connectionId"
      type: "java.lang.String"
      description: "Identifier of the connection."
    - id: "fullyQualifiedNamespace"
      type: "java.lang.String"
      description: "Fully qualified namespace for the the host."
    - id: "linkName"
      type: "java.lang.String"
      description: "Name of the link."
    - id: "entityPath"
      type: "java.lang.String"
      description: "Address in the message broker to send message to."
    - id: "session"
      type: "org.apache.qpid.proton.engine.Session"
      description: "Reactor session associated with this link."
    - id: "retryOptions"
      type: "com.azure.core.amqp.AmqpRetryOptions"
      description: "Retry options to use for sending the request response."
    - id: "handlerProvider"
      type: "com.azure.core.amqp.implementation.ReactorHandlerProvider"
      description: "Provides handlers that interact with proton-j's reactor."
    - id: "provider"
      type: "com.azure.core.amqp.implementation.ReactorProvider"
      description: "The reactor provider that the request will be sent with."
    - id: "messageSerializer"
      type: "com.azure.core.amqp.implementation.MessageSerializer"
    - id: "senderSettleMode"
      type: "org.apache.qpid.proton.amqp.transport.SenderSettleMode"
      description: "to set as <xref uid=\"\" data-throw-if-not-resolved=\"false\">SenderSettleMode</xref> on sender."
    - id: "receiverSettleMode"
      type: "org.apache.qpid.proton.amqp.transport.ReceiverSettleMode"
      description: "to set as <xref uid=\"\" data-throw-if-not-resolved=\"false\">ReceiverSettleMode</xref> on receiver."
- uid: "com.azure.core.amqp.implementation.RequestResponseChannel.dispose()"
  id: "dispose()"
  parent: "com.azure.core.amqp.implementation.RequestResponseChannel"
  langs:
  - "java"
  name: "dispose()"
  nameWithType: "RequestResponseChannel.dispose()"
  fullName: "com.azure.core.amqp.implementation.RequestResponseChannel.dispose()"
  overload: "com.azure.core.amqp.implementation.RequestResponseChannel.dispose*"
  type: "Method"
  package: "com.azure.core.amqp.implementation"
  syntax:
    content: "public void dispose()"
- uid: "com.azure.core.amqp.implementation.RequestResponseChannel.getEndpointStates()"
  id: "getEndpointStates()"
  parent: "com.azure.core.amqp.implementation.RequestResponseChannel"
  langs:
  - "java"
  name: "getEndpointStates()"
  nameWithType: "RequestResponseChannel.getEndpointStates()"
  fullName: "com.azure.core.amqp.implementation.RequestResponseChannel.getEndpointStates()"
  overload: "com.azure.core.amqp.implementation.RequestResponseChannel.getEndpointStates*"
  type: "Method"
  package: "com.azure.core.amqp.implementation"
  summary: "Gets the endpoint states for the request/response channel."
  syntax:
    content: "public Flux<AmqpEndpointState> getEndpointStates()"
    return:
      type: "reactor.core.publisher.Flux<com.azure.core.amqp.AmqpEndpointState>"
      description: "The endpoint states for the request/response channel."
- uid: "com.azure.core.amqp.implementation.RequestResponseChannel.getReceiveLinkName()"
  id: "getReceiveLinkName()"
  parent: "com.azure.core.amqp.implementation.RequestResponseChannel"
  langs:
  - "java"
  name: "getReceiveLinkName()"
  nameWithType: "RequestResponseChannel.getReceiveLinkName()"
  fullName: "com.azure.core.amqp.implementation.RequestResponseChannel.getReceiveLinkName()"
  overload: "com.azure.core.amqp.implementation.RequestResponseChannel.getReceiveLinkName*"
  type: "Method"
  package: "com.azure.core.amqp.implementation"
  summary: "Gets the name of the receiver link."
  syntax:
    content: "public String getReceiveLinkName()"
    return:
      type: "java.lang.String"
      description: "The name of the receiver link."
- uid: "com.azure.core.amqp.implementation.RequestResponseChannel.isDisposed()"
  id: "isDisposed()"
  parent: "com.azure.core.amqp.implementation.RequestResponseChannel"
  langs:
  - "java"
  name: "isDisposed()"
  nameWithType: "RequestResponseChannel.isDisposed()"
  fullName: "com.azure.core.amqp.implementation.RequestResponseChannel.isDisposed()"
  overload: "com.azure.core.amqp.implementation.RequestResponseChannel.isDisposed*"
  type: "Method"
  package: "com.azure.core.amqp.implementation"
  syntax:
    content: "public boolean isDisposed()"
    return:
      type: "boolean"
- uid: "com.azure.core.amqp.implementation.RequestResponseChannel.sendWithAck(org.apache.qpid.proton.message.Message)"
  id: "sendWithAck(org.apache.qpid.proton.message.Message)"
  parent: "com.azure.core.amqp.implementation.RequestResponseChannel"
  langs:
  - "java"
  name: "sendWithAck(Message message)"
  nameWithType: "RequestResponseChannel.sendWithAck(Message message)"
  fullName: "com.azure.core.amqp.implementation.RequestResponseChannel.sendWithAck(Message message)"
  overload: "com.azure.core.amqp.implementation.RequestResponseChannel.sendWithAck*"
  type: "Method"
  package: "com.azure.core.amqp.implementation"
  summary: "Sends a message to the message broker using the `dispatcher` and gets the response."
  syntax:
    content: "public Mono<Message> sendWithAck(Message message)"
    parameters:
    - id: "message"
      type: "org.apache.qpid.proton.message.Message"
      description: "AMQP message to send."
    return:
      type: "reactor.core.publisher.Mono<org.apache.qpid.proton.message.Message>"
      description: "An AMQP message representing the service's response to the message."
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "org.apache.qpid.proton.engine.Session"
  spec.java:
  - uid: "org.apache.qpid.proton.engine.Session"
    name: "Session"
    fullName: "org.apache.qpid.proton.engine.Session"
- uid: "com.azure.core.amqp.AmqpRetryOptions"
  name: "AmqpRetryOptions"
  nameWithType: "AmqpRetryOptions"
  fullName: "com.azure.core.amqp.AmqpRetryOptions"
- uid: "com.azure.core.amqp.implementation.ReactorHandlerProvider"
  name: "ReactorHandlerProvider"
  nameWithType: "ReactorHandlerProvider"
  fullName: "com.azure.core.amqp.implementation.ReactorHandlerProvider"
- uid: "com.azure.core.amqp.implementation.ReactorProvider"
  name: "ReactorProvider"
  nameWithType: "ReactorProvider"
  fullName: "com.azure.core.amqp.implementation.ReactorProvider"
- uid: "com.azure.core.amqp.implementation.MessageSerializer"
  name: "MessageSerializer"
  nameWithType: "MessageSerializer"
  fullName: "com.azure.core.amqp.implementation.MessageSerializer"
- uid: "org.apache.qpid.proton.amqp.transport.SenderSettleMode"
  spec.java:
  - uid: "org.apache.qpid.proton.amqp.transport.SenderSettleMode"
    name: "SenderSettleMode"
    fullName: "org.apache.qpid.proton.amqp.transport.SenderSettleMode"
- uid: "org.apache.qpid.proton.amqp.transport.ReceiverSettleMode"
  spec.java:
  - uid: "org.apache.qpid.proton.amqp.transport.ReceiverSettleMode"
    name: "ReceiverSettleMode"
    fullName: "org.apache.qpid.proton.amqp.transport.ReceiverSettleMode"
- uid: "com.azure.core.amqp.implementation.RequestResponseChannel.RequestResponseChannel*"
  name: "RequestResponseChannel"
  nameWithType: "RequestResponseChannel.RequestResponseChannel"
  fullName: "com.azure.core.amqp.implementation.RequestResponseChannel.RequestResponseChannel"
  package: "com.azure.core.amqp.implementation"
- uid: "reactor.core.publisher.Flux<com.azure.core.amqp.AmqpEndpointState>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.amqp.AmqpEndpointState"
    name: "AmqpEndpointState"
    fullName: "com.azure.core.amqp.AmqpEndpointState"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.amqp.implementation.RequestResponseChannel.getEndpointStates*"
  name: "getEndpointStates"
  nameWithType: "RequestResponseChannel.getEndpointStates"
  fullName: "com.azure.core.amqp.implementation.RequestResponseChannel.getEndpointStates"
  package: "com.azure.core.amqp.implementation"
- uid: "com.azure.core.amqp.implementation.RequestResponseChannel.getReceiveLinkName*"
  name: "getReceiveLinkName"
  nameWithType: "RequestResponseChannel.getReceiveLinkName"
  fullName: "com.azure.core.amqp.implementation.RequestResponseChannel.getReceiveLinkName"
  package: "com.azure.core.amqp.implementation"
- uid: "com.azure.core.amqp.implementation.RequestResponseChannel.dispose*"
  name: "dispose"
  nameWithType: "RequestResponseChannel.dispose"
  fullName: "com.azure.core.amqp.implementation.RequestResponseChannel.dispose"
  package: "com.azure.core.amqp.implementation"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.core.amqp.implementation.RequestResponseChannel.isDisposed*"
  name: "isDisposed"
  nameWithType: "RequestResponseChannel.isDisposed"
  fullName: "com.azure.core.amqp.implementation.RequestResponseChannel.isDisposed"
  package: "com.azure.core.amqp.implementation"
- uid: "org.apache.qpid.proton.message.Message"
  spec.java:
  - uid: "org.apache.qpid.proton.message.Message"
    name: "Message"
    fullName: "org.apache.qpid.proton.message.Message"
- uid: "reactor.core.publisher.Mono<org.apache.qpid.proton.message.Message>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "org.apache.qpid.proton.message.Message"
    name: "Message"
    fullName: "org.apache.qpid.proton.message.Message"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.amqp.implementation.RequestResponseChannel.sendWithAck*"
  name: "sendWithAck"
  nameWithType: "RequestResponseChannel.sendWithAck"
  fullName: "com.azure.core.amqp.implementation.RequestResponseChannel.sendWithAck"
  package: "com.azure.core.amqp.implementation"
- uid: "reactor.core.Disposable"
  name: "Disposable"
  nameWithType: "Disposable"
  fullName: "reactor.core.Disposable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"
- uid: "com.azure.core.amqp.AmqpEndpointState"
  name: "AmqpEndpointState"
  nameWithType: "AmqpEndpointState"
  fullName: "com.azure.core.amqp.AmqpEndpointState"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
