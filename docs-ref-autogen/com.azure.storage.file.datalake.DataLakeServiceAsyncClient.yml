### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient"
fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient"
name: "DataLakeServiceAsyncClient"
nameWithType: "DataLakeServiceAsyncClient"
summary: "Client to a storage account."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class DataLakeServiceAsyncClient"
methods:
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.createFileSystem(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.createFileSystem(String fileSystemName)"
  name: "createFileSystem(String fileSystemName)"
  nameWithType: "DataLakeServiceAsyncClient.createFileSystem(String fileSystemName)"
  summary: "Creates a new file system within a storage account."
  parameters:
  - description: "Name of the file system to create"
    name: "fileSystemName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataLakeFileSystemAsyncClient> createFileSystem(String fileSystemName)"
  desc: "Creates a new file system within a storage account. If a file system with the same name already exists, the operation fails. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeFileSystemAsyncClient dataLakeFileSystemAsyncClient =\n     client.createFileSystem(\"fileSystemName\").block();\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemAsyncClient\"></xref> used to interact with the file system\n created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient&text=DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.createFileSystemWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.PublicAccessType)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.createFileSystemWithResponse(String fileSystemName, Map<String,String> metadata, PublicAccessType accessType)"
  name: "createFileSystemWithResponse(String fileSystemName, Map<String,String> metadata, PublicAccessType accessType)"
  nameWithType: "DataLakeServiceAsyncClient.createFileSystemWithResponse(String fileSystemName, Map<String,String> metadata, PublicAccessType accessType)"
  summary: "Creates a new file system within a storage account."
  parameters:
  - description: "Name of the file system to create"
    name: "fileSystemName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Metadata to associate with the file system. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Specifies how the data in this file system is available to the public. See the\n x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access."
    name: "accessType"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PublicAccessType?alt=com.azure.storage.file.datalake.models.PublicAccessType&text=PublicAccessType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataLakeFileSystemAsyncClient>> createFileSystemWithResponse(String fileSystemName, Map<String,String> metadata, PublicAccessType accessType)"
  desc: "Creates a new file system within a storage account. If a file system with the same name already exists, the operation fails. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n\n DataLakeFileSystemAsyncClient dataLakeFileSystemAsyncClient = client\n     .createFileSystemWithResponse(\"fileSystemName\", metadata, PublicAccessType.CONTAINER).block().getValue();\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemAsyncClient\"></xref> used to interact with the file system created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient&text=DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystem(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystem(String fileSystemName)"
  name: "deleteFileSystem(String fileSystemName)"
  nameWithType: "DataLakeServiceAsyncClient.deleteFileSystem(String fileSystemName)"
  summary: "Deletes the specified file system in the storage account."
  parameters:
  - description: "Name of the file system to delete"
    name: "fileSystemName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteFileSystem(String fileSystemName)"
  desc: "Deletes the specified file system in the storage account. If the file system doesn't exist the operation fails. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.deleteFileSystem(\"fileSystemName\").subscribe(\n     response -> System.out.printf(\"Delete file system completed%n\"),\n     error -> System.out.printf(\"Delete file system failed: %s%n\", error));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystemWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystemWithResponse(String fileSystemName, DataLakeRequestConditions requestConditions)"
  name: "deleteFileSystemWithResponse(String fileSystemName, DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakeServiceAsyncClient.deleteFileSystemWithResponse(String fileSystemName, DataLakeRequestConditions requestConditions)"
  summary: "Deletes the specified file system in the storage account."
  parameters:
  - description: "Name of the file system to delete"
    name: "fileSystemName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteFileSystemWithResponse(String fileSystemName, DataLakeRequestConditions requestConditions)"
  desc: "Deletes the specified file system in the storage account. If the file system doesn't exist the operation fails. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.deleteFileSystemWithResponse(\"fileSystemName\", new DataLakeRequestConditions()).subscribe(response ->\n     System.out.printf(\"Delete file system completed with status %d%n\", response.getStatusCode()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing status code and HTTP headers"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)"
  name: "generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)"
  nameWithType: "DataLakeServiceAsyncClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)"
  summary: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>"
    name: "accountSasSignatureValues"
    type: "<xref href=\"com.azure.storage.common.sas.AccountSasSignatureValues?alt=com.azure.storage.common.sas.AccountSasSignatureValues&text=AccountSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)"
  desc: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>.\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref> for more information on how to construct an account SAS.\n\nThe snippet below generates a SAS that lasts for two days and gives the user read and list access to file systems and file shares.\n\n```java\nAccountSasPermission permissions = new AccountSasPermission()\n     .setListPermission(true)\n     .setReadPermission(true);\n AccountSasResourceType resourceTypes = new AccountSasResourceType().setContainer(true);\n AccountSasService services = new AccountSasService().setBlobAccess(true).setFileAccess(true);\n OffsetDateTime expiryTime = OffsetDateTime.now().plus(Duration.ofDays(2));\n\n AccountSasSignatureValues sasValues =\n     new AccountSasSignatureValues(expiryTime, permissions, services, resourceTypes);\n\n // Client must be authenticated via StorageSharedKeyCredential\n String sas = client.generateAccountSas(sasValues);\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues, Context context)"
  name: "generateAccountSas(AccountSasSignatureValues accountSasSignatureValues, Context context)"
  nameWithType: "DataLakeServiceAsyncClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues, Context context)"
  summary: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>"
    name: "accountSasSignatureValues"
    type: "<xref href=\"com.azure.storage.common.sas.AccountSasSignatureValues?alt=com.azure.storage.common.sas.AccountSasSignatureValues&text=AccountSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the code when generating a SAS."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateAccountSas(AccountSasSignatureValues accountSasSignatureValues, Context context)"
  desc: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>.\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref> for more information on how to construct an account SAS.\n\nThe snippet below generates a SAS that lasts for two days and gives the user read and list access to file systems and file shares.\n\n```java\nAccountSasPermission permissions = new AccountSasPermission()\n     .setListPermission(true)\n     .setReadPermission(true);\n AccountSasResourceType resourceTypes = new AccountSasResourceType().setContainer(true);\n AccountSasService services = new AccountSasService().setBlobAccess(true).setFileAccess(true);\n OffsetDateTime expiryTime = OffsetDateTime.now().plus(Duration.ofDays(2));\n\n AccountSasSignatureValues sasValues =\n     new AccountSasSignatureValues(expiryTime, permissions, services, resourceTypes);\n\n // Client must be authenticated via StorageSharedKeyCredential\n String sas = client.generateAccountSas(sasValues, new Context(\"key\", \"value\"));\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getAccountName()"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getAccountName()"
  name: "getAccountName()"
  nameWithType: "DataLakeServiceAsyncClient.getAccountName()"
  summary: "Get associated account name."
  syntax: "public String getAccountName()"
  desc: "Get associated account name."
  returns:
    description: "account name associated with this storage resource."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getAccountUrl()"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getAccountUrl()"
  name: "getAccountUrl()"
  nameWithType: "DataLakeServiceAsyncClient.getAccountUrl()"
  summary: "Gets the URL of the storage account represented by this client."
  syntax: "public String getAccountUrl()"
  desc: "Gets the URL of the storage account represented by this client."
  returns:
    description: "the URL."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getFileSystemAsyncClient(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getFileSystemAsyncClient(String fileSystemName)"
  name: "getFileSystemAsyncClient(String fileSystemName)"
  nameWithType: "DataLakeServiceAsyncClient.getFileSystemAsyncClient(String fileSystemName)"
  summary: "Initializes a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemAsyncClient\"></xref> object pointing to the specified file system."
  parameters:
  - description: "The name of the file system to point to. A value of null or empty string will be\n interpreted as pointing to the root file system and will be replaced by \"$root\"."
    name: "fileSystemName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeFileSystemAsyncClient getFileSystemAsyncClient(String fileSystemName)"
  desc: "Initializes a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemAsyncClient\"></xref> object pointing to the specified file system. This method does not create a file system. It simply constructs the URL to the file system and offers access to methods relevant to file systems.\n\n**Code Samples**\n\n```java\nDataLakeFileSystemAsyncClient dataLakeFileSystemAsyncClient = client.getFileSystemAsyncClient(\"fileSystemName\");\n```"
  returns:
    description: "A <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemAsyncClient\"></xref> object pointing to the specified file system"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient&text=DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getHttpPipeline()"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getHttpPipeline()"
  name: "getHttpPipeline()"
  nameWithType: "DataLakeServiceAsyncClient.getHttpPipeline()"
  summary: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  syntax: "public HttpPipeline getHttpPipeline()"
  desc: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  returns:
    description: "The pipeline."
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getProperties()"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getProperties()"
  name: "getProperties()"
  nameWithType: "DataLakeServiceAsyncClient.getProperties()"
  summary: "Gets the properties of a storage account\\\\u2019s Data<wbr>Lake service."
  syntax: "public Mono<DataLakeServiceProperties> getProperties()"
  desc: "Gets the properties of a storage account\\\\u2019s DataLake service. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.getProperties().subscribe(response ->\n     System.out.printf(\"Hour metrics enabled: %b, Minute metrics enabled: %b%n\",\n         response.getHourMetrics().isEnabled(),\n         response.getMinuteMetrics().isEnabled()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob-service-properties"
  returns:
    description: "A reactive response containing the storage account properties."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.DataLakeServiceProperties?alt=com.azure.storage.file.datalake.models.DataLakeServiceProperties&text=DataLakeServiceProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getPropertiesWithResponse()"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getPropertiesWithResponse()"
  name: "getPropertiesWithResponse()"
  nameWithType: "DataLakeServiceAsyncClient.getPropertiesWithResponse()"
  summary: "Gets the properties of a storage account\\\\u2019s Data<wbr>Lake service."
  syntax: "public Mono<Response<DataLakeServiceProperties>> getPropertiesWithResponse()"
  desc: "Gets the properties of a storage account\\\\u2019s DataLake service. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.getPropertiesWithResponse().subscribe(response ->\n     System.out.printf(\"Hour metrics enabled: %b, Minute metrics enabled: %b%n\",\n         response.getValue().getHourMetrics().isEnabled(),\n         response.getValue().getMinuteMetrics().isEnabled()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob-service-properties"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the storage\n account properties."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.DataLakeServiceProperties?alt=com.azure.storage.file.datalake.models.DataLakeServiceProperties&text=DataLakeServiceProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getServiceVersion()"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getServiceVersion()"
  name: "getServiceVersion()"
  nameWithType: "DataLakeServiceAsyncClient.getServiceVersion()"
  summary: "Gets the service version the client is using."
  syntax: "public DataLakeServiceVersion getServiceVersion()"
  desc: "Gets the service version the client is using."
  returns:
    description: "the service version the client is using."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeServiceVersion?alt=com.azure.storage.file.datalake.DataLakeServiceVersion&text=DataLakeServiceVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)"
  name: "getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)"
  nameWithType: "DataLakeServiceAsyncClient.getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)"
  summary: "Gets a user delegation key for use with this account's data lake storage."
  parameters:
  - description: "Start time for the key's validity. Null indicates immediate start."
    name: "start"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "Expiration of the key's validity."
    name: "expiry"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<UserDelegationKey> getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)"
  desc: "Gets a user delegation key for use with this account's data lake storage. Note: This method call is only valid when using <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential\"></xref> in this object's <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref>.\n\n**Code Samples**\n\n```java\nclient.getUserDelegationKey(delegationKeyStartTime, delegationKeyExpiryTime).subscribe(response ->\n     System.out.printf(\"User delegation key: %s%n\", response.getValue()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the user delegation key."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.UserDelegationKey?alt=com.azure.storage.file.datalake.models.UserDelegationKey&text=UserDelegationKey\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getUserDelegationKeyWithResponse(java.time.OffsetDateTime,java.time.OffsetDateTime)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry)"
  name: "getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry)"
  nameWithType: "DataLakeServiceAsyncClient.getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry)"
  summary: "Gets a user delegation key for use with this account's data lake storage."
  parameters:
  - description: "Start time for the key's validity. Null indicates immediate start."
    name: "start"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "Expiration of the key's validity."
    name: "expiry"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<UserDelegationKey>> getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry)"
  desc: "Gets a user delegation key for use with this account's data lake storage. Note: This method call is only valid when using <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential\"></xref> in this object's <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref>.\n\n**Code Samples**\n\n```java\nclient.getUserDelegationKeyWithResponse(delegationKeyStartTime, delegationKeyExpiryTime).subscribe(response ->\n     System.out.printf(\"User delegation key: %s%n\", response.getValue().getValue()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> containing the user\n delegation key."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.UserDelegationKey?alt=com.azure.storage.file.datalake.models.UserDelegationKey&text=UserDelegationKey\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems()"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems()"
  name: "listFileSystems()"
  nameWithType: "DataLakeServiceAsyncClient.listFileSystems()"
  summary: "Returns a reactive Publisher emitting all the file systems in this account lazily as needed."
  syntax: "public PagedFlux<FileSystemItem> listFileSystems()"
  desc: "Returns a reactive Publisher emitting all the file systems in this account lazily as needed. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.listFileSystems().subscribe(fileSystem -> System.out.printf(\"Name: %s%n\", fileSystem.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-containers2"
  returns:
    description: "A reactive response emitting the list of file systems."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.FileSystemItem?alt=com.azure.storage.file.datalake.models.FileSystemItem&text=FileSystemItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems(com.azure.storage.file.datalake.models.ListFileSystemsOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems(ListFileSystemsOptions options)"
  name: "listFileSystems(ListFileSystemsOptions options)"
  nameWithType: "DataLakeServiceAsyncClient.listFileSystems(ListFileSystemsOptions options)"
  summary: "Returns a reactive Publisher emitting all the file systems in this account lazily as needed."
  parameters:
  - description: "A <xref uid=\"com.azure.storage.file.datalake.models.ListFileSystemsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ListFileSystemsOptions\"></xref> which specifies what data should be returned by the service."
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.models.ListFileSystemsOptions?alt=com.azure.storage.file.datalake.models.ListFileSystemsOptions&text=ListFileSystemsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<FileSystemItem> listFileSystems(ListFileSystemsOptions options)"
  desc: "Returns a reactive Publisher emitting all the file systems in this account lazily as needed. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nListFileSystemsOptions options = new ListFileSystemsOptions()\n     .setPrefix(\"fileSystemNamePrefixToMatch\")\n     .setDetails(new FileSystemListDetails().setRetrieveMetadata(true));\n\n client.listFileSystems(options).subscribe(fileSystem -> System.out.printf(\"Name: %s%n\", fileSystem.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-containers2"
  returns:
    description: "A reactive response emitting the list of file systems."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.FileSystemItem?alt=com.azure.storage.file.datalake.models.FileSystemItem&text=FileSystemItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.setProperties(com.azure.storage.file.datalake.models.DataLakeServiceProperties)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.setProperties(DataLakeServiceProperties properties)"
  name: "setProperties(DataLakeServiceProperties properties)"
  nameWithType: "DataLakeServiceAsyncClient.setProperties(DataLakeServiceProperties properties)"
  summary: "Sets properties for a storage account's Data<wbr>Lake service endpoint."
  parameters:
  - description: "Configures the service."
    name: "properties"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeServiceProperties?alt=com.azure.storage.file.datalake.models.DataLakeServiceProperties&text=DataLakeServiceProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> setProperties(DataLakeServiceProperties properties)"
  desc: "Sets properties for a storage account's DataLake service endpoint. For more information, see the [Azure Docs][]. Note that setting the default service version has no effect when using this client because this client explicitly sets the version header on each request, overriding the default.\n\nThis method checks to ensure the properties being sent follow the specifications indicated in the Azure Docs. If CORS policies are set, CORS parameters that are not set default to the empty string.\n\n**Code Samples**\n\n```java\nDataLakeRetentionPolicy loggingRetentionPolicy = new DataLakeRetentionPolicy().setEnabled(true).setDays(3);\n DataLakeRetentionPolicy metricsRetentionPolicy = new DataLakeRetentionPolicy().setEnabled(true).setDays(1);\n\n DataLakeServiceProperties properties = new DataLakeServiceProperties()\n     .setLogging(new DataLakeAnalyticsLogging()\n         .setWrite(true)\n         .setDelete(true)\n         .setRetentionPolicy(loggingRetentionPolicy))\n     .setHourMetrics(new DataLakeMetrics()\n         .setEnabled(true)\n         .setRetentionPolicy(metricsRetentionPolicy))\n     .setMinuteMetrics(new DataLakeMetrics()\n         .setEnabled(true)\n         .setRetentionPolicy(metricsRetentionPolicy));\n\n client.setProperties(properties).subscribe(\n     response -> System.out.printf(\"Setting properties completed%n\"),\n     error -> System.out.printf(\"Setting properties failed: %s%n\", error));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-service-properties"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the storage account properties."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.setPropertiesWithResponse(com.azure.storage.file.datalake.models.DataLakeServiceProperties)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.setPropertiesWithResponse(DataLakeServiceProperties properties)"
  name: "setPropertiesWithResponse(DataLakeServiceProperties properties)"
  nameWithType: "DataLakeServiceAsyncClient.setPropertiesWithResponse(DataLakeServiceProperties properties)"
  summary: "Sets properties for a storage account's Data<wbr>Lake service endpoint."
  parameters:
  - description: "Configures the service."
    name: "properties"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeServiceProperties?alt=com.azure.storage.file.datalake.models.DataLakeServiceProperties&text=DataLakeServiceProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> setPropertiesWithResponse(DataLakeServiceProperties properties)"
  desc: "Sets properties for a storage account's DataLake service endpoint. For more information, see the [Azure Docs][]. Note that setting the default service version has no effect when using this client because this client explicitly sets the version header on each request, overriding the default.\n\nThis method checks to ensure the properties being sent follow the specifications indicated in the Azure Docs. If CORS policies are set, CORS parameters that are not set default to the empty string.\n\n**Code Samples**\n\n```java\nloggingRetentionPolicy = new DataLakeRetentionPolicy().setEnabled(true).setDays(3);\n metricsRetentionPolicy = new DataLakeRetentionPolicy().setEnabled(true).setDays(1);\n\n properties = new DataLakeServiceProperties()\n     .setLogging(new DataLakeAnalyticsLogging()\n         .setWrite(true)\n         .setDelete(true)\n         .setRetentionPolicy(loggingRetentionPolicy))\n     .setHourMetrics(new DataLakeMetrics()\n         .setEnabled(true)\n         .setRetentionPolicy(metricsRetentionPolicy))\n     .setMinuteMetrics(new DataLakeMetrics()\n         .setEnabled(true)\n         .setRetentionPolicy(metricsRetentionPolicy));\n\n client.setPropertiesWithResponse(properties).subscribe(response ->\n     System.out.printf(\"Setting properties completed with status %d%n\", response.getStatusCode()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-service-properties"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the storage account properties."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.undeleteFileSystem(java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.undeleteFileSystem(String deletedFileSystemName, String deletedFileSystemVersion)"
  name: "undeleteFileSystem(String deletedFileSystemName, String deletedFileSystemVersion)"
  nameWithType: "DataLakeServiceAsyncClient.undeleteFileSystem(String deletedFileSystemName, String deletedFileSystemVersion)"
  summary: "Restores a previously deleted file system."
  parameters:
  - description: "The name of the previously deleted file system."
    name: "deletedFileSystemName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The version of the previously deleted file system."
    name: "deletedFileSystemVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataLakeFileSystemAsyncClient> undeleteFileSystem(String deletedFileSystemName, String deletedFileSystemVersion)"
  desc: "Restores a previously deleted file system. If the file system associated with provided `deletedFileSystemName` already exists, this call will result in a 409 (conflict). This API is only functional if Container Soft Delete is enabled for the storage account associated with the file system.\n\n**Code Samples**\n\n```java\nListFileSystemsOptions listFileSystemsOptions = new ListFileSystemsOptions();\n listFileSystemsOptions.getDetails().setRetrieveDeleted(true);\n client.listFileSystems(listFileSystemsOptions).flatMap(\n     deletedFileSystem -> {\n         Mono<DataLakeFileSystemAsyncClient> fileSystemClient = client.undeleteFileSystem(\n             deletedFileSystem.getName(), deletedFileSystem.getVersion());\n         return fileSystemClient;\n     }\n ).then().block();\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemAsyncClient\"></xref> used\n to interact with the restored file system."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient&text=DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.undeleteFileSystemWithResponse(com.azure.storage.file.datalake.options.FileSystemUndeleteOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.undeleteFileSystemWithResponse(FileSystemUndeleteOptions options)"
  name: "undeleteFileSystemWithResponse(FileSystemUndeleteOptions options)"
  nameWithType: "DataLakeServiceAsyncClient.undeleteFileSystemWithResponse(FileSystemUndeleteOptions options)"
  summary: "Restores a previously deleted file system."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.FileSystemUndeleteOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileSystemUndeleteOptions\"></xref>."
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.FileSystemUndeleteOptions?alt=com.azure.storage.file.datalake.options.FileSystemUndeleteOptions&text=FileSystemUndeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataLakeFileSystemAsyncClient>> undeleteFileSystemWithResponse(FileSystemUndeleteOptions options)"
  desc: "Restores a previously deleted file system. The restored file system will be renamed to the `destinationFileSystemName` if provided in `options`. Otherwise `deletedFileSystemName` is used as the destination file system name. If the file system associated with provided `destinationFileSystemName` already exists, this call will result in a 409 (conflict). This API is only functional if Container Soft Delete is enabled for the storage account associated with the file system.\n\n**Code Samples**\n\n```java\nListFileSystemsOptions listFileSystemsOptions = new ListFileSystemsOptions();\n listFileSystemsOptions.getDetails().setRetrieveDeleted(true);\n client.listFileSystems(listFileSystemsOptions).flatMap(\n     deletedFileSystem -> {\n         Mono<DataLakeFileSystemAsyncClient> fileSystemClient = client.undeleteFileSystemWithResponse(\n             new FileSystemUndeleteOptions(deletedFileSystem.getName(), deletedFileSystem.getVersion()))\n             .map(Response::getValue);\n         return fileSystemClient;\n     }\n ).then().block();\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemAsyncClient\"></xref> used to interact with the restored file system."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient&text=DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Client to a storage account. It may only be instantiated through a <xref uid=\"com.azure.storage.file.datalake.DataLakeServiceClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceClientBuilder\"></xref>. This class does not hold any state about a particular storage account but is instead a convenient way of sending off appropriate requests to the resource on the service. It may also be used to construct URLs to file systems, files and directories.\n\nThis client contains operations on the main data lake service account. Operations on a file system are available on <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemAsyncClient\"></xref> through <xref uid=\"com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getFileSystemAsyncClient(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getFileSystemAsyncClient(String)\"></xref>, and operations on a file or directory are available on <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref> or <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref>.\n\nNote this client is an async client that returns reactive responses from Spring Reactor Core project (https://projectreactor.io/). Calling the methods in this client will **NOT** start the actual network operation, until `.subscribe()` is called on the reactive response. You can simply convert one of these responses to a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.concurrent.CompletableFuture\"></xref> object through <xref uid=\"reactor.core.publisher.Mono.toFuture*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono#toFuture()\"></xref>."
metadata: {}
package: "com.azure.storage.file.datalake"
artifact: com.azure:azure-storage-file-datalake:12.12.0
