### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient"
fullName: "com.azure.storage.file.datalake.DataLakeServiceAsyncClient"
name: "DataLakeServiceAsyncClient"
nameWithType: "DataLakeServiceAsyncClient"
summary: "Client to a storage account. It may only be instantiated through a <xref uid=\"com.azure.storage.file.datalake.DataLakeServiceClientBuilder\" data-throw-if-not-resolved=\"false\">DataLakeServiceClientBuilder</xref>. This class does not hold any state about a particular storage account but is instead a convenient way of sending off appropriate requests to the resource on the service. It may also be used to construct URLs to file systems, files and directories.\n\nThis client contains operations on the main data lake service account. Operations on a file system are available on <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"false\">DataLakeFileSystemAsyncClient</xref> through <xref uid=\"com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getFileSystemAsyncClient(java.lang.String)\" data-throw-if-not-resolved=\"false\">#getFileSystemAsyncClient(String)</xref>, and operations on a file or directory are available on <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\">DataLakeFileAsyncClient</xref> or <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\">DataLakeDirectoryAsyncClient</xref>.\n\nNote this client is an async client that returns reactive responses from Spring Reactor Core project (https://projectreactor.io/). Calling the methods in this client will **NOT** start the actual network operation, until `.subscribe()` is called on the reactive response. You can simply convert one of these responses to a <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.concurrent.CompletableFuture</xref> object through <xref uid=\"reactor.core.publisher.Mono.toFuture*\" data-throw-if-not-resolved=\"false\">Mono#toFuture()</xref>."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class DataLakeServiceAsyncClient"
methods:
- "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.createFileSystem(java.lang.String)"
- "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.createFileSystemWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.PublicAccessType)"
- "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystem(java.lang.String)"
- "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystemWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues)"
- "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getAccountName()"
- "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getAccountUrl()"
- "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getFileSystemAsyncClient(java.lang.String)"
- "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getHttpPipeline()"
- "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getServiceVersion()"
- "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)"
- "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getUserDelegationKeyWithResponse(java.time.OffsetDateTime,java.time.OffsetDateTime)"
- "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems()"
- "com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems(com.azure.storage.file.datalake.models.ListFileSystemsOptions)"
type: "class"
metadata: {}
package: "com.azure.storage.file.datalake"
artifact: com.azure:azure-storage-file-datalake:12.2.0
