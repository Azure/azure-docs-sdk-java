### YamlMime:JavaType
uid: "com.azure.cosmos.CosmosContainer"
fullName: "com.azure.cosmos.CosmosContainer"
name: "CosmosContainer"
nameWithType: "CosmosContainer"
summary: "Provides synchronous methods for reading, deleting, and replacing existing Containers Provides methods for interacting with child resources (Items, Scripts, Conflicts)"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class CosmosContainer"
methods:
- uid: "com.azure.cosmos.CosmosContainer.<T>createItem(T)"
  fullName: "com.azure.cosmos.CosmosContainer.<T>createItem(T item)"
  name: "<T>createItem(T item)"
  nameWithType: "CosmosContainer.<T>createItem(T item)"
  summary: "Creates a new item synchronously and returns its respective Cosmos item response."
  parameters:
  - description: "the item"
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosItemResponse<T> <T>createItem(T item)"
  desc: "Creates a new item synchronously and returns its respective Cosmos item response."
  returns:
    description: "the Cosmos item response"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.<T>createItem(T,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.CosmosContainer.<T>createItem(T item, CosmosItemRequestOptions options)"
  name: "<T>createItem(T item, CosmosItemRequestOptions options)"
  nameWithType: "CosmosContainer.<T>createItem(T item, CosmosItemRequestOptions options)"
  summary: "Creates a new item synchronously and returns its respective Cosmos item response while specifying additional options."
  parameters:
  - description: "the item."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosItemResponse<T> <T>createItem(T item, CosmosItemRequestOptions options)"
  desc: "Creates a new item synchronously and returns its respective Cosmos item response while specifying additional options.\n\nThe partition key value will be automatically extracted from the item's content."
  returns:
    description: "the cosmos item response."
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.<T>createItem(T,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.CosmosContainer.<T>createItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  name: "<T>createItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  nameWithType: "CosmosContainer.<T>createItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  summary: "Creates a new item synchronously and returns its respective Cosmos item response while specifying additional options."
  parameters:
  - description: "the item."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosItemResponse<T> <T>createItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  desc: "Creates a new item synchronously and returns its respective Cosmos item response while specifying additional options."
  returns:
    description: "the Cosmos item response."
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.<T>deleteItem(T,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.CosmosContainer.<T>deleteItem(T item, CosmosItemRequestOptions options)"
  name: "<T>deleteItem(T item, CosmosItemRequestOptions options)"
  nameWithType: "CosmosContainer.<T>deleteItem(T item, CosmosItemRequestOptions options)"
  summary: "Deletes an item in the current container."
  parameters:
  - description: "the item to be deleted."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosItemResponse<Object> <T>deleteItem(T item, CosmosItemRequestOptions options)"
  desc: "Deletes an item in the current container."
  returns:
    description: "the Cosmos item response."
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.<T>patchItem(java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosPatchOperations,com.azure.cosmos.models.CosmosPatchItemRequestOptions,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosContainer.<T>patchItem(String itemId, PartitionKey partitionKey, CosmosPatchOperations cosmosPatchOperations, CosmosPatchItemRequestOptions options, Class<T> itemType)"
  name: "<T>patchItem(String itemId, PartitionKey partitionKey, CosmosPatchOperations cosmosPatchOperations, CosmosPatchItemRequestOptions options, Class<T> itemType)"
  nameWithType: "CosmosContainer.<T>patchItem(String itemId, PartitionKey partitionKey, CosmosPatchOperations cosmosPatchOperations, CosmosPatchItemRequestOptions options, Class<T> itemType)"
  summary: "Run patch operations on an Item."
  parameters:
  - description: "the item id."
    name: "itemId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "Represents a container having list of operations to be sequentially applied to the referred Cosmos item."
    name: "cosmosPatchOperations"
    type: "<xref href=\"com.azure.cosmos.models.CosmosPatchOperations?alt=com.azure.cosmos.models.CosmosPatchOperations&text=CosmosPatchOperations\" data-throw-if-not-resolved=\"False\" />"
  - description: "the request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosPatchItemRequestOptions?alt=com.azure.cosmos.models.CosmosPatchItemRequestOptions&text=CosmosPatchItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the item type."
    name: "itemType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CosmosItemResponse<T> <T>patchItem(String itemId, PartitionKey partitionKey, CosmosPatchOperations cosmosPatchOperations, CosmosPatchItemRequestOptions options, Class<T> itemType)"
  desc: "Run patch operations on an Item."
  returns:
    description: "the Cosmos item resource response with the patched item or an exception."
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.<T>patchItem(java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosPatchOperations,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosContainer.<T>patchItem(String itemId, PartitionKey partitionKey, CosmosPatchOperations cosmosPatchOperations, Class<T> itemType)"
  name: "<T>patchItem(String itemId, PartitionKey partitionKey, CosmosPatchOperations cosmosPatchOperations, Class<T> itemType)"
  nameWithType: "CosmosContainer.<T>patchItem(String itemId, PartitionKey partitionKey, CosmosPatchOperations cosmosPatchOperations, Class<T> itemType)"
  summary: "Run patch operations on an Item."
  parameters:
  - description: "the item id."
    name: "itemId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "Represents a container having list of operations to be sequentially applied to the referred Cosmos item."
    name: "cosmosPatchOperations"
    type: "<xref href=\"com.azure.cosmos.models.CosmosPatchOperations?alt=com.azure.cosmos.models.CosmosPatchOperations&text=CosmosPatchOperations\" data-throw-if-not-resolved=\"False\" />"
  - description: "the item type."
    name: "itemType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CosmosItemResponse<T> <T>patchItem(String itemId, PartitionKey partitionKey, CosmosPatchOperations cosmosPatchOperations, Class<T> itemType)"
  desc: "Run patch operations on an Item."
  returns:
    description: "the Cosmos item resource response with the patched item or an exception."
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.<T>queryChangeFeed(com.azure.cosmos.models.CosmosChangeFeedRequestOptions,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosContainer.<T>queryChangeFeed(CosmosChangeFeedRequestOptions options, Class<T> classType)"
  name: "<T>queryChangeFeed(CosmosChangeFeedRequestOptions options, Class<T> classType)"
  nameWithType: "CosmosContainer.<T>queryChangeFeed(CosmosChangeFeedRequestOptions options, Class<T> classType)"
  summary: "Query for items in the change feed of the current container using the <xref uid=\"com.azure.cosmos.models.CosmosChangeFeedRequestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosChangeFeedRequestOptions\"></xref>."
  parameters:
  - description: "the change feed request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosChangeFeedRequestOptions?alt=com.azure.cosmos.models.CosmosChangeFeedRequestOptions&text=CosmosChangeFeedRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the class type."
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CosmosPagedIterable<T> <T>queryChangeFeed(CosmosChangeFeedRequestOptions options, Class<T> classType)"
  desc: "Query for items in the change feed of the current container using the <xref uid=\"com.azure.cosmos.models.CosmosChangeFeedRequestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosChangeFeedRequestOptions\"></xref>.\n\nThe next page can be retrieved by calling queryChangeFeed again with a new instance of <xref uid=\"com.azure.cosmos.models.CosmosChangeFeedRequestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosChangeFeedRequestOptions\"></xref> created from the continuation token of the previously returned <xref uid=\"com.azure.cosmos.models.FeedResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeedResponse\"></xref> instance."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one feed response page"
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedIterable?alt=com.azure.cosmos.util.CosmosPagedIterable&text=CosmosPagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.<T>queryItems(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosContainer.<T>queryItems(SqlQuerySpec querySpec, CosmosQueryRequestOptions options, Class<T> classType)"
  name: "<T>queryItems(SqlQuerySpec querySpec, CosmosQueryRequestOptions options, Class<T> classType)"
  nameWithType: "CosmosContainer.<T>queryItems(SqlQuerySpec querySpec, CosmosQueryRequestOptions options, Class<T> classType)"
  summary: "Query items in the current container returning the results as <xref uid=\"com.azure.cosmos.util.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedIterable\"></xref>."
  parameters:
  - description: "the query spec."
    name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  - description: "the options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the class type."
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CosmosPagedIterable<T> <T>queryItems(SqlQuerySpec querySpec, CosmosQueryRequestOptions options, Class<T> classType)"
  desc: "Query items in the current container returning the results as <xref uid=\"com.azure.cosmos.util.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedIterable\"></xref>."
  returns:
    description: "the <xref uid=\"com.azure.cosmos.util.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedIterable\"></xref>."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedIterable?alt=com.azure.cosmos.util.CosmosPagedIterable&text=CosmosPagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.<T>queryItems(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosContainer.<T>queryItems(String query, CosmosQueryRequestOptions options, Class<T> classType)"
  name: "<T>queryItems(String query, CosmosQueryRequestOptions options, Class<T> classType)"
  nameWithType: "CosmosContainer.<T>queryItems(String query, CosmosQueryRequestOptions options, Class<T> classType)"
  summary: "Query items in the current container returning the results as <xref uid=\"com.azure.cosmos.util.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedIterable\"></xref>."
  parameters:
  - description: "the query."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the class type."
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CosmosPagedIterable<T> <T>queryItems(String query, CosmosQueryRequestOptions options, Class<T> classType)"
  desc: "Query items in the current container returning the results as <xref uid=\"com.azure.cosmos.util.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedIterable\"></xref>."
  returns:
    description: "the <xref uid=\"com.azure.cosmos.util.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedIterable\"></xref>."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedIterable?alt=com.azure.cosmos.util.CosmosPagedIterable&text=CosmosPagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.<T>readAllItems(com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosQueryRequestOptions,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosContainer.<T>readAllItems(PartitionKey partitionKey, CosmosQueryRequestOptions options, Class<T> classType)"
  name: "<T>readAllItems(PartitionKey partitionKey, CosmosQueryRequestOptions options, Class<T> classType)"
  nameWithType: "CosmosContainer.<T>readAllItems(PartitionKey partitionKey, CosmosQueryRequestOptions options, Class<T> classType)"
  summary: "Reads all the items of a logical partition returning the results as <xref uid=\"com.azure.cosmos.util.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedIterable\"></xref>."
  parameters:
  - description: "the partition key value of the documents that need to be read"
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the feed options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the class type."
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CosmosPagedIterable<T> <T>readAllItems(PartitionKey partitionKey, CosmosQueryRequestOptions options, Class<T> classType)"
  desc: "Reads all the items of a logical partition returning the results as <xref uid=\"com.azure.cosmos.util.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedIterable\"></xref>."
  returns:
    description: "the <xref uid=\"com.azure.cosmos.util.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedIterable\"></xref>."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedIterable?alt=com.azure.cosmos.util.CosmosPagedIterable&text=CosmosPagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.<T>readAllItems(com.azure.cosmos.models.PartitionKey,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosContainer.<T>readAllItems(PartitionKey partitionKey, Class<T> classType)"
  name: "<T>readAllItems(PartitionKey partitionKey, Class<T> classType)"
  nameWithType: "CosmosContainer.<T>readAllItems(PartitionKey partitionKey, Class<T> classType)"
  summary: "Reads all the items of a logical partition returning the results as <xref uid=\"com.azure.cosmos.util.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedIterable\"></xref>."
  parameters:
  - description: "the partition key value of the documents that need to be read"
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the class type."
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CosmosPagedIterable<T> <T>readAllItems(PartitionKey partitionKey, Class<T> classType)"
  desc: "Reads all the items of a logical partition returning the results as <xref uid=\"com.azure.cosmos.util.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedIterable\"></xref>."
  returns:
    description: "the <xref uid=\"com.azure.cosmos.util.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedIterable\"></xref>."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedIterable?alt=com.azure.cosmos.util.CosmosPagedIterable&text=CosmosPagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.<T>readItem(java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosContainer.<T>readItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options, Class<T> itemType)"
  name: "<T>readItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options, Class<T> itemType)"
  nameWithType: "CosmosContainer.<T>readItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options, Class<T> itemType)"
  summary: "Reads an item in the current container while specifying additional options."
  parameters:
  - description: "the item id."
    name: "itemId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the class type of item."
    name: "itemType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CosmosItemResponse<T> <T>readItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options, Class<T> itemType)"
  desc: "Reads an item in the current container while specifying additional options."
  returns:
    description: "the Cosmos item response."
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.<T>readItem(java.lang.String,com.azure.cosmos.models.PartitionKey,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosContainer.<T>readItem(String itemId, PartitionKey partitionKey, Class<T> itemType)"
  name: "<T>readItem(String itemId, PartitionKey partitionKey, Class<T> itemType)"
  nameWithType: "CosmosContainer.<T>readItem(String itemId, PartitionKey partitionKey, Class<T> itemType)"
  summary: "Reads an item in the current container."
  parameters:
  - description: "the item id."
    name: "itemId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the class type of item."
    name: "itemType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CosmosItemResponse<T> <T>readItem(String itemId, PartitionKey partitionKey, Class<T> itemType)"
  desc: "Reads an item in the current container."
  returns:
    description: "the Cosmos item response."
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.<T>readMany(java.util.List<com.azure.cosmos.models.CosmosItemIdentity>,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosContainer.<T>readMany(List<CosmosItemIdentity> itemIdentityList, Class<T> classType)"
  name: "<T>readMany(List<CosmosItemIdentity> itemIdentityList, Class<T> classType)"
  nameWithType: "CosmosContainer.<T>readMany(List<CosmosItemIdentity> itemIdentityList, Class<T> classType)"
  summary: "Reads many documents."
  parameters:
  - description: "CosmosItem id and partition key tuple of items that that needs to be read"
    name: "itemIdentityList"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemIdentity?alt=com.azure.cosmos.models.CosmosItemIdentity&text=CosmosItemIdentity\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "class type"
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public FeedResponse<T> <T>readMany(List<CosmosItemIdentity> itemIdentityList, Class<T> classType)"
  desc: "Reads many documents."
  returns:
    description: "a Mono with feed response of cosmos items"
    type: "<xref href=\"com.azure.cosmos.models.FeedResponse?alt=com.azure.cosmos.models.FeedResponse&text=FeedResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.<T>readMany(java.util.List<com.azure.cosmos.models.CosmosItemIdentity>,java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosContainer.<T>readMany(List<CosmosItemIdentity> itemIdentityList, String sessionToken, Class<T> classType)"
  name: "<T>readMany(List<CosmosItemIdentity> itemIdentityList, String sessionToken, Class<T> classType)"
  nameWithType: "CosmosContainer.<T>readMany(List<CosmosItemIdentity> itemIdentityList, String sessionToken, Class<T> classType)"
  summary: "Reads many documents."
  parameters:
  - description: "CosmosItem id and partition key tuple of items that that needs to be read"
    name: "itemIdentityList"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemIdentity?alt=com.azure.cosmos.models.CosmosItemIdentity&text=CosmosItemIdentity\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the optional Session token - null if the read can be made without specific session token"
    name: "sessionToken"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "class type"
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public FeedResponse<T> <T>readMany(List<CosmosItemIdentity> itemIdentityList, String sessionToken, Class<T> classType)"
  desc: "Reads many documents."
  returns:
    description: "a Mono with feed response of cosmos items"
    type: "<xref href=\"com.azure.cosmos.models.FeedResponse?alt=com.azure.cosmos.models.FeedResponse&text=FeedResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.<T>replaceItem(T,java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.CosmosContainer.<T>replaceItem(T item, String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  name: "<T>replaceItem(T item, String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  nameWithType: "CosmosContainer.<T>replaceItem(T item, String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  summary: "Replaces an item in the current container."
  parameters:
  - description: "the item."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the item id."
    name: "itemId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosItemResponse<T> <T>replaceItem(T item, String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  desc: "Replaces an item in the current container."
  returns:
    description: "the Cosmos item response."
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.<T>upsertItem(T)"
  fullName: "com.azure.cosmos.CosmosContainer.<T>upsertItem(T item)"
  name: "<T>upsertItem(T item)"
  nameWithType: "CosmosContainer.<T>upsertItem(T item)"
  summary: "Upserts an Cosmos item in the current container."
  parameters:
  - description: "the item."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosItemResponse<T> <T>upsertItem(T item)"
  desc: "Upserts an Cosmos item in the current container."
  returns:
    description: "the Cosmos item response."
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.<T>upsertItem(T,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.CosmosContainer.<T>upsertItem(T item, CosmosItemRequestOptions options)"
  name: "<T>upsertItem(T item, CosmosItemRequestOptions options)"
  nameWithType: "CosmosContainer.<T>upsertItem(T item, CosmosItemRequestOptions options)"
  summary: "Upserts a item Cosmos sync item while specifying additional options."
  parameters:
  - description: "the item."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosItemResponse<T> <T>upsertItem(T item, CosmosItemRequestOptions options)"
  desc: "Upserts a item Cosmos sync item while specifying additional options."
  returns:
    description: "the Cosmos item response."
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.<T>upsertItem(T,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.CosmosContainer.<T>upsertItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  name: "<T>upsertItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  nameWithType: "CosmosContainer.<T>upsertItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  summary: "Upserts a item Cosmos sync item while specifying additional options."
  parameters:
  - description: "the item."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partitionKey."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosItemResponse<T> <T>upsertItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  desc: "Upserts a item Cosmos sync item while specifying additional options."
  returns:
    description: "the Cosmos item response."
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.<TContext>executeBulkOperations(java.lang.Iterable<com.azure.cosmos.models.CosmosItemOperation>)"
  fullName: "com.azure.cosmos.CosmosContainer.<TContext>executeBulkOperations(Iterable<CosmosItemOperation> operations)"
  name: "<TContext>executeBulkOperations(Iterable<CosmosItemOperation> operations)"
  nameWithType: "CosmosContainer.<TContext>executeBulkOperations(Iterable<CosmosItemOperation> operations)"
  summary: "Executes list of operations in Bulk."
  parameters:
  - description: "list of operation which will be executed by this container."
    name: "operations"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemOperation?alt=com.azure.cosmos.models.CosmosItemOperation&text=CosmosItemOperation\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Iterable<CosmosBulkOperationResponse<TContext>> <TContext>executeBulkOperations(Iterable<CosmosItemOperation> operations)"
  desc: "Executes list of operations in Bulk."
  returns:
    description: "An Iterable of <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse\"></xref> which contains operation and it's response or exception.\n <p>\n     To create a operation which can be executed here, use <xref uid=\"com.azure.cosmos.models.CosmosBulkOperations\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkOperations\"></xref>. For eg.\n     for a upsert operation use <xref uid=\"com.azure.cosmos.models.CosmosBulkOperations.getUpsertItemOperation*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkOperations#getUpsertItemOperation(Object, PartitionKey)\"></xref>\n </p>\n <p>\n     We can get the corresponding operation using <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse.getOperation()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse#getOperation()\"></xref> and\n     it's response using <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse.getResponse()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse#getResponse()\"></xref>. If the operation was executed\n     successfully, the value returned by <xref uid=\"com.azure.cosmos.models.CosmosBulkItemResponse.isSuccessStatusCode()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkItemResponse#isSuccessStatusCode()\"></xref> will be true. To get\n     actual status use <xref uid=\"com.azure.cosmos.models.CosmosBulkItemResponse.getStatusCode()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkItemResponse#getStatusCode()\"></xref>.\n </p>\n To check if the operation had any exception, use <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse.getException()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse#getException()\"></xref> to\n get the exception."
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosBulkOperationResponse?alt=com.azure.cosmos.models.CosmosBulkOperationResponse&text=CosmosBulkOperationResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"TContext?alt=TContext&text=TContext\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosContainer.<TContext>executeBulkOperations(java.lang.Iterable<com.azure.cosmos.models.CosmosItemOperation>,com.azure.cosmos.models.CosmosBulkExecutionOptions)"
  fullName: "com.azure.cosmos.CosmosContainer.<TContext>executeBulkOperations(Iterable<CosmosItemOperation> operations, CosmosBulkExecutionOptions bulkOptions)"
  name: "<TContext>executeBulkOperations(Iterable<CosmosItemOperation> operations, CosmosBulkExecutionOptions bulkOptions)"
  nameWithType: "CosmosContainer.<TContext>executeBulkOperations(Iterable<CosmosItemOperation> operations, CosmosBulkExecutionOptions bulkOptions)"
  summary: "Executes list of operations in Bulk."
  parameters:
  - description: "list of operation which will be executed by this container."
    name: "operations"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemOperation?alt=com.azure.cosmos.models.CosmosItemOperation&text=CosmosItemOperation\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Options that apply for this Bulk request which specifies options regarding execution like\n                    concurrency, batching size, interval and context."
    name: "bulkOptions"
    type: "<xref href=\"com.azure.cosmos.models.CosmosBulkExecutionOptions?alt=com.azure.cosmos.models.CosmosBulkExecutionOptions&text=CosmosBulkExecutionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Iterable<CosmosBulkOperationResponse<TContext>> <TContext>executeBulkOperations(Iterable<CosmosItemOperation> operations, CosmosBulkExecutionOptions bulkOptions)"
  desc: "Executes list of operations in Bulk."
  returns:
    description: "An Iterable of <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse\"></xref> which contains operation and it's response or exception.\n <p>\n     To create a operation which can be executed here, use <xref uid=\"com.azure.cosmos.models.CosmosBulkOperations\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkOperations\"></xref>. For eg.\n     for a upsert operation use <xref uid=\"com.azure.cosmos.models.CosmosBulkOperations.getUpsertItemOperation*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkOperations#getUpsertItemOperation(Object, PartitionKey)\"></xref>\n </p>\n <p>\n     We can get the corresponding operation using <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse.getOperation()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse#getOperation()\"></xref> and\n     it's response using <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse.getResponse()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse#getResponse()\"></xref>. If the operation was executed\n     successfully, the value returned by <xref uid=\"com.azure.cosmos.models.CosmosBulkItemResponse.isSuccessStatusCode()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkItemResponse#isSuccessStatusCode()\"></xref> will be true. To get\n     actual status use <xref uid=\"com.azure.cosmos.models.CosmosBulkItemResponse.getStatusCode()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkItemResponse#getStatusCode()\"></xref>.\n </p>\n To check if the operation had any exception, use <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse.getException()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse#getException()\"></xref> to\n get the exception."
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosBulkOperationResponse?alt=com.azure.cosmos.models.CosmosBulkOperationResponse&text=CosmosBulkOperationResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"TContext?alt=TContext&text=TContext\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosContainer.delete()"
  fullName: "com.azure.cosmos.CosmosContainer.delete()"
  name: "delete()"
  nameWithType: "CosmosContainer.delete()"
  summary: "Deletes the current cosmos container."
  syntax: "public CosmosContainerResponse delete()"
  desc: "Deletes the current cosmos container."
  returns:
    description: "the cosmos container response."
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosContainer.delete(com.azure.cosmos.models.CosmosContainerRequestOptions)"
  fullName: "com.azure.cosmos.CosmosContainer.delete(CosmosContainerRequestOptions options)"
  name: "delete(CosmosContainerRequestOptions options)"
  nameWithType: "CosmosContainer.delete(CosmosContainerRequestOptions options)"
  summary: "Deletes the current Cosmos container while specifying additional options such as If-Match."
  parameters:
  - description: "the options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerRequestOptions?alt=com.azure.cosmos.models.CosmosContainerRequestOptions&text=CosmosContainerRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosContainerResponse delete(CosmosContainerRequestOptions options)"
  desc: "Deletes the current Cosmos container while specifying additional options such as If-Match."
  returns:
    description: "the cosmos container response."
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosContainer.deleteAllItemsByPartitionKey(com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.CosmosContainer.deleteAllItemsByPartitionKey(PartitionKey partitionKey, CosmosItemRequestOptions options)"
  name: "deleteAllItemsByPartitionKey(PartitionKey partitionKey, CosmosItemRequestOptions options)"
  nameWithType: "CosmosContainer.deleteAllItemsByPartitionKey(PartitionKey partitionKey, CosmosItemRequestOptions options)"
  summary: "Deletes all items in the Container with the specified partition<wbr>Key value."
  parameters:
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosItemResponse<Object> deleteAllItemsByPartitionKey(PartitionKey partitionKey, CosmosItemRequestOptions options)"
  desc: "Deletes all items in the Container with the specified partitionKey value. Starts an asynchronous Cosmos DB background operation which deletes all items in the Container with the specified value. The asynchronous Cosmos DB background operation runs using a percentage of user RUs."
  returns:
    description: "the Cosmos item response"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.deleteItem(java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.CosmosContainer.deleteItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  name: "deleteItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  nameWithType: "CosmosContainer.deleteItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  summary: "Deletes an item in the current container."
  parameters:
  - description: "the item id."
    name: "itemId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosItemResponse<Object> deleteItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  desc: "Deletes an item in the current container."
  returns:
    description: "the Cosmos item response."
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.enableGlobalThroughputControlGroup(com.azure.cosmos.ThroughputControlGroupConfig,com.azure.cosmos.GlobalThroughputControlConfig)"
  fullName: "com.azure.cosmos.CosmosContainer.enableGlobalThroughputControlGroup(ThroughputControlGroupConfig groupConfig, GlobalThroughputControlConfig globalControlConfig)"
  name: "enableGlobalThroughputControlGroup(ThroughputControlGroupConfig groupConfig, GlobalThroughputControlConfig globalControlConfig)"
  nameWithType: "CosmosContainer.enableGlobalThroughputControlGroup(ThroughputControlGroupConfig groupConfig, GlobalThroughputControlConfig globalControlConfig)"
  summary: "Enable the throughput control group with global control mode."
  parameters:
  - description: "The throughput control group configuration, see <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"GlobalThroughputControlGroup\"></xref>."
    name: "groupConfig"
    type: "<xref href=\"com.azure.cosmos.ThroughputControlGroupConfig?alt=com.azure.cosmos.ThroughputControlGroupConfig&text=ThroughputControlGroupConfig\" data-throw-if-not-resolved=\"False\" />"
  - description: "The global throughput control configuration, see <xref uid=\"com.azure.cosmos.GlobalThroughputControlConfig\" data-throw-if-not-resolved=\"false\" data-raw-source=\"GlobalThroughputControlConfig\"></xref>."
    name: "globalControlConfig"
    type: "<xref href=\"com.azure.cosmos.GlobalThroughputControlConfig?alt=com.azure.cosmos.GlobalThroughputControlConfig&text=GlobalThroughputControlConfig\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void enableGlobalThroughputControlGroup(ThroughputControlGroupConfig groupConfig, GlobalThroughputControlConfig globalControlConfig)"
  desc: "Enable the throughput control group with global control mode. The defined throughput limit will be shared across different clients.\n\n```java\nThroughputControlGroupConfig groupConfig =\n     new ThroughputControlGroupConfigBuilder()\n         .groupName(\"localControlGroup\")\n         .targetThroughputThreshold(0.1)\n         .build();\n\n GlobalThroughputControlConfig globalControlConfig =\n     this.client.createGlobalThroughputControlConfigBuilder(database.getId(), container.getId())\n         .setControlItemRenewInterval(Duration.ofSeconds(5))\n         .setControlItemExpireInterval(Duration.ofSeconds(10))\n         .build();\n\n container.enableGlobalThroughputControlGroup(groupConfig, globalControlConfig);\n```"
- uid: "com.azure.cosmos.CosmosContainer.enableLocalThroughputControlGroup(com.azure.cosmos.ThroughputControlGroupConfig)"
  fullName: "com.azure.cosmos.CosmosContainer.enableLocalThroughputControlGroup(ThroughputControlGroupConfig groupConfig)"
  name: "enableLocalThroughputControlGroup(ThroughputControlGroupConfig groupConfig)"
  nameWithType: "CosmosContainer.enableLocalThroughputControlGroup(ThroughputControlGroupConfig groupConfig)"
  summary: "Enable the throughput control group with local control mode."
  parameters:
  - description: "A <xref uid=\"com.azure.cosmos.GlobalThroughputControlConfig\" data-throw-if-not-resolved=\"false\" data-raw-source=\"GlobalThroughputControlConfig\"></xref>."
    name: "groupConfig"
    type: "<xref href=\"com.azure.cosmos.ThroughputControlGroupConfig?alt=com.azure.cosmos.ThroughputControlGroupConfig&text=ThroughputControlGroupConfig\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void enableLocalThroughputControlGroup(ThroughputControlGroupConfig groupConfig)"
  desc: "Enable the throughput control group with local control mode.\n\n```java\nThroughputControlGroupConfig groupConfig =\n     new ThroughputControlGroupConfigBuilder()\n         .groupName(\"localControlGroup\")\n         .targetThroughputThreshold(0.1)\n         .build();\n\n container.enableLocalThroughputControlGroup(groupConfig);\n```"
- uid: "com.azure.cosmos.CosmosContainer.executeCosmosBatch(com.azure.cosmos.models.CosmosBatch)"
  fullName: "com.azure.cosmos.CosmosContainer.executeCosmosBatch(CosmosBatch cosmosBatch)"
  name: "executeCosmosBatch(CosmosBatch cosmosBatch)"
  nameWithType: "CosmosContainer.executeCosmosBatch(CosmosBatch cosmosBatch)"
  summary: "Executes the transactional batch."
  parameters:
  - description: "Batch having list of operation and partition key which will be executed by this container."
    name: "cosmosBatch"
    type: "<xref href=\"com.azure.cosmos.models.CosmosBatch?alt=com.azure.cosmos.models.CosmosBatch&text=CosmosBatch\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosBatchResponse executeCosmosBatch(CosmosBatch cosmosBatch)"
  desc: "Executes the transactional batch."
  returns:
    description: "A TransactionalBatchResponse which contains details of execution of the transactional batch.\n <p>\n If the transactional batch executes successfully, the value returned by <xref uid=\"com.azure.cosmos.models.CosmosBatchResponse.getStatusCode*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchResponse#getStatusCode\"></xref> on the response returned will be set to 200}.\n <p>\n If an operation within the transactional batch fails during execution, no changes from the batch will be\n committed and the status of the failing operation is made available by <xref uid=\"com.azure.cosmos.models.CosmosBatchResponse.getStatusCode*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchResponse#getStatusCode\"></xref> or by the exception. To obtain information about the operations\n that failed in case of some user error like conflict, not found etc, the response can be enumerated.\n This returns <xref uid=\"com.azure.cosmos.models.CosmosBatchOperationResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchOperationResult\"></xref> instances corresponding to each operation in the\n transactional batch in the order they were added to the transactional batch.\n For a result corresponding to an operation within the transactional batch, use\n <xref uid=\"com.azure.cosmos.models.CosmosBatchOperationResult.getStatusCode*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchOperationResult#getStatusCode\"></xref>\n to access the status of the operation. If the operation was not executed or it was aborted due to the failure of\n another operation within the transactional batch, the value of this field will be 424;\n for the operation that caused the batch to abort, the value of this field\n will indicate the cause of failure.\n <p>\n If there are issues such as request timeouts, Gone, session not available, network failure\n or if the service somehow returns 5xx then this will throw an exception instead of returning a CosmosBatchResponse.\n <p>\n Use <xref uid=\"com.azure.cosmos.models.CosmosBatchResponse.isSuccessStatusCode*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchResponse#isSuccessStatusCode\"></xref> on the response returned to ensure that the\n transactional batch succeeded."
    type: "<xref href=\"com.azure.cosmos.models.CosmosBatchResponse?alt=com.azure.cosmos.models.CosmosBatchResponse&text=CosmosBatchResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosContainer.executeCosmosBatch(com.azure.cosmos.models.CosmosBatch,com.azure.cosmos.models.CosmosBatchRequestOptions)"
  fullName: "com.azure.cosmos.CosmosContainer.executeCosmosBatch(CosmosBatch cosmosBatch, CosmosBatchRequestOptions requestOptions)"
  name: "executeCosmosBatch(CosmosBatch cosmosBatch, CosmosBatchRequestOptions requestOptions)"
  nameWithType: "CosmosContainer.executeCosmosBatch(CosmosBatch cosmosBatch, CosmosBatchRequestOptions requestOptions)"
  summary: "Executes the transactional batch."
  parameters:
  - description: "Batch having list of operation and partition key which will be executed by this container."
    name: "cosmosBatch"
    type: "<xref href=\"com.azure.cosmos.models.CosmosBatch?alt=com.azure.cosmos.models.CosmosBatch&text=CosmosBatch\" data-throw-if-not-resolved=\"False\" />"
  - description: "Options that apply specifically to batch request."
    name: "requestOptions"
    type: "<xref href=\"com.azure.cosmos.models.CosmosBatchRequestOptions?alt=com.azure.cosmos.models.CosmosBatchRequestOptions&text=CosmosBatchRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosBatchResponse executeCosmosBatch(CosmosBatch cosmosBatch, CosmosBatchRequestOptions requestOptions)"
  desc: "Executes the transactional batch."
  returns:
    description: "A CosmosBatchResponse which contains details of execution of the transactional batch.\n <p>\n If the transactional batch executes successfully, the value returned by <xref uid=\"com.azure.cosmos.models.CosmosBatchResponse.getStatusCode*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchResponse#getStatusCode\"></xref> on the response returned will be set to 200}.\n <p>\n If an operation within the transactional batch fails during execution, no changes from the batch will be\n committed and the status of the failing operation is made available by <xref uid=\"com.azure.cosmos.models.CosmosBatchResponse.getStatusCode*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchResponse#getStatusCode\"></xref> or by the exception. To obtain information about the operations\n that failed in case of some user error like conflict, not found etc, the response can be enumerated.\n This returns <xref uid=\"com.azure.cosmos.models.CosmosBatchOperationResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchOperationResult\"></xref> instances corresponding to each operation in the\n transactional batch in the order they were added to the transactional batch.\n For a result corresponding to an operation within the transactional batch, use\n <xref uid=\"com.azure.cosmos.models.CosmosBatchOperationResult.getStatusCode*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchOperationResult#getStatusCode\"></xref>\n to access the status of the operation. If the operation was not executed or it was aborted due to the failure of\n another operation within the transactional batch, the value of this field will be 424;\n for the operation that caused the batch to abort, the value of this field\n will indicate the cause of failure.\n <p>\n If there are issues such as request timeouts, Gone, session not available, network failure\n or if the service somehow returns 5xx then this will throw an exception instead of returning a CosmosBatchResponse.\n <p>\n Use <xref uid=\"com.azure.cosmos.models.CosmosBatchResponse.isSuccessStatusCode*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchResponse#isSuccessStatusCode\"></xref> on the response returned to ensure that the\n transactional batch succeeded."
    type: "<xref href=\"com.azure.cosmos.models.CosmosBatchResponse?alt=com.azure.cosmos.models.CosmosBatchResponse&text=CosmosBatchResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosContainer.getFeedRanges()"
  fullName: "com.azure.cosmos.CosmosContainer.getFeedRanges()"
  name: "getFeedRanges()"
  nameWithType: "CosmosContainer.getFeedRanges()"
  summary: "Obtains a list of <xref uid=\"com.azure.cosmos.models.FeedRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeedRange\"></xref> that can be used to parallelize Feed operations."
  syntax: "public List<FeedRange> getFeedRanges()"
  desc: "Obtains a list of <xref uid=\"com.azure.cosmos.models.FeedRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeedRange\"></xref> that can be used to parallelize Feed operations."
  returns:
    description: "An unmodifiable list of <xref uid=\"com.azure.cosmos.models.FeedRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeedRange\"></xref>"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.FeedRange?alt=com.azure.cosmos.models.FeedRange&text=FeedRange\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosContainer.getId()"
  fullName: "com.azure.cosmos.CosmosContainer.getId()"
  name: "getId()"
  nameWithType: "CosmosContainer.getId()"
  summary: "Gets the current container id."
  syntax: "public String getId()"
  desc: "Gets the current container id."
  returns:
    description: "the container id."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosContainer.getScripts()"
  fullName: "com.azure.cosmos.CosmosContainer.getScripts()"
  name: "getScripts()"
  nameWithType: "CosmosContainer.getScripts()"
  summary: "Gets the Cosmos scripts using the current container as context."
  syntax: "public CosmosScripts getScripts()"
  desc: "Gets the Cosmos scripts using the current container as context."
  returns:
    description: "the Cosmos sync scripts."
    type: "<xref href=\"com.azure.cosmos.CosmosScripts?alt=com.azure.cosmos.CosmosScripts&text=CosmosScripts\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosContainer.openConnectionsAndInitCaches()"
  fullName: "com.azure.cosmos.CosmosContainer.openConnectionsAndInitCaches()"
  name: "openConnectionsAndInitCaches()"
  nameWithType: "CosmosContainer.openConnectionsAndInitCaches()"
  summary: "Initializes the container by warming up the caches and connections for the current read region."
  syntax: "public void openConnectionsAndInitCaches()"
  desc: "Initializes the container by warming up the caches and connections for the current read region.\n\n\nNOTE: This API ideally should be called only once during application initialization before any workload.\nIn case of any transient error, caller should consume the error and continue the regular workload."
- uid: "com.azure.cosmos.CosmosContainer.read()"
  fullName: "com.azure.cosmos.CosmosContainer.read()"
  name: "read()"
  nameWithType: "CosmosContainer.read()"
  summary: "Reads the current container."
  syntax: "public CosmosContainerResponse read()"
  desc: "Reads the current container."
  returns:
    description: "the Cosmos container response with the read container."
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosContainer.read(com.azure.cosmos.models.CosmosContainerRequestOptions)"
  fullName: "com.azure.cosmos.CosmosContainer.read(CosmosContainerRequestOptions options)"
  name: "read(CosmosContainerRequestOptions options)"
  nameWithType: "CosmosContainer.read(CosmosContainerRequestOptions options)"
  summary: "Reads the current container while specifying additional options such as If-Match."
  parameters:
  - description: "the options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerRequestOptions?alt=com.azure.cosmos.models.CosmosContainerRequestOptions&text=CosmosContainerRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosContainerResponse read(CosmosContainerRequestOptions options)"
  desc: "Reads the current container while specifying additional options such as If-Match."
  returns:
    description: "the Cosmos container response."
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosContainer.readThroughput()"
  fullName: "com.azure.cosmos.CosmosContainer.readThroughput()"
  name: "readThroughput()"
  nameWithType: "CosmosContainer.readThroughput()"
  summary: "Gets the throughput for the current container."
  syntax: "public ThroughputResponse readThroughput()"
  desc: "Gets the throughput for the current container."
  returns:
    description: "the throughput response."
    type: "<xref href=\"com.azure.cosmos.models.ThroughputResponse?alt=com.azure.cosmos.models.ThroughputResponse&text=ThroughputResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosContainer.replace(com.azure.cosmos.models.CosmosContainerProperties)"
  fullName: "com.azure.cosmos.CosmosContainer.replace(CosmosContainerProperties containerProperties)"
  name: "replace(CosmosContainerProperties containerProperties)"
  nameWithType: "CosmosContainer.replace(CosmosContainerProperties containerProperties)"
  summary: "Replaces the current container properties."
  parameters:
  - description: "the container properties."
    name: "containerProperties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosContainerResponse replace(CosmosContainerProperties containerProperties)"
  desc: "Replaces the current container properties."
  returns:
    description: "the cosmos container response."
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosContainer.replace(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)"
  fullName: "com.azure.cosmos.CosmosContainer.replace(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)"
  name: "replace(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)"
  nameWithType: "CosmosContainer.replace(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)"
  summary: "Replaces the current container properties while specifying additional options such as If-Match."
  parameters:
  - description: "the container properties."
    name: "containerProperties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "the options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerRequestOptions?alt=com.azure.cosmos.models.CosmosContainerRequestOptions&text=CosmosContainerRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosContainerResponse replace(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)"
  desc: "Replaces the current container properties while specifying additional options such as If-Match."
  returns:
    description: "the cosmos container response."
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosContainer.replaceThroughput(com.azure.cosmos.models.ThroughputProperties)"
  fullName: "com.azure.cosmos.CosmosContainer.replaceThroughput(ThroughputProperties throughputProperties)"
  name: "replaceThroughput(ThroughputProperties throughputProperties)"
  nameWithType: "CosmosContainer.replaceThroughput(ThroughputProperties throughputProperties)"
  summary: "Sets the throughput for the current container."
  parameters:
  - description: "the throughput properties."
    name: "throughputProperties"
    type: "<xref href=\"com.azure.cosmos.models.ThroughputProperties?alt=com.azure.cosmos.models.ThroughputProperties&text=ThroughputProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ThroughputResponse replaceThroughput(ThroughputProperties throughputProperties)"
  desc: "Sets the throughput for the current container."
  returns:
    description: "the throughput response."
    type: "<xref href=\"com.azure.cosmos.models.ThroughputResponse?alt=com.azure.cosmos.models.ThroughputResponse&text=ThroughputResponse\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Provides synchronous methods for reading, deleting, and replacing existing Containers Provides methods for interacting with child resources (Items, Scripts, Conflicts)"
metadata: {}
package: "com.azure.cosmos"
artifact: com.azure:azure-cosmos:4.34.0
