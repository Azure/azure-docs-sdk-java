### YamlMime:JavaMember
uid: "com.azure.data.tables.TableServiceAsyncClient.setPropertiesWithResponse*"
fullName: "com.azure.data.tables.TableServiceAsyncClient.setPropertiesWithResponse"
name: "setPropertiesWithResponse"
nameWithType: "TableServiceAsyncClient.setPropertiesWithResponse"
members:
- uid: "com.azure.data.tables.TableServiceAsyncClient.setPropertiesWithResponse(com.azure.data.tables.models.TableServiceProperties)"
  fullName: "com.azure.data.tables.TableServiceAsyncClient.setPropertiesWithResponse(TableServiceProperties tableServiceProperties)"
  name: "setPropertiesWithResponse(TableServiceProperties tableServiceProperties)"
  nameWithType: "TableServiceAsyncClient.setPropertiesWithResponse(TableServiceProperties tableServiceProperties)"
  summary: "Sets the properties of an account's Table service, including properties for Analytics and CORS (Cross-Origin Resource Sharing) rules.\n\nThis operation is only supported on Azure Storage endpoints.\n\n**Code Samples**\n\nSets the properties of the account's Table service. Prints out the details of the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref>.\n\n```java\nTableServiceProperties myProperties = new TableServiceProperties()\n     .setHourMetrics(new TableServiceMetrics()\n         .setVersion(\"1.0\")\n         .setEnabled(true))\n     .setLogging(new TableServiceLogging()\n         .setAnalyticsVersion(\"1.0\")\n         .setReadLogged(true)\n         .setRetentionPolicy(new TableServiceRetentionPolicy()\n             .setEnabled(true)\n             .setDaysToRetain(5)));\n\n tableServiceAsyncClient.setPropertiesWithResponse(myProperties)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(response ->\n         System.out.printf(\"Retrieved service properties successfully with status code: %d.\",\n             response.getStatusCode()));\n```"
  parameters:
  - description: "The <xref uid=\"com.azure.data.tables.models.TableServiceProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableServiceProperties\"></xref> to set."
    name: "tableServiceProperties"
    type: "<xref href=\"com.azure.data.tables.models.TableServiceProperties?alt=com.azure.data.tables.models.TableServiceProperties&text=TableServiceProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> setPropertiesWithResponse(TableServiceProperties tableServiceProperties)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.data.tables"
artifact: com.azure:azure-data-tables:12.2.1
