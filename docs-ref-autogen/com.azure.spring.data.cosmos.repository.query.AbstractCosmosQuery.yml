### YamlMime:ManagedReference
items:
- uid: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery
  id: AbstractCosmosQuery
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.repository.query
  children:
  - com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.AbstractCosmosQuery(com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod,com.azure.spring.data.cosmos.core.CosmosOperations)
  - com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.createQuery(com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor)
  - com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.execute(java.lang.Object[])
  - com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.getExecution(com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor,org.springframework.data.repository.query.ReturnedType)
  - com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.getQueryMethod()
  - com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isCollectionQuery()
  - com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isDeleteQuery()
  - com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isExistsQuery()
  - com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isPageQuery()
  - com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.operations
  langs:
  - java
  name: AbstractCosmosQuery
  nameWithType: AbstractCosmosQuery
  fullName: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery
  type: Class
  package: com.azure.spring.data.cosmos.repository.query
  summary: Abstract class for cosmos query.
  syntax:
    content: public abstract class AbstractCosmosQuery implements RepositoryQuery
  inheritance:
  - java.lang.Object
  implements:
  - org.springframework.data.repository.query.RepositoryQuery
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.AbstractCosmosQuery(com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod,com.azure.spring.data.cosmos.core.CosmosOperations)
  id: AbstractCosmosQuery(com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod,com.azure.spring.data.cosmos.core.CosmosOperations)
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery
  langs:
  - java
  name: AbstractCosmosQuery(CosmosQueryMethod method, CosmosOperations operations)
  nameWithType: AbstractCosmosQuery.AbstractCosmosQuery(CosmosQueryMethod method, CosmosOperations operations)
  fullName: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.AbstractCosmosQuery(CosmosQueryMethod method, CosmosOperations operations)
  overload: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.AbstractCosmosQuery*
  type: Constructor
  package: com.azure.spring.data.cosmos.repository.query
  summary: Initialization
  syntax:
    content: public AbstractCosmosQuery(CosmosQueryMethod method, CosmosOperations operations)
    parameters:
    - id: method
      type: com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod
      description: CosmosQueryMethod
    - id: operations
      type: com.azure.spring.data.cosmos.core.CosmosOperations
      description: CosmosOperations
- uid: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.createQuery(com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor)
  id: createQuery(com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor)
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery
  langs:
  - java
  name: createQuery(CosmosParameterAccessor accessor)
  nameWithType: AbstractCosmosQuery.createQuery(CosmosParameterAccessor accessor)
  fullName: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.createQuery(CosmosParameterAccessor accessor)
  overload: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.createQuery*
  type: Method
  package: com.azure.spring.data.cosmos.repository.query
  syntax:
    content: protected abstract CosmosQuery createQuery(CosmosParameterAccessor accessor)
    parameters:
    - id: accessor
      type: com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor
    return:
      type: com.azure.spring.data.cosmos.core.query.CosmosQuery
- uid: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.execute(java.lang.Object[])
  id: execute(java.lang.Object[])
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery
  langs:
  - java
  name: execute(Object[] parameters)
  nameWithType: AbstractCosmosQuery.execute(Object[] parameters)
  fullName: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.execute(Object[] parameters)
  overload: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.execute*
  type: Method
  package: com.azure.spring.data.cosmos.repository.query
  summary: Executes the <xref uid="com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery" data-throw-if-not-resolved="false">AbstractCosmosQuery</xref> with the given parameters.
  syntax:
    content: public Object execute(Object[] parameters)
    parameters:
    - id: parameters
      type: java.lang.Object[]
      description: must not be null.
    return:
      type: java.lang.Object
      description: execution result. Can be null.
- uid: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.getExecution(com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor,org.springframework.data.repository.query.ReturnedType)
  id: getExecution(com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor,org.springframework.data.repository.query.ReturnedType)
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery
  langs:
  - java
  name: getExecution(CosmosParameterAccessor accessor, ReturnedType returnedType)
  nameWithType: AbstractCosmosQuery.getExecution(CosmosParameterAccessor accessor, ReturnedType returnedType)
  fullName: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.getExecution(CosmosParameterAccessor accessor, ReturnedType returnedType)
  overload: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.getExecution*
  type: Method
  package: com.azure.spring.data.cosmos.repository.query
  summary: Determines the appropriate execution path for a query
  syntax:
    content: protected CosmosQueryExecution getExecution(CosmosParameterAccessor accessor, ReturnedType returnedType)
    parameters:
    - id: accessor
      type: com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor
      description: Object for accessing method parameters
    - id: returnedType
      type: org.springframework.data.repository.query.ReturnedType
      description: The return type of the method
    return:
      type: com.azure.spring.data.cosmos.repository.query.CosmosQueryExecution
      description: the execution type needed to handle the query
- uid: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.getQueryMethod()
  id: getQueryMethod()
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery
  langs:
  - java
  name: getQueryMethod()
  nameWithType: AbstractCosmosQuery.getQueryMethod()
  fullName: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.getQueryMethod()
  overload: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.getQueryMethod*
  type: Method
  package: com.azure.spring.data.cosmos.repository.query
  summary: Get method of query
  syntax:
    content: public CosmosQueryMethod getQueryMethod()
    return:
      type: com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod
      description: CosmosQueryMethod
- uid: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isCollectionQuery()
  id: isCollectionQuery()
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery
  langs:
  - java
  name: isCollectionQuery()
  nameWithType: AbstractCosmosQuery.isCollectionQuery()
  fullName: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isCollectionQuery()
  overload: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isCollectionQuery*
  type: Method
  package: com.azure.spring.data.cosmos.repository.query
  syntax:
    content: protected boolean isCollectionQuery()
    return:
      type: boolean
- uid: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isDeleteQuery()
  id: isDeleteQuery()
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery
  langs:
  - java
  name: isDeleteQuery()
  nameWithType: AbstractCosmosQuery.isDeleteQuery()
  fullName: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isDeleteQuery()
  overload: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isDeleteQuery*
  type: Method
  package: com.azure.spring.data.cosmos.repository.query
  syntax:
    content: protected abstract boolean isDeleteQuery()
    return:
      type: boolean
- uid: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isExistsQuery()
  id: isExistsQuery()
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery
  langs:
  - java
  name: isExistsQuery()
  nameWithType: AbstractCosmosQuery.isExistsQuery()
  fullName: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isExistsQuery()
  overload: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isExistsQuery*
  type: Method
  package: com.azure.spring.data.cosmos.repository.query
  syntax:
    content: protected abstract boolean isExistsQuery()
    return:
      type: boolean
- uid: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isPageQuery()
  id: isPageQuery()
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery
  langs:
  - java
  name: isPageQuery()
  nameWithType: AbstractCosmosQuery.isPageQuery()
  fullName: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isPageQuery()
  overload: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isPageQuery*
  type: Method
  package: com.azure.spring.data.cosmos.repository.query
  syntax:
    content: protected boolean isPageQuery()
    return:
      type: boolean
- uid: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.operations
  id: operations
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery
  langs:
  - java
  name: operations
  nameWithType: AbstractCosmosQuery.operations
  fullName: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.operations
  type: Field
  package: com.azure.spring.data.cosmos.repository.query
  syntax:
    content: protected final CosmosOperations operations
    return:
      type: com.azure.spring.data.cosmos.core.CosmosOperations
references:
- uid: com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod
  name: CosmosQueryMethod
  nameWithType: CosmosQueryMethod
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod
- uid: com.azure.spring.data.cosmos.core.CosmosOperations
  name: CosmosOperations
  nameWithType: CosmosOperations
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations
- uid: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.AbstractCosmosQuery*
  name: AbstractCosmosQuery
  nameWithType: AbstractCosmosQuery.AbstractCosmosQuery
  fullName: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.AbstractCosmosQuery
  package: com.azure.spring.data.cosmos.repository.query
- uid: java.lang.Object[]
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '[]'
    fullName: '[]'
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.execute*
  name: execute
  nameWithType: AbstractCosmosQuery.execute
  fullName: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.execute
  package: com.azure.spring.data.cosmos.repository.query
- uid: com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor
  name: CosmosParameterAccessor
  nameWithType: CosmosParameterAccessor
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor
- uid: org.springframework.data.repository.query.ReturnedType
  spec.java:
  - uid: org.springframework.data.repository.query.ReturnedType
    name: ReturnedType
    fullName: org.springframework.data.repository.query.ReturnedType
- uid: com.azure.spring.data.cosmos.repository.query.CosmosQueryExecution
  name: CosmosQueryExecution
  nameWithType: CosmosQueryExecution
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosQueryExecution
- uid: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.getExecution*
  name: getExecution
  nameWithType: AbstractCosmosQuery.getExecution
  fullName: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.getExecution
  package: com.azure.spring.data.cosmos.repository.query
- uid: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.getQueryMethod*
  name: getQueryMethod
  nameWithType: AbstractCosmosQuery.getQueryMethod
  fullName: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.getQueryMethod
  package: com.azure.spring.data.cosmos.repository.query
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery
  name: CosmosQuery
  nameWithType: CosmosQuery
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery
- uid: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.createQuery*
  name: createQuery
  nameWithType: AbstractCosmosQuery.createQuery
  fullName: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.createQuery
  package: com.azure.spring.data.cosmos.repository.query
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isDeleteQuery*
  name: isDeleteQuery
  nameWithType: AbstractCosmosQuery.isDeleteQuery
  fullName: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isDeleteQuery
  package: com.azure.spring.data.cosmos.repository.query
- uid: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isExistsQuery*
  name: isExistsQuery
  nameWithType: AbstractCosmosQuery.isExistsQuery
  fullName: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isExistsQuery
  package: com.azure.spring.data.cosmos.repository.query
- uid: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isPageQuery*
  name: isPageQuery
  nameWithType: AbstractCosmosQuery.isPageQuery
  fullName: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isPageQuery
  package: com.azure.spring.data.cosmos.repository.query
- uid: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isCollectionQuery*
  name: isCollectionQuery
  nameWithType: AbstractCosmosQuery.isCollectionQuery
  fullName: com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isCollectionQuery
  package: com.azure.spring.data.cosmos.repository.query
- uid: org.springframework.data.repository.query.RepositoryQuery
  name: RepositoryQuery
  nameWithType: RepositoryQuery
  fullName: org.springframework.data.repository.query.RepositoryQuery
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
