### YamlMime:JavaType
uid: "com.azure.containers.containerregistry.RegistryArtifact"
fullName: "com.azure.containers.containerregistry.RegistryArtifact"
name: "RegistryArtifact"
nameWithType: "RegistryArtifact"
summary: "This class provides a helper type that contains all the operations for artifacts in a given repository."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class RegistryArtifact"
methods:
- uid: "com.azure.containers.containerregistry.RegistryArtifact.delete()"
  fullName: "com.azure.containers.containerregistry.RegistryArtifact.delete()"
  name: "delete()"
  nameWithType: "RegistryArtifact.delete()"
  summary: "Deletes the registry artifact with the digest and repository associated with the instance."
  syntax: "public void delete()"
  desc: "Deletes the registry artifact with the digest and repository associated with the instance.\n\n**Code Samples**\n\nDelete the registry artifact.\n\n```java\nclient.delete();\n```"
- uid: "com.azure.containers.containerregistry.RegistryArtifact.deleteTag(java.lang.String)"
  fullName: "com.azure.containers.containerregistry.RegistryArtifact.deleteTag(String tag)"
  name: "deleteTag(String tag)"
  nameWithType: "RegistryArtifact.deleteTag(String tag)"
  summary: "Deletes the tag with the matching tag name for the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  parameters:
  - description: "The name of the tag that needs to be deleted."
    name: "tag"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteTag(String tag)"
  desc: "Deletes the tag with the matching tag name for the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\n**Code Samples**\n\nDelete the tag for the given repository.\n\n```java\nString tag = getTag();\n client.deleteTag(tag);\n```"
- uid: "com.azure.containers.containerregistry.RegistryArtifact.deleteTagWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.containers.containerregistry.RegistryArtifact.deleteTagWithResponse(String tag, Context context)"
  name: "deleteTagWithResponse(String tag, Context context)"
  nameWithType: "RegistryArtifact.deleteTagWithResponse(String tag, Context context)"
  summary: "Deletes the tag with the matching tag name for the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  parameters:
  - description: "The name of the tag that needs to be deleted."
    name: "tag"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteTagWithResponse(String tag, Context context)"
  desc: "Deletes the tag with the matching tag name for the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\n**Code Samples**\n\nDelete the tag for the given repository.\n\n```java\nString tag = getTag();\n client.deleteTagWithResponse(tag, Context.NONE);\n```"
  returns:
    description: "A REST response containing the result of the service call."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.RegistryArtifact.deleteWithResponse(com.azure.core.util.Context)"
  fullName: "com.azure.containers.containerregistry.RegistryArtifact.deleteWithResponse(Context context)"
  name: "deleteWithResponse(Context context)"
  nameWithType: "RegistryArtifact.deleteWithResponse(Context context)"
  summary: "Deletes the registry artifact with the digest and repository associated with the instance."
  parameters:
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteWithResponse(Context context)"
  desc: "Deletes the registry artifact with the digest and repository associated with the instance.\n\n**Code Samples**\n\nDelete the registry artifact.\n\n```java\nclient.deleteWithResponse(Context.NONE);\n```"
  returns:
    description: "A REST response containing the result of the service call."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.RegistryArtifact.getFullyQualifiedReference()"
  fullName: "com.azure.containers.containerregistry.RegistryArtifact.getFullyQualifiedReference()"
  name: "getFullyQualifiedReference()"
  nameWithType: "RegistryArtifact.getFullyQualifiedReference()"
  summary: "Gets the fully qualified reference for the current instance."
  syntax: "public String getFullyQualifiedReference()"
  desc: "Gets the fully qualified reference for the current instance."
  returns:
    description: "Fully qualified reference of the current instance."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.containers.containerregistry.RegistryArtifact.getManifestProperties()"
  fullName: "com.azure.containers.containerregistry.RegistryArtifact.getManifestProperties()"
  name: "getManifestProperties()"
  nameWithType: "RegistryArtifact.getManifestProperties()"
  summary: "Gets the <xref uid=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with an artifact in given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  syntax: "public ArtifactManifestProperties getManifestProperties()"
  desc: "Gets the <xref uid=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with an artifact in given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\nThis method can take in both a digest as well as a tag.\nIn case a tag is provided it calls the service to get the digest associated with the given tag.\n\n**Code Samples**\n\nGet the registry artifact properties for a given tag or digest.\n\n```java\nArtifactManifestProperties properties = client.getManifestProperties();\n System.out.printf(\"Digest:%s,\", properties.getDigest());\n```"
  returns:
    description: "The <xref uid=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with the given <code>Digest</code>."
    type: "<xref href=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties?alt=com.azure.containers.containerregistry.models.ArtifactManifestProperties&text=ArtifactManifestProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.containers.containerregistry.RegistryArtifact.getManifestPropertiesWithResponse(com.azure.core.util.Context)"
  fullName: "com.azure.containers.containerregistry.RegistryArtifact.getManifestPropertiesWithResponse(Context context)"
  name: "getManifestPropertiesWithResponse(Context context)"
  nameWithType: "RegistryArtifact.getManifestPropertiesWithResponse(Context context)"
  summary: "Gets the <xref uid=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with an artifact in given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  parameters:
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<ArtifactManifestProperties> getManifestPropertiesWithResponse(Context context)"
  desc: "Gets the <xref uid=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with an artifact in given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\nThis method can take in both a digest as well as a tag.\nIn case a tag is provided it calls the service to get the digest associated with the given tag.\n\n**Code Samples**\n\nGet the properties for the given repository.\n\n```java\nResponse<ArtifactManifestProperties> response = client.getManifestPropertiesWithResponse(\n     Context.NONE);\n final ArtifactManifestProperties properties = response.getValue();\n System.out.printf(\"Digest:%s,\", properties.getDigest());\n```"
  returns:
    description: "A REST response containing <xref uid=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with the given <code>Digest</code>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties?alt=com.azure.containers.containerregistry.models.ArtifactManifestProperties&text=ArtifactManifestProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.RegistryArtifact.getRegistryEndpoint()"
  fullName: "com.azure.containers.containerregistry.RegistryArtifact.getRegistryEndpoint()"
  name: "getRegistryEndpoint()"
  nameWithType: "RegistryArtifact.getRegistryEndpoint()"
  summary: "Gets the Azure Container Registry service endpoint for the current instance."
  syntax: "public String getRegistryEndpoint()"
  desc: "Gets the Azure Container Registry service endpoint for the current instance."
  returns:
    description: "The service endpoint for the current instance."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()"
  fullName: "com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()"
  name: "getRepositoryName()"
  nameWithType: "RegistryArtifact.getRepositoryName()"
  summary: "Gets the repository name for the current instance."
  syntax: "public String getRepositoryName()"
  desc: "Gets the repository name for the current instance. Gets the repository name for the current instance."
  returns:
    description: "Name of the repository for the current instance."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.containers.containerregistry.RegistryArtifact.getTagProperties(java.lang.String)"
  fullName: "com.azure.containers.containerregistry.RegistryArtifact.getTagProperties(String tag)"
  name: "getTagProperties(String tag)"
  nameWithType: "RegistryArtifact.getTagProperties(String tag)"
  summary: "Gets the tag properties associated with a given tag in the <xref uid=\"com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  parameters:
  - description: "name of the tag."
    name: "tag"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ArtifactTagProperties getTagProperties(String tag)"
  desc: "Gets the tag properties associated with a given tag in the <xref uid=\"com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\n**Code Samples**\n\nRetrieve the properties associated with the given tag.\n\n```java\nString tag = getTag();\n ArtifactTagProperties properties = client.getTagProperties(tag);\n System.out.printf(\"Digest:%s,\", properties.getDigest());\n```"
  returns:
    description: "The <xref uid=\"com.azure.containers.containerregistry.models.ArtifactTagProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with the given tag."
    type: "<xref href=\"com.azure.containers.containerregistry.models.ArtifactTagProperties?alt=com.azure.containers.containerregistry.models.ArtifactTagProperties&text=ArtifactTagProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.containers.containerregistry.RegistryArtifact.getTagPropertiesWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.containers.containerregistry.RegistryArtifact.getTagPropertiesWithResponse(String tag, Context context)"
  name: "getTagPropertiesWithResponse(String tag, Context context)"
  nameWithType: "RegistryArtifact.getTagPropertiesWithResponse(String tag, Context context)"
  summary: "Gets the tag properties associated with a given tag in the <xref uid=\"com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  parameters:
  - description: "name of the tag."
    name: "tag"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<ArtifactTagProperties> getTagPropertiesWithResponse(String tag, Context context)"
  desc: "Gets the tag properties associated with a given tag in the <xref uid=\"com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\n**Code Samples**\n\nRetrieve the properties associated with the given tag.\n\n```java\nString tag = getTag();\n Response<ArtifactTagProperties> response = client.getTagPropertiesWithResponse(tag, Context.NONE);\n final ArtifactTagProperties properties = response.getValue();\n System.out.printf(\"Digest:%s,\", properties.getDigest());\n```"
  returns:
    description: "A REST response with the <xref uid=\"com.azure.containers.containerregistry.models.ArtifactTagProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with the given tag."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ArtifactTagProperties?alt=com.azure.containers.containerregistry.models.ArtifactTagProperties&text=ArtifactTagProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.RegistryArtifact.listTagProperties()"
  fullName: "com.azure.containers.containerregistry.RegistryArtifact.listTagProperties()"
  name: "listTagProperties()"
  nameWithType: "RegistryArtifact.listTagProperties()"
  summary: "Fetches all the tags associated with the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  syntax: "public PagedIterable<ArtifactTagProperties> listTagProperties()"
  desc: "Fetches all the tags associated with the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\nIf you would like to specify the order in which the tags are returned please use the overload that takes in the options parameter <xref uid=\"com.azure.containers.containerregistry.RegistryArtifact.listTagProperties(com.azure.containers.containerregistry.models.ArtifactTagOrder,com.azure.core.util.Context)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#listTagProperties(ArtifactTagOrder, Context)\"></xref> listTagProperties\\} No assumptions on the order can be made if no options are provided to the service.\n\n**Code Samples**\n\nRetrieve all the tags associated with the given repository.\n\n```java\nclient.listTagProperties().iterableByPage(10).forEach(pagedResponse -> {\n     pagedResponse.getValue().stream().forEach(\n         tagProperties -> System.out.println(tagProperties.getDigest()));\n });\n```"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of the artifacts for the given repository in the order specified by the options."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ArtifactTagProperties?alt=com.azure.containers.containerregistry.models.ArtifactTagProperties&text=ArtifactTagProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.RegistryArtifact.listTagProperties(com.azure.containers.containerregistry.models.ArtifactTagOrder)"
  fullName: "com.azure.containers.containerregistry.RegistryArtifact.listTagProperties(ArtifactTagOrder order)"
  name: "listTagProperties(ArtifactTagOrder order)"
  nameWithType: "RegistryArtifact.listTagProperties(ArtifactTagOrder order)"
  summary: "Fetches all the tags associated with the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  parameters:
  - description: "The order in which the tags should be returned by the service."
    name: "order"
    type: "<xref href=\"com.azure.containers.containerregistry.models.ArtifactTagOrder?alt=com.azure.containers.containerregistry.models.ArtifactTagOrder&text=ArtifactTagOrder\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<ArtifactTagProperties> listTagProperties(ArtifactTagOrder order)"
  desc: "Fetches all the tags associated with the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\nThe method supports options to select the order in which the tags are returned by the service. Currently the service supports an ascending or descending order based on the last updated time of the tag. No assumptions on the order can be made if no options are provided to the service.\n\n**Code Samples**\n\nRetrieve all the tags associated with the given repository from the most recently updated to the last.\n\n```java\nclient.listTagProperties(ArtifactTagOrder.LAST_UPDATED_ON_DESCENDING)\n     .iterableByPage(10)\n     .forEach(pagedResponse -> {\n         pagedResponse.getValue()\n             .stream()\n             .forEach(tagProperties -> System.out.println(tagProperties.getDigest()));\n     });\n```"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of the artifacts for the given repository in the order specified by the options."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ArtifactTagProperties?alt=com.azure.containers.containerregistry.models.ArtifactTagProperties&text=ArtifactTagProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.RegistryArtifact.listTagProperties(com.azure.containers.containerregistry.models.ArtifactTagOrder,com.azure.core.util.Context)"
  fullName: "com.azure.containers.containerregistry.RegistryArtifact.listTagProperties(ArtifactTagOrder order, Context context)"
  name: "listTagProperties(ArtifactTagOrder order, Context context)"
  nameWithType: "RegistryArtifact.listTagProperties(ArtifactTagOrder order, Context context)"
  summary: "Fetches all the tags associated with the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  parameters:
  - description: "The order in which the tags should be returned by the service."
    name: "order"
    type: "<xref href=\"com.azure.containers.containerregistry.models.ArtifactTagOrder?alt=com.azure.containers.containerregistry.models.ArtifactTagOrder&text=ArtifactTagOrder\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<ArtifactTagProperties> listTagProperties(ArtifactTagOrder order, Context context)"
  desc: "Fetches all the tags associated with the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\nThe method supports options to select the order in which the tags are returned by the service. Currently the service supports an ascending or descending order based on the last updated time of the tag. No assumptions on the order can be made if no options are provided to the service.\n\n**Code Samples**\n\nRetrieve all the tags associated with the given repository from the most recently updated to the last.\n\n```java\nclient.listTagProperties(ArtifactTagOrder.LAST_UPDATED_ON_DESCENDING, Context.NONE)\n     .iterableByPage(10)\n     .forEach(pagedResponse -> {\n         pagedResponse.getValue()\n             .stream()\n             .forEach(tagProperties -> System.out.println(tagProperties.getDigest()));\n     });\n```"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of the artifacts for the given repository in the order specified by the options."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ArtifactTagProperties?alt=com.azure.containers.containerregistry.models.ArtifactTagProperties&text=ArtifactTagProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.RegistryArtifact.updateManifestProperties(com.azure.containers.containerregistry.models.ArtifactManifestProperties)"
  fullName: "com.azure.containers.containerregistry.RegistryArtifact.updateManifestProperties(ArtifactManifestProperties manifestProperties)"
  name: "updateManifestProperties(ArtifactManifestProperties manifestProperties)"
  nameWithType: "RegistryArtifact.updateManifestProperties(ArtifactManifestProperties manifestProperties)"
  summary: "Update the writeable properties <xref uid=\"com.azure.containers.containerregistry.models.ArtifactTagProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ArtifactTagProperties\"></xref> of the artifact with the given `digest`."
  parameters:
  - description: "<xref uid=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"manifestProperties\"></xref> to be set."
    name: "manifestProperties"
    type: "<xref href=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties?alt=com.azure.containers.containerregistry.models.ArtifactManifestProperties&text=ArtifactManifestProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ArtifactManifestProperties updateManifestProperties(ArtifactManifestProperties manifestProperties)"
  desc: "Update the writeable properties <xref uid=\"com.azure.containers.containerregistry.models.ArtifactTagProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ArtifactTagProperties\"></xref> of the artifact with the given `digest`. These properties set whether the given manifest can be updated, deleted and retrieved.\n\n**Code Samples**\n\nUpdate the writeable properties of a given manifest.\n\n```java\nArtifactManifestProperties properties = getArtifactManifestProperties();\n client.updateManifestProperties(properties);\n```"
  returns:
    description: "The updated <xref uid=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties \"></xref>"
    type: "<xref href=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties?alt=com.azure.containers.containerregistry.models.ArtifactManifestProperties&text=ArtifactManifestProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.containers.containerregistry.RegistryArtifact.updateManifestPropertiesWithResponse(com.azure.containers.containerregistry.models.ArtifactManifestProperties,com.azure.core.util.Context)"
  fullName: "com.azure.containers.containerregistry.RegistryArtifact.updateManifestPropertiesWithResponse(ArtifactManifestProperties manifestProperties, Context context)"
  name: "updateManifestPropertiesWithResponse(ArtifactManifestProperties manifestProperties, Context context)"
  nameWithType: "RegistryArtifact.updateManifestPropertiesWithResponse(ArtifactManifestProperties manifestProperties, Context context)"
  summary: "Update the properties <xref uid=\"com.azure.containers.containerregistry.models.ArtifactTagProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ArtifactTagProperties\"></xref> of the artifact with the given `digest`."
  parameters:
  - description: "<xref uid=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"tagProperties\"></xref> to be set."
    name: "manifestProperties"
    type: "<xref href=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties?alt=com.azure.containers.containerregistry.models.ArtifactManifestProperties&text=ArtifactManifestProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<ArtifactManifestProperties> updateManifestPropertiesWithResponse(ArtifactManifestProperties manifestProperties, Context context)"
  desc: "Update the properties <xref uid=\"com.azure.containers.containerregistry.models.ArtifactTagProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ArtifactTagProperties\"></xref> of the artifact with the given `digest`. These properties set whether the given manifest can be updated, deleted and retrieved.\n\n**Code Samples**\n\nUpdate the writeable properties of a given artifact.\n\n```java\nArtifactManifestProperties properties = getArtifactManifestProperties();\n client.updateManifestPropertiesWithResponse(properties, Context.NONE);\n```"
  returns:
    description: "A REST response for the completion."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties?alt=com.azure.containers.containerregistry.models.ArtifactManifestProperties&text=ArtifactManifestProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.RegistryArtifact.updateTagProperties(java.lang.String,com.azure.containers.containerregistry.models.ArtifactTagProperties)"
  fullName: "com.azure.containers.containerregistry.RegistryArtifact.updateTagProperties(String tag, ArtifactTagProperties tagProperties)"
  name: "updateTagProperties(String tag, ArtifactTagProperties tagProperties)"
  nameWithType: "RegistryArtifact.updateTagProperties(String tag, ArtifactTagProperties tagProperties)"
  summary: "Update the properties <xref uid=\"com.azure.containers.containerregistry.models.ArtifactTagProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ArtifactTagProperties\"></xref> of the given `tag`."
  parameters:
  - description: "Name of the tag."
    name: "tag"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.containers.containerregistry.models.ArtifactTagProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"tagProperties\"></xref> to be set."
    name: "tagProperties"
    type: "<xref href=\"com.azure.containers.containerregistry.models.ArtifactTagProperties?alt=com.azure.containers.containerregistry.models.ArtifactTagProperties&text=ArtifactTagProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ArtifactTagProperties updateTagProperties(String tag, ArtifactTagProperties tagProperties)"
  desc: "Update the properties <xref uid=\"com.azure.containers.containerregistry.models.ArtifactTagProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ArtifactTagProperties\"></xref> of the given `tag`. These properties set whether the given tag can be updated, deleted and retrieved.\n\n**Code Samples**\n\nUpdate the writeable properties of a given tag.\n\n```java\nArtifactTagProperties properties = getArtifactTagProperties();\n String tag = getTag();\n client.updateTagProperties(tag, properties);\n```"
  returns:
    description: "The updated <xref uid=\"com.azure.containers.containerregistry.models.ArtifactTagProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties \"></xref>"
    type: "<xref href=\"com.azure.containers.containerregistry.models.ArtifactTagProperties?alt=com.azure.containers.containerregistry.models.ArtifactTagProperties&text=ArtifactTagProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.containers.containerregistry.RegistryArtifact.updateTagPropertiesWithResponse(java.lang.String,com.azure.containers.containerregistry.models.ArtifactTagProperties,com.azure.core.util.Context)"
  fullName: "com.azure.containers.containerregistry.RegistryArtifact.updateTagPropertiesWithResponse(String tag, ArtifactTagProperties tagProperties, Context context)"
  name: "updateTagPropertiesWithResponse(String tag, ArtifactTagProperties tagProperties, Context context)"
  nameWithType: "RegistryArtifact.updateTagPropertiesWithResponse(String tag, ArtifactTagProperties tagProperties, Context context)"
  summary: "Update the properties <xref uid=\"com.azure.containers.containerregistry.models.ArtifactTagProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ArtifactTagProperties\"></xref> of the given tag in <xref uid=\"com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  parameters:
  - description: "Name of the tag."
    name: "tag"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.containers.containerregistry.models.ArtifactTagProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"tagProperties\"></xref> to be set."
    name: "tagProperties"
    type: "<xref href=\"com.azure.containers.containerregistry.models.ArtifactTagProperties?alt=com.azure.containers.containerregistry.models.ArtifactTagProperties&text=ArtifactTagProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<ArtifactTagProperties> updateTagPropertiesWithResponse(String tag, ArtifactTagProperties tagProperties, Context context)"
  desc: "Update the properties <xref uid=\"com.azure.containers.containerregistry.models.ArtifactTagProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ArtifactTagProperties\"></xref> of the given tag in <xref uid=\"com.azure.containers.containerregistry.RegistryArtifact.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>. These properties set whether the given tag can be updated, deleted and retrieved.\n\n**Code Samples**\n\nUpdate the writeable properties of a given tag.\n\n```java\nArtifactTagProperties properties = getArtifactTagProperties();\n String tag = getTag();\n client.updateTagPropertiesWithResponse(tag, properties, Context.NONE);\n```"
  returns:
    description: "A REST response for the completion."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ArtifactTagProperties?alt=com.azure.containers.containerregistry.models.ArtifactTagProperties&text=ArtifactTagProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "This class provides a helper type that contains all the operations for artifacts in a given repository.\n\n**Instantiating Registry Artifact** \n\n```java\nRegistryArtifact registryArtifact = new ContainerRegistryClientBuilder()\n     .endpoint(endpoint)\n     .credential(credential)\n     .audience(ContainerRegistryAudience.AZURE_RESOURCE_MANAGER_PUBLIC_CLOUD)\n     .buildClient().getArtifact(repository, digest);\n```"
metadata: {}
package: "com.azure.containers.containerregistry"
artifact: com.azure:azure-containers-containerregistry:1.0.7
