### YamlMime:JavaType
uid: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery"
fullName: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery"
name: "AbstractReactiveCosmosQuery"
nameWithType: "AbstractReactiveCosmosQuery"
summary: "Abstract class for reactive cosmos query."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public abstract class **AbstractReactiveCosmosQuery**</br> implements <xref href=\"org.springframework.data.repository.query.RepositoryQuery?alt=org.springframework.data.repository.query.RepositoryQuery&text=RepositoryQuery\" data-throw-if-not-resolved=\"False\" />"
constructors:
- uid: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery.AbstractReactiveCosmosQuery(com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryMethod,com.azure.spring.data.cosmos.core.ReactiveCosmosOperations)"
  fullName: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery.AbstractReactiveCosmosQuery(ReactiveCosmosQueryMethod method, ReactiveCosmosOperations operations)"
  name: "AbstractReactiveCosmosQuery(ReactiveCosmosQueryMethod method, ReactiveCosmosOperations operations)"
  nameWithType: "AbstractReactiveCosmosQuery.AbstractReactiveCosmosQuery(ReactiveCosmosQueryMethod method, ReactiveCosmosOperations operations)"
  summary: "Initialization"
  parameters:
  - description: "ReactiveCosmosQueryMethod"
    name: "method"
    type: "<xref href=\"com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryMethod?alt=com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryMethod&text=ReactiveCosmosQueryMethod\" data-throw-if-not-resolved=\"False\" />"
  - description: "ReactiveCosmosOperations"
    name: "operations"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.ReactiveCosmosOperations?alt=com.azure.spring.data.cosmos.core.ReactiveCosmosOperations&text=ReactiveCosmosOperations\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AbstractReactiveCosmosQuery(ReactiveCosmosQueryMethod method, ReactiveCosmosOperations operations)"
  desc: "Initialization"
fields:
- uid: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery.operations"
  fullName: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery.operations"
  name: "operations"
  nameWithType: "AbstractReactiveCosmosQuery.operations"
  summary: "Reactive Cosmos operations"
  modifiers:
  - "protected"
  - "final"
  field:
    type: "<xref href=\"com.azure.spring.data.cosmos.core.ReactiveCosmosOperations?alt=com.azure.spring.data.cosmos.core.ReactiveCosmosOperations&text=ReactiveCosmosOperations\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected final ReactiveCosmosOperations operations"
  desc: "Reactive Cosmos operations"
methods:
- uid: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery.createQuery(com.azure.spring.data.cosmos.repository.query.ReactiveCosmosParameterAccessor)"
  fullName: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery.createQuery(ReactiveCosmosParameterAccessor accessor)"
  name: "createQuery(ReactiveCosmosParameterAccessor accessor)"
  nameWithType: "AbstractReactiveCosmosQuery.createQuery(ReactiveCosmosParameterAccessor accessor)"
  summary: "Creates a query."
  modifiers:
  - "protected"
  - "abstract"
  parameters:
  - description: "Reactive Cosmos parameter accessor."
    name: "accessor"
    type: "<xref href=\"com.azure.spring.data.cosmos.repository.query.ReactiveCosmosParameterAccessor?alt=com.azure.spring.data.cosmos.repository.query.ReactiveCosmosParameterAccessor&text=ReactiveCosmosParameterAccessor\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected abstract CosmosQuery createQuery(ReactiveCosmosParameterAccessor accessor)"
  desc: "Creates a query."
  returns:
    description: "a Cosmos query."
    type: "<xref href=\"com.azure.spring.data.cosmos.core.query.CosmosQuery?alt=com.azure.spring.data.cosmos.core.query.CosmosQuery&text=CosmosQuery\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery.execute(java.lang.Object[])"
  fullName: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery.execute(Object[] parameters)"
  name: "execute(Object[] parameters)"
  nameWithType: "AbstractReactiveCosmosQuery.execute(Object[] parameters)"
  summary: "Executes the <xref uid=\"com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AbstractReactiveCosmosQuery\"></xref> with the given parameters."
  parameters:
  - description: "must not be null."
    name: "parameters"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>[]"
  syntax: "public Object execute(Object[] parameters)"
  desc: "Executes the <xref uid=\"com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AbstractReactiveCosmosQuery\"></xref> with the given parameters."
  returns:
    description: "execution result. Can be null."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
- uid: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery.getExecution(org.springframework.data.repository.query.ReturnedType)"
  fullName: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery.getExecution(ReturnedType returnedType)"
  name: "getExecution(ReturnedType returnedType)"
  nameWithType: "AbstractReactiveCosmosQuery.getExecution(ReturnedType returnedType)"
  summary: "Determines the appropriate execution path for a reactive query"
  modifiers:
  - "protected"
  parameters:
  - description: "The return type of the method"
    name: "returnedType"
    type: "<xref href=\"org.springframework.data.repository.query.ReturnedType?alt=org.springframework.data.repository.query.ReturnedType&text=ReturnedType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected ReactiveCosmosQueryExecution getExecution(ReturnedType returnedType)"
  desc: "Determines the appropriate execution path for a reactive query"
  returns:
    description: "the execution type needed to handle the query"
    type: "<xref href=\"com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution?alt=com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution&text=ReactiveCosmosQueryExecution\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery.getQueryMethod()"
  fullName: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery.getQueryMethod()"
  name: "getQueryMethod()"
  nameWithType: "AbstractReactiveCosmosQuery.getQueryMethod()"
  summary: "Get method of query"
  syntax: "public ReactiveCosmosQueryMethod getQueryMethod()"
  desc: "Get method of query"
  returns:
    description: "ReactiveCosmosQueryMethod"
    type: "<xref href=\"com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryMethod?alt=com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryMethod&text=ReactiveCosmosQueryMethod\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery.isCountQuery()"
  fullName: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery.isCountQuery()"
  name: "isCountQuery()"
  nameWithType: "AbstractReactiveCosmosQuery.isCountQuery()"
  summary: "Return whether this is a count query."
  modifiers:
  - "protected"
  - "abstract"
  syntax: "protected abstract boolean isCountQuery()"
  desc: "Return whether this is a count query."
  returns:
    description: "whether this is a count query."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery.isDeleteQuery()"
  fullName: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery.isDeleteQuery()"
  name: "isDeleteQuery()"
  nameWithType: "AbstractReactiveCosmosQuery.isDeleteQuery()"
  summary: "Return whether this is a deletion query."
  modifiers:
  - "protected"
  - "abstract"
  syntax: "protected abstract boolean isDeleteQuery()"
  desc: "Return whether this is a deletion query."
  returns:
    description: "whether this is a deletion query."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery.isExistsQuery()"
  fullName: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery.isExistsQuery()"
  name: "isExistsQuery()"
  nameWithType: "AbstractReactiveCosmosQuery.isExistsQuery()"
  summary: "Return whether this is an exists query."
  modifiers:
  - "protected"
  - "abstract"
  syntax: "protected abstract boolean isExistsQuery()"
  desc: "Return whether this is an exists query."
  returns:
    description: "whether this is an exists query."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery.isPageQuery()"
  fullName: "com.azure.spring.data.cosmos.repository.query.AbstractReactiveCosmosQuery.isPageQuery()"
  name: "isPageQuery()"
  nameWithType: "AbstractReactiveCosmosQuery.isPageQuery()"
  summary: "Return whether this is a page query."
  modifiers:
  - "protected"
  syntax: "protected boolean isPageQuery()"
  desc: "Return whether this is a page query."
  returns:
    description: "whether this is a page query."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Abstract class for reactive cosmos query."
implements:
- "<xref href=\"org.springframework.data.repository.query.RepositoryQuery?alt=org.springframework.data.repository.query.RepositoryQuery&text=RepositoryQuery\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.spring.data.cosmos.repository.query"
artifact: com.azure:azure-spring-data-cosmos:5.18.0
