### YamlMime:JavaMember
uid: "com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettings*"
fullName: "com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettings"
name: "listConfigurationSettings"
nameWithType: "ConfigurationClient.listConfigurationSettings"
members:
- uid: "com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettings(com.azure.data.appconfiguration.models.SettingSelector)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettings(SettingSelector selector)"
  name: "listConfigurationSettings(SettingSelector selector)"
  nameWithType: "ConfigurationClient.listConfigurationSettings(SettingSelector selector)"
  summary: "Fetches the configuration settings that match the `selector`. If `selector` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"configuration settings\"></xref> are fetched with their current values.\n\n**Code Samples**\n\nRetrieve all settings that use the key \"prodDBConnection\".\n\n```java\nSettingSelector settingSelector = new SettingSelector().setKeyFilter(\"prodDBConnection\");\n configurationClient.listConfigurationSettings(settingSelector).forEach(setting -> {\n     System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n });\n```"
  parameters:
  - description: "Optional. Selector to filter configuration setting results from the service."
    name: "selector"
    type: "<xref href=\"com.azure.data.appconfiguration.models.SettingSelector?alt=com.azure.data.appconfiguration.models.SettingSelector&text=SettingSelector\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<ConfigurationSetting> listConfigurationSettings(SettingSelector selector)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of ConfigurationSettings that matches the <code>selector</code>. If no options were\n provided, the List contains all of the current settings in the service."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettings(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettings(SettingSelector selector, Context context)"
  name: "listConfigurationSettings(SettingSelector selector, Context context)"
  nameWithType: "ConfigurationClient.listConfigurationSettings(SettingSelector selector, Context context)"
  summary: "Fetches the configuration settings that match the `selector`. If `selector` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"configuration settings\"></xref> are fetched with their current values.\n\n**Code Samples**\n\nRetrieve all settings that use the key \"prodDBConnection\".\n\n```java\nSettingSelector settingSelector = new SettingSelector().setKeyFilter(\"prodDBConnection\");\n Context ctx = new Context(key2, value2);\n configurationClient.listConfigurationSettings(settingSelector, ctx).forEach(setting -> {\n     System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n });\n```"
  parameters:
  - description: "Optional. Selector to filter configuration setting results from the service."
    name: "selector"
    type: "<xref href=\"com.azure.data.appconfiguration.models.SettingSelector?alt=com.azure.data.appconfiguration.models.SettingSelector&text=SettingSelector\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<ConfigurationSetting> listConfigurationSettings(SettingSelector selector, Context context)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of ConfigurationSettings that matches the <code>selector</code>. If no options were\n provided, the <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> contains all of the current settings in the service."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.data.appconfiguration"
artifact: com.azure:azure-data-appconfiguration:1.1.8
