### YamlMime:JavaMember
uid: "com.azure.cosmos.CosmosAsyncContainer.openConnectionsAndInitCaches*"
fullName: "com.azure.cosmos.CosmosAsyncContainer.openConnectionsAndInitCaches"
name: "openConnectionsAndInitCaches"
nameWithType: "CosmosAsyncContainer.openConnectionsAndInitCaches"
members:
- uid: "com.azure.cosmos.CosmosAsyncContainer.openConnectionsAndInitCaches()"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.openConnectionsAndInitCaches()"
  name: "openConnectionsAndInitCaches()"
  nameWithType: "CosmosAsyncContainer.openConnectionsAndInitCaches()"
  summary: "Best effort to initializes the container by warming up the caches and connections for the current read region."
  syntax: "public Mono<Void> openConnectionsAndInitCaches()"
  desc: "Best effort to initializes the container by warming up the caches and connections for the current read region. Depending on how many partitions the container has, the total time needed will also change. But generally you can use the following formula to get an estimated time: If it took 200ms to establish a connection, and you have 100 partitions in your container then it will take around (100 \\* 4 / CPUCores) \\* 200ms to open all connections after get the address list\n\n\nNOTE: This API ideally should be called only once during application initialization before any workload.\nIn case of any transient error, caller should consume the error and continue the regular workload."
  returns:
    description: "Mono of Void."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos"
artifact: com.azure:azure-cosmos:4.34.0
