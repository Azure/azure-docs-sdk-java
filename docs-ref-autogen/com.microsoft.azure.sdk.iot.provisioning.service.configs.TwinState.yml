### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState
  id: TwinState
  artifact: com.microsoft.azure.sdk.iot.provisioning:provisioning-service-client:1.7.0
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs
  children:
  - com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.TwinState(com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection,com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection)
  - com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.getDesiredProperty()
  - com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.getTags()
  - com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.toString()
  langs:
  - java
  name: TwinState
  nameWithType: TwinState
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState
  type: Class
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    Representation of a single Twin initial state for the Device Provisioning Service.


    The TwinState can contain one <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection" data-throw-if-not-resolved="false">TwinCollection</xref> of **Tags**, and one <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection" data-throw-if-not-resolved="false">TwinCollection</xref> of **properties.desired**.


    Each entity in the collections can contain a associated <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinMetadata" data-throw-if-not-resolved="false">TwinMetadata</xref>.


    These metadata are provided by the Service and contains information about the last updated date time, and version.


    For instance, the following is a valid TwinState, represented as `initialTwin` in the rest API.


    ```java

    {
              "initialTwin": {
                  "tags":{
                      "SpeedUnity":"MPH",
                      "$metadata":{
                          "$lastUpdated":"2017-09-21T02:07:44.238Z",
                          "$lastUpdatedVersion":4,
                          "SpeedUnity":{
                              "$lastUpdated":"2017-09-21T02:07:44.238Z",
                              "$lastUpdatedVersion":4
                          }
                      },
                      "$version":4
                  }
                  "properties":{
                      "desired": {
                          "MaxSpeed":{
                              "Value":500,
                              "NewValue":300
                          },
                          "$metadata":{
                              "$lastUpdated":"2017-09-21T02:07:44.238Z",
                              "$lastUpdatedVersion":4,
                              "MaxSpeed":{
                                  "$lastUpdated":"2017-09-21T02:07:44.238Z",
                                  "$lastUpdatedVersion":4,
                                  "Value":{
                                      "$lastUpdated":"2017-09-21T02:07:44.238Z",
                                      "$lastUpdatedVersion":4
                                  },
                                  "NewValue":{
                                      "$lastUpdated":"2017-09-21T02:07:44.238Z",
                                      "$lastUpdatedVersion":4
                                  }
                              }
                          },
                          "$version":4
                      }
                  }
              }
          }
    ```
  syntax:
    content: public class TwinState
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.TwinState()
  id: TwinState()
  artifact: com.microsoft.azure.sdk.iot.provisioning:provisioning-service-client:1.7.0
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState
  langs:
  - java
  name: TwinState()
  nameWithType: TwinState.TwinState()
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.TwinState()
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.TwinState*
  type: Constructor
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    Empty constructor


    Used only by the tools that will deserialize this class.
  syntax:
    content: " TwinState()"
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.TwinState(com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection,com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection)
  id: TwinState(com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection,com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection)
  artifact: com.microsoft.azure.sdk.iot.provisioning:provisioning-service-client:1.7.0
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState
  langs:
  - java
  name: TwinState(TwinCollection tags, TwinCollection desiredProperty)
  nameWithType: TwinState.TwinState(TwinCollection tags, TwinCollection desiredProperty)
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.TwinState(TwinCollection tags, TwinCollection desiredProperty)
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.TwinState*
  type: Constructor
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: "CONSTRUCTOR\n\nThis constructor creates an instance of the TwinState with the provided <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection\" data-throw-if-not-resolved=\"false\">TwinCollection</xref> tags and desired properties.\n\nWhen serialized, this class will looks like the following example:\n\n```java\n\"initialTwin\": {\n              \"tags\":{\n                  \"SpeedUnity\":\"MPH\",\n                  \"$version\":4\n              }\n              \"properties\":{\n                  \"desired\":{\n                      \"MaxSpeed\":{\n                          \"Value\":500,\n                          \"NewValue\":300\n                      },\n                      \"$version\":4\n                  }\n              }\n          }\n      \n     }\n```"
  syntax:
    content: public TwinState(TwinCollection tags, TwinCollection desiredProperty)
    parameters:
    - id: tags
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection
      description: the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection" data-throw-if-not-resolved="false">TwinCollection</xref> with the initial tags state. It can be <code>null</code>.
    - id: desiredProperty
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection
      description: the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection" data-throw-if-not-resolved="false">TwinCollection</xref> with the initial desired properties. It can be <code>null</code>.
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.getDesiredProperty()
  id: getDesiredProperty()
  artifact: com.microsoft.azure.sdk.iot.provisioning:provisioning-service-client:1.7.0
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState
  langs:
  - java
  name: getDesiredProperty()
  nameWithType: TwinState.getDesiredProperty()
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.getDesiredProperty()
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.getDesiredProperty*
  type: Method
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: Getter for the desired property.
  syntax:
    content: public TwinCollection getDesiredProperty()
    return:
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection
      description: The <code>TwinCollection</code> with the desired property content. It can be <code>null</code>.
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.getTags()
  id: getTags()
  artifact: com.microsoft.azure.sdk.iot.provisioning:provisioning-service-client:1.7.0
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState
  langs:
  - java
  name: getTags()
  nameWithType: TwinState.getTags()
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.getTags()
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.getTags*
  type: Method
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: Getter for the tags.
  syntax:
    content: public TwinCollection getTags()
    return:
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection
      description: The <code>TwinCollection</code> with the tags content. It can be <code>null</code>.
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.toString()
  id: toString()
  artifact: com.microsoft.azure.sdk.iot.provisioning:provisioning-service-client:1.7.0
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState
  langs:
  - java
  name: toString()
  nameWithType: TwinState.toString()
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.toString()
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.toString*
  type: Method
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: Creates a pretty print JSON with the content of this class and subclasses.
  syntax:
    content: public String toString()
    return:
      type: java.lang.String
      description: The <code>String</code> with the pretty print JSON.
references:
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection
  name: TwinCollection
  nameWithType: TwinCollection
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.TwinState*
  name: TwinState
  nameWithType: TwinState.TwinState
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.TwinState
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.getTags*
  name: getTags
  nameWithType: TwinState.getTags
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.getTags
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.getDesiredProperty*
  name: getDesiredProperty
  nameWithType: TwinState.getDesiredProperty
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.getDesiredProperty
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.toString*
  name: toString
  nameWithType: TwinState.toString
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinState.toString
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
