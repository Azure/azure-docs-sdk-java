### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.identity.client.Logger.getInstance()
  name: getInstance()
  nameWithType: Logger.getInstance()
  returns:
    description: <p>The single instance of <xref uid="com.microsoft.identity.client.Logger" data-throw-if-not-resolved="false" data-raw-source="Logger"></xref>. </p>
    type: <xref href="com.microsoft.identity.client.Logger?alt=com.microsoft.identity.client.Logger&text=Logger" data-throw-if-not-resolved="False"/>
  syntax: public static Logger getInstance()
  uid: com.microsoft.identity.client.Logger.getInstance()
- fullName: com.microsoft.identity.client.Logger.setEnableLogcatLog(final boolean enableLogcatLog)
  name: setEnableLogcatLog(final boolean enableLogcatLog)
  nameWithType: Logger.setEnableLogcatLog(final boolean enableLogcatLog)
  parameters:
  - description: <p>True if enabling the logcat logging, false otherwise. </p>
    name: enableLogcatLog
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enable/Disable the Android logcat logging. By default, the sdk enables it.</p>

    <p></p>
  syntax: public void setEnableLogcatLog(final boolean enableLogcatLog)
  uid: com.microsoft.identity.client.Logger.setEnableLogcatLog(final boolean)
- fullName: com.microsoft.identity.client.Logger.setEnablePII(final boolean enablePII)
  name: setEnablePII(final boolean enablePII)
  nameWithType: Logger.setEnablePII(final boolean enablePII)
  parameters:
  - description: <p>True if enabling PII info to be logged, false otherwise. </p>
    name: enablePII
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enable log message with PII (personal identifiable information) info. By default, MSAL doesn't log any PII.</p>

    <p></p>
  syntax: public void setEnablePII(final boolean enablePII)
  uid: com.microsoft.identity.client.Logger.setEnablePII(final boolean)
- fullName: com.microsoft.identity.client.Logger.setExternalLogger(final ILoggerCallback externalLogger)
  name: setExternalLogger(final ILoggerCallback externalLogger)
  nameWithType: Logger.setExternalLogger(final ILoggerCallback externalLogger)
  parameters:
  - description: <p>The reference to the <xref uid="com.microsoft.identity.client.ILoggerCallback" data-throw-if-not-resolved="false" data-raw-source="ILoggerCallback"></xref> that can output the logs to the designated places. </p>
    name: externalLogger
    type: final <xref href="com.microsoft.identity.client.ILoggerCallback?alt=com.microsoft.identity.client.ILoggerCallback&text=ILoggerCallback" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if external logger is already set, and the caller is trying to set it again. </p>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the custom logger. Configures external logging to configure a callback that the sdk will use to pass each log message. Overriding the logger callback is not allowed.</p>

    <p></p>
  syntax: public synchronized void setExternalLogger(final ILoggerCallback externalLogger)
  uid: com.microsoft.identity.client.Logger.setExternalLogger(final ILoggerCallback)
- fullName: com.microsoft.identity.client.Logger.setLogLevel(final LogLevel logLevel)
  name: setLogLevel(final LogLevel logLevel)
  nameWithType: Logger.setLogLevel(final LogLevel logLevel)
  parameters:
  - description: <p>The <xref uid="com.microsoft.identity.client.Logger.LogLevel" data-throw-if-not-resolved="false" data-raw-source="LogLevel"></xref> to be enabled for the diagnostic logging. </p>
    name: logLevel
    type: final <xref href="com.microsoft.identity.client.Logger.LogLevel?alt=com.microsoft.identity.client.Logger.LogLevel&text=Logger.LogLevel" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the log level for diagnostic purpose. By default, the sdk enables the verbose level logging.</p>

    <p></p>
  syntax: public void setLogLevel(final LogLevel logLevel)
  uid: com.microsoft.identity.client.Logger.setLogLevel(final LogLevel)
nameWithType: Logger
syntax: public class Logger
type: class
uid: com.microsoft.identity.client.Logger
fullName: com.microsoft.identity.client.Logger
name: Logger
package: com.microsoft.identity.client
summary: >-
  <p>Override public void log(String tag, Logger.LogLevel logLevel, String message, boolean containsPII) { } });   Loglevel can be specified at <xref uid="com.microsoft.identity.client.Logger.LogLevel.ERROR" data-throw-if-not-resolved="false" data-raw-source="LogLevel#ERROR"></xref>, <xref uid="com.microsoft.identity.client.Logger.LogLevel.WARNING" data-throw-if-not-resolved="false" data-raw-source="LogLevel#WARNING"></xref>, <xref uid="com.microsoft.identity.client.Logger.LogLevel.INFO" data-throw-if-not-resolved="false" data-raw-source="LogLevel#INFO"></xref> and <xref uid="com.microsoft.identity.client.Logger.LogLevel.VERBOSE" data-throw-if-not-resolved="false" data-raw-source="LogLevel#VERBOSE"></xref>. The sdk enables the verbose level logging by default, to set different level logging: <pre><code>Logger.getInstance().setLogLevel(Loglevel)

      </code></pre> By default, the sdk doesn't send any log messages that contain PII (personal identifiable information) info. To enable PII logging: <pre><code>Logger.getInstance().setEnablePII(true);

      </code></pre></p>
metadata: {}
