### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.keyvault.cryptography.algorithms.RsaSignature.RsaSignature(String name)
  name: RsaSignature(String name)
  nameWithType: RsaSignature.RsaSignature(String name)
  parameters:
  - name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: protected RsaSignature(String name)
  uid: com.microsoft.azure.keyvault.cryptography.algorithms.RsaSignature.RsaSignature(String)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.keyvault.cryptography.Algorithm" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.keyvault.cryptography.SignatureAlgorithm" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.keyvault.cryptography.AsymmetricSignatureAlgorithm?alt=com.microsoft.azure.keyvault.cryptography.AsymmetricSignatureAlgorithm&text=AsymmetricSignatureAlgorithm" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.keyvault.cryptography.Algorithm.Algorithm(String)
- com.microsoft.azure.keyvault.cryptography.AsymmetricSignatureAlgorithm.AsymmetricSignatureAlgorithm(String)
- com.microsoft.azure.keyvault.cryptography.Algorithm.getName()
- com.microsoft.azure.keyvault.cryptography.SignatureAlgorithm.SignatureAlgorithm(String)
methods:
- fullName: com.microsoft.azure.keyvault.cryptography.algorithms.RsaSignature.createSignatureTransform(KeyPair keyPair)
  name: createSignatureTransform(KeyPair keyPair)
  nameWithType: RsaSignature.createSignatureTransform(KeyPair keyPair)
  parameters:
  - name: keyPair
    type: <xref href="KeyPair?alt=KeyPair&text=KeyPair" data-throw-if-not-resolved="False"/>
  returns:
    type: abstract <xref href="com.microsoft.azure.keyvault.cryptography.ISignatureTransform?alt=com.microsoft.azure.keyvault.cryptography.ISignatureTransform&text=ISignatureTransform" data-throw-if-not-resolved="False"/>
  syntax: public abstract ISignatureTransform createSignatureTransform(KeyPair keyPair)
  uid: com.microsoft.azure.keyvault.cryptography.algorithms.RsaSignature.createSignatureTransform(KeyPair)
- fullName: com.microsoft.azure.keyvault.cryptography.algorithms.RsaSignature.EMSA_PKCS1_V1_5_ENCODE(byte[] m, int emLen, String algorithm)
  name: EMSA_PKCS1_V1_5_ENCODE(byte[] m, int emLen, String algorithm)
  nameWithType: RsaSignature.EMSA_PKCS1_V1_5_ENCODE(byte[] m, int emLen, String algorithm)
  parameters:
  - name: m
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - name: emLen
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - name: algorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  syntax: protected byte [] EMSA_PKCS1_V1_5_ENCODE(byte[] m, int emLen, String algorithm)
  uid: com.microsoft.azure.keyvault.cryptography.algorithms.RsaSignature.EMSA_PKCS1_V1_5_ENCODE(byte [],int,String)
- fullName: com.microsoft.azure.keyvault.cryptography.algorithms.RsaSignature.EMSA_PKCS1_V1_5_ENCODE_HASH(byte[] h, int emLen, String algorithm)
  name: EMSA_PKCS1_V1_5_ENCODE_HASH(byte[] h, int emLen, String algorithm)
  nameWithType: RsaSignature.EMSA_PKCS1_V1_5_ENCODE_HASH(byte[] h, int emLen, String algorithm)
  parameters:
  - name: h
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - name: emLen
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - name: algorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  syntax: protected byte [] EMSA_PKCS1_V1_5_ENCODE_HASH(byte[] h, int emLen, String algorithm)
  uid: com.microsoft.azure.keyvault.cryptography.algorithms.RsaSignature.EMSA_PKCS1_V1_5_ENCODE_HASH(byte [],int,String)
- fullName: com.microsoft.azure.keyvault.cryptography.algorithms.RsaSignature.getOctetLength(int bits)
  name: getOctetLength(int bits)
  nameWithType: RsaSignature.getOctetLength(int bits)
  parameters:
  - name: bits
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: protected int getOctetLength(int bits)
  uid: com.microsoft.azure.keyvault.cryptography.algorithms.RsaSignature.getOctetLength(int)
- fullName: com.microsoft.azure.keyvault.cryptography.algorithms.RsaSignature.I2OSP(BigInteger x, int xLen)
  name: I2OSP(BigInteger x, int xLen)
  nameWithType: RsaSignature.I2OSP(BigInteger x, int xLen)
  parameters:
  - name: x
    type: <xref href="BigInteger?alt=BigInteger&text=BigInteger" data-throw-if-not-resolved="False"/>
  - name: xLen
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  syntax: protected byte [] I2OSP(BigInteger x, int xLen)
  uid: com.microsoft.azure.keyvault.cryptography.algorithms.RsaSignature.I2OSP(BigInteger,int)
- fullName: com.microsoft.azure.keyvault.cryptography.algorithms.RsaSignature.OS2IP(byte[] x)
  name: OS2IP(byte[] x)
  nameWithType: RsaSignature.OS2IP(byte[] x)
  parameters:
  - name: x
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="BigInteger?alt=BigInteger&text=BigInteger" data-throw-if-not-resolved="False"/>
  syntax: protected BigInteger OS2IP(byte[] x)
  uid: com.microsoft.azure.keyvault.cryptography.algorithms.RsaSignature.OS2IP(byte [])
- fullName: com.microsoft.azure.keyvault.cryptography.algorithms.RsaSignature.RSASP1(RSAPrivateKey K, BigInteger m)
  name: RSASP1(RSAPrivateKey K, BigInteger m)
  nameWithType: RsaSignature.RSASP1(RSAPrivateKey K, BigInteger m)
  parameters:
  - name: K
    type: <xref href="RSAPrivateKey?alt=RSAPrivateKey&text=RSAPrivateKey" data-throw-if-not-resolved="False"/>
  - name: m
    type: <xref href="BigInteger?alt=BigInteger&text=BigInteger" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="BigInteger?alt=BigInteger&text=BigInteger" data-throw-if-not-resolved="False"/>
  syntax: protected BigInteger RSASP1(RSAPrivateKey K, BigInteger m)
  uid: com.microsoft.azure.keyvault.cryptography.algorithms.RsaSignature.RSASP1(RSAPrivateKey,BigInteger)
- fullName: com.microsoft.azure.keyvault.cryptography.algorithms.RsaSignature.RSAVP1(RSAPublicKey K, BigInteger s)
  name: RSAVP1(RSAPublicKey K, BigInteger s)
  nameWithType: RsaSignature.RSAVP1(RSAPublicKey K, BigInteger s)
  parameters:
  - name: K
    type: <xref href="RSAPublicKey?alt=RSAPublicKey&text=RSAPublicKey" data-throw-if-not-resolved="False"/>
  - name: s
    type: <xref href="BigInteger?alt=BigInteger&text=BigInteger" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="BigInteger?alt=BigInteger&text=BigInteger" data-throw-if-not-resolved="False"/>
  syntax: protected BigInteger RSAVP1(RSAPublicKey K, BigInteger s)
  uid: com.microsoft.azure.keyvault.cryptography.algorithms.RsaSignature.RSAVP1(RSAPublicKey,BigInteger)
nameWithType: RsaSignature
syntax: public class RsaSignature extends AsymmetricSignatureAlgorithm
type: class
uid: com.microsoft.azure.keyvault.cryptography.algorithms.RsaSignature
fullName: com.microsoft.azure.keyvault.cryptography.algorithms.RsaSignature
name: RsaSignature
package: com.microsoft.azure.keyvault.cryptography.algorithms
metadata: {}
