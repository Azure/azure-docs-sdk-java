### YamlMime:JavaMember
uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDetectionConfigs*"
fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDetectionConfigs"
name: "listDetectionConfigs"
nameWithType: "MetricsAdvisorAdministrationClient.listDetectionConfigs"
members:
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDetectionConfigs(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDetectionConfigs(String metricId)"
  name: "listDetectionConfigs(String metricId)"
  nameWithType: "MetricsAdvisorAdministrationClient.listDetectionConfigs(String metricId)"
  summary: "Given a metric id, retrieve all anomaly detection configurations applied to it.\n\n**Code sample**\n\n```java\nfinal String metricId = \"0b836da8-10e6-46cd-8f4f-28262e113a62\";\n PagedIterable<AnomalyDetectionConfiguration> configsIterable\n     = metricsAdvisorAdminClient.listDetectionConfigs(metricId);\n\n for (AnomalyDetectionConfiguration detectionConfig : configsIterable) {\n     System.out.printf(\"Detection config Id: %s%n\", detectionConfig.getId());\n     System.out.printf(\"Name: %s%n\", detectionConfig.getName());\n     System.out.printf(\"Description: %s%n\", detectionConfig.getDescription());\n     System.out.printf(\"MetricId: %s%n\", detectionConfig.getMetricId());\n }\n```"
  parameters:
  - description: "The metric id."
    name: "metricId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<AnomalyDetectionConfiguration> listDetectionConfigs(String metricId)"
  returns:
    description: "The anomaly detection configurations."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDetectionConfigs(java.lang.String,com.azure.ai.metricsadvisor.administration.models.ListDetectionConfigsOptions,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDetectionConfigs(String metricId, ListDetectionConfigsOptions options, Context context)"
  name: "listDetectionConfigs(String metricId, ListDetectionConfigsOptions options, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.listDetectionConfigs(String metricId, ListDetectionConfigsOptions options, Context context)"
  summary: "Given a metric id, retrieve all anomaly detection configurations applied to it.\n\n**Code sample**\n\n```java\nfinal String metricId = \"0b836da8-10e6-46cd-8f4f-28262e113a62\";\n PagedIterable<AnomalyDetectionConfiguration> configsIterable\n     = metricsAdvisorAdminClient.listDetectionConfigs(metricId,\n         new ListDetectionConfigsOptions(), Context.NONE);\n\n Stream<PagedResponse<AnomalyDetectionConfiguration>> configByPageStream\n     = configsIterable.streamByPage();\n\n configByPageStream.forEach(configPage -> {\n     IterableStream<AnomalyDetectionConfiguration> pageElements = configPage.getElements();\n     for (AnomalyDetectionConfiguration detectionConfig : pageElements) {\n         System.out.printf(\"Detection config Id: %s%n\", detectionConfig.getId());\n         System.out.printf(\"Name: %s%n\", detectionConfig.getName());\n         System.out.printf(\"Description: %s%n\", detectionConfig.getDescription());\n         System.out.printf(\"MetricId: %s%n\", detectionConfig.getMetricId());\n     }\n });\n```"
  parameters:
  - description: "The metric id."
    name: "metricId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "th e additional configurable options to specify when querying the result."
    name: "options"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.ListDetectionConfigsOptions?alt=com.azure.ai.metricsadvisor.administration.models.ListDetectionConfigsOptions&text=ListDetectionConfigsOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<AnomalyDetectionConfiguration> listDetectionConfigs(String metricId, ListDetectionConfigsOptions options, Context context)"
  returns:
    description: "The anomaly detection configurations."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.metricsadvisor.administration"
artifact: com.azure:azure-ai-metricsadvisor:1.1.1
