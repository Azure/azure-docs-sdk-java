### YamlMime:JavaType
uid: "com.azure.spring.data.cosmos.core.generator.QuerySpecGenerator"
fullName: "com.azure.spring.data.cosmos.core.generator.QuerySpecGenerator"
name: "QuerySpecGenerator"
nameWithType: "QuerySpecGenerator"
summary: "Interface of generating Sql<wbr>Query<wbr>Spec"
syntax: "public interface **QuerySpecGenerator**"
methods:
- uid: "com.azure.spring.data.cosmos.core.generator.QuerySpecGenerator.generateCosmos(com.azure.spring.data.cosmos.core.query.CosmosQuery)"
  fullName: "com.azure.spring.data.cosmos.core.generator.QuerySpecGenerator.generateCosmos(CosmosQuery query)"
  name: "generateCosmos(CosmosQuery query)"
  nameWithType: "QuerySpecGenerator.generateCosmos(CosmosQuery query)"
  summary: "Generate the Sql<wbr>Query<wbr>Spec for cosmosDB client."
  modifiers:
  - "abstract"
  parameters:
  - description: "tree structured query condition."
    name: "query"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.query.CosmosQuery?alt=com.azure.spring.data.cosmos.core.query.CosmosQuery&text=CosmosQuery\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract SqlQuerySpec generateCosmos(CosmosQuery query)"
  desc: "Generate the SqlQuerySpec for cosmosDB client."
  returns:
    description: "SqlQuerySpec executed by cosmos client."
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
desc: "Interface of generating SqlQuerySpec"
metadata: {}
package: "com.azure.spring.data.cosmos.core.generator"
artifact: com.azure:azure-spring-data-cosmos:3.43.0
