### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.management.containerregistry.PlatformProperties.architecture()
  name: architecture()
  nameWithType: PlatformProperties.architecture()
  returns:
    description: <p>the architecture value </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.Architecture?alt=com.microsoft.azure.management.containerregistry.Architecture&text=Architecture" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the OS architecture. Possible values include: 'amd64', 'x86', 'arm'.</p>

    <p></p>
  syntax: public Architecture architecture()
  uid: com.microsoft.azure.management.containerregistry.PlatformProperties.architecture()
- fullName: com.microsoft.azure.management.containerregistry.PlatformProperties.os()
  name: os()
  nameWithType: PlatformProperties.os()
  returns:
    description: <p>the os value </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.OS?alt=com.microsoft.azure.management.containerregistry.OS&text=OS" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the operating system type required for the run. Possible values include: 'Windows', 'Linux'.</p>

    <p></p>
  syntax: public OS os()
  uid: com.microsoft.azure.management.containerregistry.PlatformProperties.os()
- fullName: com.microsoft.azure.management.containerregistry.PlatformProperties.variant()
  name: variant()
  nameWithType: PlatformProperties.variant()
  returns:
    description: <p>the variant value </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.Variant?alt=com.microsoft.azure.management.containerregistry.Variant&text=Variant" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get variant of the CPU. Possible values include: 'v6', 'v7', 'v8'.</p>

    <p></p>
  syntax: public Variant variant()
  uid: com.microsoft.azure.management.containerregistry.PlatformProperties.variant()
- fullName: com.microsoft.azure.management.containerregistry.PlatformProperties.withArchitecture(Architecture architecture)
  name: withArchitecture(Architecture architecture)
  nameWithType: PlatformProperties.withArchitecture(Architecture architecture)
  parameters:
  - description: <p>the architecture value to set </p>
    name: architecture
    type: <xref href="com.microsoft.azure.management.containerregistry.Architecture?alt=com.microsoft.azure.management.containerregistry.Architecture&text=Architecture" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the PlatformProperties object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.PlatformProperties?alt=com.microsoft.azure.management.containerregistry.PlatformProperties&text=PlatformProperties" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the OS architecture. Possible values include: 'amd64', 'x86', 'arm'.</p>

    <p></p>
  syntax: public PlatformProperties withArchitecture(Architecture architecture)
  uid: com.microsoft.azure.management.containerregistry.PlatformProperties.withArchitecture(Architecture)
- fullName: com.microsoft.azure.management.containerregistry.PlatformProperties.withOs(OS os)
  name: withOs(OS os)
  nameWithType: PlatformProperties.withOs(OS os)
  parameters:
  - description: <p>the os value to set </p>
    name: os
    type: <xref href="com.microsoft.azure.management.containerregistry.OS?alt=com.microsoft.azure.management.containerregistry.OS&text=OS" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the PlatformProperties object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.PlatformProperties?alt=com.microsoft.azure.management.containerregistry.PlatformProperties&text=PlatformProperties" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the operating system type required for the run. Possible values include: 'Windows', 'Linux'.</p>

    <p></p>
  syntax: public PlatformProperties withOs(OS os)
  uid: com.microsoft.azure.management.containerregistry.PlatformProperties.withOs(OS)
- fullName: com.microsoft.azure.management.containerregistry.PlatformProperties.withVariant(Variant variant)
  name: withVariant(Variant variant)
  nameWithType: PlatformProperties.withVariant(Variant variant)
  parameters:
  - description: <p>the variant value to set </p>
    name: variant
    type: <xref href="com.microsoft.azure.management.containerregistry.Variant?alt=com.microsoft.azure.management.containerregistry.Variant&text=Variant" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the PlatformProperties object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.PlatformProperties?alt=com.microsoft.azure.management.containerregistry.PlatformProperties&text=PlatformProperties" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set variant of the CPU. Possible values include: 'v6', 'v7', 'v8'.</p>

    <p></p>
  syntax: public PlatformProperties withVariant(Variant variant)
  uid: com.microsoft.azure.management.containerregistry.PlatformProperties.withVariant(Variant)
nameWithType: PlatformProperties
syntax: public class PlatformProperties
type: class
uid: com.microsoft.azure.management.containerregistry.PlatformProperties
fullName: com.microsoft.azure.management.containerregistry.PlatformProperties
name: PlatformProperties
package: com.microsoft.azure.management.containerregistry
summary: <p>The platform properties against which the run has to happen. </p>
metadata: {}
