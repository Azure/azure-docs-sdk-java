### YamlMime:JavaType
uid: "com.azure.core.util.ProgressReporter"
fullName: "com.azure.core.util.ProgressReporter"
name: "ProgressReporter"
nameWithType: "ProgressReporter"
summary: "<xref uid=\"com.azure.core.util.ProgressReporter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProgressReporter\"></xref> offers a convenient way to add progress tracking to I/O operations."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ProgressReporter"
methods:
- "com.azure.core.util.ProgressReporter.createChild()"
- "com.azure.core.util.ProgressReporter.reportProgress(long)"
- "com.azure.core.util.ProgressReporter.reset()"
- "com.azure.core.util.ProgressReporter.withProgressListener(com.azure.core.util.ProgressListener)"
type: "class"
desc: "<xref uid=\"com.azure.core.util.ProgressReporter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProgressReporter\"></xref> offers a convenient way to add progress tracking to I/O operations.\n\nThe <xref uid=\"com.azure.core.util.ProgressReporter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProgressReporter\"></xref> can be used to track a single operation as well as the progress of complex operations that involve multiple sub-operations. In the latter case <xref uid=\"com.azure.core.util.ProgressReporter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProgressReporter\"></xref> forms a tree where child nodes track the progress of sub-operations and report to the parent which in turn aggregates the total progress. The reporting tree can have arbitrary level of nesting.\n\n**Code samples**\n\n```java\n/**\n  * A simple operation that simulates I/O activity.\n  * @param progressReporter The {@link ProgressReporter}.\n  */\n public static void simpleOperation(ProgressReporter progressReporter) {\n     for (long i = 0; i < 100; i++) {\n         // Simulate 100 I/Os with 10 progress.\n         progressReporter.reportProgress(10);\n     }\n }\n\n /**\n  * A complex operation that simulates I/O activity by invoking multiple {@link #simpleOperation(ProgressReporter)}.\n  * @param progressReporter The {@link ProgressReporter}.\n  */\n public static void complexOperation(ProgressReporter progressReporter) {\n     simpleOperation(progressReporter.createChild());\n     simpleOperation(progressReporter.createChild());\n     simpleOperation(progressReporter.createChild());\n }\n\n /**\n  * The main method.\n  * @param args Program arguments.\n  */\n public static void main(String[] args) {\n     // Execute simpleOperation\n     ProgressReporter simpleOperationProgressReporter = ProgressReporter\n         .withProgressListener(progress -> System.out.println(\"Simple operation progress \" + progress));\n     simpleOperation(simpleOperationProgressReporter);\n\n     // Execute complexOperation\n     ProgressReporter complexOperationProgressReporter = ProgressReporter\n         .withProgressListener(progress -> System.out.println(\"Complex operation progress \" + progress));\n     complexOperation(complexOperationProgressReporter);\n }\n```"
metadata: {}
package: "com.azure.core.util"
artifact: com.azure:azure-core:1.31.0
