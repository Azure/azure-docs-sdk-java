### YamlMime:JavaType
uid: "com.microsoft.azure.management.batch.StartTask"
fullName: "com.microsoft.azure.management.batch.StartTask"
name: "StartTask"
nameWithType: "StartTask"
summary: "A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class StartTask"
constructors:
- uid: "com.microsoft.azure.management.batch.StartTask.StartTask()"
  fullName: "com.microsoft.azure.management.batch.StartTask.StartTask()"
  name: "StartTask()"
  nameWithType: "StartTask.StartTask()"
  syntax: "public StartTask()"
methods:
- uid: "com.microsoft.azure.management.batch.StartTask.commandLine()"
  fullName: "com.microsoft.azure.management.batch.StartTask.commandLine()"
  name: "commandLine()"
  nameWithType: "StartTask.commandLine()"
  summary: "Get the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion."
  syntax: "public String commandLine()"
  desc: "Get the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. Required if any other properties of the startTask are specified."
  returns:
    description: "the commandLine value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.batch.StartTask.containerSettings()"
  fullName: "com.microsoft.azure.management.batch.StartTask.containerSettings()"
  name: "containerSettings()"
  nameWithType: "StartTask.containerSettings()"
  summary: "Get when this is specified, all directories recursively below the AZ\\_BATCH\\_NODE\\_ROOT\\_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container."
  syntax: "public TaskContainerSettings containerSettings()"
  desc: "Get when this is specified, all directories recursively below the AZ\\_BATCH\\_NODE\\_ROOT\\_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container."
  returns:
    description: "the containerSettings value"
    type: "<xref href=\"com.microsoft.azure.management.batch.TaskContainerSettings?alt=com.microsoft.azure.management.batch.TaskContainerSettings&text=TaskContainerSettings\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.batch.StartTask.environmentSettings()"
  fullName: "com.microsoft.azure.management.batch.StartTask.environmentSettings()"
  name: "environmentSettings()"
  nameWithType: "StartTask.environmentSettings()"
  summary: "Get the environment<wbr>Settings value."
  syntax: "public List<EnvironmentSetting> environmentSettings()"
  desc: "Get the environmentSettings value."
  returns:
    description: "the environmentSettings value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.batch.EnvironmentSetting?alt=com.microsoft.azure.management.batch.EnvironmentSetting&text=EnvironmentSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.batch.StartTask.maxTaskRetryCount()"
  fullName: "com.microsoft.azure.management.batch.StartTask.maxTaskRetryCount()"
  name: "maxTaskRetryCount()"
  nameWithType: "StartTask.maxTaskRetryCount()"
  summary: "Get the Batch service retries a task if its exit code is nonzero."
  syntax: "public Integer maxTaskRetryCount()"
  desc: "Get the Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit."
  returns:
    description: "the maxTaskRetryCount value"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.batch.StartTask.resourceFiles()"
  fullName: "com.microsoft.azure.management.batch.StartTask.resourceFiles()"
  name: "resourceFiles()"
  nameWithType: "StartTask.resourceFiles()"
  summary: "Get the resource<wbr>Files value."
  syntax: "public List<ResourceFile> resourceFiles()"
  desc: "Get the resourceFiles value."
  returns:
    description: "the resourceFiles value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.batch.ResourceFile?alt=com.microsoft.azure.management.batch.ResourceFile&text=ResourceFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.batch.StartTask.userIdentity()"
  fullName: "com.microsoft.azure.management.batch.StartTask.userIdentity()"
  name: "userIdentity()"
  nameWithType: "StartTask.userIdentity()"
  summary: "Get if omitted, the task runs as a non-administrative user unique to the task."
  syntax: "public UserIdentity userIdentity()"
  desc: "Get if omitted, the task runs as a non-administrative user unique to the task."
  returns:
    description: "the userIdentity value"
    type: "<xref href=\"com.microsoft.azure.management.batch.UserIdentity?alt=com.microsoft.azure.management.batch.UserIdentity&text=UserIdentity\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.batch.StartTask.waitForSuccess()"
  fullName: "com.microsoft.azure.management.batch.StartTask.waitForSuccess()"
  name: "waitForSuccess()"
  nameWithType: "StartTask.waitForSuccess()"
  summary: "Get if true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (max<wbr>Task<wbr>Retry<wbr>Count)."
  syntax: "public Boolean waitForSuccess()"
  desc: "Get if true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is true."
  returns:
    description: "the waitForSuccess value"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.batch.StartTask.withCommandLine(java.lang.String)"
  fullName: "com.microsoft.azure.management.batch.StartTask.withCommandLine(String commandLine)"
  name: "withCommandLine(String commandLine)"
  nameWithType: "StartTask.withCommandLine(String commandLine)"
  summary: "Set the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion."
  parameters:
  - description: "the commandLine value to set"
    name: "commandLine"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public StartTask withCommandLine(String commandLine)"
  desc: "Set the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. Required if any other properties of the startTask are specified."
  returns:
    description: "the StartTask object itself."
    type: "<xref href=\"com.microsoft.azure.management.batch.StartTask?alt=com.microsoft.azure.management.batch.StartTask&text=StartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.batch.StartTask.withContainerSettings(com.microsoft.azure.management.batch.TaskContainerSettings)"
  fullName: "com.microsoft.azure.management.batch.StartTask.withContainerSettings(TaskContainerSettings containerSettings)"
  name: "withContainerSettings(TaskContainerSettings containerSettings)"
  nameWithType: "StartTask.withContainerSettings(TaskContainerSettings containerSettings)"
  summary: "Set when this is specified, all directories recursively below the AZ\\_BATCH\\_NODE\\_ROOT\\_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container."
  parameters:
  - description: "the containerSettings value to set"
    name: "containerSettings"
    type: "<xref href=\"com.microsoft.azure.management.batch.TaskContainerSettings?alt=com.microsoft.azure.management.batch.TaskContainerSettings&text=TaskContainerSettings\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public StartTask withContainerSettings(TaskContainerSettings containerSettings)"
  desc: "Set when this is specified, all directories recursively below the AZ\\_BATCH\\_NODE\\_ROOT\\_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container."
  returns:
    description: "the StartTask object itself."
    type: "<xref href=\"com.microsoft.azure.management.batch.StartTask?alt=com.microsoft.azure.management.batch.StartTask&text=StartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.batch.StartTask.withEnvironmentSettings(java.util.List<com.microsoft.azure.management.batch.EnvironmentSetting>)"
  fullName: "com.microsoft.azure.management.batch.StartTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)"
  name: "withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)"
  nameWithType: "StartTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)"
  summary: "Set the environment<wbr>Settings value."
  parameters:
  - description: "the environmentSettings value to set"
    name: "environmentSettings"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.batch.EnvironmentSetting?alt=com.microsoft.azure.management.batch.EnvironmentSetting&text=EnvironmentSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public StartTask withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)"
  desc: "Set the environmentSettings value."
  returns:
    description: "the StartTask object itself."
    type: "<xref href=\"com.microsoft.azure.management.batch.StartTask?alt=com.microsoft.azure.management.batch.StartTask&text=StartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.batch.StartTask.withMaxTaskRetryCount(java.lang.Integer)"
  fullName: "com.microsoft.azure.management.batch.StartTask.withMaxTaskRetryCount(Integer maxTaskRetryCount)"
  name: "withMaxTaskRetryCount(Integer maxTaskRetryCount)"
  nameWithType: "StartTask.withMaxTaskRetryCount(Integer maxTaskRetryCount)"
  summary: "Set the Batch service retries a task if its exit code is nonzero."
  parameters:
  - description: "the maxTaskRetryCount value to set"
    name: "maxTaskRetryCount"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public StartTask withMaxTaskRetryCount(Integer maxTaskRetryCount)"
  desc: "Set the Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit."
  returns:
    description: "the StartTask object itself."
    type: "<xref href=\"com.microsoft.azure.management.batch.StartTask?alt=com.microsoft.azure.management.batch.StartTask&text=StartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.batch.StartTask.withResourceFiles(java.util.List<com.microsoft.azure.management.batch.ResourceFile>)"
  fullName: "com.microsoft.azure.management.batch.StartTask.withResourceFiles(List<ResourceFile> resourceFiles)"
  name: "withResourceFiles(List<ResourceFile> resourceFiles)"
  nameWithType: "StartTask.withResourceFiles(List<ResourceFile> resourceFiles)"
  summary: "Set the resource<wbr>Files value."
  parameters:
  - description: "the resourceFiles value to set"
    name: "resourceFiles"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.batch.ResourceFile?alt=com.microsoft.azure.management.batch.ResourceFile&text=ResourceFile\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public StartTask withResourceFiles(List<ResourceFile> resourceFiles)"
  desc: "Set the resourceFiles value."
  returns:
    description: "the StartTask object itself."
    type: "<xref href=\"com.microsoft.azure.management.batch.StartTask?alt=com.microsoft.azure.management.batch.StartTask&text=StartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.batch.StartTask.withUserIdentity(com.microsoft.azure.management.batch.UserIdentity)"
  fullName: "com.microsoft.azure.management.batch.StartTask.withUserIdentity(UserIdentity userIdentity)"
  name: "withUserIdentity(UserIdentity userIdentity)"
  nameWithType: "StartTask.withUserIdentity(UserIdentity userIdentity)"
  summary: "Set if omitted, the task runs as a non-administrative user unique to the task."
  parameters:
  - description: "the userIdentity value to set"
    name: "userIdentity"
    type: "<xref href=\"com.microsoft.azure.management.batch.UserIdentity?alt=com.microsoft.azure.management.batch.UserIdentity&text=UserIdentity\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public StartTask withUserIdentity(UserIdentity userIdentity)"
  desc: "Set if omitted, the task runs as a non-administrative user unique to the task."
  returns:
    description: "the StartTask object itself."
    type: "<xref href=\"com.microsoft.azure.management.batch.StartTask?alt=com.microsoft.azure.management.batch.StartTask&text=StartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.batch.StartTask.withWaitForSuccess(java.lang.Boolean)"
  fullName: "com.microsoft.azure.management.batch.StartTask.withWaitForSuccess(Boolean waitForSuccess)"
  name: "withWaitForSuccess(Boolean waitForSuccess)"
  nameWithType: "StartTask.withWaitForSuccess(Boolean waitForSuccess)"
  summary: "Set if true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (max<wbr>Task<wbr>Retry<wbr>Count)."
  parameters:
  - description: "the waitForSuccess value to set"
    name: "waitForSuccess"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public StartTask withWaitForSuccess(Boolean waitForSuccess)"
  desc: "Set if true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is true."
  returns:
    description: "the StartTask object itself."
    type: "<xref href=\"com.microsoft.azure.management.batch.StartTask?alt=com.microsoft.azure.management.batch.StartTask&text=StartTask\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged. In some cases the start task may be re-run even though the node was not rebooted. Due to this, start tasks should be idempotent and exit gracefully if the setup they're performing has already been done. Special care should be taken to avoid start tasks which create breakaway process or install/launch services from the start task working directory, as this will block Batch from being able to re-run the start task."
metadata: {}
package: "com.microsoft.azure.management.batch"
artifact: com.microsoft.azure:azure-mgmt-batch:1.41.4
