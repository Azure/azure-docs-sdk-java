### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.eventhubs.BatchOptions
  id: BatchOptions
  parent: com.microsoft.azure.eventhubs
  children:
  - com.microsoft.azure.eventhubs.BatchOptions.maxMessageSize
  - com.microsoft.azure.eventhubs.BatchOptions.partitionKey
  - com.microsoft.azure.eventhubs.BatchOptions.with(Consumer<BatchOptions>)
  href: com.microsoft.azure.eventhubs.BatchOptions.yml
  langs:
  - java
  name: BatchOptions
  nameWithType: BatchOptions
  fullName: com.microsoft.azure.eventhubs.BatchOptions
  type: Class
  source:
    remote: &o0
      path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/BatchOptions.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-java
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/BatchOptions.java
    startLine: 45
  package: com.microsoft.azure.eventhubs
  summary: "<p>BatchOptions is used to create <xref uid=\"com.microsoft.azure.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref>es. </p>\r\n<p>If you're creating <xref uid=\"com.microsoft.azure.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref>es with <xref uid=\"com.microsoft.azure.eventhubs.EventHubClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubClient\"></xref>, then you can set a partitionKey and maxMessageSize using the .with() method. Alternatively, if you'd like the default settings, simply construct BatchOptions with the void constructor. Default settings:<ul><li><p>partitionKey is null</p></li><li><p>maxMessageSize is the maximum allowed size </p></li></ul></p>\r\n<p>If you're creating <xref uid=\"com.microsoft.azure.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref>es with <xref uid=\"com.microsoft.azure.eventhubs.PartitionSender\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionSender\"></xref>, then you can only set a maxMessageSize using the .with() method. Alternatively, if you'd like the default settings, simply construct BatchOptions with the void constructor. Default settings:<ul><li><p>maxMessageSize is the maximum allowed size</p></li><li><p>Note: if you set a partition key, an <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalArgumentException\"></xref> will be thrown. </p></li></ul></p>\r\n<p>To construct either type of batch, create a <xref uid=\"com.microsoft.azure.eventhubs.BatchOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchOptions\"></xref> object and pass it into the appropriate createBatch method. If using <xref uid=\"com.microsoft.azure.eventhubs.PartitionSender\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionSender\"></xref>, then use (<xref uid=\"com.microsoft.azure.eventhubs.PartitionSender.createBatch(BatchOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionSender#createBatch(BatchOptions)\"></xref>. If using <xref uid=\"com.microsoft.azure.eventhubs.EventHubClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubClient\"></xref>, then use <xref uid=\"com.microsoft.azure.eventhubs.EventHubClient.createBatch(BatchOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubClient#createBatch(BatchOptions)\"></xref>. <pre><code>// Note: For all examples, 'client' is an instance of EventHubClient. The usage is the same for PartitionSender,\r\n    however, you can NOT set a partition key when using PartitionSender\r\n    \r\n    // Create EventDataBatch with defaults\r\n    EventDataBatch edb1 = client.createBatch();\r\n    \r\n    // Create EventDataBatch with custom partitionKey\r\n    BatchOptions options = new BatchOptions().with( options -&gt; options.partitionKey = \"foo\");\r\n    EventDataBatch edb2 = client.createBatch(options);\r\n    \r\n    // Create EventDataBatch with custom partitionKey and maxMessageSize\r\n    BatchOptions options = new BatchOptions().with ( options -&gt; {\r\n        options.partitionKey = \"foo\";\r\n        options.maxMessageSize = 100 * 1024;\r\n    };\r\n    EventDataBatch edb3 = client.createBatch(options);\r\n    </code></pre></p>"
  syntax: &o1
    content: public class BatchOptions
  inheritance:
  - java.lang.Object
- uid: com.microsoft.azure.eventhubs.BatchOptions.maxMessageSize
  id: maxMessageSize
  parent: com.microsoft.azure.eventhubs.BatchOptions
  href: com.microsoft.azure.eventhubs.BatchOptions.yml
  langs:
  - java
  name: maxMessageSize
  nameWithType: BatchOptions.maxMessageSize
  fullName: com.microsoft.azure.eventhubs.BatchOptions.maxMessageSize
  type: Field
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/BatchOptions.java
    startLine: 58
  package: com.microsoft.azure.eventhubs
  summary: "<p>The maximum size in bytes of <xref uid=\"com.microsoft.azure.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref> being constructed. This value cannot exceed the maximum size supported by Event Hubs service. <xref uid=\"com.microsoft.azure.eventhubs.EventDataBatch.tryAdd(final EventData)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch#tryAdd(EventData)\"></xref> API will use this value as the upper limit. </p>"
  syntax:
    content: public Integer maxMessageSize= null
    return:
      type: 08effaa0
- uid: com.microsoft.azure.eventhubs.BatchOptions.partitionKey
  id: partitionKey
  parent: com.microsoft.azure.eventhubs.BatchOptions
  href: com.microsoft.azure.eventhubs.BatchOptions.yml
  langs:
  - java
  name: partitionKey
  nameWithType: BatchOptions.partitionKey
  fullName: com.microsoft.azure.eventhubs.BatchOptions.partitionKey
  type: Field
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/BatchOptions.java
    startLine: 51
  package: com.microsoft.azure.eventhubs
  summary: "<p>The partitionKey to use for all <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>s sent in the current <xref uid=\"com.microsoft.azure.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref>. Setting a PartitionKey will deliver the <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> to a specific Event Hubs partition. </p>"
  syntax:
    content: public String partitionKey= null
    return:
      type: "26831127"
- uid: com.microsoft.azure.eventhubs.BatchOptions.with(Consumer<BatchOptions>)
  id: with(Consumer<BatchOptions>)
  parent: com.microsoft.azure.eventhubs.BatchOptions
  href: com.microsoft.azure.eventhubs.BatchOptions.yml
  langs:
  - java
  name: with(Consumer<BatchOptions> builderFunction)
  nameWithType: BatchOptions.with(Consumer<BatchOptions> builderFunction)
  fullName: com.microsoft.azure.eventhubs.BatchOptions.with(Consumer<BatchOptions> builderFunction)
  overload: com.microsoft.azure.eventhubs.BatchOptions.with*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/BatchOptions.java
    startLine: 60
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public final BatchOptions with(Consumer<BatchOptions> builderFunction)
    parameters:
    - id: builderFunction
      type: e0918e98com.microsoft.azure.eventhubs.BatchOptionsa08ddfce
    return:
      type: 93de0ef9com.microsoft.azure.eventhubs.BatchOptions
references:
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: 08effaa0
  spec.java:
  - name: Integer
    fullName: Integer
- uid: e0918e98com.microsoft.azure.eventhubs.BatchOptionsa08ddfce
  spec.java:
  - name: Consumer<
    fullName: Consumer<
  - uid: com.microsoft.azure.eventhubs.BatchOptions
    name: BatchOptions
    fullName: com.microsoft.azure.eventhubs.BatchOptions
    href: com.microsoft.azure.eventhubs.BatchOptions.yml
  - name: '>'
    fullName: '>'
- uid: 93de0ef9com.microsoft.azure.eventhubs.BatchOptions
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.eventhubs.BatchOptions
    name: BatchOptions
    fullName: com.microsoft.azure.eventhubs.BatchOptions
    href: com.microsoft.azure.eventhubs.BatchOptions.yml
- uid: com.microsoft.azure.eventhubs.BatchOptions.with*
  name: with
  nameWithType: BatchOptions.with
  fullName: com.microsoft.azure.eventhubs.BatchOptions.with
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.EventData
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs.EventData.yml
  name: EventData
  nameWithType: EventData
  fullName: com.microsoft.azure.eventhubs.EventData
  type: Interface
  summary: "<p>The data structure encapsulating the Event being sent-to and received-from EventHubs. Each EventHubs partition can be visualized as a Stream of <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>. </p>\r\n<p>Serializing a received <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> with AMQP sections other than ApplicationProperties (with primitive java types) and Data section is not supported. </p>\r\n<p>Here's how AMQP message sections map to <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>. Here's the reference used for AMQP 1.0 specification: <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf\">http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf</a><pre>\r\ni.   <xref uid=\"com.microsoft.azure.eventhubs.EventData.getProperties()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getProperties()\"></xref> - AMQPMessage.ApplicationProperties section\r\nii.  <xref uid=\"com.microsoft.azure.eventhubs.EventData.getBytes()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getBytes()\"></xref> - if AMQPMessage.Body has Data section\r\niii. <xref uid=\"com.microsoft.azure.eventhubs.EventData.getObject()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getObject()\"></xref> - if AMQPMessage.Body has AMQPValue or AMQPSequence sections\r\n</pre> While using client libraries released by Microsoft Azure EventHubs, sections (i) and (ii) alone are sufficient. Section (iii) is used for advanced scenarios, where the sending application uses third-party AMQP library to send the message to EventHubs and the receiving application uses this client library to receive <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>. </p>"
  syntax:
    content: public interface EventData
- uid: com.microsoft.azure.eventhubs.EventDataBatch
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs.EventDataBatch.yml
  name: EventDataBatch
  nameWithType: EventDataBatch
  fullName: com.microsoft.azure.eventhubs.EventDataBatch
  type: Interface
  summary: "<p>Helper for creating a batch/collection of EventData objects to be used while Sending to EventHubs </p>"
  syntax:
    content: public interface EventDataBatch
- uid: com.microsoft.azure.eventhubs.EventDataBatch.tryAdd(final EventData)
  parent: com.microsoft.azure.eventhubs.EventDataBatch
  href: com.microsoft.azure.eventhubs.EventDataBatch.yml
  name: tryAdd(final EventData eventData)
  nameWithType: EventDataBatch.tryAdd(final EventData eventData)
  fullName: com.microsoft.azure.eventhubs.EventDataBatch.tryAdd(final EventData eventData)
  type: Method
  summary: "<p>Add's <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> to <xref uid=\"com.microsoft.azure.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref>, if permitted by the batch's size limit. This method is not thread-safe.</p>\r\n<p></p>"
  syntax:
    content: public boolean tryAdd(final EventData eventData)
    parameters:
    - id: eventData
      type: 93de0ef9com.microsoft.azure.eventhubs.EventData
      description: <p>The <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> to add. </p>
    return:
      type: 4fc6e284
      description: <p>A boolean value indicating if the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> addition to this batch/collection was successful or not. </p>
- uid: com.microsoft.azure.eventhubs.BatchOptions
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs.BatchOptions.yml
  name: BatchOptions
  nameWithType: BatchOptions
  fullName: com.microsoft.azure.eventhubs.BatchOptions
  type: Class
  summary: "<p>BatchOptions is used to create <xref uid=\"com.microsoft.azure.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref>es. </p>\r\n<p>If you're creating <xref uid=\"com.microsoft.azure.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref>es with <xref uid=\"com.microsoft.azure.eventhubs.EventHubClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubClient\"></xref>, then you can set a partitionKey and maxMessageSize using the .with() method. Alternatively, if you'd like the default settings, simply construct BatchOptions with the void constructor. Default settings:<ul><li><p>partitionKey is null</p></li><li><p>maxMessageSize is the maximum allowed size </p></li></ul></p>\r\n<p>If you're creating <xref uid=\"com.microsoft.azure.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref>es with <xref uid=\"com.microsoft.azure.eventhubs.PartitionSender\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionSender\"></xref>, then you can only set a maxMessageSize using the .with() method. Alternatively, if you'd like the default settings, simply construct BatchOptions with the void constructor. Default settings:<ul><li><p>maxMessageSize is the maximum allowed size</p></li><li><p>Note: if you set a partition key, an <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalArgumentException\"></xref> will be thrown. </p></li></ul></p>\r\n<p>To construct either type of batch, create a <xref uid=\"com.microsoft.azure.eventhubs.BatchOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BatchOptions\"></xref> object and pass it into the appropriate createBatch method. If using <xref uid=\"com.microsoft.azure.eventhubs.PartitionSender\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionSender\"></xref>, then use (<xref uid=\"com.microsoft.azure.eventhubs.PartitionSender.createBatch(BatchOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionSender#createBatch(BatchOptions)\"></xref>. If using <xref uid=\"com.microsoft.azure.eventhubs.EventHubClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubClient\"></xref>, then use <xref uid=\"com.microsoft.azure.eventhubs.EventHubClient.createBatch(BatchOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubClient#createBatch(BatchOptions)\"></xref>. <pre><code>// Note: For all examples, 'client' is an instance of EventHubClient. The usage is the same for PartitionSender,\r\n    however, you can NOT set a partition key when using PartitionSender\r\n    \r\n    // Create EventDataBatch with defaults\r\n    EventDataBatch edb1 = client.createBatch();\r\n    \r\n    // Create EventDataBatch with custom partitionKey\r\n    BatchOptions options = new BatchOptions().with( options -&gt; options.partitionKey = \"foo\");\r\n    EventDataBatch edb2 = client.createBatch(options);\r\n    \r\n    // Create EventDataBatch with custom partitionKey and maxMessageSize\r\n    BatchOptions options = new BatchOptions().with ( options -&gt; {\r\n        options.partitionKey = \"foo\";\r\n        options.maxMessageSize = 100 * 1024;\r\n    };\r\n    EventDataBatch edb3 = client.createBatch(options);\r\n    </code></pre></p>"
  syntax: *o1
- uid: com.microsoft.azure.eventhubs.EventHubClient
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs.EventHubClient.yml
  name: EventHubClient
  nameWithType: EventHubClient
  fullName: com.microsoft.azure.eventhubs.EventHubClient
  type: Interface
  summary: "<p>Anchor class - all EventHub client operations STARTS here.</p>\r\n<p></p>"
  syntax:
    content: public interface EventHubClient
- uid: com.microsoft.azure.eventhubs.PartitionSender
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs.PartitionSender.yml
  name: PartitionSender
  nameWithType: PartitionSender
  fullName: com.microsoft.azure.eventhubs.PartitionSender
  type: Interface
  summary: "<p>This sender class is a logical representation of sending events to a specific EventHub partition. Do not use this class if you do not care about sending events to specific partitions. Instead, use <xref uid=\"com.microsoft.azure.eventhubs.EventHubClient.send(final EventData)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubClient#send\"></xref> method.</p>\r\n<p></p>"
  syntax:
    content: public interface PartitionSender
- uid: com.microsoft.azure.eventhubs.PartitionSender.createBatch(BatchOptions)
  parent: com.microsoft.azure.eventhubs.PartitionSender
  href: com.microsoft.azure.eventhubs.PartitionSender.yml
  name: createBatch(BatchOptions options)
  nameWithType: PartitionSender.createBatch(BatchOptions options)
  fullName: com.microsoft.azure.eventhubs.PartitionSender.createBatch(BatchOptions options)
  type: Method
  summary: "<p>Creates an Empty Collection of <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>. The same partitionKey must be used while sending these events using <xref uid=\"com.microsoft.azure.eventhubs.PartitionSender.send(EventDataBatch)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionSender#send(EventDataBatch)\"></xref>.</p>\r\n<p></p>"
  syntax:
    content: public EventDataBatch createBatch(BatchOptions options)
    parameters:
    - id: options
      type: com.microsoft.azure.eventhubs.BatchOptions
      description: <p>see <xref uid="com.microsoft.azure.eventhubs.BatchOptions" data-throw-if-not-resolved="false" data-raw-source="BatchOptions"></xref> for more usage details </p>
    return:
      type: com.microsoft.azure.eventhubs.EventDataBatch
      description: <p>the empty <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false" data-raw-source="EventDataBatch"></xref>, after negotiating maximum message size with EventHubs service </p>
- uid: com.microsoft.azure.eventhubs.EventHubClient.createBatch(BatchOptions)
  parent: com.microsoft.azure.eventhubs.EventHubClient
  href: com.microsoft.azure.eventhubs.EventHubClient.yml
  name: createBatch(BatchOptions options)
  nameWithType: EventHubClient.createBatch(BatchOptions options)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.createBatch(BatchOptions options)
  type: Method
  summary: "<p>Creates an Empty Collection of <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>. The same partitionKey must be used while sending these events using <xref uid=\"com.microsoft.azure.eventhubs.EventHubClient.send(final EventDataBatch)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubClient#send(EventDataBatch)\"></xref>.</p>\r\n<p></p>"
  syntax:
    content: public EventDataBatch createBatch(BatchOptions options)
    parameters:
    - id: options
      type: com.microsoft.azure.eventhubs.BatchOptions
      description: <p>see <xref uid="com.microsoft.azure.eventhubs.BatchOptions" data-throw-if-not-resolved="false" data-raw-source="BatchOptions"></xref> for more details </p>
    return:
      type: com.microsoft.azure.eventhubs.EventDataBatch
      description: <p>the empty <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false" data-raw-source="EventDataBatch"></xref>, after negotiating maximum message size with EventHubs service </p>
