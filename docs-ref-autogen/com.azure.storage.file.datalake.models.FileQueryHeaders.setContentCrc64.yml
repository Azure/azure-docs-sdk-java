### YamlMime:JavaMember
uid: "com.azure.storage.file.datalake.models.FileQueryHeaders.setContentCrc64*"
fullName: "com.azure.storage.file.datalake.models.FileQueryHeaders.setContentCrc64"
name: "setContentCrc64"
nameWithType: "FileQueryHeaders.setContentCrc64"
members:
- uid: "com.azure.storage.file.datalake.models.FileQueryHeaders.setContentCrc64(byte[])"
  fullName: "com.azure.storage.file.datalake.models.FileQueryHeaders.setContentCrc64(byte[] contentCrc64)"
  name: "setContentCrc64(byte[] contentCrc64)"
  nameWithType: "FileQueryHeaders.setContentCrc64(byte[] contentCrc64)"
  summary: "Set the contentCrc64 property: If the request is to read a specified range and the x-ms-range-get-content-crc64 is set to true, then the request returns a crc64 for the range, as long as the range size is less than or equal to 4 MB. If both x-ms-range-get-content-crc64 & x-ms-range-get-content-md5 is specified in the same request, it will fail with 400(Bad Request)."
  parameters:
  - description: "the contentCrc64 value to set."
    name: "contentCrc64"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public FileQueryHeaders setContentCrc64(byte[] contentCrc64)"
  returns:
    description: "the FileQueryHeaders object itself."
    type: "<xref href=\"com.azure.storage.file.datalake.models.FileQueryHeaders?alt=com.azure.storage.file.datalake.models.FileQueryHeaders&text=FileQueryHeaders\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.storage.file.datalake.models"
artifact: com.azure:azure-storage-file-datalake:12.4.0
