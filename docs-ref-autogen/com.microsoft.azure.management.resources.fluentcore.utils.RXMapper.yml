### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="rx.functions.Func1&lt;Object, T&gt;" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.management.resources.fluentcore.utils.RXMapper<T>.call(Object t)
  name: call(Object t)
  nameWithType: RXMapper<T>.call(Object t)
  parameters:
  - name: t
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="T?alt=T&text=T" data-throw-if-not-resolved="False"/>
  syntax: public T call(Object t)
  uid: com.microsoft.azure.management.resources.fluentcore.utils.RXMapper.call(Object)
- fullName: com.microsoft.azure.management.resources.fluentcore.utils.RXMapper<T>.map(Observable<?> fromObservable, final T toValue)
  name: map(Observable<?> fromObservable, final T toValue)
  nameWithType: RXMapper<T>.map(Observable<?> fromObservable, final T toValue)
  parameters:
  - description: <p>the source observable </p>
    name: fromObservable
    type: <xref href="Observable%3C%3F%3E?alt=Observable%3C%3F%3E&text=Observable%3C%3F%3E" data-throw-if-not-resolved="False"/>
  - description: <p>the value to emit to the observer </p>
    name: toValue
    type: <xref href="final+T?alt=final+T&text=final+T" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>an observable emitting the specified value </p>
    type: <xref href="static%3CT%3E+Observable%3CT%3E?alt=static%3CT%3E+Observable%3CT%3E&text=static%3CT%3E+Observable%3CT%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Shortcut for mapping the output of an arbitrary observable to one returning an instance of a specific type, using the IO scheduler. </p>
  syntax: public static static<T> Observable<T> map(Observable<?> fromObservable, final T toValue)
  uid: com.microsoft.azure.management.resources.fluentcore.utils.RXMapper.map(Observable<?>,final T)
- fullName: com.microsoft.azure.management.resources.fluentcore.utils.RXMapper<T>.mapToVoid(Observable<?> fromObservable)
  name: mapToVoid(Observable<?> fromObservable)
  nameWithType: RXMapper<T>.mapToVoid(Observable<?> fromObservable)
  parameters:
  - description: <p>the source observable </p>
    name: fromObservable
    type: <xref href="Observable%3C%3F%3E?alt=Observable%3C%3F%3E&text=Observable%3C%3F%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a void-emitting observable </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Shortcut for mapping an arbitrary observable to void, using the IO scheduler. </p>
  syntax: public static Observable<Void> mapToVoid(Observable<?> fromObservable)
  uid: com.microsoft.azure.management.resources.fluentcore.utils.RXMapper.mapToVoid(Observable<?>)
nameWithType: RXMapper<T>
syntax: public class RXMapper<T>
type: class
typeParameters:
- description: <p>the type to emit as Observable </p>
  name: T
uid: com.microsoft.azure.management.resources.fluentcore.utils.RXMapper
fullName: com.microsoft.azure.management.resources.fluentcore.utils.RXMapper<T>
name: RXMapper<T>
package: com.microsoft.azure.management.resources.fluentcore.utils
summary: <p>An internal utility class representing an RX function returning the provided type instance from a call with an arbitrary parameter. </p>
metadata: {}
