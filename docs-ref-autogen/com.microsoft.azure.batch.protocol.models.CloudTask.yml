### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.affinityInfo()
  name: affinityInfo()
  nameWithType: CloudTask.affinityInfo()
  returns:
    description: <p>the affinityInfo value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.AffinityInformation?alt=com.microsoft.azure.batch.protocol.models.AffinityInformation&text=AffinityInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the affinityInfo value.</p>

    <p></p>
  syntax: public AffinityInformation affinityInfo()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.affinityInfo()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.applicationPackageReferences()
  name: applicationPackageReferences()
  nameWithType: CloudTask.applicationPackageReferences()
  returns:
    description: <p>the applicationPackageReferences value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationPackageReference?alt=com.microsoft.azure.batch.protocol.models.ApplicationPackageReference&text=ApplicationPackageReference" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails.</p>

    <p></p>
  syntax: public List<ApplicationPackageReference> applicationPackageReferences()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.applicationPackageReferences()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.authenticationTokenSettings()
  name: authenticationTokenSettings()
  nameWithType: CloudTask.authenticationTokenSettings()
  returns:
    description: <p>the authenticationTokenSettings value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings?alt=com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings&text=AuthenticationTokenSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if this property is set, the Batch service provides the task with an authentication token which can be used to authenticate Batch service operations without requiring an account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that the task can carry out using the token depend on the settings. For example, a task can request job permissions in order to add other tasks to the job, or check the status of the job or of other tasks under the job.</p>

    <p></p>
  syntax: public AuthenticationTokenSettings authenticationTokenSettings()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.authenticationTokenSettings()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.commandLine()
  name: commandLine()
  nameWithType: CloudTask.commandLine()
  returns:
    description: <p>the commandLine value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get for multi-instance tasks, the command line is executed as the primary task, after the primary task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p>

    <p></p>
  syntax: public String commandLine()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.commandLine()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.constraints()
  name: constraints()
  nameWithType: CloudTask.constraints()
  returns:
    description: <p>the constraints value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the constraints value.</p>

    <p></p>
  syntax: public TaskConstraints constraints()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.constraints()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.containerSettings()
  name: containerSettings()
  nameWithType: CloudTask.containerSettings()
  returns:
    description: <p>the containerSettings value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskContainerSettings?alt=com.microsoft.azure.batch.protocol.models.TaskContainerSettings&text=TaskContainerSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if the pool that will run this task has containerConfiguration set, this must be set as well. If the pool that will run this task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.</p>

    <p></p>
  syntax: public TaskContainerSettings containerSettings()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.containerSettings()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.creationTime()
  name: creationTime()
  nameWithType: CloudTask.creationTime()
  returns:
    description: <p>the creationTime value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the creationTime value.</p>

    <p></p>
  syntax: public DateTime creationTime()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.creationTime()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.dependsOn()
  name: dependsOn()
  nameWithType: CloudTask.dependsOn()
  returns:
    description: <p>the dependsOn value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskDependencies?alt=com.microsoft.azure.batch.protocol.models.TaskDependencies&text=TaskDependencies" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this task will not be scheduled until all tasks that it depends on have completed successfully. If any of those tasks fail and exhaust their retry counts, this task will never be scheduled.</p>

    <p></p>
  syntax: public TaskDependencies dependsOn()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.dependsOn()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.displayName()
  name: displayName()
  nameWithType: CloudTask.displayName()
  returns:
    description: <p>the displayName value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.</p>

    <p></p>
  syntax: public String displayName()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.displayName()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.environmentSettings()
  name: environmentSettings()
  nameWithType: CloudTask.environmentSettings()
  returns:
    description: <p>the environmentSettings value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.EnvironmentSetting?alt=com.microsoft.azure.batch.protocol.models.EnvironmentSetting&text=EnvironmentSetting" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the environmentSettings value.</p>

    <p></p>
  syntax: public List<EnvironmentSetting> environmentSettings()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.environmentSettings()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.eTag()
  name: eTag()
  nameWithType: CloudTask.eTag()
  returns:
    description: <p>the eTag value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this is an opaque string. You can use it to detect whether the task has changed between requests. In particular, you can be pass the ETag when updating a task to specify that your changes should take effect only if nobody else has modified the task in the meantime.</p>

    <p></p>
  syntax: public String eTag()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.eTag()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.executionInfo()
  name: executionInfo()
  nameWithType: CloudTask.executionInfo()
  returns:
    description: <p>the executionInfo value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.TaskExecutionInformation&text=TaskExecutionInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the executionInfo value.</p>

    <p></p>
  syntax: public TaskExecutionInformation executionInfo()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.executionInfo()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.exitConditions()
  name: exitConditions()
  nameWithType: CloudTask.exitConditions()
  returns:
    description: <p>the exitConditions value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ExitConditions?alt=com.microsoft.azure.batch.protocol.models.ExitConditions&text=ExitConditions" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get how the Batch service should respond when the task completes.</p>

    <p></p>
  syntax: public ExitConditions exitConditions()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.exitConditions()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.id()
  name: id()
  nameWithType: CloudTask.id()
  returns:
    description: <p>the id value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.</p>

    <p></p>
  syntax: public String id()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.id()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.lastModified()
  name: lastModified()
  nameWithType: CloudTask.lastModified()
  returns:
    description: <p>the lastModified value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the lastModified value.</p>

    <p></p>
  syntax: public DateTime lastModified()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.lastModified()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.multiInstanceSettings()
  name: multiInstanceSettings()
  nameWithType: CloudTask.multiInstanceSettings()
  returns:
    description: <p>the multiInstanceSettings value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.MultiInstanceSettings?alt=com.microsoft.azure.batch.protocol.models.MultiInstanceSettings&text=MultiInstanceSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the multiInstanceSettings value.</p>

    <p></p>
  syntax: public MultiInstanceSettings multiInstanceSettings()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.multiInstanceSettings()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.nodeInfo()
  name: nodeInfo()
  nameWithType: CloudTask.nodeInfo()
  returns:
    description: <p>the nodeInfo value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeInformation?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeInformation&text=ComputeNodeInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the nodeInfo value.</p>

    <p></p>
  syntax: public ComputeNodeInformation nodeInfo()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.nodeInfo()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.outputFiles()
  name: outputFiles()
  nameWithType: CloudTask.outputFiles()
  returns:
    description: <p>the outputFiles value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.OutputFile?alt=com.microsoft.azure.batch.protocol.models.OutputFile&text=OutputFile" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get for multi-instance tasks, the files will only be uploaded from the compute node on which the primary task is executed.</p>

    <p></p>
  syntax: public List<OutputFile> outputFiles()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.outputFiles()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.previousState()
  name: previousState()
  nameWithType: CloudTask.previousState()
  returns:
    description: <p>the previousState value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskState?alt=com.microsoft.azure.batch.protocol.models.TaskState&text=TaskState" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this property is not set if the task is in its initial Active state. Possible values include: 'active', 'preparing', 'running', 'completed'.</p>

    <p></p>
  syntax: public TaskState previousState()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.previousState()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.previousStateTransitionTime()
  name: previousStateTransitionTime()
  nameWithType: CloudTask.previousStateTransitionTime()
  returns:
    description: <p>the previousStateTransitionTime value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this property is not set if the task is in its initial Active state.</p>

    <p></p>
  syntax: public DateTime previousStateTransitionTime()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.previousStateTransitionTime()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.resourceFiles()
  name: resourceFiles()
  nameWithType: CloudTask.resourceFiles()
  returns:
    description: <p>the resourceFiles value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ResourceFile?alt=com.microsoft.azure.batch.protocol.models.ResourceFile&text=ResourceFile" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get for multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary task is executed. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.</p>

    <p></p>
  syntax: public List<ResourceFile> resourceFiles()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.resourceFiles()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.state()
  name: state()
  nameWithType: CloudTask.state()
  returns:
    description: <p>the state value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskState?alt=com.microsoft.azure.batch.protocol.models.TaskState&text=TaskState" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get possible values include: 'active', 'preparing', 'running', 'completed'.</p>

    <p></p>
  syntax: public TaskState state()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.state()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.stateTransitionTime()
  name: stateTransitionTime()
  nameWithType: CloudTask.stateTransitionTime()
  returns:
    description: <p>the stateTransitionTime value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the stateTransitionTime value.</p>

    <p></p>
  syntax: public DateTime stateTransitionTime()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.stateTransitionTime()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.stats()
  name: stats()
  nameWithType: CloudTask.stats()
  returns:
    description: <p>the stats value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskStatistics?alt=com.microsoft.azure.batch.protocol.models.TaskStatistics&text=TaskStatistics" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the stats value.</p>

    <p></p>
  syntax: public TaskStatistics stats()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.stats()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.url()
  name: url()
  nameWithType: CloudTask.url()
  returns:
    description: <p>the url value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the url value.</p>

    <p></p>
  syntax: public String url()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.url()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.userIdentity()
  name: userIdentity()
  nameWithType: CloudTask.userIdentity()
  returns:
    description: <p>the userIdentity value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.UserIdentity?alt=com.microsoft.azure.batch.protocol.models.UserIdentity&text=UserIdentity" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if omitted, the task runs as a non-administrative user unique to the task.</p>

    <p></p>
  syntax: public UserIdentity userIdentity()
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.userIdentity()
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withAffinityInfo(AffinityInformation affinityInfo)
  name: withAffinityInfo(AffinityInformation affinityInfo)
  nameWithType: CloudTask.withAffinityInfo(AffinityInformation affinityInfo)
  parameters:
  - description: <p>the affinityInfo value to set </p>
    name: affinityInfo
    type: <xref href="com.microsoft.azure.batch.protocol.models.AffinityInformation?alt=com.microsoft.azure.batch.protocol.models.AffinityInformation&text=AffinityInformation" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the affinityInfo value.</p>

    <p></p>
  syntax: public CloudTask withAffinityInfo(AffinityInformation affinityInfo)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withAffinityInfo(AffinityInformation)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)
  name: withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)
  nameWithType: CloudTask.withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)
  parameters:
  - description: <p>the applicationPackageReferences value to set </p>
    name: applicationPackageReferences
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationPackageReference?alt=com.microsoft.azure.batch.protocol.models.ApplicationPackageReference&text=ApplicationPackageReference" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails.</p>

    <p></p>
  syntax: public CloudTask withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withApplicationPackageReferences(List<ApplicationPackageReference>)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings)
  name: withAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings)
  nameWithType: CloudTask.withAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings)
  parameters:
  - description: <p>the authenticationTokenSettings value to set </p>
    name: authenticationTokenSettings
    type: <xref href="com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings?alt=com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings&text=AuthenticationTokenSettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if this property is set, the Batch service provides the task with an authentication token which can be used to authenticate Batch service operations without requiring an account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that the task can carry out using the token depend on the settings. For example, a task can request job permissions in order to add other tasks to the job, or check the status of the job or of other tasks under the job.</p>

    <p></p>
  syntax: public CloudTask withAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withAuthenticationTokenSettings(AuthenticationTokenSettings)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withCommandLine(String commandLine)
  name: withCommandLine(String commandLine)
  nameWithType: CloudTask.withCommandLine(String commandLine)
  parameters:
  - description: <p>the commandLine value to set </p>
    name: commandLine
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set for multi-instance tasks, the command line is executed as the primary task, after the primary task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p>

    <p></p>
  syntax: public CloudTask withCommandLine(String commandLine)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withCommandLine(String)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withConstraints(TaskConstraints constraints)
  name: withConstraints(TaskConstraints constraints)
  nameWithType: CloudTask.withConstraints(TaskConstraints constraints)
  parameters:
  - description: <p>the constraints value to set </p>
    name: constraints
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the constraints value.</p>

    <p></p>
  syntax: public CloudTask withConstraints(TaskConstraints constraints)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withConstraints(TaskConstraints)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withContainerSettings(TaskContainerSettings containerSettings)
  name: withContainerSettings(TaskContainerSettings containerSettings)
  nameWithType: CloudTask.withContainerSettings(TaskContainerSettings containerSettings)
  parameters:
  - description: <p>the containerSettings value to set </p>
    name: containerSettings
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskContainerSettings?alt=com.microsoft.azure.batch.protocol.models.TaskContainerSettings&text=TaskContainerSettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if the pool that will run this task has containerConfiguration set, this must be set as well. If the pool that will run this task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.</p>

    <p></p>
  syntax: public CloudTask withContainerSettings(TaskContainerSettings containerSettings)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withContainerSettings(TaskContainerSettings)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withCreationTime(DateTime creationTime)
  name: withCreationTime(DateTime creationTime)
  nameWithType: CloudTask.withCreationTime(DateTime creationTime)
  parameters:
  - description: <p>the creationTime value to set </p>
    name: creationTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the creationTime value.</p>

    <p></p>
  syntax: public CloudTask withCreationTime(DateTime creationTime)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withCreationTime(DateTime)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withDependsOn(TaskDependencies dependsOn)
  name: withDependsOn(TaskDependencies dependsOn)
  nameWithType: CloudTask.withDependsOn(TaskDependencies dependsOn)
  parameters:
  - description: <p>the dependsOn value to set </p>
    name: dependsOn
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskDependencies?alt=com.microsoft.azure.batch.protocol.models.TaskDependencies&text=TaskDependencies" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this task will not be scheduled until all tasks that it depends on have completed successfully. If any of those tasks fail and exhaust their retry counts, this task will never be scheduled.</p>

    <p></p>
  syntax: public CloudTask withDependsOn(TaskDependencies dependsOn)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withDependsOn(TaskDependencies)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withDisplayName(String displayName)
  name: withDisplayName(String displayName)
  nameWithType: CloudTask.withDisplayName(String displayName)
  parameters:
  - description: <p>the displayName value to set </p>
    name: displayName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.</p>

    <p></p>
  syntax: public CloudTask withDisplayName(String displayName)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withDisplayName(String)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  name: withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  nameWithType: CloudTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  parameters:
  - description: <p>the environmentSettings value to set </p>
    name: environmentSettings
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.EnvironmentSetting?alt=com.microsoft.azure.batch.protocol.models.EnvironmentSetting&text=EnvironmentSetting" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the environmentSettings value.</p>

    <p></p>
  syntax: public CloudTask withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withEnvironmentSettings(List<EnvironmentSetting>)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withETag(String eTag)
  name: withETag(String eTag)
  nameWithType: CloudTask.withETag(String eTag)
  parameters:
  - description: <p>the eTag value to set </p>
    name: eTag
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this is an opaque string. You can use it to detect whether the task has changed between requests. In particular, you can be pass the ETag when updating a task to specify that your changes should take effect only if nobody else has modified the task in the meantime.</p>

    <p></p>
  syntax: public CloudTask withETag(String eTag)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withETag(String)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withExecutionInfo(TaskExecutionInformation executionInfo)
  name: withExecutionInfo(TaskExecutionInformation executionInfo)
  nameWithType: CloudTask.withExecutionInfo(TaskExecutionInformation executionInfo)
  parameters:
  - description: <p>the executionInfo value to set </p>
    name: executionInfo
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.TaskExecutionInformation&text=TaskExecutionInformation" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the executionInfo value.</p>

    <p></p>
  syntax: public CloudTask withExecutionInfo(TaskExecutionInformation executionInfo)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withExecutionInfo(TaskExecutionInformation)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withExitConditions(ExitConditions exitConditions)
  name: withExitConditions(ExitConditions exitConditions)
  nameWithType: CloudTask.withExitConditions(ExitConditions exitConditions)
  parameters:
  - description: <p>the exitConditions value to set </p>
    name: exitConditions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ExitConditions?alt=com.microsoft.azure.batch.protocol.models.ExitConditions&text=ExitConditions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set how the Batch service should respond when the task completes.</p>

    <p></p>
  syntax: public CloudTask withExitConditions(ExitConditions exitConditions)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withExitConditions(ExitConditions)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withId(String id)
  name: withId(String id)
  nameWithType: CloudTask.withId(String id)
  parameters:
  - description: <p>the id value to set </p>
    name: id
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.</p>

    <p></p>
  syntax: public CloudTask withId(String id)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withId(String)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withLastModified(DateTime lastModified)
  name: withLastModified(DateTime lastModified)
  nameWithType: CloudTask.withLastModified(DateTime lastModified)
  parameters:
  - description: <p>the lastModified value to set </p>
    name: lastModified
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the lastModified value.</p>

    <p></p>
  syntax: public CloudTask withLastModified(DateTime lastModified)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withLastModified(DateTime)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withMultiInstanceSettings(MultiInstanceSettings multiInstanceSettings)
  name: withMultiInstanceSettings(MultiInstanceSettings multiInstanceSettings)
  nameWithType: CloudTask.withMultiInstanceSettings(MultiInstanceSettings multiInstanceSettings)
  parameters:
  - description: <p>the multiInstanceSettings value to set </p>
    name: multiInstanceSettings
    type: <xref href="com.microsoft.azure.batch.protocol.models.MultiInstanceSettings?alt=com.microsoft.azure.batch.protocol.models.MultiInstanceSettings&text=MultiInstanceSettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the multiInstanceSettings value.</p>

    <p></p>
  syntax: public CloudTask withMultiInstanceSettings(MultiInstanceSettings multiInstanceSettings)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withMultiInstanceSettings(MultiInstanceSettings)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withNodeInfo(ComputeNodeInformation nodeInfo)
  name: withNodeInfo(ComputeNodeInformation nodeInfo)
  nameWithType: CloudTask.withNodeInfo(ComputeNodeInformation nodeInfo)
  parameters:
  - description: <p>the nodeInfo value to set </p>
    name: nodeInfo
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeInformation?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeInformation&text=ComputeNodeInformation" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the nodeInfo value.</p>

    <p></p>
  syntax: public CloudTask withNodeInfo(ComputeNodeInformation nodeInfo)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withNodeInfo(ComputeNodeInformation)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withOutputFiles(List<OutputFile> outputFiles)
  name: withOutputFiles(List<OutputFile> outputFiles)
  nameWithType: CloudTask.withOutputFiles(List<OutputFile> outputFiles)
  parameters:
  - description: <p>the outputFiles value to set </p>
    name: outputFiles
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.OutputFile?alt=com.microsoft.azure.batch.protocol.models.OutputFile&text=OutputFile" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set for multi-instance tasks, the files will only be uploaded from the compute node on which the primary task is executed.</p>

    <p></p>
  syntax: public CloudTask withOutputFiles(List<OutputFile> outputFiles)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withOutputFiles(List<OutputFile>)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withPreviousState(TaskState previousState)
  name: withPreviousState(TaskState previousState)
  nameWithType: CloudTask.withPreviousState(TaskState previousState)
  parameters:
  - description: <p>the previousState value to set </p>
    name: previousState
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskState?alt=com.microsoft.azure.batch.protocol.models.TaskState&text=TaskState" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this property is not set if the task is in its initial Active state. Possible values include: 'active', 'preparing', 'running', 'completed'.</p>

    <p></p>
  syntax: public CloudTask withPreviousState(TaskState previousState)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withPreviousState(TaskState)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withPreviousStateTransitionTime(DateTime previousStateTransitionTime)
  name: withPreviousStateTransitionTime(DateTime previousStateTransitionTime)
  nameWithType: CloudTask.withPreviousStateTransitionTime(DateTime previousStateTransitionTime)
  parameters:
  - description: <p>the previousStateTransitionTime value to set </p>
    name: previousStateTransitionTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this property is not set if the task is in its initial Active state.</p>

    <p></p>
  syntax: public CloudTask withPreviousStateTransitionTime(DateTime previousStateTransitionTime)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withPreviousStateTransitionTime(DateTime)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withResourceFiles(List<ResourceFile> resourceFiles)
  name: withResourceFiles(List<ResourceFile> resourceFiles)
  nameWithType: CloudTask.withResourceFiles(List<ResourceFile> resourceFiles)
  parameters:
  - description: <p>the resourceFiles value to set </p>
    name: resourceFiles
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ResourceFile?alt=com.microsoft.azure.batch.protocol.models.ResourceFile&text=ResourceFile" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set for multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary task is executed. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.</p>

    <p></p>
  syntax: public CloudTask withResourceFiles(List<ResourceFile> resourceFiles)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withResourceFiles(List<ResourceFile>)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withState(TaskState state)
  name: withState(TaskState state)
  nameWithType: CloudTask.withState(TaskState state)
  parameters:
  - description: <p>the state value to set </p>
    name: state
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskState?alt=com.microsoft.azure.batch.protocol.models.TaskState&text=TaskState" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set possible values include: 'active', 'preparing', 'running', 'completed'.</p>

    <p></p>
  syntax: public CloudTask withState(TaskState state)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withState(TaskState)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withStateTransitionTime(DateTime stateTransitionTime)
  name: withStateTransitionTime(DateTime stateTransitionTime)
  nameWithType: CloudTask.withStateTransitionTime(DateTime stateTransitionTime)
  parameters:
  - description: <p>the stateTransitionTime value to set </p>
    name: stateTransitionTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the stateTransitionTime value.</p>

    <p></p>
  syntax: public CloudTask withStateTransitionTime(DateTime stateTransitionTime)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withStateTransitionTime(DateTime)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withStats(TaskStatistics stats)
  name: withStats(TaskStatistics stats)
  nameWithType: CloudTask.withStats(TaskStatistics stats)
  parameters:
  - description: <p>the stats value to set </p>
    name: stats
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskStatistics?alt=com.microsoft.azure.batch.protocol.models.TaskStatistics&text=TaskStatistics" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the stats value.</p>

    <p></p>
  syntax: public CloudTask withStats(TaskStatistics stats)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withStats(TaskStatistics)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withUrl(String url)
  name: withUrl(String url)
  nameWithType: CloudTask.withUrl(String url)
  parameters:
  - description: <p>the url value to set </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the url value.</p>

    <p></p>
  syntax: public CloudTask withUrl(String url)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withUrl(String)
- fullName: com.microsoft.azure.batch.protocol.models.CloudTask.withUserIdentity(UserIdentity userIdentity)
  name: withUserIdentity(UserIdentity userIdentity)
  nameWithType: CloudTask.withUserIdentity(UserIdentity userIdentity)
  parameters:
  - description: <p>the userIdentity value to set </p>
    name: userIdentity
    type: <xref href="com.microsoft.azure.batch.protocol.models.UserIdentity?alt=com.microsoft.azure.batch.protocol.models.UserIdentity&text=UserIdentity" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CloudTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if omitted, the task runs as a non-administrative user unique to the task.</p>

    <p></p>
  syntax: public CloudTask withUserIdentity(UserIdentity userIdentity)
  uid: com.microsoft.azure.batch.protocol.models.CloudTask.withUserIdentity(UserIdentity)
nameWithType: CloudTask
syntax: public class CloudTask
type: class
uid: com.microsoft.azure.batch.protocol.models.CloudTask
fullName: com.microsoft.azure.batch.protocol.models.CloudTask
name: CloudTask
package: com.microsoft.azure.batch.protocol.models
summary: <p>An Azure Batch task. Batch will retry tasks when a recovery operation is triggered on a compute node. Examples of recovery operations include (but are not limited to) when an unhealthy compute node is rebooted or a compute node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all tasks should be idempotent. This means tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running tasks is to use some form of checkpointing. </p>
metadata: {}
