### YamlMime:JavaType
uid: "com.microsoft.azure.batch.protocol.models.CloudTask"
fullName: "com.microsoft.azure.batch.protocol.models.CloudTask"
name: "CloudTask"
nameWithType: "CloudTask"
summary: "An Azure Batch Task."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class CloudTask"
constructors:
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.CloudTask()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.CloudTask()"
  name: "CloudTask()"
  nameWithType: "CloudTask.CloudTask()"
  syntax: "public CloudTask()"
methods:
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.affinityInfo()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.affinityInfo()"
  name: "affinityInfo()"
  nameWithType: "CloudTask.affinityInfo()"
  summary: "Get the affinity<wbr>Info value."
  syntax: "public AffinityInformation affinityInfo()"
  desc: "Get the affinityInfo value."
  returns:
    description: "the affinityInfo value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.AffinityInformation?alt=com.microsoft.azure.batch.protocol.models.AffinityInformation&text=AffinityInformation\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.applicationPackageReferences()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.applicationPackageReferences()"
  name: "applicationPackageReferences()"
  nameWithType: "CloudTask.applicationPackageReferences()"
  summary: "Get application packages are downloaded and deployed to a shared directory, not the Task working directory."
  syntax: "public List<ApplicationPackageReference> applicationPackageReferences()"
  desc: "Get application packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced package is already on the Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node is used. If a referenced Package cannot be installed, for example because the package has been deleted or because download failed, the Task fails."
  returns:
    description: "the applicationPackageReferences value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ApplicationPackageReference?alt=com.microsoft.azure.batch.protocol.models.ApplicationPackageReference&text=ApplicationPackageReference\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.authenticationTokenSettings()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.authenticationTokenSettings()"
  name: "authenticationTokenSettings()"
  nameWithType: "CloudTask.authenticationTokenSettings()"
  summary: "Get if this property is set, the Batch service provides the Task with an authentication token which can be used to authenticate Batch service operations without requiring an Account access key."
  syntax: "public AuthenticationTokenSettings authenticationTokenSettings()"
  desc: "Get if this property is set, the Batch service provides the Task with an authentication token which can be used to authenticate Batch service operations without requiring an Account access key. The token is provided via the AZ\\_BATCH\\_AUTHENTICATION\\_TOKEN environment variable. The operations that the Task can carry out using the token depend on the settings. For example, a Task can request Job permissions in order to add other Tasks to the Job, or check the status of the Job or of other Tasks under the Job."
  returns:
    description: "the authenticationTokenSettings value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings?alt=com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings&text=AuthenticationTokenSettings\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.commandLine()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.commandLine()"
  name: "commandLine()"
  nameWithType: "CloudTask.commandLine()"
  summary: "Get for multi-instance Tasks, the command line is executed as the primary Task, after the primary Task and all subtasks have finished executing the coordination command line."
  syntax: "public String commandLine()"
  desc: "Get for multi-instance Tasks, the command line is executed as the primary Task, after the primary Task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables)."
  returns:
    description: "the commandLine value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.constraints()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.constraints()"
  name: "constraints()"
  nameWithType: "CloudTask.constraints()"
  summary: "Get the constraints value."
  syntax: "public TaskConstraints constraints()"
  desc: "Get the constraints value."
  returns:
    description: "the constraints value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.containerSettings()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.containerSettings()"
  name: "containerSettings()"
  nameWithType: "CloudTask.containerSettings()"
  summary: "Get if the Pool that will run this Task has container<wbr>Configuration set, this must be set as well."
  syntax: "public TaskContainerSettings containerSettings()"
  desc: "Get if the Pool that will run this Task has containerConfiguration set, this must be set as well. If the Pool that will run this Task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ\\_BATCH\\_NODE\\_ROOT\\_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ\\_BATCH\\_NODE\\_ROOT\\_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files."
  returns:
    description: "the containerSettings value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskContainerSettings?alt=com.microsoft.azure.batch.protocol.models.TaskContainerSettings&text=TaskContainerSettings\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.creationTime()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.creationTime()"
  name: "creationTime()"
  nameWithType: "CloudTask.creationTime()"
  summary: "Get the creation<wbr>Time value."
  syntax: "public DateTime creationTime()"
  desc: "Get the creationTime value."
  returns:
    description: "the creationTime value"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.dependsOn()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.dependsOn()"
  name: "dependsOn()"
  nameWithType: "CloudTask.dependsOn()"
  summary: "Get this Task will not be scheduled until all Tasks that it depends on have completed successfully."
  syntax: "public TaskDependencies dependsOn()"
  desc: "Get this Task will not be scheduled until all Tasks that it depends on have completed successfully. If any of those Tasks fail and exhaust their retry counts, this Task will never be scheduled."
  returns:
    description: "the dependsOn value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskDependencies?alt=com.microsoft.azure.batch.protocol.models.TaskDependencies&text=TaskDependencies\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.displayName()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.displayName()"
  name: "displayName()"
  nameWithType: "CloudTask.displayName()"
  summary: "Get the display name need not be unique and can contain any Unicode characters up to a maximum length of 1024."
  syntax: "public String displayName()"
  desc: "Get the display name need not be unique and can contain any Unicode characters up to a maximum length of 1024."
  returns:
    description: "the displayName value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.eTag()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.eTag()"
  name: "eTag()"
  nameWithType: "CloudTask.eTag()"
  summary: "Get this is an opaque string."
  syntax: "public String eTag()"
  desc: "Get this is an opaque string. You can use it to detect whether the Task has changed between requests. In particular, you can be pass the ETag when updating a Task to specify that your changes should take effect only if nobody else has modified the Task in the meantime."
  returns:
    description: "the eTag value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.environmentSettings()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.environmentSettings()"
  name: "environmentSettings()"
  nameWithType: "CloudTask.environmentSettings()"
  summary: "Get the environment<wbr>Settings value."
  syntax: "public List<EnvironmentSetting> environmentSettings()"
  desc: "Get the environmentSettings value."
  returns:
    description: "the environmentSettings value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.EnvironmentSetting?alt=com.microsoft.azure.batch.protocol.models.EnvironmentSetting&text=EnvironmentSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.executionInfo()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.executionInfo()"
  name: "executionInfo()"
  nameWithType: "CloudTask.executionInfo()"
  summary: "Get the execution<wbr>Info value."
  syntax: "public TaskExecutionInformation executionInfo()"
  desc: "Get the executionInfo value."
  returns:
    description: "the executionInfo value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.TaskExecutionInformation&text=TaskExecutionInformation\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.exitConditions()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.exitConditions()"
  name: "exitConditions()"
  nameWithType: "CloudTask.exitConditions()"
  summary: "Get how the Batch service should respond when the Task completes."
  syntax: "public ExitConditions exitConditions()"
  desc: "Get how the Batch service should respond when the Task completes."
  returns:
    description: "the exitConditions value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ExitConditions?alt=com.microsoft.azure.batch.protocol.models.ExitConditions&text=ExitConditions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.id()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.id()"
  name: "id()"
  nameWithType: "CloudTask.id()"
  summary: "Get the ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters."
  syntax: "public String id()"
  desc: "Get the ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters."
  returns:
    description: "the id value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.lastModified()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.lastModified()"
  name: "lastModified()"
  nameWithType: "CloudTask.lastModified()"
  summary: "Get the last<wbr>Modified value."
  syntax: "public DateTime lastModified()"
  desc: "Get the lastModified value."
  returns:
    description: "the lastModified value"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.multiInstanceSettings()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.multiInstanceSettings()"
  name: "multiInstanceSettings()"
  nameWithType: "CloudTask.multiInstanceSettings()"
  summary: "Get the multi<wbr>Instance<wbr>Settings value."
  syntax: "public MultiInstanceSettings multiInstanceSettings()"
  desc: "Get the multiInstanceSettings value."
  returns:
    description: "the multiInstanceSettings value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.MultiInstanceSettings?alt=com.microsoft.azure.batch.protocol.models.MultiInstanceSettings&text=MultiInstanceSettings\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.nodeInfo()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.nodeInfo()"
  name: "nodeInfo()"
  nameWithType: "CloudTask.nodeInfo()"
  summary: "Get the node<wbr>Info value."
  syntax: "public ComputeNodeInformation nodeInfo()"
  desc: "Get the nodeInfo value."
  returns:
    description: "the nodeInfo value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeInformation?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeInformation&text=ComputeNodeInformation\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.outputFiles()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.outputFiles()"
  name: "outputFiles()"
  nameWithType: "CloudTask.outputFiles()"
  summary: "Get for multi-instance Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed."
  syntax: "public List<OutputFile> outputFiles()"
  desc: "Get for multi-instance Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed."
  returns:
    description: "the outputFiles value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.OutputFile?alt=com.microsoft.azure.batch.protocol.models.OutputFile&text=OutputFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.previousState()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.previousState()"
  name: "previousState()"
  nameWithType: "CloudTask.previousState()"
  summary: "Get this property is not set if the Task is in its initial Active state."
  syntax: "public TaskState previousState()"
  desc: "Get this property is not set if the Task is in its initial Active state. Possible values include: 'active', 'preparing', 'running', 'completed'."
  returns:
    description: "the previousState value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskState?alt=com.microsoft.azure.batch.protocol.models.TaskState&text=TaskState\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.previousStateTransitionTime()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.previousStateTransitionTime()"
  name: "previousStateTransitionTime()"
  nameWithType: "CloudTask.previousStateTransitionTime()"
  summary: "Get this property is not set if the Task is in its initial Active state."
  syntax: "public DateTime previousStateTransitionTime()"
  desc: "Get this property is not set if the Task is in its initial Active state."
  returns:
    description: "the previousStateTransitionTime value"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.requiredSlots()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.requiredSlots()"
  name: "requiredSlots()"
  nameWithType: "CloudTask.requiredSlots()"
  summary: "Get the default is 1."
  syntax: "public Integer requiredSlots()"
  desc: "Get the default is 1. A Task can only be scheduled to run on a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this must be 1."
  returns:
    description: "the requiredSlots value"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.resourceFiles()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.resourceFiles()"
  name: "resourceFiles()"
  nameWithType: "CloudTask.resourceFiles()"
  summary: "Get for multi-instance Tasks, the resource files will only be downloaded to the Compute Node on which the primary Task is executed."
  syntax: "public List<ResourceFile> resourceFiles()"
  desc: "Get for multi-instance Tasks, the resource files will only be downloaded to the Compute Node on which the primary Task is executed. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers."
  returns:
    description: "the resourceFiles value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ResourceFile?alt=com.microsoft.azure.batch.protocol.models.ResourceFile&text=ResourceFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.state()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.state()"
  name: "state()"
  nameWithType: "CloudTask.state()"
  summary: "Get possible values include: 'active', 'preparing', 'running', 'completed'."
  syntax: "public TaskState state()"
  desc: "Get possible values include: 'active', 'preparing', 'running', 'completed'."
  returns:
    description: "the state value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskState?alt=com.microsoft.azure.batch.protocol.models.TaskState&text=TaskState\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.stateTransitionTime()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.stateTransitionTime()"
  name: "stateTransitionTime()"
  nameWithType: "CloudTask.stateTransitionTime()"
  summary: "Get the state<wbr>Transition<wbr>Time value."
  syntax: "public DateTime stateTransitionTime()"
  desc: "Get the stateTransitionTime value."
  returns:
    description: "the stateTransitionTime value"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.stats()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.stats()"
  name: "stats()"
  nameWithType: "CloudTask.stats()"
  summary: "Get the stats value."
  syntax: "public TaskStatistics stats()"
  desc: "Get the stats value."
  returns:
    description: "the stats value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskStatistics?alt=com.microsoft.azure.batch.protocol.models.TaskStatistics&text=TaskStatistics\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.url()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.url()"
  name: "url()"
  nameWithType: "CloudTask.url()"
  summary: "Get the url value."
  syntax: "public String url()"
  desc: "Get the url value."
  returns:
    description: "the url value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.userIdentity()"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.userIdentity()"
  name: "userIdentity()"
  nameWithType: "CloudTask.userIdentity()"
  summary: "Get if omitted, the Task runs as a non-administrative user unique to the Task."
  syntax: "public UserIdentity userIdentity()"
  desc: "Get if omitted, the Task runs as a non-administrative user unique to the Task."
  returns:
    description: "the userIdentity value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.UserIdentity?alt=com.microsoft.azure.batch.protocol.models.UserIdentity&text=UserIdentity\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withAffinityInfo(com.microsoft.azure.batch.protocol.models.AffinityInformation)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withAffinityInfo(AffinityInformation affinityInfo)"
  name: "withAffinityInfo(AffinityInformation affinityInfo)"
  nameWithType: "CloudTask.withAffinityInfo(AffinityInformation affinityInfo)"
  summary: "Set the affinity<wbr>Info value."
  parameters:
  - description: "the affinityInfo value to set"
    name: "affinityInfo"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.AffinityInformation?alt=com.microsoft.azure.batch.protocol.models.AffinityInformation&text=AffinityInformation\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withAffinityInfo(AffinityInformation affinityInfo)"
  desc: "Set the affinityInfo value."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withApplicationPackageReferences(java.util.List<com.microsoft.azure.batch.protocol.models.ApplicationPackageReference>)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)"
  name: "withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)"
  nameWithType: "CloudTask.withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)"
  summary: "Set application packages are downloaded and deployed to a shared directory, not the Task working directory."
  parameters:
  - description: "the applicationPackageReferences value to set"
    name: "applicationPackageReferences"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ApplicationPackageReference?alt=com.microsoft.azure.batch.protocol.models.ApplicationPackageReference&text=ApplicationPackageReference\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CloudTask withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)"
  desc: "Set application packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced package is already on the Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node is used. If a referenced Package cannot be installed, for example because the package has been deleted or because download failed, the Task fails."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withAuthenticationTokenSettings(com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings)"
  name: "withAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings)"
  nameWithType: "CloudTask.withAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings)"
  summary: "Set if this property is set, the Batch service provides the Task with an authentication token which can be used to authenticate Batch service operations without requiring an Account access key."
  parameters:
  - description: "the authenticationTokenSettings value to set"
    name: "authenticationTokenSettings"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings?alt=com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings&text=AuthenticationTokenSettings\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings)"
  desc: "Set if this property is set, the Batch service provides the Task with an authentication token which can be used to authenticate Batch service operations without requiring an Account access key. The token is provided via the AZ\\_BATCH\\_AUTHENTICATION\\_TOKEN environment variable. The operations that the Task can carry out using the token depend on the settings. For example, a Task can request Job permissions in order to add other Tasks to the Job, or check the status of the Job or of other Tasks under the Job."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withCommandLine(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withCommandLine(String commandLine)"
  name: "withCommandLine(String commandLine)"
  nameWithType: "CloudTask.withCommandLine(String commandLine)"
  summary: "Set for multi-instance Tasks, the command line is executed as the primary Task, after the primary Task and all subtasks have finished executing the coordination command line."
  parameters:
  - description: "the commandLine value to set"
    name: "commandLine"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withCommandLine(String commandLine)"
  desc: "Set for multi-instance Tasks, the command line is executed as the primary Task, after the primary Task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables)."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withConstraints(com.microsoft.azure.batch.protocol.models.TaskConstraints)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withConstraints(TaskConstraints constraints)"
  name: "withConstraints(TaskConstraints constraints)"
  nameWithType: "CloudTask.withConstraints(TaskConstraints constraints)"
  summary: "Set the constraints value."
  parameters:
  - description: "the constraints value to set"
    name: "constraints"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withConstraints(TaskConstraints constraints)"
  desc: "Set the constraints value."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withContainerSettings(com.microsoft.azure.batch.protocol.models.TaskContainerSettings)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withContainerSettings(TaskContainerSettings containerSettings)"
  name: "withContainerSettings(TaskContainerSettings containerSettings)"
  nameWithType: "CloudTask.withContainerSettings(TaskContainerSettings containerSettings)"
  summary: "Set if the Pool that will run this Task has container<wbr>Configuration set, this must be set as well."
  parameters:
  - description: "the containerSettings value to set"
    name: "containerSettings"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskContainerSettings?alt=com.microsoft.azure.batch.protocol.models.TaskContainerSettings&text=TaskContainerSettings\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withContainerSettings(TaskContainerSettings containerSettings)"
  desc: "Set if the Pool that will run this Task has containerConfiguration set, this must be set as well. If the Pool that will run this Task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ\\_BATCH\\_NODE\\_ROOT\\_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ\\_BATCH\\_NODE\\_ROOT\\_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withCreationTime(org.joda.time.DateTime)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withCreationTime(DateTime creationTime)"
  name: "withCreationTime(DateTime creationTime)"
  nameWithType: "CloudTask.withCreationTime(DateTime creationTime)"
  summary: "Set the creation<wbr>Time value."
  parameters:
  - description: "the creationTime value to set"
    name: "creationTime"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withCreationTime(DateTime creationTime)"
  desc: "Set the creationTime value."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withDependsOn(com.microsoft.azure.batch.protocol.models.TaskDependencies)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withDependsOn(TaskDependencies dependsOn)"
  name: "withDependsOn(TaskDependencies dependsOn)"
  nameWithType: "CloudTask.withDependsOn(TaskDependencies dependsOn)"
  summary: "Set this Task will not be scheduled until all Tasks that it depends on have completed successfully."
  parameters:
  - description: "the dependsOn value to set"
    name: "dependsOn"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskDependencies?alt=com.microsoft.azure.batch.protocol.models.TaskDependencies&text=TaskDependencies\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withDependsOn(TaskDependencies dependsOn)"
  desc: "Set this Task will not be scheduled until all Tasks that it depends on have completed successfully. If any of those Tasks fail and exhaust their retry counts, this Task will never be scheduled."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withDisplayName(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withDisplayName(String displayName)"
  name: "withDisplayName(String displayName)"
  nameWithType: "CloudTask.withDisplayName(String displayName)"
  summary: "Set the display name need not be unique and can contain any Unicode characters up to a maximum length of 1024."
  parameters:
  - description: "the displayName value to set"
    name: "displayName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withDisplayName(String displayName)"
  desc: "Set the display name need not be unique and can contain any Unicode characters up to a maximum length of 1024."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withETag(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withETag(String eTag)"
  name: "withETag(String eTag)"
  nameWithType: "CloudTask.withETag(String eTag)"
  summary: "Set this is an opaque string."
  parameters:
  - description: "the eTag value to set"
    name: "eTag"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withETag(String eTag)"
  desc: "Set this is an opaque string. You can use it to detect whether the Task has changed between requests. In particular, you can be pass the ETag when updating a Task to specify that your changes should take effect only if nobody else has modified the Task in the meantime."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withEnvironmentSettings(java.util.List<com.microsoft.azure.batch.protocol.models.EnvironmentSetting>)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)"
  name: "withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)"
  nameWithType: "CloudTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)"
  summary: "Set the environment<wbr>Settings value."
  parameters:
  - description: "the environmentSettings value to set"
    name: "environmentSettings"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.EnvironmentSetting?alt=com.microsoft.azure.batch.protocol.models.EnvironmentSetting&text=EnvironmentSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CloudTask withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)"
  desc: "Set the environmentSettings value."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withExecutionInfo(com.microsoft.azure.batch.protocol.models.TaskExecutionInformation)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withExecutionInfo(TaskExecutionInformation executionInfo)"
  name: "withExecutionInfo(TaskExecutionInformation executionInfo)"
  nameWithType: "CloudTask.withExecutionInfo(TaskExecutionInformation executionInfo)"
  summary: "Set the execution<wbr>Info value."
  parameters:
  - description: "the executionInfo value to set"
    name: "executionInfo"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.TaskExecutionInformation&text=TaskExecutionInformation\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withExecutionInfo(TaskExecutionInformation executionInfo)"
  desc: "Set the executionInfo value."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withExitConditions(com.microsoft.azure.batch.protocol.models.ExitConditions)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withExitConditions(ExitConditions exitConditions)"
  name: "withExitConditions(ExitConditions exitConditions)"
  nameWithType: "CloudTask.withExitConditions(ExitConditions exitConditions)"
  summary: "Set how the Batch service should respond when the Task completes."
  parameters:
  - description: "the exitConditions value to set"
    name: "exitConditions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ExitConditions?alt=com.microsoft.azure.batch.protocol.models.ExitConditions&text=ExitConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withExitConditions(ExitConditions exitConditions)"
  desc: "Set how the Batch service should respond when the Task completes."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withId(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withId(String id)"
  name: "withId(String id)"
  nameWithType: "CloudTask.withId(String id)"
  summary: "Set the ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters."
  parameters:
  - description: "the id value to set"
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withId(String id)"
  desc: "Set the ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withLastModified(org.joda.time.DateTime)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withLastModified(DateTime lastModified)"
  name: "withLastModified(DateTime lastModified)"
  nameWithType: "CloudTask.withLastModified(DateTime lastModified)"
  summary: "Set the last<wbr>Modified value."
  parameters:
  - description: "the lastModified value to set"
    name: "lastModified"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withLastModified(DateTime lastModified)"
  desc: "Set the lastModified value."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withMultiInstanceSettings(com.microsoft.azure.batch.protocol.models.MultiInstanceSettings)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withMultiInstanceSettings(MultiInstanceSettings multiInstanceSettings)"
  name: "withMultiInstanceSettings(MultiInstanceSettings multiInstanceSettings)"
  nameWithType: "CloudTask.withMultiInstanceSettings(MultiInstanceSettings multiInstanceSettings)"
  summary: "Set the multi<wbr>Instance<wbr>Settings value."
  parameters:
  - description: "the multiInstanceSettings value to set"
    name: "multiInstanceSettings"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.MultiInstanceSettings?alt=com.microsoft.azure.batch.protocol.models.MultiInstanceSettings&text=MultiInstanceSettings\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withMultiInstanceSettings(MultiInstanceSettings multiInstanceSettings)"
  desc: "Set the multiInstanceSettings value."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withNodeInfo(com.microsoft.azure.batch.protocol.models.ComputeNodeInformation)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withNodeInfo(ComputeNodeInformation nodeInfo)"
  name: "withNodeInfo(ComputeNodeInformation nodeInfo)"
  nameWithType: "CloudTask.withNodeInfo(ComputeNodeInformation nodeInfo)"
  summary: "Set the node<wbr>Info value."
  parameters:
  - description: "the nodeInfo value to set"
    name: "nodeInfo"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeInformation?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeInformation&text=ComputeNodeInformation\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withNodeInfo(ComputeNodeInformation nodeInfo)"
  desc: "Set the nodeInfo value."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withOutputFiles(java.util.List<com.microsoft.azure.batch.protocol.models.OutputFile>)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withOutputFiles(List<OutputFile> outputFiles)"
  name: "withOutputFiles(List<OutputFile> outputFiles)"
  nameWithType: "CloudTask.withOutputFiles(List<OutputFile> outputFiles)"
  summary: "Set for multi-instance Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed."
  parameters:
  - description: "the outputFiles value to set"
    name: "outputFiles"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.OutputFile?alt=com.microsoft.azure.batch.protocol.models.OutputFile&text=OutputFile\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CloudTask withOutputFiles(List<OutputFile> outputFiles)"
  desc: "Set for multi-instance Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withPreviousState(com.microsoft.azure.batch.protocol.models.TaskState)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withPreviousState(TaskState previousState)"
  name: "withPreviousState(TaskState previousState)"
  nameWithType: "CloudTask.withPreviousState(TaskState previousState)"
  summary: "Set this property is not set if the Task is in its initial Active state."
  parameters:
  - description: "the previousState value to set"
    name: "previousState"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskState?alt=com.microsoft.azure.batch.protocol.models.TaskState&text=TaskState\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withPreviousState(TaskState previousState)"
  desc: "Set this property is not set if the Task is in its initial Active state. Possible values include: 'active', 'preparing', 'running', 'completed'."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withPreviousStateTransitionTime(org.joda.time.DateTime)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withPreviousStateTransitionTime(DateTime previousStateTransitionTime)"
  name: "withPreviousStateTransitionTime(DateTime previousStateTransitionTime)"
  nameWithType: "CloudTask.withPreviousStateTransitionTime(DateTime previousStateTransitionTime)"
  summary: "Set this property is not set if the Task is in its initial Active state."
  parameters:
  - description: "the previousStateTransitionTime value to set"
    name: "previousStateTransitionTime"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withPreviousStateTransitionTime(DateTime previousStateTransitionTime)"
  desc: "Set this property is not set if the Task is in its initial Active state."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withRequiredSlots(java.lang.Integer)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withRequiredSlots(Integer requiredSlots)"
  name: "withRequiredSlots(Integer requiredSlots)"
  nameWithType: "CloudTask.withRequiredSlots(Integer requiredSlots)"
  summary: "Set the default is 1."
  parameters:
  - description: "the requiredSlots value to set"
    name: "requiredSlots"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withRequiredSlots(Integer requiredSlots)"
  desc: "Set the default is 1. A Task can only be scheduled to run on a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this must be 1."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withResourceFiles(java.util.List<com.microsoft.azure.batch.protocol.models.ResourceFile>)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withResourceFiles(List<ResourceFile> resourceFiles)"
  name: "withResourceFiles(List<ResourceFile> resourceFiles)"
  nameWithType: "CloudTask.withResourceFiles(List<ResourceFile> resourceFiles)"
  summary: "Set for multi-instance Tasks, the resource files will only be downloaded to the Compute Node on which the primary Task is executed."
  parameters:
  - description: "the resourceFiles value to set"
    name: "resourceFiles"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ResourceFile?alt=com.microsoft.azure.batch.protocol.models.ResourceFile&text=ResourceFile\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CloudTask withResourceFiles(List<ResourceFile> resourceFiles)"
  desc: "Set for multi-instance Tasks, the resource files will only be downloaded to the Compute Node on which the primary Task is executed. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withState(com.microsoft.azure.batch.protocol.models.TaskState)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withState(TaskState state)"
  name: "withState(TaskState state)"
  nameWithType: "CloudTask.withState(TaskState state)"
  summary: "Set possible values include: 'active', 'preparing', 'running', 'completed'."
  parameters:
  - description: "the state value to set"
    name: "state"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskState?alt=com.microsoft.azure.batch.protocol.models.TaskState&text=TaskState\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withState(TaskState state)"
  desc: "Set possible values include: 'active', 'preparing', 'running', 'completed'."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withStateTransitionTime(org.joda.time.DateTime)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withStateTransitionTime(DateTime stateTransitionTime)"
  name: "withStateTransitionTime(DateTime stateTransitionTime)"
  nameWithType: "CloudTask.withStateTransitionTime(DateTime stateTransitionTime)"
  summary: "Set the state<wbr>Transition<wbr>Time value."
  parameters:
  - description: "the stateTransitionTime value to set"
    name: "stateTransitionTime"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withStateTransitionTime(DateTime stateTransitionTime)"
  desc: "Set the stateTransitionTime value."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withStats(com.microsoft.azure.batch.protocol.models.TaskStatistics)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withStats(TaskStatistics stats)"
  name: "withStats(TaskStatistics stats)"
  nameWithType: "CloudTask.withStats(TaskStatistics stats)"
  summary: "Set the stats value."
  parameters:
  - description: "the stats value to set"
    name: "stats"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskStatistics?alt=com.microsoft.azure.batch.protocol.models.TaskStatistics&text=TaskStatistics\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withStats(TaskStatistics stats)"
  desc: "Set the stats value."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withUrl(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withUrl(String url)"
  name: "withUrl(String url)"
  nameWithType: "CloudTask.withUrl(String url)"
  summary: "Set the url value."
  parameters:
  - description: "the url value to set"
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withUrl(String url)"
  desc: "Set the url value."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.CloudTask.withUserIdentity(com.microsoft.azure.batch.protocol.models.UserIdentity)"
  fullName: "com.microsoft.azure.batch.protocol.models.CloudTask.withUserIdentity(UserIdentity userIdentity)"
  name: "withUserIdentity(UserIdentity userIdentity)"
  nameWithType: "CloudTask.withUserIdentity(UserIdentity userIdentity)"
  summary: "Set if omitted, the Task runs as a non-administrative user unique to the Task."
  parameters:
  - description: "the userIdentity value to set"
    name: "userIdentity"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.UserIdentity?alt=com.microsoft.azure.batch.protocol.models.UserIdentity&text=UserIdentity\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudTask withUserIdentity(UserIdentity userIdentity)"
  desc: "Set if omitted, the Task runs as a non-administrative user unique to the Task."
  returns:
    description: "the CloudTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "An Azure Batch Task. Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing."
metadata: {}
package: "com.microsoft.azure.batch.protocol.models"
artifact: com.microsoft.azure:azure-batch:9.0.0
