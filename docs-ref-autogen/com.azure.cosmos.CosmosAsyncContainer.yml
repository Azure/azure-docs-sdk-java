### YamlMime:JavaType
uid: "com.azure.cosmos.CosmosAsyncContainer"
fullName: "com.azure.cosmos.CosmosAsyncContainer"
name: "CosmosAsyncContainer"
nameWithType: "CosmosAsyncContainer"
summary: "Provides methods for reading, deleting, and replacing existing Containers."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class CosmosAsyncContainer"
methods:
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>createItem(T)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>createItem(T item)"
  name: "<T>createItem(T item)"
  nameWithType: "CosmosAsyncContainer.<T>createItem(T item)"
  summary: "Creates an item."
  parameters:
  - description: "the Cosmos item represented as a POJO or Cosmos item object."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<T>> <T>createItem(T item)"
  desc: "Creates an item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single resource response with the created Cosmos item. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single resource response with the\n created Cosmos item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>createItem(T,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>createItem(T item, CosmosItemRequestOptions options)"
  name: "<T>createItem(T item, CosmosItemRequestOptions options)"
  nameWithType: "CosmosAsyncContainer.<T>createItem(T item, CosmosItemRequestOptions options)"
  summary: "Creates a Cosmos item."
  parameters:
  - description: "the item."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the item request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<T>> <T>createItem(T item, CosmosItemRequestOptions options)"
  desc: "Creates a Cosmos item."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single resource response with the created Cosmos item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>createItem(T,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>createItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  name: "<T>createItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  nameWithType: "CosmosAsyncContainer.<T>createItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  summary: "Creates an item."
  parameters:
  - description: "the Cosmos item represented as a POJO or Cosmos item object."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<T>> <T>createItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  desc: "Creates an item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single resource response with the created Cosmos item. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single resource response with the created Cosmos item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>deleteItem(T,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>deleteItem(T item, CosmosItemRequestOptions options)"
  name: "<T>deleteItem(T item, CosmosItemRequestOptions options)"
  nameWithType: "CosmosAsyncContainer.<T>deleteItem(T item, CosmosItemRequestOptions options)"
  summary: "Deletes the item."
  parameters:
  - description: "item to be deleted."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<Object>> <T>deleteItem(T item, CosmosItemRequestOptions options)"
  desc: "Deletes the item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single Cosmos item response for the deleted item."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the Cosmos item resource response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>patchItem(java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosPatchOperations,com.azure.cosmos.models.CosmosPatchItemRequestOptions,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>patchItem(String itemId, PartitionKey partitionKey, CosmosPatchOperations cosmosPatchOperations, CosmosPatchItemRequestOptions options, Class<T> itemType)"
  name: "<T>patchItem(String itemId, PartitionKey partitionKey, CosmosPatchOperations cosmosPatchOperations, CosmosPatchItemRequestOptions options, Class<T> itemType)"
  nameWithType: "CosmosAsyncContainer.<T>patchItem(String itemId, PartitionKey partitionKey, CosmosPatchOperations cosmosPatchOperations, CosmosPatchItemRequestOptions options, Class<T> itemType)"
  summary: "Run patch operations on an Item."
  parameters:
  - description: "the item id."
    name: "itemId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "Represents a container having list of operations to be sequentially applied to the referred Cosmos item."
    name: "cosmosPatchOperations"
    type: "<xref href=\"com.azure.cosmos.models.CosmosPatchOperations?alt=com.azure.cosmos.models.CosmosPatchOperations&text=CosmosPatchOperations\" data-throw-if-not-resolved=\"False\" />"
  - description: "the request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosPatchItemRequestOptions?alt=com.azure.cosmos.models.CosmosPatchItemRequestOptions&text=CosmosPatchItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the item type."
    name: "itemType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<CosmosItemResponse<T>> <T>patchItem(String itemId, PartitionKey partitionKey, CosmosPatchOperations cosmosPatchOperations, CosmosPatchItemRequestOptions options, Class<T> itemType)"
  desc: "Run patch operations on an Item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single Cosmos item response with the patched item."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the Cosmos item resource response with the patched item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>patchItem(java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosPatchOperations,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>patchItem(String itemId, PartitionKey partitionKey, CosmosPatchOperations cosmosPatchOperations, Class<T> itemType)"
  name: "<T>patchItem(String itemId, PartitionKey partitionKey, CosmosPatchOperations cosmosPatchOperations, Class<T> itemType)"
  nameWithType: "CosmosAsyncContainer.<T>patchItem(String itemId, PartitionKey partitionKey, CosmosPatchOperations cosmosPatchOperations, Class<T> itemType)"
  summary: "Run patch operations on an Item."
  parameters:
  - description: "the item id."
    name: "itemId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "Represents a container having list of operations to be sequentially applied to the referred Cosmos item."
    name: "cosmosPatchOperations"
    type: "<xref href=\"com.azure.cosmos.models.CosmosPatchOperations?alt=com.azure.cosmos.models.CosmosPatchOperations&text=CosmosPatchOperations\" data-throw-if-not-resolved=\"False\" />"
  - description: "the item type."
    name: "itemType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<CosmosItemResponse<T>> <T>patchItem(String itemId, PartitionKey partitionKey, CosmosPatchOperations cosmosPatchOperations, Class<T> itemType)"
  desc: "Run patch operations on an Item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single Cosmos item response with the patched item."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the Cosmos item resource response with the patched item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>queryChangeFeed(com.azure.cosmos.models.CosmosChangeFeedRequestOptions,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>queryChangeFeed(CosmosChangeFeedRequestOptions options, Class<T> classType)"
  name: "<T>queryChangeFeed(CosmosChangeFeedRequestOptions options, Class<T> classType)"
  nameWithType: "CosmosAsyncContainer.<T>queryChangeFeed(CosmosChangeFeedRequestOptions options, Class<T> classType)"
  summary: "Query for items in the change feed of the current container using the <xref uid=\"com.azure.cosmos.models.CosmosChangeFeedRequestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosChangeFeedRequestOptions\"></xref>."
  parameters:
  - description: "the change feed request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosChangeFeedRequestOptions?alt=com.azure.cosmos.models.CosmosChangeFeedRequestOptions&text=CosmosChangeFeedRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the class type."
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CosmosPagedFlux<T> <T>queryChangeFeed(CosmosChangeFeedRequestOptions options, Class<T> classType)"
  desc: "Query for items in the change feed of the current container using the <xref uid=\"com.azure.cosmos.models.CosmosChangeFeedRequestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosChangeFeedRequestOptions\"></xref>.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> will contain one or several feed response of the obtained items. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the obtained\n items or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>queryItems(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>queryItems(SqlQuerySpec querySpec, CosmosQueryRequestOptions options, Class<T> classType)"
  name: "<T>queryItems(SqlQuerySpec querySpec, CosmosQueryRequestOptions options, Class<T> classType)"
  nameWithType: "CosmosAsyncContainer.<T>queryItems(SqlQuerySpec querySpec, CosmosQueryRequestOptions options, Class<T> classType)"
  summary: "Query for items in the current container using a <xref uid=\"com.azure.cosmos.models.SqlQuerySpec\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SqlQuerySpec\"></xref> and <xref uid=\"com.azure.cosmos.models.CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosQueryRequestOptions\"></xref>."
  parameters:
  - description: "the SQL query specification."
    name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  - description: "the query request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the class type."
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CosmosPagedFlux<T> <T>queryItems(SqlQuerySpec querySpec, CosmosQueryRequestOptions options, Class<T> classType)"
  desc: "Query for items in the current container using a <xref uid=\"com.azure.cosmos.models.SqlQuerySpec\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SqlQuerySpec\"></xref> and <xref uid=\"com.azure.cosmos.models.CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosQueryRequestOptions\"></xref>.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> will contain one or several feed response of the obtained items. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the obtained items or an\n error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>queryItems(com.azure.cosmos.models.SqlQuerySpec,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>queryItems(SqlQuerySpec querySpec, Class<T> classType)"
  name: "<T>queryItems(SqlQuerySpec querySpec, Class<T> classType)"
  nameWithType: "CosmosAsyncContainer.<T>queryItems(SqlQuerySpec querySpec, Class<T> classType)"
  summary: "Query for items in the current container using a <xref uid=\"com.azure.cosmos.models.SqlQuerySpec\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SqlQuerySpec\"></xref>."
  parameters:
  - description: "the SQL query specification."
    name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  - description: "the class type."
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CosmosPagedFlux<T> <T>queryItems(SqlQuerySpec querySpec, Class<T> classType)"
  desc: "Query for items in the current container using a <xref uid=\"com.azure.cosmos.models.SqlQuerySpec\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SqlQuerySpec\"></xref>.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the obtained items. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the obtained items or an\n error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>queryItems(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>queryItems(String query, CosmosQueryRequestOptions options, Class<T> classType)"
  name: "<T>queryItems(String query, CosmosQueryRequestOptions options, Class<T> classType)"
  nameWithType: "CosmosAsyncContainer.<T>queryItems(String query, CosmosQueryRequestOptions options, Class<T> classType)"
  summary: "Query for items in the current container using a string."
  parameters:
  - description: "the query."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the query request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the class type."
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CosmosPagedFlux<T> <T>queryItems(String query, CosmosQueryRequestOptions options, Class<T> classType)"
  desc: "Query for items in the current container using a string.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the obtained items. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the obtained items or an\n error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>queryItems(java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>queryItems(String query, Class<T> classType)"
  name: "<T>queryItems(String query, Class<T> classType)"
  nameWithType: "CosmosAsyncContainer.<T>queryItems(String query, Class<T> classType)"
  summary: "Query for items in the current container."
  parameters:
  - description: "the query."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the class type."
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CosmosPagedFlux<T> <T>queryItems(String query, Class<T> classType)"
  desc: "Query for items in the current container.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the obtained items. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the obtained items or an\n error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>readAllItems(com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosQueryRequestOptions,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>readAllItems(PartitionKey partitionKey, CosmosQueryRequestOptions options, Class<T> classType)"
  name: "<T>readAllItems(PartitionKey partitionKey, CosmosQueryRequestOptions options, Class<T> classType)"
  nameWithType: "CosmosAsyncContainer.<T>readAllItems(PartitionKey partitionKey, CosmosQueryRequestOptions options, Class<T> classType)"
  summary: "Reads all the items of a logical partition"
  parameters:
  - description: "the partition key value of the documents that need to be read"
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the feed options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the class type."
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CosmosPagedFlux<T> <T>readAllItems(PartitionKey partitionKey, CosmosQueryRequestOptions options, Class<T> classType)"
  desc: "Reads all the items of a logical partition\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed responses of the read Cosmos items. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages\n of the read Cosmos items or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>readAllItems(com.azure.cosmos.models.PartitionKey,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>readAllItems(PartitionKey partitionKey, Class<T> classType)"
  name: "<T>readAllItems(PartitionKey partitionKey, Class<T> classType)"
  nameWithType: "CosmosAsyncContainer.<T>readAllItems(PartitionKey partitionKey, Class<T> classType)"
  summary: "Reads all the items of a logical partition"
  parameters:
  - description: "the partition key value of the documents that need to be read"
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the class type."
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CosmosPagedFlux<T> <T>readAllItems(PartitionKey partitionKey, Class<T> classType)"
  desc: "Reads all the items of a logical partition\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed responses of the read Cosmos items. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages\n of the read Cosmos items or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>readItem(java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>readItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options, Class<T> itemType)"
  name: "<T>readItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options, Class<T> itemType)"
  nameWithType: "CosmosAsyncContainer.<T>readItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options, Class<T> itemType)"
  summary: "Reads an item using a configured <xref uid=\"com.azure.cosmos.models.CosmosItemRequestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosItemRequestOptions\"></xref>."
  parameters:
  - description: "the item id."
    name: "itemId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the request <xref uid=\"com.azure.cosmos.models.CosmosItemRequestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosItemRequestOptions\"></xref>."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the item type."
    name: "itemType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<CosmosItemResponse<T>> <T>readItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options, Class<T> itemType)"
  desc: "Reads an item using a configured <xref uid=\"com.azure.cosmos.models.CosmosItemRequestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosItemRequestOptions\"></xref>.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a Cosmos item response with the read item."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the Cosmos item response with the read item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>readItem(java.lang.String,com.azure.cosmos.models.PartitionKey,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>readItem(String itemId, PartitionKey partitionKey, Class<T> itemType)"
  name: "<T>readItem(String itemId, PartitionKey partitionKey, Class<T> itemType)"
  nameWithType: "CosmosAsyncContainer.<T>readItem(String itemId, PartitionKey partitionKey, Class<T> itemType)"
  summary: "Reads an item."
  parameters:
  - description: "the item id."
    name: "itemId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the item type."
    name: "itemType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<CosmosItemResponse<T>> <T>readItem(String itemId, PartitionKey partitionKey, Class<T> itemType)"
  desc: "Reads an item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain an item response with the read item."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the Cosmos item response with the read item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>readMany(java.util.List<com.azure.cosmos.models.CosmosItemIdentity>,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>readMany(List<CosmosItemIdentity> itemIdentityList, Class<T> classType)"
  name: "<T>readMany(List<CosmosItemIdentity> itemIdentityList, Class<T> classType)"
  nameWithType: "CosmosAsyncContainer.<T>readMany(List<CosmosItemIdentity> itemIdentityList, Class<T> classType)"
  summary: "Reads many documents."
  parameters:
  - description: "CosmosItem id and partition key tuple of items that that needs to be read"
    name: "itemIdentityList"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemIdentity?alt=com.azure.cosmos.models.CosmosItemIdentity&text=CosmosItemIdentity\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "class type"
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<FeedResponse<T>> <T>readMany(List<CosmosItemIdentity> itemIdentityList, Class<T> classType)"
  desc: "Reads many documents."
  returns:
    description: "a Mono with feed response of cosmos items"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.FeedResponse?alt=com.azure.cosmos.models.FeedResponse&text=FeedResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>readMany(java.util.List<com.azure.cosmos.models.CosmosItemIdentity>,java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>readMany(List<CosmosItemIdentity> itemIdentityList, String sessionToken, Class<T> classType)"
  name: "<T>readMany(List<CosmosItemIdentity> itemIdentityList, String sessionToken, Class<T> classType)"
  nameWithType: "CosmosAsyncContainer.<T>readMany(List<CosmosItemIdentity> itemIdentityList, String sessionToken, Class<T> classType)"
  summary: "Reads many documents."
  parameters:
  - description: "CosmosItem id and partition key tuple of items that that needs to be read"
    name: "itemIdentityList"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemIdentity?alt=com.azure.cosmos.models.CosmosItemIdentity&text=CosmosItemIdentity\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the optional Session token - null if the read can be made without specific session token"
    name: "sessionToken"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "class type"
    name: "classType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<FeedResponse<T>> <T>readMany(List<CosmosItemIdentity> itemIdentityList, String sessionToken, Class<T> classType)"
  desc: "Reads many documents."
  returns:
    description: "a Mono with feed response of cosmos items"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.FeedResponse?alt=com.azure.cosmos.models.FeedResponse&text=FeedResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>replaceItem(T,java.lang.String,com.azure.cosmos.models.PartitionKey)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>replaceItem(T item, String itemId, PartitionKey partitionKey)"
  name: "<T>replaceItem(T item, String itemId, PartitionKey partitionKey)"
  nameWithType: "CosmosAsyncContainer.<T>replaceItem(T item, String itemId, PartitionKey partitionKey)"
  summary: "Replaces an item with the passed in item."
  parameters:
  - description: "the item to replace (containing the item id)."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the item id."
    name: "itemId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<T>> <T>replaceItem(T item, String itemId, PartitionKey partitionKey)"
  desc: "Replaces an item with the passed in item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single Cosmos item response with the replaced item."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the Cosmos item resource response with the replaced item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>replaceItem(T,java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>replaceItem(T item, String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  name: "<T>replaceItem(T item, String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  nameWithType: "CosmosAsyncContainer.<T>replaceItem(T item, String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  summary: "Replaces an item with the passed in item."
  parameters:
  - description: "the item to replace (containing the item id)."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the item id."
    name: "itemId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the request comosItemRequestOptions."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<T>> <T>replaceItem(T item, String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  desc: "Replaces an item with the passed in item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single Cosmos item response with the replaced item."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the Cosmos item resource response with the replaced item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>upsertItem(T)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>upsertItem(T item)"
  name: "<T>upsertItem(T item)"
  nameWithType: "CosmosAsyncContainer.<T>upsertItem(T item)"
  summary: "Upserts an item."
  parameters:
  - description: "the item represented as a POJO or Item object to upsert."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<T>> <T>upsertItem(T item)"
  desc: "Upserts an item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single resource response with the upserted item. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single resource response with the upserted item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>upsertItem(T,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>upsertItem(T item, CosmosItemRequestOptions options)"
  name: "<T>upsertItem(T item, CosmosItemRequestOptions options)"
  nameWithType: "CosmosAsyncContainer.<T>upsertItem(T item, CosmosItemRequestOptions options)"
  summary: "Upserts an item."
  parameters:
  - description: "the item represented as a POJO or Item object to upsert."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<T>> <T>upsertItem(T item, CosmosItemRequestOptions options)"
  desc: "Upserts an item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single resource response with the upserted item. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single resource response with the upserted item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<T>upsertItem(T,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<T>upsertItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  name: "<T>upsertItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  nameWithType: "CosmosAsyncContainer.<T>upsertItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  summary: "Upserts an item."
  parameters:
  - description: "the item represented as a POJO or Item object to upsert."
    name: "item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<T>> <T>upsertItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  desc: "Upserts an item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single resource response with the upserted item. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single resource response with the upserted item or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<TContext>executeBulkOperations(reactor.core.publisher.Flux<com.azure.cosmos.models.CosmosItemOperation>)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<TContext>executeBulkOperations(Flux<CosmosItemOperation> operations)"
  name: "<TContext>executeBulkOperations(Flux<CosmosItemOperation> operations)"
  nameWithType: "CosmosAsyncContainer.<TContext>executeBulkOperations(Flux<CosmosItemOperation> operations)"
  summary: "Executes flux of operations in Bulk."
  parameters:
  - description: "Flux of operation which will be executed by this container."
    name: "operations"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemOperation?alt=com.azure.cosmos.models.CosmosItemOperation&text=CosmosItemOperation\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Flux<CosmosBulkOperationResponse<TContext>> <TContext>executeBulkOperations(Flux<CosmosItemOperation> operations)"
  desc: "Executes flux of operations in Bulk."
  returns:
    description: "A Flux of <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse\"></xref> which contains operation and it's response or exception.\n <p>\n     To create a operation which can be executed here, use <xref uid=\"com.azure.cosmos.models.CosmosBulkOperations\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkOperations\"></xref>. For eg.\n     for a upsert operation use <xref uid=\"com.azure.cosmos.models.CosmosBulkOperations.getUpsertItemOperation*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkOperations#getUpsertItemOperation(Object, PartitionKey)\"></xref>\n </p>\n <p>\n     We can get the corresponding operation using <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse.getOperation()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse#getOperation()\"></xref> and\n     it's response using <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse.getResponse()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse#getResponse()\"></xref>. If the operation was executed\n     successfully, the value returned by <xref uid=\"com.azure.cosmos.models.CosmosBulkItemResponse.isSuccessStatusCode()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkItemResponse#isSuccessStatusCode()\"></xref> will be true. To get\n     actual status use <xref uid=\"com.azure.cosmos.models.CosmosBulkItemResponse.getStatusCode()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkItemResponse#getStatusCode()\"></xref>.\n </p>\n To check if the operation had any exception, use <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse.getException()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse#getException()\"></xref> to\n get the exception."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosBulkOperationResponse?alt=com.azure.cosmos.models.CosmosBulkOperationResponse&text=CosmosBulkOperationResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"TContext?alt=TContext&text=TContext\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.<TContext>executeBulkOperations(reactor.core.publisher.Flux<com.azure.cosmos.models.CosmosItemOperation>,com.azure.cosmos.models.CosmosBulkExecutionOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.<TContext>executeBulkOperations(Flux<CosmosItemOperation> operations, CosmosBulkExecutionOptions bulkOptions)"
  name: "<TContext>executeBulkOperations(Flux<CosmosItemOperation> operations, CosmosBulkExecutionOptions bulkOptions)"
  nameWithType: "CosmosAsyncContainer.<TContext>executeBulkOperations(Flux<CosmosItemOperation> operations, CosmosBulkExecutionOptions bulkOptions)"
  summary: "Executes flux of operations in Bulk."
  parameters:
  - description: "Flux of operation which will be executed by this container."
    name: "operations"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemOperation?alt=com.azure.cosmos.models.CosmosItemOperation&text=CosmosItemOperation\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Options that apply for this Bulk request which specifies options regarding execution like\n                    concurrency, batching size, interval and context."
    name: "bulkOptions"
    type: "<xref href=\"com.azure.cosmos.models.CosmosBulkExecutionOptions?alt=com.azure.cosmos.models.CosmosBulkExecutionOptions&text=CosmosBulkExecutionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<CosmosBulkOperationResponse<TContext>> <TContext>executeBulkOperations(Flux<CosmosItemOperation> operations, CosmosBulkExecutionOptions bulkOptions)"
  desc: "Executes flux of operations in Bulk."
  returns:
    description: "A Flux of <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse\"></xref> which contains operation and it's response or exception.\n <p>\n     To create a operation which can be executed here, use <xref uid=\"com.azure.cosmos.models.CosmosBulkOperations\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkOperations\"></xref>. For eg.\n     for a upsert operation use <xref uid=\"com.azure.cosmos.models.CosmosBulkOperations.getUpsertItemOperation*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkOperations#getUpsertItemOperation(Object, PartitionKey)\"></xref>\n </p>\n <p>\n     We can get the corresponding operation using <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse.getOperation()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse#getOperation()\"></xref> and\n     it's response using <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse.getResponse()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse#getResponse()\"></xref>. If the operation was executed\n     successfully, the value returned by <xref uid=\"com.azure.cosmos.models.CosmosBulkItemResponse.isSuccessStatusCode()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkItemResponse#isSuccessStatusCode()\"></xref> will be true. To get\n     actual status use <xref uid=\"com.azure.cosmos.models.CosmosBulkItemResponse.getStatusCode()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.models.CosmosBulkItemResponse#getStatusCode()\"></xref>.\n </p>\n To check if the operation had any exception, use <xref uid=\"com.azure.cosmos.models.CosmosBulkOperationResponse.getException()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBulkOperationResponse#getException()\"></xref> to\n get the exception."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosBulkOperationResponse?alt=com.azure.cosmos.models.CosmosBulkOperationResponse&text=CosmosBulkOperationResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"TContext?alt=TContext&text=TContext\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.delete()"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.delete()"
  name: "delete()"
  nameWithType: "CosmosAsyncContainer.delete()"
  summary: "Deletes the current container."
  syntax: "public Mono<CosmosContainerResponse> delete()"
  desc: "Deletes the current container.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single Cosmos container response for the deleted container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single Cosmos container response for\n the deleted container or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.delete(com.azure.cosmos.models.CosmosContainerRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.delete(CosmosContainerRequestOptions options)"
  name: "delete(CosmosContainerRequestOptions options)"
  nameWithType: "CosmosAsyncContainer.delete(CosmosContainerRequestOptions options)"
  summary: "Deletes the container"
  parameters:
  - description: "the request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerRequestOptions?alt=com.azure.cosmos.models.CosmosContainerRequestOptions&text=CosmosContainerRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosContainerResponse> delete(CosmosContainerRequestOptions options)"
  desc: "Deletes the container\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single Cosmos container response for the deleted database. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single Cosmos container response for\n the deleted database or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.deleteAllItemsByPartitionKey(com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.deleteAllItemsByPartitionKey(PartitionKey partitionKey, CosmosItemRequestOptions options)"
  name: "deleteAllItemsByPartitionKey(PartitionKey partitionKey, CosmosItemRequestOptions options)"
  nameWithType: "CosmosAsyncContainer.deleteAllItemsByPartitionKey(PartitionKey partitionKey, CosmosItemRequestOptions options)"
  summary: "Deletes all items in the Container with the specified partition<wbr>Key value."
  parameters:
  - description: "partitionKey of the item."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<Object>> deleteAllItemsByPartitionKey(PartitionKey partitionKey, CosmosItemRequestOptions options)"
  desc: "Deletes all items in the Container with the specified partitionKey value. Starts an asynchronous Cosmos DB background operation which deletes all items in the Container with the specified value. The asynchronous Cosmos DB background operation runs using a percentage of user RUs. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single Cosmos item response for all the deleted items."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the Cosmos item resource response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.deleteItem(java.lang.String,com.azure.cosmos.models.PartitionKey)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.deleteItem(String itemId, PartitionKey partitionKey)"
  name: "deleteItem(String itemId, PartitionKey partitionKey)"
  nameWithType: "CosmosAsyncContainer.deleteItem(String itemId, PartitionKey partitionKey)"
  summary: "Deletes an item."
  parameters:
  - description: "the item id."
    name: "itemId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<Object>> deleteItem(String itemId, PartitionKey partitionKey)"
  desc: "Deletes an item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single Cosmos item response for the deleted item."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the Cosmos item resource response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.deleteItem(java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.deleteItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  name: "deleteItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  nameWithType: "CosmosAsyncContainer.deleteItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  summary: "Deletes the item."
  parameters:
  - description: "id of the item."
    name: "itemId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "partitionKey of the item."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "the request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosItemRequestOptions?alt=com.azure.cosmos.models.CosmosItemRequestOptions&text=CosmosItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosItemResponse<Object>> deleteItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)"
  desc: "Deletes the item.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single Cosmos item response for the deleted item."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the Cosmos item resource response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosItemResponse?alt=com.azure.cosmos.models.CosmosItemResponse&text=CosmosItemResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.enableGlobalThroughputControlGroup(com.azure.cosmos.ThroughputControlGroupConfig,com.azure.cosmos.GlobalThroughputControlConfig)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.enableGlobalThroughputControlGroup(ThroughputControlGroupConfig groupConfig, GlobalThroughputControlConfig globalControlConfig)"
  name: "enableGlobalThroughputControlGroup(ThroughputControlGroupConfig groupConfig, GlobalThroughputControlConfig globalControlConfig)"
  nameWithType: "CosmosAsyncContainer.enableGlobalThroughputControlGroup(ThroughputControlGroupConfig groupConfig, GlobalThroughputControlConfig globalControlConfig)"
  summary: "Enable the throughput control group with global control mode."
  parameters:
  - description: "The throughput control group configuration, see <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"GlobalThroughputControlGroup\"></xref>."
    name: "groupConfig"
    type: "<xref href=\"com.azure.cosmos.ThroughputControlGroupConfig?alt=com.azure.cosmos.ThroughputControlGroupConfig&text=ThroughputControlGroupConfig\" data-throw-if-not-resolved=\"False\" />"
  - description: "The global throughput control configuration, see <xref uid=\"com.azure.cosmos.GlobalThroughputControlConfig\" data-throw-if-not-resolved=\"false\" data-raw-source=\"GlobalThroughputControlConfig\"></xref>."
    name: "globalControlConfig"
    type: "<xref href=\"com.azure.cosmos.GlobalThroughputControlConfig?alt=com.azure.cosmos.GlobalThroughputControlConfig&text=GlobalThroughputControlConfig\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void enableGlobalThroughputControlGroup(ThroughputControlGroupConfig groupConfig, GlobalThroughputControlConfig globalControlConfig)"
  desc: "Enable the throughput control group with global control mode. The defined throughput limit will be shared across different clients.\n\n```java\nThroughputControlGroupConfig groupConfig =\n     new ThroughputControlGroupConfigBuilder()\n         .groupName(\"localControlGroup\")\n         .targetThroughputThreshold(0.1)\n         .build();\n\n GlobalThroughputControlConfig globalControlConfig =\n     this.client.createGlobalThroughputControlConfigBuilder(database.getId(), container.getId())\n         .setControlItemRenewInterval(Duration.ofSeconds(5))\n         .setControlItemExpireInterval(Duration.ofSeconds(10))\n         .build();\n\n container.enableGlobalThroughputControlGroup(groupConfig, globalControlConfig);\n```"
- uid: "com.azure.cosmos.CosmosAsyncContainer.enableLocalThroughputControlGroup(com.azure.cosmos.ThroughputControlGroupConfig)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.enableLocalThroughputControlGroup(ThroughputControlGroupConfig groupConfig)"
  name: "enableLocalThroughputControlGroup(ThroughputControlGroupConfig groupConfig)"
  nameWithType: "CosmosAsyncContainer.enableLocalThroughputControlGroup(ThroughputControlGroupConfig groupConfig)"
  summary: "Enable the throughput control group with local control mode."
  parameters:
  - description: "A <xref uid=\"com.azure.cosmos.ThroughputControlGroupConfig\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ThroughputControlGroupConfig\"></xref>."
    name: "groupConfig"
    type: "<xref href=\"com.azure.cosmos.ThroughputControlGroupConfig?alt=com.azure.cosmos.ThroughputControlGroupConfig&text=ThroughputControlGroupConfig\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void enableLocalThroughputControlGroup(ThroughputControlGroupConfig groupConfig)"
  desc: "Enable the throughput control group with local control mode.\n\n```java\nThroughputControlGroupConfig groupConfig =\n     new ThroughputControlGroupConfigBuilder()\n         .groupName(\"localControlGroup\")\n         .targetThroughputThreshold(0.1)\n         .build();\n\n container.enableLocalThroughputControlGroup(groupConfig);\n```"
- uid: "com.azure.cosmos.CosmosAsyncContainer.executeCosmosBatch(com.azure.cosmos.models.CosmosBatch)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.executeCosmosBatch(CosmosBatch cosmosBatch)"
  name: "executeCosmosBatch(CosmosBatch cosmosBatch)"
  nameWithType: "CosmosAsyncContainer.executeCosmosBatch(CosmosBatch cosmosBatch)"
  summary: "Executes the transactional batch."
  parameters:
  - description: "Batch having list of operation and partition key which will be executed by this container."
    name: "cosmosBatch"
    type: "<xref href=\"com.azure.cosmos.models.CosmosBatch?alt=com.azure.cosmos.models.CosmosBatch&text=CosmosBatch\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosBatchResponse> executeCosmosBatch(CosmosBatch cosmosBatch)"
  desc: "Executes the transactional batch."
  returns:
    description: "A Mono response which contains details of execution of the transactional batch.\n <p>\n If the transactional batch executes successfully, the value returned by <xref uid=\"com.azure.cosmos.models.CosmosBatchResponse.getStatusCode*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchResponse#getStatusCode\"></xref> on the response returned will be set to 200}.\n <p>\n If an operation within the transactional batch fails during execution, no changes from the batch will be\n committed and the status of the failing operation is made available by <xref uid=\"com.azure.cosmos.models.CosmosBatchResponse.getStatusCode*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchResponse#getStatusCode\"></xref> or by the exception. To obtain information about the operations\n that failed in case of some user error like conflict, not found etc, the response can be enumerated.\n This returns <xref uid=\"com.azure.cosmos.models.CosmosBatchOperationResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchOperationResult\"></xref> instances corresponding to each operation in the\n transactional batch in the order they were added to the transactional batch.\n For a result corresponding to an operation within the transactional batch, use\n <xref uid=\"com.azure.cosmos.models.CosmosBatchOperationResult.getStatusCode*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchOperationResult#getStatusCode\"></xref>\n to access the status of the operation. If the operation was not executed or it was aborted due to the failure of\n another operation within the transactional batch, the value of this field will be 424;\n for the operation that caused the batch to abort, the value of this field\n will indicate the cause of failure.\n <p>\n If there are issues such as request timeouts, Gone, session not available, network failure\n or if the service somehow returns 5xx then the Mono will return error instead of CosmosBatchResponse.\n <p>\n Use <xref uid=\"com.azure.cosmos.models.CosmosBatchResponse.isSuccessStatusCode*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchResponse#isSuccessStatusCode\"></xref> on the response returned to ensure that the\n transactional batch succeeded."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosBatchResponse?alt=com.azure.cosmos.models.CosmosBatchResponse&text=CosmosBatchResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.executeCosmosBatch(com.azure.cosmos.models.CosmosBatch,com.azure.cosmos.models.CosmosBatchRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.executeCosmosBatch(CosmosBatch cosmosBatch, CosmosBatchRequestOptions requestOptions)"
  name: "executeCosmosBatch(CosmosBatch cosmosBatch, CosmosBatchRequestOptions requestOptions)"
  nameWithType: "CosmosAsyncContainer.executeCosmosBatch(CosmosBatch cosmosBatch, CosmosBatchRequestOptions requestOptions)"
  summary: "Executes the transactional batch."
  parameters:
  - description: "Batch having list of operation and partition key which will be executed by this container."
    name: "cosmosBatch"
    type: "<xref href=\"com.azure.cosmos.models.CosmosBatch?alt=com.azure.cosmos.models.CosmosBatch&text=CosmosBatch\" data-throw-if-not-resolved=\"False\" />"
  - description: "Options that apply specifically to batch request."
    name: "requestOptions"
    type: "<xref href=\"com.azure.cosmos.models.CosmosBatchRequestOptions?alt=com.azure.cosmos.models.CosmosBatchRequestOptions&text=CosmosBatchRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosBatchResponse> executeCosmosBatch(CosmosBatch cosmosBatch, CosmosBatchRequestOptions requestOptions)"
  desc: "Executes the transactional batch."
  returns:
    description: "A Mono response which contains details of execution of the transactional batch.\n <p>\n If the transactional batch executes successfully, the value returned by <xref uid=\"com.azure.cosmos.models.CosmosBatchResponse.getStatusCode*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchResponse#getStatusCode\"></xref> on the response returned will be set to 200}.\n <p>\n If an operation within the transactional batch fails during execution, no changes from the batch will be\n committed and the status of the failing operation is made available by <xref uid=\"com.azure.cosmos.models.CosmosBatchResponse.getStatusCode*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchResponse#getStatusCode\"></xref> or by the exception. To obtain information about the operations\n that failed in case of some user error like conflict, not found etc, the response can be enumerated.\n This returns <xref uid=\"com.azure.cosmos.models.CosmosBatchOperationResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchOperationResult\"></xref> instances corresponding to each operation in the\n transactional batch in the order they were added to the transactional batch.\n For a result corresponding to an operation within the transactional batch, use\n <xref uid=\"com.azure.cosmos.models.CosmosBatchOperationResult.getStatusCode*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchOperationResult#getStatusCode\"></xref>\n to access the status of the operation. If the operation was not executed or it was aborted due to the failure of\n another operation within the transactional batch, the value of this field will be 424;\n for the operation that caused the batch to abort, the value of this field\n will indicate the cause of failure.\n <p>\n If there are issues such as request timeouts, Gone, session not available, network failure\n or if the service somehow returns 5xx then the Mono will return error instead of CosmosBatchResponse.\n <p>\n Use <xref uid=\"com.azure.cosmos.models.CosmosBatchResponse.isSuccessStatusCode*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosBatchResponse#isSuccessStatusCode\"></xref> on the response returned to ensure that the\n transactional batch succeeded."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosBatchResponse?alt=com.azure.cosmos.models.CosmosBatchResponse&text=CosmosBatchResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.getConflict(java.lang.String)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.getConflict(String id)"
  name: "getConflict(String id)"
  nameWithType: "CosmosAsyncContainer.getConflict(String id)"
  summary: "Gets a <xref uid=\"com.azure.cosmos.CosmosAsyncConflict\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosAsyncConflict\"></xref> object using current container for context."
  parameters:
  - description: "the id of the Cosmos conflict."
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosAsyncConflict getConflict(String id)"
  desc: "Gets a <xref uid=\"com.azure.cosmos.CosmosAsyncConflict\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosAsyncConflict\"></xref> object using current container for context."
  returns:
    description: "a Cosmos conflict."
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncConflict?alt=com.azure.cosmos.CosmosAsyncConflict&text=CosmosAsyncConflict\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosAsyncContainer.getDatabase()"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.getDatabase()"
  name: "getDatabase()"
  nameWithType: "CosmosAsyncContainer.getDatabase()"
  summary: "Gets the parent <xref uid=\"com.azure.cosmos.CosmosAsyncDatabase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosAsyncDatabase\"></xref> for the current container."
  syntax: "public CosmosAsyncDatabase getDatabase()"
  desc: "Gets the parent <xref uid=\"com.azure.cosmos.CosmosAsyncDatabase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosAsyncDatabase\"></xref> for the current container."
  returns:
    description: "the <xref uid=\"com.azure.cosmos.CosmosAsyncDatabase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosAsyncDatabase\"></xref>."
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncDatabase?alt=com.azure.cosmos.CosmosAsyncDatabase&text=CosmosAsyncDatabase\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosAsyncContainer.getFeedRanges()"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.getFeedRanges()"
  name: "getFeedRanges()"
  nameWithType: "CosmosAsyncContainer.getFeedRanges()"
  summary: "Obtains a list of <xref uid=\"com.azure.cosmos.models.FeedRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeedRange\"></xref> that can be used to parallelize Feed operations."
  syntax: "public Mono<List<FeedRange>> getFeedRanges()"
  desc: "Obtains a list of <xref uid=\"com.azure.cosmos.models.FeedRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeedRange\"></xref> that can be used to parallelize Feed operations."
  returns:
    description: "An unmodifiable list of <xref uid=\"com.azure.cosmos.models.FeedRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeedRange\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.FeedRange?alt=com.azure.cosmos.models.FeedRange&text=FeedRange\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.getId()"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.getId()"
  name: "getId()"
  nameWithType: "CosmosAsyncContainer.getId()"
  summary: "Get the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncContainer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosAsyncContainer\"></xref>."
  syntax: "public String getId()"
  desc: "Get the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncContainer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosAsyncContainer\"></xref>."
  returns:
    description: "the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncContainer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosAsyncContainer\"></xref>."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosAsyncContainer.getScripts()"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.getScripts()"
  name: "getScripts()"
  nameWithType: "CosmosAsyncContainer.getScripts()"
  summary: "Gets a <xref uid=\"com.azure.cosmos.CosmosAsyncScripts\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosAsyncScripts\"></xref> using the current container as context."
  syntax: "public CosmosAsyncScripts getScripts()"
  desc: "Gets a <xref uid=\"com.azure.cosmos.CosmosAsyncScripts\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosAsyncScripts\"></xref> using the current container as context.\n\nThis can be further used to perform various operations on Cosmos scripts."
  returns:
    description: "the <xref uid=\"com.azure.cosmos.CosmosAsyncScripts\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosAsyncScripts\"></xref>."
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncScripts?alt=com.azure.cosmos.CosmosAsyncScripts&text=CosmosAsyncScripts\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosAsyncContainer.openConnectionsAndInitCaches()"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.openConnectionsAndInitCaches()"
  name: "openConnectionsAndInitCaches()"
  nameWithType: "CosmosAsyncContainer.openConnectionsAndInitCaches()"
  summary: "Best effort to initializes the container by warming up the caches and connections for the current read region."
  syntax: "public Mono<Void> openConnectionsAndInitCaches()"
  desc: "Best effort to initializes the container by warming up the caches and connections for the current read region. Depending on how many partitions the container has, the total time needed will also change. But generally you can use the following formula to get an estimated time: If it took 200ms to establish a connection, and you have 100 partitions in your container then it will take around (100 \\* 4 / CPUCores) \\* 200ms to open all connections after get the address list\n\n\nNOTE: This API ideally should be called only once during application initialization before any workload.\nIn case of any transient error, caller should consume the error and continue the regular workload."
  returns:
    description: "Mono of Void."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.queryConflicts(java.lang.String)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.queryConflicts(String query)"
  name: "queryConflicts(String query)"
  nameWithType: "CosmosAsyncContainer.queryConflicts(String query)"
  summary: "Queries all the conflicts in the current container."
  parameters:
  - description: "the query."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosConflictProperties> queryConflicts(String query)"
  desc: "Queries all the conflicts in the current container."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the\n obtained conflicts or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosConflictProperties?alt=com.azure.cosmos.models.CosmosConflictProperties&text=CosmosConflictProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.queryConflicts(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.queryConflicts(String query, CosmosQueryRequestOptions options)"
  name: "queryConflicts(String query, CosmosQueryRequestOptions options)"
  nameWithType: "CosmosAsyncContainer.queryConflicts(String query, CosmosQueryRequestOptions options)"
  summary: "Queries all the conflicts in the current container."
  parameters:
  - description: "the query."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the query request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosConflictProperties> queryConflicts(String query, CosmosQueryRequestOptions options)"
  desc: "Queries all the conflicts in the current container."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the\n obtained conflicts or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosConflictProperties?alt=com.azure.cosmos.models.CosmosConflictProperties&text=CosmosConflictProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.read()"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.read()"
  name: "read()"
  nameWithType: "CosmosAsyncContainer.read()"
  summary: "Reads the current container."
  syntax: "public Mono<CosmosContainerResponse> read()"
  desc: "Reads the current container.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single Cosmos container response with the read container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single Cosmos container response with\n the read container or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.read(com.azure.cosmos.models.CosmosContainerRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.read(CosmosContainerRequestOptions options)"
  name: "read(CosmosContainerRequestOptions options)"
  nameWithType: "CosmosAsyncContainer.read(CosmosContainerRequestOptions options)"
  summary: "Reads the current container while specifying additional options such as If-Match."
  parameters:
  - description: "the Cosmos container request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerRequestOptions?alt=com.azure.cosmos.models.CosmosContainerRequestOptions&text=CosmosContainerRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosContainerResponse> read(CosmosContainerRequestOptions options)"
  desc: "Reads the current container while specifying additional options such as If-Match.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single Cosmos container response with the read container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single Cosmos container response with\n the read container or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.readAllConflicts(com.azure.cosmos.models.CosmosQueryRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.readAllConflicts(CosmosQueryRequestOptions options)"
  name: "readAllConflicts(CosmosQueryRequestOptions options)"
  nameWithType: "CosmosAsyncContainer.readAllConflicts(CosmosQueryRequestOptions options)"
  summary: "Lists all the conflicts in the current container."
  parameters:
  - description: "the query request options"
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosConflictProperties> readAllConflicts(CosmosQueryRequestOptions options)"
  desc: "Lists all the conflicts in the current container."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the\n obtained conflicts or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosConflictProperties?alt=com.azure.cosmos.models.CosmosConflictProperties&text=CosmosConflictProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.readThroughput()"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.readThroughput()"
  name: "readThroughput()"
  nameWithType: "CosmosAsyncContainer.readThroughput()"
  summary: "Read the throughput provisioned for the current container."
  syntax: "public Mono<ThroughputResponse> readThroughput()"
  desc: "Read the throughput provisioned for the current container."
  returns:
    description: "the mono containing throughput response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.ThroughputResponse?alt=com.azure.cosmos.models.ThroughputResponse&text=ThroughputResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.replace(com.azure.cosmos.models.CosmosContainerProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.replace(CosmosContainerProperties containerProperties)"
  name: "replace(CosmosContainerProperties containerProperties)"
  nameWithType: "CosmosAsyncContainer.replace(CosmosContainerProperties containerProperties)"
  summary: "Replaces the current container's properties."
  parameters:
  - description: "the container properties"
    name: "containerProperties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosContainerResponse> replace(CosmosContainerProperties containerProperties)"
  desc: "Replaces the current container's properties.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single Cosmos container response with the replaced container properties. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single Cosmos container response with\n the replaced container properties or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.replace(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.replace(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)"
  name: "replace(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)"
  nameWithType: "CosmosAsyncContainer.replace(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)"
  summary: "Replaces the current container properties while using non-default request options."
  parameters:
  - description: "the container properties"
    name: "containerProperties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "the Cosmos container request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerRequestOptions?alt=com.azure.cosmos.models.CosmosContainerRequestOptions&text=CosmosContainerRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosContainerResponse> replace(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)"
  desc: "Replaces the current container properties while using non-default request options.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single Cosmos container response with the replaced container properties. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single Cosmos container response with\n the replaced container properties or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncContainer.replaceThroughput(com.azure.cosmos.models.ThroughputProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.replaceThroughput(ThroughputProperties throughputProperties)"
  name: "replaceThroughput(ThroughputProperties throughputProperties)"
  nameWithType: "CosmosAsyncContainer.replaceThroughput(ThroughputProperties throughputProperties)"
  summary: "Replace the throughput."
  parameters:
  - description: "the throughput properties."
    name: "throughputProperties"
    type: "<xref href=\"com.azure.cosmos.models.ThroughputProperties?alt=com.azure.cosmos.models.ThroughputProperties&text=ThroughputProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties)"
  desc: "Replace the throughput."
  returns:
    description: "the mono containing throughput response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.ThroughputResponse?alt=com.azure.cosmos.models.ThroughputResponse&text=ThroughputResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Provides methods for reading, deleting, and replacing existing Containers. Provides methods for interacting with child resources (Items, Scripts, Conflicts)"
metadata: {}
package: "com.azure.cosmos"
artifact: com.azure:azure-cosmos:4.34.0
