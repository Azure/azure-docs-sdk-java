### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.eventprocessorhost
  id: eventprocessorhost
  children:
  - com.microsoft.azure.eventprocessorhost._azure_storage_partition_manager_options
  - com.microsoft.azure.eventprocessorhost._checkpoint
  - com.microsoft.azure.eventprocessorhost._close_reason
  - com.microsoft.azure.eventprocessorhost._e_p_h_configuration_exception
  - com.microsoft.azure.eventprocessorhost._event_processor_host
  - com.microsoft.azure.eventprocessorhost._event_processor_host_action_strings
  - com.microsoft.azure.eventprocessorhost._event_processor_options
  - com.microsoft.azure.eventprocessorhost._event_processor_options._end_of_stream_initial_offset_provider
  - com.microsoft.azure.eventprocessorhost._event_processor_options._start_of_stream_initial_offset_provider
  - com.microsoft.azure.eventprocessorhost._exception_received_event_args
  - com.microsoft.azure.eventprocessorhost._i_checkpoint_manager
  - com.microsoft.azure.eventprocessorhost._i_event_processor
  - com.microsoft.azure.eventprocessorhost._i_event_processor_factory
  - com.microsoft.azure.eventprocessorhost._i_lease_manager
  - com.microsoft.azure.eventprocessorhost._lease
  - com.microsoft.azure.eventprocessorhost._lease_lost_exception
  - com.microsoft.azure.eventprocessorhost._partition_context
  - com.microsoft.azure.eventprocessorhost._partition_manager_options
  href: com.microsoft.azure.eventprocessorhost.yml
  langs:
  - java
  name: com.microsoft.azure.eventprocessorhost
  nameWithType: com.microsoft.azure.eventprocessorhost
  fullName: com.microsoft.azure.eventprocessorhost
  type: Namespace
  source:
    remote:
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/AzureBlobLease.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-java
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/AzureBlobLease.java
    startLine: 5
  syntax:
    content: package com.microsoft.azure.eventprocessorhost
references:
- uid: com.microsoft.azure.eventprocessorhost._azure_storage_partition_manager_options
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._azure_storage_partition_manager_options.yml
  name: AzureStoragePartitionManagerOptions
  nameWithType: AzureStoragePartitionManagerOptions
  fullName: com.microsoft.azure.eventprocessorhost.AzureStoragePartitionManagerOptions
  type: Class
  syntax:
    content: public class AzureStoragePartitionManagerOptions extends PartitionManagerOptions
- uid: com.microsoft.azure.eventprocessorhost._checkpoint
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._checkpoint.yml
  name: Checkpoint
  nameWithType: Checkpoint
  fullName: com.microsoft.azure.eventprocessorhost.Checkpoint
  type: Class
  summary: >-
    <p>

      <xref uid="com.microsoft.azure.eventprocessorhost._checkpoint" data-throw-if-not-resolved="false">Checkpoint</xref> class is public so that advanced users can implement an <xref uid="com.microsoft.azure.eventprocessorhost._i_checkpoint_manager" data-throw-if-not-resolved="false">ICheckpointManager</xref>. Unless you are implementing <xref uid="com.microsoft.azure.eventprocessorhost._i_checkpoint_manager" data-throw-if-not-resolved="false">ICheckpointManager</xref> you should not have to deal with objects of this class directly. </p>

    <p>A <xref uid="com.microsoft.azure.eventprocessorhost._checkpoint" data-throw-if-not-resolved="false">Checkpoint</xref> is essentially just a tuple. It has a fixed partition id, set at creation time and immutable thereafter, and associates that with an offset/sequenceNumber pair which indicates a position within the messages in that partition. </p>
  syntax:
    content: public class Checkpoint
- uid: com.microsoft.azure.eventprocessorhost._close_reason
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._close_reason.yml
  name: CloseReason
  nameWithType: CloseReason
  fullName: com.microsoft.azure.eventprocessorhost.CloseReason
  type: Enum
  syntax:
    content: public enum CloseReason
- uid: com.microsoft.azure.eventprocessorhost._e_p_h_configuration_exception
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._e_p_h_configuration_exception.yml
  name: EPHConfigurationException
  nameWithType: EPHConfigurationException
  fullName: com.microsoft.azure.eventprocessorhost.EPHConfigurationException
  type: Class
  syntax:
    content: public class EPHConfigurationException
- uid: com.microsoft.azure.eventprocessorhost._event_processor_host
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._event_processor_host.yml
  name: EventProcessorHost
  nameWithType: EventProcessorHost
  fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost
  type: Class
  syntax:
    content: public class EventProcessorHost
- uid: com.microsoft.azure.eventprocessorhost._event_processor_host_action_strings
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._event_processor_host_action_strings.yml
  name: EventProcessorHostActionStrings
  nameWithType: EventProcessorHostActionStrings
  fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHostActionStrings
  type: Class
  syntax:
    content: public class EventProcessorHostActionStrings
- uid: com.microsoft.azure.eventprocessorhost._event_processor_options
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._event_processor_options.yml
  name: EventProcessorOptions
  nameWithType: EventProcessorOptions
  fullName: com.microsoft.azure.eventprocessorhost.EventProcessorOptions
  type: Class
  syntax:
    content: public class EventProcessorOptions
- uid: com.microsoft.azure.eventprocessorhost._exception_received_event_args
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._exception_received_event_args.yml
  name: ExceptionReceivedEventArgs
  nameWithType: ExceptionReceivedEventArgs
  fullName: com.microsoft.azure.eventprocessorhost.ExceptionReceivedEventArgs
  type: Class
  summary: <p>Passed as an argument to the general exception handler that can be set via <xref uid="com.microsoft.azure.eventprocessorhost._event_processor_options" data-throw-if-not-resolved="false">EventProcessorOptions</xref>. </p>
  syntax:
    content: public class ExceptionReceivedEventArgs
- uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.yml
  name: ICheckpointManager
  nameWithType: ICheckpointManager
  fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager
  type: Interface
  syntax:
    content: public interface ICheckpointManager
- uid: com.microsoft.azure.eventprocessorhost._i_event_processor
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._i_event_processor.yml
  name: IEventProcessor
  nameWithType: IEventProcessor
  fullName: com.microsoft.azure.eventprocessorhost.IEventProcessor
  type: Interface
  summary: >-
    <p>Interface that must be implemented by event processor classes.</p>

    <p>Any given instance of an event processor class will only process events from one partition of one Event Hub. A <xref uid="com.microsoft.azure.eventprocessorhost._partition_context" data-throw-if-not-resolved="false">PartitionContext</xref> is provided with each call to the event processor because some parameters could change, but it will always be the same partition. </p>

    <p>Although <xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref> is multithreaded, calls to a given instance of an event processor class are serialized, except for <xref uid="com.microsoft.azure.eventprocessorhost._i_event_processor.onError(PartitionContext,Throwable)" data-throw-if-not-resolved="false">onError()</xref>. <xref uid="com.microsoft.azure.eventprocessorhost._i_event_processor.onOpen(PartitionContext)" data-throw-if-not-resolved="false">onOpen()</xref> is called first, then <xref uid="com.microsoft.azure.eventprocessorhost._i_event_processor.onEvents(PartitionContext,Iterable&lt;EventData&gt;)" data-throw-if-not-resolved="false">onEvents()</xref> will be called zero or more times. When the event processor needs to be shut down, whether because there was a failure somewhere, or the lease for the partition has been lost, or because the entire processor host is being shut down, <xref uid="com.microsoft.azure.eventprocessorhost._i_event_processor.onClose(PartitionContext,CloseReason)" data-throw-if-not-resolved="false">onClose()</xref> is called after the last <xref uid="com.microsoft.azure.eventprocessorhost._i_event_processor.onEvents(PartitionContext,Iterable&lt;EventData&gt;)" data-throw-if-not-resolved="false">onEvents()</xref> call returns. </p>

    <p>

      <xref uid="com.microsoft.azure.eventprocessorhost._i_event_processor.onError(PartitionContext,Throwable)" data-throw-if-not-resolved="false">onError()</xref> could be called while <xref uid="com.microsoft.azure.eventprocessorhost._i_event_processor.onEvents(PartitionContext,Iterable&lt;EventData&gt;)" data-throw-if-not-resolved="false">onEvents()</xref> or <xref uid="com.microsoft.azure.eventprocessorhost._i_event_processor.onClose(PartitionContext,CloseReason)" data-throw-if-not-resolved="false">onClose()</xref> is executing. No synchronization is attempted in order to avoid possibly deadlocking. </p>
  syntax:
    content: public interface IEventProcessor
- uid: com.microsoft.azure.eventprocessorhost._i_event_processor_factory
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._i_event_processor_factory.yml
  name: IEventProcessorFactory<T>
  nameWithType: IEventProcessorFactory<T>
  fullName: com.microsoft.azure.eventprocessorhost.IEventProcessorFactory<T>
  type: Interface
  summary: >-
    <p>Interface that must be implemented by an event processor factory class.</p>

    <p>User-provided factories are needed if creating an event processor object requires more work than just a new with a parameterless constructor.</p>

    <p></p>
  syntax:
    content: public interface IEventProcessorFactory<T extends IEventProcessor>
    typeParameters:
    - type: 8ce1ecb9
      description: <p>The type of event processor objects produced by this factory, which must implement <xref uid="com.microsoft.azure.eventprocessorhost._i_event_processor" data-throw-if-not-resolved="false">IEventProcessor</xref></p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  name: ILeaseManager
  nameWithType: ILeaseManager
  fullName: com.microsoft.azure.eventprocessorhost.ILeaseManager
  type: Interface
  syntax:
    content: public interface ILeaseManager
- uid: com.microsoft.azure.eventprocessorhost._lease
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._lease.yml
  name: Lease
  nameWithType: Lease
  fullName: com.microsoft.azure.eventprocessorhost.Lease
  type: Class
  summary: >-
    <p>

      <xref uid="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false">Lease</xref> class is public so that advanced users can implement an <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref>. Unless you are implementing <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref> you should not have to deal with objects of this class or derived classes directly. </p>

    <p>When implementing an <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref> it may be necessary to derive from this class to carry around more information and override isExpired. The data fields have been left private instead of protected because they have a full set of getters and setters (except partitionId, which is immutable) which provide equivalent access. When implementing AzureBlobLease, for example, there was no need for more access than the getters and setters provide. </p>

    <p>Note that a <xref uid="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false">Lease</xref> object just carries information about a partition lease. The functionality to acquire/renew/release a lease is all on the <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref>. </p>
  syntax:
    content: public class Lease
- uid: com.microsoft.azure.eventprocessorhost._lease_lost_exception
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._lease_lost_exception.yml
  name: LeaseLostException
  nameWithType: LeaseLostException
  fullName: com.microsoft.azure.eventprocessorhost.LeaseLostException
  type: Class
  syntax:
    content: public class LeaseLostException
- uid: com.microsoft.azure.eventprocessorhost._partition_context
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._partition_context.yml
  name: PartitionContext
  nameWithType: PartitionContext
  fullName: com.microsoft.azure.eventprocessorhost.PartitionContext
  type: Class
  syntax:
    content: public class PartitionContext
- uid: com.microsoft.azure.eventprocessorhost._partition_manager_options
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._partition_manager_options.yml
  name: PartitionManagerOptions
  nameWithType: PartitionManagerOptions
  fullName: com.microsoft.azure.eventprocessorhost.PartitionManagerOptions
  type: Class
  syntax:
    content: public class PartitionManagerOptions
- uid: com.microsoft.azure.eventprocessorhost._event_processor_options._end_of_stream_initial_offset_provider
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._event_processor_options._end_of_stream_initial_offset_provider.yml
  name: EventProcessorOptions.EndOfStreamInitialOffsetProvider
  nameWithType: EventProcessorOptions.EndOfStreamInitialOffsetProvider
  fullName: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.EndOfStreamInitialOffsetProvider
  type: Class
  syntax:
    content: public class EndOfStreamInitialOffsetProvider
- uid: com.microsoft.azure.eventprocessorhost._event_processor_options._start_of_stream_initial_offset_provider
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._event_processor_options._start_of_stream_initial_offset_provider.yml
  name: EventProcessorOptions.StartOfStreamInitialOffsetProvider
  nameWithType: EventProcessorOptions.StartOfStreamInitialOffsetProvider
  fullName: com.microsoft.azure.eventprocessorhost.EventProcessorOptions.StartOfStreamInitialOffsetProvider
  type: Class
  syntax:
    content: public class StartOfStreamInitialOffsetProvider
