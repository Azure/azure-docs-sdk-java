### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient
  id: ModuleClient
  artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.device
  children:
  - com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(java.lang.String,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(java.lang.String,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol,com.microsoft.azure.sdk.iot.device.ClientOptions)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(java.lang.String,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol,java.lang.String,boolean,java.lang.String,boolean)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(java.lang.String,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol,javax.net.ssl.SSLContext)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment()
  - com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(com.microsoft.azure.sdk.iot.device.IotHubClientProtocol)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(com.microsoft.azure.sdk.iot.device.IotHubClientProtocol,com.microsoft.azure.sdk.iot.device.ClientOptions)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.getTwin()
  - com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod(java.lang.String,com.microsoft.azure.sdk.iot.device.edge.MethodRequest)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod(java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.device.edge.MethodRequest)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync(com.microsoft.azure.sdk.iot.device.Message,com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync(com.microsoft.azure.sdk.iot.device.Message,com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object,java.lang.String)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(com.microsoft.azure.sdk.iot.device.MessageCallback,java.lang.Object)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(java.lang.String,com.microsoft.azure.sdk.iot.device.MessageCallback,java.lang.Object)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin(com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object,com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack,java.lang.Object)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin(com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object,com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack,java.lang.Object)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.subscribeToMethod(com.microsoft.azure.sdk.iot.device.DeviceTwin.DeviceMethodCallback,java.lang.Object,com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object)
  langs:
  - java
  name: ModuleClient
  nameWithType: ModuleClient
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient
  type: Class
  package: com.microsoft.azure.sdk.iot.device
  summary: Public API for communicating from Edge Modules. A ModuleClient can be used to send messages from an Edge module to an EdgeHub or an IotHub. It can also send twin updates and listen for method calls from an EdgeHub or IotHub as well
  syntax:
    content: public class ModuleClient extends InternalClient
  inheritance:
  - java.lang.Object
  - com.microsoft.azure.sdk.iot.device.InternalClient
  inheritedMembers:
  - com.microsoft.azure.sdk.iot.device.InternalClient.close()
  - com.microsoft.azure.sdk.iot.device.InternalClient.closeNow()
  - com.microsoft.azure.sdk.iot.device.InternalClient.getConfig()
  - com.microsoft.azure.sdk.iot.device.InternalClient.getProductInfo()
  - com.microsoft.azure.sdk.iot.device.InternalClient.open()
  - com.microsoft.azure.sdk.iot.device.InternalClient.registerConnectionStatusChangeCallback(com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeCallback,java.lang.Object)
  - com.microsoft.azure.sdk.iot.device.InternalClient.sendEventAsync(com.microsoft.azure.sdk.iot.device.Message,com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object)
  - com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(java.util.Set<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property>)
  - com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(java.util.Set<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property>,int)
  - com.microsoft.azure.sdk.iot.device.InternalClient.setOperationTimeout(long)
  - com.microsoft.azure.sdk.iot.device.InternalClient.setOption(java.lang.String,java.lang.Object)
  - com.microsoft.azure.sdk.iot.device.InternalClient.setProxySettings(com.microsoft.azure.sdk.iot.device.ProxySettings)
  - com.microsoft.azure.sdk.iot.device.InternalClient.setRetryPolicy(com.microsoft.azure.sdk.iot.device.transport.RetryPolicy)
  - com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(java.util.Map<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property,com.microsoft.azure.sdk.iot.device.DeviceTwin.Pair<com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack<java.lang.String,java.lang.Object>,java.lang.Object>>)
  - com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToTwinDesiredProperties(java.util.Map<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property,com.microsoft.azure.sdk.iot.device.DeviceTwin.Pair<com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack,java.lang.Object>>)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol,long,long)
  id: ModuleClient(com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol,long,long)
  artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  langs:
  - java
  name: ModuleClient(IotHubAuthenticationProvider iotHubAuthenticationProvider, IotHubClientProtocol protocol, long sendPeriodMillis, long receivePeriodMillis)
  nameWithType: ModuleClient.ModuleClient(IotHubAuthenticationProvider iotHubAuthenticationProvider, IotHubClientProtocol protocol, long sendPeriodMillis, long receivePeriodMillis)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(IotHubAuthenticationProvider iotHubAuthenticationProvider, IotHubClientProtocol protocol, long sendPeriodMillis, long receivePeriodMillis)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient*
  type: Constructor
  package: com.microsoft.azure.sdk.iot.device
  syntax:
    content: private ModuleClient(IotHubAuthenticationProvider iotHubAuthenticationProvider, IotHubClientProtocol protocol, long sendPeriodMillis, long receivePeriodMillis)
    parameters:
    - id: iotHubAuthenticationProvider
      type: com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider
    - id: protocol
      type: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
    - id: sendPeriodMillis
      type: long
    - id: receivePeriodMillis
      type: long
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(java.lang.String,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol)
  id: ModuleClient(java.lang.String,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol)
  artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  langs:
  - java
  name: ModuleClient(String connectionString, IotHubClientProtocol protocol)
  nameWithType: ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient*
  type: Constructor
  package: com.microsoft.azure.sdk.iot.device
  summary: Constructor for a ModuleClient instance.
  syntax:
    content: public ModuleClient(String connectionString, IotHubClientProtocol protocol)
    parameters:
    - id: connectionString
      type: java.lang.String
      description: >-
        The connection string for the edge module to connect to. Must be in format
                                 HostName=xxxx;deviceId=xxxx;SharedAccessKey=
                                 xxxx;moduleId=xxxx;

                                 or

                                 HostName=xxxx;DeviceId=xxxx;SharedAccessKey=
                                 xxxx;moduleId=xxxx;HostNameGateway=xxxx
    - id: protocol
      type: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
      description: The protocol to use when communicating with the module
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(java.lang.String,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol,com.microsoft.azure.sdk.iot.device.ClientOptions)
  id: ModuleClient(java.lang.String,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol,com.microsoft.azure.sdk.iot.device.ClientOptions)
  artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  langs:
  - java
  name: ModuleClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  nameWithType: ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient*
  type: Constructor
  package: com.microsoft.azure.sdk.iot.device
  summary: Constructor for a ModuleClient instance.
  syntax:
    content: public ModuleClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)
    parameters:
    - id: connectionString
      type: java.lang.String
      description: >-
        The connection string for the edge module to connect to. Must be in format
                                 HostName=xxxx;deviceId=xxxx;SharedAccessKey=
                                 xxxx;moduleId=xxxx;

                                 or

                                 HostName=xxxx;DeviceId=xxxx;SharedAccessKey=
                                 xxxx;moduleId=xxxx;HostNameGateway=xxxx
    - id: protocol
      type: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
      description: The protocol to use when communicating with the module
    - id: clientOptions
      type: com.microsoft.azure.sdk.iot.device.ClientOptions
      description: The options that allow configuration of the module client instance during initialization
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(java.lang.String,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol,java.lang.String,boolean,java.lang.String,boolean)
  id: ModuleClient(java.lang.String,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol,java.lang.String,boolean,java.lang.String,boolean)
  artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  langs:
  - java
  name: ModuleClient(String connectionString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)
  nameWithType: ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient*
  type: Constructor
  package: com.microsoft.azure.sdk.iot.device
  summary: >-
    Create a module client instance that uses x509 authentication.


    Note! Communication from a module to another EdgeHub using x509 authentication is not currently supported and the service will always return "UNAUTHORIZED"


    Communication from a module directly to the IotHub does support x509 authentication, though.
  syntax:
    content: public ModuleClient(String connectionString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)
    parameters:
    - id: connectionString
      type: java.lang.String
      description: >-
        The connection string for the edge module to connect to. Must be in format
                                 HostName=xxxx;deviceId=xxxx;SharedAccessKey=
                                 xxxx;moduleId=xxxx;

                                 or

                                 HostName=xxxx;DeviceId=xxxx;SharedAccessKey=
                                 xxxx;moduleId=xxxx;HostNameGateway=xxxx
    - id: protocol
      type: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
      description: The protocol to communicate with
    - id: publicKeyCertificate
      type: java.lang.String
      description: The PEM formatted string for the public key certificate or the system path to the file containing the PEM.
    - id: isCertificatePath
      type: boolean
      description: "'false' if the publicKeyCertificate argument is a path to the PEM, and 'true' if it is the PEM string itself,"
    - id: privateKey
      type: java.lang.String
      description: The PEM formatted string for the private key or the system path to the file containing the PEM.
    - id: isPrivateKeyPath
      type: boolean
      description: "'false' if the privateKey argument is a path to the PEM, and 'true' if it is the PEM string itself,"
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(java.lang.String,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol,javax.net.ssl.SSLContext)
  id: ModuleClient(java.lang.String,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol,javax.net.ssl.SSLContext)
  artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  langs:
  - java
  name: ModuleClient(String connectionString, IotHubClientProtocol protocol, SSLContext sslContext)
  nameWithType: ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, SSLContext sslContext)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, SSLContext sslContext)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient*
  type: Constructor
  package: com.microsoft.azure.sdk.iot.device
  summary: Create a module client instance that uses the provided SSLContext for SSL negotiation.
  syntax:
    content: public ModuleClient(String connectionString, IotHubClientProtocol protocol, SSLContext sslContext)
    parameters:
    - id: connectionString
      type: java.lang.String
      description: >-
        The connection string for the edge module to connect to. May be an x509 connection string
                                 or a SAS connection string. If it is an x509 connection string, the provided SSLContext will be
                                 used for x509 authentication
    - id: protocol
      type: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
      description: The protocol to communicate with
    - id: sslContext
      type: javax.net.ssl.SSLContext
      description: >-
        the ssl context that will be used during authentication. If the provided connection string does not contain
                           SAS based credentials, then the sslContext will be used for x509 authentication. If the provided connection string
                           does contain SAS based credentials, the sslContext will still be used during SSL negotiation.
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment()
  id: createFromEnvironment()
  artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  langs:
  - java
  name: createFromEnvironment()
  nameWithType: ModuleClient.createFromEnvironment()
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment()
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment*
  type: Method
  package: com.microsoft.azure.sdk.iot.device
  summary: Create a module client instance from your environment variables
  syntax:
    content: public static ModuleClient createFromEnvironment()
    return:
      type: com.microsoft.azure.sdk.iot.device.ModuleClient
      description: the created module client instance
  exceptions:
  - type: com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException
    description: if the module client cannot be created
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(com.microsoft.azure.sdk.iot.device.IotHubClientProtocol)
  id: createFromEnvironment(com.microsoft.azure.sdk.iot.device.IotHubClientProtocol)
  artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  langs:
  - java
  name: createFromEnvironment(IotHubClientProtocol protocol)
  nameWithType: ModuleClient.createFromEnvironment(IotHubClientProtocol protocol)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(IotHubClientProtocol protocol)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment*
  type: Method
  package: com.microsoft.azure.sdk.iot.device
  summary: Create a module client instance from your environment variables
  syntax:
    content: public static ModuleClient createFromEnvironment(IotHubClientProtocol protocol)
    parameters:
    - id: protocol
      type: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
      description: the protocol the module client instance will use
    return:
      type: com.microsoft.azure.sdk.iot.device.ModuleClient
      description: the created module client instance
  exceptions:
  - type: com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException
    description: if the module client cannot be created
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(com.microsoft.azure.sdk.iot.device.IotHubClientProtocol,com.microsoft.azure.sdk.iot.device.ClientOptions)
  id: createFromEnvironment(com.microsoft.azure.sdk.iot.device.IotHubClientProtocol,com.microsoft.azure.sdk.iot.device.ClientOptions)
  artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  langs:
  - java
  name: createFromEnvironment(IotHubClientProtocol protocol, ClientOptions clientOptions)
  nameWithType: ModuleClient.createFromEnvironment(IotHubClientProtocol protocol, ClientOptions clientOptions)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(IotHubClientProtocol protocol, ClientOptions clientOptions)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment*
  type: Method
  package: com.microsoft.azure.sdk.iot.device
  summary: Create a module client instance from your environment variables
  syntax:
    content: public static ModuleClient createFromEnvironment(IotHubClientProtocol protocol, ClientOptions clientOptions)
    parameters:
    - id: protocol
      type: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
      description: the protocol the module client instance will use
    - id: clientOptions
      type: com.microsoft.azure.sdk.iot.device.ClientOptions
      description: The options that allow configuration of the module client instance during initialization
    return:
      type: com.microsoft.azure.sdk.iot.device.ModuleClient
      description: the created module client instance
  exceptions:
  - type: com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException
    description: if the module client cannot be created
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.getTwin()
  id: getTwin()
  artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  langs:
  - java
  name: getTwin()
  nameWithType: ModuleClient.getTwin()
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.getTwin()
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.getTwin*
  type: Method
  package: com.microsoft.azure.sdk.iot.device
  summary: Retrieves the twin's latest desired properties
  syntax:
    content: public void getTwin()
  exceptions:
  - type: java.io.IOException
    description: if the iothub cannot be reached
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod(java.lang.String,com.microsoft.azure.sdk.iot.device.edge.MethodRequest)
  id: invokeMethod(java.lang.String,com.microsoft.azure.sdk.iot.device.edge.MethodRequest)
  artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  langs:
  - java
  name: invokeMethod(String deviceId, MethodRequest methodRequest)
  nameWithType: ModuleClient.invokeMethod(String deviceId, MethodRequest methodRequest)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod(String deviceId, MethodRequest methodRequest)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod*
  type: Method
  package: com.microsoft.azure.sdk.iot.device
  summary: Invoke a method on a device
  syntax:
    content: public MethodResult invokeMethod(String deviceId, MethodRequest methodRequest)
    parameters:
    - id: deviceId
      type: java.lang.String
      description: the device to invoke a method on
    - id: methodRequest
      type: com.microsoft.azure.sdk.iot.device.edge.MethodRequest
      description: the request containing the method to invoke on the device
    return:
      type: com.microsoft.azure.sdk.iot.device.edge.MethodResult
      description: the result of the method call
  exceptions:
  - type: com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException
    description: if the method cannot be invoked
  - type: java.lang.IllegalArgumentException
    description: if the method cannot be invoked
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod(java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.device.edge.MethodRequest)
  id: invokeMethod(java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.device.edge.MethodRequest)
  artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  langs:
  - java
  name: invokeMethod(String deviceId, String moduleId, MethodRequest methodRequest)
  nameWithType: ModuleClient.invokeMethod(String deviceId, String moduleId, MethodRequest methodRequest)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod(String deviceId, String moduleId, MethodRequest methodRequest)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod*
  type: Method
  package: com.microsoft.azure.sdk.iot.device
  summary: Invoke a method on a module
  syntax:
    content: public MethodResult invokeMethod(String deviceId, String moduleId, MethodRequest methodRequest)
    parameters:
    - id: deviceId
      type: java.lang.String
      description: the device the module belongs to
    - id: moduleId
      type: java.lang.String
      description: the module to invoke the method on
    - id: methodRequest
      type: com.microsoft.azure.sdk.iot.device.edge.MethodRequest
      description: the request containing the method to invoke on the device
    return:
      type: com.microsoft.azure.sdk.iot.device.edge.MethodResult
      description: the result of the method call
  exceptions:
  - type: com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException
    description: if the method cannot be invoked
  - type: java.lang.IllegalArgumentException
    description: if the method cannot be invoked
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync(com.microsoft.azure.sdk.iot.device.Message,com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object)
  id: sendEventAsync(com.microsoft.azure.sdk.iot.device.Message,com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object)
  artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  langs:
  - java
  name: sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)
  nameWithType: ModuleClient.sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync*
  type: Method
  package: com.microsoft.azure.sdk.iot.device
  summary: Asynchronously sends an event message to the IoT Hub.
  syntax:
    content: public void sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)
    parameters:
    - id: message
      type: com.microsoft.azure.sdk.iot.device.Message
    - id: callback
      type: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
    - id: callbackContext
      type: java.lang.Object
  exceptions:
  - type: java.lang.IllegalArgumentException
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync(com.microsoft.azure.sdk.iot.device.Message,com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object,java.lang.String)
  id: sendEventAsync(com.microsoft.azure.sdk.iot.device.Message,com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object,java.lang.String)
  artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  langs:
  - java
  name: sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext, String outputName)
  nameWithType: ModuleClient.sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext, String outputName)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext, String outputName)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync*
  type: Method
  package: com.microsoft.azure.sdk.iot.device
  summary: Sends a message to a particular outputName asynchronously
  syntax:
    content: public void sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext, String outputName)
    parameters:
    - id: message
      type: com.microsoft.azure.sdk.iot.device.Message
      description: the message to send
    - id: callback
      type: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
      description: the callback to be fired when the message is acknowledged by the service
    - id: callbackContext
      type: java.lang.Object
      description: the context to be included in the callback when fired
    - id: outputName
      type: java.lang.String
      description: the outputName to route the message to
  exceptions:
  - type: java.lang.IllegalArgumentException
    description: if the provided outputName is null or empty
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(com.microsoft.azure.sdk.iot.device.MessageCallback,java.lang.Object)
  id: setMessageCallback(com.microsoft.azure.sdk.iot.device.MessageCallback,java.lang.Object)
  artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  langs:
  - java
  name: setMessageCallback(MessageCallback callback, Object context)
  nameWithType: ModuleClient.setMessageCallback(MessageCallback callback, Object context)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(MessageCallback callback, Object context)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback*
  type: Method
  package: com.microsoft.azure.sdk.iot.device
  summary: Sets the message callback.
  syntax:
    content: public ModuleClient setMessageCallback(MessageCallback callback, Object context)
    parameters:
    - id: callback
      type: com.microsoft.azure.sdk.iot.device.MessageCallback
      description: the message callback. Can be <code>null</code>.
    - id: context
      type: java.lang.Object
      description: the context to be passed to the callback. Can be <code>null</code>.
    return:
      type: com.microsoft.azure.sdk.iot.device.ModuleClient
      description: itself, for fluent setting.
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(java.lang.String,com.microsoft.azure.sdk.iot.device.MessageCallback,java.lang.Object)
  id: setMessageCallback(java.lang.String,com.microsoft.azure.sdk.iot.device.MessageCallback,java.lang.Object)
  artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  langs:
  - java
  name: setMessageCallback(String inputName, MessageCallback callback, Object context)
  nameWithType: ModuleClient.setMessageCallback(String inputName, MessageCallback callback, Object context)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(String inputName, MessageCallback callback, Object context)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback*
  type: Method
  package: com.microsoft.azure.sdk.iot.device
  summary: Sets the message callback to be fired when a telemetry message arrives on the specified input channel. All other messages will trigger the default message callback in setMessageCallback(MessageCallback callback, Object context). Any message that triggers this callback will not also trigger the default callback.
  syntax:
    content: public ModuleClient setMessageCallback(String inputName, MessageCallback callback, Object context)
    parameters:
    - id: inputName
      type: java.lang.String
      description: the input name channel to listen for.
    - id: callback
      type: com.microsoft.azure.sdk.iot.device.MessageCallback
      description: the message callback. Can be <code>null</code>.
    - id: context
      type: java.lang.Object
      description: the context to be passed to the callback. Can be <code>null</code>.
    return:
      type: com.microsoft.azure.sdk.iot.device.ModuleClient
      description: this object, for fluent setting
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin(com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object,com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack,java.lang.Object)
  id: startTwin(com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object,com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack,java.lang.Object)
  artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  langs:
  - java
  name: startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, DeviceTwin.PropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
  nameWithType: ModuleClient.startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, DeviceTwin.PropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, DeviceTwin.PropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin*
  type: Method
  package: com.microsoft.azure.sdk.iot.device
  summary: >-
    Starts the module twin. This module client will receive a callback with the current state of the full twin, including reported properties and desired properties. After that callback is received, this module client will receive a callback each time a desired property is updated. That callback will either contain the full desired properties set, or only the updated desired property depending on how the desired property was changed. IoT Hub supports a PUT and a PATCH on the twin. The PUT will cause this module client to receive the full desired properties set, and the PATCH will cause this module client to only receive the updated desired properties. Similarly, the version of each desired property will be incremented from a PUT call, and only the actually updated desired property will have its version incremented from a PATCH call. The java service client library uses the PATCH call when updated desired properties, but it builds the patch such that all properties are included in the patch. As a result, the device side will receive full twin updates, not partial updates. See [PUT][] and [PATCH][]



    [PUT]: https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/replacemoduletwin

    [PATCH]: https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/updatemoduletwin
  syntax:
    content: public void startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, DeviceTwin.PropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
    parameters:
    - id: deviceTwinStatusCallback
      type: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
      description: the IotHubEventCallback callback for providing the status of Device Twin operations. Cannot be <code>null</code>.
    - id: deviceTwinStatusCallbackContext
      type: java.lang.Object
      description: the context to be passed to the status callback. Can be <code>null</code>.
    - id: genericPropertyCallBack
      type: com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack
      description: the PropertyCallBack callback for providing any changes in desired properties. Cannot be <code>null</code>.
    - id: genericPropertyCallBackContext
      type: java.lang.Object
      description: the context to be passed to the property callback. Can be <code>null</code>.     *
  exceptions:
  - type: java.io.IOException
    description: if the callback is <code>null</code>
  - type: java.lang.IllegalArgumentException
    description: if the callback is <code>null</code>
  - type: java.lang.UnsupportedOperationException
    description: if the callback is <code>null</code>
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin(com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object,com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack,java.lang.Object)
  id: startTwin(com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object,com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack,java.lang.Object)
  artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  langs:
  - java
  name: startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, DeviceTwin.TwinPropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
  nameWithType: ModuleClient.startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, DeviceTwin.TwinPropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, DeviceTwin.TwinPropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin*
  type: Method
  package: com.microsoft.azure.sdk.iot.device
  summary: >-
    Starts the module twin. This module client will receive a callback with the current state of the full twin, including reported properties and desired properties. After that callback is received, this module client will receive a callback each time a desired property is updated. That callback will either contain the full desired properties set, or only the updated desired property depending on how the desired property was changed. IoT Hub supports a PUT and a PATCH on the twin. The PUT will cause this module client to receive the full desired properties set, and the PATCH will cause this module client to only receive the updated desired properties. Similarly, the version of each desired property will be incremented from a PUT call, and only the actually updated desired property will have its version incremented from a PATCH call. The java service client library uses the PATCH call when updated desired properties, but it builds the patch such that all properties are included in the patch. As a result, the device side will receive full twin updates, not partial updates. See [PUT][] and [PATCH][]



    [PUT]: https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/replacemoduletwin

    [PATCH]: https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/updatemoduletwin
  syntax:
    content: public void startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, DeviceTwin.TwinPropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
    parameters:
    - id: deviceTwinStatusCallback
      type: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
      description: the IotHubEventCallback callback for providing the status of Device Twin operations. Cannot be <code>null</code>.
    - id: deviceTwinStatusCallbackContext
      type: java.lang.Object
      description: the context to be passed to the status callback. Can be <code>null</code>.
    - id: genericPropertyCallBack
      type: com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack
      description: the TwinPropertyCallBack callback for providing any changes in desired properties. Cannot be <code>null</code>.
    - id: genericPropertyCallBackContext
      type: java.lang.Object
      description: the context to be passed to the property callback. Can be <code>null</code>.     *
  exceptions:
  - type: java.io.IOException
    description: if the callback is <code>null</code>
  - type: java.lang.IllegalArgumentException
    description: if the callback is <code>null</code>
  - type: java.lang.UnsupportedOperationException
    description: if the callback is <code>null</code>
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.subscribeToMethod(com.microsoft.azure.sdk.iot.device.DeviceTwin.DeviceMethodCallback,java.lang.Object,com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object)
  id: subscribeToMethod(com.microsoft.azure.sdk.iot.device.DeviceTwin.DeviceMethodCallback,java.lang.Object,com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object)
  artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.24.0
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  langs:
  - java
  name: subscribeToMethod(DeviceTwin.DeviceMethodCallback methodCallback, Object methodCallbackContext, IotHubEventCallback methodStatusCallback, Object methodStatusCallbackContext)
  nameWithType: ModuleClient.subscribeToMethod(DeviceTwin.DeviceMethodCallback methodCallback, Object methodCallbackContext, IotHubEventCallback methodStatusCallback, Object methodStatusCallbackContext)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.subscribeToMethod(DeviceTwin.DeviceMethodCallback methodCallback, Object methodCallbackContext, IotHubEventCallback methodStatusCallback, Object methodStatusCallbackContext)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.subscribeToMethod*
  type: Method
  package: com.microsoft.azure.sdk.iot.device
  summary: Subscribes to method invocations on this module. This does not include method invocations on the device the module belongs to
  syntax:
    content: public void subscribeToMethod(DeviceTwin.DeviceMethodCallback methodCallback, Object methodCallbackContext, IotHubEventCallback methodStatusCallback, Object methodStatusCallbackContext)
    parameters:
    - id: methodCallback
      type: com.microsoft.azure.sdk.iot.device.DeviceTwin.DeviceMethodCallback
      description: Callback on which device methods shall be invoked. Cannot be <code>null</code>.
    - id: methodCallbackContext
      type: java.lang.Object
      description: Context for device method callback. Can be <code>null</code>.
    - id: methodStatusCallback
      type: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
      description: Callback for providing IotHub status for device methods. Cannot be <code>null</code>.
    - id: methodStatusCallbackContext
      type: java.lang.Object
      description: Context for device method status callback. Can be <code>null</code>.
  exceptions:
  - type: java.io.IOException
    description: if called when client is not opened.
  - type: java.lang.IllegalArgumentException
    description: if called when client is not opened.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
  name: IotHubClientProtocol
  nameWithType: IotHubClientProtocol
  fullName: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient*
  name: ModuleClient
  nameWithType: ModuleClient.ModuleClient
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.ClientOptions
  name: ClientOptions
  nameWithType: ClientOptions
  fullName: com.microsoft.azure.sdk.iot.device.ClientOptions
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: javax.net.ssl.SSLContext
  spec.java:
  - uid: javax.net.ssl.SSLContext
    name: SSLContext
    fullName: javax.net.ssl.SSLContext
- uid: com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider
  name: IotHubAuthenticationProvider
  nameWithType: IotHubAuthenticationProvider
  fullName: com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException
  name: ModuleClientException
  nameWithType: ModuleClientException
  fullName: com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment*
  name: createFromEnvironment
  nameWithType: ModuleClient.createFromEnvironment
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment
  package: com.microsoft.azure.sdk.iot.device
- uid: java.lang.IllegalArgumentException
  spec.java:
  - uid: java.lang.IllegalArgumentException
    name: IllegalArgumentException
    fullName: java.lang.IllegalArgumentException
- uid: com.microsoft.azure.sdk.iot.device.Message
  name: Message
  nameWithType: Message
  fullName: com.microsoft.azure.sdk.iot.device.Message
- uid: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
  name: IotHubEventCallback
  nameWithType: IotHubEventCallback
  fullName: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync*
  name: sendEventAsync
  nameWithType: ModuleClient.sendEventAsync
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.edge.MethodRequest
  name: MethodRequest
  nameWithType: MethodRequest
  fullName: com.microsoft.azure.sdk.iot.device.edge.MethodRequest
- uid: com.microsoft.azure.sdk.iot.device.edge.MethodResult
  name: MethodResult
  nameWithType: MethodResult
  fullName: com.microsoft.azure.sdk.iot.device.edge.MethodResult
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod*
  name: invokeMethod
  nameWithType: ModuleClient.invokeMethod
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod
  package: com.microsoft.azure.sdk.iot.device
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.getTwin*
  name: getTwin
  nameWithType: ModuleClient.getTwin
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.getTwin
  package: com.microsoft.azure.sdk.iot.device
- uid: java.lang.UnsupportedOperationException
  spec.java:
  - uid: java.lang.UnsupportedOperationException
    name: UnsupportedOperationException
    fullName: java.lang.UnsupportedOperationException
- uid: com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack
  spec.java:
  - uid: com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack
    name: PropertyCallBack
    fullName: com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin*
  name: startTwin
  nameWithType: ModuleClient.startTwin
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack
  name: DeviceTwin.TwinPropertyCallBack
  nameWithType: DeviceTwin.TwinPropertyCallBack
  fullName: com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack
- uid: com.microsoft.azure.sdk.iot.device.DeviceTwin.DeviceMethodCallback
  name: DeviceTwin.DeviceMethodCallback
  nameWithType: DeviceTwin.DeviceMethodCallback
  fullName: com.microsoft.azure.sdk.iot.device.DeviceTwin.DeviceMethodCallback
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.subscribeToMethod*
  name: subscribeToMethod
  nameWithType: ModuleClient.subscribeToMethod
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.subscribeToMethod
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.MessageCallback
  name: MessageCallback
  nameWithType: MessageCallback
  fullName: com.microsoft.azure.sdk.iot.device.MessageCallback
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback*
  name: setMessageCallback
  nameWithType: ModuleClient.setMessageCallback
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.InternalClient
  name: InternalClient
  nameWithType: InternalClient
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.registerConnectionStatusChangeCallback(com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeCallback,java.lang.Object)
  name: InternalClient.registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback,Object)
  nameWithType: InternalClient.registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback,Object)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.registerConnectionStatusChangeCallback(com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeCallback,java.lang.Object)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.setProxySettings(com.microsoft.azure.sdk.iot.device.ProxySettings)
  name: InternalClient.setProxySettings(ProxySettings)
  nameWithType: InternalClient.setProxySettings(ProxySettings)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.setProxySettings(com.microsoft.azure.sdk.iot.device.ProxySettings)
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.setOption(java.lang.String,java.lang.Object)
  name: InternalClient.setOption(String,Object)
  nameWithType: InternalClient.setOption(String,Object)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.setOption(java.lang.String,java.lang.Object)
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.setRetryPolicy(com.microsoft.azure.sdk.iot.device.transport.RetryPolicy)
  name: InternalClient.setRetryPolicy(RetryPolicy)
  nameWithType: InternalClient.setRetryPolicy(RetryPolicy)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.setRetryPolicy(com.microsoft.azure.sdk.iot.device.transport.RetryPolicy)
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(java.util.Map<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property,com.microsoft.azure.sdk.iot.device.DeviceTwin.Pair<com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack<java.lang.String,java.lang.Object>,java.lang.Object>>)
  name: InternalClient.subscribeToDesiredProperties(Map<DeviceTwin.Property,DeviceTwin.Pair<DeviceTwin.PropertyCallBack<String,Object>,Object>>)
  nameWithType: InternalClient.subscribeToDesiredProperties(Map<DeviceTwin.Property,DeviceTwin.Pair<DeviceTwin.PropertyCallBack<String,Object>,Object>>)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(java.util.Map<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property,com.microsoft.azure.sdk.iot.device.DeviceTwin.Pair<com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack<java.lang.String,java.lang.Object>,java.lang.Object>>)
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(java.util.Set<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property>,int)
  name: InternalClient.sendReportedProperties(Set<DeviceTwin.Property>,int)
  nameWithType: InternalClient.sendReportedProperties(Set<DeviceTwin.Property>,int)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(java.util.Set<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property>,int)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.closeNow()
  name: InternalClient.closeNow()
  nameWithType: InternalClient.closeNow()
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.closeNow()
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.sendEventAsync(com.microsoft.azure.sdk.iot.device.Message,com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object)
  name: InternalClient.sendEventAsync(Message,IotHubEventCallback,Object)
  nameWithType: InternalClient.sendEventAsync(Message,IotHubEventCallback,Object)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.sendEventAsync(com.microsoft.azure.sdk.iot.device.Message,com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.open()
  name: InternalClient.open()
  nameWithType: InternalClient.open()
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.open()
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.setOperationTimeout(long)
  name: InternalClient.setOperationTimeout(long)
  nameWithType: InternalClient.setOperationTimeout(long)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.setOperationTimeout(long)
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToTwinDesiredProperties(java.util.Map<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property,com.microsoft.azure.sdk.iot.device.DeviceTwin.Pair<com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack,java.lang.Object>>)
  name: InternalClient.subscribeToTwinDesiredProperties(Map<DeviceTwin.Property,DeviceTwin.Pair<DeviceTwin.TwinPropertyCallBack,Object>>)
  nameWithType: InternalClient.subscribeToTwinDesiredProperties(Map<DeviceTwin.Property,DeviceTwin.Pair<DeviceTwin.TwinPropertyCallBack,Object>>)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToTwinDesiredProperties(java.util.Map<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property,com.microsoft.azure.sdk.iot.device.DeviceTwin.Pair<com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack,java.lang.Object>>)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.getConfig()
  name: InternalClient.getConfig()
  nameWithType: InternalClient.getConfig()
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.getConfig()
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.close()
  name: InternalClient.close()
  nameWithType: InternalClient.close()
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.close()
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(java.util.Set<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property>)
  name: InternalClient.sendReportedProperties(Set<DeviceTwin.Property>)
  nameWithType: InternalClient.sendReportedProperties(Set<DeviceTwin.Property>)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(java.util.Set<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property>)
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.getProductInfo()
  name: InternalClient.getProductInfo()
  nameWithType: InternalClient.getProductInfo()
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.getProductInfo()
- uid: java.lang.String,java.lang.Object>,java.lang.Object>>)
  name: String,Object>,Object>>)
  nameWithType: String,Object>,Object>>)
  fullName: java.lang.String,java.lang.Object>,java.lang.Object>>)
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(java.util.Map
  name: InternalClient.subscribeToDesiredProperties(Map
  nameWithType: InternalClient.subscribeToDesiredProperties(Map
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(java.util.Map
- uid: com.microsoft.azure.sdk.iot.device.DeviceTwin.Property,com.microsoft.azure.sdk.iot.device.DeviceTwin.Pair
  name: DeviceTwin.Property,DeviceTwin.Pair
  nameWithType: DeviceTwin.Property,DeviceTwin.Pair
  fullName: com.microsoft.azure.sdk.iot.device.DeviceTwin.Property,com.microsoft.azure.sdk.iot.device.DeviceTwin.Pair
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(java.util.Set
  name: InternalClient.sendReportedProperties(Set
  nameWithType: InternalClient.sendReportedProperties(Set
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(java.util.Set
- uid: com.microsoft.azure.sdk.iot.device.DeviceTwin.Property>,int)
  name: DeviceTwin.Property>,int)
  nameWithType: DeviceTwin.Property>,int)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceTwin.Property>,int)
- uid: com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack,java.lang.Object>>)
  name: DeviceTwin.TwinPropertyCallBack,Object>>)
  nameWithType: DeviceTwin.TwinPropertyCallBack,Object>>)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack,java.lang.Object>>)
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToTwinDesiredProperties(java.util.Map
  name: InternalClient.subscribeToTwinDesiredProperties(Map
  nameWithType: InternalClient.subscribeToTwinDesiredProperties(Map
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToTwinDesiredProperties(java.util.Map
- uid: com.microsoft.azure.sdk.iot.device.DeviceTwin.Property>)
  name: DeviceTwin.Property>)
  nameWithType: DeviceTwin.Property>)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceTwin.Property>)
