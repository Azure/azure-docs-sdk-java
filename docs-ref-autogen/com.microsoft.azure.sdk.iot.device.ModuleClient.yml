### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.device.ModuleClient"
fullName: "com.microsoft.azure.sdk.iot.device.ModuleClient"
name: "ModuleClient"
nameWithType: "ModuleClient"
summary: "Public API for communicating from Edge Modules."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.sdk.iot.device.InternalClient?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.microsoft.azure.sdk.iot.device.InternalClient.close()"
- "com.microsoft.azure.sdk.iot.device.InternalClient.closeNow()"
- "com.microsoft.azure.sdk.iot.device.InternalClient.getConfig()"
- "com.microsoft.azure.sdk.iot.device.InternalClient.getProductInfo()"
- "com.microsoft.azure.sdk.iot.device.InternalClient.isMultiplexed()"
- "com.microsoft.azure.sdk.iot.device.InternalClient.open()"
- "com.microsoft.azure.sdk.iot.device.InternalClient.registerConnectionStatusChangeCallback(com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeCallback,java.lang.Object)"
- "com.microsoft.azure.sdk.iot.device.InternalClient.sendEventAsync(com.microsoft.azure.sdk.iot.device.Message,com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object)"
- "com.microsoft.azure.sdk.iot.device.InternalClient.sendEventBatchAsync(java.util.List<com.microsoft.azure.sdk.iot.device.Message>,com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object)"
- "com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(com.microsoft.azure.sdk.iot.device.ReportedPropertiesParameters)"
- "com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(java.util.Set<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property>)"
- "com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(java.util.Set<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property>,int)"
- "com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(java.util.Set<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property>,java.lang.Integer,com.microsoft.azure.sdk.iot.device.CorrelatingMessageCallback,java.lang.Object,com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object)"
- "com.microsoft.azure.sdk.iot.device.InternalClient.setAsMultiplexed()"
- "com.microsoft.azure.sdk.iot.device.InternalClient.setOperationTimeout(long)"
- "com.microsoft.azure.sdk.iot.device.InternalClient.setOption(java.lang.String,java.lang.Object)"
- "com.microsoft.azure.sdk.iot.device.InternalClient.setProxySettings(com.microsoft.azure.sdk.iot.device.ProxySettings)"
- "com.microsoft.azure.sdk.iot.device.InternalClient.setRetryPolicy(com.microsoft.azure.sdk.iot.device.transport.RetryPolicy)"
- "com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(java.util.Map<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property,com.microsoft.azure.sdk.iot.device.DeviceTwin.Pair<com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack<java.lang.String,java.lang.Object>,java.lang.Object>>)"
- "com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToTwinDesiredProperties(java.util.Map<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property,com.microsoft.azure.sdk.iot.device.DeviceTwin.Pair<com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack,java.lang.Object>>)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class ModuleClient extends InternalClient"
constructors:
- uid: "com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(java.lang.String,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol)"
  fullName: "com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol)"
  name: "ModuleClient(String connectionString, IotHubClientProtocol protocol)"
  nameWithType: "ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol)"
  summary: "Constructor for a Module<wbr>Client instance."
  parameters:
  - description: "The connection string for the edge module to connect to. Must be in format\n                         HostName=xxxx;deviceId=xxxx;SharedAccessKey=\n                         xxxx;moduleId=xxxx;\n\n                         or\n\n                         HostName=xxxx;DeviceId=xxxx;SharedAccessKey=\n                         xxxx;moduleId=xxxx;HostNameGateway=xxxx"
    name: "connectionString"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The protocol to use when communicating with the module"
    name: "protocol"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ModuleClient(String connectionString, IotHubClientProtocol protocol)"
  exceptions:
  - description: "if an exception is encountered when parsing the connection string"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException?alt=com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException&text=ModuleClientException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if an exception is encountered when parsing the connection string"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if an exception is encountered when parsing the connection string"
    type: "<xref href=\"java.lang.UnsupportedOperationException?alt=java.lang.UnsupportedOperationException&text=UnsupportedOperationException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if an exception is encountered when parsing the connection string"
    type: "<xref href=\"java.net.URISyntaxException?alt=java.net.URISyntaxException&text=URISyntaxException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Constructor for a ModuleClient instance."
- uid: "com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(java.lang.String,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol,com.microsoft.azure.sdk.iot.device.ClientOptions)"
  fullName: "com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)"
  name: "ModuleClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)"
  nameWithType: "ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)"
  summary: "Constructor for a Module<wbr>Client instance."
  parameters:
  - description: "The connection string for the edge module to connect to. Must be in format\n                         HostName=xxxx;deviceId=xxxx;SharedAccessKey=\n                         xxxx;moduleId=xxxx;\n\n                         or\n\n                         HostName=xxxx;DeviceId=xxxx;SharedAccessKey=\n                         xxxx;moduleId=xxxx;HostNameGateway=xxxx"
    name: "connectionString"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The protocol to use when communicating with the module"
    name: "protocol"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options that allow configuration of the module client instance during initialization"
    name: "clientOptions"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.ClientOptions?alt=com.microsoft.azure.sdk.iot.device.ClientOptions&text=ClientOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ModuleClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)"
  exceptions:
  - description: "if an exception is encountered when parsing the connection string"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException?alt=com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException&text=ModuleClientException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if an exception is encountered when parsing the connection string"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if an exception is encountered when parsing the connection string"
    type: "<xref href=\"java.lang.UnsupportedOperationException?alt=java.lang.UnsupportedOperationException&text=UnsupportedOperationException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if an exception is encountered when parsing the connection string"
    type: "<xref href=\"java.net.URISyntaxException?alt=java.net.URISyntaxException&text=URISyntaxException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Constructor for a ModuleClient instance."
- uid: "com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(java.lang.String,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol,java.lang.String,boolean,java.lang.String,boolean)"
  fullName: "com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)"
  name: "ModuleClient(String connectionString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)"
  nameWithType: "ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)"
  summary: "Create a module client instance that uses x509 authentication."
  deprecatedTag: "For x509 authentication, use <xref uid=\"com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(java.lang.String,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol,com.microsoft.azure.sdk.iot.device.ClientOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#ModuleClient(String, IotHubClientProtocol, ClientOptions)\"></xref> and provide an SSLContext instance in the <xref uid=\"com.microsoft.azure.sdk.iot.device.ClientOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientOptions\"></xref> instance. For a sample on how to build this SSLContext, see [this code][] which references a helper class for building SSLContext objects for x509 authentication as well as for SAS based authentication. When not using this deprecated constructor, you can safely exclude the Bouncycastle dependencies that this library declares. See [this pom.xml][] for an example of how to do this.\n\n\n[this code]: https://github.com/Azure/azure-iot-sdk-java/blob/master/device/iot-device-samples/send-event-x509/src/main/java/samples/com/microsoft/azure/sdk/iot/SendEventX509.java\n[this pom.xml]: https://github.com/Azure/azure-iot-sdk-java/blob/master/device/iot-device-samples/send-event-x509/pom.xml"
  parameters:
  - description: "The connection string for the edge module to connect to. Must be in format\n                         HostName=xxxx;deviceId=xxxx;SharedAccessKey=\n                         xxxx;moduleId=xxxx;\n\n                         or\n\n                         HostName=xxxx;DeviceId=xxxx;SharedAccessKey=\n                         xxxx;moduleId=xxxx;HostNameGateway=xxxx"
    name: "connectionString"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The protocol to communicate with"
    name: "protocol"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol\" data-throw-if-not-resolved=\"False\" />"
  - description: "The PEM formatted string for the public key certificate or the system path to the file containing the PEM."
    name: "publicKeyCertificate"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "'false' if the publicKeyCertificate argument is a path to the PEM, and 'true' if it is the PEM string itself,"
    name: "isCertificatePath"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "The PEM formatted string for the private key or the system path to the file containing the PEM."
    name: "privateKey"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "'false' if the privateKey argument is a path to the PEM, and 'true' if it is the PEM string itself,"
    name: "isPrivateKeyPath"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic ModuleClient(String connectionString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)"
  exceptions:
  - description: "If the connString cannot be parsed"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException?alt=com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException&text=ModuleClientException\" data-throw-if-not-resolved=\"False\" />"
  - description: "If the connString cannot be parsed"
    type: "<xref href=\"java.net.URISyntaxException?alt=java.net.URISyntaxException&text=URISyntaxException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Create a module client instance that uses x509 authentication.\n\nNote! Communication from a module to another EdgeHub using x509 authentication is not currently supported and the service will always return \"UNAUTHORIZED\"\n\nCommunication from a module directly to the IotHub does support x509 authentication, though."
  hasDeprecatedTag: true
- uid: "com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(java.lang.String,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol,javax.net.ssl.SSLContext)"
  fullName: "com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, SSLContext sslContext)"
  name: "ModuleClient(String connectionString, IotHubClientProtocol protocol, SSLContext sslContext)"
  nameWithType: "ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, SSLContext sslContext)"
  summary: "Create a module client instance that uses the provided SSLContext for SSL negotiation."
  deprecatedTag: "For x509 authentication, use <xref uid=\"com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(java.lang.String,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol,com.microsoft.azure.sdk.iot.device.ClientOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#ModuleClient(String, IotHubClientProtocol, ClientOptions)\"></xref> and provide an SSLContext instance in the <xref uid=\"com.microsoft.azure.sdk.iot.device.ClientOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientOptions\"></xref> instance. For a sample on how to build this SSLContext, see [this code][] which references a helper class for building SSLContext objects for x509 authentication as well as for SAS based authentication. When not using this deprecated constructor, you can safely exclude the Bouncycastle dependencies that this library declares. See [this pom.xml][] for an example of how to do this.\n\n\n[this code]: https://github.com/Azure/azure-iot-sdk-java/blob/master/device/iot-device-samples/send-event-x509/src/main/java/samples/com/microsoft/azure/sdk/iot/SendEventX509.java\n[this pom.xml]: https://github.com/Azure/azure-iot-sdk-java/blob/master/device/iot-device-samples/send-event-x509/pom.xml"
  parameters:
  - description: "The connection string for the edge module to connect to. May be an x509 connection string\n                         or a SAS connection string. If it is an x509 connection string, the provided SSLContext will be\n                         used for x509 authentication"
    name: "connectionString"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The protocol to communicate with"
    name: "protocol"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol\" data-throw-if-not-resolved=\"False\" />"
  - description: "the ssl context that will be used during authentication. If the provided connection string does not contain\n                   SAS based credentials, then the sslContext will be used for x509 authentication. If the provided connection string\n                   does contain SAS based credentials, the sslContext will still be used during SSL negotiation."
    name: "sslContext"
    type: "<xref href=\"javax.net.ssl.SSLContext?alt=javax.net.ssl.SSLContext&text=SSLContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic ModuleClient(String connectionString, IotHubClientProtocol protocol, SSLContext sslContext)"
  exceptions:
  - description: "if the hostname in the connection string is not a valid URI"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException?alt=com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException&text=ModuleClientException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the hostname in the connection string is not a valid URI"
    type: "<xref href=\"java.net.URISyntaxException?alt=java.net.URISyntaxException&text=URISyntaxException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Create a module client instance that uses the provided SSLContext for SSL negotiation."
  hasDeprecatedTag: true
- uid: "com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.device.SasTokenProvider,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol)"
  fullName: "com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String hostName, String deviceId, String moduleId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol)"
  name: "ModuleClient(String hostName, String deviceId, String moduleId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol)"
  nameWithType: "ModuleClient.ModuleClient(String hostName, String deviceId, String moduleId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol)"
  summary: "Constructor that allows for the client's SAS token generation to be controlled by the user."
  parameters:
  - description: "The host name of the IoT Hub that this client will connect to."
    name: "hostName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the device containing the module that the connection will identify as."
    name: "deviceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the module that the connection will identify as."
    name: "moduleId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The provider of all SAS tokens that are used during authentication."
    name: "sasTokenProvider"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.SasTokenProvider?alt=com.microsoft.azure.sdk.iot.device.SasTokenProvider&text=SasTokenProvider\" data-throw-if-not-resolved=\"False\" />"
  - description: "The protocol that the client will connect over."
    name: "protocol"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ModuleClient(String hostName, String deviceId, String moduleId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol)"
  desc: "Constructor that allows for the client's SAS token generation to be controlled by the user. Note that options in this client such as setting the SAS token expiry time will throw <xref uid=\"java.lang.UnsupportedOperationException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UnsupportedOperationException\"></xref> since the SDK no longer controls that when this constructor is used."
- uid: "com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.device.SasTokenProvider,com.microsoft.azure.sdk.iot.device.IotHubClientProtocol,com.microsoft.azure.sdk.iot.device.ClientOptions)"
  fullName: "com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String hostName, String deviceId, String moduleId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol, ClientOptions clientOptions)"
  name: "ModuleClient(String hostName, String deviceId, String moduleId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol, ClientOptions clientOptions)"
  nameWithType: "ModuleClient.ModuleClient(String hostName, String deviceId, String moduleId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol, ClientOptions clientOptions)"
  summary: "Constructor that allows for the client's SAS token generation to be controlled by the user."
  parameters:
  - description: "The host name of the IoT Hub that this client will connect to."
    name: "hostName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the device containing the module that the connection will identify as."
    name: "deviceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the module that the connection will identify as."
    name: "moduleId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The provider of all SAS tokens that are used during authentication."
    name: "sasTokenProvider"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.SasTokenProvider?alt=com.microsoft.azure.sdk.iot.device.SasTokenProvider&text=SasTokenProvider\" data-throw-if-not-resolved=\"False\" />"
  - description: "The protocol that the client will connect over."
    name: "protocol"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options that allow configuration of the module client instance during initialization."
    name: "clientOptions"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.ClientOptions?alt=com.microsoft.azure.sdk.iot.device.ClientOptions&text=ClientOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ModuleClient(String hostName, String deviceId, String moduleId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol, ClientOptions clientOptions)"
  desc: "Constructor that allows for the client's SAS token generation to be controlled by the user. Note that options in this client such as setting the SAS token expiry time will throw <xref uid=\"java.lang.UnsupportedOperationException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UnsupportedOperationException\"></xref> since the SDK no longer controls that when this constructor is used."
methods:
- uid: "com.microsoft.azure.sdk.iot.device.ModuleClient.<Type1,Type2>startTwin(com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object,com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack<Type1,Type2>,java.lang.Object)"
  fullName: "com.microsoft.azure.sdk.iot.device.ModuleClient.<Type1,Type2>startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, DeviceTwin.PropertyCallBack<Type1,Type2> genericPropertyCallBack, Object genericPropertyCallBackContext)"
  name: "<Type1,Type2>startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, DeviceTwin.PropertyCallBack<Type1,Type2> genericPropertyCallBack, Object genericPropertyCallBackContext)"
  nameWithType: "ModuleClient.<Type1,Type2>startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, DeviceTwin.PropertyCallBack<Type1,Type2> genericPropertyCallBack, Object genericPropertyCallBackContext)"
  summary: "Starts the module twin."
  parameters:
  - description: "the IotHubEventCallback callback for providing the status of Device Twin operations. Cannot be <code>null</code>."
    name: "deviceTwinStatusCallback"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubEventCallback?alt=com.microsoft.azure.sdk.iot.device.IotHubEventCallback&text=IotHubEventCallback\" data-throw-if-not-resolved=\"False\" />"
  - description: "the context to be passed to the status callback. Can be <code>null</code>."
    name: "deviceTwinStatusCallbackContext"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "the PropertyCallBack callback for providing any changes in desired properties. Cannot be <code>null</code>."
    name: "genericPropertyCallBack"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack?alt=com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack&text=PropertyCallBack\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"Type1?alt=Type1&text=Type1\" data-throw-if-not-resolved=\"False\" />,<xref href=\"Type2?alt=Type2&text=Type2\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the context to be passed to the property callback. Can be <code>null</code>."
    name: "genericPropertyCallBackContext"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void <Type1,Type2>startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, DeviceTwin.PropertyCallBack<Type1,Type2> genericPropertyCallBack, Object genericPropertyCallBackContext)"
  exceptions:
  - description: "if the callback is <code>null</code>"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the callback is <code>null</code>"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the callback is <code>null</code>"
    type: "<xref href=\"java.lang.UnsupportedOperationException?alt=java.lang.UnsupportedOperationException&text=UnsupportedOperationException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Starts the module twin. This module client will receive a callback with the current state of the full twin, including reported properties and desired properties. After that callback is received, this module client will receive a callback each time a desired property is updated. That callback will either contain the full desired properties set, or only the updated desired property depending on how the desired property was changed. IoT Hub supports a PUT and a PATCH on the twin. The PUT will cause this module client to receive the full desired properties set, and the PATCH will cause this module client to only receive the updated desired properties. Similarly, the version of each desired property will be incremented from a PUT call, and only the actually updated desired property will have its version incremented from a PATCH call. The java service client library uses the PATCH call when updated desired properties, but it builds the patch such that all properties are included in the patch. As a result, the device side will receive full twin updates, not partial updates. See [PUT][] and [PATCH][]\n\n\n[PUT]: https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/replacemoduletwin\n[PATCH]: https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/updatemoduletwin"
- uid: "com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment()"
  fullName: "com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment()"
  name: "createFromEnvironment()"
  nameWithType: "ModuleClient.createFromEnvironment()"
  summary: "Create a module client instance from your environment variables"
  modifiers:
  - "static"
  syntax: "public static ModuleClient createFromEnvironment()"
  exceptions:
  - description: "if the module client cannot be created"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException?alt=com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException&text=ModuleClientException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Create a module client instance from your environment variables"
  returns:
    description: "the created module client instance"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.ModuleClient?alt=com.microsoft.azure.sdk.iot.device.ModuleClient&text=ModuleClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(com.microsoft.azure.sdk.iot.device.IotHubClientProtocol)"
  fullName: "com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(IotHubClientProtocol protocol)"
  name: "createFromEnvironment(IotHubClientProtocol protocol)"
  nameWithType: "ModuleClient.createFromEnvironment(IotHubClientProtocol protocol)"
  summary: "Create a module client instance from your environment variables"
  modifiers:
  - "static"
  parameters:
  - description: "the protocol the module client instance will use"
    name: "protocol"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static ModuleClient createFromEnvironment(IotHubClientProtocol protocol)"
  exceptions:
  - description: "if the module client cannot be created"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException?alt=com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException&text=ModuleClientException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Create a module client instance from your environment variables"
  returns:
    description: "the created module client instance"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.ModuleClient?alt=com.microsoft.azure.sdk.iot.device.ModuleClient&text=ModuleClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(com.microsoft.azure.sdk.iot.device.IotHubClientProtocol,com.microsoft.azure.sdk.iot.device.ClientOptions)"
  fullName: "com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(IotHubClientProtocol protocol, ClientOptions clientOptions)"
  name: "createFromEnvironment(IotHubClientProtocol protocol, ClientOptions clientOptions)"
  nameWithType: "ModuleClient.createFromEnvironment(IotHubClientProtocol protocol, ClientOptions clientOptions)"
  summary: "Create a module client instance from your environment variables"
  modifiers:
  - "static"
  parameters:
  - description: "the protocol the module client instance will use"
    name: "protocol"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options that allow configuration of the module client instance during initialization"
    name: "clientOptions"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.ClientOptions?alt=com.microsoft.azure.sdk.iot.device.ClientOptions&text=ClientOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static ModuleClient createFromEnvironment(IotHubClientProtocol protocol, ClientOptions clientOptions)"
  exceptions:
  - description: "if the module client cannot be created"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException?alt=com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException&text=ModuleClientException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Create a module client instance from your environment variables"
  returns:
    description: "the created module client instance"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.ModuleClient?alt=com.microsoft.azure.sdk.iot.device.ModuleClient&text=ModuleClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.ModuleClient.getTwin()"
  fullName: "com.microsoft.azure.sdk.iot.device.ModuleClient.getTwin()"
  name: "getTwin()"
  nameWithType: "ModuleClient.getTwin()"
  summary: "Retrieves the twin's latest desired properties"
  syntax: "public void getTwin()"
  exceptions:
  - description: "if the iothub cannot be reached"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Retrieves the twin's latest desired properties"
- uid: "com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod(java.lang.String,com.microsoft.azure.sdk.iot.device.edge.MethodRequest)"
  fullName: "com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod(String deviceId, MethodRequest methodRequest)"
  name: "invokeMethod(String deviceId, MethodRequest methodRequest)"
  nameWithType: "ModuleClient.invokeMethod(String deviceId, MethodRequest methodRequest)"
  summary: "Invoke a method on a device"
  parameters:
  - description: "the device to invoke a method on"
    name: "deviceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the request containing the method to invoke on the device"
    name: "methodRequest"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.edge.MethodRequest?alt=com.microsoft.azure.sdk.iot.device.edge.MethodRequest&text=MethodRequest\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public MethodResult invokeMethod(String deviceId, MethodRequest methodRequest)"
  exceptions:
  - description: "if the method cannot be invoked"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException?alt=com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException&text=ModuleClientException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the method cannot be invoked"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Invoke a method on a device"
  returns:
    description: "the result of the method call"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.edge.MethodResult?alt=com.microsoft.azure.sdk.iot.device.edge.MethodResult&text=MethodResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod(java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.device.edge.MethodRequest)"
  fullName: "com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod(String deviceId, String moduleId, MethodRequest methodRequest)"
  name: "invokeMethod(String deviceId, String moduleId, MethodRequest methodRequest)"
  nameWithType: "ModuleClient.invokeMethod(String deviceId, String moduleId, MethodRequest methodRequest)"
  summary: "Invoke a method on a module"
  parameters:
  - description: "the device the module belongs to"
    name: "deviceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the module to invoke the method on"
    name: "moduleId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the request containing the method to invoke on the device"
    name: "methodRequest"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.edge.MethodRequest?alt=com.microsoft.azure.sdk.iot.device.edge.MethodRequest&text=MethodRequest\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public MethodResult invokeMethod(String deviceId, String moduleId, MethodRequest methodRequest)"
  exceptions:
  - description: "if the method cannot be invoked"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException?alt=com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException&text=ModuleClientException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the method cannot be invoked"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Invoke a method on a module"
  returns:
    description: "the result of the method call"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.edge.MethodResult?alt=com.microsoft.azure.sdk.iot.device.edge.MethodResult&text=MethodResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync(com.microsoft.azure.sdk.iot.device.Message,com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object)"
  fullName: "com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)"
  name: "sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)"
  nameWithType: "ModuleClient.sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)"
  summary: "Asynchronously sends an event message to the IoT Hub."
  overridden: "com.microsoft.azure.sdk.iot.device.InternalClient.sendEventAsync(com.microsoft.azure.sdk.iot.device.Message,com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object)"
  parameters:
  - name: "message"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message\" data-throw-if-not-resolved=\"False\" />"
  - name: "callback"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubEventCallback?alt=com.microsoft.azure.sdk.iot.device.IotHubEventCallback&text=IotHubEventCallback\" data-throw-if-not-resolved=\"False\" />"
  - name: "callbackContext"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)"
  exceptions:
  - type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Asynchronously sends an event message to the IoT Hub."
- uid: "com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync(com.microsoft.azure.sdk.iot.device.Message,com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object,java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext, String outputName)"
  name: "sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext, String outputName)"
  nameWithType: "ModuleClient.sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext, String outputName)"
  summary: "Sends a message to a particular output<wbr>Name asynchronously"
  parameters:
  - description: "the message to send"
    name: "message"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message\" data-throw-if-not-resolved=\"False\" />"
  - description: "the callback to be fired when the message is acknowledged by the service"
    name: "callback"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubEventCallback?alt=com.microsoft.azure.sdk.iot.device.IotHubEventCallback&text=IotHubEventCallback\" data-throw-if-not-resolved=\"False\" />"
  - description: "the context to be included in the callback when fired"
    name: "callbackContext"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "the outputName to route the message to"
    name: "outputName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext, String outputName)"
  exceptions:
  - description: "if the provided outputName is null or empty"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends a message to a particular outputName asynchronously"
- uid: "com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(com.microsoft.azure.sdk.iot.device.MessageCallback,java.lang.Object)"
  fullName: "com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(MessageCallback callback, Object context)"
  name: "setMessageCallback(MessageCallback callback, Object context)"
  nameWithType: "ModuleClient.setMessageCallback(MessageCallback callback, Object context)"
  summary: "Sets the message callback."
  parameters:
  - description: "the message callback. Can be <code>null</code>."
    name: "callback"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.MessageCallback?alt=com.microsoft.azure.sdk.iot.device.MessageCallback&text=MessageCallback\" data-throw-if-not-resolved=\"False\" />"
  - description: "the context to be passed to the callback. Can be <code>null</code>."
    name: "context"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ModuleClient setMessageCallback(MessageCallback callback, Object context)"
  desc: "Sets the message callback."
  returns:
    description: "itself, for fluent setting."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.ModuleClient?alt=com.microsoft.azure.sdk.iot.device.ModuleClient&text=ModuleClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(java.lang.String,com.microsoft.azure.sdk.iot.device.MessageCallback,java.lang.Object)"
  fullName: "com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(String inputName, MessageCallback callback, Object context)"
  name: "setMessageCallback(String inputName, MessageCallback callback, Object context)"
  nameWithType: "ModuleClient.setMessageCallback(String inputName, MessageCallback callback, Object context)"
  summary: "Sets the message callback to be fired when a telemetry message arrives on the specified input channel."
  parameters:
  - description: "the input name channel to listen for."
    name: "inputName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the message callback. Can be <code>null</code>."
    name: "callback"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.MessageCallback?alt=com.microsoft.azure.sdk.iot.device.MessageCallback&text=MessageCallback\" data-throw-if-not-resolved=\"False\" />"
  - description: "the context to be passed to the callback. Can be <code>null</code>."
    name: "context"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ModuleClient setMessageCallback(String inputName, MessageCallback callback, Object context)"
  desc: "Sets the message callback to be fired when a telemetry message arrives on the specified input channel. All other messages will trigger the default message callback in setMessageCallback(MessageCallback callback, Object context). Any message that triggers this callback will not also trigger the default callback."
  returns:
    description: "this object, for fluent setting"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.ModuleClient?alt=com.microsoft.azure.sdk.iot.device.ModuleClient&text=ModuleClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin(com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object,com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertiesCallback,java.lang.Object)"
  fullName: "com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, DeviceTwin.TwinPropertiesCallback genericPropertiesCallBack, Object genericPropertyCallBackContext)"
  name: "startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, DeviceTwin.TwinPropertiesCallback genericPropertiesCallBack, Object genericPropertyCallBackContext)"
  nameWithType: "ModuleClient.startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, DeviceTwin.TwinPropertiesCallback genericPropertiesCallBack, Object genericPropertyCallBackContext)"
  summary: "Starts the module twin."
  parameters:
  - description: "the IotHubEventCallback callback for providing the status of Device Twin operations. Cannot be <code>null</code>."
    name: "deviceTwinStatusCallback"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubEventCallback?alt=com.microsoft.azure.sdk.iot.device.IotHubEventCallback&text=IotHubEventCallback\" data-throw-if-not-resolved=\"False\" />"
  - description: "the context to be passed to the status callback. Can be <code>null</code>."
    name: "deviceTwinStatusCallbackContext"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "the TwinPropertyCallBack callback for providing any changes in desired properties. Cannot be <code>null</code>."
    name: "genericPropertiesCallBack"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertiesCallback?alt=com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertiesCallback&text=TwinPropertiesCallback\" data-throw-if-not-resolved=\"False\" />"
  - description: "the context to be passed to the property callback. Can be <code>null</code>."
    name: "genericPropertyCallBackContext"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, DeviceTwin.TwinPropertiesCallback genericPropertiesCallBack, Object genericPropertyCallBackContext)"
  exceptions:
  - description: "if the callback is <code>null</code>"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the callback is <code>null</code>"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the callback is <code>null</code>"
    type: "<xref href=\"java.lang.UnsupportedOperationException?alt=java.lang.UnsupportedOperationException&text=UnsupportedOperationException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Starts the module twin. This module client will receive a callback with the current state of the full twin, including reported properties and desired properties. After that callback is received, this module client will receive a callback each time a desired property is updated. That callback will either contain the full desired properties set, or only the updated desired property depending on how the desired property was changed. IoT Hub supports a PUT and a PATCH on the twin. The PUT will cause this module client to receive the full desired properties set, and the PATCH will cause this module client to only receive the updated desired properties. Similarly, the version of each desired property will be incremented from a PUT call, and only the actually updated desired property will have its version incremented from a PATCH call. The java service client library uses the PATCH call when updated desired properties, but it builds the patch such that all properties are included in the patch. As a result, the device side will receive full twin updates, not partial updates. See [PUT][] and [PATCH][]\n\n\n[PUT]: https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/replacemoduletwin\n[PATCH]: https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/updatemoduletwin"
- uid: "com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin(com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object,com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack,java.lang.Object)"
  fullName: "com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, DeviceTwin.TwinPropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)"
  name: "startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, DeviceTwin.TwinPropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)"
  nameWithType: "ModuleClient.startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, DeviceTwin.TwinPropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)"
  summary: "Starts the module twin."
  parameters:
  - description: "the IotHubEventCallback callback for providing the status of Device Twin operations. Cannot be <code>null</code>."
    name: "deviceTwinStatusCallback"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubEventCallback?alt=com.microsoft.azure.sdk.iot.device.IotHubEventCallback&text=IotHubEventCallback\" data-throw-if-not-resolved=\"False\" />"
  - description: "the context to be passed to the status callback. Can be <code>null</code>."
    name: "deviceTwinStatusCallbackContext"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "the TwinPropertyCallBack callback for providing any changes in desired properties. Cannot be <code>null</code>."
    name: "genericPropertyCallBack"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack?alt=com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack&text=TwinPropertyCallBack\" data-throw-if-not-resolved=\"False\" />"
  - description: "the context to be passed to the property callback. Can be <code>null</code>.     *"
    name: "genericPropertyCallBackContext"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, DeviceTwin.TwinPropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)"
  exceptions:
  - description: "if the callback is <code>null</code>"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the callback is <code>null</code>"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the callback is <code>null</code>"
    type: "<xref href=\"java.lang.UnsupportedOperationException?alt=java.lang.UnsupportedOperationException&text=UnsupportedOperationException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Starts the module twin. This module client will receive a callback with the current state of the full twin, including reported properties and desired properties. After that callback is received, this module client will receive a callback each time a desired property is updated. That callback will either contain the full desired properties set, or only the updated desired property depending on how the desired property was changed. IoT Hub supports a PUT and a PATCH on the twin. The PUT will cause this module client to receive the full desired properties set, and the PATCH will cause this module client to only receive the updated desired properties. Similarly, the version of each desired property will be incremented from a PUT call, and only the actually updated desired property will have its version incremented from a PATCH call. The java service client library uses the PATCH call when updated desired properties, but it builds the patch such that all properties are included in the patch. As a result, the device side will receive full twin updates, not partial updates. See [PUT][] and [PATCH][]\n\n\n[PUT]: https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/replacemoduletwin\n[PATCH]: https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/updatemoduletwin"
- uid: "com.microsoft.azure.sdk.iot.device.ModuleClient.subscribeToMethod(com.microsoft.azure.sdk.iot.device.DeviceTwin.DeviceMethodCallback,java.lang.Object,com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object)"
  fullName: "com.microsoft.azure.sdk.iot.device.ModuleClient.subscribeToMethod(DeviceTwin.DeviceMethodCallback methodCallback, Object methodCallbackContext, IotHubEventCallback methodStatusCallback, Object methodStatusCallbackContext)"
  name: "subscribeToMethod(DeviceTwin.DeviceMethodCallback methodCallback, Object methodCallbackContext, IotHubEventCallback methodStatusCallback, Object methodStatusCallbackContext)"
  nameWithType: "ModuleClient.subscribeToMethod(DeviceTwin.DeviceMethodCallback methodCallback, Object methodCallbackContext, IotHubEventCallback methodStatusCallback, Object methodStatusCallbackContext)"
  summary: "Subscribes to method invocations on this module."
  parameters:
  - description: "Callback on which device methods shall be invoked. Cannot be <code>null</code>."
    name: "methodCallback"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.DeviceTwin.DeviceMethodCallback?alt=com.microsoft.azure.sdk.iot.device.DeviceTwin.DeviceMethodCallback&text=DeviceMethodCallback\" data-throw-if-not-resolved=\"False\" />"
  - description: "Context for device method callback. Can be <code>null</code>."
    name: "methodCallbackContext"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "Callback for providing IotHub status for device methods. Cannot be <code>null</code>."
    name: "methodStatusCallback"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubEventCallback?alt=com.microsoft.azure.sdk.iot.device.IotHubEventCallback&text=IotHubEventCallback\" data-throw-if-not-resolved=\"False\" />"
  - description: "Context for device method status callback. Can be <code>null</code>."
    name: "methodStatusCallbackContext"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void subscribeToMethod(DeviceTwin.DeviceMethodCallback methodCallback, Object methodCallbackContext, IotHubEventCallback methodStatusCallback, Object methodStatusCallbackContext)"
  exceptions:
  - description: "if called when client is not opened."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if called when client is not opened."
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Subscribes to method invocations on this module. This does not include method invocations on the device the module belongs to"
type: "class"
desc: "Public API for communicating from Edge Modules. A ModuleClient can be used to send messages from an Edge module to an EdgeHub or an IotHub. It can also send twin updates and listen for method calls from an EdgeHub or IotHub as well"
metadata: {}
package: "com.microsoft.azure.sdk.iot.device"
artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.30.1
