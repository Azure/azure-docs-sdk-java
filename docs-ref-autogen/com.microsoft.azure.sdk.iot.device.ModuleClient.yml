### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient
  id: ModuleClient
  parent: com.microsoft.azure.sdk.iot.device
  children:
  - com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment()
  - com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(IotHubClientProtocol)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(IotHubClientProtocol,ClientOptions)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.getTwin()
  - com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod(String,MethodRequest)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod(String,String,MethodRequest)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String,IotHubClientProtocol)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String,IotHubClientProtocol,ClientOptions)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String,IotHubClientProtocol,SSLContext)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String,IotHubClientProtocol,String,boolean,String,boolean)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync(Message,IotHubEventCallback,Object)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync(Message,IotHubEventCallback,Object,String)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(MessageCallback,Object)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(String,MessageCallback,Object)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin(IotHubEventCallback,Object,PropertyCallBack,Object)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin(IotHubEventCallback,Object,TwinPropertyCallBack,Object)
  - com.microsoft.azure.sdk.iot.device.ModuleClient.subscribeToMethod(DeviceMethodCallback,Object,IotHubEventCallback,Object)
  href: com.microsoft.azure.sdk.iot.device.ModuleClient.yml
  langs:
  - java
  name: ModuleClient
  nameWithType: ModuleClient
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient
  type: Class
  source:
    remote: &o0
      path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ModuleClient.java
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-java
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ModuleClient.java
    startLine: 36
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Public API for communicating from Edge Modules. A ModuleClient can be used to send messages from an Edge module to an EdgeHub or an IotHub. It can also send twin updates and listen for method calls from an EdgeHub or IotHub as well </p>"
  syntax: &o2
    content: public class ModuleClient extends InternalClient
  inheritance:
  - java.lang.Object
  - com.microsoft.azure.sdk.iot.device.InternalClient
  inheritedMembers:
  - com.microsoft.azure.sdk.iot.device.InternalClient.close()
  - com.microsoft.azure.sdk.iot.device.InternalClient.closeNow()
  - com.microsoft.azure.sdk.iot.device.InternalClient.getConfig()
  - com.microsoft.azure.sdk.iot.device.InternalClient.getProductInfo()
  - com.microsoft.azure.sdk.iot.device.InternalClient.open()
  - com.microsoft.azure.sdk.iot.device.InternalClient.registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback,Object)
  - com.microsoft.azure.sdk.iot.device.InternalClient.sendEventBatchAsync(List<Message>,IotHubEventCallback,Object)
  - com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(Set<Property>)
  - com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(Set<Property>,int)
  - com.microsoft.azure.sdk.iot.device.InternalClient.setOperationTimeout(long)
  - com.microsoft.azure.sdk.iot.device.InternalClient.setOption(String,Object)
  - com.microsoft.azure.sdk.iot.device.InternalClient.setProxySettings(ProxySettings)
  - com.microsoft.azure.sdk.iot.device.InternalClient.setRetryPolicy(RetryPolicy)
  - com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(Map<Property, Pair<PropertyCallBack<String, Object>, Object>>)
  - com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToTwinDesiredProperties(Map<Property, Pair<TwinPropertyCallBack, Object>>)
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment()
  id: createFromEnvironment()
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  href: com.microsoft.azure.sdk.iot.device.ModuleClient.yml
  langs:
  - java
  name: createFromEnvironment()
  nameWithType: ModuleClient.createFromEnvironment()
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment()
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ModuleClient.java
    startLine: 182
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Create a module client instance from your environment variables </p>"
  syntax:
    content: public static ModuleClient createFromEnvironment()
    return:
      type: com.microsoft.azure.sdk.iot.device.ModuleClient
      description: <p>the created module client instance </p>
  exceptions:
  - type: 9fe91d4c
    description: <p>if the module client cannot be created </p>
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(IotHubClientProtocol)
  id: createFromEnvironment(IotHubClientProtocol)
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  href: com.microsoft.azure.sdk.iot.device.ModuleClient.yml
  langs:
  - java
  name: createFromEnvironment(IotHubClientProtocol protocol)
  nameWithType: ModuleClient.createFromEnvironment(IotHubClientProtocol protocol)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(IotHubClientProtocol protocol)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ModuleClient.java
    startLine: 193
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Create a module client instance from your environment variables </p>"
  syntax:
    content: public static ModuleClient createFromEnvironment(IotHubClientProtocol protocol)
    parameters:
    - id: protocol
      type: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
      description: <p>the protocol the module client instance will use </p>
    return:
      type: com.microsoft.azure.sdk.iot.device.ModuleClient
      description: <p>the created module client instance </p>
  exceptions:
  - type: 9fe91d4c
    description: <p>if the module client cannot be created </p>
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(IotHubClientProtocol,ClientOptions)
  id: createFromEnvironment(IotHubClientProtocol,ClientOptions)
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  href: com.microsoft.azure.sdk.iot.device.ModuleClient.yml
  langs:
  - java
  name: createFromEnvironment(IotHubClientProtocol protocol, ClientOptions clientOptions)
  nameWithType: ModuleClient.createFromEnvironment(IotHubClientProtocol protocol, ClientOptions clientOptions)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(IotHubClientProtocol protocol, ClientOptions clientOptions)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ModuleClient.java
    startLine: 205
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Create a module client instance from your environment variables </p>"
  syntax:
    content: public static ModuleClient createFromEnvironment(IotHubClientProtocol protocol, ClientOptions clientOptions)
    parameters:
    - id: protocol
      type: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
      description: <p>the protocol the module client instance will use </p>
    - id: clientOptions
      type: com.microsoft.azure.sdk.iot.device.ClientOptions
      description: <p>The options that allow configuration of the module client instance during initialization </p>
    return:
      type: com.microsoft.azure.sdk.iot.device.ModuleClient
      description: <p>the created module client instance </p>
  exceptions:
  - type: 9fe91d4c
    description: <p>if the module client cannot be created </p>
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.getTwin()
  id: getTwin()
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  href: com.microsoft.azure.sdk.iot.device.ModuleClient.yml
  langs:
  - java
  name: getTwin()
  nameWithType: ModuleClient.getTwin()
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.getTwin()
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.getTwin*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ModuleClient.java
    startLine: 446
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Retrieves the twin's latest desired properties </p>"
  syntax:
    content: public void getTwin()
  exceptions:
  - type: cbf33bbe
    description: <p>if the iothub cannot be reached </p>
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod(String,MethodRequest)
  id: invokeMethod(String,MethodRequest)
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  href: com.microsoft.azure.sdk.iot.device.ModuleClient.yml
  langs:
  - java
  name: invokeMethod(String deviceId, MethodRequest methodRequest)
  nameWithType: ModuleClient.invokeMethod(String deviceId, MethodRequest methodRequest)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod(String deviceId, MethodRequest methodRequest)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ModuleClient.java
    startLine: 383
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Invoke a method on a device </p>"
  syntax:
    content: public MethodResult invokeMethod(String deviceId, MethodRequest methodRequest)
    parameters:
    - id: deviceId
      type: "26831127"
      description: <p>the device to invoke a method on </p>
    - id: methodRequest
      type: com.microsoft.azure.sdk.iot.device.edge.MethodRequest
      description: <p>the request containing the method to invoke on the device </p>
    return:
      type: com.microsoft.azure.sdk.iot.device.edge.MethodResult
      description: <p>the result of the method call </p>
  exceptions:
  - type: 9fe91d4c
    description: <p>if the method cannot be invoked </p>
  - type: 3c87bd19
    description: <p>if deviceid is null or empty </p>
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod(String,String,MethodRequest)
  id: invokeMethod(String,String,MethodRequest)
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  href: com.microsoft.azure.sdk.iot.device.ModuleClient.yml
  langs:
  - java
  name: invokeMethod(String deviceId, String moduleId, MethodRequest methodRequest)
  nameWithType: ModuleClient.invokeMethod(String deviceId, String moduleId, MethodRequest methodRequest)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod(String deviceId, String moduleId, MethodRequest methodRequest)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ModuleClient.java
    startLine: 414
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Invoke a method on a module </p>"
  syntax:
    content: public MethodResult invokeMethod(String deviceId, String moduleId, MethodRequest methodRequest)
    parameters:
    - id: deviceId
      type: "26831127"
      description: <p>the device the module belongs to </p>
    - id: moduleId
      type: "26831127"
      description: <p>the module to invoke the method on </p>
    - id: methodRequest
      type: com.microsoft.azure.sdk.iot.device.edge.MethodRequest
      description: <p>the request containing the method to invoke on the device </p>
    return:
      type: com.microsoft.azure.sdk.iot.device.edge.MethodResult
      description: <p>the result of the method call </p>
  exceptions:
  - type: 9fe91d4c
    description: <p>if the method cannot be invoked </p>
  - type: 3c87bd19
    description: <p>if deviceid is null or empty, or if moduleid is null or empty </p>
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String,IotHubClientProtocol)
  id: ModuleClient(String,IotHubClientProtocol)
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  href: com.microsoft.azure.sdk.iot.device.ModuleClient.yml
  langs:
  - java
  name: ModuleClient(String connectionString, IotHubClientProtocol protocol)
  nameWithType: ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient*
  type: Constructor
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ModuleClient.java
    startLine: 78
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Constructor for a ModuleClient instance. \r\nor</p>\r\n<p>HostName=xxxx;DeviceId=xxxx;SharedAccessKey= xxxx;moduleId=xxxx;HostNameGateway=xxxx </p>"
  syntax:
    content: public ModuleClient(String connectionString, IotHubClientProtocol protocol)
    parameters:
    - id: connectionString
      type: "26831127"
      description: <p>The connection string for the edge module to connect to. Must be in format HostName=xxxx;deviceId=xxxx;SharedAccessKey= xxxx;moduleId=xxxx;</p>
    - id: protocol
      type: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
      description: <p>The protocol to use when communicating with the module </p>
  exceptions:
  - type: 9fe91d4c
    description: <p>if an exception is encountered when parsing the connection string </p>
  - type: b1c38b44
    description: <p>if using any protocol besides MQTT, if the connection string is missing the "moduleId" field, or if the connection string uses x509 </p>
  - type: 3c87bd19
    description: <p>if the provided connection string is null or empty, or if the provided protocol is null </p>
  - type: "44102508"
    description: <p>if the connection string cannot be parsed for a valid hostname </p>
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String,IotHubClientProtocol,ClientOptions)
  id: ModuleClient(String,IotHubClientProtocol,ClientOptions)
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  href: com.microsoft.azure.sdk.iot.device.ModuleClient.yml
  langs:
  - java
  name: ModuleClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  nameWithType: ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient*
  type: Constructor
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ModuleClient.java
    startLine: 106
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Constructor for a ModuleClient instance. \r\nor</p>\r\n<p>HostName=xxxx;DeviceId=xxxx;SharedAccessKey= xxxx;moduleId=xxxx;HostNameGateway=xxxx </p>"
  syntax: &o1
    content: public ModuleClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)
    parameters:
    - id: connectionString
      type: "26831127"
      description: <p>The connection string for the edge module to connect to. Must be in format HostName=xxxx;deviceId=xxxx;SharedAccessKey= xxxx;moduleId=xxxx;</p>
    - id: protocol
      type: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
      description: <p>The protocol to use when communicating with the module </p>
    - id: clientOptions
      type: com.microsoft.azure.sdk.iot.device.ClientOptions
      description: <p>The options that allow configuration of the module client instance during initialization </p>
  exceptions:
  - type: 9fe91d4c
    description: <p>if an exception is encountered when parsing the connection string </p>
  - type: b1c38b44
    description: <p>if using any protocol besides MQTT, if the connection string is missing the "moduleId" field, or if the connection string uses x509 </p>
  - type: 3c87bd19
    description: <p>if the provided connection string is null or empty, or if the provided protocol is null </p>
  - type: "44102508"
    description: <p>if the connection string cannot be parsed for a valid hostname </p>
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String,IotHubClientProtocol,SSLContext)
  id: ModuleClient(String,IotHubClientProtocol,SSLContext)
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  href: com.microsoft.azure.sdk.iot.device.ModuleClient.yml
  langs:
  - java
  name: ModuleClient(String connectionString, IotHubClientProtocol protocol, SSLContext sslContext)
  nameWithType: ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, SSLContext sslContext)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, SSLContext sslContext)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient*
  type: Constructor
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ModuleClient.java
    startLine: 171
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Create a module client instance that uses the provided SSLContext for SSL negotiation.</p>\r\n<p>\r\n  <xrefsect id=\"deprecated_1_deprecated000069\">\r\n    <xreftitle>Deprecated</xreftitle>\r\n    <xrefdescription>\r\n      <p>For x509 authentication, use <xref uid=\"com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String,IotHubClientProtocol,ClientOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ModuleClient(String, IotHubClientProtocol, ClientOptions)\"></xref> and provide an SSLContext instance in the <xref uid=\"com.microsoft.azure.sdk.iot.device.ClientOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientOptions\"></xref> instance. For a sample on how to build this SSLContext, see <a href=\"https://github.com/Azure/azure-iot-sdk-java/blob/master/device/iot-device-samples/send-event-x509/src/main/java/samples/com/microsoft/azure/sdk/iot/SendEventX509.java\">this code</a> which references a helper class for building SSLContext objects for x509 authentication as well as for SAS based authentication. When not using this deprecated constructor, you can safely exclude the Bouncycastle dependencies that this library declares. See <a href=\"https://github.com/Azure/azure-iot-sdk-java/blob/master/device/iot-device-samples/send-event-x509/pom.xml\">this pom.xml</a> for an example of how to do this. </p>\r\n    </xrefdescription>\r\n  </xrefsect>\r\n</p>"
  syntax:
    content: public ModuleClient(String connectionString, IotHubClientProtocol protocol, SSLContext sslContext)
    parameters:
    - id: connectionString
      type: "26831127"
      description: <p>The connection string for the edge module to connect to. May be an x509 connection string or a SAS connection string. If it is an x509 connection string, the provided SSLContext will be used for x509 authentication </p>
    - id: protocol
      type: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
      description: <p>The protocol to communicate with </p>
    - id: sslContext
      type: 13e89c07
      description: <p>the ssl context that will be used during authentication. If the provided connection string does not contain SAS based credentials, then the sslContext will be used for x509 authentication. If the provided connection string does contain SAS based credentials, the sslContext will still be used during SSL negotiation. </p>
  exceptions:
  - type: "44102508"
    description: <p>if the hostname in the connection string is not a valid URI </p>
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String,IotHubClientProtocol,String,boolean,String,boolean)
  id: ModuleClient(String,IotHubClientProtocol,String,boolean,String,boolean)
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  href: com.microsoft.azure.sdk.iot.device.ModuleClient.yml
  langs:
  - java
  name: ModuleClient(String connectionString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)
  nameWithType: ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient*
  type: Constructor
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ModuleClient.java
    startLine: 143
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Create a module client instance that uses x509 authentication.</p>\r\n<p>Note! Communication from a module to another EdgeHub using x509 authentication is not currently supported and the service will always return \"UNAUTHORIZED\"</p>\r\n<p>Communication from a module directly to the IotHub does support x509 authentication, though.</p>\r\n<p>\r\nor</p>\r\n<p>HostName=xxxx;DeviceId=xxxx;SharedAccessKey= xxxx;moduleId=xxxx;HostNameGateway=xxxx <xrefsect id=\"deprecated_1_deprecated000068\"><xreftitle>Deprecated</xreftitle><xrefdescription><p>For x509 authentication, use <xref uid=\"com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String,IotHubClientProtocol,ClientOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ModuleClient(String, IotHubClientProtocol, ClientOptions)\"></xref> and provide an SSLContext instance in the <xref uid=\"com.microsoft.azure.sdk.iot.device.ClientOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientOptions\"></xref> instance. For a sample on how to build this SSLContext, see <a href=\"https://github.com/Azure/azure-iot-sdk-java/blob/master/device/iot-device-samples/send-event-x509/src/main/java/samples/com/microsoft/azure/sdk/iot/SendEventX509.java\">this code</a> which references a helper class for building SSLContext objects for x509 authentication as well as for SAS based authentication. When not using this deprecated constructor, you can safely exclude the Bouncycastle dependencies that this library declares. See <a href=\"https://github.com/Azure/azure-iot-sdk-java/blob/master/device/iot-device-samples/send-event-x509/pom.xml\">this pom.xml</a> for an example of how to do this. </p></xrefdescription></xrefsect></p>"
  syntax:
    content: public ModuleClient(String connectionString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)
    parameters:
    - id: connectionString
      type: "26831127"
      description: <p>The connection string for the edge module to connect to. Must be in format HostName=xxxx;deviceId=xxxx;SharedAccessKey= xxxx;moduleId=xxxx;</p>
    - id: protocol
      type: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
      description: <p>The protocol to communicate with </p>
    - id: publicKeyCertificate
      type: "26831127"
      description: <p>The PEM formatted string for the public key certificate or the system path to the file containing the PEM. </p>
    - id: isCertificatePath
      type: 4fc6e284
      description: <p>'false' if the publicKeyCertificate argument is a path to the PEM, and 'true' if it is the PEM string itself, </p>
    - id: privateKey
      type: "26831127"
      description: <p>The PEM formatted string for the private key or the system path to the file containing the PEM. </p>
    - id: isPrivateKeyPath
      type: 4fc6e284
      description: <p>'false' if the privateKey argument is a path to the PEM, and 'true' if it is the PEM string itself, </p>
  exceptions:
  - type: "44102508"
    description: <p>If the connString cannot be parsed </p>
  - type: 9fe91d4c
    description: <p>if any other exception occurs while building the module client </p>
  - type: "44102508"
    description: <p>if the hostname in the connection string is not a valid URI </p>
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync(Message,IotHubEventCallback,Object)
  id: sendEventAsync(Message,IotHubEventCallback,Object)
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  href: com.microsoft.azure.sdk.iot.device.ModuleClient.yml
  langs:
  - java
  name: sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)
  nameWithType: ModuleClient.sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ModuleClient.java
    startLine: 365
  package: com.microsoft.azure.sdk.iot.device
  syntax:
    content: public void sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)
    parameters:
    - id: message
      type: com.microsoft.azure.sdk.iot.device.Message
    - id: callback
      type: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
    - id: callbackContext
      type: "79317049"
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync(Message,IotHubEventCallback,Object,String)
  id: sendEventAsync(Message,IotHubEventCallback,Object,String)
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  href: com.microsoft.azure.sdk.iot.device.ModuleClient.yml
  langs:
  - java
  name: sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext, String outputName)
  nameWithType: ModuleClient.sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext, String outputName)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext, String outputName)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ModuleClient.java
    startLine: 349
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Sends a message to a particular outputName asynchronously</p>\r\n<p></p>"
  syntax:
    content: public void sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext, String outputName)
    parameters:
    - id: message
      type: com.microsoft.azure.sdk.iot.device.Message
      description: <p>the message to send </p>
    - id: callback
      type: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
      description: <p>the callback to be fired when the message is acknowledged by the service </p>
    - id: callbackContext
      type: "79317049"
      description: <p>the context to be included in the callback when fired </p>
    - id: outputName
      type: "26831127"
      description: <p>the outputName to route the message to </p>
  exceptions:
  - type: 3c87bd19
    description: <p>if the provided outputName is null or empty </p>
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(MessageCallback,Object)
  id: setMessageCallback(MessageCallback,Object)
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  href: com.microsoft.azure.sdk.iot.device.ModuleClient.yml
  langs:
  - java
  name: setMessageCallback(MessageCallback callback, Object context)
  nameWithType: ModuleClient.setMessageCallback(MessageCallback callback, Object context)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(MessageCallback callback, Object context)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ModuleClient.java
    startLine: 544
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Sets the message callback.</p>\r\n<p></p>"
  syntax:
    content: public ModuleClient setMessageCallback(MessageCallback callback, Object context)
    parameters:
    - id: callback
      type: com.microsoft.azure.sdk.iot.device.MessageCallback
      description: >-
        <p>the message callback. Can be<code>null 

            </code> . </p>
    - id: context
      type: "79317049"
      description: >-
        <p>the context to be passed to the callback. Can be<code>null 

            </code> .</p>
    return:
      type: com.microsoft.azure.sdk.iot.device.ModuleClient
      description: <p>itself, for fluent setting.</p>
  exceptions:
  - type: 3c87bd19
    description: >-
      <p>if the callback is<code>null 

          </code> but a context is passed in. </p>
  - type: 12fe80de
    description: <p>if the callback is set after the client is closed. </p>
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(String,MessageCallback,Object)
  id: setMessageCallback(String,MessageCallback,Object)
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  href: com.microsoft.azure.sdk.iot.device.ModuleClient.yml
  langs:
  - java
  name: setMessageCallback(String inputName, MessageCallback callback, Object context)
  nameWithType: ModuleClient.setMessageCallback(String inputName, MessageCallback callback, Object context)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(String inputName, MessageCallback callback, Object context)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ModuleClient.java
    startLine: 561
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Sets the message callback to be fired when a telemetry message arrives on the specified input channel. All other messages will trigger the default message callback in setMessageCallback(MessageCallback callback, Object context). Any message that triggers this callback will not also trigger the default callback.</p>\r\n<p></p>"
  syntax:
    content: public ModuleClient setMessageCallback(String inputName, MessageCallback callback, Object context)
    parameters:
    - id: inputName
      type: "26831127"
      description: <p>the input name channel to listen for. </p>
    - id: callback
      type: com.microsoft.azure.sdk.iot.device.MessageCallback
      description: >-
        <p>the message callback. Can be<code>null 

            </code> . </p>
    - id: context
      type: "79317049"
      description: >-
        <p>the context to be passed to the callback. Can be<code>null 

            </code> .</p>
    return:
      type: com.microsoft.azure.sdk.iot.device.ModuleClient
      description: <p>this object, for fluent setting </p>
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin(IotHubEventCallback,Object,PropertyCallBack,Object)
  id: startTwin(IotHubEventCallback,Object,PropertyCallBack,Object)
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  href: com.microsoft.azure.sdk.iot.device.ModuleClient.yml
  langs:
  - java
  name: startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, PropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
  nameWithType: ModuleClient.startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, PropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, PropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ModuleClient.java
    startLine: 475
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Starts the module twin. This module client will receive a callback with the current state of the full twin, including reported properties and desired properties. After that callback is received, this module client will receive a callback each time a desired property is updated. That callback will either contain the full desired properties set, or only the updated desired property depending on how the desired property was changed. IoT Hub supports a PUT and a PATCH on the twin. The PUT will cause this module client to receive the full desired properties set, and the PATCH will cause this module client to only receive the updated desired properties. Similarly, the version of each desired property will be incremented from a PUT call, and only the actually updated desired property will have its version incremented from a PATCH call. The java service client library uses the PATCH call when updated desired properties, but it builds the patch such that all properties are included in the patch. As a result, the device side will receive full twin updates, not partial updates.</p>\r\n<p>See <a href=\"https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/replacemoduletwin\">PUT</a> and <a href=\"https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/updatemoduletwin\">PATCH</a></p>\r\n<p></p>"
  syntax:
    content: public void startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, PropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
    parameters:
    - id: deviceTwinStatusCallback
      type: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
      description: >-
        <p>the IotHubEventCallback callback for providing the status of Device Twin operations. Cannot be<code>null 

            </code> . </p>
    - id: deviceTwinStatusCallbackContext
      type: "79317049"
      description: >-
        <p>the context to be passed to the status callback. Can be<code>null 

            </code> . </p>
    - id: genericPropertyCallBack
      type: com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack
      description: >-
        <p>the PropertyCallBack callback for providing any changes in desired properties. Cannot be<code>null 

            </code> . </p>
    - id: genericPropertyCallBackContext
      type: "79317049"
      description: >-
        <p>the context to be passed to the property callback. Can be<code>null 

            </code> . *</p>
  exceptions:
  - type: 3c87bd19
    description: >-
      <p>if the callback is<code>null 

          </code></p>
  - type: b1c38b44
    description: <p>if called more than once on the same device </p>
  - type: cbf33bbe
    description: <p>if called when client is not opened </p>
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin(IotHubEventCallback,Object,TwinPropertyCallBack,Object)
  id: startTwin(IotHubEventCallback,Object,TwinPropertyCallBack,Object)
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  href: com.microsoft.azure.sdk.iot.device.ModuleClient.yml
  langs:
  - java
  name: startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, TwinPropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
  nameWithType: ModuleClient.startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, TwinPropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, TwinPropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ModuleClient.java
    startLine: 506
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Starts the module twin. This module client will receive a callback with the current state of the full twin, including reported properties and desired properties. After that callback is received, this module client will receive a callback each time a desired property is updated. That callback will either contain the full desired properties set, or only the updated desired property depending on how the desired property was changed. IoT Hub supports a PUT and a PATCH on the twin. The PUT will cause this module client to receive the full desired properties set, and the PATCH will cause this module client to only receive the updated desired properties. Similarly, the version of each desired property will be incremented from a PUT call, and only the actually updated desired property will have its version incremented from a PATCH call. The java service client library uses the PATCH call when updated desired properties, but it builds the patch such that all properties are included in the patch. As a result, the device side will receive full twin updates, not partial updates.</p>\r\n<p>See <a href=\"https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/replacemoduletwin\">PUT</a> and <a href=\"https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/updatemoduletwin\">PATCH</a></p>\r\n<p></p>"
  syntax:
    content: public void startTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, TwinPropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
    parameters:
    - id: deviceTwinStatusCallback
      type: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
      description: >-
        <p>the IotHubEventCallback callback for providing the status of Device Twin operations. Cannot be<code>null 

            </code> . </p>
    - id: deviceTwinStatusCallbackContext
      type: "79317049"
      description: >-
        <p>the context to be passed to the status callback. Can be<code>null 

            </code> . </p>
    - id: genericPropertyCallBack
      type: com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack
      description: >-
        <p>the TwinPropertyCallBack callback for providing any changes in desired properties. Cannot be<code>null 

            </code> . </p>
    - id: genericPropertyCallBackContext
      type: "79317049"
      description: >-
        <p>the context to be passed to the property callback. Can be<code>null 

            </code> . *</p>
  exceptions:
  - type: 3c87bd19
    description: >-
      <p>if the callback is<code>null 

          </code></p>
  - type: b1c38b44
    description: <p>if called more than once on the same device </p>
  - type: cbf33bbe
    description: <p>if called when client is not opened </p>
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.subscribeToMethod(DeviceMethodCallback,Object,IotHubEventCallback,Object)
  id: subscribeToMethod(DeviceMethodCallback,Object,IotHubEventCallback,Object)
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  href: com.microsoft.azure.sdk.iot.device.ModuleClient.yml
  langs:
  - java
  name: subscribeToMethod(DeviceMethodCallback methodCallback, Object methodCallbackContext, IotHubEventCallback methodStatusCallback, Object methodStatusCallbackContext)
  nameWithType: ModuleClient.subscribeToMethod(DeviceMethodCallback methodCallback, Object methodCallbackContext, IotHubEventCallback methodStatusCallback, Object methodStatusCallbackContext)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.subscribeToMethod(DeviceMethodCallback methodCallback, Object methodCallbackContext, IotHubEventCallback methodStatusCallback, Object methodStatusCallbackContext)
  overload: com.microsoft.azure.sdk.iot.device.ModuleClient.subscribeToMethod*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ModuleClient.java
    startLine: 524
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Subscribes to method invocations on this module. This does not include method invocations on the device the module belongs to</p>\r\n<p></p>"
  syntax:
    content: public void subscribeToMethod(DeviceMethodCallback methodCallback, Object methodCallbackContext, IotHubEventCallback methodStatusCallback, Object methodStatusCallbackContext)
    parameters:
    - id: methodCallback
      type: com.microsoft.azure.sdk.iot.device.DeviceTwin.DeviceMethodCallback
      description: >-
        <p>Callback on which device methods shall be invoked. Cannot be<code>null 

            </code> . </p>
    - id: methodCallbackContext
      type: "79317049"
      description: >-
        <p>Context for device method callback. Can be<code>null 

            </code> . </p>
    - id: methodStatusCallback
      type: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
      description: >-
        <p>Callback for providing IotHub status for device methods. Cannot be<code>null 

            </code> . </p>
    - id: methodStatusCallbackContext
      type: "79317049"
      description: >-
        <p>Context for device method status callback. Can be<code>null 

            </code> .</p>
  exceptions:
  - type: cbf33bbe
    description: <p>if called when client is not opened. </p>
  - type: 3c87bd19
    description: <p>if either callback are null. </p>
references:
- uid: 9fe91d4c
  spec.java:
  - name: ModuleClientException
    fullName: ModuleClientException
- uid: b1c38b44
  spec.java:
  - name: UnsupportedOperationException
    fullName: UnsupportedOperationException
- uid: 3c87bd19
  spec.java:
  - name: IllegalArgumentException
    fullName: IllegalArgumentException
- uid: "44102508"
  spec.java:
  - name: URISyntaxException
    fullName: URISyntaxException
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient*
  name: ModuleClient
  nameWithType: ModuleClient.ModuleClient
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient
  package: com.microsoft.azure.sdk.iot.device
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: 13e89c07
  spec.java:
  - name: SSLContext
    fullName: SSLContext
- uid: "79317049"
  spec.java:
  - name: Object
    fullName: Object
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync*
  name: sendEventAsync
  nameWithType: ModuleClient.sendEventAsync
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod*
  name: invokeMethod
  nameWithType: ModuleClient.invokeMethod
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod
  package: com.microsoft.azure.sdk.iot.device
- uid: cbf33bbe
  spec.java:
  - name: IOException
    fullName: IOException
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.getTwin*
  name: getTwin
  nameWithType: ModuleClient.getTwin
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.getTwin
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin*
  name: startTwin
  nameWithType: ModuleClient.startTwin
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.startTwin
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.subscribeToMethod*
  name: subscribeToMethod
  nameWithType: ModuleClient.subscribeToMethod
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.subscribeToMethod
  package: com.microsoft.azure.sdk.iot.device
- uid: 12fe80de
  spec.java:
  - name: IllegalStateException
    fullName: IllegalStateException
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback*
  name: setMessageCallback
  nameWithType: ModuleClient.setMessageCallback
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment*
  name: createFromEnvironment
  nameWithType: ModuleClient.createFromEnvironment
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.close()
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: close()
  nameWithType: InternalClient.close()
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.close()
  type: Method
  syntax:
    content: public void close()
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.closeNow()
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: closeNow()
  nameWithType: InternalClient.closeNow()
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.closeNow()
  type: Method
  syntax:
    content: public void closeNow()
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.getConfig()
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: getConfig()
  nameWithType: InternalClient.getConfig()
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.getConfig()
  type: Method
  summary: "<p>Getter for the device client config.</p>\r\n<p></p>"
  syntax:
    content: public DeviceClientConfig getConfig()
    return:
      type: com.microsoft.azure.sdk.iot.device.DeviceClientConfig
      description: <p>the value of the config. </p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.getProductInfo()
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: getProductInfo()
  nameWithType: InternalClient.getProductInfo()
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.getProductInfo()
  type: Method
  syntax:
    content: public ProductInfo getProductInfo()
    return:
      type: com.microsoft.azure.sdk.iot.device.ProductInfo
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.open()
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: open()
  nameWithType: InternalClient.open()
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.open()
  type: Method
  syntax:
    content: public void open()
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback,Object)
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)
  nameWithType: InternalClient.registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)
  type: Method
  summary: "<p>Registers a callback to be executed when the connection status of the device changes. The callback will be fired with a status and a reason why the device's status changed. When the callback is fired, the provided context will be provided alongside the status and reason.</p>\r\n<p>Note that the thread used to deliver this callback should not be used to call open()/closeNow() on the client that this callback belongs to. All open()/closeNow() operations should be done on a separate thread</p>\r\n<p></p>"
  syntax:
    content: public void registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)
    parameters:
    - id: callback
      type: com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeCallback
      description: <p>The callback to be fired when the connection status of the device changes. Can be null to unset this listener as long as the provided callbackContext is also null. </p>
    - id: callbackContext
      type: "79317049"
      description: >-
        <p>a context to be passed to the callback. Can be<code>null 

            </code> . </p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.sendEventBatchAsync(List<Message>,IotHubEventCallback,Object)
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: sendEventBatchAsync(List<Message> messages, IotHubEventCallback callback, Object callbackContext)
  nameWithType: InternalClient.sendEventBatchAsync(List<Message> messages, IotHubEventCallback callback, Object callbackContext)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.sendEventBatchAsync(List<Message> messages, IotHubEventCallback callback, Object callbackContext)
  type: Method
  summary: "<p>Asynchronously sends a batch of messages to the IoT Hub HTTPS messages will be sent in a single batch and MQTT and AMQP messages will be sent individually. In case of HTTPS, This API call is an all-or-nothing single HTTPS message and the callback will be triggered only once. Maximum payload size for HTTPS is 255KB</p>\r\n<p></p>"
  syntax:
    content: public void sendEventBatchAsync(List<Message> messages, IotHubEventCallback callback, Object callbackContext)
    parameters:
    - id: messages
      type: 5618da2dcom.microsoft.azure.sdk.iot.device.Messagea08ddfce
      description: <p>the list of message to be sent. </p>
    - id: callback
      type: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
      description: >-
        <p>the callback to be invoked when a response is received. Can be<code>null 

            </code> . </p>
    - id: callbackContext
      type: "79317049"
      description: >-
        <p>a context to be passed to the callback. Can be <code>null 

            </code> if no callback is provided.</p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(Set<Property>)
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: sendReportedProperties(Set<Property> reportedProperties)
  nameWithType: InternalClient.sendReportedProperties(Set<Property> reportedProperties)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(Set<Property> reportedProperties)
  type: Method
  summary: "<p>Sends reported properties</p>\r\n<p></p>"
  syntax:
    content: public void sendReportedProperties(Set<Property> reportedProperties)
    parameters:
    - id: reportedProperties
      type: b398a0f1com.microsoft.azure.sdk.iot.device.DeviceTwin.Propertya08ddfce
      description: >-
        <p>the Set for desired properties and their corresponding callback and context. Cannot be<code>null 

            </code> .</p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(Set<Property>,int)
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: sendReportedProperties(Set<Property> reportedProperties, int version)
  nameWithType: InternalClient.sendReportedProperties(Set<Property> reportedProperties, int version)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(Set<Property> reportedProperties, int version)
  type: Method
  summary: "<p>Sends reported properties</p>\r\n<p></p>"
  syntax:
    content: public void sendReportedProperties(Set<Property> reportedProperties, int version)
    parameters:
    - id: reportedProperties
      type: b398a0f1com.microsoft.azure.sdk.iot.device.DeviceTwin.Propertya08ddfce
      description: >-
        <p>the Set for desired properties and their corresponding callback and context. Cannot be<code>null 

            </code> . </p>
    - id: version
      type: f75371fa
      description: <p>the Reported property version. Cannot be negative.</p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.setOperationTimeout(long)
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: setOperationTimeout(long timeout)
  nameWithType: InternalClient.setOperationTimeout(long timeout)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.setOperationTimeout(long timeout)
  type: Method
  summary: "<p>Set the length of time, in milliseconds, that any given operation will expire in. These operations include reconnecting upon a connection drop and sending a message. </p>"
  syntax:
    content: public void setOperationTimeout(long timeout)
    parameters:
    - id: timeout
      type: 0364520f
      description: <p>the length in time, in milliseconds, until a given operation shall expire </p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.setOption(String,Object)
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: setOption(String optionName, Object value)
  nameWithType: InternalClient.setOption(String optionName, Object value)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.setOption(String optionName, Object value)
  type: Method
  summary: "<p>Sets a runtime option identified by parameter<code>optionName \r\n    </code> to<code>value \r\n    </code> .</p>\r\n<p>The options that can be set via this API are:<ul><li><p><b>SetMinimumPollingInterval</b> - this option is applicable only when the transport configured with this client is HTTP. This option specifies the interval in milliseconds between calls to the service checking for availability of new messages. The value is expected to be of type<code>long \r\n    </code> .</p></li><li><p><b>SetSendInterval</b> - this option is applicable to all protocols. This value sets the period (in milliseconds) that this SDK spawns threads to send queued messages. Even if no message is queued, this thread will be spawned.</p></li><li><p><b>SetReceiveInterval</b> - this option is applicable to all protocols in case of HTTPS protocol, this option acts the same as<code>SetMinimumPollingInterval \r\n    </code> in case of MQTT and AMQP protocols, this option specifies the interval in millisecods between spawning a thread that dequeues a message from the SDK's queue of received messages.</p></li><li><p><b>SetCertificatePath</b> - this option is applicable only when the transport configured with this client is AMQP. This option specifies the path to the certificate used to verify peer. The value is expected to be of type<code>String \r\n    </code> .</p></li><li><p><b>SetSASTokenExpiryTime</b> - this option is applicable for HTTP/ AMQP/MQTT. This option specifies the interval in seconds after which SASToken expires. If the transport is already open then setting this option will restart the transport with the updated expiry time, and will use that expiry time length for all subsequently generated sas tokens. The value is expected to be of type<code>long \r\n    </code> .</p></li><li><p><b>SetHttpsReadTimeout</b> - this option is applicable for HTTPS. This option specifies the read timeout in milliseconds per https request made by this client. By default, this value is 4 minutes. The value is expected to be of type<code>int \r\n    </code> .</p></li><li><p><b>SetHttpsConnectTimeout</b> - this option is applicable for HTTPS. This option specifies the connect timeout in milliseconds per https request made by this client. By default, this value is 0 (no connect timeout). The value is expected to be of type<code>int \r\n    </code> .</p></li><li><p><b>SetAmqpOpenAuthenticationSessionTimeout</b> - this option is applicable for AMQP with SAS token authentication. This option specifies the timeout in seconds to wait to open the authentication session. By default, this value is 20 seconds. The value is expected to be of type<code>int \r\n    </code> .</p></li><li><p><b>SetAmqpOpenDeviceSessionsTimeout</b> - this option is applicable for AMQP. This option specifies the timeout in seconds to open the device sessions. By default, this value is 60 seconds. The value is expected to be of type<code>int \r\n    </code> .</p></li></ul></p>\r\n<p></p>"
  syntax:
    content: public void setOption(String optionName, Object value)
    parameters:
    - id: optionName
      type: "26831127"
      description: <p>the option name to modify </p>
    - id: value
      type: "79317049"
      description: <p>an object of the appropriate type for the option's value </p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.setProxySettings(ProxySettings)
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: setProxySettings(ProxySettings proxySettings)
  nameWithType: InternalClient.setProxySettings(ProxySettings proxySettings)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.setProxySettings(ProxySettings proxySettings)
  type: Method
  summary: "<p>Set the proxy settings for this client to connect through. If null then any previous settings will be erased </p>"
  syntax:
    content: public void setProxySettings(ProxySettings proxySettings)
    parameters:
    - id: proxySettings
      type: com.microsoft.azure.sdk.iot.device.ProxySettings
      description: <p>the settings to be used when connecting to iothub through a proxy. If null, any previously saved settings will be erased, and no proxy will be used </p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.setRetryPolicy(RetryPolicy)
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: setRetryPolicy(RetryPolicy retryPolicy)
  nameWithType: InternalClient.setRetryPolicy(RetryPolicy retryPolicy)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.setRetryPolicy(RetryPolicy retryPolicy)
  type: Method
  summary: "<p>Sets the given retry policy on the underlying transport <a href=\"https://github.com/Azure/azure-iot-sdk-java/blob/master/device/iot-device-client/devdoc/requirement_docs/com/microsoft/azure/iothub/retryPolicy.md\">See more details about the default retry policy and about using custom retry policies here</a></p>"
  syntax:
    content: public void setRetryPolicy(RetryPolicy retryPolicy)
    parameters:
    - id: retryPolicy
      type: com.microsoft.azure.sdk.iot.device.transport.RetryPolicy
      description: <p>the new interval in milliseconds </p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(Map<Property, Pair<PropertyCallBack<String, Object>, Object>>)
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: subscribeToDesiredProperties(Map<Property, Pair<PropertyCallBack<String, Object>, Object>> onDesiredPropertyChange)
  nameWithType: InternalClient.subscribeToDesiredProperties(Map<Property, Pair<PropertyCallBack<String, Object>, Object>> onDesiredPropertyChange)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(Map<Property, Pair<PropertyCallBack<String, Object>, Object>> onDesiredPropertyChange)
  type: Method
  summary: "<p>Subscribes to desired properties.</p>\r\n<p>This client will receive a callback each time a desired property is updated. That callback will either contain the full desired properties set, or only the updated desired property depending on how the desired property was changed. IoT Hub supports a PUT and a PATCH on the twin. The PUT will cause this device client to receive the full desired properties set, and the PATCH will cause this device client to only receive the updated desired properties. Similarly, the version of each desired property will be incremented from a PUT call, and only the actually updated desired property will have its version incremented from a PATCH call. The java service client library uses the PATCH call when updated desired properties, but it builds the patch such that all properties are included in the patch. As a result, the device side will receive full twin updates, not partial updates.</p>\r\n<p>See <a href=\"https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/replacedevicetwin\">PUT</a> and <a href=\"https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/updatedevicetwin\">PATCH</a></p>\r\n<p></p>"
  syntax:
    content: public void subscribeToDesiredProperties(Map<Property, Pair<PropertyCallBack<String, Object>, Object>> onDesiredPropertyChange)
    parameters:
    - id: onDesiredPropertyChange
      type: 6110eba5com.microsoft.azure.sdk.iot.device.DeviceTwin.Propertyb33c76fccom.microsoft.azure.sdk.iot.device.DeviceTwin.Pair78504a52com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack0a3cd938
      description: >-
        <p>the Map for desired properties and their corresponding callback and context. Can be<code>null 

            </code> .</p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToTwinDesiredProperties(Map<Property, Pair<TwinPropertyCallBack, Object>>)
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: subscribeToTwinDesiredProperties(Map<Property, Pair<TwinPropertyCallBack, Object>> onDesiredPropertyChange)
  nameWithType: InternalClient.subscribeToTwinDesiredProperties(Map<Property, Pair<TwinPropertyCallBack, Object>> onDesiredPropertyChange)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToTwinDesiredProperties(Map<Property, Pair<TwinPropertyCallBack, Object>> onDesiredPropertyChange)
  type: Method
  summary: "<p>Subscribes to desired properties</p>\r\n<p></p>"
  syntax:
    content: public void subscribeToTwinDesiredProperties(Map<Property, Pair<TwinPropertyCallBack, Object>> onDesiredPropertyChange)
    parameters:
    - id: onDesiredPropertyChange
      type: 6110eba5com.microsoft.azure.sdk.iot.device.DeviceTwin.Propertyb33c76fccom.microsoft.azure.sdk.iot.device.DeviceTwin.Pair78504a52com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack7ac78387
      description: >-
        <p>the Map for desired properties and their corresponding callback and context. Can be<code>null 

            </code> .</p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: InternalClient
  nameWithType: InternalClient
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient
  type: Class
  syntax:
    content: public class InternalClient
- uid: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.yml
  name: IotHubClientProtocol
  nameWithType: IotHubClientProtocol
  fullName: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
  type: Enum
  summary: "<p>The application-layer protocol used by the client to communicate with an IoT Hub. </p>"
  syntax:
    content: public enum IotHubClientProtocol
- uid: com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException
  parent: com.microsoft.azure.sdk.iot.device.exceptions
  href: com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException.yml
  name: ModuleClientException
  nameWithType: ModuleClientException
  fullName: com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException
  type: Class
  syntax:
    content: public class ModuleClientException
- uid: com.microsoft.azure.sdk.iot.device.ClientOptions
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device.ClientOptions.yml
  name: ClientOptions
  nameWithType: ClientOptions
  fullName: com.microsoft.azure.sdk.iot.device.ClientOptions
  type: Class
  summary: "<p>Options that allow configuration of the device client instance during initialization. </p>"
  syntax:
    content: public class ClientOptions
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String,IotHubClientProtocol,ClientOptions)
  parent: com.microsoft.azure.sdk.iot.device.ModuleClient
  href: com.microsoft.azure.sdk.iot.device.ModuleClient.yml
  name: ModuleClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  nameWithType: ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  type: Constructor
  summary: "<p>Constructor for a ModuleClient instance. \r\nor</p>\r\n<p>HostName=xxxx;DeviceId=xxxx;SharedAccessKey= xxxx;moduleId=xxxx;HostNameGateway=xxxx </p>"
  syntax: *o1
- uid: com.microsoft.azure.sdk.iot.device.Message
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device.Message.yml
  name: Message
  nameWithType: Message
  fullName: com.microsoft.azure.sdk.iot.device.Message
  type: Class
  syntax:
    content: public class Message
- uid: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device.IotHubEventCallback.yml
  name: IotHubEventCallback
  nameWithType: IotHubEventCallback
  fullName: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
  type: Interface
  summary: "<p>An interface for an IoT Hub event callback.</p>\r\n<p>Developers are expected to create an implementation of this interface, and the transport will call <xref uid=\"com.microsoft.azure.sdk.iot.device.IotHubEventCallback.execute(IotHubStatusCode,Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IotHubEventCallback#execute(IotHubStatusCode, Object)\"></xref> upon receiving a response from an IoT Hub. </p>"
  syntax:
    content: public interface IotHubEventCallback
- uid: com.microsoft.azure.sdk.iot.device.edge.MethodResult
  parent: com.microsoft.azure.sdk.iot.device.edge
  href: com.microsoft.azure.sdk.iot.device.edge.MethodResult.yml
  name: MethodResult
  nameWithType: MethodResult
  fullName: com.microsoft.azure.sdk.iot.device.edge.MethodResult
  type: Class
  syntax:
    content: public class MethodResult
- uid: com.microsoft.azure.sdk.iot.device.edge.MethodRequest
  parent: com.microsoft.azure.sdk.iot.device.edge
  href: com.microsoft.azure.sdk.iot.device.edge.MethodRequest.yml
  name: MethodRequest
  nameWithType: MethodRequest
  fullName: com.microsoft.azure.sdk.iot.device.edge.MethodRequest
  type: Class
  summary: "<p>Json parser for a method request. Used to invoke methods on other devices/modules </p>"
  syntax:
    content: public class MethodRequest
- uid: com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack
  parent: com.microsoft.azure.sdk.iot.device.DeviceTwin
  href: com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack.yml
  name: PropertyCallBack<Type1,Type2>
  nameWithType: PropertyCallBack<Type1,Type2>
  fullName: com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack<Type1,Type2>
  type: Interface
  syntax:
    content: public interface PropertyCallBack<Type1,Type2>
    typeParameters:
    - id: Type1
      type: 5f35c83f
    - id: Type2
      type: be713184
- uid: com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack
  parent: com.microsoft.azure.sdk.iot.device.DeviceTwin
  href: com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack.yml
  name: TwinPropertyCallBack
  nameWithType: TwinPropertyCallBack
  fullName: com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack
  type: Interface
  syntax:
    content: public interface TwinPropertyCallBack
- uid: com.microsoft.azure.sdk.iot.device.DeviceTwin.DeviceMethodCallback
  parent: com.microsoft.azure.sdk.iot.device.DeviceTwin
  href: com.microsoft.azure.sdk.iot.device.DeviceTwin.DeviceMethodCallback.yml
  name: DeviceMethodCallback
  nameWithType: DeviceMethodCallback
  fullName: com.microsoft.azure.sdk.iot.device.DeviceTwin.DeviceMethodCallback
  type: Interface
  syntax:
    content: public interface DeviceMethodCallback
- uid: com.microsoft.azure.sdk.iot.device.ModuleClient
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device.ModuleClient.yml
  name: ModuleClient
  nameWithType: ModuleClient
  fullName: com.microsoft.azure.sdk.iot.device.ModuleClient
  type: Class
  summary: "<p>Public API for communicating from Edge Modules. A ModuleClient can be used to send messages from an Edge module to an EdgeHub or an IotHub. It can also send twin updates and listen for method calls from an EdgeHub or IotHub as well </p>"
  syntax: *o2
- uid: com.microsoft.azure.sdk.iot.device.MessageCallback
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device.MessageCallback.yml
  name: MessageCallback
  nameWithType: MessageCallback
  fullName: com.microsoft.azure.sdk.iot.device.MessageCallback
  type: Interface
  summary: "<p>An interface for an IoT Hub message callback. </p>\r\n<p>The developer is expected to create an implementation of this interface, and the transport will call <xref uid=\"com.microsoft.azure.sdk.iot.device.MessageCallback.execute(Message,Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessageCallback#execute(Message, Object)\"></xref> upon receiving a message from an IoT Hub. </p>"
  syntax:
    content: public interface MessageCallback
- uid: com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider
  parent: com.microsoft.azure.sdk.iot.device.auth
  href: com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider.yml
  name: IotHubAuthenticationProvider
  nameWithType: IotHubAuthenticationProvider
  fullName: com.microsoft.azure.sdk.iot.device.auth.IotHubAuthenticationProvider
  type: Class
  summary: "<p>Base class for providing authentication for a Device Client or Module Client, including x509 and SAS based authentication. </p>"
  syntax:
    content: public class IotHubAuthenticationProvider
- uid: com.microsoft.azure.sdk.iot.device.exceptions.TransportException
  parent: com.microsoft.azure.sdk.iot.device.exceptions
  href: com.microsoft.azure.sdk.iot.device.exceptions.TransportException.yml
  name: TransportException
  nameWithType: TransportException
  fullName: com.microsoft.azure.sdk.iot.device.exceptions.TransportException
  type: Class
  syntax:
    content: public class TransportException
- uid: com.microsoft.azure.sdk.iot.device.DeviceClientConfig
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device.DeviceClientConfig.yml
  name: DeviceClientConfig
  nameWithType: DeviceClientConfig
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClientConfig
  type: Class
  summary: "<p>Configuration settings for an IoT Hub client. Validates all user-defined settings. </p>"
  syntax:
    content: public class DeviceClientConfig
