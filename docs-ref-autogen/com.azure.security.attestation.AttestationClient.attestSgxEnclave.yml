### YamlMime:JavaMember
uid: "com.azure.security.attestation.AttestationClient.attestSgxEnclave*"
fullName: "com.azure.security.attestation.AttestationClient.attestSgxEnclave"
name: "attestSgxEnclave"
nameWithType: "AttestationClient.attestSgxEnclave"
members:
- uid: "com.azure.security.attestation.AttestationClient.attestSgxEnclave(com.azure.core.util.BinaryData)"
  fullName: "com.azure.security.attestation.AttestationClient.attestSgxEnclave(BinaryData quote)"
  name: "attestSgxEnclave(BinaryData quote)"
  nameWithType: "AttestationClient.attestSgxEnclave(BinaryData quote)"
  summary: "Attest an SGX Enclave Quote.\n\nThis method is a convenience method which attests evidence from an Intel SGX enclave with no `RuntimeData` or `InitTimeData`.\n\nIt returns an <xref uid=\"com.azure.security.attestation.models.AttestationResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationResult\"></xref> containing the claims emitted by the attestation service.\n\n```java\nAttestationResult resultWithReport = client.attestSgxEnclave(sgxEnclaveReport);\n```"
  parameters:
  - description: "SGX Quote to attest."
    name: "quote"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AttestationResult attestSgxEnclave(BinaryData quote)"
  returns:
    description: "the result of an attestation operation."
    type: "<xref href=\"com.azure.security.attestation.models.AttestationResult?alt=com.azure.security.attestation.models.AttestationResult&text=AttestationResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.AttestationClient.attestSgxEnclave(com.azure.security.attestation.models.AttestationOptions)"
  fullName: "com.azure.security.attestation.AttestationClient.attestSgxEnclave(AttestationOptions options)"
  name: "attestSgxEnclave(AttestationOptions options)"
  nameWithType: "AttestationClient.attestSgxEnclave(AttestationOptions options)"
  summary: "Attest an SGX enclave quote, specifying RunTimeData and InitTimeData. The <xref uid=\"com.azure.security.attestation.models.AttestationOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationOptions\"></xref> parameter allows the caller to specify the SGX `quote` which contains evidence from the enclave, and runtime data which allows the enclave to specify additional data from within the enclave. When calling the <xref uid=\"com.azure.security.attestation.models.AttestationOptions.setRunTimeData(com.azure.security.attestation.models.AttestationData)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationOptions#setRunTimeData(AttestationData)\"></xref> API, the caller can specify whether the attestation service should treat the runtime data as binary or as JSON when it is included in the response attestation token.\n\n**Attest an OpenEnclave enclave with attestation options.**\n\n```java\nAttestationResult result = client.attestSgxEnclave(new AttestationOptions(sgxQuote)\n     .setRunTimeData(new AttestationData(runtimeData, AttestationDataInterpretation.BINARY)));\n```"
  parameters:
  - description: "Attestation options for Intel SGX enclaves."
    name: "options"
    type: "<xref href=\"com.azure.security.attestation.models.AttestationOptions?alt=com.azure.security.attestation.models.AttestationOptions&text=AttestationOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AttestationResult attestSgxEnclave(AttestationOptions options)"
  returns:
    description: "the result of an attestation operation."
    type: "<xref href=\"com.azure.security.attestation.models.AttestationResult?alt=com.azure.security.attestation.models.AttestationResult&text=AttestationResult\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.security.attestation"
artifact: com.azure:azure-security-attestation:1.1.0
