### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.common.policy.RequestRetryOptions"
  id: "RequestRetryOptions"
  parent: "com.azure.storage.common.policy"
  children:
  - "com.azure.storage.common.policy.RequestRetryOptions.RequestRetryOptions()"
  - "com.azure.storage.common.policy.RequestRetryOptions.RequestRetryOptions(com.azure.storage.common.policy.RetryPolicyType,java.lang.Integer,java.lang.Integer,java.lang.Long,java.lang.Long,java.lang.String)"
  - "com.azure.storage.common.policy.RequestRetryOptions.calculateDelayInMs(int)"
  - "com.azure.storage.common.policy.RequestRetryOptions.getMaxRetryDelayInMs()"
  - "com.azure.storage.common.policy.RequestRetryOptions.getMaxTries()"
  - "com.azure.storage.common.policy.RequestRetryOptions.getRetryDelayInMs()"
  - "com.azure.storage.common.policy.RequestRetryOptions.getSecondaryHost()"
  - "com.azure.storage.common.policy.RequestRetryOptions.getTryTimeout()"
  langs:
  - "java"
  name: "RequestRetryOptions"
  nameWithType: "RequestRetryOptions"
  fullName: "com.azure.storage.common.policy.RequestRetryOptions"
  type: "Class"
  package: "com.azure.storage.common.policy"
  summary: "Configuration options for <xref uid=\"com.azure.storage.common.policy.RequestRetryPolicy\" data-throw-if-not-resolved=\"false\">RequestRetryPolicy</xref>."
  syntax:
    content: "public final class RequestRetryOptions"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.common.policy.RequestRetryOptions.RequestRetryOptions()"
  id: "RequestRetryOptions()"
  parent: "com.azure.storage.common.policy.RequestRetryOptions"
  langs:
  - "java"
  name: "RequestRetryOptions()"
  nameWithType: "RequestRetryOptions.RequestRetryOptions()"
  fullName: "com.azure.storage.common.policy.RequestRetryOptions.RequestRetryOptions()"
  overload: "com.azure.storage.common.policy.RequestRetryOptions.RequestRetryOptions*"
  type: "Constructor"
  package: "com.azure.storage.common.policy"
  summary: "Configures how the <xref uid=\"\" data-throw-if-not-resolved=\"false\">HttpPipeline</xref> should retry requests."
  syntax:
    content: "public RequestRetryOptions()"
- uid: "com.azure.storage.common.policy.RequestRetryOptions.RequestRetryOptions(com.azure.storage.common.policy.RetryPolicyType,java.lang.Integer,java.lang.Integer,java.lang.Long,java.lang.Long,java.lang.String)"
  id: "RequestRetryOptions(com.azure.storage.common.policy.RetryPolicyType,java.lang.Integer,java.lang.Integer,java.lang.Long,java.lang.Long,java.lang.String)"
  parent: "com.azure.storage.common.policy.RequestRetryOptions"
  langs:
  - "java"
  name: "RequestRetryOptions(RetryPolicyType retryPolicyType, Integer maxTries, Integer tryTimeout, Long retryDelayInMs, Long maxRetryDelayInMs, String secondaryHost)"
  nameWithType: "RequestRetryOptions.RequestRetryOptions(RetryPolicyType retryPolicyType, Integer maxTries, Integer tryTimeout, Long retryDelayInMs, Long maxRetryDelayInMs, String secondaryHost)"
  fullName: "com.azure.storage.common.policy.RequestRetryOptions.RequestRetryOptions(RetryPolicyType retryPolicyType, Integer maxTries, Integer tryTimeout, Long retryDelayInMs, Long maxRetryDelayInMs, String secondaryHost)"
  overload: "com.azure.storage.common.policy.RequestRetryOptions.RequestRetryOptions*"
  type: "Constructor"
  package: "com.azure.storage.common.policy"
  summary: "Configures how the <xref uid=\"\" data-throw-if-not-resolved=\"false\">HttpPipeline</xref> should retry requests."
  syntax:
    content: "public RequestRetryOptions(RetryPolicyType retryPolicyType, Integer maxTries, Integer tryTimeout, Long retryDelayInMs, Long maxRetryDelayInMs, String secondaryHost)"
    parameters:
    - id: "retryPolicyType"
      type: "com.azure.storage.common.policy.RetryPolicyType"
      description: "Optional. A <xref uid=\"com.azure.storage.common.policy.RetryPolicyType\" data-throw-if-not-resolved=\"false\">RetryPolicyType</xref> specifying the type of retry pattern to use, default\n value is <xref uid=\"com.azure.storage.common.policy.RetryPolicyType.EXPONENTIAL\" data-throw-if-not-resolved=\"false\">EXPONENTIAL</xref>."
    - id: "maxTries"
      type: "java.lang.Integer"
      description: "Optional. Maximum number of attempts an operation will be retried, default is <code>4</code>."
    - id: "tryTimeout"
      type: "java.lang.Integer"
      description: "Optional. Specified the maximum time allowed before a request is cancelled and assumed failed,\n default is <xref uid=\"\" data-throw-if-not-resolved=\"false\">Integer#MAX_VALUE</xref>.\n\n <p>This value should be based on the bandwidth available to the host machine and proximity to the Storage\n service, a good starting point may be 60 seconds per MB of anticipated payload size.</p>"
    - id: "retryDelayInMs"
      type: "java.lang.Long"
      description: "Optional. Specifies the amount of delay to use before retrying an operation, default value\n is <code>4ms</code> when <code>retryPolicyType</code> is <xref uid=\"com.azure.storage.common.policy.RetryPolicyType.EXPONENTIAL\" data-throw-if-not-resolved=\"false\">EXPONENTIAL</xref> and <code>30ms</code>\n when <code>retryPolicyType</code> is <xref uid=\"com.azure.storage.common.policy.RetryPolicyType.FIXED\" data-throw-if-not-resolved=\"false\">FIXED</xref>."
    - id: "maxRetryDelayInMs"
      type: "java.lang.Long"
      description: "Optional. Specifies the maximum delay allowed before retrying an operation, default\n value is <code>120ms</code>."
    - id: "secondaryHost"
      type: "java.lang.String"
      description: "Optional. Specified a secondary Storage account to retry requests against, default is none.\n\n <p>Before setting this understand the issues around reading stale and potentially-inconsistent data, view these\n <a href=https://docs.microsoft.com/en-us/azure/storage/common/storage-designing-ha-apps-with-ragrs>Azure Docs</a>\n for more information.</p>"
- uid: "com.azure.storage.common.policy.RequestRetryOptions.calculateDelayInMs(int)"
  id: "calculateDelayInMs(int)"
  parent: "com.azure.storage.common.policy.RequestRetryOptions"
  langs:
  - "java"
  name: "calculateDelayInMs(int tryCount)"
  nameWithType: "RequestRetryOptions.calculateDelayInMs(int tryCount)"
  fullName: "com.azure.storage.common.policy.RequestRetryOptions.calculateDelayInMs(int tryCount)"
  overload: "com.azure.storage.common.policy.RequestRetryOptions.calculateDelayInMs*"
  type: "Method"
  package: "com.azure.storage.common.policy"
  summary: "Calculates how long to delay before sending the next request."
  syntax:
    content: " long calculateDelayInMs(int tryCount)"
    parameters:
    - id: "tryCount"
      type: "int"
      description: "An <code>int</code> indicating which try we are on."
    return:
      type: "long"
      description: "A <code>long</code> value of how many milliseconds to delay."
- uid: "com.azure.storage.common.policy.RequestRetryOptions.getMaxRetryDelayInMs()"
  id: "getMaxRetryDelayInMs()"
  parent: "com.azure.storage.common.policy.RequestRetryOptions"
  langs:
  - "java"
  name: "getMaxRetryDelayInMs()"
  nameWithType: "RequestRetryOptions.getMaxRetryDelayInMs()"
  fullName: "com.azure.storage.common.policy.RequestRetryOptions.getMaxRetryDelayInMs()"
  overload: "com.azure.storage.common.policy.RequestRetryOptions.getMaxRetryDelayInMs*"
  type: "Method"
  package: "com.azure.storage.common.policy"
  syntax:
    content: "public long getMaxRetryDelayInMs()"
    return:
      type: "long"
      description: "the maximum delay in milliseconds allowed between each retry."
- uid: "com.azure.storage.common.policy.RequestRetryOptions.getMaxTries()"
  id: "getMaxTries()"
  parent: "com.azure.storage.common.policy.RequestRetryOptions"
  langs:
  - "java"
  name: "getMaxTries()"
  nameWithType: "RequestRetryOptions.getMaxTries()"
  fullName: "com.azure.storage.common.policy.RequestRetryOptions.getMaxTries()"
  overload: "com.azure.storage.common.policy.RequestRetryOptions.getMaxTries*"
  type: "Method"
  package: "com.azure.storage.common.policy"
  syntax:
    content: "public int getMaxTries()"
    return:
      type: "int"
      description: "the maximum number of retries that will be attempted."
- uid: "com.azure.storage.common.policy.RequestRetryOptions.getRetryDelayInMs()"
  id: "getRetryDelayInMs()"
  parent: "com.azure.storage.common.policy.RequestRetryOptions"
  langs:
  - "java"
  name: "getRetryDelayInMs()"
  nameWithType: "RequestRetryOptions.getRetryDelayInMs()"
  fullName: "com.azure.storage.common.policy.RequestRetryOptions.getRetryDelayInMs()"
  overload: "com.azure.storage.common.policy.RequestRetryOptions.getRetryDelayInMs*"
  type: "Method"
  package: "com.azure.storage.common.policy"
  syntax:
    content: "public long getRetryDelayInMs()"
    return:
      type: "long"
      description: "the delay in milliseconds between each retry attempt."
- uid: "com.azure.storage.common.policy.RequestRetryOptions.getSecondaryHost()"
  id: "getSecondaryHost()"
  parent: "com.azure.storage.common.policy.RequestRetryOptions"
  langs:
  - "java"
  name: "getSecondaryHost()"
  nameWithType: "RequestRetryOptions.getSecondaryHost()"
  fullName: "com.azure.storage.common.policy.RequestRetryOptions.getSecondaryHost()"
  overload: "com.azure.storage.common.policy.RequestRetryOptions.getSecondaryHost*"
  type: "Method"
  package: "com.azure.storage.common.policy"
  syntax:
    content: "public String getSecondaryHost()"
    return:
      type: "java.lang.String"
      description: "the URI of the secondary host where retries are attempted. If this is null then there is no secondary\n host and all retries are attempted against the original host."
- uid: "com.azure.storage.common.policy.RequestRetryOptions.getTryTimeout()"
  id: "getTryTimeout()"
  parent: "com.azure.storage.common.policy.RequestRetryOptions"
  langs:
  - "java"
  name: "getTryTimeout()"
  nameWithType: "RequestRetryOptions.getTryTimeout()"
  fullName: "com.azure.storage.common.policy.RequestRetryOptions.getTryTimeout()"
  overload: "com.azure.storage.common.policy.RequestRetryOptions.getTryTimeout*"
  type: "Method"
  package: "com.azure.storage.common.policy"
  syntax:
    content: "public int getTryTimeout()"
    return:
      type: "int"
      description: "the maximum time, in seconds, allowed for a request until it is considered timed out."
references:
- uid: "com.azure.storage.common.policy.RequestRetryOptions.RequestRetryOptions*"
  name: "RequestRetryOptions"
  nameWithType: "RequestRetryOptions.RequestRetryOptions"
  fullName: "com.azure.storage.common.policy.RequestRetryOptions.RequestRetryOptions"
  package: "com.azure.storage.common.policy"
- uid: "com.azure.storage.common.policy.RetryPolicyType"
  name: "RetryPolicyType"
  nameWithType: "RetryPolicyType"
  fullName: "com.azure.storage.common.policy.RetryPolicyType"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "java.lang.Long"
  spec.java:
  - uid: "java.lang.Long"
    name: "Long"
    fullName: "java.lang.Long"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.azure.storage.common.policy.RequestRetryOptions.getMaxTries*"
  name: "getMaxTries"
  nameWithType: "RequestRetryOptions.getMaxTries"
  fullName: "com.azure.storage.common.policy.RequestRetryOptions.getMaxTries"
  package: "com.azure.storage.common.policy"
- uid: "com.azure.storage.common.policy.RequestRetryOptions.getTryTimeout*"
  name: "getTryTimeout"
  nameWithType: "RequestRetryOptions.getTryTimeout"
  fullName: "com.azure.storage.common.policy.RequestRetryOptions.getTryTimeout"
  package: "com.azure.storage.common.policy"
- uid: "com.azure.storage.common.policy.RequestRetryOptions.getSecondaryHost*"
  name: "getSecondaryHost"
  nameWithType: "RequestRetryOptions.getSecondaryHost"
  fullName: "com.azure.storage.common.policy.RequestRetryOptions.getSecondaryHost"
  package: "com.azure.storage.common.policy"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "com.azure.storage.common.policy.RequestRetryOptions.getRetryDelayInMs*"
  name: "getRetryDelayInMs"
  nameWithType: "RequestRetryOptions.getRetryDelayInMs"
  fullName: "com.azure.storage.common.policy.RequestRetryOptions.getRetryDelayInMs"
  package: "com.azure.storage.common.policy"
- uid: "com.azure.storage.common.policy.RequestRetryOptions.getMaxRetryDelayInMs*"
  name: "getMaxRetryDelayInMs"
  nameWithType: "RequestRetryOptions.getMaxRetryDelayInMs"
  fullName: "com.azure.storage.common.policy.RequestRetryOptions.getMaxRetryDelayInMs"
  package: "com.azure.storage.common.policy"
- uid: "com.azure.storage.common.policy.RequestRetryOptions.calculateDelayInMs*"
  name: "calculateDelayInMs"
  nameWithType: "RequestRetryOptions.calculateDelayInMs"
  fullName: "com.azure.storage.common.policy.RequestRetryOptions.calculateDelayInMs"
  package: "com.azure.storage.common.policy"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
