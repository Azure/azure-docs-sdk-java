### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient"
fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient"
name: "DataLakeFileSystemAsyncClient"
nameWithType: "DataLakeFileSystemAsyncClient"
summary: "Client to a file system. It may only be instantiated through a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemClientBuilder\" data-throw-if-not-resolved=\"false\">DataLakeFileSystemClientBuilder</xref> or via the method <xref uid=\"com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getFileSystemAsyncClient(java.lang.String)\" data-throw-if-not-resolved=\"false\">DataLakeServiceAsyncClient#getFileSystemAsyncClient(String)</xref>. This class does not hold any state about a particular blob but is instead a convenient way of sending off appropriate requests to the resource on the service. It may also be used to construct clients for files/directories.\n\nThis client contains operations on a file system. Operations on a path are available on <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\">DataLakeFileAsyncClient</xref> and <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\">DataLakeDirectoryAsyncClient</xref> through <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileAsyncClient(java.lang.String)\" data-throw-if-not-resolved=\"false\">#getFileAsyncClient(String)</xref> and <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getDirectoryAsyncClient(java.lang.String)\" data-throw-if-not-resolved=\"false\">#getDirectoryAsyncClient(String)</xref> respectively, and operations on the service are available on <xref uid=\"com.azure.storage.file.datalake.DataLakeServiceAsyncClient\" data-throw-if-not-resolved=\"false\">DataLakeServiceAsyncClient</xref>.\n\nPlease refer to the [ Azure Docs][Azure Docs] for more information on file systems.\n\nNote this client is an async client that returns reactive responses from Spring Reactor Core project (https://projectreactor.io/). Calling the methods in this client will **NOT** start the actual network operation, until `.subscribe()` is called on the reactive response. You can simply convert one of these responses to a <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.concurrent.CompletableFuture</xref> object through <xref uid=\"reactor.core.publisher.Mono.toFuture*\" data-throw-if-not-resolved=\"false\">Mono#toFuture()</xref>.\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction?toc=%2fazure%2fstorage%2fblobs%2ftoc.json"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class DataLakeFileSystemAsyncClient"
fields:
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.ROOT_FILESYSTEM_NAME"
methods:
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.create()"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectory(java.lang.String)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectory(java.lang.String,boolean)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectoryWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile(java.lang.String)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile(java.lang.String,boolean)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFileWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.PublicAccessType)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.delete()"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectory(java.lang.String)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectoryWithResponse(java.lang.String,boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFile(java.lang.String)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFileWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteWithResponse(com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccessPolicy()"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccessPolicyWithResponse(java.lang.String)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccountName()"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getDirectoryAsyncClient(java.lang.String)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileAsyncClient(java.lang.String)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileSystemName()"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileSystemUrl()"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getHttpPipeline()"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getProperties()"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getPropertiesWithResponse(java.lang.String)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getServiceVersion()"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listPaths()"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listPaths(com.azure.storage.file.datalake.models.ListPathsOptions)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicy(com.azure.storage.file.datalake.models.PublicAccessType,java.util.List<com.azure.storage.file.datalake.models.DataLakeSignedIdentifier>)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicyWithResponse(com.azure.storage.file.datalake.models.PublicAccessType,java.util.List<com.azure.storage.file.datalake.models.DataLakeSignedIdentifier>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
- "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
type: "class"
metadata: {}
package: "com.azure.storage.file.datalake"
artifact: com.azure:azure-storage-file-datalake:12.2.0
