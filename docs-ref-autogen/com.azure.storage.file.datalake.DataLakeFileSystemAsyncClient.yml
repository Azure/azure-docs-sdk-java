### YamlMime:ManagedReference
items:
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  id: DataLakeFileSystemAsyncClient
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake
  children:
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.ROOT_FILESYSTEM_NAME
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.create()
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectory(java.lang.String)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectory(java.lang.String,boolean)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectoryWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile(java.lang.String)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile(java.lang.String,boolean)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFileWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.PublicAccessType)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.delete()
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectory(java.lang.String)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectoryWithResponse(java.lang.String,boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFile(java.lang.String)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFileWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteWithResponse(com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccessPolicy()
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccessPolicyWithResponse(java.lang.String)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccountName()
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getDirectoryAsyncClient(java.lang.String)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileAsyncClient(java.lang.String)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileSystemName()
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileSystemUrl()
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getHttpPipeline()
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getProperties()
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getPropertiesWithResponse(java.lang.String)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getServiceVersion()
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listPaths()
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listPaths(com.azure.storage.file.datalake.models.ListPathsOptions)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicy(com.azure.storage.file.datalake.models.PublicAccessType,java.util.List<com.azure.storage.file.datalake.models.DataLakeSignedIdentifier>)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicyWithResponse(com.azure.storage.file.datalake.models.PublicAccessType,java.util.List<com.azure.storage.file.datalake.models.DataLakeSignedIdentifier>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  langs:
  - java
  name: DataLakeFileSystemAsyncClient
  nameWithType: DataLakeFileSystemAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  type: Class
  package: com.azure.storage.file.datalake
  summary: >-
    Client to a file system. It may only be instantiated through a <xref uid="com.azure.storage.file.datalake.DataLakeFileSystemClientBuilder" data-throw-if-not-resolved="false">DataLakeFileSystemClientBuilder</xref> or via the method <xref uid="com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getFileSystemAsyncClient(java.lang.String)" data-throw-if-not-resolved="false">DataLakeServiceAsyncClient#getFileSystemAsyncClient(String)</xref>. This class does not hold any state about a particular blob but is instead a convenient way of sending off appropriate requests to the resource on the service. It may also be used to construct clients for files/directories.


    This client contains operations on a file system. Operations on a path are available on <xref uid="com.azure.storage.file.datalake.DataLakeFileAsyncClient" data-throw-if-not-resolved="false">DataLakeFileAsyncClient</xref> and <xref uid="com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient" data-throw-if-not-resolved="false">DataLakeDirectoryAsyncClient</xref> through <xref uid="com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileAsyncClient(java.lang.String)" data-throw-if-not-resolved="false">#getFileAsyncClient(String)</xref> and <xref uid="com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getDirectoryAsyncClient(java.lang.String)" data-throw-if-not-resolved="false">#getDirectoryAsyncClient(String)</xref> respectively, and operations on the service are available on <xref uid="com.azure.storage.file.datalake.DataLakeServiceAsyncClient" data-throw-if-not-resolved="false">DataLakeServiceAsyncClient</xref>.


    Please refer to the [ Azure Docs][Azure Docs] for more information on file systems.


    Note this client is an async client that returns reactive responses from Spring Reactor Core project (https://projectreactor.io/). Calling the methods in this client will **NOT** start the actual network operation, until `.subscribe()` is called on the reactive response. You can simply convert one of these responses to a <xref uid="" data-throw-if-not-resolved="false">java.util.concurrent.CompletableFuture</xref> object through <xref uid="reactor.core.publisher.Mono.toFuture*" data-throw-if-not-resolved="false">Mono#toFuture()</xref>.



    [Azure Docs]: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction?toc=%2fazure%2fstorage%2fblobs%2ftoc.json
  syntax:
    content: public class DataLakeFileSystemAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.DataLakeFileSystemAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.file.datalake.DataLakeServiceVersion,java.lang.String,java.lang.String,com.azure.storage.blob.BlobContainerAsyncClient)
  id: DataLakeFileSystemAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.file.datalake.DataLakeServiceVersion,java.lang.String,java.lang.String,com.azure.storage.blob.BlobContainerAsyncClient)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: DataLakeFileSystemAsyncClient(HttpPipeline pipeline, String url, DataLakeServiceVersion serviceVersion, String accountName, String fileSystemName, BlobContainerAsyncClient blobContainerAsyncClient)
  nameWithType: DataLakeFileSystemAsyncClient.DataLakeFileSystemAsyncClient(HttpPipeline pipeline, String url, DataLakeServiceVersion serviceVersion, String accountName, String fileSystemName, BlobContainerAsyncClient blobContainerAsyncClient)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.DataLakeFileSystemAsyncClient(HttpPipeline pipeline, String url, DataLakeServiceVersion serviceVersion, String accountName, String fileSystemName, BlobContainerAsyncClient blobContainerAsyncClient)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.DataLakeFileSystemAsyncClient*
  type: Constructor
  package: com.azure.storage.file.datalake
  summary: Package-private constructor for use by <xref uid="com.azure.storage.file.datalake.DataLakeFileSystemClientBuilder" data-throw-if-not-resolved="false">DataLakeFileSystemClientBuilder</xref>.
  syntax:
    content: " DataLakeFileSystemAsyncClient(HttpPipeline pipeline, String url, DataLakeServiceVersion serviceVersion, String accountName, String fileSystemName, BlobContainerAsyncClient blobContainerAsyncClient)"
    parameters:
    - id: pipeline
      type: com.azure.core.http.HttpPipeline
      description: The pipeline used to send and receive service requests.
    - id: url
      type: java.lang.String
      description: The endpoint where to send service requests.
    - id: serviceVersion
      type: com.azure.storage.file.datalake.DataLakeServiceVersion
      description: The version of the service to receive requests.
    - id: accountName
      type: java.lang.String
      description: The storage account name.
    - id: fileSystemName
      type: java.lang.String
      description: The file system name.
    - id: blobContainerAsyncClient
      type: com.azure.storage.blob.BlobContainerAsyncClient
      description: The underlying <xref uid="com.azure.storage.blob.BlobContainerAsyncClient" data-throw-if-not-resolved="false">BlobContainerAsyncClient</xref>
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.ROOT_FILESYSTEM_NAME
  id: ROOT_FILESYSTEM_NAME
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: ROOT_FILESYSTEM_NAME
  nameWithType: DataLakeFileSystemAsyncClient.ROOT_FILESYSTEM_NAME
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.ROOT_FILESYSTEM_NAME
  type: Field
  package: com.azure.storage.file.datalake
  syntax:
    content: public static final String ROOT_FILESYSTEM_NAME
    return:
      type: java.lang.String
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.create()
  id: create()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: create()
  nameWithType: DataLakeFileSystemAsyncClient.create()
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.create()
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.create*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a new file system within a storage account. If a file system with the same name already exists, the operation fails. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.create().subscribe(
         response -> System.out.printf("Create completed%n"),
         error -> System.out.printf("Error while creating file system %s%n", error));
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container
  syntax:
    content: public Mono<Void> create()
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A reactive response signalling completion.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectory(java.lang.String)
  id: createDirectory(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: createDirectory(String directoryName)
  nameWithType: DataLakeFileSystemAsyncClient.createDirectory(String directoryName)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectory(String directoryName)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectory*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a new directory within a file system. By default this method will not overwrite an existing directory. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    Mono<DataLakeDirectoryAsyncClient> directoryClient = client.createDirectory(directoryName);

    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create
  syntax:
    content: public Mono<DataLakeDirectoryAsyncClient> createDirectory(String directoryName)
    parameters:
    - id: directoryName
      type: java.lang.String
      description: Name of the directory to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient" data-throw-if-not-resolved="false">DataLakeDirectoryAsyncClient</xref> used to interact with the directory
         created.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectory(java.lang.String,boolean)
  id: createDirectory(java.lang.String,boolean)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: createDirectory(String directoryName, boolean overwrite)
  nameWithType: DataLakeFileSystemAsyncClient.createDirectory(String directoryName, boolean overwrite)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectory(String directoryName, boolean overwrite)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectory*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a new directory within a file system. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    boolean overwrite = false; /* Default value. */
     Mono<DataLakeDirectoryAsyncClient> dClient = client.createDirectory(directoryName, overwrite);
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create
  syntax:
    content: public Mono<DataLakeDirectoryAsyncClient> createDirectory(String directoryName, boolean overwrite)
    parameters:
    - id: directoryName
      type: java.lang.String
      description: Name of the directory to create.
    - id: overwrite
      type: boolean
      description: Whether or not to overwrite, should a directory exist.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient" data-throw-if-not-resolved="false">DataLakeDirectoryAsyncClient</xref> used to interact with the directory
         created.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectoryWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: createDirectoryWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: createDirectoryWithResponse(String directoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  nameWithType: DataLakeFileSystemAsyncClient.createDirectoryWithResponse(String directoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectoryWithResponse(String directoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectoryWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a new directory within a file system. If a directory with the same name already exists, the directory will be overwritten. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    PathHttpHeaders httpHeaders = new PathHttpHeaders()
         .setContentLanguage("en-US")
         .setContentType("binary");
     DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()
         .setLeaseId(leaseId);
     String permissions = "permissions";
     String umask = "umask";
     Mono<Response<DataLakeDirectoryAsyncClient>> newDirectoryClient = client.createDirectoryWithResponse(
         directoryName, permissions, umask, httpHeaders, Collections.singletonMap("metadata", "value"),
         requestConditions);
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create
  syntax:
    content: public Mono<Response<DataLakeDirectoryAsyncClient>> createDirectoryWithResponse(String directoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
    parameters:
    - id: directoryName
      type: java.lang.String
      description: Name of the directory to create.
    - id: permissions
      type: java.lang.String
      description: POSIX access permissions for the directory owner, the directory owning group, and others.
    - id: umask
      type: java.lang.String
      description: Restricts permissions of the directory to be created.
    - id: headers
      type: com.azure.storage.file.datalake.models.PathHttpHeaders
      description: <xref uid="com.azure.storage.file.datalake.models.PathHttpHeaders" data-throw-if-not-resolved="false">PathHttpHeaders</xref>
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the directory.
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains a <xref uid="com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient" data-throw-if-not-resolved="false">DataLakeDirectoryAsyncClient</xref> used to interact with the directory created.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile(java.lang.String)
  id: createFile(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: createFile(String fileName)
  nameWithType: DataLakeFileSystemAsyncClient.createFile(String fileName)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile(String fileName)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a new file within a file system. By default this method will not overwrite an existing file. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    Mono<DataLakeFileAsyncClient> fileClient = client.createFile(fileName);

    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create
  syntax:
    content: public Mono<DataLakeFileAsyncClient> createFile(String fileName)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.datalake.DataLakeFileAsyncClient>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.storage.file.datalake.DataLakeFileAsyncClient" data-throw-if-not-resolved="false">DataLakeFileAsyncClient</xref> used to interact with the file created.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile(java.lang.String,boolean)
  id: createFile(java.lang.String,boolean)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: createFile(String fileName, boolean overwrite)
  nameWithType: DataLakeFileSystemAsyncClient.createFile(String fileName, boolean overwrite)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile(String fileName, boolean overwrite)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a new file within a file system. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    boolean overwrite = false; /* Default value. */
     Mono<DataLakeFileAsyncClient> fClient = client.createFile(fileName, overwrite);
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create
  syntax:
    content: public Mono<DataLakeFileAsyncClient> createFile(String fileName, boolean overwrite)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file to create.
    - id: overwrite
      type: boolean
      description: Whether or not to overwrite, should a file exist.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.datalake.DataLakeFileAsyncClient>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.storage.file.datalake.DataLakeFileAsyncClient" data-throw-if-not-resolved="false">DataLakeFileAsyncClient</xref> used to interact with the file created.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFileWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: createFileWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  nameWithType: DataLakeFileSystemAsyncClient.createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFileWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a new file within a file system. If a file with the same name already exists, the file will be overwritten. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    PathHttpHeaders httpHeaders = new PathHttpHeaders()
         .setContentLanguage("en-US")
         .setContentType("binary");
     DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()
         .setLeaseId(leaseId);
     String permissions = "permissions";
     String umask = "umask";
     Mono<Response<DataLakeFileAsyncClient>> newFileClient = client.createFileWithResponse(fileName, permissions,
         umask, httpHeaders, Collections.singletonMap("metadata", "value"), requestConditions);
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create
  syntax:
    content: public Mono<Response<DataLakeFileAsyncClient>> createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file to create.
    - id: permissions
      type: java.lang.String
      description: POSIX access permissions for the file owner, the file owning group, and others.
    - id: umask
      type: java.lang.String
      description: Restricts permissions of the file to be created.
    - id: headers
      type: com.azure.storage.file.datalake.models.PathHttpHeaders
      description: <xref uid="com.azure.storage.file.datalake.models.PathHttpHeaders" data-throw-if-not-resolved="false">PathHttpHeaders</xref>
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the file.
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.DataLakeFileAsyncClient>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains a <xref uid="com.azure.storage.file.datalake.DataLakeFileAsyncClient" data-throw-if-not-resolved="false">DataLakeFileAsyncClient</xref> used to interact with the file created.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.PublicAccessType)
  id: createWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.PublicAccessType)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: createWithResponse(Map<String,String> metadata, PublicAccessType accessType)
  nameWithType: DataLakeFileSystemAsyncClient.createWithResponse(Map<String,String> metadata, PublicAccessType accessType)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createWithResponse(Map<String,String> metadata, PublicAccessType accessType)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a new file system within a storage account. If a file system with the same name already exists, the operation fails. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    Map<String, String> metadata = Collections.singletonMap("metadata", "value");
     client.createWithResponse(metadata, PublicAccessType.CONTAINER).subscribe(response ->
         System.out.printf("Create completed with status %d%n", response.getStatusCode()));
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container
  syntax:
    content: public Mono<Response<Void>> createWithResponse(Map<String,String> metadata, PublicAccessType accessType)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the file system.
    - id: accessType
      type: com.azure.storage.file.datalake.models.PublicAccessType
      description: >-
        Specifies how the data in this file system is available to the public. See the
         x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A reactive response signalling completion.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.delete()
  id: delete()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: delete()
  nameWithType: DataLakeFileSystemAsyncClient.delete()
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.delete()
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.delete*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Marks the specified file system for deletion. The file system and any files/directories contained within it are later deleted during garbage collection. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.delete().subscribe(
         response -> System.out.printf("Delete completed%n"),
         error -> System.out.printf("Delete failed: %s%n", error));
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container
  syntax:
    content: public Mono<Void> delete()
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A reactive response signalling completion.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectory(java.lang.String)
  id: deleteDirectory(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: deleteDirectory(String directoryName)
  nameWithType: DataLakeFileSystemAsyncClient.deleteDirectory(String directoryName)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectory(String directoryName)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectory*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Deletes the specified directory in the file system. If the directory doesn't exist the operation fails. For more information see the [Azure Docs][].


    **Code Samples**


    ```java

    client.deleteDirectory(directoryName).subscribe(response ->
         System.out.println("Delete request completed"));
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete
  syntax:
    content: public Mono<Void> deleteDirectory(String directoryName)
    parameters:
    - id: directoryName
      type: java.lang.String
      description: Name of the directory to delete.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A reactive response signalling completion.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectoryWithResponse(java.lang.String,boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: deleteDirectoryWithResponse(java.lang.String,boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: deleteDirectoryWithResponse(String directoryName, boolean recursive, DataLakeRequestConditions requestConditions)
  nameWithType: DataLakeFileSystemAsyncClient.deleteDirectoryWithResponse(String directoryName, boolean recursive, DataLakeRequestConditions requestConditions)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectoryWithResponse(String directoryName, boolean recursive, DataLakeRequestConditions requestConditions)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectoryWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Deletes the specified directory in the file system. If the directory doesn't exist the operation fails. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n boolean recursive = false; // Default value\n \n client.deleteDirectoryWithResponse(directoryName, recursive, requestConditions)\n     .subscribe(response -> System.out.println(\"Delete request completed\"));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete"
  syntax:
    content: public Mono<Response<Void>> deleteDirectoryWithResponse(String directoryName, boolean recursive, DataLakeRequestConditions requestConditions)
    parameters:
    - id: directoryName
      type: java.lang.String
      description: Name of the directory to delete.
    - id: recursive
      type: boolean
      description: Whether or not to delete all paths beneath the directory.
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing containing status code and HTTP headers
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFile(java.lang.String)
  id: deleteFile(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: deleteFile(String fileName)
  nameWithType: DataLakeFileSystemAsyncClient.deleteFile(String fileName)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFile(String fileName)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFile*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Deletes the specified file in the file system. If the file doesn't exist the operation fails. For more information see the [Azure Docs][].


    **Code Samples**


    ```java

    client.deleteFile(fileName).subscribe(response ->
         System.out.println("Delete request completed"));
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete
  syntax:
    content: public Mono<Void> deleteFile(String fileName)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file to delete.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A reactive response signalling completion.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFileWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: deleteFileWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: deleteFileWithResponse(String fileName, DataLakeRequestConditions requestConditions)
  nameWithType: DataLakeFileSystemAsyncClient.deleteFileWithResponse(String fileName, DataLakeRequestConditions requestConditions)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFileWithResponse(String fileName, DataLakeRequestConditions requestConditions)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFileWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Deletes the specified file in the file system. If the file doesn't exist the operation fails. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n \n client.deleteFileWithResponse(fileName, requestConditions)\n     .subscribe(response -> System.out.println(\"Delete request completed\"));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete"
  syntax:
    content: public Mono<Response<Void>> deleteFileWithResponse(String fileName, DataLakeRequestConditions requestConditions)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file to delete.
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing containing status code and HTTP headers
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteWithResponse(com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: deleteWithResponse(com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: deleteWithResponse(DataLakeRequestConditions requestConditions)
  nameWithType: DataLakeFileSystemAsyncClient.deleteWithResponse(DataLakeRequestConditions requestConditions)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteWithResponse(DataLakeRequestConditions requestConditions)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Marks the specified file system for deletion. The file system and any files/directories contained within it are later deleted during garbage collection. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n \n client.deleteWithResponse(requestConditions).subscribe(response ->\n     System.out.printf(\"Delete completed with status %d%n\", response.getStatusCode()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
  syntax:
    content: public Mono<Response<Void>> deleteWithResponse(DataLakeRequestConditions requestConditions)
    parameters:
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A reactive response signalling completion.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues)
  id: generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)
  nameWithType: DataLakeFileSystemAsyncClient.generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateSas*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Generates a service SAS for the file system using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">DataLakeServiceSasSignatureValues</xref> Note : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\">StorageSharedKeyCredential</xref>\n\nSee <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">DataLakeServiceSasSignatureValues</xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n FileSystemSasPermission permission = new FileSystemSasPermission().setReadPermission(true);\n \n DataLakeServiceSasSignatureValues values = new DataLakeServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n \n client.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  syntax:
    content: public String generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)
    parameters:
    - id: dataLakeServiceSasSignatureValues
      type: com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues
      description: <xref uid="com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues" data-throw-if-not-resolved="false">DataLakeServiceSasSignatureValues</xref>
    return:
      type: java.lang.String
      description: A <code>String</code> representing all SAS query parameters.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey)
  id: generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)
  nameWithType: DataLakeFileSystemAsyncClient.generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateUserDelegationSas*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Generates a user delegation SAS for the file system using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">DataLakeServiceSasSignatureValues</xref>.\n\nSee <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">DataLakeServiceSasSignatureValues</xref> for more information on how to construct a user delegation SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime myExpiryTime = OffsetDateTime.now().plusDays(1);\n FileSystemSasPermission myPermission = new FileSystemSasPermission().setReadPermission(true);\n \n DataLakeServiceSasSignatureValues myValues = new DataLakeServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n \n client.generateUserDelegationSas(values, userDelegationKey);\n```"
  syntax:
    content: public String generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)
    parameters:
    - id: dataLakeServiceSasSignatureValues
      type: com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues
      description: <xref uid="com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues" data-throw-if-not-resolved="false">DataLakeServiceSasSignatureValues</xref>
    - id: userDelegationKey
      type: com.azure.storage.file.datalake.models.UserDelegationKey
      description: A <xref uid="com.azure.storage.file.datalake.models.UserDelegationKey" data-throw-if-not-resolved="false">UserDelegationKey</xref> object used to sign the SAS values.
    return:
      type: java.lang.String
      description: A <code>String</code> representing all SAS query parameters.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccessPolicy()
  id: getAccessPolicy()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: getAccessPolicy()
  nameWithType: DataLakeFileSystemAsyncClient.getAccessPolicy()
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccessPolicy()
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccessPolicy*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Returns the file system's permissions. The permissions indicate whether file system's paths may be accessed publicly. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.getAccessPolicy().subscribe(response -> {\n     System.out.printf(\"Data Lake Access Type: %s%n\", response.getDataLakeAccessType());\n \n     for (DataLakeSignedIdentifier identifier : response.getIdentifiers()) {\n         System.out.printf(\"Identifier Name: %s, Permissions %s%n\",\n             identifier.getId(),\n             identifier.getAccessPolicy().getPermissions());\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-container-acl"
  syntax:
    content: public Mono<FileSystemAccessPolicies> getAccessPolicy()
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.FileSystemAccessPolicies>
      description: A reactive response containing the file system access policy.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccessPolicyWithResponse(java.lang.String)
  id: getAccessPolicyWithResponse(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: getAccessPolicyWithResponse(String leaseId)
  nameWithType: DataLakeFileSystemAsyncClient.getAccessPolicyWithResponse(String leaseId)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccessPolicyWithResponse(String leaseId)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccessPolicyWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Returns the file system's permissions. The permissions indicate whether file system's paths may be accessed publicly. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.getAccessPolicyWithResponse(leaseId).subscribe(response -> {\n     System.out.printf(\"Data Lake Access Type: %s%n\", response.getValue().getDataLakeAccessType());\n \n     for (DataLakeSignedIdentifier identifier : response.getValue().getIdentifiers()) {\n         System.out.printf(\"Identifier Name: %s, Permissions %s%n\",\n             identifier.getId(),\n             identifier.getAccessPolicy().getPermissions());\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-container-acl"
  syntax:
    content: public Mono<Response<FileSystemAccessPolicies>> getAccessPolicyWithResponse(String leaseId)
    parameters:
    - id: leaseId
      type: java.lang.String
      description: The lease ID the active lease on the file system must match.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.FileSystemAccessPolicies>>
      description: A reactive response containing the file system access policy.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccountName()
  id: getAccountName()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: getAccountName()
  nameWithType: DataLakeFileSystemAsyncClient.getAccountName()
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccountName()
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccountName*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Get associated account name.
  syntax:
    content: public String getAccountName()
    return:
      type: java.lang.String
      description: account name associated with this storage resource.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getDirectoryAsyncClient(java.lang.String)
  id: getDirectoryAsyncClient(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: getDirectoryAsyncClient(String directoryName)
  nameWithType: DataLakeFileSystemAsyncClient.getDirectoryAsyncClient(String directoryName)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getDirectoryAsyncClient(String directoryName)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getDirectoryAsyncClient*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Initializes a new DataLakeDirectoryAsyncClient object by concatenating directoryName to the end of DataLakeFileSystemAsyncClient's URL. The new DataLakeDirectoryAsyncClient uses the same request policy pipeline as the DataLakeFileSystemAsyncClient.


    **Code Samples**


    ```java

    DataLakeDirectoryAsyncClient dataLakeDirectoryAsyncClient = client.getDirectoryAsyncClient(directoryName);

    ```
  syntax:
    content: public DataLakeDirectoryAsyncClient getDirectoryAsyncClient(String directoryName)
    parameters:
    - id: directoryName
      type: java.lang.String
      description: A <code>String</code> representing the name of the directory.
    return:
      type: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
      description: >-
        A new <xref uid="com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient" data-throw-if-not-resolved="false">DataLakeDirectoryAsyncClient</xref> object which references the directory with the specified name
         in this file system.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileAsyncClient(java.lang.String)
  id: getFileAsyncClient(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: getFileAsyncClient(String fileName)
  nameWithType: DataLakeFileSystemAsyncClient.getFileAsyncClient(String fileName)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileAsyncClient(String fileName)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileAsyncClient*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Initializes a new DataLakeFileAsyncClient object by concatenating fileName to the end of DataLakeFileSystemAsyncClient's URL. The new DataLakeFileAsyncClient uses the same request policy pipeline as the DataLakeFileSystemAsyncClient.


    **Code Samples**


    ```java

    DataLakeFileAsyncClient dataLakeFileAsyncClient = client.getFileAsyncClient(fileName);

    ```
  syntax:
    content: public DataLakeFileAsyncClient getFileAsyncClient(String fileName)
    parameters:
    - id: fileName
      type: java.lang.String
      description: A <code>String</code> representing the name of the file.
    return:
      type: com.azure.storage.file.datalake.DataLakeFileAsyncClient
      description: >-
        A new <xref uid="com.azure.storage.file.datalake.DataLakeFileAsyncClient" data-throw-if-not-resolved="false">DataLakeFileAsyncClient</xref> object which references the file with the specified name in this
         file system.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileSystemName()
  id: getFileSystemName()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: getFileSystemName()
  nameWithType: DataLakeFileSystemAsyncClient.getFileSystemName()
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileSystemName()
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileSystemName*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Get the file system name.


    **Code Samples**


    ```java

    String fileSystemName = client.getFileSystemName();
     System.out.println("The name of the file system is " + fileSystemName);
    ```
  syntax:
    content: public String getFileSystemName()
    return:
      type: java.lang.String
      description: The name of file system.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileSystemUrl()
  id: getFileSystemUrl()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: getFileSystemUrl()
  nameWithType: DataLakeFileSystemAsyncClient.getFileSystemUrl()
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileSystemUrl()
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileSystemUrl*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Gets the URL of the file system represented by this client.
  syntax:
    content: public String getFileSystemUrl()
    return:
      type: java.lang.String
      description: the URL.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getHttpPipeline()
  id: getHttpPipeline()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: getHttpPipeline()
  nameWithType: DataLakeFileSystemAsyncClient.getHttpPipeline()
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getHttpPipeline()
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getHttpPipeline*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Gets the <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">HttpPipeline</xref> powering this client.
  syntax:
    content: public HttpPipeline getHttpPipeline()
    return:
      type: com.azure.core.http.HttpPipeline
      description: The pipeline.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getProperties()
  id: getProperties()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: getProperties()
  nameWithType: DataLakeFileSystemAsyncClient.getProperties()
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getProperties()
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getProperties*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Returns the file system's metadata and system properties. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.getProperties().subscribe(response ->
         System.out.printf("Public Access Type: %s, Legal Hold? %b, Immutable? %b%n",
             response.getDataLakePublicAccess(),
             response.hasLegalHold(),
             response.hasImmutabilityPolicy()));
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-container-metadata
  syntax:
    content: public Mono<FileSystemProperties> getProperties()
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.FileSystemProperties>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> containing the
         file system properties.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getPropertiesWithResponse(java.lang.String)
  id: getPropertiesWithResponse(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: getPropertiesWithResponse(String leaseId)
  nameWithType: DataLakeFileSystemAsyncClient.getPropertiesWithResponse(String leaseId)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getPropertiesWithResponse(String leaseId)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getPropertiesWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Returns the file system's metadata and system properties. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.getPropertiesWithResponse(leaseId).subscribe(response ->
         System.out.printf("Public Access Type: %s, Legal Hold? %b, Immutable? %b%n",
             response.getValue().getDataLakePublicAccess(),
             response.getValue().hasLegalHold(),
             response.getValue().hasImmutabilityPolicy()));
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-container-metadata
  syntax:
    content: public Mono<Response<FileSystemProperties>> getPropertiesWithResponse(String leaseId)
    parameters:
    - id: leaseId
      type: java.lang.String
      description: The lease ID the active lease on the file system must match.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.FileSystemProperties>>
      description: A reactive response containing the file system properties.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getServiceVersion()
  id: getServiceVersion()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: getServiceVersion()
  nameWithType: DataLakeFileSystemAsyncClient.getServiceVersion()
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getServiceVersion()
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getServiceVersion*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Gets the service version the client is using.
  syntax:
    content: public DataLakeServiceVersion getServiceVersion()
    return:
      type: com.azure.storage.file.datalake.DataLakeServiceVersion
      description: the service version the client is using.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listPaths()
  id: listPaths()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: listPaths()
  nameWithType: DataLakeFileSystemAsyncClient.listPaths()
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listPaths()
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listPaths*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Returns a reactive Publisher emitting all the files/directories in this account lazily as needed. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.listPaths().subscribe(path -> System.out.printf("Name: %s%n", path.getName()));

    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/filesystem/list
  syntax:
    content: public PagedFlux<PathItem> listPaths()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.datalake.models.PathItem>
      description: A reactive response emitting the list of files/directories.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listPaths(com.azure.storage.file.datalake.models.ListPathsOptions)
  id: listPaths(com.azure.storage.file.datalake.models.ListPathsOptions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: listPaths(ListPathsOptions options)
  nameWithType: DataLakeFileSystemAsyncClient.listPaths(ListPathsOptions options)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listPaths(ListPathsOptions options)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listPaths*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Returns a reactive Publisher emitting all the files/directories in this account lazily as needed. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nListPathsOptions options = new ListPathsOptions()\n     .setPath(\"PathNamePrefixToMatch\")\n     .setMaxResults(10);\n \n client.listPaths(options).subscribe(path -> System.out.printf(\"Name: %s%n\", path.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/filesystem/list"
  syntax:
    content: public PagedFlux<PathItem> listPaths(ListPathsOptions options)
    parameters:
    - id: options
      type: com.azure.storage.file.datalake.models.ListPathsOptions
      description: A <xref uid="com.azure.storage.file.datalake.models.ListPathsOptions" data-throw-if-not-resolved="false">ListPathsOptions</xref> which specifies what data should be returned by the service.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.datalake.models.PathItem>
      description: A reactive response emitting the list of files/directories.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicy(com.azure.storage.file.datalake.models.PublicAccessType,java.util.List<com.azure.storage.file.datalake.models.DataLakeSignedIdentifier>)
  id: setAccessPolicy(com.azure.storage.file.datalake.models.PublicAccessType,java.util.List<com.azure.storage.file.datalake.models.DataLakeSignedIdentifier>)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: setAccessPolicy(PublicAccessType accessType, List<DataLakeSignedIdentifier> identifiers)
  nameWithType: DataLakeFileSystemAsyncClient.setAccessPolicy(PublicAccessType accessType, List<DataLakeSignedIdentifier> identifiers)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicy(PublicAccessType accessType, List<DataLakeSignedIdentifier> identifiers)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicy*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Sets the file system's permissions. The permissions indicate whether paths in a file system may be accessed publicly. Note that, for each signed identifier, we will truncate the start and expiry times to the nearest second to ensure the time formatting is compatible with the service. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeSignedIdentifier identifier = new DataLakeSignedIdentifier()\n     .setId(\"name\")\n     .setAccessPolicy(new DataLakeAccessPolicy()\n         .setStartsOn(OffsetDateTime.now())\n         .setExpiresOn(OffsetDateTime.now().plusDays(7))\n         .setPermissions(\"permissionString\"));\n \n client.setAccessPolicy(PublicAccessType.CONTAINER, Collections.singletonList(identifier)).subscribe(\n     response -> System.out.printf(\"Set access policy completed%n\"),\n     error -> System.out.printf(\"Set access policy failed: %s%n\", error));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-container-acl"
  syntax:
    content: public Mono<Void> setAccessPolicy(PublicAccessType accessType, List<DataLakeSignedIdentifier> identifiers)
    parameters:
    - id: accessType
      type: com.azure.storage.file.datalake.models.PublicAccessType
      description: >-
        Specifies how the data in this file system is available to the public. See the
         x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access.
    - id: identifiers
      type: java.util.List<com.azure.storage.file.datalake.models.DataLakeSignedIdentifier>
      description: >-
        A list of <xref uid="com.azure.storage.file.datalake.models.DataLakeSignedIdentifier" data-throw-if-not-resolved="false">DataLakeSignedIdentifier</xref> objects that specify the permissions for the file
         system.
         Please see
         <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy">here</a>
         for more information. Passing null will clear all access policies.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A reactive response signalling completion.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicyWithResponse(com.azure.storage.file.datalake.models.PublicAccessType,java.util.List<com.azure.storage.file.datalake.models.DataLakeSignedIdentifier>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: setAccessPolicyWithResponse(com.azure.storage.file.datalake.models.PublicAccessType,java.util.List<com.azure.storage.file.datalake.models.DataLakeSignedIdentifier>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: setAccessPolicyWithResponse(PublicAccessType accessType, List<DataLakeSignedIdentifier> identifiers, DataLakeRequestConditions requestConditions)
  nameWithType: DataLakeFileSystemAsyncClient.setAccessPolicyWithResponse(PublicAccessType accessType, List<DataLakeSignedIdentifier> identifiers, DataLakeRequestConditions requestConditions)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicyWithResponse(PublicAccessType accessType, List<DataLakeSignedIdentifier> identifiers, DataLakeRequestConditions requestConditions)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicyWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Sets the file system's permissions. The permissions indicate whether paths in a file system may be accessed publicly. Note that, for each signed identifier, we will truncate the start and expiry times to the nearest second to ensure the time formatting is compatible with the service. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeSignedIdentifier identifier = new DataLakeSignedIdentifier()\n     .setId(\"name\")\n     .setAccessPolicy(new DataLakeAccessPolicy()\n         .setStartsOn(OffsetDateTime.now())\n         .setExpiresOn(OffsetDateTime.now().plusDays(7))\n         .setPermissions(\"permissionString\"));\n \n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n \n client.setAccessPolicyWithResponse(PublicAccessType.CONTAINER, Collections.singletonList(identifier), requestConditions)\n     .subscribe(response ->\n         System.out.printf(\"Set access policy completed with status %d%n\", response.getStatusCode()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-container-acl"
  syntax:
    content: public Mono<Response<Void>> setAccessPolicyWithResponse(PublicAccessType accessType, List<DataLakeSignedIdentifier> identifiers, DataLakeRequestConditions requestConditions)
    parameters:
    - id: accessType
      type: com.azure.storage.file.datalake.models.PublicAccessType
      description: >-
        Specifies how the data in this file system is available to the public. See the
         x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access.
    - id: identifiers
      type: java.util.List<com.azure.storage.file.datalake.models.DataLakeSignedIdentifier>
      description: >-
        A list of <xref uid="com.azure.storage.file.datalake.models.DataLakeSignedIdentifier" data-throw-if-not-resolved="false">DataLakeSignedIdentifier</xref> objects that specify the permissions for the file
         system.
         Please see
         <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy">here</a>
         for more information. Passing null will clear all access policies.
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A reactive response signalling completion.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  id: setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: setMetadata(Map<String,String> metadata)
  nameWithType: DataLakeFileSystemAsyncClient.setMetadata(Map<String,String> metadata)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setMetadata(Map<String,String> metadata)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setMetadata*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Sets the file system's metadata. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    Map<String, String> metadata = Collections.singletonMap("metadata", "value");
     client.setMetadata(metadata).subscribe(
         response -> System.out.printf("Set metadata completed%n"),
         error -> System.out.printf("Set metadata failed: %s%n", error));
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-container-metadata
  syntax:
    content: public Mono<Void> setMetadata(Map<String,String> metadata)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the file system.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A reactive response signalling completion.
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  langs:
  - java
  name: setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  nameWithType: DataLakeFileSystemAsyncClient.setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  overload: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setMetadataWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Sets the file systems's metadata. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n \n client.setMetadataWithResponse(metadata, requestConditions).subscribe(response ->\n     System.out.printf(\"Set metadata completed with status %d%n\", response.getStatusCode()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-container-metadata"
  syntax:
    content: public Mono<Response<Void>> setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the file system.
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains signalling
         completion.
references:
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.file.datalake.DataLakeServiceVersion
  name: DataLakeServiceVersion
  nameWithType: DataLakeServiceVersion
  fullName: com.azure.storage.file.datalake.DataLakeServiceVersion
- uid: com.azure.storage.blob.BlobContainerAsyncClient
  spec.java:
  - uid: com.azure.storage.blob.BlobContainerAsyncClient
    name: BlobContainerAsyncClient
    fullName: com.azure.storage.blob.BlobContainerAsyncClient
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.DataLakeFileSystemAsyncClient*
  name: DataLakeFileSystemAsyncClient
  nameWithType: DataLakeFileSystemAsyncClient.DataLakeFileSystemAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.DataLakeFileSystemAsyncClient
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeFileAsyncClient
  name: DataLakeFileAsyncClient
  nameWithType: DataLakeFileAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakeFileAsyncClient
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileAsyncClient*
  name: getFileAsyncClient
  nameWithType: DataLakeFileSystemAsyncClient.getFileAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileAsyncClient
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  name: DataLakeDirectoryAsyncClient
  nameWithType: DataLakeDirectoryAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getDirectoryAsyncClient*
  name: getDirectoryAsyncClient
  nameWithType: DataLakeFileSystemAsyncClient.getDirectoryAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getDirectoryAsyncClient
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileSystemUrl*
  name: getFileSystemUrl
  nameWithType: DataLakeFileSystemAsyncClient.getFileSystemUrl
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileSystemUrl
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileSystemName*
  name: getFileSystemName
  nameWithType: DataLakeFileSystemAsyncClient.getFileSystemName
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getFileSystemName
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccountName*
  name: getAccountName
  nameWithType: DataLakeFileSystemAsyncClient.getAccountName
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccountName
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getServiceVersion*
  name: getServiceVersion
  nameWithType: DataLakeFileSystemAsyncClient.getServiceVersion
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getServiceVersion
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getHttpPipeline*
  name: getHttpPipeline
  nameWithType: DataLakeFileSystemAsyncClient.getHttpPipeline
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getHttpPipeline
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.create*
  name: create
  nameWithType: DataLakeFileSystemAsyncClient.create
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.create
  package: com.azure.storage.file.datalake
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.models.PublicAccessType
  name: PublicAccessType
  nameWithType: PublicAccessType
  fullName: com.azure.storage.file.datalake.models.PublicAccessType
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createWithResponse*
  name: createWithResponse
  nameWithType: DataLakeFileSystemAsyncClient.createWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.delete*
  name: delete
  nameWithType: DataLakeFileSystemAsyncClient.delete
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.delete
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.models.DataLakeRequestConditions
  name: DataLakeRequestConditions
  nameWithType: DataLakeRequestConditions
  fullName: com.azure.storage.file.datalake.models.DataLakeRequestConditions
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteWithResponse*
  name: deleteWithResponse
  nameWithType: DataLakeFileSystemAsyncClient.deleteWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteWithResponse
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.FileSystemProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.FileSystemProperties
    name: FileSystemProperties
    fullName: com.azure.storage.file.datalake.models.FileSystemProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getProperties*
  name: getProperties
  nameWithType: DataLakeFileSystemAsyncClient.getProperties
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getProperties
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.FileSystemProperties>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.FileSystemProperties
    name: FileSystemProperties
    fullName: com.azure.storage.file.datalake.models.FileSystemProperties
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getPropertiesWithResponse*
  name: getPropertiesWithResponse
  nameWithType: DataLakeFileSystemAsyncClient.getPropertiesWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getPropertiesWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setMetadata*
  name: setMetadata
  nameWithType: DataLakeFileSystemAsyncClient.setMetadata
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setMetadata
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setMetadataWithResponse*
  name: setMetadataWithResponse
  nameWithType: DataLakeFileSystemAsyncClient.setMetadataWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setMetadataWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.datalake.models.PathItem>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.PathItem
    name: PathItem
    fullName: com.azure.storage.file.datalake.models.PathItem
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listPaths*
  name: listPaths
  nameWithType: DataLakeFileSystemAsyncClient.listPaths
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.listPaths
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.models.ListPathsOptions
  name: ListPathsOptions
  nameWithType: ListPathsOptions
  fullName: com.azure.storage.file.datalake.models.ListPathsOptions
- uid: reactor.core.publisher.Mono<com.azure.storage.file.datalake.DataLakeFileAsyncClient>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.DataLakeFileAsyncClient
    name: DataLakeFileAsyncClient
    fullName: com.azure.storage.file.datalake.DataLakeFileAsyncClient
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile*
  name: createFile
  nameWithType: DataLakeFileSystemAsyncClient.createFile
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile
  package: com.azure.storage.file.datalake
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.storage.file.datalake.models.PathHttpHeaders
  name: PathHttpHeaders
  nameWithType: PathHttpHeaders
  fullName: com.azure.storage.file.datalake.models.PathHttpHeaders
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.DataLakeFileAsyncClient>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.DataLakeFileAsyncClient
    name: DataLakeFileAsyncClient
    fullName: com.azure.storage.file.datalake.DataLakeFileAsyncClient
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFileWithResponse*
  name: createFileWithResponse
  nameWithType: DataLakeFileSystemAsyncClient.createFileWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFileWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFile*
  name: deleteFile
  nameWithType: DataLakeFileSystemAsyncClient.deleteFile
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFile
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFileWithResponse*
  name: deleteFileWithResponse
  nameWithType: DataLakeFileSystemAsyncClient.deleteFileWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteFileWithResponse
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
    name: DataLakeDirectoryAsyncClient
    fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectory*
  name: createDirectory
  nameWithType: DataLakeFileSystemAsyncClient.createDirectory
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectory
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
    name: DataLakeDirectoryAsyncClient
    fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectoryWithResponse*
  name: createDirectoryWithResponse
  nameWithType: DataLakeFileSystemAsyncClient.createDirectoryWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectoryWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectory*
  name: deleteDirectory
  nameWithType: DataLakeFileSystemAsyncClient.deleteDirectory
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectory
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectoryWithResponse*
  name: deleteDirectoryWithResponse
  nameWithType: DataLakeFileSystemAsyncClient.deleteDirectoryWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectoryWithResponse
  package: com.azure.storage.file.datalake
- uid: java.util.List<com.azure.storage.file.datalake.models.DataLakeSignedIdentifier>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.DataLakeSignedIdentifier
    name: DataLakeSignedIdentifier
    fullName: com.azure.storage.file.datalake.models.DataLakeSignedIdentifier
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicy*
  name: setAccessPolicy
  nameWithType: DataLakeFileSystemAsyncClient.setAccessPolicy
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicy
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicyWithResponse*
  name: setAccessPolicyWithResponse
  nameWithType: DataLakeFileSystemAsyncClient.setAccessPolicyWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicyWithResponse
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.FileSystemAccessPolicies>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.FileSystemAccessPolicies
    name: FileSystemAccessPolicies
    fullName: com.azure.storage.file.datalake.models.FileSystemAccessPolicies
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccessPolicy*
  name: getAccessPolicy
  nameWithType: DataLakeFileSystemAsyncClient.getAccessPolicy
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccessPolicy
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.FileSystemAccessPolicies>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.FileSystemAccessPolicies
    name: FileSystemAccessPolicies
    fullName: com.azure.storage.file.datalake.models.FileSystemAccessPolicies
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccessPolicyWithResponse*
  name: getAccessPolicyWithResponse
  nameWithType: DataLakeFileSystemAsyncClient.getAccessPolicyWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getAccessPolicyWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues
  name: DataLakeServiceSasSignatureValues
  nameWithType: DataLakeServiceSasSignatureValues
  fullName: com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues
- uid: com.azure.storage.file.datalake.models.UserDelegationKey
  name: UserDelegationKey
  nameWithType: UserDelegationKey
  fullName: com.azure.storage.file.datalake.models.UserDelegationKey
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateUserDelegationSas*
  name: generateUserDelegationSas
  nameWithType: DataLakeFileSystemAsyncClient.generateUserDelegationSas
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateUserDelegationSas
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateSas*
  name: generateSas
  nameWithType: DataLakeFileSystemAsyncClient.generateSas
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.generateSas
  package: com.azure.storage.file.datalake
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.storage.file.datalake.models.FileSystemProperties
  name: FileSystemProperties
  nameWithType: FileSystemProperties
  fullName: com.azure.storage.file.datalake.models.FileSystemProperties
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
- uid: com.azure.storage.file.datalake.models.PathItem
  name: PathItem
  nameWithType: PathItem
  fullName: com.azure.storage.file.datalake.models.PathItem
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.azure.storage.file.datalake.models.DataLakeSignedIdentifier
  name: DataLakeSignedIdentifier
  nameWithType: DataLakeSignedIdentifier
  fullName: com.azure.storage.file.datalake.models.DataLakeSignedIdentifier
- uid: com.azure.storage.file.datalake.models.FileSystemAccessPolicies
  name: FileSystemAccessPolicies
  nameWithType: FileSystemAccessPolicies
  fullName: com.azure.storage.file.datalake.models.FileSystemAccessPolicies
