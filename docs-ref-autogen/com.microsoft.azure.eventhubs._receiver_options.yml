items:
- uid: com.microsoft.azure.eventhubs._receiver_options
  id: _receiver_options
  parent: com.microsoft.azure.eventhubs
  children:
  - com.microsoft.azure.eventhubs._receiver_options.getReceiverRuntimeMetricEnabled()
  - com.microsoft.azure.eventhubs._receiver_options.setReceiverRuntimeMetricEnabled(boolean)
  href: com.microsoft.azure.eventhubs._receiver_options.yml
  langs:
  - java
  name: ReceiverOptions
  nameWithType: ReceiverOptions
  fullName: com.microsoft.azure.eventhubs.ReceiverOptions
  type: Class
  source:
    remote: &o0
      path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/ReceiverOptions.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-java
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/ReceiverOptions.java
    startLine: 9
  package: com.microsoft.azure.eventhubs
  summary: <p>Represents various optional behaviors which can be turned on or off during the creation of a <xref href="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public class ReceiverOptions
  inheritance:
  - java.lang.Object
- uid: com.microsoft.azure.eventhubs._receiver_options.getReceiverRuntimeMetricEnabled()
  id: getReceiverRuntimeMetricEnabled()
  parent: com.microsoft.azure.eventhubs._receiver_options
  href: com.microsoft.azure.eventhubs._receiver_options.yml
  langs:
  - java
  name: getReceiverRuntimeMetricEnabled()
  nameWithType: ReceiverOptions.getReceiverRuntimeMetricEnabled()
  fullName: boolean com.microsoft.azure.eventhubs.ReceiverOptions.getReceiverRuntimeMetricEnabled()
  overload: com.microsoft.azure.eventhubs._receiver_options.getReceiverRuntimeMetricEnabled*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/ReceiverOptions.java
    startLine: 21
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Knob to enable/disable runtime metric of the receiver. If this is set to true and is passed to <xref href="com.microsoft.azure.eventhubs._event_hub_client.createReceiver(final String,final String,final String)" data-throw-if-not-resolved="false"></xref>, after the first <xref href="com.microsoft.azure.eventhubs._partition_receiver.receive(final int)" data-throw-if-not-resolved="false"></xref> call, <xref href="com.microsoft.azure.eventhubs._partition_receiver.getRuntimeInformation()" data-throw-if-not-resolved="false"></xref> is populated. </p>

    <p>Enabling this knob will add 3 additional properties to all <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>'s received on the <xref href="com.microsoft.azure.eventhubs._event_hub_client.createReceiver(final String,final String,final String)" data-throw-if-not-resolved="false"></xref>.</p>

    <p></p>
  syntax:
    content: public boolean getReceiverRuntimeMetricEnabled()
    return:
      type: 4fc6e284
      description: <p>the <ref refid="" kindref="compound">boolean</ref> indicating, whether, the runtime metric of the receiver was enabled </p>
- uid: com.microsoft.azure.eventhubs._receiver_options.setReceiverRuntimeMetricEnabled(boolean)
  id: setReceiverRuntimeMetricEnabled(boolean)
  parent: com.microsoft.azure.eventhubs._receiver_options
  href: com.microsoft.azure.eventhubs._receiver_options.yml
  langs:
  - java
  name: setReceiverRuntimeMetricEnabled(boolean value)
  nameWithType: ReceiverOptions.setReceiverRuntimeMetricEnabled(boolean value)
  fullName: void com.microsoft.azure.eventhubs.ReceiverOptions.setReceiverRuntimeMetricEnabled(boolean value)
  overload: com.microsoft.azure.eventhubs._receiver_options.setReceiverRuntimeMetricEnabled*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/ReceiverOptions.java
    startLine: 34
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Knob to enable/disable runtime metric of the receiver. If this is set to true and is passed to <xref href="com.microsoft.azure.eventhubs._event_hub_client.createReceiver(final String,final String,final String)" data-throw-if-not-resolved="false"></xref>, after the first <xref href="com.microsoft.azure.eventhubs._partition_receiver.receive(final int)" data-throw-if-not-resolved="false"></xref> call, <xref href="com.microsoft.azure.eventhubs._partition_receiver.getRuntimeInformation()" data-throw-if-not-resolved="false"></xref> is populated. </p>

    <p>Enabling this knob will add 3 additional properties to all <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>'s received on the <xref href="com.microsoft.azure.eventhubs._event_hub_client.createReceiver(final String,final String,final String)" data-throw-if-not-resolved="false"></xref>.</p>

    <p></p>
  syntax:
    content: public void setReceiverRuntimeMetricEnabled(boolean value)
    parameters:
    - id: value
      type: 4fc6e284
      description: <p>the <ref refid="" kindref="compound">boolean</ref> to indicate, whether, the runtime metric of the receiver should be enabled </p>
references:
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: com.microsoft.azure.eventhubs._receiver_options.getReceiverRuntimeMetricEnabled*
  name: getReceiverRuntimeMetricEnabled
  nameWithType: ReceiverOptions.getReceiverRuntimeMetricEnabled
  fullName: boolean com.microsoft.azure.eventhubs.ReceiverOptions.getReceiverRuntimeMetricEnabled
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs._receiver_options.setReceiverRuntimeMetricEnabled*
  name: setReceiverRuntimeMetricEnabled
  nameWithType: ReceiverOptions.setReceiverRuntimeMetricEnabled
  fullName: void com.microsoft.azure.eventhubs.ReceiverOptions.setReceiverRuntimeMetricEnabled
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs._event_hub_client.createReceiver(final String,final String,final String)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createReceiver(final String consumerGroupName, final String partitionId, final String startingOffset)
  nameWithType: EventHubClient.createReceiver(final String consumerGroupName, final String partitionId, final String startingOffset)
  fullName: final CompletableFuture<PartitionReceiver> com.microsoft.azure.eventhubs.EventHubClient.createReceiver(final String consumerGroupName, final String partitionId, final String startingOffset)
  type: Method
  summary: >-
    <p>The receiver is created for a specific EventHub partition from the specific consumer group. </p>

    <p>NOTE: There can be a maximum number of receivers that can run in parallel per ConsumerGroup per Partition. The limit is enforced by the Event Hub service - current limit is 5 receivers in parallel. Having multiple receivers reading from offsets that are far apart on the same consumer group / partition combo will have significant performance Impact.</p>

    <p></p>
  syntax:
    content: public final CompletableFuture<PartitionReceiver> createReceiver(final String consumerGroupName, final String partitionId, final String startingOffset)
    parameters:
    - id: consumerGroupName
      type: 3d93591e
      description: <p>the consumer group name that this receiver should be grouped under. </p>
    - id: partitionId
      type: 3d93591e
      description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    - id: startingOffset
      type: 3d93591e
      description: '<p>the offset to start receiving the events from. To receive from start of the stream use: <xref href="com.microsoft.azure.eventhubs._partition_receiver.START_OF_STREAM()" data-throw-if-not-resolved="false"></xref></p>'
    return:
      type: 9971d449com.microsoft.azure.eventhubs._partition_receivera08ddfce
      description: <p>a CompletableFuture that would result in a <xref href="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false"></xref> instance when it is completed. </p>
- uid: com.microsoft.azure.eventhubs._partition_receiver.receive(final int)
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  name: receive(final int maxEventCount)
  nameWithType: PartitionReceiver.receive(final int maxEventCount)
  fullName: CompletableFuture<Iterable<EventData>> com.microsoft.azure.eventhubs.PartitionReceiver.receive(final int maxEventCount)
  type: Method
  summary: >-
    <p>Receive a batch of <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>'s from an EventHub partition </p>

    <p>Sample code (sample uses sync version of the api but concept are identical): <preformatted><xref href="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false"></xref> client = <xref href="com.microsoft.azure.eventhubs._event_hub_client.createFromConnectionStringSync(final String)" data-throw-if-not-resolved="false"></xref>("__connection__");

    <xref href="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false"></xref> receiver = client.createPartitionReceiverSync("ConsumerGroup1", "1");

    Iterable{&lt;}<xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>{&gt;} receivedEvents = receiver.receiveSync();</preformatted></p>

    <p>

      <preformatted>while (true)

    {

        int batchSize = 0;

        if (receivedEvents != null)

        {

            for(EventData receivedEvent: receivedEvents)

            {

                System.out.println(String.format("Message Payload: %s", new String(receivedEvent.getBytes(), Charset.defaultCharset())));

                System.out.println(String.format("Offset: %s, SeqNo: %s, EnqueueTime: %s",

                    receivedEvent.getSystemProperties().getOffset(),

                    receivedEvent.getSystemProperties().getSequenceNumber(),

                    receivedEvent.getSystemProperties().getEnqueuedTime()));

                batchSize++;

            }

        }</preformatted>

    </p>

    <p>

      <preformatted>    System.out.println(String.format("ReceivedBatch Size: %s", batchSize));

        receivedEvents = receiver.receiveSync();

    }

    </preformatted>

    </p>

    <p></p>
  syntax:
    content: public CompletableFuture<Iterable<EventData>> receive(final int maxEventCount)
    parameters:
    - id: maxEventCount
      type: cd225469
      description: <p>maximum number of <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>'s that this call should return </p>
    return:
      type: 5ae8a14ccom.microsoft.azure.eventhubs._event_datae7daa122
      description: <p>A completableFuture that will yield a batch of <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>'s from the partition on which this receiver is created. Returns 'null' if no <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> is present. </p>
- uid: com.microsoft.azure.eventhubs._partition_receiver.getRuntimeInformation()
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  name: getRuntimeInformation()
  nameWithType: PartitionReceiver.getRuntimeInformation()
  fullName: final ReceiverRuntimeInformation com.microsoft.azure.eventhubs.PartitionReceiver.getRuntimeInformation()
  type: Method
  summary: >-
    <p>Gets the temporal <xref href="com.microsoft.azure.eventhubs._receiver_runtime_information" data-throw-if-not-resolved="false"></xref> for this EventHub partition. In general, this information is a representation of, where this <xref href="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false"></xref>'s end of stream is, at the time <xref href="com.microsoft.azure.eventhubs._receiver_runtime_information.getRetrievalTime()" data-throw-if-not-resolved="false"></xref>.</p>

    <p></p>
  syntax:
    content: public final ReceiverRuntimeInformation getRuntimeInformation()
    return:
      type: 93de0ef9com.microsoft.azure.eventhubs._receiver_runtime_information
      description: <p>receiver runtime information </p>
- uid: com.microsoft.azure.eventhubs._event_data
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: EventData
  nameWithType: EventData
  fullName: com.microsoft.azure.eventhubs.EventData
  type: Class
  summary: >-
    <p>The data structure encapsulating the Event being sent-to and received-from EventHubs. Each EventHubs partition can be visualized as a Stream of <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. </p>

    <p>Serializing a received <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> with AMQP sections other than ApplicationProperties (with primitive java types) and Data section is not supported. </p>

    <p>Here's how AMQP message sections map to <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. Here's the reference used for AMQP 1.0 specification: <ulink url="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf">http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf</ulink><preformatted>

    i.   <xref href="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false"></xref> - AMQPMessage.ApplicationProperties section

    ii.  <xref href="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false"></xref> - if AMQPMessage.Body has Data section

    iii. <xref href="com.microsoft.azure.eventhubs._event_data.getObject()" data-throw-if-not-resolved="false"></xref> - if AMQPMessage.Body has AMQPValue or AMQPSequence sections

    </preformatted> While using client libraries released by Microsoft Azure EventHubs, sections (i) and (ii) alone are sufficient. Section (iii) is used for advanced scenarios, where the sending application uses third-party AMQP library to send the message to EventHubs and the receiving application uses this client library to receive <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public class EventData
- uid: com.microsoft.azure.eventhubs._partition_receiver
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  name: PartitionReceiver
  nameWithType: PartitionReceiver
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver
  type: Class
  summary: >-
    <p>This is a logical representation of receiving from a EventHub partition. </p>

    <p>A <xref href="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false"></xref> is tied to a ConsumerGroup + EventHub Partition combination. <itemizedlist><listitem><p>If an epoch based <xref href="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false"></xref> (i.e., <xref href="com.microsoft.azure.eventhubs._partition_receiver.getEpoch()" data-throw-if-not-resolved="false"></xref> != 0) is created, EventHubs service will guarantee only 1 active receiver exists per ConsumerGroup + Partition combo. This is the recommended approach to create a <xref href="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false"></xref>. </p></listitem><listitem><p>Multiple receivers per ConsumerGroup + Partition combo can be created using non-epoch receivers. </p></listitem></itemizedlist></p>

    <p></p>
  syntax:
    content: public class PartitionReceiver extends ClientEntity implements IReceiverSettingsProvider
