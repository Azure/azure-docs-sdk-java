### YamlMime:JavaMember
nameWithType: DigitalTwinAsyncClient.invokeCommandWithResponse
type: method
members:
- fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommandWithResponse(String digitalTwinId, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options)
  name: invokeCommandWithResponse(String digitalTwinId, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options)
  nameWithType: DigitalTwinAsyncClient.invokeCommandWithResponse(String digitalTwinId, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options)
  parameters:
  - description: <p>The Id of the digital twin. </p>
    name: digitalTwinId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The command to be invoked. </p>
    name: commandName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The command payload. </p>
    name: payload
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The optional settings for this request. </p>
    name: options
    type: <xref href="com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions&text=DigitalTwinInvokeCommandRequestOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>can be thrown if the provided payload cannot be deserialized into a valid Json object. </p>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="DigitalTwinInvokeRootLevelCommandHeaders"></xref> and <xref uid="" data-throw-if-not-resolved="false" data-raw-source="DigitalTwinCommandResponse"></xref> which contains the application/json command invocation response. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse&text=DigitalTwinCommandResponse" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders&text=DigitalTwinInvokeCommandHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: <p>Invoke a command on a digital twin. </p>
  syntax: public Observable<ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders>> invokeCommandWithResponse(String digitalTwinId, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options)
  uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommandWithResponse(String,String,String,DigitalTwinInvokeCommandRequestOptions)
uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommandWithResponse*
fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommandWithResponse
name: invokeCommandWithResponse(String digitalTwinId, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options)
package: com.microsoft.azure.sdk.iot.service.digitaltwin
metadata: {}
