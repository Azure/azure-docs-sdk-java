### YamlMime:JavaType
uid: "com.azure.core.credential.TokenCredential"
fullName: "com.azure.core.credential.TokenCredential"
name: "TokenCredential"
nameWithType: "TokenCredential"
summary: "Token Credential interface serves as a fundamental component for managing and providing access tokens required for [Azure Active Directory (Azure AD)][Azure Active Directory _Azure AD] authentication when making requests to Azure services.\n\n\n[Azure Active Directory _Azure AD]: https://learn.microsoft.com/azure/active-directory/fundamentals/"
syntax: "public interface **TokenCredential**"
methods:
- uid: "com.azure.core.credential.TokenCredential.getToken(com.azure.core.credential.TokenRequestContext)"
  fullName: "com.azure.core.credential.TokenCredential.getToken(TokenRequestContext request)"
  name: "getToken(TokenRequestContext request)"
  nameWithType: "TokenCredential.getToken(TokenRequestContext request)"
  summary: "Asynchronously get a token for a given resource/audience."
  modifiers:
  - "abstract"
  parameters:
  - description: "the details of the token request"
    name: "request"
    type: "<xref href=\"com.azure.core.credential.TokenRequestContext?alt=com.azure.core.credential.TokenRequestContext&text=TokenRequestContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Mono<AccessToken> getToken(TokenRequestContext request)"
  desc: "Asynchronously get a token for a given resource/audience. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing."
  returns:
    description: "a Publisher that emits a single access token"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.credential.AccessToken?alt=com.azure.core.credential.AccessToken&text=AccessToken\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.credential.TokenCredential.getTokenSync(com.azure.core.credential.TokenRequestContext)"
  fullName: "com.azure.core.credential.TokenCredential.getTokenSync(TokenRequestContext request)"
  name: "getTokenSync(TokenRequestContext request)"
  nameWithType: "TokenCredential.getTokenSync(TokenRequestContext request)"
  summary: "Synchronously get a token for a given resource/audience."
  modifiers:
  - "default"
  parameters:
  - description: "the details of the token request"
    name: "request"
    type: "<xref href=\"com.azure.core.credential.TokenRequestContext?alt=com.azure.core.credential.TokenRequestContext&text=TokenRequestContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public default AccessToken getTokenSync(TokenRequestContext request)"
  desc: "Synchronously get a token for a given resource/audience. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing."
  returns:
    description: "The Access Token"
    type: "<xref href=\"com.azure.core.credential.AccessToken?alt=com.azure.core.credential.AccessToken&text=AccessToken\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
desc: "Token Credential interface serves as a fundamental component for managing and providing access tokens required for [Azure Active Directory (Azure AD)][Azure Active Directory _Azure AD] authentication when making requests to Azure services.\n\nThe <xref uid=\"com.azure.core.credential.TokenCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential\"></xref> interface, offers <xref uid=\"com.azure.core.credential.TokenCredential.getToken(com.azure.core.credential.TokenRequestContext)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential#getToken(TokenRequestContext)\"></xref> and <xref uid=\"com.azure.core.credential.TokenCredential.getTokenSync(com.azure.core.credential.TokenRequestContext)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential#getTokenSync(TokenRequestContext)\"></xref> methods. These methods are responsible for retrieving an access token that can be used to authenticate requests to Azure services. The scopes parameter specified as part of <xref uid=\"com.azure.core.credential.TokenRequestContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenRequestContext\"></xref> represents the resources or permissions required for the token.\n\nThe Token Credential interface is implemented by various credential classes in the [Azure Identity][] library. These credential classes handle the authentication process and provide the necessary access tokens based on the specified scopes and any additional configuration.\n\nBy utilizing the Token Credential interface, you can abstract the authentication logic away from your application code. This allows for flexibility in choosing authentication mechanisms and simplifies the management of access tokens, including token caching and refreshing. It provides a consistent approach to authenticate requests across different Azure services and libraries.\n\nHere are some examples of credential classes that implement the Token Credential interface:\n\n *  [DefaultAzureCredential][]: Represents a credential that tries a series of authentication methods to authenticate requests automatically. It simplifies the process by automatically selecting an appropriate authentication mechanism based on the environment, such as environment variables, managed identities, and developer tool credentials.\n *  [ClientSecretCredential][]: Represents a credential that uses a client ID, client secret, and tenant ID to authenticate. It is suitable for scenarios where you have a client application that needs to authenticate with Azure services using a client secret.\n *  [ClientCertificateCredential][]: Represents a credential that uses a client ID, client certificate, and tenant ID for authentication. This credential is useful when your client application has a client certificate available for authentication.\n *  [InteractiveBrowserCredential][]: Represents a credential that performs an interactive authentication flow with the user in a browser. It is useful for scenarios where the user needs to provide consent or multi-factor authentication is required.\n\nYou can find more credential classes that implement the <xref uid=\"com.azure.core.credential.TokenCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential\"></xref> interface in our [Azure Identity][] library.\n\nThese credential classes can be used in combination with various Azure client libraries to authenticate requests and access Azure services without the need to manage access tokens manually. The Token Credential interface provides a consistent way to handle Azure Active Directory (AAD) authentication across different Azure services and SDKs in a secure and efficient manner.\n\n\n[Azure Active Directory _Azure AD]: https://learn.microsoft.com/azure/active-directory/fundamentals/\n[Azure Identity]: https://learn.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable\n[DefaultAzureCredential]: https://learn.microsoft.com/java/api/com.azure.identity.defaultazurecredential?view=azure-java-stable\n[ClientSecretCredential]: https://learn.microsoft.com/java/api/com.azure.identity.clientsecretcredential?view=azure-java-stable\n[ClientCertificateCredential]: https://learn.microsoft.com/java/api/com.azure.identity.clientcertificatecredential?view=azure-java-stable\n[InteractiveBrowserCredential]: https://learn.microsoft.com/java/api/com.azure.identity.interactivebrowsercredential?view=azure-java-stable"
metadata: {}
package: "com.azure.core.credential"
artifact: com.azure:azure-core:1.45.1
