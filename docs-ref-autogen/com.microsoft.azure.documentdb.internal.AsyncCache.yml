### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.documentdb.internal.AsyncCache"
  id: "AsyncCache"
  parent: "com.microsoft.azure.documentdb.internal"
  children:
  - "com.microsoft.azure.documentdb.internal.AsyncCache.AsyncCache(java.util.concurrent.ExecutorService)"
  - "com.microsoft.azure.documentdb.internal.AsyncCache.clear()"
  - "com.microsoft.azure.documentdb.internal.AsyncCache.get(TKey,TValue,java.util.concurrent.Callable<TValue>)"
  - "com.microsoft.azure.documentdb.internal.AsyncCache.getKeys()"
  - "com.microsoft.azure.documentdb.internal.AsyncCache.put(TKey,TValue)"
  - "com.microsoft.azure.documentdb.internal.AsyncCache.refresh(TKey,java.util.concurrent.Callable<TValue>)"
  - "com.microsoft.azure.documentdb.internal.AsyncCache.remove(TKey)"
  langs:
  - "java"
  name: "AsyncCache<TKey,TValue>"
  nameWithType: "AsyncCache<TKey,TValue>"
  fullName: "com.microsoft.azure.documentdb.internal.AsyncCache<TKey,TValue>"
  type: "Class"
  package: "com.microsoft.azure.documentdb.internal"
  summary: "Cache which supports asynchronous value initialization for the Azure Cosmos DB database service Java SDK. It ensures that for given key only single initialization function is running at any point in time."
  syntax:
    content: "public final class AsyncCache<TKey,TValue>"
    typeParameters:
    - id: "TKey"
    - id: "TValue"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.documentdb.internal.AsyncCache.AsyncCache(java.util.concurrent.ExecutorService)"
  id: "AsyncCache(java.util.concurrent.ExecutorService)"
  parent: "com.microsoft.azure.documentdb.internal.AsyncCache"
  langs:
  - "java"
  name: "AsyncCache(ExecutorService executorService)"
  nameWithType: "AsyncCache<TKey,TValue>.AsyncCache(ExecutorService executorService)"
  fullName: "com.microsoft.azure.documentdb.internal.AsyncCache<TKey,TValue>.AsyncCache(ExecutorService executorService)"
  overload: "com.microsoft.azure.documentdb.internal.AsyncCache.AsyncCache*"
  type: "Constructor"
  package: "com.microsoft.azure.documentdb.internal"
  syntax:
    content: "public AsyncCache(ExecutorService executorService)"
    parameters:
    - id: "executorService"
      type: "java.util.concurrent.ExecutorService"
- uid: "com.microsoft.azure.documentdb.internal.AsyncCache.clear()"
  id: "clear()"
  parent: "com.microsoft.azure.documentdb.internal.AsyncCache"
  langs:
  - "java"
  name: "clear()"
  nameWithType: "AsyncCache<TKey,TValue>.clear()"
  fullName: "com.microsoft.azure.documentdb.internal.AsyncCache<TKey,TValue>.clear()"
  overload: "com.microsoft.azure.documentdb.internal.AsyncCache.clear*"
  type: "Method"
  package: "com.microsoft.azure.documentdb.internal"
  syntax:
    content: "public void clear()"
- uid: "com.microsoft.azure.documentdb.internal.AsyncCache.get(TKey,TValue,java.util.concurrent.Callable<TValue>)"
  id: "get(TKey,TValue,java.util.concurrent.Callable<TValue>)"
  parent: "com.microsoft.azure.documentdb.internal.AsyncCache"
  langs:
  - "java"
  name: "get(TKey key, TValue obsoleteValue, Callable<TValue> callable)"
  nameWithType: "AsyncCache<TKey,TValue>.get(TKey key, TValue obsoleteValue, Callable<TValue> callable)"
  fullName: "com.microsoft.azure.documentdb.internal.AsyncCache<TKey,TValue>.get(TKey key, TValue obsoleteValue, Callable<TValue> callable)"
  overload: "com.microsoft.azure.documentdb.internal.AsyncCache.get*"
  type: "Method"
  package: "com.microsoft.azure.documentdb.internal"
  syntax:
    content: "public Future<TValue> get(TKey key, TValue obsoleteValue, Callable<TValue> callable)"
    parameters:
    - id: "key"
      type: "TKey"
    - id: "obsoleteValue"
      type: "TValue"
    - id: "callable"
      type: "java.util.concurrent.Callable<TValue>"
    return:
      type: "java.util.concurrent.Future<TValue>"
- uid: "com.microsoft.azure.documentdb.internal.AsyncCache.getKeys()"
  id: "getKeys()"
  parent: "com.microsoft.azure.documentdb.internal.AsyncCache"
  langs:
  - "java"
  name: "getKeys()"
  nameWithType: "AsyncCache<TKey,TValue>.getKeys()"
  fullName: "com.microsoft.azure.documentdb.internal.AsyncCache<TKey,TValue>.getKeys()"
  overload: "com.microsoft.azure.documentdb.internal.AsyncCache.getKeys*"
  type: "Method"
  package: "com.microsoft.azure.documentdb.internal"
  syntax:
    content: "public Set<TKey> getKeys()"
    return:
      type: "java.util.Set<TKey>"
- uid: "com.microsoft.azure.documentdb.internal.AsyncCache.put(TKey,TValue)"
  id: "put(TKey,TValue)"
  parent: "com.microsoft.azure.documentdb.internal.AsyncCache"
  langs:
  - "java"
  name: "put(TKey key, TValue value)"
  nameWithType: "AsyncCache<TKey,TValue>.put(TKey key, TValue value)"
  fullName: "com.microsoft.azure.documentdb.internal.AsyncCache<TKey,TValue>.put(TKey key, TValue value)"
  overload: "com.microsoft.azure.documentdb.internal.AsyncCache.put*"
  type: "Method"
  package: "com.microsoft.azure.documentdb.internal"
  syntax:
    content: "public AsyncLazy<TValue> put(TKey key, TValue value)"
    parameters:
    - id: "key"
      type: "TKey"
    - id: "value"
      type: "TValue"
    return:
      type: "com.microsoft.azure.documentdb.internal.AsyncLazy<TValue>"
- uid: "com.microsoft.azure.documentdb.internal.AsyncCache.refresh(TKey,java.util.concurrent.Callable<TValue>)"
  id: "refresh(TKey,java.util.concurrent.Callable<TValue>)"
  parent: "com.microsoft.azure.documentdb.internal.AsyncCache"
  langs:
  - "java"
  name: "refresh(TKey key, Callable<TValue> callable)"
  nameWithType: "AsyncCache<TKey,TValue>.refresh(TKey key, Callable<TValue> callable)"
  fullName: "com.microsoft.azure.documentdb.internal.AsyncCache<TKey,TValue>.refresh(TKey key, Callable<TValue> callable)"
  overload: "com.microsoft.azure.documentdb.internal.AsyncCache.refresh*"
  type: "Method"
  package: "com.microsoft.azure.documentdb.internal"
  syntax:
    content: "public void refresh(TKey key, Callable<TValue> callable)"
    parameters:
    - id: "key"
      type: "TKey"
    - id: "callable"
      type: "java.util.concurrent.Callable<TValue>"
- uid: "com.microsoft.azure.documentdb.internal.AsyncCache.remove(TKey)"
  id: "remove(TKey)"
  parent: "com.microsoft.azure.documentdb.internal.AsyncCache"
  langs:
  - "java"
  name: "remove(TKey key)"
  nameWithType: "AsyncCache<TKey,TValue>.remove(TKey key)"
  fullName: "com.microsoft.azure.documentdb.internal.AsyncCache<TKey,TValue>.remove(TKey key)"
  overload: "com.microsoft.azure.documentdb.internal.AsyncCache.remove*"
  type: "Method"
  package: "com.microsoft.azure.documentdb.internal"
  syntax:
    content: "public AsyncLazy<TValue> remove(TKey key)"
    parameters:
    - id: "key"
      type: "TKey"
    return:
      type: "com.microsoft.azure.documentdb.internal.AsyncLazy<TValue>"
references:
- uid: "java.util.concurrent.ExecutorService"
  spec.java:
  - uid: "java.util.concurrent.ExecutorService"
    name: "ExecutorService"
    fullName: "java.util.concurrent.ExecutorService"
- uid: "com.microsoft.azure.documentdb.internal.AsyncCache.AsyncCache*"
  name: "AsyncCache"
  nameWithType: "AsyncCache<TKey,TValue>.AsyncCache"
  fullName: "com.microsoft.azure.documentdb.internal.AsyncCache<TKey,TValue>.AsyncCache"
  package: "com.microsoft.azure.documentdb.internal"
- uid: "java.util.Set<TKey>"
  spec.java:
  - uid: "java.util.Set"
    name: "Set"
    fullName: "java.util.Set"
  - name: "<"
    fullName: "<"
  - uid: "TKey"
    name: "TKey"
    fullName: "TKey"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.documentdb.internal.AsyncCache.getKeys*"
  name: "getKeys"
  nameWithType: "AsyncCache<TKey,TValue>.getKeys"
  fullName: "com.microsoft.azure.documentdb.internal.AsyncCache<TKey,TValue>.getKeys"
  package: "com.microsoft.azure.documentdb.internal"
- uid: "TKey"
  spec.java:
  - uid: "TKey"
    name: "TKey"
    fullName: "TKey"
- uid: "TValue"
  spec.java:
  - uid: "TValue"
    name: "TValue"
    fullName: "TValue"
- uid: "com.microsoft.azure.documentdb.internal.AsyncLazy<TValue>"
  spec.java:
  - uid: "com.microsoft.azure.documentdb.internal.AsyncLazy"
    name: "AsyncLazy"
    fullName: "com.microsoft.azure.documentdb.internal.AsyncLazy"
  - name: "<"
    fullName: "<"
  - uid: "TValue"
    name: "TValue"
    fullName: "TValue"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.documentdb.internal.AsyncCache.put*"
  name: "put"
  nameWithType: "AsyncCache<TKey,TValue>.put"
  fullName: "com.microsoft.azure.documentdb.internal.AsyncCache<TKey,TValue>.put"
  package: "com.microsoft.azure.documentdb.internal"
- uid: "java.util.concurrent.Callable<TValue>"
  spec.java:
  - uid: "java.util.concurrent.Callable"
    name: "Callable"
    fullName: "java.util.concurrent.Callable"
  - name: "<"
    fullName: "<"
  - uid: "TValue"
    name: "TValue"
    fullName: "TValue"
  - name: ">"
    fullName: ">"
- uid: "java.util.concurrent.Future<TValue>"
  spec.java:
  - uid: "java.util.concurrent.Future"
    name: "Future"
    fullName: "java.util.concurrent.Future"
  - name: "<"
    fullName: "<"
  - uid: "TValue"
    name: "TValue"
    fullName: "TValue"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.documentdb.internal.AsyncCache.get*"
  name: "get"
  nameWithType: "AsyncCache<TKey,TValue>.get"
  fullName: "com.microsoft.azure.documentdb.internal.AsyncCache<TKey,TValue>.get"
  package: "com.microsoft.azure.documentdb.internal"
- uid: "com.microsoft.azure.documentdb.internal.AsyncCache.remove*"
  name: "remove"
  nameWithType: "AsyncCache<TKey,TValue>.remove"
  fullName: "com.microsoft.azure.documentdb.internal.AsyncCache<TKey,TValue>.remove"
  package: "com.microsoft.azure.documentdb.internal"
- uid: "com.microsoft.azure.documentdb.internal.AsyncCache.clear*"
  name: "clear"
  nameWithType: "AsyncCache<TKey,TValue>.clear"
  fullName: "com.microsoft.azure.documentdb.internal.AsyncCache<TKey,TValue>.clear"
  package: "com.microsoft.azure.documentdb.internal"
- uid: "com.microsoft.azure.documentdb.internal.AsyncCache.refresh*"
  name: "refresh"
  nameWithType: "AsyncCache<TKey,TValue>.refresh"
  fullName: "com.microsoft.azure.documentdb.internal.AsyncCache<TKey,TValue>.refresh"
  package: "com.microsoft.azure.documentdb.internal"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.Set"
  name: "Set"
  nameWithType: "Set"
  fullName: "java.util.Set"
- uid: "com.microsoft.azure.documentdb.internal.AsyncLazy"
  name: "AsyncLazy"
  nameWithType: "AsyncLazy"
  fullName: "com.microsoft.azure.documentdb.internal.AsyncLazy"
- uid: "java.util.concurrent.Callable"
  name: "Callable"
  nameWithType: "Callable"
  fullName: "java.util.concurrent.Callable"
- uid: "java.util.concurrent.Future"
  name: "Future"
  nameWithType: "Future"
  fullName: "java.util.concurrent.Future"
