### YamlMime:JavaType
uid: "com.microsoft.azure.management.keyvault.Key"
fullName: "com.microsoft.azure.management.keyvault.Key"
name: "Key"
nameWithType: "Key"
summary: "An immutable client-side representation of an Azure Key Vault key."
syntax: "public interface Key extends Indexable, HasInner<KeyBundle>, HasId, HasName, Updatable<Key.Update>"
methods:
- uid: "com.microsoft.azure.management.keyvault.Key.attributes()"
  fullName: "com.microsoft.azure.management.keyvault.Key.attributes()"
  name: "attributes()"
  nameWithType: "Key.attributes()"
  modifiers:
  - "abstract"
  syntax: "public abstract KeyAttributes attributes()"
  returns:
    description: "the key management attributes."
    type: "<xref href=\"com.microsoft.azure.keyvault.models.KeyAttributes?alt=com.microsoft.azure.keyvault.models.KeyAttributes&text=KeyAttributes\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.keyvault.Key.backup()"
  fullName: "com.microsoft.azure.management.keyvault.Key.backup()"
  name: "backup()"
  nameWithType: "Key.backup()"
  modifiers:
  - "abstract"
  syntax: "public abstract byte[] backup()"
  returns:
    description: "a backup of the specified key be downloaded to the client"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.microsoft.azure.management.keyvault.Key.backupAsync()"
  fullName: "com.microsoft.azure.management.keyvault.Key.backupAsync()"
  name: "backupAsync()"
  nameWithType: "Key.backupAsync()"
  modifiers:
  - "abstract"
  syntax: "public abstract Observable<byte[]> backupAsync()"
  returns:
    description: "a backup of the specified key be downloaded to the client"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;"
- uid: "com.microsoft.azure.management.keyvault.Key.decrypt(com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm,byte[])"
  fullName: "com.microsoft.azure.management.keyvault.Key.decrypt(JsonWebKeyEncryptionAlgorithm algorithm, byte[] content)"
  name: "decrypt(JsonWebKeyEncryptionAlgorithm algorithm, byte[] content)"
  nameWithType: "Key.decrypt(JsonWebKeyEncryptionAlgorithm algorithm, byte[] content)"
  summary: "Decrypts a single block of encrypted data."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK encryption algorithm"
    name: "algorithm"
    type: "<xref href=\"com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm&text=JsonWebKeyEncryptionAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the content to be decrypted"
    name: "content"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract byte[] decrypt(JsonWebKeyEncryptionAlgorithm algorithm, byte[] content)"
  desc: "Decrypts a single block of encrypted data."
  returns:
    description: "the decrypted value"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.microsoft.azure.management.keyvault.Key.decryptAsync(com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm,byte[])"
  fullName: "com.microsoft.azure.management.keyvault.Key.decryptAsync(JsonWebKeyEncryptionAlgorithm algorithm, byte[] content)"
  name: "decryptAsync(JsonWebKeyEncryptionAlgorithm algorithm, byte[] content)"
  nameWithType: "Key.decryptAsync(JsonWebKeyEncryptionAlgorithm algorithm, byte[] content)"
  summary: "Decrypts a single block of encrypted data."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK encryption algorithm"
    name: "algorithm"
    type: "<xref href=\"com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm&text=JsonWebKeyEncryptionAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the content to be decrypted"
    name: "content"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract Observable<byte[]> decryptAsync(JsonWebKeyEncryptionAlgorithm algorithm, byte[] content)"
  desc: "Decrypts a single block of encrypted data."
  returns:
    description: "the decrypted value"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;"
- uid: "com.microsoft.azure.management.keyvault.Key.encrypt(com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm,byte[])"
  fullName: "com.microsoft.azure.management.keyvault.Key.encrypt(JsonWebKeyEncryptionAlgorithm algorithm, byte[] content)"
  name: "encrypt(JsonWebKeyEncryptionAlgorithm algorithm, byte[] content)"
  nameWithType: "Key.encrypt(JsonWebKeyEncryptionAlgorithm algorithm, byte[] content)"
  summary: "Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK encryption algorithm"
    name: "algorithm"
    type: "<xref href=\"com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm&text=JsonWebKeyEncryptionAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the content to be encrypted"
    name: "content"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract byte[] encrypt(JsonWebKeyEncryptionAlgorithm algorithm, byte[] content)"
  desc: "Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault."
  returns:
    description: "the encrypted value"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.microsoft.azure.management.keyvault.Key.encryptAsync(com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm,byte[])"
  fullName: "com.microsoft.azure.management.keyvault.Key.encryptAsync(JsonWebKeyEncryptionAlgorithm algorithm, byte[] content)"
  name: "encryptAsync(JsonWebKeyEncryptionAlgorithm algorithm, byte[] content)"
  nameWithType: "Key.encryptAsync(JsonWebKeyEncryptionAlgorithm algorithm, byte[] content)"
  summary: "Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK encryption algorithm"
    name: "algorithm"
    type: "<xref href=\"com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm&text=JsonWebKeyEncryptionAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the content to be encrypted"
    name: "content"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract Observable<byte[]> encryptAsync(JsonWebKeyEncryptionAlgorithm algorithm, byte[] content)"
  desc: "Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault."
  returns:
    description: "the encrypted value"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;"
- uid: "com.microsoft.azure.management.keyvault.Key.jsonWebKey()"
  fullName: "com.microsoft.azure.management.keyvault.Key.jsonWebKey()"
  name: "jsonWebKey()"
  nameWithType: "Key.jsonWebKey()"
  modifiers:
  - "abstract"
  syntax: "public abstract JsonWebKey jsonWebKey()"
  returns:
    description: "the Json web key."
    type: "<xref href=\"com.microsoft.azure.keyvault.webkey.JsonWebKey?alt=com.microsoft.azure.keyvault.webkey.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.keyvault.Key.listVersions()"
  fullName: "com.microsoft.azure.management.keyvault.Key.listVersions()"
  name: "listVersions()"
  nameWithType: "Key.listVersions()"
  modifiers:
  - "abstract"
  syntax: "public abstract PagedList<Key> listVersions()"
  returns:
    description: "a list of individual key versions with the same key name"
    type: "<xref href=\"com.microsoft.azure.PagedList?alt=com.microsoft.azure.PagedList&text=PagedList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.keyvault.Key?alt=com.microsoft.azure.management.keyvault.Key&text=Key\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.keyvault.Key.listVersionsAsync()"
  fullName: "com.microsoft.azure.management.keyvault.Key.listVersionsAsync()"
  name: "listVersionsAsync()"
  nameWithType: "Key.listVersionsAsync()"
  modifiers:
  - "abstract"
  syntax: "public abstract Observable<Key> listVersionsAsync()"
  returns:
    description: "a list of individual key versions with the same key name"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.keyvault.Key?alt=com.microsoft.azure.management.keyvault.Key&text=Key\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.keyvault.Key.managed()"
  fullName: "com.microsoft.azure.management.keyvault.Key.managed()"
  name: "managed()"
  nameWithType: "Key.managed()"
  modifiers:
  - "abstract"
  syntax: "public abstract boolean managed()"
  returns:
    description: "true if the key's lifetime is managed by key vault. If this is a key\n backing a certificate, then managed will be true."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.keyvault.Key.sign(com.microsoft.azure.keyvault.webkey.JsonWebKeySignatureAlgorithm,byte[])"
  fullName: "com.microsoft.azure.management.keyvault.Key.sign(JsonWebKeySignatureAlgorithm algorithm, byte[] digest)"
  name: "sign(JsonWebKeySignatureAlgorithm algorithm, byte[] digest)"
  nameWithType: "Key.sign(JsonWebKeySignatureAlgorithm algorithm, byte[] digest)"
  summary: "Creates a signature from a digest."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK signing algorithm"
    name: "algorithm"
    type: "<xref href=\"com.microsoft.azure.keyvault.webkey.JsonWebKeySignatureAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeySignatureAlgorithm&text=JsonWebKeySignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the content to be signed"
    name: "digest"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract byte[] sign(JsonWebKeySignatureAlgorithm algorithm, byte[] digest)"
  desc: "Creates a signature from a digest."
  returns:
    description: "the signature in a byte array"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.microsoft.azure.management.keyvault.Key.signAsync(com.microsoft.azure.keyvault.webkey.JsonWebKeySignatureAlgorithm,byte[])"
  fullName: "com.microsoft.azure.management.keyvault.Key.signAsync(JsonWebKeySignatureAlgorithm algorithm, byte[] digest)"
  name: "signAsync(JsonWebKeySignatureAlgorithm algorithm, byte[] digest)"
  nameWithType: "Key.signAsync(JsonWebKeySignatureAlgorithm algorithm, byte[] digest)"
  summary: "Creates a signature from a digest."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK signing algorithm"
    name: "algorithm"
    type: "<xref href=\"com.microsoft.azure.keyvault.webkey.JsonWebKeySignatureAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeySignatureAlgorithm&text=JsonWebKeySignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the content to be signed"
    name: "digest"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract Observable<byte[]> signAsync(JsonWebKeySignatureAlgorithm algorithm, byte[] digest)"
  desc: "Creates a signature from a digest."
  returns:
    description: "the signature in a byte array"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;"
- uid: "com.microsoft.azure.management.keyvault.Key.tags()"
  fullName: "com.microsoft.azure.management.keyvault.Key.tags()"
  name: "tags()"
  nameWithType: "Key.tags()"
  modifiers:
  - "abstract"
  syntax: "public abstract Map<String,String> tags()"
  returns:
    description: "application specific metadata in the form of key-value pairs."
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.keyvault.Key.unwrapKey(com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm,byte[])"
  fullName: "com.microsoft.azure.management.keyvault.Key.unwrapKey(JsonWebKeyEncryptionAlgorithm algorithm, byte[] key)"
  name: "unwrapKey(JsonWebKeyEncryptionAlgorithm algorithm, byte[] key)"
  nameWithType: "Key.unwrapKey(JsonWebKeyEncryptionAlgorithm algorithm, byte[] key)"
  summary: "Unwraps a symmetric key wrapped originally by this Key Vault key."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK encryption algorithm"
    name: "algorithm"
    type: "<xref href=\"com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm&text=JsonWebKeyEncryptionAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the key to unwrap"
    name: "key"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract byte[] unwrapKey(JsonWebKeyEncryptionAlgorithm algorithm, byte[] key)"
  desc: "Unwraps a symmetric key wrapped originally by this Key Vault key."
  returns:
    description: "the unwrapped symmetric key"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.microsoft.azure.management.keyvault.Key.unwrapKeyAsync(com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm,byte[])"
  fullName: "com.microsoft.azure.management.keyvault.Key.unwrapKeyAsync(JsonWebKeyEncryptionAlgorithm algorithm, byte[] key)"
  name: "unwrapKeyAsync(JsonWebKeyEncryptionAlgorithm algorithm, byte[] key)"
  nameWithType: "Key.unwrapKeyAsync(JsonWebKeyEncryptionAlgorithm algorithm, byte[] key)"
  summary: "Unwraps a symmetric key wrapped originally by this Key Vault key."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK encryption algorithm"
    name: "algorithm"
    type: "<xref href=\"com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm&text=JsonWebKeyEncryptionAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the key to unwrap"
    name: "key"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract Observable<byte[]> unwrapKeyAsync(JsonWebKeyEncryptionAlgorithm algorithm, byte[] key)"
  desc: "Unwraps a symmetric key wrapped originally by this Key Vault key."
  returns:
    description: "the unwrapped symmetric key"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;"
- uid: "com.microsoft.azure.management.keyvault.Key.verify(com.microsoft.azure.keyvault.webkey.JsonWebKeySignatureAlgorithm,byte[],byte[])"
  fullName: "com.microsoft.azure.management.keyvault.Key.verify(JsonWebKeySignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  name: "verify(JsonWebKeySignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  nameWithType: "Key.verify(JsonWebKeySignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  summary: "Verifies a signature from a digest."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK signing algorithm"
    name: "algorithm"
    type: "<xref href=\"com.microsoft.azure.keyvault.webkey.JsonWebKeySignatureAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeySignatureAlgorithm&text=JsonWebKeySignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the content to be signed"
    name: "digest"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the signature to verify"
    name: "signature"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract boolean verify(JsonWebKeySignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  desc: "Verifies a signature from a digest."
  returns:
    description: "true if the signature is valid"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.keyvault.Key.verifyAsync(com.microsoft.azure.keyvault.webkey.JsonWebKeySignatureAlgorithm,byte[],byte[])"
  fullName: "com.microsoft.azure.management.keyvault.Key.verifyAsync(JsonWebKeySignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  name: "verifyAsync(JsonWebKeySignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  nameWithType: "Key.verifyAsync(JsonWebKeySignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  summary: "Verifies a signature from a digest."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK signing algorithm"
    name: "algorithm"
    type: "<xref href=\"com.microsoft.azure.keyvault.webkey.JsonWebKeySignatureAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeySignatureAlgorithm&text=JsonWebKeySignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the content to be signed"
    name: "digest"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the signature to verify"
    name: "signature"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract Observable<Boolean> verifyAsync(JsonWebKeySignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  desc: "Verifies a signature from a digest."
  returns:
    description: "true if the signature is valid"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.keyvault.Key.wrapKey(com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm,byte[])"
  fullName: "com.microsoft.azure.management.keyvault.Key.wrapKey(JsonWebKeyEncryptionAlgorithm algorithm, byte[] key)"
  name: "wrapKey(JsonWebKeyEncryptionAlgorithm algorithm, byte[] key)"
  nameWithType: "Key.wrapKey(JsonWebKeyEncryptionAlgorithm algorithm, byte[] key)"
  summary: "Wraps a symmetric key using the specified algorithm."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK encryption algorithm"
    name: "algorithm"
    type: "<xref href=\"com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm&text=JsonWebKeyEncryptionAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the symmetric key to wrap"
    name: "key"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract byte[] wrapKey(JsonWebKeyEncryptionAlgorithm algorithm, byte[] key)"
  desc: "Wraps a symmetric key using the specified algorithm."
  returns:
    description: "the wrapped key"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.microsoft.azure.management.keyvault.Key.wrapKeyAsync(com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm,byte[])"
  fullName: "com.microsoft.azure.management.keyvault.Key.wrapKeyAsync(JsonWebKeyEncryptionAlgorithm algorithm, byte[] key)"
  name: "wrapKeyAsync(JsonWebKeyEncryptionAlgorithm algorithm, byte[] key)"
  nameWithType: "Key.wrapKeyAsync(JsonWebKeyEncryptionAlgorithm algorithm, byte[] key)"
  summary: "Wraps a symmetric key using the specified algorithm."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK encryption algorithm"
    name: "algorithm"
    type: "<xref href=\"com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm&text=JsonWebKeyEncryptionAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the symmetric key to wrap"
    name: "key"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract Observable<byte[]> wrapKeyAsync(JsonWebKeyEncryptionAlgorithm algorithm, byte[] key)"
  desc: "Wraps a symmetric key using the specified algorithm."
  returns:
    description: "the wrapped key"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;"
type: "interface"
desc: "An immutable client-side representation of an Azure Key Vault key."
implements:
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.arm.models.HasId?alt=com.microsoft.azure.management.resources.fluentcore.arm.models.HasId&text=HasId\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.arm.models.HasName?alt=com.microsoft.azure.management.resources.fluentcore.arm.models.HasName&text=HasName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.HasInner?alt=com.microsoft.azure.management.resources.fluentcore.model.HasInner&text=HasInner\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.Indexable?alt=com.microsoft.azure.management.resources.fluentcore.model.Indexable&text=Indexable\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.Updatable?alt=com.microsoft.azure.management.resources.fluentcore.model.Updatable&text=Updatable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.keyvault.Key.Update?alt=com.microsoft.azure.management.keyvault.Key.Update&text=Update\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.microsoft.azure.management.keyvault"
artifact: com.microsoft.azure:azure-mgmt-keyvault:1.41.4
