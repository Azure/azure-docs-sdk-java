### YamlMime:JavaPackage
uid: "com.azure.messaging.eventgrid"
fullName: "com.azure.messaging.eventgrid"
name: "com.azure.messaging.eventgrid"
summary: "<p><a href=\"https://learn.microsoft.com/en-us/azure/event-grid/\">Azure Event Grid</a> is a highly scalable, fully\n managed event routing service."
classes:
- "com.azure.messaging.eventgrid.EventGridEvent"
- "com.azure.messaging.eventgrid.EventGridPublisherAsyncClient"
- "com.azure.messaging.eventgrid.EventGridPublisherClient"
- "com.azure.messaging.eventgrid.EventGridPublisherClientBuilder"
- "com.azure.messaging.eventgrid.SystemEventNames"
enums:
- "com.azure.messaging.eventgrid.EventGridServiceVersion"
desc: "<p><a href=\"https://learn.microsoft.com/en-us/azure/event-grid/\">Azure Event Grid</a> is a highly scalable, fully\n managed event routing service. With Event Grid can connect applications and services to react to relevant events.\n This library is for publishing Event Grid events and deserializing event payloads in subscriptions.</p>\n\n <p><strong>Key Concepts:</strong></p>\n <ul>\n     <li><strong>Event</strong> - Information about what happened.</li>\n     <li><strong>Event Source</strong> - where the event took place.</li>\n     <li><strong>Topic</strong> - the endpoint where events are published to.</li>\n     <li><strong>Event Handler</strong> - the endpoint that handles the events.</li>\n     <li><strong>Event Subscription</strong> - the endpoint or built-in mechanism for routing events.</li>\n </ul>\n\n <p>For more information see the <a href=\"https://learn.microsoft.com/en-us/azure/event-grid/concepts\">concepts overview.</a></p>\n\n <h2>Getting Started</h2>\n\n <p>The Azure EventGrid SDK provides <xref uid=\"com.azure.messaging.eventgrid.EventGridPublisherClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.messaging.eventgrid.EventGridPublisherClient\"></xref> and\n <xref uid=\"com.azure.messaging.eventgrid.EventGridPublisherAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.messaging.eventgrid.EventGridPublisherAsyncClient\"></xref> for synchronous and asynchronous publishing of\n events to Azure Event Grid. These can be instantiated using the <xref uid=\"com.azure.messaging.eventgrid.EventGridPublisherClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.messaging.eventgrid.EventGridPublisherClientBuilder\"></xref>.</p>\n\n <h3>Authentication</h3>\n\n There are three ways to authenticate a publisher client for Azure Event Grid.\n\n <p><strong>Microsoft Entra ID</strong>: Using managed identity is the recommended way to authenticate. The recommended way to do so is using\n DefaultAzureCredential:\n <!-- src_embed com.azure.messaging.eventgrid.EventGridPublisherClientBuilder#buildEventGridEventPublisherClientWithDac -->\n <pre>\n DefaultAzureCredential credential = new DefaultAzureCredentialBuilder&#40;&#41;.build&#40;&#41;;\n EventGridPublisherClient&lt;EventGridEvent&gt; eventGridEventPublisherClient = new EventGridPublisherClientBuilder&#40;&#41;\n     .endpoint&#40;System.getenv&#40;&quot;AZURE_EVENTGRID_EVENT_ENDPOINT&quot;&#41;&#41;\n     .credential&#40;credential&#41;\n     .buildEventGridEventPublisherClient&#40;&#41;;\n </pre>\n <!-- end com.azure.messaging.eventgrid.EventGridPublisherClientBuilder#buildEventGridEventPublisherClientWithDac -->\n\n <p><strong>Topic Access Key</strong>: When a topic is created, an access key is created for that topic. It is used\n with the AzureKeyCredential:\n <!-- src_embed com.azure.messaging.eventgrid.EventGridPublisherClientBuilder#buildEventGridEventPublisherClientWithKey -->\n <pre>\n AzureKeyCredential credential = new AzureKeyCredential&#40;System.getenv&#40;&quot;AZURE_EVENTGRID_EVENT_TOPIC_KEY&quot;&#41;&#41;;\n EventGridPublisherClient&lt;EventGridEvent&gt; eventGridEventPublisherClient = new EventGridPublisherClientBuilder&#40;&#41;\n     .endpoint&#40;System.getenv&#40;&quot;AZURE_EVENTGRID_EVENT_ENDPOINT&quot;&#41;&#41;\n     .credential&#40;credential&#41;\n     .buildEventGridEventPublisherClient&#40;&#41;;\n </pre>\n <!-- end com.azure.messaging.eventgrid.EventGridPublisherClientBuilder#buildEventGridEventPublisherClientWithKey -->\n\n <p><strong>Shared Access Signature</strong>: A Shared Access Signature (SAS) key can be used to authenticate. First, you must create one:\n <!-- src_embed com.azure.messaging.eventgrid.CreateSasToken -->\n <pre>\n &#47;&#47; You can get a SAS token using static methods of EventGridPublisherClient.\n String sasKey = EventGridPublisherClient.generateSas&#40;System.getenv&#40;&quot;AZURE_EVENTGRID_EVENT_ENDPOINT&quot;&#41;,\n         new AzureKeyCredential&#40;System.getenv&#40;&quot;AZURE_EVENTGRID_EVENT_TOPIC_KEY&quot;&#41;&#41;,\n         OffsetDateTime.now&#40;&#41;.plusHours&#40;1&#41;&#41;;\n </pre>\n <!-- end com.azure.messaging.eventgrid.CreateSasToken -->\n\n Once it is created, it is used with a SAS token credential:\n <!-- src_embed com.azure.messaging.eventgrid.EventGridPublisherClientBuilder#buildEventGridEventPublisherClientWithSas -->\n <pre>\n &#47;&#47; Once you have this key, you can share it with anyone who needs to send events to your topic. They use it like this:\n AzureSasCredential credential = new AzureSasCredential&#40;sasKey&#41;;\n EventGridPublisherClient&lt;EventGridEvent&gt; eventGridEventPublisherClient = new EventGridPublisherClientBuilder&#40;&#41;\n     .endpoint&#40;System.getenv&#40;&quot;AZURE_EVENTGRID_EVENT_ENDPOINT&quot;&#41;&#41;\n     .credential&#40;credential&#41;\n     .buildEventGridEventPublisherClient&#40;&#41;;\n </pre>\n <!-- end com.azure.messaging.eventgrid.EventGridPublisherClientBuilder#buildEventGridEventPublisherClientWithSas -->\n\n <hr>\n <h2>Send an EventGridEvent</h2>\n\n <p>In order to interact with the Azure Event Grid service, you will need to create an instance of the <xref uid=\"com.azure.messaging.eventgrid.EventGridPublisherClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.messaging.eventgrid.EventGridPublisherClient\"></xref> class:</p>\n <!-- src_embed com.azure.messaging.eventgrid.EventGridPublisherClient#CreateEventGridEventClient -->\n <pre>\n &#47;&#47; Create a client to send events of EventGridEvent schema\n EventGridPublisherClient&lt;EventGridEvent&gt; eventGridEventPublisherClient = new EventGridPublisherClientBuilder&#40;&#41;\n     .endpoint&#40;System.getenv&#40;&quot;AZURE_EVENTGRID_EVENT_ENDPOINT&quot;&#41;&#41;  &#47;&#47; make sure it accepts EventGridEvent\n     .credential&#40;new AzureKeyCredential&#40;System.getenv&#40;&quot;AZURE_EVENTGRID_EVENT_KEY&quot;&#41;&#41;&#41;\n     .buildEventGridEventPublisherClient&#40;&#41;;\n </pre>\n <!-- end com.azure.messaging.eventgrid.EventGridPublisherClient#CreateEventGridEventClient -->\n <!-- src_embed com.azure.messaging.eventgrid.EventGridPublisherAsyncClient#SendEventGridEvent -->\n <pre>\n &#47;&#47; Create an EventGridEvent\n User user = new User&#40;&quot;John&quot;, &quot;James&quot;&#41;;\n EventGridEvent eventGridEvent = new EventGridEvent&#40;&quot;&#47;EventGridEvents&#47;example&#47;source&quot;,\n     &quot;Example.EventType&quot;, BinaryData.fromObject&#40;user&#41;, &quot;0.1&quot;&#41;;\n\n &#47;&#47; Send a single EventGridEvent\n eventGridEventPublisherClient.sendEvent&#40;eventGridEvent&#41;.block&#40;&#41;;\n\n &#47;&#47; Send a list of EventGridEvents to the EventGrid service altogether.\n &#47;&#47; This has better performance than sending one by one.\n eventGridEventPublisherClient.sendEvents&#40;Arrays.asList&#40;\n     eventGridEvent\n     &#47;&#47; add more EventGridEvents objects\n &#41;&#41;.block&#40;&#41;;\n </pre>\n <!-- end com.azure.messaging.eventgrid.EventGridPublisherAsyncClient#SendEventGridEvent -->\n\n <hr>\n <h2>Send a Cloud Event</h2>\n\n <!-- src_embed com.azure.messaging.eventgrid.EventGridPublisherAsyncClient#CreateCloudEventClient -->\n <pre>\n &#47;&#47; Create a client to send events of CloudEvent schema &#40;com.azure.core.models.CloudEvent&#41;\n EventGridPublisherAsyncClient&lt;CloudEvent&gt; cloudEventPublisherClient = new EventGridPublisherClientBuilder&#40;&#41;\n     .endpoint&#40;System.getenv&#40;&quot;AZURE_EVENTGRID_CLOUDEVENT_ENDPOINT&quot;&#41;&#41;  &#47;&#47; make sure it accepts CloudEvent\n     .credential&#40;new AzureKeyCredential&#40;System.getenv&#40;&quot;AZURE_EVENTGRID_CLOUDEVENT_KEY&quot;&#41;&#41;&#41;\n     .buildCloudEventPublisherAsyncClient&#40;&#41;;\n </pre>\n <!-- end com.azure.messaging.eventgrid.EventGridPublisherAsyncClient#CreateCloudEventClient -->\n <!-- src_embed com.azure.messaging.eventgrid.EventGridPublisherAsyncClient#SendCloudEvent -->\n <pre>\n &#47;&#47; Create a com.azure.models.CloudEvent.\n User user = new User&#40;&quot;Stephen&quot;, &quot;James&quot;&#41;;\n CloudEvent cloudEventDataObject = new CloudEvent&#40;&quot;&#47;cloudevents&#47;example&#47;source&quot;, &quot;Example.EventType&quot;,\n     BinaryData.fromObject&#40;user&#41;, CloudEventDataFormat.JSON, &quot;application&#47;json&quot;&#41;;\n\n &#47;&#47; Send a single CloudEvent\n cloudEventPublisherClient.sendEvent&#40;cloudEventDataObject&#41;.block&#40;&#41;;\n\n &#47;&#47; Send a list of CloudEvents to the EventGrid service altogether.\n &#47;&#47; This has better performance than sending one by one.\n cloudEventPublisherClient.sendEvents&#40;Arrays.asList&#40;\n     cloudEventDataObject\n     &#47;&#47; add more CloudEvents objects\n &#41;&#41;.block&#40;&#41;;\n </pre>\n <!-- end com.azure.messaging.eventgrid.EventGridPublisherAsyncClient#SendCloudEvent -->"
metadata: {}
package: "com.azure.messaging.eventgrid"
artifact: com.azure:azure-messaging-eventgrid:4.22.2
