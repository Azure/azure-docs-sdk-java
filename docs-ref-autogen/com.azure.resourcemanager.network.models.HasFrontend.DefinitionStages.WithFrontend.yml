### YamlMime:JavaType
uid: "com.azure.resourcemanager.network.models.HasFrontend.DefinitionStages.WithFrontend"
fullName: "com.azure.resourcemanager.network.models.HasFrontend.DefinitionStages.WithFrontend<ReturnT>"
name: "HasFrontend.DefinitionStages.WithFrontend<ReturnT>"
nameWithType: "HasFrontend.DefinitionStages.WithFrontend<ReturnT>"
summary: "The stage of a definition allowing to specify a load balancer frontend."
syntax: "public static interface HasFrontend.DefinitionStages.WithFrontend<ReturnT>"
methods:
- uid: "com.azure.resourcemanager.network.models.HasFrontend.DefinitionStages.WithFrontend.fromExistingPublicIPAddress(com.azure.resourcemanager.network.models.PublicIpAddress)"
  fullName: "com.azure.resourcemanager.network.models.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(PublicIpAddress publicIPAddress)"
  name: "fromExistingPublicIPAddress(PublicIpAddress publicIPAddress)"
  nameWithType: "HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(PublicIpAddress publicIPAddress)"
  summary: "Specifies an existing public IP address to receive network traffic from."
  modifiers:
  - "abstract"
  parameters:
  - description: "an existing public IP address"
    name: "publicIPAddress"
    type: "<xref href=\"com.azure.resourcemanager.network.models.PublicIpAddress?alt=com.azure.resourcemanager.network.models.PublicIpAddress&text=PublicIpAddress\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract ReturnT fromExistingPublicIPAddress(PublicIpAddress publicIPAddress)"
  desc: "Specifies an existing public IP address to receive network traffic from.\n\nIf this load balancer already has a frontend referencing this public IP address, that is the frontend that will be used. Else, an automatically named new public frontend will be created implicitly on the load balancer."
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"ReturnT?alt=ReturnT&text=ReturnT\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.network.models.HasFrontend.DefinitionStages.WithFrontend.fromExistingPublicIPAddress(java.lang.String)"
  fullName: "com.azure.resourcemanager.network.models.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(String resourceId)"
  name: "fromExistingPublicIPAddress(String resourceId)"
  nameWithType: "HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(String resourceId)"
  summary: "Specifies an existing public IP address to receive network traffic from."
  modifiers:
  - "abstract"
  parameters:
  - description: "the resource ID of an existing public IP address"
    name: "resourceId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract ReturnT fromExistingPublicIPAddress(String resourceId)"
  desc: "Specifies an existing public IP address to receive network traffic from.\n\nIf this load balancer already has a frontend referencing this public IP address, that is the frontend that will be used. Else, an automatically named new public frontend will be created implicitly on the load balancer."
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"ReturnT?alt=ReturnT&text=ReturnT\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.network.models.HasFrontend.DefinitionStages.WithFrontend.fromExistingSubnet(com.azure.resourcemanager.network.models.Network,java.lang.String)"
  fullName: "com.azure.resourcemanager.network.models.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(Network network, String subnetName)"
  name: "fromExistingSubnet(Network network, String subnetName)"
  nameWithType: "HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(Network network, String subnetName)"
  summary: "Specifies an existing private subnet to receive network traffic from."
  modifiers:
  - "abstract"
  parameters:
  - description: "an existing network"
    name: "network"
    type: "<xref href=\"com.azure.resourcemanager.network.models.Network?alt=com.azure.resourcemanager.network.models.Network&text=Network\" data-throw-if-not-resolved=\"False\" />"
  - description: "the name of an existing subnet within the specified network"
    name: "subnetName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract ReturnT fromExistingSubnet(Network network, String subnetName)"
  desc: "Specifies an existing private subnet to receive network traffic from.\n\nIf this load balancer already has a frontend referencing this subnet, that is the frontend that will be used. Else, an automatically named new private frontend will be created implicitly on the load balancer."
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"ReturnT?alt=ReturnT&text=ReturnT\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.network.models.HasFrontend.DefinitionStages.WithFrontend.fromExistingSubnet(com.azure.resourcemanager.network.models.Subnet)"
  fullName: "com.azure.resourcemanager.network.models.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(Subnet subnet)"
  name: "fromExistingSubnet(Subnet subnet)"
  nameWithType: "HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(Subnet subnet)"
  summary: "Specifies an existing private subnet to receive network traffic from."
  modifiers:
  - "abstract"
  parameters:
  - description: "an existing subnet"
    name: "subnet"
    type: "<xref href=\"com.azure.resourcemanager.network.models.Subnet?alt=com.azure.resourcemanager.network.models.Subnet&text=Subnet\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract ReturnT fromExistingSubnet(Subnet subnet)"
  desc: "Specifies an existing private subnet to receive network traffic from.\n\nIf this load balancer already has a frontend referencing this subnet, that is the frontend that will be used. Else, an automatically named new private frontend will be created implicitly on the load balancer."
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"ReturnT?alt=ReturnT&text=ReturnT\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.network.models.HasFrontend.DefinitionStages.WithFrontend.fromExistingSubnet(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.network.models.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(String networkResourceId, String subnetName)"
  name: "fromExistingSubnet(String networkResourceId, String subnetName)"
  nameWithType: "HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(String networkResourceId, String subnetName)"
  summary: "Specifies an existing private subnet to receive network traffic from."
  modifiers:
  - "abstract"
  parameters:
  - description: "the resource ID of an existing network"
    name: "networkResourceId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "the name of an existing subnet within the specified network"
    name: "subnetName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract ReturnT fromExistingSubnet(String networkResourceId, String subnetName)"
  desc: "Specifies an existing private subnet to receive network traffic from.\n\nIf this load balancer already has a frontend referencing this subnet, that is the frontend that will be used. Else, an automatically named new private frontend will be created implicitly on the load balancer."
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"ReturnT?alt=ReturnT&text=ReturnT\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.network.models.HasFrontend.DefinitionStages.WithFrontend.fromFrontend(java.lang.String)"
  fullName: "com.azure.resourcemanager.network.models.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromFrontend(String frontendName)"
  name: "fromFrontend(String frontendName)"
  nameWithType: "HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromFrontend(String frontendName)"
  summary: "Specifies the frontend to receive network traffic from."
  modifiers:
  - "abstract"
  parameters:
  - description: "an existing frontend name on this load balancer"
    name: "frontendName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract ReturnT fromFrontend(String frontendName)"
  desc: "Specifies the frontend to receive network traffic from."
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"ReturnT?alt=ReturnT&text=ReturnT\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.network.models.HasFrontend.DefinitionStages.WithFrontend.fromNewPublicIPAddress()"
  fullName: "com.azure.resourcemanager.network.models.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromNewPublicIPAddress()"
  name: "fromNewPublicIPAddress()"
  nameWithType: "HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromNewPublicIPAddress()"
  summary: "Specifies that network traffic should be received on a new public IP address that is to be automatically created woth default settings along with the load balancer."
  modifiers:
  - "abstract"
  syntax: "public abstract ReturnT fromNewPublicIPAddress()"
  desc: "Specifies that network traffic should be received on a new public IP address that is to be automatically created woth default settings along with the load balancer.\n\nA new automatically-named public frontend will be implicitly created on this load balancer for each such new public IP address."
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"ReturnT?alt=ReturnT&text=ReturnT\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.network.models.HasFrontend.DefinitionStages.WithFrontend.fromNewPublicIPAddress(com.azure.resourcemanager.resources.fluentcore.model.Creatable<com.azure.resourcemanager.network.models.PublicIpAddress>)"
  fullName: "com.azure.resourcemanager.network.models.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromNewPublicIPAddress(Creatable<PublicIpAddress> pipDefinition)"
  name: "fromNewPublicIPAddress(Creatable<PublicIpAddress> pipDefinition)"
  nameWithType: "HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromNewPublicIPAddress(Creatable<PublicIpAddress> pipDefinition)"
  summary: "Specifies that network traffic should be received on a new public IP address that is to be created along with the load balancer based on the provided definition."
  modifiers:
  - "abstract"
  parameters:
  - description: "a definition for the new public IP"
    name: "pipDefinition"
    type: "<xref href=\"com.azure.resourcemanager.resources.fluentcore.model.Creatable?alt=com.azure.resourcemanager.resources.fluentcore.model.Creatable&text=Creatable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.network.models.PublicIpAddress?alt=com.azure.resourcemanager.network.models.PublicIpAddress&text=PublicIpAddress\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ReturnT fromNewPublicIPAddress(Creatable<PublicIpAddress> pipDefinition)"
  desc: "Specifies that network traffic should be received on a new public IP address that is to be created along with the load balancer based on the provided definition.\n\nA new automatically-named public frontend will be implicitly created on this load balancer for each such new public IP address."
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"ReturnT?alt=ReturnT&text=ReturnT\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.network.models.HasFrontend.DefinitionStages.WithFrontend.fromNewPublicIPAddress(java.lang.String)"
  fullName: "com.azure.resourcemanager.network.models.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromNewPublicIPAddress(String leafDnsLabel)"
  name: "fromNewPublicIPAddress(String leafDnsLabel)"
  nameWithType: "HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromNewPublicIPAddress(String leafDnsLabel)"
  summary: "Specifies that network traffic should be received on a new public IP address that is to be created along with the load balancer in the same region and resource group but under the provided leaf DNS label, assuming it is available."
  modifiers:
  - "abstract"
  parameters:
  - description: "a unique leaf DNS label to create the public IP address under"
    name: "leafDnsLabel"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract ReturnT fromNewPublicIPAddress(String leafDnsLabel)"
  desc: "Specifies that network traffic should be received on a new public IP address that is to be created along with the load balancer in the same region and resource group but under the provided leaf DNS label, assuming it is available.\n\nA new automatically-named public frontend will be implicitly created on this load balancer for each such new public IP address, so make sure to use a unique DNS label."
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"ReturnT?alt=ReturnT&text=ReturnT\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
typeParameters:
- description: "the next stage of the definition"
  name: "ReturnT"
desc: "The stage of a definition allowing to specify a load balancer frontend."
metadata: {}
package: "com.azure.resourcemanager.network.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-network:2.19.0
