### YamlMime:JavaMember
uid: "com.azure.security.keyvault.keys.KeyAsyncClient.importKey*"
fullName: "com.azure.security.keyvault.keys.KeyAsyncClient.importKey"
name: "importKey"
nameWithType: "KeyAsyncClient.importKey"
members:
- uid: "com.azure.security.keyvault.keys.KeyAsyncClient.importKey(com.azure.security.keyvault.keys.models.ImportKeyOptions)"
  fullName: "com.azure.security.keyvault.keys.KeyAsyncClient.importKey(ImportKeyOptions importKeyOptions)"
  name: "importKey(ImportKeyOptions importKeyOptions)"
  nameWithType: "KeyAsyncClient.importKey(ImportKeyOptions importKeyOptions)"
  summary: "Imports an externally created key and stores it in key vault. The import key operation may be used to import any key type into the Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the `keys/import` permission.\n\nThe `keyImportOptions` is required and its fields <xref uid=\"com.azure.security.keyvault.keys.models.ImportKeyOptions.getName*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"name\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.models.ImportKeyOptions.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key material\"></xref> cannot be null. The <xref uid=\"com.azure.security.keyvault.keys.models.ImportKeyOptions.getExpiresOn*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"expires\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.models.ImportKeyOptions.getNotBefore*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"notBefore\"></xref> values in `keyImportOptions` are optional. If not specified, no values are set for the fields. The <xref uid=\"com.azure.security.keyvault.keys.models.ImportKeyOptions.isEnabled*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"enabled\"></xref> field is set to true and the <xref uid=\"com.azure.security.keyvault.keys.models.ImportKeyOptions.isHardwareProtected()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"hsm\"></xref> field is set to false by Azure Key Vault, if they are not specified.\n\n**Code Samples**\n\nImports a new key into key vault. Subscribes to the call asynchronously and prints out the newly imported key details when a response has been received.\n\n```java\nImportKeyOptions options = new ImportKeyOptions(\"keyName\", jsonWebKeyToImport)\n     .setHardwareProtected(false);\n keyAsyncClient.importKey(options).subscribe(keyResponse ->\n     System.out.printf(\"Key is imported with name %s and id %s \\n\", keyResponse.getName(), keyResponse.getId()));\n```"
  parameters:
  - description: "The key import configuration object containing information about the json web key\n     being imported."
    name: "importKeyOptions"
    type: "<xref href=\"com.azure.security.keyvault.keys.models.ImportKeyOptions?alt=com.azure.security.keyvault.keys.models.ImportKeyOptions&text=ImportKeyOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<KeyVaultKey> importKey(ImportKeyOptions importKeyOptions)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"imported key\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.models.KeyVaultKey?alt=com.azure.security.keyvault.keys.models.KeyVaultKey&text=KeyVaultKey\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.keys.KeyAsyncClient.importKey(java.lang.String,com.azure.security.keyvault.keys.models.JsonWebKey)"
  fullName: "com.azure.security.keyvault.keys.KeyAsyncClient.importKey(String name, JsonWebKey keyMaterial)"
  name: "importKey(String name, JsonWebKey keyMaterial)"
  nameWithType: "KeyAsyncClient.importKey(String name, JsonWebKey keyMaterial)"
  summary: "Imports an externally created key and stores it in key vault. The import key operation may be used to import any key type into the Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the `keys/import` permission.\n\n**Code Samples**\n\nImports a new key into key vault. Subscribes to the call asynchronously and prints out the newly imported key details when a response has been received.\n\n```java\nkeyAsyncClient.importKey(\"keyName\", jsonWebKeyToImport).subscribe(keyResponse ->\n     System.out.printf(\"Key is imported with name %s and id %s \\n\", keyResponse.getName(), keyResponse.getId()));\n```"
  parameters:
  - description: "The name for the imported key."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Json web key being imported."
    name: "keyMaterial"
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<KeyVaultKey> importKey(String name, JsonWebKey keyMaterial)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"imported key\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.models.KeyVaultKey?alt=com.azure.security.keyvault.keys.models.KeyVaultKey&text=KeyVaultKey\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.security.keyvault.keys"
artifact: com.azure:azure-security-keyvault-keys:4.2.3
