### YamlMime:JavaType
uid: "com.azure.storage.blob.BlobServiceClient"
fullName: "com.azure.storage.blob.BlobServiceClient"
name: "BlobServiceClient"
nameWithType: "BlobServiceClient"
summary: "Client to a storage account."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class BlobServiceClient"
methods:
- uid: "com.azure.storage.blob.BlobServiceClient.createBlobContainer(java.lang.String)"
  fullName: "com.azure.storage.blob.BlobServiceClient.createBlobContainer(String containerName)"
  name: "createBlobContainer(String containerName)"
  nameWithType: "BlobServiceClient.createBlobContainer(String containerName)"
  summary: "Creates a new container within a storage account."
  parameters:
  - description: "Name of the container to create"
    name: "containerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobContainerClient createBlobContainer(String containerName)"
  desc: "Creates a new container within a storage account. If a container with the same name already exists, the operation fails. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobContainerClient blobContainerClient = client.createBlobContainer(\"containerName\");\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  returns:
    description: "The <xref uid=\"com.azure.storage.blob.BlobContainerClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobContainerClient\"></xref> used to interact with the container created."
    type: "<xref href=\"com.azure.storage.blob.BlobContainerClient?alt=com.azure.storage.blob.BlobContainerClient&text=BlobContainerClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobServiceClient.createBlobContainerIfNotExists(java.lang.String)"
  fullName: "com.azure.storage.blob.BlobServiceClient.createBlobContainerIfNotExists(String containerName)"
  name: "createBlobContainerIfNotExists(String containerName)"
  nameWithType: "BlobServiceClient.createBlobContainerIfNotExists(String containerName)"
  summary: "Creates a new container within a storage account if it does not exist."
  parameters:
  - description: "Name of the container to create"
    name: "containerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobContainerClient createBlobContainerIfNotExists(String containerName)"
  desc: "Creates a new container within a storage account if it does not exist. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobContainerClient blobContainerClient = client.createBlobContainerIfNotExists(\"containerName\");\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  returns:
    description: "The <xref uid=\"com.azure.storage.blob.BlobContainerClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobContainerClient\"></xref> used to interact with the container created."
    type: "<xref href=\"com.azure.storage.blob.BlobContainerClient?alt=com.azure.storage.blob.BlobContainerClient&text=BlobContainerClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobServiceClient.createBlobContainerIfNotExistsWithResponse(java.lang.String,com.azure.storage.blob.options.BlobContainerCreateOptions,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobServiceClient.createBlobContainerIfNotExistsWithResponse(String containerName, BlobContainerCreateOptions options, Context context)"
  name: "createBlobContainerIfNotExistsWithResponse(String containerName, BlobContainerCreateOptions options, Context context)"
  nameWithType: "BlobServiceClient.createBlobContainerIfNotExistsWithResponse(String containerName, BlobContainerCreateOptions options, Context context)"
  summary: "Creates a new container within a storage account if it does not exist."
  parameters:
  - description: "Name of the container to create"
    name: "containerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.options.BlobContainerCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobContainerCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.BlobContainerCreateOptions?alt=com.azure.storage.blob.options.BlobContainerCreateOptions&text=BlobContainerCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BlobContainerClient> createBlobContainerIfNotExistsWithResponse(String containerName, BlobContainerCreateOptions options, Context context)"
  desc: "Creates a new container within a storage account if it does not exist. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n Context context = new Context(\"Key\", \"Value\");\n BlobContainerCreateOptions options = new BlobContainerCreateOptions().setMetadata(metadata)\n     .setPublicAccessType(PublicAccessType.CONTAINER);\n\n Response<BlobContainerClient> response = client.createBlobContainerIfNotExistsWithResponse(\"containerName\",\n     options, context);\n\n if (response.getStatusCode() == 409) {\n     System.out.println(\"Already existed.\");\n } else {\n     System.out.printf(\"Create completed with status %d%n\", response.getStatusCode());\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.storage.blob.BlobContainerClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobContainerClient\"></xref> used\n to interact with the container created. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 201, a new container was\n successfully created. If status code is 409, a container with the same name already existed at this location."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.BlobContainerClient?alt=com.azure.storage.blob.BlobContainerClient&text=BlobContainerClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobServiceClient.createBlobContainerWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.PublicAccessType,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobServiceClient.createBlobContainerWithResponse(String containerName, Map<String,String> metadata, PublicAccessType accessType, Context context)"
  name: "createBlobContainerWithResponse(String containerName, Map<String,String> metadata, PublicAccessType accessType, Context context)"
  nameWithType: "BlobServiceClient.createBlobContainerWithResponse(String containerName, Map<String,String> metadata, PublicAccessType accessType, Context context)"
  summary: "Creates a new container within a storage account."
  parameters:
  - description: "Name of the container to create"
    name: "containerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Metadata to associate with the container. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Specifies how the data in this container is available to the public. See the\n x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access."
    name: "accessType"
    type: "<xref href=\"com.azure.storage.blob.models.PublicAccessType?alt=com.azure.storage.blob.models.PublicAccessType&text=PublicAccessType\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BlobContainerClient> createBlobContainerWithResponse(String containerName, Map<String,String> metadata, PublicAccessType accessType, Context context)"
  desc: "Creates a new container within a storage account. If a container with the same name already exists, the operation fails. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n Context context = new Context(\"Key\", \"Value\");\n\n BlobContainerClient blobContainerClient = client.createBlobContainerWithResponse(\n     \"containerName\",\n     metadata,\n     PublicAccessType.CONTAINER,\n     context).getValue();\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.storage.blob.BlobContainerClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobContainerClient\"></xref> used\n to interact with the container created."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.BlobContainerClient?alt=com.azure.storage.blob.BlobContainerClient&text=BlobContainerClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobServiceClient.deleteBlobContainer(java.lang.String)"
  fullName: "com.azure.storage.blob.BlobServiceClient.deleteBlobContainer(String containerName)"
  name: "deleteBlobContainer(String containerName)"
  nameWithType: "BlobServiceClient.deleteBlobContainer(String containerName)"
  summary: "Deletes the specified container in the storage account."
  parameters:
  - description: "Name of the container to delete"
    name: "containerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteBlobContainer(String containerName)"
  desc: "Deletes the specified container in the storage account. If the container doesn't exist the operation fails. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\ntry {\n     client.deleteBlobContainer(\"container Name\");\n     System.out.printf(\"Delete container completed with status %n\");\n } catch (UnsupportedOperationException error) {\n     System.out.printf(\"Delete container failed: %s%n\", error);\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
- uid: "com.azure.storage.blob.BlobServiceClient.deleteBlobContainerIfExists(java.lang.String)"
  fullName: "com.azure.storage.blob.BlobServiceClient.deleteBlobContainerIfExists(String containerName)"
  name: "deleteBlobContainerIfExists(String containerName)"
  nameWithType: "BlobServiceClient.deleteBlobContainerIfExists(String containerName)"
  summary: "Deletes the specified container in the storage account if it exists."
  parameters:
  - description: "Name of the container to delete"
    name: "containerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean deleteBlobContainerIfExists(String containerName)"
  desc: "Deletes the specified container in the storage account if it exists. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nboolean result = client.deleteBlobContainerIfExists(\"container Name\");\n System.out.println(\"Delete container completed: \" + result);\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
  returns:
    description: "<code>true</code> if the container is successfully deleted, <code>false</code> if the container does not exist."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobServiceClient.deleteBlobContainerIfExistsWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobServiceClient.deleteBlobContainerIfExistsWithResponse(String containerName, Context context)"
  name: "deleteBlobContainerIfExistsWithResponse(String containerName, Context context)"
  nameWithType: "BlobServiceClient.deleteBlobContainerIfExistsWithResponse(String containerName, Context context)"
  summary: "Deletes the specified container in the storage account if it exists."
  parameters:
  - description: "Name of the container to delete"
    name: "containerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Boolean> deleteBlobContainerIfExistsWithResponse(String containerName, Context context)"
  desc: "Deletes the specified container in the storage account if it exists. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nContext context = new Context(\"Key\", \"Value\");\n\n Response<Boolean> response = client.deleteBlobContainerIfExistsWithResponse(\"containerName\", context);\n if (response.getStatusCode() == 404) {\n     System.out.println(\"Does not exist.\");\n } else {\n     System.out.printf(\"Delete completed with status %d%n\", response.getStatusCode());\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
  returns:
    description: "A response containing status code and HTTP headers. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 202, the blob\n container was successfully deleted. If status code is 404, the container does not exist."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobServiceClient.deleteBlobContainerWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobServiceClient.deleteBlobContainerWithResponse(String containerName, Context context)"
  name: "deleteBlobContainerWithResponse(String containerName, Context context)"
  nameWithType: "BlobServiceClient.deleteBlobContainerWithResponse(String containerName, Context context)"
  summary: "Deletes the specified container in the storage account."
  parameters:
  - description: "Name of the container to delete"
    name: "containerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteBlobContainerWithResponse(String containerName, Context context)"
  desc: "Deletes the specified container in the storage account. If the container doesn't exist the operation fails. For more information see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
  returns:
    description: "A response containing status code and HTTP headers"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobServiceClient.findBlobsByTags(com.azure.storage.blob.options.FindBlobsOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobServiceClient.findBlobsByTags(FindBlobsOptions options, Duration timeout, Context context)"
  name: "findBlobsByTags(FindBlobsOptions options, Duration timeout, Context context)"
  nameWithType: "BlobServiceClient.findBlobsByTags(FindBlobsOptions options, Duration timeout, Context context)"
  summary: "Returns a lazy loaded list of blobs in this account whose tags match the query expression."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.FindBlobsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FindBlobsOptions\"></xref>. If iterating by page, the page size passed to byPage methods such as\n <xref uid=\"com.azure.core.http.rest.PagedIterable.iterableByPage*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable#iterableByPage(int)\"></xref> will be preferred over the value set on these options."
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.FindBlobsOptions?alt=com.azure.storage.blob.options.FindBlobsOptions&text=FindBlobsOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<TaggedBlobItem> findBlobsByTags(FindBlobsOptions options, Duration timeout, Context context)"
  desc: "Returns a lazy loaded list of blobs in this account whose tags match the query expression. The returned <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> can be consumed while new items are automatically retrieved as needed. For more information, including information on the query syntax, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nContext context = new Context(\"Key\", \"Value\");\n client.findBlobsByTags(new FindBlobsOptions(\"where=tag=value\").setMaxResultsPerPage(10), timeout, context)\n     .forEach(blob -> System.out.printf(\"Name: %s%n\", blob.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/find-blobs-by-tags"
  returns:
    description: "The list of blobs."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.TaggedBlobItem?alt=com.azure.storage.blob.models.TaggedBlobItem&text=TaggedBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobServiceClient.findBlobsByTags(java.lang.String)"
  fullName: "com.azure.storage.blob.BlobServiceClient.findBlobsByTags(String query)"
  name: "findBlobsByTags(String query)"
  nameWithType: "BlobServiceClient.findBlobsByTags(String query)"
  summary: "Returns a lazy loaded list of blobs in this account whose tags match the query expression."
  parameters:
  - description: "Filters the results to return only blobs whose tags match the specified expression."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<TaggedBlobItem> findBlobsByTags(String query)"
  desc: "Returns a lazy loaded list of blobs in this account whose tags match the query expression. The returned <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> can be consumed while new items are automatically retrieved as needed. For more information, including information on the query syntax, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.findBlobsByTags(\"where=tag=value\").forEach(blob -> System.out.printf(\"Name: %s%n\", blob.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/find-blobs-by-tags"
  returns:
    description: "The list of blobs."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.TaggedBlobItem?alt=com.azure.storage.blob.models.TaggedBlobItem&text=TaggedBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobServiceClient.generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues)"
  fullName: "com.azure.storage.blob.BlobServiceClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)"
  name: "generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)"
  nameWithType: "BlobServiceClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)"
  summary: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>"
    name: "accountSasSignatureValues"
    type: "<xref href=\"com.azure.storage.common.sas.AccountSasSignatureValues?alt=com.azure.storage.common.sas.AccountSasSignatureValues&text=AccountSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)"
  desc: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>.\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref> for more information on how to construct an account SAS.\n\n**Generating an account SAS**\n\nThe snippet below generates an AccountSasSignatureValues object that lasts for two days and gives the user read and list access to blob and file shares.\n\n```java\nAccountSasPermission permissions = new AccountSasPermission()\n     .setListPermission(true)\n     .setReadPermission(true);\n AccountSasResourceType resourceTypes = new AccountSasResourceType().setContainer(true);\n AccountSasService services = new AccountSasService().setBlobAccess(true).setFileAccess(true);\n OffsetDateTime expiryTime = OffsetDateTime.now().plus(Duration.ofDays(2));\n\n AccountSasSignatureValues sasValues =\n     new AccountSasSignatureValues(expiryTime, permissions, services, resourceTypes);\n\n // Client must be authenticated via StorageSharedKeyCredential\n String sas = client.generateAccountSas(sasValues);\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobServiceClient.generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobServiceClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues, Context context)"
  name: "generateAccountSas(AccountSasSignatureValues accountSasSignatureValues, Context context)"
  nameWithType: "BlobServiceClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues, Context context)"
  summary: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>"
    name: "accountSasSignatureValues"
    type: "<xref href=\"com.azure.storage.common.sas.AccountSasSignatureValues?alt=com.azure.storage.common.sas.AccountSasSignatureValues&text=AccountSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the code when generating a SAS."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateAccountSas(AccountSasSignatureValues accountSasSignatureValues, Context context)"
  desc: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>.\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref> for more information on how to construct an account SAS.\n\n**Generating an account SAS**\n\nThe snippet below generates an AccountSasSignatureValues object that lasts for two days and gives the user read and list access to blob and file shares.\n\n```java\nAccountSasPermission permissions = new AccountSasPermission()\n     .setListPermission(true)\n     .setReadPermission(true);\n AccountSasResourceType resourceTypes = new AccountSasResourceType().setContainer(true);\n AccountSasService services = new AccountSasService().setBlobAccess(true).setFileAccess(true);\n OffsetDateTime expiryTime = OffsetDateTime.now().plus(Duration.ofDays(2));\n\n AccountSasSignatureValues sasValues =\n     new AccountSasSignatureValues(expiryTime, permissions, services, resourceTypes);\n\n // Client must be authenticated via StorageSharedKeyCredential\n String sas = client.generateAccountSas(sasValues, new Context(\"key\", \"value\"));\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobServiceClient.getAccountInfo()"
  fullName: "com.azure.storage.blob.BlobServiceClient.getAccountInfo()"
  name: "getAccountInfo()"
  nameWithType: "BlobServiceClient.getAccountInfo()"
  summary: "Returns the sku name and account kind for the account."
  syntax: "public StorageAccountInfo getAccountInfo()"
  desc: "Returns the sku name and account kind for the account. For more information, please see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nStorageAccountInfo accountInfo = client.getAccountInfo();\n\n System.out.printf(\"Account kind: %s, SKU: %s%n\", accountInfo.getAccountKind(), accountInfo.getSkuName());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-account-information"
  returns:
    description: "The storage account info."
    type: "<xref href=\"com.azure.storage.blob.models.StorageAccountInfo?alt=com.azure.storage.blob.models.StorageAccountInfo&text=StorageAccountInfo\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobServiceClient.getAccountInfoWithResponse(java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobServiceClient.getAccountInfoWithResponse(Duration timeout, Context context)"
  name: "getAccountInfoWithResponse(Duration timeout, Context context)"
  nameWithType: "BlobServiceClient.getAccountInfoWithResponse(Duration timeout, Context context)"
  summary: "Returns the sku name and account kind for the account."
  parameters:
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<StorageAccountInfo> getAccountInfoWithResponse(Duration timeout, Context context)"
  desc: "Returns the sku name and account kind for the account. For more information, please see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-account-information"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the storage account info."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.StorageAccountInfo?alt=com.azure.storage.blob.models.StorageAccountInfo&text=StorageAccountInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobServiceClient.getAccountName()"
  fullName: "com.azure.storage.blob.BlobServiceClient.getAccountName()"
  name: "getAccountName()"
  nameWithType: "BlobServiceClient.getAccountName()"
  summary: "Get associated account name."
  syntax: "public String getAccountName()"
  desc: "Get associated account name."
  returns:
    description: "account name associated with this storage resource."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobServiceClient.getAccountUrl()"
  fullName: "com.azure.storage.blob.BlobServiceClient.getAccountUrl()"
  name: "getAccountUrl()"
  nameWithType: "BlobServiceClient.getAccountUrl()"
  summary: "Gets the URL of the storage account represented by this client."
  syntax: "public String getAccountUrl()"
  desc: "Gets the URL of the storage account represented by this client."
  returns:
    description: "the URL."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobServiceClient.getBlobContainerClient(java.lang.String)"
  fullName: "com.azure.storage.blob.BlobServiceClient.getBlobContainerClient(String containerName)"
  name: "getBlobContainerClient(String containerName)"
  nameWithType: "BlobServiceClient.getBlobContainerClient(String containerName)"
  summary: "Initializes a <xref uid=\"com.azure.storage.blob.BlobContainerClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobContainerClient\"></xref> object pointing to the specified container."
  parameters:
  - description: "The name of the container to point to."
    name: "containerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobContainerClient getBlobContainerClient(String containerName)"
  desc: "Initializes a <xref uid=\"com.azure.storage.blob.BlobContainerClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobContainerClient\"></xref> object pointing to the specified container. This method does not create a container. It simply constructs the URL to the container and offers access to methods relevant to containers.\n\n**Code Samples**\n\n```java\nBlobContainerClient blobContainerClient = client.getBlobContainerClient(\"containerName\");\n```"
  returns:
    description: "A <xref uid=\"com.azure.storage.blob.BlobContainerClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobContainerClient\"></xref> object pointing to the specified container"
    type: "<xref href=\"com.azure.storage.blob.BlobContainerClient?alt=com.azure.storage.blob.BlobContainerClient&text=BlobContainerClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobServiceClient.getHttpPipeline()"
  fullName: "com.azure.storage.blob.BlobServiceClient.getHttpPipeline()"
  name: "getHttpPipeline()"
  nameWithType: "BlobServiceClient.getHttpPipeline()"
  summary: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  syntax: "public HttpPipeline getHttpPipeline()"
  desc: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  returns:
    description: "The pipeline."
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobServiceClient.getProperties()"
  fullName: "com.azure.storage.blob.BlobServiceClient.getProperties()"
  name: "getProperties()"
  nameWithType: "BlobServiceClient.getProperties()"
  summary: "Gets the properties of a storage account\\\\u2019s Blob service."
  syntax: "public BlobServiceProperties getProperties()"
  desc: "Gets the properties of a storage account\\\\u2019s Blob service. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobServiceProperties properties = client.getProperties();\n\n System.out.printf(\"Hour metrics enabled: %b, Minute metrics enabled: %b%n\",\n     properties.getHourMetrics().isEnabled(),\n     properties.getMinuteMetrics().isEnabled());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob-service-properties"
  returns:
    description: "The storage account properties."
    type: "<xref href=\"com.azure.storage.blob.models.BlobServiceProperties?alt=com.azure.storage.blob.models.BlobServiceProperties&text=BlobServiceProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobServiceClient.getPropertiesWithResponse(java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobServiceClient.getPropertiesWithResponse(Duration timeout, Context context)"
  name: "getPropertiesWithResponse(Duration timeout, Context context)"
  nameWithType: "BlobServiceClient.getPropertiesWithResponse(Duration timeout, Context context)"
  summary: "Gets the properties of a storage account\\\\u2019s Blob service."
  parameters:
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BlobServiceProperties> getPropertiesWithResponse(Duration timeout, Context context)"
  desc: "Gets the properties of a storage account\\\\u2019s Blob service. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nContext context = new Context(\"Key\", \"Value\");\n BlobServiceProperties properties = client.getPropertiesWithResponse(timeout, context).getValue();\n\n System.out.printf(\"Hour metrics enabled: %b, Minute metrics enabled: %b%n\",\n     properties.getHourMetrics().isEnabled(),\n     properties.getMinuteMetrics().isEnabled());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob-service-properties"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the storage account properties."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobServiceProperties?alt=com.azure.storage.blob.models.BlobServiceProperties&text=BlobServiceProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobServiceClient.getServiceVersion()"
  fullName: "com.azure.storage.blob.BlobServiceClient.getServiceVersion()"
  name: "getServiceVersion()"
  nameWithType: "BlobServiceClient.getServiceVersion()"
  summary: "Gets the service version the client is using."
  syntax: "public BlobServiceVersion getServiceVersion()"
  desc: "Gets the service version the client is using."
  returns:
    description: "the service version the client is using."
    type: "<xref href=\"com.azure.storage.blob.BlobServiceVersion?alt=com.azure.storage.blob.BlobServiceVersion&text=BlobServiceVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobServiceClient.getStatistics()"
  fullName: "com.azure.storage.blob.BlobServiceClient.getStatistics()"
  name: "getStatistics()"
  nameWithType: "BlobServiceClient.getStatistics()"
  summary: "Retrieves statistics related to replication for the Blob service."
  syntax: "public BlobServiceStatistics getStatistics()"
  desc: "Retrieves statistics related to replication for the Blob service. It is only available on the secondary location endpoint when read-access geo-redundant replication is enabled for the storage account. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"Geo-replication status: %s%n\",\n     client.getStatistics().getGeoReplication().getStatus());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob-service-stats"
  returns:
    description: "The storage account statistics."
    type: "<xref href=\"com.azure.storage.blob.models.BlobServiceStatistics?alt=com.azure.storage.blob.models.BlobServiceStatistics&text=BlobServiceStatistics\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobServiceClient.getStatisticsWithResponse(java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobServiceClient.getStatisticsWithResponse(Duration timeout, Context context)"
  name: "getStatisticsWithResponse(Duration timeout, Context context)"
  nameWithType: "BlobServiceClient.getStatisticsWithResponse(Duration timeout, Context context)"
  summary: "Retrieves statistics related to replication for the Blob service."
  parameters:
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BlobServiceStatistics> getStatisticsWithResponse(Duration timeout, Context context)"
  desc: "Retrieves statistics related to replication for the Blob service. It is only available on the secondary location endpoint when read-access geo-redundant replication is enabled for the storage account. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"Geo-replication status: %s%n\",\n     client.getStatisticsWithResponse(timeout, context).getValue().getGeoReplication().getStatus());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob-service-stats"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> the storage account statistics."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobServiceStatistics?alt=com.azure.storage.blob.models.BlobServiceStatistics&text=BlobServiceStatistics\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobServiceClient.getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)"
  fullName: "com.azure.storage.blob.BlobServiceClient.getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)"
  name: "getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)"
  nameWithType: "BlobServiceClient.getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)"
  summary: "Gets a user delegation key for use with this account's blob storage."
  parameters:
  - description: "Start time for the key's validity. Null indicates immediate start."
    name: "start"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "Expiration of the key's validity."
    name: "expiry"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public UserDelegationKey getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)"
  desc: "Gets a user delegation key for use with this account's blob storage. Note: This method call is only valid when using <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential\"></xref> in this object's <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref>.\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"User delegation key: %s%n\",\n     client.getUserDelegationKey(delegationKeyStartTime, delegationKeyExpiryTime));\n```"
  returns:
    description: "The user delegation key."
    type: "<xref href=\"com.azure.storage.blob.models.UserDelegationKey?alt=com.azure.storage.blob.models.UserDelegationKey&text=UserDelegationKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobServiceClient.getUserDelegationKeyWithResponse(java.time.OffsetDateTime,java.time.OffsetDateTime,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobServiceClient.getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry, Duration timeout, Context context)"
  name: "getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry, Duration timeout, Context context)"
  nameWithType: "BlobServiceClient.getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry, Duration timeout, Context context)"
  summary: "Gets a user delegation key for use with this account's blob storage."
  parameters:
  - description: "Start time for the key's validity. Null indicates immediate start."
    name: "start"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "Expiration of the key's validity."
    name: "expiry"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<UserDelegationKey> getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry, Duration timeout, Context context)"
  desc: "Gets a user delegation key for use with this account's blob storage. Note: This method call is only valid when using <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential\"></xref> in this object's <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref>.\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"User delegation key: %s%n\",\n     client.getUserDelegationKeyWithResponse(delegationKeyStartTime, delegationKeyExpiryTime, timeout, context));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the user delegation key."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.UserDelegationKey?alt=com.azure.storage.blob.models.UserDelegationKey&text=UserDelegationKey\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobServiceClient.listBlobContainers()"
  fullName: "com.azure.storage.blob.BlobServiceClient.listBlobContainers()"
  name: "listBlobContainers()"
  nameWithType: "BlobServiceClient.listBlobContainers()"
  summary: "Returns a lazy loaded list of containers in this account."
  syntax: "public PagedIterable<BlobContainerItem> listBlobContainers()"
  desc: "Returns a lazy loaded list of containers in this account. The returned <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> can be consumed while new items are automatically retrieved as needed. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.listBlobContainers().forEach(container -> System.out.printf(\"Name: %s%n\", container.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-containers2"
  returns:
    description: "The list of containers."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobContainerItem?alt=com.azure.storage.blob.models.BlobContainerItem&text=BlobContainerItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobServiceClient.listBlobContainers(com.azure.storage.blob.models.ListBlobContainersOptions,java.time.Duration)"
  fullName: "com.azure.storage.blob.BlobServiceClient.listBlobContainers(ListBlobContainersOptions options, Duration timeout)"
  name: "listBlobContainers(ListBlobContainersOptions options, Duration timeout)"
  nameWithType: "BlobServiceClient.listBlobContainers(ListBlobContainersOptions options, Duration timeout)"
  summary: "Returns a lazy loaded list of containers in this account."
  parameters:
  - description: "A <xref uid=\"com.azure.storage.blob.models.ListBlobContainersOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ListBlobContainersOptions\"></xref> which specifies what data should be returned by the service.\n If iterating by page, the page size passed to byPage methods such as\n <xref uid=\"com.azure.core.http.rest.PagedIterable.iterableByPage*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable#iterableByPage(int)\"></xref> will be preferred over the value set on these options."
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.models.ListBlobContainersOptions?alt=com.azure.storage.blob.models.ListBlobContainersOptions&text=ListBlobContainersOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BlobContainerItem> listBlobContainers(ListBlobContainersOptions options, Duration timeout)"
  desc: "Returns a lazy loaded list of containers in this account. The returned <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> can be consumed while new items are automatically retrieved as needed. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nListBlobContainersOptions options = new ListBlobContainersOptions()\n     .setPrefix(\"containerNamePrefixToMatch\")\n     .setDetails(new BlobContainerListDetails().setRetrieveMetadata(true));\n\n client.listBlobContainers(options, timeout).forEach(container -> System.out.printf(\"Name: %s%n\", container.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-containers2"
  returns:
    description: "The list of containers."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobContainerItem?alt=com.azure.storage.blob.models.BlobContainerItem&text=BlobContainerItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobServiceClient.setProperties(com.azure.storage.blob.models.BlobServiceProperties)"
  fullName: "com.azure.storage.blob.BlobServiceClient.setProperties(BlobServiceProperties properties)"
  name: "setProperties(BlobServiceProperties properties)"
  nameWithType: "BlobServiceClient.setProperties(BlobServiceProperties properties)"
  summary: "Sets properties for a storage account's Blob service endpoint."
  parameters:
  - description: "Configures the service."
    name: "properties"
    type: "<xref href=\"com.azure.storage.blob.models.BlobServiceProperties?alt=com.azure.storage.blob.models.BlobServiceProperties&text=BlobServiceProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setProperties(BlobServiceProperties properties)"
  desc: "Sets properties for a storage account's Blob service endpoint. For more information, see the [Azure Docs][]. Note that setting the default service version has no effect when using this client because this client explicitly sets the version header on each request, overriding the default.\n\nThis method checks to ensure the properties being sent follow the specifications indicated in the Azure Docs. If CORS policies are set, CORS parameters that are not set default to the empty string.\n\n**Code Samples**\n\n```java\nBlobRetentionPolicy loggingRetentionPolicy = new BlobRetentionPolicy().setEnabled(true).setDays(3);\n BlobRetentionPolicy metricsRetentionPolicy = new BlobRetentionPolicy().setEnabled(true).setDays(1);\n\n BlobServiceProperties properties = new BlobServiceProperties()\n     .setLogging(new BlobAnalyticsLogging()\n         .setWrite(true)\n         .setDelete(true)\n         .setRetentionPolicy(loggingRetentionPolicy))\n     .setHourMetrics(new BlobMetrics()\n         .setEnabled(true)\n         .setRetentionPolicy(metricsRetentionPolicy))\n     .setMinuteMetrics(new BlobMetrics()\n         .setEnabled(true)\n         .setRetentionPolicy(metricsRetentionPolicy));\n\n try {\n     client.setProperties(properties);\n     System.out.printf(\"Setting properties completed%n\");\n } catch (UnsupportedOperationException error) {\n     System.out.printf(\"Setting properties failed: %s%n\", error);\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-service-properties"
- uid: "com.azure.storage.blob.BlobServiceClient.setPropertiesWithResponse(com.azure.storage.blob.models.BlobServiceProperties,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobServiceClient.setPropertiesWithResponse(BlobServiceProperties properties, Duration timeout, Context context)"
  name: "setPropertiesWithResponse(BlobServiceProperties properties, Duration timeout, Context context)"
  nameWithType: "BlobServiceClient.setPropertiesWithResponse(BlobServiceProperties properties, Duration timeout, Context context)"
  summary: "Sets properties for a storage account's Blob service endpoint."
  parameters:
  - description: "Configures the service."
    name: "properties"
    type: "<xref href=\"com.azure.storage.blob.models.BlobServiceProperties?alt=com.azure.storage.blob.models.BlobServiceProperties&text=BlobServiceProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> setPropertiesWithResponse(BlobServiceProperties properties, Duration timeout, Context context)"
  desc: "Sets properties for a storage account's Blob service endpoint. For more information, see the [Azure Docs][]. Note that setting the default service version has no effect when using this client because this client explicitly sets the version header on each request, overriding the default.\n\nThis method checks to ensure the properties being sent follow the specifications indicated in the Azure Docs. If CORS policies are set, CORS parameters that are not set default to the empty string.\n\n**Code Samples**\n\n```java\nBlobRetentionPolicy loggingRetentionPolicy = new BlobRetentionPolicy().setEnabled(true).setDays(3);\n BlobRetentionPolicy metricsRetentionPolicy = new BlobRetentionPolicy().setEnabled(true).setDays(1);\n\n BlobServiceProperties properties = new BlobServiceProperties()\n     .setLogging(new BlobAnalyticsLogging()\n         .setWrite(true)\n         .setDelete(true)\n         .setRetentionPolicy(loggingRetentionPolicy))\n     .setHourMetrics(new BlobMetrics()\n         .setEnabled(true)\n         .setRetentionPolicy(metricsRetentionPolicy))\n     .setMinuteMetrics(new BlobMetrics()\n         .setEnabled(true)\n         .setRetentionPolicy(metricsRetentionPolicy));\n\n Context context = new Context(\"Key\", \"Value\");\n\n System.out.printf(\"Setting properties completed with status %d%n\",\n     client.setPropertiesWithResponse(properties, timeout, context).getStatusCode());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-service-properties"
  returns:
    description: "The storage account properties."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobServiceClient.undeleteBlobContainer(java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.blob.BlobServiceClient.undeleteBlobContainer(String deletedContainerName, String deletedContainerVersion)"
  name: "undeleteBlobContainer(String deletedContainerName, String deletedContainerVersion)"
  nameWithType: "BlobServiceClient.undeleteBlobContainer(String deletedContainerName, String deletedContainerVersion)"
  summary: "Restores a previously deleted container."
  parameters:
  - description: "The name of the previously deleted container."
    name: "deletedContainerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The version of the previously deleted container."
    name: "deletedContainerVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobContainerClient undeleteBlobContainer(String deletedContainerName, String deletedContainerVersion)"
  desc: "Restores a previously deleted container. If the container associated with provided `deletedContainerName` already exists, this call will result in a 409 (conflict). This API is only functional if Container Soft Delete is enabled for the storage account associated with the container.\n\n**Code Samples**\n\n```java\nListBlobContainersOptions listBlobContainersOptions = new ListBlobContainersOptions();\n listBlobContainersOptions.getDetails().setRetrieveDeleted(true);\n client.listBlobContainers(listBlobContainersOptions, null).forEach(\n     deletedContainer -> {\n         BlobContainerClient blobContainerClient = client.undeleteBlobContainer(\n             deletedContainer.getName(), deletedContainer.getVersion());\n     }\n );\n```"
  returns:
    description: "The <xref uid=\"com.azure.storage.blob.BlobContainerClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobContainerClient\"></xref> used to interact with the restored container."
    type: "<xref href=\"com.azure.storage.blob.BlobContainerClient?alt=com.azure.storage.blob.BlobContainerClient&text=BlobContainerClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobServiceClient.undeleteBlobContainerWithResponse(com.azure.storage.blob.options.UndeleteBlobContainerOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobServiceClient.undeleteBlobContainerWithResponse(UndeleteBlobContainerOptions options, Duration timeout, Context context)"
  name: "undeleteBlobContainerWithResponse(UndeleteBlobContainerOptions options, Duration timeout, Context context)"
  nameWithType: "BlobServiceClient.undeleteBlobContainerWithResponse(UndeleteBlobContainerOptions options, Duration timeout, Context context)"
  summary: "Restores a previously deleted container."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.UndeleteBlobContainerOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UndeleteBlobContainerOptions\"></xref>."
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.UndeleteBlobContainerOptions?alt=com.azure.storage.blob.options.UndeleteBlobContainerOptions&text=UndeleteBlobContainerOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BlobContainerClient> undeleteBlobContainerWithResponse(UndeleteBlobContainerOptions options, Duration timeout, Context context)"
  desc: "Restores a previously deleted container. The restored container will be renamed to the `destinationContainerName` if provided in `options`. Otherwise `deletedContainerName` is used as destination container name. If the container associated with provided `destinationContainerName` already exists, this call will result in a 409 (conflict). This API is only functional if Container Soft Delete is enabled for the storage account associated with the container.\n\n**Code Samples**\n\n```java\nListBlobContainersOptions listBlobContainersOptions = new ListBlobContainersOptions();\n listBlobContainersOptions.getDetails().setRetrieveDeleted(true);\n client.listBlobContainers(listBlobContainersOptions, null).forEach(\n     deletedContainer -> {\n         BlobContainerClient blobContainerClient = client.undeleteBlobContainerWithResponse(\n             new UndeleteBlobContainerOptions(deletedContainer.getName(), deletedContainer.getVersion()),\n             timeout, context).getValue();\n     }\n );\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.storage.blob.BlobContainerClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobContainerClient\"></xref> used\n to interact with the restored container."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.BlobContainerClient?alt=com.azure.storage.blob.BlobContainerClient&text=BlobContainerClient\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Client to a storage account. It may only be instantiated through a <xref uid=\"com.azure.storage.blob.BlobServiceClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceClientBuilder\"></xref>. This class does not hold any state about a particular storage account but is instead a convenient way of sending off appropriate requests to the resource on the service. It may also be used to construct URLs to blobs and containers.\n\nThis client contains operations on a blob. Operations on a container are available on <xref uid=\"com.azure.storage.blob.BlobContainerClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobContainerClient\"></xref> through <xref uid=\"com.azure.storage.blob.BlobServiceClient.getBlobContainerClient(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getBlobContainerClient(String)\"></xref>, and operations on a blob are available on <xref uid=\"com.azure.storage.blob.BlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobClient\"></xref>.\n\nPlease see [here][] for more information on containers.\n\n\n[here]: https://docs.microsoft.com/azure/storage/blobs/storage-blobs-introduction"
metadata: {}
package: "com.azure.storage.blob"
artifact: com.azure:azure-storage-blob:12.19.0
