### YamlMime:JavaMember
nameWithType: Logger.setExternalLogger
type: method
members:
- fullName: com.microsoft.identity.client.Logger.setExternalLogger(final ILoggerCallback externalLogger)
  name: setExternalLogger(final ILoggerCallback externalLogger)
  nameWithType: Logger.setExternalLogger(final ILoggerCallback externalLogger)
  parameters:
  - description: <p>The reference to the <xref uid="com.microsoft.identity.client.ILoggerCallback" data-throw-if-not-resolved="false" data-raw-source="ILoggerCallback"></xref> that can output the logs to the designated places. </p>
    name: externalLogger
    type: final <xref href="com.microsoft.identity.client.ILoggerCallback?alt=com.microsoft.identity.client.ILoggerCallback&text=ILoggerCallback" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if external logger is already set, and the caller is trying to set it again. </p>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the custom logger. Configures external logging to configure a callback that the sdk will use to pass each log message. Overriding the logger callback is not allowed.</p>

    <p></p>
  syntax: public synchronized void setExternalLogger(final ILoggerCallback externalLogger)
  uid: com.microsoft.identity.client.Logger.setExternalLogger(final ILoggerCallback)
uid: com.microsoft.identity.client.Logger.setExternalLogger*
fullName: com.microsoft.identity.client.Logger.setExternalLogger
name: setExternalLogger(final ILoggerCallback externalLogger)
package: com.microsoft.identity.client
metadata: {}
