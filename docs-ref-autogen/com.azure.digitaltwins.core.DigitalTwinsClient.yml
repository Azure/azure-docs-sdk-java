### YamlMime:JavaType
uid: "com.azure.digitaltwins.core.DigitalTwinsClient"
fullName: "com.azure.digitaltwins.core.DigitalTwinsClient"
name: "DigitalTwinsClient"
nameWithType: "DigitalTwinsClient"
summary: "This class provides a client for interacting synchronously with an Azure Digital Twins instance."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class DigitalTwinsClient"
methods:
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>createOrReplaceDigitalTwin(java.lang.String,T,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>createOrReplaceDigitalTwin(String digitalTwinId, T digitalTwin, Class<T> clazz)"
  name: "<T>createOrReplaceDigitalTwin(String digitalTwinId, T digitalTwin, Class<T> clazz)"
  nameWithType: "DigitalTwinsClient.<T>createOrReplaceDigitalTwin(String digitalTwinId, T digitalTwin, Class<T> clazz)"
  summary: "Creates a digital twin."
  parameters:
  - description: "The Id of the digital twin. The Id is unique within the service and case sensitive."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application/json object representing the digital twin to create."
    name: "digitalTwin"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to serialize the request with and deserialize the response with."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>createOrReplaceDigitalTwin(String digitalTwinId, T digitalTwin, Class<T> clazz)"
  desc: "Creates a digital twin. If the provided digital twin Id is already in use, then this will attempt to replace the existing digital twin with the provided digital twin.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref> can be provided as the input parameter:\n\n```java\nString modelId = \"dtmi:com:samples:Building;1\";\n\n BasicDigitalTwin basicTwin = new BasicDigitalTwin(\"myDigitalTwinId\")\n     .setMetadata(\n         new BasicDigitalTwinMetadata()\n             .setModelId(modelId)\n     );\n\n BasicDigitalTwin createdTwin = digitalTwinsClient.createOrReplaceDigitalTwin(\n     basicTwin.getId(),\n     basicTwin,\n     BasicDigitalTwin.class);\n\n System.out.println(\"Created digital twin with Id: \" + createdTwin.getId());\n```\n\nOr alternatively String can be used as input and output type:\n\n```java\nString stringResult = digitalTwinsClient.createOrReplaceDigitalTwin(\n     \"myDigitalTwinId\",\n     digitalTwinStringPayload,\n     String.class);\n System.out.println(\"Created digital twin: \" + stringResult);\n```"
  returns:
    description: "The deserialized application/json object representing the digital twin created."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>createOrReplaceDigitalTwinWithResponse(java.lang.String,T,java.lang.Class<T>,com.azure.digitaltwins.core.models.CreateOrReplaceDigitalTwinOptions,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>createOrReplaceDigitalTwinWithResponse(String digitalTwinId, T digitalTwin, Class<T> clazz, CreateOrReplaceDigitalTwinOptions options, Context context)"
  name: "<T>createOrReplaceDigitalTwinWithResponse(String digitalTwinId, T digitalTwin, Class<T> clazz, CreateOrReplaceDigitalTwinOptions options, Context context)"
  nameWithType: "DigitalTwinsClient.<T>createOrReplaceDigitalTwinWithResponse(String digitalTwinId, T digitalTwin, Class<T> clazz, CreateOrReplaceDigitalTwinOptions options, Context context)"
  summary: "Creates a digital twin."
  parameters:
  - description: "The Id of the digital twin. The Id is unique within the service and case sensitive."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application/json object representing the digital twin to create."
    name: "digitalTwin"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to serialize the request with and deserialize the response with."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.CreateOrReplaceDigitalTwinOptions?alt=com.azure.digitaltwins.core.models.CreateOrReplaceDigitalTwinOptions&text=CreateOrReplaceDigitalTwinOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<T> <T>createOrReplaceDigitalTwinWithResponse(String digitalTwinId, T digitalTwin, Class<T> clazz, CreateOrReplaceDigitalTwinOptions options, Context context)"
  desc: "Creates a digital twin. If the provided digital twin Id is already in use, then this will attempt to replace the existing digital twin with the provided digital twin.\n\n**Code Samples**\n\nA strongly typed digital twin object type such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref> can be provided as the input parameter:\n\n```java\nString modelId = \"dtmi:com:samples:Building;1\";\n\n BasicDigitalTwin basicDigitalTwin = new BasicDigitalTwin(\"myDigitalTwinId\")\n     .setMetadata(\n         new BasicDigitalTwinMetadata()\n             .setModelId(modelId)\n     );\n\n Response<BasicDigitalTwin> resultWithResponse = digitalTwinsClient.createOrReplaceDigitalTwinWithResponse(\n     basicDigitalTwin.getId(),\n     basicDigitalTwin,\n     BasicDigitalTwin.class,\n     new CreateOrReplaceDigitalTwinOptions(),\n     new Context(\"Key\", \"Value\"));\n\n System.out.println(\"Response http status: \"\n     + resultWithResponse.getStatusCode()\n     + \" created digital twin Id: \"\n     + resultWithResponse.getValue().getId());\n```\n\nOr alternatively String can be used as input and output type:\n\n```java\nString stringResult = digitalTwinsClient.createOrReplaceDigitalTwin(\n     \"myDigitalTwinId\",\n     digitalTwinStringPayload,\n     String.class);\n System.out.println(\"Created digital twin: \" + stringResult);\n```"
  returns:
    description: "A <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsResponse\"></xref> containing the deserialized application/json object representing the digital twin created."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>createOrReplaceRelationship(java.lang.String,java.lang.String,T,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>createOrReplaceRelationship(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz)"
  name: "<T>createOrReplaceRelationship(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz)"
  nameWithType: "DigitalTwinsClient.<T>createOrReplaceRelationship(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz)"
  summary: "Creates a relationship on a digital twin."
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the relationship to be created."
    name: "relationshipId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application/json object representing the relationship to be created."
    name: "relationship"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class of the relationship."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>createOrReplaceRelationship(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz)"
  desc: "Creates a relationship on a digital twin. If the provided relationship Id is already in use, then this will attempt to replace the existing relationship with the provided relationship.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\nBasicRelationship buildingToFloorBasicRelationship = new BasicRelationship(\n         \"myRelationshipId\",\n         \"mySourceDigitalTwinId\",\n         \"myTargetDigitalTwinId\",\n         \"contains\")\n     .addProperty(\"Prop1\", \"Prop1 value\")\n     .addProperty(\"Prop2\", 6);\n\n BasicRelationship createdRelationship = digitalTwinsSyncClient.createOrReplaceRelationship(\n     \"mySourceDigitalTwinId\",\n     \"myRelationshipId\",\n     buildingToFloorBasicRelationship,\n     BasicRelationship.class);\n\n System.out.println(\n     \"Created relationship with Id: \"\n     + createdRelationship.getId()\n     + \" from: \" + createdRelationship.getSourceId()\n     + \" to: \" + createdRelationship.getTargetId());\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\nString relationshipPayload = getRelationshipPayload();\n\n String createdRelationshipString = digitalTwinsSyncClient.createOrReplaceRelationship(\n     \"mySourceDigitalTwinId\",\n     \"myRelationshipId\",\n     relationshipPayload,\n     String.class);\n\n System.out.println(\"Created relationship: \" + createdRelationshipString);\n```"
  returns:
    description: "The relationship created."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>createOrReplaceRelationshipWithResponse(java.lang.String,java.lang.String,T,java.lang.Class<T>,com.azure.digitaltwins.core.models.CreateOrReplaceRelationshipOptions,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>createOrReplaceRelationshipWithResponse(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz, CreateOrReplaceRelationshipOptions options, Context context)"
  name: "<T>createOrReplaceRelationshipWithResponse(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz, CreateOrReplaceRelationshipOptions options, Context context)"
  nameWithType: "DigitalTwinsClient.<T>createOrReplaceRelationshipWithResponse(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz, CreateOrReplaceRelationshipOptions options, Context context)"
  summary: "Creates a relationship on a digital twin."
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the relationship to be created."
    name: "relationshipId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application/json object representing the relationship to be created."
    name: "relationship"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class of the relationship."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.CreateOrReplaceRelationshipOptions?alt=com.azure.digitaltwins.core.models.CreateOrReplaceRelationshipOptions&text=CreateOrReplaceRelationshipOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DigitalTwinsResponse<T> <T>createOrReplaceRelationshipWithResponse(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz, CreateOrReplaceRelationshipOptions options, Context context)"
  desc: "Creates a relationship on a digital twin. If the provided relationship Id is already in use, then this will attempt to replace the existing relationship with the provided relationship.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\nBasicRelationship buildingToFloorBasicRelationship = new BasicRelationship(\n         \"myRelationshipId\",\n         \"mySourceDigitalTwinId\",\n         \"myTargetDigitalTwinId\",\n         \"contains\")\n     .addProperty(\"Prop1\", \"Prop1 value\")\n     .addProperty(\"Prop2\", 6);\n\n Response<BasicRelationship> createdRelationshipWithResponse =\n     digitalTwinsSyncClient.createOrReplaceRelationshipWithResponse(\n         \"mySourceDigitalTwinId\",\n         \"myRelationshipId\",\n         buildingToFloorBasicRelationship,\n         BasicRelationship.class,\n         new CreateOrReplaceRelationshipOptions(),\n         new Context(\"key\", \"value\"));\n\n System.out.println(\n     \"Created relationship with Id: \"\n     + createdRelationshipWithResponse.getValue().getId()\n     + \" from: \" + createdRelationshipWithResponse.getValue().getSourceId()\n     + \" to: \" + createdRelationshipWithResponse.getValue().getTargetId()\n     + \" Http status code: \"\n     + createdRelationshipWithResponse.getStatusCode());\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\nString relationshipPayload = getRelationshipPayload();\n\n Response<String> createdRelationshipStringWithResponse = digitalTwinsSyncClient.createOrReplaceRelationshipWithResponse(\n     \"mySourceDigitalTwinId\",\n     \"myRelationshipId\",\n     relationshipPayload,\n     String.class,\n     new CreateOrReplaceRelationshipOptions(),\n     new Context(\"key\", \"value\"));\n\n System.out.println(\n     \"Created relationship: \"\n     + createdRelationshipStringWithResponse\n     + \" With HTTP status code: \"\n     + createdRelationshipStringWithResponse.getStatusCode());\n```"
  returns:
    description: "A <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsResponse\"></xref> containing the relationship created."
    type: "<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse?alt=com.azure.digitaltwins.core.models.DigitalTwinsResponse&text=DigitalTwinsResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>getComponent(java.lang.String,java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>getComponent(String digitalTwinId, String componentName, Class<T> clazz)"
  name: "<T>getComponent(String digitalTwinId, String componentName, Class<T> clazz)"
  nameWithType: "DigitalTwinsClient.<T>getComponent(String digitalTwinId, String componentName, Class<T> clazz)"
  summary: "Get a component of a digital twin."
  parameters:
  - description: "The Id of the digital twin to get the component from."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the component on the digital twin to retrieve."
    name: "componentName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The class to deserialize the application/json component into."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>getComponent(String digitalTwinId, String componentName, Class<T> clazz)"
  desc: "Get a component of a digital twin.\n\n**Code Samples**\n\n```java\nString componentString = digitalTwinsSyncClient.getComponent(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     String.class);\n\n System.out.println(\"Retrieved component: \" + componentString);\n```"
  returns:
    description: "The deserialized application/json object representing the component of the digital twin."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>getComponentWithResponse(java.lang.String,java.lang.String,java.lang.Class<T>,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>getComponentWithResponse(String digitalTwinId, String componentName, Class<T> clazz, Context context)"
  name: "<T>getComponentWithResponse(String digitalTwinId, String componentName, Class<T> clazz, Context context)"
  nameWithType: "DigitalTwinsClient.<T>getComponentWithResponse(String digitalTwinId, String componentName, Class<T> clazz, Context context)"
  summary: "Get a component of a digital twin."
  parameters:
  - description: "The Id of the digital twin to get the component from."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the component on the digital twin to retrieve."
    name: "componentName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The class to deserialize the application/json component into."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DigitalTwinsResponse<T> <T>getComponentWithResponse(String digitalTwinId, String componentName, Class<T> clazz, Context context)"
  desc: "Get a component of a digital twin.\n\n**Code Samples**\n\n```java\nResponse<String> componentStringWithResponse = digitalTwinsSyncClient.getComponentWithResponse(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     String.class,\n     new Context(\"key\", \"value\"));\n\n System.out.println(\n     \"Received component get operation response with HTTP status code: \"\n     + componentStringWithResponse.getStatusCode());\n```"
  returns:
    description: "A <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsResponse\"></xref> containing the deserialized application/json object representing the component of the digital twin."
    type: "<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse?alt=com.azure.digitaltwins.core.models.DigitalTwinsResponse&text=DigitalTwinsResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>getDigitalTwin(java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>getDigitalTwin(String digitalTwinId, Class<T> clazz)"
  name: "<T>getDigitalTwin(String digitalTwinId, Class<T> clazz)"
  nameWithType: "DigitalTwinsClient.<T>getDigitalTwin(String digitalTwinId, Class<T> clazz)"
  summary: "Gets a digital twin."
  parameters:
  - description: "The Id of the digital twin. The Id is unique within the service and case sensitive."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to deserialize the response with."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>getDigitalTwin(String digitalTwinId, Class<T> clazz)"
  desc: "Gets a digital twin.\n\n**Code Samples**\n\nA Strongly typed object type such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref> can be provided as an input parameter for `clazz` to indicate what type is used to deserialize the response.\n\n```java\nBasicDigitalTwin basicTwinResult = digitalTwinsClient.getDigitalTwin(\n     \"myDigitalTwinId\",\n     BasicDigitalTwin.class);\n\n System.out.println(\"Retrieved digital twin with Id: \" + basicTwinResult.getId());\n```\n\nAlternatively String can be used to get the response in a json string format.\n\n```java\nString stringResult = digitalTwinsClient.getDigitalTwin(\"myDigitalTwinId\", String.class);\n\n System.out.println(\"Retrieved digital twin: \" + stringResult);\n```"
  returns:
    description: "The deserialized application/json object representing the digital twin."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>getDigitalTwinWithResponse(java.lang.String,java.lang.Class<T>,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context)"
  name: "<T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context)"
  nameWithType: "DigitalTwinsClient.<T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context)"
  summary: "Gets a digital twin."
  parameters:
  - description: "The Id of the digital twin. The Id is unique within the service and case sensitive."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to deserialize the response with."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DigitalTwinsResponse<T> <T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz, Context context)"
  desc: "Gets a digital twin.\n\n**Code Samples**\n\nA Strongly typed object type such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref> can be provided as an input parameter for `clazz` to indicate what type is used to deserialize the response.\n\n```java\nResponse<BasicDigitalTwin> basicTwinResultWithResponse = digitalTwinsClient.getDigitalTwinWithResponse(\n     \"myDigitalTwinId\",\n     BasicDigitalTwin.class,\n     new Context(\"key\", \"value\"));\n\n System.out.println(\"Http status code: \" + basicTwinResultWithResponse.getStatusCode());\n System.out.println(\"Retrieved digital twin with Id: \" + basicTwinResultWithResponse.getValue().getId());\n```\n\nAlternatively String can be used to get the response in a json string format.\n\n```java\nResponse<String> stringResultWithResponse = digitalTwinsClient.getDigitalTwinWithResponse(\n     \"myDigitalTwinId\",\n     String.class,\n     new Context(\"key\", \"value\"));\n\n System.out.println(\"Http response status: \" + stringResultWithResponse.getStatusCode());\n System.out.println(\"Retrieved digital twin: \" + stringResultWithResponse.getValue());\n```"
  returns:
    description: "A <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsResponse\"></xref> containing the deserialized application/json object representing the digital twin."
    type: "<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse?alt=com.azure.digitaltwins.core.models.DigitalTwinsResponse&text=DigitalTwinsResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>getRelationship(java.lang.String,java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>getRelationship(String digitalTwinId, String relationshipId, Class<T> clazz)"
  name: "<T>getRelationship(String digitalTwinId, String relationshipId, Class<T> clazz)"
  nameWithType: "DigitalTwinsClient.<T>getRelationship(String digitalTwinId, String relationshipId, Class<T> clazz)"
  summary: "Gets a relationship on a digital twin."
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the relationship to retrieve."
    name: "relationshipId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to deserialize the relationship into."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>getRelationship(String digitalTwinId, String relationshipId, Class<T> clazz)"
  desc: "Gets a relationship on a digital twin.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\nBasicRelationship retrievedRelationship = digitalTwinsSyncClient.getRelationship(\n     \"myDigitalTwinId\",\n     \"myRelationshipName\",\n     BasicRelationship.class);\n\n System.out.println(\n     \"Retrieved relationship with Id: \"\n     + retrievedRelationship.getId()\n     + \" from: \"\n     + retrievedRelationship.getSourceId()\n     + \" to: \" + retrievedRelationship.getTargetId());\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\nString retrievedRelationshipString = digitalTwinsSyncClient.getRelationship(\n     \"myDigitalTwinId\",\n     \"myRelationshipName\",\n     String.class);\n\n System.out.println(\"Retrieved relationship: \" + retrievedRelationshipString);\n```"
  returns:
    description: "The deserialized relationship."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>getRelationshipWithResponse(java.lang.String,java.lang.String,java.lang.Class<T>,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>getRelationshipWithResponse(String digitalTwinId, String relationshipId, Class<T> clazz, Context context)"
  name: "<T>getRelationshipWithResponse(String digitalTwinId, String relationshipId, Class<T> clazz, Context context)"
  nameWithType: "DigitalTwinsClient.<T>getRelationshipWithResponse(String digitalTwinId, String relationshipId, Class<T> clazz, Context context)"
  summary: "Gets a relationship on a digital twin."
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the relationship to retrieve."
    name: "relationshipId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to deserialize the relationship into."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DigitalTwinsResponse<T> <T>getRelationshipWithResponse(String digitalTwinId, String relationshipId, Class<T> clazz, Context context)"
  desc: "Gets a relationship on a digital twin.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\nResponse<BasicRelationship> retrievedRelationshipWithResponse =\n     digitalTwinsSyncClient.getRelationshipWithResponse(\n         \"myDigitalTwinId\",\n         \"myRelationshipName\",\n         BasicRelationship.class,\n         new Context(\"key\", \"value\"));\n\n System.out.println(\n     \"Retrieved relationship with Id: \"\n         + retrievedRelationshipWithResponse.getValue().getId()\n         + \" from: \"\n         + retrievedRelationshipWithResponse.getValue().getSourceId()\n         + \" to: \" + retrievedRelationshipWithResponse.getValue().getTargetId()\n         + \"HTTP status code: \" + retrievedRelationshipWithResponse.getStatusCode());\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\nResponse<String> retrievedRelationshipString = digitalTwinsSyncClient.getRelationshipWithResponse(\n     \"myDigitalTwinId\",\n     \"myRelationshipName\",\n     String.class,\n     new Context(\"key\", \"value\"));\n\n System.out.println(\n     \"Retrieved relationship: \"\n     + retrievedRelationshipString\n     + \" HTTP status code: \"\n     + retrievedRelationshipString.getStatusCode());\n```"
  returns:
    description: "A <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsResponse\"></xref> containing the deserialized relationship."
    type: "<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse?alt=com.azure.digitaltwins.core.models.DigitalTwinsResponse&text=DigitalTwinsResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>listRelationships(java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>listRelationships(String digitalTwinId, Class<T> clazz)"
  name: "<T>listRelationships(String digitalTwinId, Class<T> clazz)"
  nameWithType: "DigitalTwinsClient.<T>listRelationships(String digitalTwinId, Class<T> clazz)"
  summary: "List the relationships that have a given digital twin as the source."
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to deserialize each relationship into. Since a digital twin might have relationships\n              that conform to different models, it is advisable to convert them to a generic model like <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref>."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PagedIterable<T> <T>listRelationships(String digitalTwinId, Class<T> clazz)"
  desc: "List the relationships that have a given digital twin as the source.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\nPagedIterable<BasicRelationship> pagedRelationshipsByItem = digitalTwinsSyncClient.listRelationships(\n     \"myDigitalTwinId\",\n     BasicRelationship.class);\n\n for (BasicRelationship rel : pagedRelationshipsByItem) {\n     System.out.println(\"Retrieved relationship with Id: \" + rel.getId());\n }\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\nPagedIterable<String> pagedRelationshipsStringByItem = digitalTwinsSyncClient.listRelationships(\n     \"myDigitalTwinId\",\n     String.class);\n\n for (String rel : pagedRelationshipsStringByItem) {\n     System.out.println(\"Retrieved relationship: \" + rel);\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of relationships belonging to the specified digital twin."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>listRelationships(java.lang.String,java.lang.String,java.lang.Class<T>,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>listRelationships(String digitalTwinId, String relationshipName, Class<T> clazz, Context context)"
  name: "<T>listRelationships(String digitalTwinId, String relationshipName, Class<T> clazz, Context context)"
  nameWithType: "DigitalTwinsClient.<T>listRelationships(String digitalTwinId, String relationshipName, Class<T> clazz, Context context)"
  summary: "List the relationships that have a given digital twin as the source and that have the given relationship name."
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of a relationship to filter to."
    name: "relationshipName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to deserialize each relationship into. Since a digital twin might have relationships\n              that conform to different models, it is advisable to convert them to a generic model like <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref>."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<T> <T>listRelationships(String digitalTwinId, String relationshipName, Class<T> clazz, Context context)"
  desc: "List the relationships that have a given digital twin as the source and that have the given relationship name.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\nPagedIterable<BasicRelationship> pagedRelationshipByNameByItem = digitalTwinsSyncClient.listRelationships(\n     \"myDigitalTwinId\",\n     \"myRelationshipName\",\n     BasicRelationship.class,\n     new Context(\"Key\", \"value\"));\n\n for (BasicRelationship rel : pagedRelationshipByNameByItem) {\n     System.out.println(\"Retrieved relationship with Id: \" + rel.getId());\n }\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\nPagedIterable<String> pagedRelationshipsStringByNameByItem = digitalTwinsSyncClient.listRelationships(\n     \"myDigitalTwinId\",\n     \"myRelationshipId\",\n     String.class,\n     new Context(\"key\", \"value\"));\n\n for (String rel : pagedRelationshipsStringByNameByItem) {\n     System.out.println(\"Retrieved relationship: \" + rel);\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of relationships belonging to the specified digital twin."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>query(java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>query(String query, Class<T> clazz)"
  name: "<T>query(String query, Class<T> clazz)"
  nameWithType: "DigitalTwinsClient.<T>query(String query, Class<T> clazz)"
  summary: "Query digital twins."
  parameters:
  - description: "The query string, in SQL-like syntax."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to deserialize each queried digital twin into. Since the queried twins may not all\n              have the same model class, it is recommended to use a common denominator class such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref>."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PagedIterable<T> <T>query(String query, Class<T> clazz)"
  desc: "Query digital twins.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\nPagedIterable<BasicDigitalTwin> queryResultBasicDigitalTwin = digitalTwinsSyncClient.query(\n     \"SELECT * FROM digitaltwins\",\n     BasicDigitalTwin.class);\n\n queryResultBasicDigitalTwin.forEach(basicTwin -> System.out.println(\n     \"Retrieved digitalTwin query result with Id: \"\n     + basicTwin.getId()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\nPagedIterable<String> queryResultString = digitalTwinsSyncClient.query(\n     \"SELECT * FROM digitaltwins\",\n     String.class);\n\n queryResultString.forEach(\n     queryResult -> System.out.println(\"Retrieved digitalTwin query result: \" + queryResult));\n```\n\nNote that there may be a delay between before changes in your instance are reflected in queries. For more details on query limitations, see [Query limitations][]\n\n\n[Query limitations]: https://docs.microsoft.com/azure/digital-twins/how-to-query-graph#query-limitations"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of deserialized digital twins."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>query(java.lang.String,java.lang.Class<T>,com.azure.digitaltwins.core.models.QueryOptions,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>query(String query, Class<T> clazz, QueryOptions options, Context context)"
  name: "<T>query(String query, Class<T> clazz, QueryOptions options, Context context)"
  nameWithType: "DigitalTwinsClient.<T>query(String query, Class<T> clazz, QueryOptions options, Context context)"
  summary: "Query digital twins."
  parameters:
  - description: "The query string, in SQL-like syntax."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to deserialize each queried digital twin into. Since the queried twins may not all\n              have the same model class, it is recommended to use a common denominator class such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref>."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.QueryOptions?alt=com.azure.digitaltwins.core.models.QueryOptions&text=QueryOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<T> <T>query(String query, Class<T> clazz, QueryOptions options, Context context)"
  desc: "Query digital twins.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\nPagedIterable<BasicDigitalTwin> queryResultBasicDigitalTwinWithContext = digitalTwinsSyncClient.query(\n     \"SELECT * FROM digitaltwins\",\n     BasicDigitalTwin.class,\n     new QueryOptions(),\n     new Context(\"key\", \"value\"));\n\n queryResultBasicDigitalTwinWithContext\n     .forEach(basicTwin ->\n         System.out.println(\"Retrieved digitalTwin query result with Id: \" + basicTwin.getId()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\nPagedIterable<String> queryResultStringWithContext = digitalTwinsSyncClient.query(\n     \"SELECT * FROM digitaltwins\",\n     String.class,\n     new QueryOptions(),\n     new Context(\"key\", \"value\"));\n\n queryResultStringWithContext\n     .forEach(queryResult ->\n         System.out.println(\"Retrieved digitalTwin query result: \" + queryResult));\n```\n\nNote that there may be a delay between before changes in your instance are reflected in queries. For more details on query limitations, see [Query limitations][]\n\n\n[Query limitations]: https://docs.microsoft.com/azure/digital-twins/how-to-query-graph#query-limitations"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of deserialized digital twins."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.createModels(java.lang.Iterable<java.lang.String>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.createModels(Iterable<String> dtdlModels)"
  name: "createModels(Iterable<String> dtdlModels)"
  nameWithType: "DigitalTwinsClient.createModels(Iterable<String> dtdlModels)"
  summary: "Creates one or many models."
  parameters:
  - description: "The list of models to create. Each string corresponds to exactly one model."
    name: "dtdlModels"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Iterable<DigitalTwinsModelData> createModels(Iterable<String> dtdlModels)"
  desc: "Creates one or many models.\n\n**Code Samples**\n\n```java\nIterable<DigitalTwinsModelData> createdModels = digitalTwinsSyncClient.createModels(\n     Arrays.asList(model1, model2, model3));\n\n createdModels.forEach(model ->\n     System.out.println(\"Retrieved model with Id: \" + model.getModelId()));\n```"
  returns:
    description: "A List of created models. Each <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsModelData\"></xref> instance in this list\n will contain metadata about the created model, but will not contain the model itself."
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData?alt=com.azure.digitaltwins.core.models.DigitalTwinsModelData&text=DigitalTwinsModelData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.createModelsWithResponse(java.lang.Iterable<java.lang.String>,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.createModelsWithResponse(Iterable<String> dtdlModels, Context context)"
  name: "createModelsWithResponse(Iterable<String> dtdlModels, Context context)"
  nameWithType: "DigitalTwinsClient.createModelsWithResponse(Iterable<String> dtdlModels, Context context)"
  summary: "Creates one or many models."
  parameters:
  - description: "The list of models to create. Each string corresponds to exactly one model."
    name: "dtdlModels"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Iterable<DigitalTwinsModelData>> createModelsWithResponse(Iterable<String> dtdlModels, Context context)"
  desc: "Creates one or many models.\n\n**Code Samples**\n\n```java\nResponse<Iterable<DigitalTwinsModelData>> createdModels = digitalTwinsSyncClient.createModelsWithResponse(\n     Arrays.asList(model1, model2, model3),\n     new Context(\"key\", \"value\"));\n\n System.out.println(\"Received HTTP response of \" + createdModels.getStatusCode());\n\n createdModels.getValue()\n     .forEach(model -> System.out.println(\"Retrieved model with Id: \" + model.getModelId()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing the list of created models. Each <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsModelData\"></xref> instance in this list\n will contain metadata about the created model, but will not contain the model itself."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData?alt=com.azure.digitaltwins.core.models.DigitalTwinsModelData&text=DigitalTwinsModelData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.createOrReplaceEventRoute(java.lang.String,com.azure.digitaltwins.core.models.DigitalTwinsEventRoute)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.createOrReplaceEventRoute(String eventRouteId, DigitalTwinsEventRoute eventRoute)"
  name: "createOrReplaceEventRoute(String eventRouteId, DigitalTwinsEventRoute eventRoute)"
  nameWithType: "DigitalTwinsClient.createOrReplaceEventRoute(String eventRouteId, DigitalTwinsEventRoute eventRoute)"
  summary: "Create an event route."
  parameters:
  - description: "The id of the event route to create."
    name: "eventRouteId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The event route to create."
    name: "eventRoute"
    type: "<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute?alt=com.azure.digitaltwins.core.models.DigitalTwinsEventRoute&text=DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void createOrReplaceEventRoute(String eventRouteId, DigitalTwinsEventRoute eventRoute)"
  desc: "Create an event route. If the provided eventRouteId is already in use, then this will attempt to replace the existing event route with the provided event route.\n\n**Code Samples**\n\n```java\nString filter =\n     \"$eventType = 'DigitalTwinTelemetryMessages' or $eventType = 'DigitalTwinLifecycleNotification'\";\n\n DigitalTwinsEventRoute eventRoute = new DigitalTwinsEventRoute(\"myEndpointName\").setFilter(filter);\n digitalTwinsSyncClient.createOrReplaceEventRoute(\"myEventRouteId\", eventRoute);\n```"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.createOrReplaceEventRouteWithResponse(java.lang.String,com.azure.digitaltwins.core.models.DigitalTwinsEventRoute,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.createOrReplaceEventRouteWithResponse(String eventRouteId, DigitalTwinsEventRoute eventRoute, Context context)"
  name: "createOrReplaceEventRouteWithResponse(String eventRouteId, DigitalTwinsEventRoute eventRoute, Context context)"
  nameWithType: "DigitalTwinsClient.createOrReplaceEventRouteWithResponse(String eventRouteId, DigitalTwinsEventRoute eventRoute, Context context)"
  summary: "Create an event route."
  parameters:
  - description: "The id of the event route to create."
    name: "eventRouteId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The event route to create."
    name: "eventRoute"
    type: "<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute?alt=com.azure.digitaltwins.core.models.DigitalTwinsEventRoute&text=DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> createOrReplaceEventRouteWithResponse(String eventRouteId, DigitalTwinsEventRoute eventRoute, Context context)"
  desc: "Create an event route. If the provided eventRouteId is already in use, then this will attempt to replace the existing event route with the provided event route.\n\n**Code Samples**\n\n```java\nString filter =\n     \"$eventType = 'DigitalTwinTelemetryMessages' or $eventType = 'DigitalTwinLifecycleNotification'\";\n\n DigitalTwinsEventRoute eventRoute = new DigitalTwinsEventRoute(\"myEndpointName\").setFilter(filter);\n Response<Void> response = digitalTwinsSyncClient.createOrReplaceEventRouteWithResponse(\n     \"myEventRouteId\",\n     eventRoute,\n     new Context(\"key\", \"value\"));\n\n System.out.println(\"Created an event rout with HTTP status code: \" + response.getStatusCode());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.decommissionModel(java.lang.String)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.decommissionModel(String modelId)"
  name: "decommissionModel(String modelId)"
  nameWithType: "DigitalTwinsClient.decommissionModel(String modelId)"
  summary: "Decommissions a model."
  parameters:
  - description: "The Id of the model to decommission."
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void decommissionModel(String modelId)"
  desc: "Decommissions a model.\n\n**Code Samples**\n\n```java\ndigitalTwinsSyncClient.decommissionModel(\"dtmi:com:samples:Building;1\");\n```"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.decommissionModelWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.decommissionModelWithResponse(String modelId, Context context)"
  name: "decommissionModelWithResponse(String modelId, Context context)"
  nameWithType: "DigitalTwinsClient.decommissionModelWithResponse(String modelId, Context context)"
  summary: "Decommissions a model."
  parameters:
  - description: "The Id of the model to decommission."
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> decommissionModelWithResponse(String modelId, Context context)"
  desc: "Decommissions a model.\n\n**Code Samples**\n\n```java\nResponse<Void> response = digitalTwinsSyncClient.decommissionModelWithResponse(\n     \"dtmi:com:samples:Building;1\",\n     new Context(\"key\", \"value\"));\n\n System.out.println(\"Received decommission operation HTTP response with status: \" + response.getStatusCode());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> with no parsed payload object."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.deleteDigitalTwin(java.lang.String)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.deleteDigitalTwin(String digitalTwinId)"
  name: "deleteDigitalTwin(String digitalTwinId)"
  nameWithType: "DigitalTwinsClient.deleteDigitalTwin(String digitalTwinId)"
  summary: "Deletes a digital twin."
  parameters:
  - description: "The Id of the digital twin. The Id is unique within the service and case sensitive."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteDigitalTwin(String digitalTwinId)"
  desc: "Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n\n**Code Samples**\n\n```java\ndigitalTwinsClient.deleteDigitalTwin(\"myDigitalTwinId\");\n```"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.deleteDigitalTwinWithResponse(java.lang.String,com.azure.digitaltwins.core.models.DeleteDigitalTwinOptions,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.deleteDigitalTwinWithResponse(String digitalTwinId, DeleteDigitalTwinOptions options, Context context)"
  name: "deleteDigitalTwinWithResponse(String digitalTwinId, DeleteDigitalTwinOptions options, Context context)"
  nameWithType: "DigitalTwinsClient.deleteDigitalTwinWithResponse(String digitalTwinId, DeleteDigitalTwinOptions options, Context context)"
  summary: "Deletes a digital twin."
  parameters:
  - description: "The Id of the digital twin. The Id is unique within the service and case sensitive."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.DeleteDigitalTwinOptions?alt=com.azure.digitaltwins.core.models.DeleteDigitalTwinOptions&text=DeleteDigitalTwinOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteDigitalTwinWithResponse(String digitalTwinId, DeleteDigitalTwinOptions options, Context context)"
  desc: "Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n\n**Code Samples**\n\n```java\nResponse<Void> response = digitalTwinsClient.deleteDigitalTwinWithResponse(\n     \"myDigitalTwinId\",\n     new DeleteDigitalTwinOptions(),\n     new Context(\"key\", \"value\"));\n\n System.out.println(\"Deleted digital twin HTTP response status code: \" + response.getStatusCode());\n```"
  returns:
    description: "The Http response."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.deleteEventRoute(java.lang.String)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.deleteEventRoute(String eventRouteId)"
  name: "deleteEventRoute(String eventRouteId)"
  nameWithType: "DigitalTwinsClient.deleteEventRoute(String eventRouteId)"
  summary: "Delete an event route."
  parameters:
  - description: "The Id of the event route to delete."
    name: "eventRouteId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteEventRoute(String eventRouteId)"
  desc: "Delete an event route.\n\n**Code Samples**\n\n```java\ndigitalTwinsSyncClient.deleteEventRoute(\"myEventRouteId\");\n```"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.deleteEventRouteWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.deleteEventRouteWithResponse(String eventRouteId, Context context)"
  name: "deleteEventRouteWithResponse(String eventRouteId, Context context)"
  nameWithType: "DigitalTwinsClient.deleteEventRouteWithResponse(String eventRouteId, Context context)"
  summary: "Delete an event route."
  parameters:
  - description: "The Id of the event route to delete."
    name: "eventRouteId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteEventRouteWithResponse(String eventRouteId, Context context)"
  desc: "Delete an event route.\n\n**Code Samples**\n\n```java\nResponse<Void> deleteResponse = digitalTwinsSyncClient.deleteEventRouteWithResponse(\n     \"myEventRouteId\",\n     new Context(\"key\", \"value\"));\n\n System.out.println(\n     \"Received delete event route operation response with HTTP status code: \"\n     + deleteResponse.getStatusCode());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing no parsed value."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.deleteModel(java.lang.String)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.deleteModel(String modelId)"
  name: "deleteModel(String modelId)"
  nameWithType: "DigitalTwinsClient.deleteModel(String modelId)"
  summary: "Deletes a model."
  parameters:
  - description: "The Id for the model. The Id is globally unique and case sensitive."
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteModel(String modelId)"
  desc: "Deletes a model.\n\n**Code Samples**\n\n```java\ndigitalTwinsSyncClient.deleteModel(\"dtmi:com:samples:Building;1\");\n```"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.deleteModelWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.deleteModelWithResponse(String modelId, Context context)"
  name: "deleteModelWithResponse(String modelId, Context context)"
  nameWithType: "DigitalTwinsClient.deleteModelWithResponse(String modelId, Context context)"
  summary: "Deletes a model."
  parameters:
  - description: "The Id for the model. The Id is globally unique and case sensitive."
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteModelWithResponse(String modelId, Context context)"
  desc: "Deletes a model.\n\n**Code Samples**\n\n```java\nResponse<Void> response = digitalTwinsSyncClient.deleteModelWithResponse(\n     \"dtmi:com:samples:Building;1\",\n     new Context(\"key\", \"value\"));\n\n System.out.println(\"Received delete model operation HTTP response with status: \" + response.getStatusCode());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> with no parsed payload object."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.deleteRelationship(java.lang.String,java.lang.String)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.deleteRelationship(String digitalTwinId, String relationshipId)"
  name: "deleteRelationship(String digitalTwinId, String relationshipId)"
  nameWithType: "DigitalTwinsClient.deleteRelationship(String digitalTwinId, String relationshipId)"
  summary: "Deletes a relationship on a digital twin."
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the relationship to delete."
    name: "relationshipId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteRelationship(String digitalTwinId, String relationshipId)"
  desc: "Deletes a relationship on a digital twin.\n\n**Code Samples**\n\n```java\ndigitalTwinsSyncClient.deleteRelationship(\"myDigitalTwinId\", \"myRelationshipId\");\n```"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.deleteRelationshipWithResponse(java.lang.String,java.lang.String,com.azure.digitaltwins.core.models.DeleteRelationshipOptions,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.deleteRelationshipWithResponse(String digitalTwinId, String relationshipId, DeleteRelationshipOptions options, Context context)"
  name: "deleteRelationshipWithResponse(String digitalTwinId, String relationshipId, DeleteRelationshipOptions options, Context context)"
  nameWithType: "DigitalTwinsClient.deleteRelationshipWithResponse(String digitalTwinId, String relationshipId, DeleteRelationshipOptions options, Context context)"
  summary: "Deletes a relationship on a digital twin."
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the relationship to delete."
    name: "relationshipId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.DeleteRelationshipOptions?alt=com.azure.digitaltwins.core.models.DeleteRelationshipOptions&text=DeleteRelationshipOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteRelationshipWithResponse(String digitalTwinId, String relationshipId, DeleteRelationshipOptions options, Context context)"
  desc: "Deletes a relationship on a digital twin.\n\n**Code Samples**\n\n```java\nResponse<Void> deleteResponse = digitalTwinsSyncClient.deleteRelationshipWithResponse(\n     \"myDigitalTwinId\",\n     \"myRelationshipId\",\n     new DeleteRelationshipOptions(),\n     new Context(\"key\", \"value\"));\n\n System.out.println(\"Deleted relationship with HTTP status code: \" + deleteResponse.getStatusCode());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing no parsed payload object."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.getEventRoute(java.lang.String)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.getEventRoute(String eventRouteId)"
  name: "getEventRoute(String eventRouteId)"
  nameWithType: "DigitalTwinsClient.getEventRoute(String eventRouteId)"
  summary: "Get an event route."
  parameters:
  - description: "The Id of the event route to get."
    name: "eventRouteId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DigitalTwinsEventRoute getEventRoute(String eventRouteId)"
  desc: "Get an event route.\n\n**Code Samples**\n\n```java\nDigitalTwinsEventRoute eventRoute = digitalTwinsSyncClient.getEventRoute(\"myEventRouteId\");\n\n System.out.println(\"Retrieved event route with Id: \" + eventRoute.getEventRouteId());\n```"
  returns:
    description: "The retrieved event route."
    type: "<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute?alt=com.azure.digitaltwins.core.models.DigitalTwinsEventRoute&text=DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.getEventRouteWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.getEventRouteWithResponse(String eventRouteId, Context context)"
  name: "getEventRouteWithResponse(String eventRouteId, Context context)"
  nameWithType: "DigitalTwinsClient.getEventRouteWithResponse(String eventRouteId, Context context)"
  summary: "Get an event route."
  parameters:
  - description: "The Id of the event route to get."
    name: "eventRouteId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DigitalTwinsEventRoute> getEventRouteWithResponse(String eventRouteId, Context context)"
  desc: "Get an event route.\n\n**Code Samples**\n\n```java\nResponse<DigitalTwinsEventRoute> eventRouteWithResponse = digitalTwinsSyncClient.getEventRouteWithResponse(\n     \"myEventRouteId\",\n     new Context(\"key\", \"value\"));\n\n System.out.println(\n     \"Received get event route operation response with HTTP status code: \"\n     + eventRouteWithResponse.getStatusCode());\n System.out.println(\"Retrieved event route with Id: \" + eventRouteWithResponse.getValue().getEventRouteId());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing the retrieved event route."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute?alt=com.azure.digitaltwins.core.models.DigitalTwinsEventRoute&text=DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.getModel(java.lang.String)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.getModel(String modelId)"
  name: "getModel(String modelId)"
  nameWithType: "DigitalTwinsClient.getModel(String modelId)"
  summary: "Gets a model, including the model metadata and the model definition."
  parameters:
  - description: "The Id of the model."
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DigitalTwinsModelData getModel(String modelId)"
  desc: "Gets a model, including the model metadata and the model definition.\n\n**Code Samples**\n\n```java\nDigitalTwinsModelData model = digitalTwinsSyncClient.getModel(\"dtmi:com:samples:Building;1\");\n\n System.out.println(\"Retrieved model with Id: \" + model.getModelId());\n```"
  returns:
    description: "A <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsModelData\"></xref> instance that contains the model and its metadata."
    type: "<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData?alt=com.azure.digitaltwins.core.models.DigitalTwinsModelData&text=DigitalTwinsModelData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.getModelWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.getModelWithResponse(String modelId, Context context)"
  name: "getModelWithResponse(String modelId, Context context)"
  nameWithType: "DigitalTwinsClient.getModelWithResponse(String modelId, Context context)"
  summary: "Gets a model, including the model metadata and the model definition."
  parameters:
  - description: "The Id of the model."
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DigitalTwinsModelData> getModelWithResponse(String modelId, Context context)"
  desc: "Gets a model, including the model metadata and the model definition.\n\n**Code Samples**\n\n```java\nResponse<DigitalTwinsModelData> modelWithResponse = digitalTwinsSyncClient.getModelWithResponse(\n     \"dtmi:com:samples:Building;1\",\n     new Context(\"key\", \"value\"));\n\n System.out.println(\"Received HTTP response with status code: \" + modelWithResponse.getStatusCode());\n System.out.println(\"Retrieved model with Id: \" + modelWithResponse.getValue().getModelId());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing a <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsModelData\"></xref> instance that contains the model and its metadata."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData?alt=com.azure.digitaltwins.core.models.DigitalTwinsModelData&text=DigitalTwinsModelData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.getServiceVersion()"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.getServiceVersion()"
  name: "getServiceVersion()"
  nameWithType: "DigitalTwinsClient.getServiceVersion()"
  summary: "Gets the Azure Digital Twins service API version that this client is configured to use for all service requests."
  syntax: "public DigitalTwinsServiceVersion getServiceVersion()"
  desc: "Gets the Azure Digital Twins service API version that this client is configured to use for all service requests. Unless configured while building this client through <xref uid=\"com.azure.digitaltwins.core.DigitalTwinsClientBuilder.serviceVersion(com.azure.digitaltwins.core.DigitalTwinsServiceVersion)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsClientBuilder#serviceVersion(DigitalTwinsServiceVersion)\"></xref>, this value will be equal to the latest service API version supported by this client."
  returns:
    description: "The Azure Digital Twins service API version."
    type: "<xref href=\"com.azure.digitaltwins.core.DigitalTwinsServiceVersion?alt=com.azure.digitaltwins.core.DigitalTwinsServiceVersion&text=DigitalTwinsServiceVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.listEventRoutes()"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.listEventRoutes()"
  name: "listEventRoutes()"
  nameWithType: "DigitalTwinsClient.listEventRoutes()"
  summary: "List all the event routes that exist in your digital twins instance."
  syntax: "public PagedIterable<DigitalTwinsEventRoute> listEventRoutes()"
  desc: "List all the event routes that exist in your digital twins instance.\n\n**Code Samples**\n\n```java\nPagedIterable<DigitalTwinsEventRoute> listResponse =  digitalTwinsSyncClient.listEventRoutes();\n\n listResponse.forEach(\n     eventRoute -> System.out.println(\"Retrieved event route with Id: \" + eventRoute.getEventRouteId()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing all the event routes that exist in your digital twins instance.\n This PagedIterable may take multiple service requests to iterate over all event routes."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute?alt=com.azure.digitaltwins.core.models.DigitalTwinsEventRoute&text=DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.listEventRoutes(com.azure.digitaltwins.core.models.ListDigitalTwinsEventRoutesOptions,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.listEventRoutes(ListDigitalTwinsEventRoutesOptions options, Context context)"
  name: "listEventRoutes(ListDigitalTwinsEventRoutesOptions options, Context context)"
  nameWithType: "DigitalTwinsClient.listEventRoutes(ListDigitalTwinsEventRoutesOptions options, Context context)"
  summary: "List all the event routes that exist in your digital twins instance."
  parameters:
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.ListDigitalTwinsEventRoutesOptions?alt=com.azure.digitaltwins.core.models.ListDigitalTwinsEventRoutesOptions&text=ListDigitalTwinsEventRoutesOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<DigitalTwinsEventRoute> listEventRoutes(ListDigitalTwinsEventRoutesOptions options, Context context)"
  desc: "List all the event routes that exist in your digital twins instance.\n\n**Code Samples**\n\n```java\nPagedIterable<DigitalTwinsEventRoute> listResponseWithOptions =  digitalTwinsSyncClient.listEventRoutes(\n     new ListDigitalTwinsEventRoutesOptions().setMaxItemsPerPage(5),\n     new Context(\"key\", \"value\"));\n\n listResponseWithOptions\n     .forEach(\n         eventRoute -> System.out.println(\"Retrieved event route with Id: \" + eventRoute.getEventRouteId()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing all the event routes that exist in your digital twins instance.\n This PagedIterable may take multiple service requests to iterate over all event routes."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute?alt=com.azure.digitaltwins.core.models.DigitalTwinsEventRoute&text=DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.listIncomingRelationships(java.lang.String)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.listIncomingRelationships(String digitalTwinId)"
  name: "listIncomingRelationships(String digitalTwinId)"
  nameWithType: "DigitalTwinsClient.listIncomingRelationships(String digitalTwinId)"
  summary: "List the relationships that have a given digital twin as the target."
  parameters:
  - description: "The Id of the target digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<IncomingRelationship> listIncomingRelationships(String digitalTwinId)"
  desc: "List the relationships that have a given digital twin as the target.\n\n**Code Samples**\n\n```java\nPagedIterable<IncomingRelationship> pagedIncomingRelationships =\n     digitalTwinsSyncClient.listIncomingRelationships(\n         \"myDigitalTwinId\",\n         new Context(\"key\", \"value\"));\n\n for (IncomingRelationship rel : pagedIncomingRelationships) {\n     System.out.println(\n         \"Retrieved relationship with Id: \"\n         + rel.getRelationshipId()\n         + \" from: \"\n         + rel.getSourceId()\n         + \" to: myDigitalTwinId\");\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of application/json strings representing the relationships directed towards the\n specified digital twin."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.IncomingRelationship?alt=com.azure.digitaltwins.core.models.IncomingRelationship&text=IncomingRelationship\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.listIncomingRelationships(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.listIncomingRelationships(String digitalTwinId, Context context)"
  name: "listIncomingRelationships(String digitalTwinId, Context context)"
  nameWithType: "DigitalTwinsClient.listIncomingRelationships(String digitalTwinId, Context context)"
  summary: "List the relationships that have a given digital twin as the target."
  parameters:
  - description: "The Id of the target digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<IncomingRelationship> listIncomingRelationships(String digitalTwinId, Context context)"
  desc: "List the relationships that have a given digital twin as the target.\n\n**Code Samples**\n\n```java\nPagedIterable<IncomingRelationship> pagedIncomingRelationshipsWithContext =\n     digitalTwinsSyncClient.listIncomingRelationships(\n         \"myDigitalTwinId\",\n         new Context(\"key\", \"value\"));\n\n for (IncomingRelationship rel : pagedIncomingRelationshipsWithContext) {\n     System.out.println(\n         \"Retrieved relationship with Id: \"\n         + rel.getRelationshipId()\n         + \" from: \"\n         + rel.getSourceId()\n         + \" to: myDigitalTwinId\");\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of application/json strings representing the relationships directed towards the\n specified digital twin."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.IncomingRelationship?alt=com.azure.digitaltwins.core.models.IncomingRelationship&text=IncomingRelationship\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.listModels()"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.listModels()"
  name: "listModels()"
  nameWithType: "DigitalTwinsClient.listModels()"
  summary: "List all of the models in this digital twins instance."
  syntax: "public PagedIterable<DigitalTwinsModelData> listModels()"
  desc: "List all of the models in this digital twins instance.\n\n**Code Samples**\n\n```java\nPagedIterable<DigitalTwinsModelData> modelsListPagedIterable =  digitalTwinsSyncClient.listModels();\n\n modelsListPagedIterable.forEach(model -> System.out.println(\"Retrieved a model with Id: \" + model.getModelId()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsModelData\"></xref> that enumerates all the models."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData?alt=com.azure.digitaltwins.core.models.DigitalTwinsModelData&text=DigitalTwinsModelData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.listModels(com.azure.digitaltwins.core.models.ListModelsOptions,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.listModels(ListModelsOptions options, Context context)"
  name: "listModels(ListModelsOptions options, Context context)"
  nameWithType: "DigitalTwinsClient.listModels(ListModelsOptions options, Context context)"
  summary: "List the models in this digital twins instance based on some options."
  parameters:
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.ListModelsOptions?alt=com.azure.digitaltwins.core.models.ListModelsOptions&text=ListModelsOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<DigitalTwinsModelData> listModels(ListModelsOptions options, Context context)"
  desc: "List the models in this digital twins instance based on some options.\n\n**Code Samples**\n\n```java\nPagedIterable<DigitalTwinsModelData> modelsListWithOptionsPagedIterable =  digitalTwinsSyncClient.listModels(\n     new ListModelsOptions()\n         .setIncludeModelDefinition(true)\n         .setMaxItemsPerPage(5),\n     new Context(\"key\", \"value\"));\n\n modelsListWithOptionsPagedIterable.forEach(\n     model -> System.out.println(\"Retrieved a model with Id: \" + model.getModelId()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing the retrieved <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsModelData\"></xref> instances."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData?alt=com.azure.digitaltwins.core.models.DigitalTwinsModelData&text=DigitalTwinsModelData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.publishComponentTelemetry(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.publishComponentTelemetry(String digitalTwinId, String componentName, String messageId, Object payload)"
  name: "publishComponentTelemetry(String digitalTwinId, String componentName, String messageId, Object payload)"
  nameWithType: "DigitalTwinsClient.publishComponentTelemetry(String digitalTwinId, String componentName, String messageId, Object payload)"
  summary: "Publishes telemetry from a digital twin's component"
  parameters:
  - description: "The Id of the digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the DTDL component."
    name: "componentName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages. Defaults to a random UUID if argument is null."
    name: "messageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application/json telemetry payload to be sent. payload can be a raw json string or a strongly typed object like a Dictionary."
    name: "payload"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void publishComponentTelemetry(String digitalTwinId, String componentName, String messageId, Object payload)"
  desc: "Publishes telemetry from a digital twin's component\n\n**Code Samples**\n\nA strongly typed object such as <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Hashtable\"></xref> can be provided as the input parameter for the telemetry payload.\n\n```java\nDictionary<String, Integer> telemetryPayload = new Hashtable<>();\n telemetryPayload.put(\"Telemetry1\", 5);\n\n digitalTwinsSyncClient.publishComponentTelemetry(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     UUID.randomUUID().toString(),\n     telemetryPayload);\n```\n\nOr alternatively String can be used as input type to construct the json string telemetry payload:\n\n```java\ndigitalTwinsSyncClient.publishComponentTelemetry(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     UUID.randomUUID().toString(),\n     \"{\\\"Telemetry1\\\": 5}\");\n```\n\nThe result is then consumed by one or many destination endpoints (subscribers) defined under <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsEventRoute\"></xref> These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed."
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.publishComponentTelemetryWithResponse(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,com.azure.digitaltwins.core.models.PublishComponentTelemetryOptions,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String messageId, Object payload, PublishComponentTelemetryOptions options, Context context)"
  name: "publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String messageId, Object payload, PublishComponentTelemetryOptions options, Context context)"
  nameWithType: "DigitalTwinsClient.publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String messageId, Object payload, PublishComponentTelemetryOptions options, Context context)"
  summary: "Publishes telemetry from a digital twin's component"
  parameters:
  - description: "The Id of the digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the DTDL component."
    name: "componentName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages. Defaults to a random UUID if argument is null."
    name: "messageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application/json telemetry payload to be sent. payload can be a raw json string or a strongly typed object like a Dictionary."
    name: "payload"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.PublishComponentTelemetryOptions?alt=com.azure.digitaltwins.core.models.PublishComponentTelemetryOptions&text=PublishComponentTelemetryOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String messageId, Object payload, PublishComponentTelemetryOptions options, Context context)"
  desc: "Publishes telemetry from a digital twin's component\n\n**Code Samples**\n\nA strongly typed object such as <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Hashtable\"></xref> can be provided as the input parameter for the telemetry payload.\n\n```java\nDictionary<String, Integer> telemetryPayload = new Hashtable<>();\n telemetryPayload.put(\"Telemetry1\", 5);\n\n Response<Void> responseObject = digitalTwinsSyncClient.publishComponentTelemetryWithResponse(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     UUID.randomUUID().toString(),\n     telemetryPayload,\n     new PublishComponentTelemetryOptions().setTimestamp(OffsetDateTime.now(ZoneId.systemDefault())),\n     new Context(\"key\", \"value\"));\n\n System.out.println(\n     \"Received publish component telemetry operation response with HTTP status code: \"\n     + responseObject.getStatusCode());\n```\n\nOr alternatively String can be used as input type to construct the json string telemetry payload:\n\n```java\nResponse<Void> responseString = digitalTwinsSyncClient.publishComponentTelemetryWithResponse(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     UUID.randomUUID().toString(),\n     \"{\\\"Telemetry1\\\": 5}\",\n     new PublishComponentTelemetryOptions().setTimestamp(OffsetDateTime.now(ZoneId.systemDefault())),\n     new Context(\"key\", \"value\"));\n\n System.out.println(\n     \"Received publish component telemetry operation response with HTTP status code: \"\n     + responseString.getStatusCode());\n```\n\nThe result is then consumed by one or many destination endpoints (subscribers) defined under <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsEventRoute\"></xref> These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed."
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.publishTelemetry(java.lang.String,java.lang.String,java.lang.Object)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.publishTelemetry(String digitalTwinId, String messageId, Object payload)"
  name: "publishTelemetry(String digitalTwinId, String messageId, Object payload)"
  nameWithType: "DigitalTwinsClient.publishTelemetry(String digitalTwinId, String messageId, Object payload)"
  summary: "Publishes telemetry from a digital twin"
  parameters:
  - description: "The Id of the digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages. Defaults to a random UUID if argument is null."
    name: "messageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application/json telemetry payload to be sent. payload can be a raw json string or a strongly typed object like a Dictionary."
    name: "payload"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void publishTelemetry(String digitalTwinId, String messageId, Object payload)"
  desc: "Publishes telemetry from a digital twin\n\n**Code Samples**\n\nA strongly typed object such as <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Hashtable\"></xref> can be provided as the input parameter for the telemetry payload.\n\n```java\nDictionary<String, Integer> telemetryPayload = new Hashtable<>();\n telemetryPayload.put(\"Telemetry1\", 5);\n\n digitalTwinsSyncClient.publishTelemetry(\n     \"myDigitalTwinId\",\n     UUID.randomUUID().toString(),\n     telemetryPayload);\n```\n\nOr alternatively String can be used as input type to construct the json string telemetry payload:\n\n```java\ndigitalTwinsSyncClient.publishTelemetry(\n     \"myDigitalTwinId\",\n     UUID.randomUUID().toString(),\n     \"{\\\"Telemetry1\\\": 5}\");\n```\n\nThe result is then consumed by one or many destination endpoints (subscribers) defined under <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsEventRoute\"></xref> These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed."
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.publishTelemetryWithResponse(java.lang.String,java.lang.String,java.lang.Object,com.azure.digitaltwins.core.models.PublishTelemetryOptions,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.publishTelemetryWithResponse(String digitalTwinId, String messageId, Object payload, PublishTelemetryOptions options, Context context)"
  name: "publishTelemetryWithResponse(String digitalTwinId, String messageId, Object payload, PublishTelemetryOptions options, Context context)"
  nameWithType: "DigitalTwinsClient.publishTelemetryWithResponse(String digitalTwinId, String messageId, Object payload, PublishTelemetryOptions options, Context context)"
  summary: "Publishes telemetry from a digital twin"
  parameters:
  - description: "The Id of the digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages. Defaults to a random UUID if argument is null."
    name: "messageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application/json telemetry payload to be sent. payload can be a raw json string or a strongly typed object like a Dictionary."
    name: "payload"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.PublishTelemetryOptions?alt=com.azure.digitaltwins.core.models.PublishTelemetryOptions&text=PublishTelemetryOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> publishTelemetryWithResponse(String digitalTwinId, String messageId, Object payload, PublishTelemetryOptions options, Context context)"
  desc: "Publishes telemetry from a digital twin\n\n**Code Samples**\n\nA strongly typed object such as <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Hashtable\"></xref> can be provided as the input parameter for the telemetry payload.\n\n```java\nDictionary<String, Integer> telemetryPayload = new Hashtable<>();\n telemetryPayload.put(\"Telemetry1\", 5);\n\n Response<Void> responseObject = digitalTwinsSyncClient.publishTelemetryWithResponse(\n     \"myDigitalTwinId\",\n     UUID.randomUUID().toString(),\n     telemetryPayload,\n     new PublishTelemetryOptions().setTimestamp(OffsetDateTime.now(ZoneId.systemDefault())),\n     new Context(\"key\", \"value\"));\n\n System.out.println(\n     \"Received publish telemetry operation response with HTTP status code: \"\n     + responseObject.getStatusCode());\n```\n\nOr alternatively String can be used as input type to construct the json string telemetry payload:\n\n```java\nResponse<Void> responseString = digitalTwinsSyncClient.publishTelemetryWithResponse(\n     \"myDigitalTwinId\",\n     UUID.randomUUID().toString(),\n     \"{\\\"Telemetry1\\\": 5}\",\n     new PublishTelemetryOptions().setTimestamp(OffsetDateTime.now(ZoneId.systemDefault())),\n     new Context(\"key\", \"value\"));\n\n System.out.println(\n     \"Received publish telemetry operation response with HTTP status code: \"\n     + responseString.getStatusCode());\n```\n\nThe result is then consumed by one or many destination endpoints (subscribers) defined under <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsEventRoute\"></xref> These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed."
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.updateComponent(java.lang.String,java.lang.String,com.azure.core.models.JsonPatchDocument)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.updateComponent(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch)"
  name: "updateComponent(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch)"
  nameWithType: "DigitalTwinsClient.updateComponent(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch)"
  summary: "Patch a component on a digital twin."
  parameters:
  - description: "The Id of the digital twin that has the component to patch."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the component on the digital twin."
    name: "componentName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The JSON patch to apply to the specified digital twin's relationship.\n                                  This argument can be created using <xref uid=\"com.azure.core.models.JsonPatchDocument\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonPatchDocument\"></xref>."
    name: "jsonPatch"
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void updateComponent(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch)"
  desc: "Patch a component on a digital twin.\n\n**Code Samples**\n\n```java\nJsonPatchDocument jsonPatchDocument = new JsonPatchDocument();\n jsonPatchDocument.appendReplace(\"/ComponentProp1\", \"Some new value\");\n\n digitalTwinsSyncClient.updateComponent(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     jsonPatchDocument);\n```"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.updateComponentWithResponse(java.lang.String,java.lang.String,com.azure.core.models.JsonPatchDocument,com.azure.digitaltwins.core.models.UpdateComponentOptions,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.updateComponentWithResponse(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch, UpdateComponentOptions options, Context context)"
  name: "updateComponentWithResponse(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch, UpdateComponentOptions options, Context context)"
  nameWithType: "DigitalTwinsClient.updateComponentWithResponse(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch, UpdateComponentOptions options, Context context)"
  summary: "Patch a component on a digital twin."
  parameters:
  - description: "The Id of the digital twin that has the component to patch."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the component on the digital twin."
    name: "componentName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The JSON patch to apply to the specified digital twin's relationship.\n                                  This argument can be created using <xref uid=\"com.azure.core.models.JsonPatchDocument\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonPatchDocument\"></xref>."
    name: "jsonPatch"
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.UpdateComponentOptions?alt=com.azure.digitaltwins.core.models.UpdateComponentOptions&text=UpdateComponentOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DigitalTwinsResponse<Void> updateComponentWithResponse(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch, UpdateComponentOptions options, Context context)"
  desc: "Patch a component on a digital twin.\n\n**Code Samples**\n\n```java\nJsonPatchDocument jsonPatchDocument = new JsonPatchDocument();\n jsonPatchDocument.appendReplace(\"/ComponentProp1\", \"Some new value\");\n\n Response<Void> updateResponse = digitalTwinsSyncClient.updateComponentWithResponse(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     jsonPatchDocument,\n     new UpdateComponentOptions(),\n     new Context(\"key\", \"value\"));\n\n System.out.println(\n     \"Received update operation HTTP response with status: \"\n     + updateResponse.getStatusCode());\n```"
  returns:
    description: "A <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsResponse\"></xref> containing no parsed payload object. This response object includes an HTTP\n header that gives you the updated ETag for this resource."
    type: "<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse?alt=com.azure.digitaltwins.core.models.DigitalTwinsResponse&text=DigitalTwinsResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.updateDigitalTwin(java.lang.String,com.azure.core.models.JsonPatchDocument)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.updateDigitalTwin(String digitalTwinId, JsonPatchDocument jsonPatch)"
  name: "updateDigitalTwin(String digitalTwinId, JsonPatchDocument jsonPatch)"
  nameWithType: "DigitalTwinsClient.updateDigitalTwin(String digitalTwinId, JsonPatchDocument jsonPatch)"
  summary: "Updates a digital twin."
  parameters:
  - description: "The Id of the digital twin. The Id is unique within the service and case sensitive."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The JSON patch to apply to the specified digital twin.\n                                    This argument can be created using <xref uid=\"com.azure.core.models.JsonPatchDocument\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonPatchDocument\"></xref>."
    name: "jsonPatch"
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void updateDigitalTwin(String digitalTwinId, JsonPatchDocument jsonPatch)"
  desc: "Updates a digital twin.\n\n**Code Samples**\n\nUpdate digital twin by providing list of intended patch operations.\n\n```java\nJsonPatchDocument jsonPatchDocument = new JsonPatchDocument();\n jsonPatchDocument.appendReplace(\"Prop1\", \"newValue\");\n\n digitalTwinsClient.updateDigitalTwin(\n     \"myDigitalTwinId\",\n     jsonPatchDocument);\n```"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.updateDigitalTwinWithResponse(java.lang.String,com.azure.core.models.JsonPatchDocument,com.azure.digitaltwins.core.models.UpdateDigitalTwinOptions,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.updateDigitalTwinWithResponse(String digitalTwinId, JsonPatchDocument jsonPatch, UpdateDigitalTwinOptions options, Context context)"
  name: "updateDigitalTwinWithResponse(String digitalTwinId, JsonPatchDocument jsonPatch, UpdateDigitalTwinOptions options, Context context)"
  nameWithType: "DigitalTwinsClient.updateDigitalTwinWithResponse(String digitalTwinId, JsonPatchDocument jsonPatch, UpdateDigitalTwinOptions options, Context context)"
  summary: "Updates a digital twin."
  parameters:
  - description: "The Id of the digital twin. The Id is unique within the service and case sensitive."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The JSON patch to apply to the specified digital twin.\n                                    This argument can be created using <xref uid=\"com.azure.core.models.JsonPatchDocument\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonPatchDocument\"></xref>."
    name: "jsonPatch"
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.UpdateDigitalTwinOptions?alt=com.azure.digitaltwins.core.models.UpdateDigitalTwinOptions&text=UpdateDigitalTwinOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DigitalTwinsResponse<Void> updateDigitalTwinWithResponse(String digitalTwinId, JsonPatchDocument jsonPatch, UpdateDigitalTwinOptions options, Context context)"
  desc: "Updates a digital twin.\n\n**Code Samples**\n\nUpdate digital twin by providing list of intended patch operations.\n\n```java\nJsonPatchDocument jsonPatchDocument = new JsonPatchDocument();\n jsonPatchDocument.appendReplace(\"Prop1\", \"newValue\");\n\n Response<Void> response = digitalTwinsClient.updateDigitalTwinWithResponse(\n     \"myDigitalTwinId\",\n     jsonPatchDocument,\n     new UpdateDigitalTwinOptions(),\n     new Context(\"key\", \"value\"));\n\n System.out.println(\"Update completed with HTTP status code: \" + response.getStatusCode());\n```"
  returns:
    description: "A <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsResponse\"></xref>. This response object includes an HTTP header that gives you the updated\n ETag for this resource."
    type: "<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse?alt=com.azure.digitaltwins.core.models.DigitalTwinsResponse&text=DigitalTwinsResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.updateRelationship(java.lang.String,java.lang.String,com.azure.core.models.JsonPatchDocument)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.updateRelationship(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch)"
  name: "updateRelationship(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch)"
  nameWithType: "DigitalTwinsClient.updateRelationship(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch)"
  summary: "Updates the properties of a relationship on a digital twin."
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the relationship to be updated."
    name: "relationshipId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The JSON patch to apply to the specified digital twin's relationship.\n                                     This argument can be created using <xref uid=\"com.azure.core.models.JsonPatchDocument\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonPatchDocument\"></xref>."
    name: "jsonPatch"
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void updateRelationship(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch)"
  desc: "Updates the properties of a relationship on a digital twin.\n\n**Code Samples**\n\n```java\nJsonPatchDocument jsonPatchDocument = new JsonPatchDocument();\n jsonPatchDocument.appendReplace(\"/relationshipProperty1\", \"new property value\");\n\n digitalTwinsSyncClient.updateRelationship(\n     \"myDigitalTwinId\",\n     \"myRelationshipId\",\n     jsonPatchDocument);\n```"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.updateRelationshipWithResponse(java.lang.String,java.lang.String,com.azure.core.models.JsonPatchDocument,com.azure.digitaltwins.core.models.UpdateRelationshipOptions,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.updateRelationshipWithResponse(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch, UpdateRelationshipOptions options, Context context)"
  name: "updateRelationshipWithResponse(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch, UpdateRelationshipOptions options, Context context)"
  nameWithType: "DigitalTwinsClient.updateRelationshipWithResponse(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch, UpdateRelationshipOptions options, Context context)"
  summary: "Updates the properties of a relationship on a digital twin."
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the relationship to be updated."
    name: "relationshipId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The JSON patch to apply to the specified digital twin's relationship.\n                                     This argument can be created using <xref uid=\"com.azure.core.models.JsonPatchDocument\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonPatchDocument\"></xref>."
    name: "jsonPatch"
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.UpdateRelationshipOptions?alt=com.azure.digitaltwins.core.models.UpdateRelationshipOptions&text=UpdateRelationshipOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DigitalTwinsResponse<Void> updateRelationshipWithResponse(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch, UpdateRelationshipOptions options, Context context)"
  desc: "Updates the properties of a relationship on a digital twin.\n\n**Code Samples**\n\n```java\nJsonPatchDocument jsonPatchDocument = new JsonPatchDocument();\n jsonPatchDocument.appendReplace(\"/relationshipProperty1\", \"new property value\");\n\n Response<Void> updateResponse = digitalTwinsSyncClient.updateRelationshipWithResponse(\n     \"myDigitalTwinId\",\n     \"myRelationshipId\",\n     jsonPatchDocument,\n     new UpdateRelationshipOptions(),\n     new Context(\"key\", \"value\"));\n\n System.out.println(\"Relationship updated with status code: \" + updateResponse.getStatusCode());\n```"
  returns:
    description: "A <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsResponse\"></xref> containing no parsed payload object. This response object includes an\n HTTP header that gives you the updated ETag for this resource."
    type: "<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse?alt=com.azure.digitaltwins.core.models.DigitalTwinsResponse&text=DigitalTwinsResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "This class provides a client for interacting synchronously with an Azure Digital Twins instance. This client is instantiated through <xref uid=\"com.azure.digitaltwins.core.DigitalTwinsClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsClientBuilder\"></xref>.\n\n**Code Samples**\n\n```java\nDigitalTwinsClient digitalTwinsSyncClient = new DigitalTwinsClientBuilder()\n     .credential(\n         new ClientSecretCredentialBuilder()\n             .tenantId(tenantId)\n             .clientId(clientId)\n             .clientSecret(clientSecret)\n             .build())\n     .endpoint(digitalTwinsEndpointUrl)\n     .buildClient();\n```\n\nThis client allows for management of digital twins, their components, and their relationships. It also allows for managing the digital twin models and event routes tied to your Azure Digital Twins instance."
metadata: {}
package: "com.azure.digitaltwins.core"
artifact: com.azure:azure-digitaltwins-core:1.3.1
