### YamlMime:JavaType
uid: "com.azure.core.util.polling.SyncChainedPollingStrategy"
fullName: "com.azure.core.util.polling.SyncChainedPollingStrategy<T,U>"
name: "SyncChainedPollingStrategy<T,U>"
nameWithType: "SyncChainedPollingStrategy<T,U>"
summary: "A synchronous polling strategy that chains multiple synchronous polling strategies, finds the first strategy that can poll the current long-running operation, and polls with that strategy."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **SyncChainedPollingStrategy<T,U>**</br> implements <xref href=\"com.azure.core.util.polling.SyncPollingStrategy?alt=com.azure.core.util.polling.SyncPollingStrategy&text=SyncPollingStrategy\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,<xref href=\"U?alt=U&text=U\" data-throw-if-not-resolved=\"False\" />&gt;"
constructors:
- uid: "com.azure.core.util.polling.SyncChainedPollingStrategy.SyncChainedPollingStrategy(java.util.List<com.azure.core.util.polling.SyncPollingStrategy<T,U>>)"
  fullName: "com.azure.core.util.polling.SyncChainedPollingStrategy<T,U>.SyncChainedPollingStrategy(List<SyncPollingStrategy<T,U>> strategies)"
  name: "SyncChainedPollingStrategy(List<SyncPollingStrategy<T,U>> strategies)"
  nameWithType: "SyncChainedPollingStrategy<T,U>.SyncChainedPollingStrategy(List<SyncPollingStrategy<T,U>> strategies)"
  summary: "Creates a synchronous chained polling strategy with a list of polling strategies."
  parameters:
  - description: "the list of synchronous polling strategies"
    name: "strategies"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.core.util.polling.SyncPollingStrategy?alt=com.azure.core.util.polling.SyncPollingStrategy&text=SyncPollingStrategy\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,<xref href=\"U?alt=U&text=U\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "public SyncChainedPollingStrategy(List<SyncPollingStrategy<T,U>> strategies)"
  desc: "Creates a synchronous chained polling strategy with a list of polling strategies."
methods:
- uid: "com.azure.core.util.polling.SyncChainedPollingStrategy.canPoll(com.azure.core.http.rest.Response<?>)"
  fullName: "com.azure.core.util.polling.SyncChainedPollingStrategy<T,U>.canPoll(Response<?> initialResponse)"
  name: "canPoll(Response<?> initialResponse)"
  nameWithType: "SyncChainedPollingStrategy<T,U>.canPoll(Response<?> initialResponse)"
  summary: "Checks if this strategy is able to handle polling for this long-running operation based on the information in the initial response."
  parameters:
  - name: "initialResponse"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  syntax: "public boolean canPoll(Response<?> initialResponse)"
  desc: "Checks if this strategy is able to handle polling for this long-running operation based on the information in the initial response."
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.polling.SyncChainedPollingStrategy.cancel(com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.polling.PollResponse<T>)"
  fullName: "com.azure.core.util.polling.SyncChainedPollingStrategy<T,U>.cancel(PollingContext<T> pollingContext, PollResponse<T> initialResponse)"
  name: "cancel(PollingContext<T> pollingContext, PollResponse<T> initialResponse)"
  nameWithType: "SyncChainedPollingStrategy<T,U>.cancel(PollingContext<T> pollingContext, PollResponse<T> initialResponse)"
  summary: "Cancels the long-running operation if service supports cancellation."
  parameters:
  - name: "pollingContext"
    type: "<xref href=\"com.azure.core.util.polling.PollingContext?alt=com.azure.core.util.polling.PollingContext&text=PollingContext\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "initialResponse"
    type: "<xref href=\"com.azure.core.util.polling.PollResponse?alt=com.azure.core.util.polling.PollResponse&text=PollResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T cancel(PollingContext<T> pollingContext, PollResponse<T> initialResponse)"
  desc: "Cancels the long-running operation if service supports cancellation. If service does not support cancellation then the implementer should throw an <xref uid=\"java.lang.IllegalStateException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalStateException\"></xref> with an error message indicating absence of cancellation.\n\nImplementing this method is optional - by default, cancellation will not be supported unless overridden."
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.polling.SyncChainedPollingStrategy.getResult(com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.serializer.TypeReference<U>)"
  fullName: "com.azure.core.util.polling.SyncChainedPollingStrategy<T,U>.getResult(PollingContext<T> context, TypeReference<U> resultType)"
  name: "getResult(PollingContext<T> context, TypeReference<U> resultType)"
  nameWithType: "SyncChainedPollingStrategy<T,U>.getResult(PollingContext<T> context, TypeReference<U> resultType)"
  summary: "Parses the response from the final GET call into the result type of the long-running operation."
  parameters:
  - name: "context"
    type: "<xref href=\"com.azure.core.util.polling.PollingContext?alt=com.azure.core.util.polling.PollingContext&text=PollingContext\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "resultType"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"U?alt=U&text=U\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public U getResult(PollingContext<T> context, TypeReference<U> resultType)"
  desc: "Parses the response from the final GET call into the result type of the long-running operation."
  returns:
    type: "<xref href=\"U?alt=U&text=U\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.polling.SyncChainedPollingStrategy.onInitialResponse(com.azure.core.http.rest.Response<?>,com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.serializer.TypeReference<T>)"
  fullName: "com.azure.core.util.polling.SyncChainedPollingStrategy<T,U>.onInitialResponse(Response<?> response, PollingContext<T> pollingContext, TypeReference<T> pollResponseType)"
  name: "onInitialResponse(Response<?> response, PollingContext<T> pollingContext, TypeReference<T> pollResponseType)"
  nameWithType: "SyncChainedPollingStrategy<T,U>.onInitialResponse(Response<?> response, PollingContext<T> pollingContext, TypeReference<T> pollResponseType)"
  summary: "Parses the initial response into a <xref uid=\"com.azure.core.util.polling.LongRunningOperationStatus\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LongRunningOperationStatus\"></xref>, and stores information useful for polling in the <xref uid=\"com.azure.core.util.polling.PollingContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollingContext\"></xref>."
  parameters:
  - name: "response"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  - name: "pollingContext"
    type: "<xref href=\"com.azure.core.util.polling.PollingContext?alt=com.azure.core.util.polling.PollingContext&text=PollingContext\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "pollResponseType"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PollResponse<T> onInitialResponse(Response<?> response, PollingContext<T> pollingContext, TypeReference<T> pollResponseType)"
  desc: "Parses the initial response into a <xref uid=\"com.azure.core.util.polling.LongRunningOperationStatus\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LongRunningOperationStatus\"></xref>, and stores information useful for polling in the <xref uid=\"com.azure.core.util.polling.PollingContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollingContext\"></xref>. If the result is anything other than <xref uid=\"com.azure.core.util.polling.LongRunningOperationStatus.IN_PROGRESS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LongRunningOperationStatus#IN_PROGRESS\"></xref>, the long-running operation will be terminated and none of the other methods will be invoked."
  returns:
    type: "<xref href=\"com.azure.core.util.polling.PollResponse?alt=com.azure.core.util.polling.PollResponse&text=PollResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.polling.SyncChainedPollingStrategy.poll(com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.serializer.TypeReference<T>)"
  fullName: "com.azure.core.util.polling.SyncChainedPollingStrategy<T,U>.poll(PollingContext<T> context, TypeReference<T> pollResponseType)"
  name: "poll(PollingContext<T> context, TypeReference<T> pollResponseType)"
  nameWithType: "SyncChainedPollingStrategy<T,U>.poll(PollingContext<T> context, TypeReference<T> pollResponseType)"
  summary: "Parses the response from the polling URL into a <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollResponse\"></xref>, and stores information useful for further polling and final response in the <xref uid=\"com.azure.core.util.polling.PollingContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollingContext\"></xref>."
  parameters:
  - name: "context"
    type: "<xref href=\"com.azure.core.util.polling.PollingContext?alt=com.azure.core.util.polling.PollingContext&text=PollingContext\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "pollResponseType"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PollResponse<T> poll(PollingContext<T> context, TypeReference<T> pollResponseType)"
  desc: "Parses the response from the polling URL into a <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollResponse\"></xref>, and stores information useful for further polling and final response in the <xref uid=\"com.azure.core.util.polling.PollingContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollingContext\"></xref>. The result must have the <xref uid=\"com.azure.core.util.polling.LongRunningOperationStatus\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LongRunningOperationStatus\"></xref> specified, and the entire polling response content as a <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
  returns:
    type: "<xref href=\"com.azure.core.util.polling.PollResponse?alt=com.azure.core.util.polling.PollResponse&text=PollResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
typeParameters:
- description: "the type of the response type from a polling call, or BinaryData if raw response body should be kept"
  name: "T"
- description: "the type of the final result object to deserialize into, or BinaryData if raw response body should be\n kept"
  name: "U"
desc: "A synchronous polling strategy that chains multiple synchronous polling strategies, finds the first strategy that can poll the current long-running operation, and polls with that strategy."
implements:
- "<xref href=\"com.azure.core.util.polling.SyncPollingStrategy?alt=com.azure.core.util.polling.SyncPollingStrategy&text=SyncPollingStrategy\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,<xref href=\"U?alt=U&text=U\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.core.util.polling"
artifact: com.azure:azure-core:1.34.0
