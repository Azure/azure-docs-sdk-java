### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.model.Creatable.create()
- com.microsoft.azure.management.resources.fluentcore.model.Creatable.createAsync(final ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.model.Creatable.createAsync()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithCreate.withNonSslPort()
- com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithCreate.withRedisConfiguration(Map<String, String>)
- com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithCreate.withRedisConfiguration(String,String)
- com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithCreate.withStaticIP(String)
- com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithCreate.withSubnet(HasId,String)
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.DefinitionWithTags.withTag(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.DefinitionWithTags.withTags(Map<String, String>)
methods:
- fullName: com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate.withPatchSchedule(DayOfWeek dayOfWeek, int startHourUtc)
  name: withPatchSchedule(DayOfWeek dayOfWeek, int startHourUtc)
  nameWithType: RedisCache.DefinitionStages.WithPremiumSkuCreate.withPatchSchedule(DayOfWeek dayOfWeek, int startHourUtc)
  parameters:
  - description: <p>day of week when cache can be patched. </p>
    name: dayOfWeek
    type: <xref href="com.microsoft.azure.management.redis.DayOfWeek?alt=com.microsoft.azure.management.redis.DayOfWeek&text=DayOfWeek" data-throw-if-not-resolved="False"/>
  - description: <p>start hour after which cache patching can start. </p>
    name: startHourUtc
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of Redis Cache with Premium SKU definition. </p>
    type: <xref href="com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate?alt=com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate&text=RedisCache.DefinitionStages.WithPremiumSkuCreate" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Patch schedule on a Premium Cluster Cache.</p>

    <p></p>
  syntax: public WithPremiumSkuCreate withPatchSchedule(DayOfWeek dayOfWeek, int startHourUtc)
  uid: com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate.withPatchSchedule(DayOfWeek,int)
- fullName: com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate.withPatchSchedule(DayOfWeek dayOfWeek, int startHourUtc, Period maintenanceWindow)
  name: withPatchSchedule(DayOfWeek dayOfWeek, int startHourUtc, Period maintenanceWindow)
  nameWithType: RedisCache.DefinitionStages.WithPremiumSkuCreate.withPatchSchedule(DayOfWeek dayOfWeek, int startHourUtc, Period maintenanceWindow)
  parameters:
  - description: <p>day of week when cache can be patched. </p>
    name: dayOfWeek
    type: <xref href="com.microsoft.azure.management.redis.DayOfWeek?alt=com.microsoft.azure.management.redis.DayOfWeek&text=DayOfWeek" data-throw-if-not-resolved="False"/>
  - description: <p>start hour after which cache patching can start. </p>
    name: startHourUtc
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>ISO8601 timespan specifying how much time cache patching can take. </p>
    name: maintenanceWindow
    type: <xref href="Period?alt=Period&text=Period" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of Redis Cache with Premium SKU definition. </p>
    type: <xref href="com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate?alt=com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate&text=RedisCache.DefinitionStages.WithPremiumSkuCreate" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Patch schedule on a Premium Cluster Cache.</p>

    <p></p>
  syntax: public WithPremiumSkuCreate withPatchSchedule(DayOfWeek dayOfWeek, int startHourUtc, Period maintenanceWindow)
  uid: com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate.withPatchSchedule(DayOfWeek,int,Period)
- fullName: com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate.withPatchSchedule(List<ScheduleEntry> scheduleEntry)
  name: withPatchSchedule(List<ScheduleEntry> scheduleEntry)
  nameWithType: RedisCache.DefinitionStages.WithPremiumSkuCreate.withPatchSchedule(List<ScheduleEntry> scheduleEntry)
  parameters:
  - description: <p>List of patch schedule entries for Premium Redis Cache. </p>
    name: scheduleEntry
    type: List&lt;<xref href="com.microsoft.azure.management.redis.ScheduleEntry?alt=com.microsoft.azure.management.redis.ScheduleEntry&text=ScheduleEntry" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the next stage of Redis Cache with Premium SKU definition. </p>
    type: <xref href="com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate?alt=com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate&text=RedisCache.DefinitionStages.WithPremiumSkuCreate" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Patch schedule on a Premium Cluster Cache.</p>

    <p></p>
  syntax: public WithPremiumSkuCreate withPatchSchedule(List<ScheduleEntry> scheduleEntry)
  uid: com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate.withPatchSchedule(List<ScheduleEntry>)
- fullName: com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate.withPatchSchedule(ScheduleEntry scheduleEntry)
  name: withPatchSchedule(ScheduleEntry scheduleEntry)
  nameWithType: RedisCache.DefinitionStages.WithPremiumSkuCreate.withPatchSchedule(ScheduleEntry scheduleEntry)
  parameters:
  - description: <p>Patch schedule entry for Premium Redis Cache. </p>
    name: scheduleEntry
    type: <xref href="com.microsoft.azure.management.redis.ScheduleEntry?alt=com.microsoft.azure.management.redis.ScheduleEntry&text=ScheduleEntry" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of Redis Cache with Premium SKU definition. </p>
    type: <xref href="com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate?alt=com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate&text=RedisCache.DefinitionStages.WithPremiumSkuCreate" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Patch schedule on a Premium Cluster Cache.</p>

    <p></p>
  syntax: public WithPremiumSkuCreate withPatchSchedule(ScheduleEntry scheduleEntry)
  uid: com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate.withPatchSchedule(ScheduleEntry)
- fullName: com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate.withShardCount(int shardCount)
  name: withShardCount(int shardCount)
  nameWithType: RedisCache.DefinitionStages.WithPremiumSkuCreate.withShardCount(int shardCount)
  parameters:
  - description: <p>the shard count value to set. </p>
    name: shardCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of Redis Cache with Premium SKU definition. </p>
    type: <xref href="com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate?alt=com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate&text=RedisCache.DefinitionStages.WithPremiumSkuCreate" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The number of shards to be created on a Premium Cluster Cache.</p>

    <p></p>
  syntax: public WithPremiumSkuCreate withShardCount(int shardCount)
  uid: com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate.withShardCount(int)
nameWithType: RedisCache.DefinitionStages.WithPremiumSkuCreate
syntax: public interface WithPremiumSkuCreate extends RedisCache.DefinitionStages.WithCreate
type: interface
uid: com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate
fullName: com.microsoft.azure.management.redis.RedisCache.DefinitionStages.WithPremiumSkuCreate
name: RedisCache.DefinitionStages.WithPremiumSkuCreate
package: com.microsoft.azure.management.redis
summary: <p>A Redis Cache definition with Premium Sku specific functionality. </p>
metadata: {}
