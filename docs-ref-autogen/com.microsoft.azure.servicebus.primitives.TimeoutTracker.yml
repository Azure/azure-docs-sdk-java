### YamlMime:JavaType
uid: "com.microsoft.azure.servicebus.primitives.TimeoutTracker"
fullName: "com.microsoft.azure.servicebus.primitives.TimeoutTracker"
name: "TimeoutTracker"
nameWithType: "TimeoutTracker"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class TimeoutTracker"
constructors:
- uid: "com.microsoft.azure.servicebus.primitives.TimeoutTracker.TimeoutTracker(java.time.Duration,boolean)"
  fullName: "com.microsoft.azure.servicebus.primitives.TimeoutTracker.TimeoutTracker(Duration timeout, boolean startTrackingTimeout)"
  name: "TimeoutTracker(Duration timeout, boolean startTrackingTimeout)"
  nameWithType: "TimeoutTracker.TimeoutTracker(Duration timeout, boolean startTrackingTimeout)"
  parameters:
  - description: "original operationTimeout"
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "whether/not to start the timeout tracking - right now. if not started now, timer tracking will start upon the first call to <xref uid=\"com.microsoft.azure.servicebus.primitives.TimeoutTracker.elapsed()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TimeoutTracker#elapsed()\"></xref>/<xref uid=\"com.microsoft.azure.servicebus.primitives.TimeoutTracker.remaining()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TimeoutTracker#remaining()\"></xref>"
    name: "startTrackingTimeout"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public TimeoutTracker(Duration timeout, boolean startTrackingTimeout)"
methods:
- uid: "com.microsoft.azure.servicebus.primitives.TimeoutTracker.create(java.time.Duration)"
  fullName: "com.microsoft.azure.servicebus.primitives.TimeoutTracker.create(Duration timeout)"
  name: "create(Duration timeout)"
  nameWithType: "TimeoutTracker.create(Duration timeout)"
  modifiers:
  - "static"
  parameters:
  - name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static TimeoutTracker create(Duration timeout)"
  returns:
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.TimeoutTracker?alt=com.microsoft.azure.servicebus.primitives.TimeoutTracker&text=TimeoutTracker\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.primitives.TimeoutTracker.elapsed()"
  fullName: "com.microsoft.azure.servicebus.primitives.TimeoutTracker.elapsed()"
  name: "elapsed()"
  nameWithType: "TimeoutTracker.elapsed()"
  syntax: "public Duration elapsed()"
  returns:
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.primitives.TimeoutTracker.remaining()"
  fullName: "com.microsoft.azure.servicebus.primitives.TimeoutTracker.remaining()"
  name: "remaining()"
  nameWithType: "TimeoutTracker.remaining()"
  syntax: "public Duration remaining()"
  returns:
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
type: "class"
metadata: {}
package: "com.microsoft.azure.servicebus.primitives"
artifact: com.microsoft.azure:azure-servicebus:3.6.6
