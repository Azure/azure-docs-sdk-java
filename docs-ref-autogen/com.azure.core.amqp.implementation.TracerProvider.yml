### YamlMime:ManagedReference
items:
- uid: "com.azure.core.amqp.implementation.TracerProvider"
  id: "TracerProvider"
  parent: "com.azure.core.amqp.implementation"
  children:
  - "com.azure.core.amqp.implementation.TracerProvider.TracerProvider(java.lang.Iterable<com.azure.core.util.tracing.Tracer>)"
  - "com.azure.core.amqp.implementation.TracerProvider.addSpanLinks(com.azure.core.util.Context)"
  - "com.azure.core.amqp.implementation.TracerProvider.endSpan(com.azure.core.util.Context,reactor.core.publisher.Signal<java.lang.Void>)"
  - "com.azure.core.amqp.implementation.TracerProvider.extractContext(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.core.amqp.implementation.TracerProvider.getSharedSpanBuilder(com.azure.core.util.Context)"
  - "com.azure.core.amqp.implementation.TracerProvider.isEnabled()"
  - "com.azure.core.amqp.implementation.TracerProvider.startSpan(com.azure.core.util.Context,com.azure.core.util.tracing.ProcessKind)"
  langs:
  - "java"
  name: "TracerProvider"
  nameWithType: "TracerProvider"
  fullName: "com.azure.core.amqp.implementation.TracerProvider"
  type: "Class"
  package: "com.azure.core.amqp.implementation"
  syntax:
    content: "public class TracerProvider"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.core.amqp.implementation.TracerProvider.TracerProvider(java.lang.Iterable<com.azure.core.util.tracing.Tracer>)"
  id: "TracerProvider(java.lang.Iterable<com.azure.core.util.tracing.Tracer>)"
  parent: "com.azure.core.amqp.implementation.TracerProvider"
  langs:
  - "java"
  name: "TracerProvider(Iterable<Tracer> tracers)"
  nameWithType: "TracerProvider.TracerProvider(Iterable<Tracer> tracers)"
  fullName: "com.azure.core.amqp.implementation.TracerProvider.TracerProvider(Iterable<Tracer> tracers)"
  overload: "com.azure.core.amqp.implementation.TracerProvider.TracerProvider*"
  type: "Constructor"
  package: "com.azure.core.amqp.implementation"
  syntax:
    content: "public TracerProvider(Iterable<Tracer> tracers)"
    parameters:
    - id: "tracers"
      type: "java.lang.Iterable<com.azure.core.util.tracing.Tracer>"
- uid: "com.azure.core.amqp.implementation.TracerProvider.addSpanLinks(com.azure.core.util.Context)"
  id: "addSpanLinks(com.azure.core.util.Context)"
  parent: "com.azure.core.amqp.implementation.TracerProvider"
  langs:
  - "java"
  name: "addSpanLinks(Context context)"
  nameWithType: "TracerProvider.addSpanLinks(Context context)"
  fullName: "com.azure.core.amqp.implementation.TracerProvider.addSpanLinks(Context context)"
  overload: "com.azure.core.amqp.implementation.TracerProvider.addSpanLinks*"
  type: "Method"
  package: "com.azure.core.amqp.implementation"
  summary: "For each tracer plugged into the SDK a link is created between the parent tracing span and the current service call."
  syntax:
    content: "public void addSpanLinks(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional metadata that is passed through the call stack."
- uid: "com.azure.core.amqp.implementation.TracerProvider.endSpan(com.azure.core.util.Context,reactor.core.publisher.Signal<java.lang.Void>)"
  id: "endSpan(com.azure.core.util.Context,reactor.core.publisher.Signal<java.lang.Void>)"
  parent: "com.azure.core.amqp.implementation.TracerProvider"
  langs:
  - "java"
  name: "endSpan(Context context, Signal<Void> signal)"
  nameWithType: "TracerProvider.endSpan(Context context, Signal<Void> signal)"
  fullName: "com.azure.core.amqp.implementation.TracerProvider.endSpan(Context context, Signal<Void> signal)"
  overload: "com.azure.core.amqp.implementation.TracerProvider.endSpan*"
  type: "Method"
  package: "com.azure.core.amqp.implementation"
  summary: "Given a context containing the current tracing span the span is marked completed with status info from <xref uid=\"reactor.core.publisher.Signal\" data-throw-if-not-resolved=\"false\">Signal</xref>. For each tracer plugged into the SDK the current tracing span is marked as completed."
  syntax:
    content: "public void endSpan(Context context, Signal<Void> signal)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional metadata that is passed through the call stack."
    - id: "signal"
      type: "reactor.core.publisher.Signal<java.lang.Void>"
      description: "The signal indicates the status and contains the metadata we need to end the tracing span."
- uid: "com.azure.core.amqp.implementation.TracerProvider.extractContext(java.lang.String,com.azure.core.util.Context)"
  id: "extractContext(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.core.amqp.implementation.TracerProvider"
  langs:
  - "java"
  name: "extractContext(String diagnosticId, Context context)"
  nameWithType: "TracerProvider.extractContext(String diagnosticId, Context context)"
  fullName: "com.azure.core.amqp.implementation.TracerProvider.extractContext(String diagnosticId, Context context)"
  overload: "com.azure.core.amqp.implementation.TracerProvider.extractContext*"
  type: "Method"
  package: "com.azure.core.amqp.implementation"
  summary: "For each tracer plugged into the SDK a new context is extracted from the event's diagnostic Id."
  syntax:
    content: "public Context extractContext(String diagnosticId, Context context)"
    parameters:
    - id: "diagnosticId"
      type: "java.lang.String"
      description: "Unique identifier of an external call from producer to the queue."
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.util.Context"
- uid: "com.azure.core.amqp.implementation.TracerProvider.getSharedSpanBuilder(com.azure.core.util.Context)"
  id: "getSharedSpanBuilder(com.azure.core.util.Context)"
  parent: "com.azure.core.amqp.implementation.TracerProvider"
  langs:
  - "java"
  name: "getSharedSpanBuilder(Context context)"
  nameWithType: "TracerProvider.getSharedSpanBuilder(Context context)"
  fullName: "com.azure.core.amqp.implementation.TracerProvider.getSharedSpanBuilder(Context context)"
  overload: "com.azure.core.amqp.implementation.TracerProvider.getSharedSpanBuilder*"
  type: "Method"
  package: "com.azure.core.amqp.implementation"
  summary: "For each tracer plugged into the SDK a new context containing the span builder is returned."
  syntax:
    content: "public Context getSharedSpanBuilder(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional metadata containing the span name for creating the span builer."
    return:
      type: "com.azure.core.util.Context"
- uid: "com.azure.core.amqp.implementation.TracerProvider.isEnabled()"
  id: "isEnabled()"
  parent: "com.azure.core.amqp.implementation.TracerProvider"
  langs:
  - "java"
  name: "isEnabled()"
  nameWithType: "TracerProvider.isEnabled()"
  fullName: "com.azure.core.amqp.implementation.TracerProvider.isEnabled()"
  overload: "com.azure.core.amqp.implementation.TracerProvider.isEnabled*"
  type: "Method"
  package: "com.azure.core.amqp.implementation"
  syntax:
    content: "public boolean isEnabled()"
    return:
      type: "boolean"
- uid: "com.azure.core.amqp.implementation.TracerProvider.startSpan(com.azure.core.util.Context,com.azure.core.util.tracing.ProcessKind)"
  id: "startSpan(com.azure.core.util.Context,com.azure.core.util.tracing.ProcessKind)"
  parent: "com.azure.core.amqp.implementation.TracerProvider"
  langs:
  - "java"
  name: "startSpan(Context context, ProcessKind processKind)"
  nameWithType: "TracerProvider.startSpan(Context context, ProcessKind processKind)"
  fullName: "com.azure.core.amqp.implementation.TracerProvider.startSpan(Context context, ProcessKind processKind)"
  overload: "com.azure.core.amqp.implementation.TracerProvider.startSpan*"
  type: "Method"
  package: "com.azure.core.amqp.implementation"
  summary: "For each tracer plugged into the SDK a new tracing span is created. The `context` will be checked for containing information about a parent span. If a parent span is found the new span will be added as a child, otherwise the span will be created and added to the context and any downstream start calls will use the created span as the parent."
  syntax:
    content: "public Context startSpan(Context context, ProcessKind processKind)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional metadata that is passed through the call stack."
    - id: "processKind"
      type: "com.azure.core.util.tracing.ProcessKind"
      description: "the invoking process type."
    return:
      type: "com.azure.core.util.Context"
      description: "An updated context object."
references:
- uid: "java.lang.Iterable<com.azure.core.util.tracing.Tracer>"
  spec.java:
  - uid: "java.lang.Iterable"
    name: "Iterable"
    fullName: "java.lang.Iterable"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.util.tracing.Tracer"
    name: "Tracer"
    fullName: "com.azure.core.util.tracing.Tracer"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.amqp.implementation.TracerProvider.TracerProvider*"
  name: "TracerProvider"
  nameWithType: "TracerProvider.TracerProvider"
  fullName: "com.azure.core.amqp.implementation.TracerProvider.TracerProvider"
  package: "com.azure.core.amqp.implementation"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.core.amqp.implementation.TracerProvider.isEnabled*"
  name: "isEnabled"
  nameWithType: "TracerProvider.isEnabled"
  fullName: "com.azure.core.amqp.implementation.TracerProvider.isEnabled"
  package: "com.azure.core.amqp.implementation"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "com.azure.core.util.tracing.ProcessKind"
  spec.java:
  - uid: "com.azure.core.util.tracing.ProcessKind"
    name: "ProcessKind"
    fullName: "com.azure.core.util.tracing.ProcessKind"
- uid: "com.azure.core.amqp.implementation.TracerProvider.startSpan*"
  name: "startSpan"
  nameWithType: "TracerProvider.startSpan"
  fullName: "com.azure.core.amqp.implementation.TracerProvider.startSpan"
  package: "com.azure.core.amqp.implementation"
- uid: "reactor.core.publisher.Signal<java.lang.Void>"
  spec.java:
  - uid: "reactor.core.publisher.Signal"
    name: "Signal"
    fullName: "reactor.core.publisher.Signal"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.amqp.implementation.TracerProvider.endSpan*"
  name: "endSpan"
  nameWithType: "TracerProvider.endSpan"
  fullName: "com.azure.core.amqp.implementation.TracerProvider.endSpan"
  package: "com.azure.core.amqp.implementation"
- uid: "com.azure.core.amqp.implementation.TracerProvider.addSpanLinks*"
  name: "addSpanLinks"
  nameWithType: "TracerProvider.addSpanLinks"
  fullName: "com.azure.core.amqp.implementation.TracerProvider.addSpanLinks"
  package: "com.azure.core.amqp.implementation"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.core.amqp.implementation.TracerProvider.extractContext*"
  name: "extractContext"
  nameWithType: "TracerProvider.extractContext"
  fullName: "com.azure.core.amqp.implementation.TracerProvider.extractContext"
  package: "com.azure.core.amqp.implementation"
- uid: "com.azure.core.amqp.implementation.TracerProvider.getSharedSpanBuilder*"
  name: "getSharedSpanBuilder"
  nameWithType: "TracerProvider.getSharedSpanBuilder"
  fullName: "com.azure.core.amqp.implementation.TracerProvider.getSharedSpanBuilder"
  package: "com.azure.core.amqp.implementation"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.core.util.tracing.Tracer"
  name: "Tracer"
  nameWithType: "Tracer"
  fullName: "com.azure.core.util.tracing.Tracer"
- uid: "java.lang.Iterable"
  name: "Iterable"
  nameWithType: "Iterable"
  fullName: "java.lang.Iterable"
- uid: "java.lang.Void"
  name: "Void"
  nameWithType: "Void"
  fullName: "java.lang.Void"
- uid: "reactor.core.publisher.Signal"
  name: "Signal"
  nameWithType: "Signal"
  fullName: "reactor.core.publisher.Signal"
