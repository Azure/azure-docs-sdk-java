### YamlMime:JavaType
uid: "com.microsoft.cognitiveservices.speech.diagnostics.logging.FileLogger"
fullName: "com.microsoft.cognitiveservices.speech.diagnostics.logging.FileLogger"
name: "FileLogger"
nameWithType: "FileLogger"
summary: "A static class to control file-based SDK logging."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"java.lang.Object.clone()?alt=java.lang.Object.clone&text=clone\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.equals(java.lang.Object)?alt=java.lang.Object.equals&text=equals\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.finalize()?alt=java.lang.Object.finalize&text=finalize\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.getClass()?alt=java.lang.Object.getClass&text=getClass\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.hashCode()?alt=java.lang.Object.hashCode&text=hashCode\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.notify()?alt=java.lang.Object.notify&text=notify\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.notifyAll()?alt=java.lang.Object.notifyAll&text=notifyAll\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.toString()?alt=java.lang.Object.toString&text=toString\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait()?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait(long)?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait(long,int)?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
syntax: "public final class **FileLogger**"
methods:
- uid: "com.microsoft.cognitiveservices.speech.diagnostics.logging.FileLogger.setFilters()"
  fullName: "com.microsoft.cognitiveservices.speech.diagnostics.logging.FileLogger.setFilters()"
  name: "setFilters()"
  nameWithType: "FileLogger.setFilters()"
  summary: "Clears filters for logging messages to a file."
  modifiers:
  - "static"
  syntax: "public static void setFilters()"
  desc: "Clears filters for logging messages to a file."
- uid: "com.microsoft.cognitiveservices.speech.diagnostics.logging.FileLogger.setFilters(java.lang.String[])"
  fullName: "com.microsoft.cognitiveservices.speech.diagnostics.logging.FileLogger.setFilters(String[] filters)"
  name: "setFilters(String[] filters)"
  nameWithType: "FileLogger.setFilters(String[] filters)"
  summary: "Sets filters for logging messages to a file."
  modifiers:
  - "static"
  parameters:
  - description: "Filters to use, or an empty list to remove previously set filters."
    name: "filters"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public static void setFilters(String[] filters)"
  desc: "Sets filters for logging messages to a file. Once filters are set, file logger will only be updated with log strings containing at least one of the strings specified by the filters. The match is case sensitive."
- uid: "com.microsoft.cognitiveservices.speech.diagnostics.logging.FileLogger.setLevel(com.microsoft.cognitiveservices.speech.diagnostics.logging.Level)"
  fullName: "com.microsoft.cognitiveservices.speech.diagnostics.logging.FileLogger.setLevel(Level level)"
  name: "setLevel(Level level)"
  nameWithType: "FileLogger.setLevel(Level level)"
  summary: "Sets the level of the messages to be captured by the logger."
  modifiers:
  - "static"
  parameters:
  - description: "Maximum level of detail to be captured by the logger."
    name: "level"
    type: "<xref href=\"com.microsoft.cognitiveservices.speech.diagnostics.logging.Level?alt=com.microsoft.cognitiveservices.speech.diagnostics.logging.Level&text=Level\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static void setLevel(Level level)"
  desc: "Sets the level of the messages to be captured by the logger."
- uid: "com.microsoft.cognitiveservices.speech.diagnostics.logging.FileLogger.start(java.lang.String)"
  fullName: "com.microsoft.cognitiveservices.speech.diagnostics.logging.FileLogger.start(String filePath)"
  name: "start(String filePath)"
  nameWithType: "FileLogger.start(String filePath)"
  summary: "Start logging to a file without appending."
  modifiers:
  - "static"
  parameters:
  - description: "Path of resulting log file"
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static void start(String filePath)"
  desc: "Start logging to a file without appending."
- uid: "com.microsoft.cognitiveservices.speech.diagnostics.logging.FileLogger.start(java.lang.String,boolean)"
  fullName: "com.microsoft.cognitiveservices.speech.diagnostics.logging.FileLogger.start(String filePath, boolean append)"
  name: "start(String filePath, boolean append)"
  nameWithType: "FileLogger.start(String filePath, boolean append)"
  summary: "Starts logging to a file with an option to append."
  modifiers:
  - "static"
  parameters:
  - description: "Path of resulting log file"
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "If true will append to file (if already exists). Otherwise will create a new file"
    name: "append"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static void start(String filePath, boolean append)"
  desc: "Starts logging to a file with an option to append."
- uid: "com.microsoft.cognitiveservices.speech.diagnostics.logging.FileLogger.stop()"
  fullName: "com.microsoft.cognitiveservices.speech.diagnostics.logging.FileLogger.stop()"
  name: "stop()"
  nameWithType: "FileLogger.stop()"
  summary: "Stops logging to a file."
  modifiers:
  - "static"
  syntax: "public static void stop()"
  desc: "Stops logging to a file.\n\nThis call is optional. If logging has been started, the log file will be written when the process exits normally."
type: "class"
desc: "A static class to control file-based SDK logging. Turning on logging while running your Speech SDK scenario provides detailed information from the SDK's core native components. If you report an issue to Microsoft, you may be asked to provide logs to help Microsoft diagnose the issue. Your application should not take dependency on particular log strings, as they may change from one SDK release to another without notice. FileLogger is the simplest logging solution and suitable for diagnosing most on-device issues when running Speech SDK. Added in version 1.42.0\n\nFile logging is a process wide construct. That means that if (for example) you have multiple speech recognizer objects running in parallel, there will be one log file containing interleaved logs lines from all recognizers. You cannot get a separate log file for each recognizer."
metadata: {}
package: "com.microsoft.cognitiveservices.speech.diagnostics.logging"
artifact: com.microsoft.cognitiveservices.speech:client-sdk:1.42.0
