### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.storage.table.TableEncryptionPolicy
  id: TableEncryptionPolicy
  parent: com.microsoft.azure.storage.table
  children:
  - com.microsoft.azure.storage.table.TableEncryptionPolicy.getKey()
  - com.microsoft.azure.storage.table.TableEncryptionPolicy.getKeyResolver()
  - com.microsoft.azure.storage.table.TableEncryptionPolicy.keyResolver
  - com.microsoft.azure.storage.table.TableEncryptionPolicy.keyWrapper
  - com.microsoft.azure.storage.table.TableEncryptionPolicy.setKey(IKey)
  - com.microsoft.azure.storage.table.TableEncryptionPolicy.setKeyResolver(IKeyResolver)
  - com.microsoft.azure.storage.table.TableEncryptionPolicy.TableEncryptionPolicy(IKey,IKeyResolver)
  href: com.microsoft.azure.storage.table.TableEncryptionPolicy.yml
  langs:
  - java
  name: TableEncryptionPolicy
  nameWithType: TableEncryptionPolicy
  fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy
  type: Class
  source:
    remote: &o0
      path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEncryptionPolicy.java
      branch: legacy-master
      repo: https://github.com/azure/azure-storage-java
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEncryptionPolicy.java
    startLine: 47
  package: com.microsoft.azure.storage.table
  summary: "<p>Represents a table encryption policy that is used to perform envelope encryption/decryption of Azure table entities. </p>"
  syntax: &o1
    content: public class TableEncryptionPolicy
  inheritance:
  - java.lang.Object
- uid: com.microsoft.azure.storage.table.TableEncryptionPolicy.getKey()
  id: getKey()
  parent: com.microsoft.azure.storage.table.TableEncryptionPolicy
  href: com.microsoft.azure.storage.table.TableEncryptionPolicy.yml
  langs:
  - java
  name: getKey()
  nameWithType: TableEncryptionPolicy.getKey()
  fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy.getKey()
  overload: com.microsoft.azure.storage.table.TableEncryptionPolicy.getKey*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEncryptionPolicy.java
    startLine: 83
  package: com.microsoft.azure.storage.table
  summary: "<p>Gets the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IKey\"></xref> that is used to wrap/unwrap the content key during encryption.</p>\r\n<p></p>"
  syntax:
    content: public IKey getKey()
    return:
      type: com.microsoft.azure.keyvault.core.IKey
      description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IKey"></xref> object. </p>
- uid: com.microsoft.azure.storage.table.TableEncryptionPolicy.getKeyResolver()
  id: getKeyResolver()
  parent: com.microsoft.azure.storage.table.TableEncryptionPolicy
  href: com.microsoft.azure.storage.table.TableEncryptionPolicy.yml
  langs:
  - java
  name: getKeyResolver()
  nameWithType: TableEncryptionPolicy.getKeyResolver()
  fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy.getKeyResolver()
  overload: com.microsoft.azure.storage.table.TableEncryptionPolicy.getKeyResolver*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEncryptionPolicy.java
    startLine: 92
  package: com.microsoft.azure.storage.table
  summary: "<p>Gets the key resolver used to select the correct key for decrypting existing table entities.</p>\r\n<p></p>"
  syntax:
    content: public IKeyResolver getKeyResolver()
    return:
      type: com.microsoft.azure.keyvault.core.IKeyResolver
      description: <p>A resolver that returns an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IKey"></xref> given a keyId. </p>
- uid: com.microsoft.azure.storage.table.TableEncryptionPolicy.keyResolver
  id: keyResolver
  parent: com.microsoft.azure.storage.table.TableEncryptionPolicy
  href: com.microsoft.azure.storage.table.TableEncryptionPolicy.yml
  langs:
  - java
  name: keyResolver
  nameWithType: TableEncryptionPolicy.keyResolver
  fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy.keyResolver
  type: Field
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEncryptionPolicy.java
    startLine: 57
  package: com.microsoft.azure.storage.table
  summary: "<p>The <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IKeyResolver\"></xref> used to select the correct key for decrypting existing table entities. </p>"
  syntax:
    content: public IKeyResolver keyResolver
    return:
      type: com.microsoft.azure.keyvault.core.IKeyResolver
- uid: com.microsoft.azure.storage.table.TableEncryptionPolicy.keyWrapper
  id: keyWrapper
  parent: com.microsoft.azure.storage.table.TableEncryptionPolicy
  href: com.microsoft.azure.storage.table.TableEncryptionPolicy.yml
  langs:
  - java
  name: keyWrapper
  nameWithType: TableEncryptionPolicy.keyWrapper
  fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy.keyWrapper
  type: Field
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEncryptionPolicy.java
    startLine: 52
  package: com.microsoft.azure.storage.table
  summary: "<p>An object of type <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IKey\"></xref> that is used to wrap/unwrap the content key during encryption. </p>"
  syntax:
    content: public IKey keyWrapper
    return:
      type: com.microsoft.azure.keyvault.core.IKey
- uid: com.microsoft.azure.storage.table.TableEncryptionPolicy.setKey(IKey)
  id: setKey(IKey)
  parent: com.microsoft.azure.storage.table.TableEncryptionPolicy
  href: com.microsoft.azure.storage.table.TableEncryptionPolicy.yml
  langs:
  - java
  name: setKey(IKey key)
  nameWithType: TableEncryptionPolicy.setKey(IKey key)
  fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy.setKey(IKey key)
  overload: com.microsoft.azure.storage.table.TableEncryptionPolicy.setKey*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEncryptionPolicy.java
    startLine: 102
  package: com.microsoft.azure.storage.table
  summary: "<p>Sets the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IKey\"></xref> that is used to wrap/unwrap the content key during encryption.</p>\r\n<p></p>"
  syntax:
    content: public void setKey(IKey key)
    parameters:
    - id: key
      type: com.microsoft.azure.keyvault.core.IKey
      description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IKey"></xref> object. </p>
- uid: com.microsoft.azure.storage.table.TableEncryptionPolicy.setKeyResolver(IKeyResolver)
  id: setKeyResolver(IKeyResolver)
  parent: com.microsoft.azure.storage.table.TableEncryptionPolicy
  href: com.microsoft.azure.storage.table.TableEncryptionPolicy.yml
  langs:
  - java
  name: setKeyResolver(IKeyResolver keyResolver)
  nameWithType: TableEncryptionPolicy.setKeyResolver(IKeyResolver keyResolver)
  fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy.setKeyResolver(IKeyResolver keyResolver)
  overload: com.microsoft.azure.storage.table.TableEncryptionPolicy.setKeyResolver*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEncryptionPolicy.java
    startLine: 112
  package: com.microsoft.azure.storage.table
  summary: "<p>Sets the key resolver used to select the correct key for decrypting existing table entities.</p>\r\n<p></p>"
  syntax:
    content: public void setKeyResolver(IKeyResolver keyResolver)
    parameters:
    - id: keyResolver
      type: com.microsoft.azure.keyvault.core.IKeyResolver
      description: <p>A resolver that returns an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IKey"></xref> given a keyId. </p>
- uid: com.microsoft.azure.storage.table.TableEncryptionPolicy.TableEncryptionPolicy(IKey,IKeyResolver)
  id: TableEncryptionPolicy(IKey,IKeyResolver)
  parent: com.microsoft.azure.storage.table.TableEncryptionPolicy
  href: com.microsoft.azure.storage.table.TableEncryptionPolicy.yml
  langs:
  - java
  name: TableEncryptionPolicy(IKey key, IKeyResolver keyResolver)
  nameWithType: TableEncryptionPolicy.TableEncryptionPolicy(IKey key, IKeyResolver keyResolver)
  fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy.TableEncryptionPolicy(IKey key, IKeyResolver keyResolver)
  overload: com.microsoft.azure.storage.table.TableEncryptionPolicy.TableEncryptionPolicy*
  type: Constructor
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEncryptionPolicy.java
    startLine: 73
  package: com.microsoft.azure.storage.table
  summary: "<p>Initializes a new instance of the <xref uid=\"com.microsoft.azure.storage.table.TableEncryptionPolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableEncryptionPolicy\"></xref> class with the specified key and resolver. </p>\r\n<p>If the generated policy is intended to be used for encryption, users are expected to provide a key at the minimum. The absence of key will cause an exception to be thrown during encryption. If the generated policy is intended to be used for decryption, users can provide a keyResolver. The client library will - 1. Invoke the key resolver if specified to get the key. 2. If resolver is not specified but a key is specified, match the key id on the key and use it.</p>\r\n<p></p>"
  syntax:
    content: public TableEncryptionPolicy(IKey key, IKeyResolver keyResolver)
    parameters:
    - id: key
      type: com.microsoft.azure.keyvault.core.IKey
      description: <p>An object of type <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IKey"></xref> that is used to wrap/unwrap the content encryption key. </p>
    - id: keyResolver
      type: com.microsoft.azure.keyvault.core.IKeyResolver
      description: <p>The key resolver used to select the correct key for decrypting existing table entities. </p>
references:
- uid: com.microsoft.azure.storage.table.TableEncryptionPolicy.TableEncryptionPolicy*
  name: TableEncryptionPolicy
  nameWithType: TableEncryptionPolicy.TableEncryptionPolicy
  fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy.TableEncryptionPolicy
  package: com.microsoft.azure.storage.table
- uid: com.microsoft.azure.storage.table.TableEncryptionPolicy.getKey*
  name: getKey
  nameWithType: TableEncryptionPolicy.getKey
  fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy.getKey
  package: com.microsoft.azure.storage.table
- uid: com.microsoft.azure.storage.table.TableEncryptionPolicy.getKeyResolver*
  name: getKeyResolver
  nameWithType: TableEncryptionPolicy.getKeyResolver
  fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy.getKeyResolver
  package: com.microsoft.azure.storage.table
- uid: com.microsoft.azure.storage.table.TableEncryptionPolicy.setKey*
  name: setKey
  nameWithType: TableEncryptionPolicy.setKey
  fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy.setKey
  package: com.microsoft.azure.storage.table
- uid: com.microsoft.azure.storage.table.TableEncryptionPolicy.setKeyResolver*
  name: setKeyResolver
  nameWithType: TableEncryptionPolicy.setKeyResolver
  fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy.setKeyResolver
  package: com.microsoft.azure.storage.table
- uid: com.microsoft.azure.keyvault.core.IKey
  parent: com.microsoft.azure.keyvault.core
  href: com.microsoft.azure.keyvault.core.IKey.yml
  name: IKey
  nameWithType: IKey
  fullName: com.microsoft.azure.keyvault.core.IKey
  type: Interface
  summary: "<p>Interface for representing cryptographic keys with the Microsoft Azure Key Vault libraries. </p>"
  syntax:
    content: public interface IKey
- uid: com.microsoft.azure.keyvault.core.IKeyResolver
  parent: com.microsoft.azure.keyvault.core
  href: com.microsoft.azure.keyvault.core.IKeyResolver.yml
  name: IKeyResolver
  nameWithType: IKeyResolver
  fullName: com.microsoft.azure.keyvault.core.IKeyResolver
  type: Interface
  summary: "<p>Interface for representing key resolving operations with the Microsoft Azure Key Vault libraries. </p>"
  syntax:
    content: public interface IKeyResolver
- uid: com.microsoft.azure.storage.table.TableEncryptionPolicy
  parent: com.microsoft.azure.storage.table
  href: com.microsoft.azure.storage.table.TableEncryptionPolicy.yml
  name: TableEncryptionPolicy
  nameWithType: TableEncryptionPolicy
  fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy
  type: Class
  summary: "<p>Represents a table encryption policy that is used to perform envelope encryption/decryption of Azure table entities. </p>"
  syntax: *o1
- uid: com.microsoft.azure.storage.table.EntityProperty
  parent: com.microsoft.azure.storage.table
  href: com.microsoft.azure.storage.table.EntityProperty.yml
  name: EntityProperty
  nameWithType: EntityProperty
  fullName: com.microsoft.azure.storage.table.EntityProperty
  type: Class
  summary: "<p>A class which represents a single typed property value in a table entity. An <xref uid=\"com.microsoft.azure.storage.table.EntityProperty\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EntityProperty\"></xref> stores the data type as an <xref uid=\"com.microsoft.azure.storage.table.EdmType\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EdmType\"></xref>. The value, which may be  for object types, but not for primitive types, is serialized and stored as a . </p>\r\n<p>\r\n  <xref uid=\"com.microsoft.azure.storage.table.EntityProperty\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EntityProperty\"></xref> provides overloaded constructors and overloads of the  method for supported value types. Each overloaded constructor or  method sets the <xref uid=\"com.microsoft.azure.storage.table.EdmType\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EdmType\"></xref> and serializes the value appropriately based on the parameter type. </p>\r\n<p>Use one of the <em>Type</em> methods to deserialize an <xref uid=\"com.microsoft.azure.storage.table.EntityProperty\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EntityProperty\"></xref> as the appropriate Java type. The method will throw a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParseException\"></xref> or <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalArgumentException\"></xref> if the <xref uid=\"com.microsoft.azure.storage.table.EntityProperty\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EntityProperty\"></xref> cannot be deserialized as the Java type. </p>"
  syntax:
    content: public class EntityProperty
- uid: com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver
  parent: com.microsoft.azure.storage.table
  href: com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver.yml
  name: TableRequestOptions.EncryptionResolver
  nameWithType: TableRequestOptions.EncryptionResolver
  fullName: com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver
  type: Interface
  summary: "<p>The interface whose function is used to get the value indicating whether a property should be encrypted or not given the partition key, row key, and the property name. </p>"
  syntax:
    content: public interface EncryptionResolver
- uid: com.microsoft.azure.storage.StorageException
  parent: com.microsoft.azure.storage
  href: com.microsoft.azure.storage.StorageException.yml
  name: StorageException
  nameWithType: StorageException
  fullName: com.microsoft.azure.storage.StorageException
  type: Class
  summary: "<p>Represents an exception for the Microsoft Azure storage service. </p>"
  syntax:
    content: public class StorageException
- uid: com.microsoft.azure.storage.core.EncryptionData
  parent: com.microsoft.azure.storage.core
  href: com.microsoft.azure.storage.core.EncryptionData.yml
  name: EncryptionData
  nameWithType: EncryptionData
  fullName: com.microsoft.azure.storage.core.EncryptionData
  type: Class
  summary: "<p>RESERVED FOR INTERNAL USE. Represents the encryption data that is stored on the service. </p>"
  syntax:
    content: public class EncryptionData
