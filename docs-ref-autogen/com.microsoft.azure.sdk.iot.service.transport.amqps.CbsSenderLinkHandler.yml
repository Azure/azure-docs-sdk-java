### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.CbsSenderLinkHandler"
fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.CbsSenderLinkHandler"
name: "CbsSenderLinkHandler"
nameWithType: "CbsSenderLinkHandler"
summary: "Every token based authentication over AMQP requires a CBS session with a sender and receiver link."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"org.apache.qpid.proton.engine.BaseHandler?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.sdk.iot.service.transport.amqps.SenderLinkHandler?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.microsoft.azure.sdk.iot.service.transport.amqps.SenderLinkHandler.getLinkInstanceType()"
- "com.microsoft.azure.sdk.iot.service.transport.amqps.SenderLinkHandler.onLinkInit(org.apache.qpid.proton.engine.Event)"
- "com.microsoft.azure.sdk.iot.service.transport.amqps.SenderLinkHandler.onLinkLocalClose(org.apache.qpid.proton.engine.Event)"
- "com.microsoft.azure.sdk.iot.service.transport.amqps.SenderLinkHandler.onLinkLocalOpen(org.apache.qpid.proton.engine.Event)"
- "com.microsoft.azure.sdk.iot.service.transport.amqps.SenderLinkHandler.onLinkRemoteClose(org.apache.qpid.proton.engine.Event)"
- "com.microsoft.azure.sdk.iot.service.transport.amqps.SenderLinkHandler.onLinkRemoteOpen(org.apache.qpid.proton.engine.Event)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
- "org.apache.qpid.proton.engine.BaseHandler.add(org.apache.qpid.proton.engine.Handler)"
- "org.apache.qpid.proton.engine.BaseHandler.children()"
- "org.apache.qpid.proton.engine.BaseHandler.getHandler(org.apache.qpid.proton.engine.Extendable)"
- "org.apache.qpid.proton.engine.BaseHandler.getHandler(org.apache.qpid.proton.engine.Record)"
- "org.apache.qpid.proton.engine.BaseHandler.handle(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onConnectionBound(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onConnectionFinal(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onConnectionInit(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onConnectionLocalClose(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onConnectionLocalOpen(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onConnectionRemoteClose(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onConnectionRemoteOpen(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onConnectionUnbound(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onDelivery(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onLinkFinal(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onLinkFlow(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onLinkLocalDetach(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onLinkRemoteDetach(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onReactorFinal(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onReactorInit(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onReactorQuiesced(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSelectableError(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSelectableExpired(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSelectableFinal(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSelectableInit(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSelectableReadable(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSelectableUpdated(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSelectableWritable(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSessionFinal(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSessionInit(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSessionLocalClose(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSessionLocalOpen(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSessionRemoteClose(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSessionRemoteOpen(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onTimerTask(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onTransport(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onTransportClosed(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onTransportError(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onTransportHeadClosed(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onTransportTailClosed(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onUnhandled(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.setHandler(org.apache.qpid.proton.engine.Extendable,org.apache.qpid.proton.engine.Handler)"
- "org.apache.qpid.proton.engine.BaseHandler.setHandler(org.apache.qpid.proton.engine.Record,org.apache.qpid.proton.engine.Handler)"
syntax: "public final class CbsSenderLinkHandler extends SenderLinkHandler"
methods:
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.CbsSenderLinkHandler.getCurrentAccessToken()"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.CbsSenderLinkHandler.getCurrentAccessToken()"
  name: "getCurrentAccessToken()"
  nameWithType: "CbsSenderLinkHandler.getCurrentAccessToken()"
  syntax: "public AccessToken getCurrentAccessToken()"
  returns:
    type: "<xref href=\"com.azure.core.credential.AccessToken?alt=com.azure.core.credential.AccessToken&text=AccessToken\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.CbsSenderLinkHandler.getLinkInstanceType()"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.CbsSenderLinkHandler.getLinkInstanceType()"
  name: "getLinkInstanceType()"
  nameWithType: "CbsSenderLinkHandler.getLinkInstanceType()"
  overridden: "com.microsoft.azure.sdk.iot.service.transport.amqps.SenderLinkHandler.getLinkInstanceType()"
  syntax: "public String getLinkInstanceType()"
  returns:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.CbsSenderLinkHandler.sendAuthenticationMessage(java.util.UUID)"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.CbsSenderLinkHandler.sendAuthenticationMessage(UUID authenticationMessageCorrelationId)"
  name: "sendAuthenticationMessage(UUID authenticationMessageCorrelationId)"
  nameWithType: "CbsSenderLinkHandler.sendAuthenticationMessage(UUID authenticationMessageCorrelationId)"
  parameters:
  - name: "authenticationMessageCorrelationId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public int sendAuthenticationMessage(UUID authenticationMessageCorrelationId)"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Every token based authentication over AMQP requires a CBS session with a sender and receiver link. This class defines the sender link which proactively sends renewed sas tokens to keep the device sessions authenticated."
metadata: {}
package: "com.microsoft.azure.sdk.iot.service.transport.amqps"
artifact: com.microsoft.azure.sdk.iot:iot-service-client:1.30.0
