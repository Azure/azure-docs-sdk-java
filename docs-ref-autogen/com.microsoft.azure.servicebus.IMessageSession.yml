### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.servicebus.IMessageSession
  id: IMessageSession
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus
  children:
  - com.microsoft.azure.servicebus.IMessageSession.getLockedUntilUtc()
  - com.microsoft.azure.servicebus.IMessageSession.getSessionId()
  - com.microsoft.azure.servicebus.IMessageSession.getState()
  - com.microsoft.azure.servicebus.IMessageSession.getStateAsync()
  - com.microsoft.azure.servicebus.IMessageSession.renewSessionLock()
  - com.microsoft.azure.servicebus.IMessageSession.renewSessionLockAsync()
  - com.microsoft.azure.servicebus.IMessageSession.setState(byte[])
  - com.microsoft.azure.servicebus.IMessageSession.setStateAsync(byte[])
  langs:
  - java
  name: IMessageSession
  nameWithType: IMessageSession
  fullName: com.microsoft.azure.servicebus.IMessageSession
  type: Interface
  package: com.microsoft.azure.servicebus
  summary: >-
    Describes a Session object. IMessageSession can be used to perform operations on sessions.


    Service Bus Sessions, also called 'Groups' in the AMQP 1.0 protocol, are unbounded sequences of related messages. ServiceBus guarantees ordering of messages in a session.


    Any sender can create a session when submitting messages into a Topic or Queue by setting the <xref uid="com.microsoft.azure.servicebus.Message.sessionId" data-throw-if-not-resolved="false">Message#sessionId</xref> property on Message to some application defined unique identifier. At the AMQP 1.0 protocol level, this value maps to the group-id property.


    Sessions come into existence when there is at least one message with the session's SessionId in the Queue or Topic subscription. Once a Session exists, there is no defined moment or gesture for when the session expires or disappears.
  syntax:
    content: public interface IMessageSession extends IMessageReceiver
  implements:
  - com.microsoft.azure.servicebus.IMessageReceiver
- uid: com.microsoft.azure.servicebus.IMessageSession.getLockedUntilUtc()
  id: getLockedUntilUtc()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSession
  langs:
  - java
  name: getLockedUntilUtc()
  nameWithType: IMessageSession.getLockedUntilUtc()
  fullName: com.microsoft.azure.servicebus.IMessageSession.getLockedUntilUtc()
  overload: com.microsoft.azure.servicebus.IMessageSession.getLockedUntilUtc*
  type: Method
  package: com.microsoft.azure.servicebus
  syntax:
    content: public abstract Instant getLockedUntilUtc()
    return:
      type: java.time.Instant
      description: Gets the time that the session identified by <xref uid="com.microsoft.azure.servicebus.IMessageSession.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref> is locked until for this client.
- uid: com.microsoft.azure.servicebus.IMessageSession.getSessionId()
  id: getSessionId()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSession
  langs:
  - java
  name: getSessionId()
  nameWithType: IMessageSession.getSessionId()
  fullName: com.microsoft.azure.servicebus.IMessageSession.getSessionId()
  overload: com.microsoft.azure.servicebus.IMessageSession.getSessionId*
  type: Method
  package: com.microsoft.azure.servicebus
  syntax:
    content: public abstract String getSessionId()
    return:
      type: java.lang.String
      description: Gets the SessionId.
- uid: com.microsoft.azure.servicebus.IMessageSession.getState()
  id: getState()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSession
  langs:
  - java
  name: getState()
  nameWithType: IMessageSession.getState()
  fullName: com.microsoft.azure.servicebus.IMessageSession.getState()
  overload: com.microsoft.azure.servicebus.IMessageSession.getState*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Gets the session state.
  syntax:
    content: public abstract byte[] getState()
    return:
      type: byte[]
      description: The session state
  exceptions:
  - type: java.lang.InterruptedException
    description: if the current thread was interrupted while waiting
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
    description: if the current thread was interrupted while waiting
- uid: com.microsoft.azure.servicebus.IMessageSession.getStateAsync()
  id: getStateAsync()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSession
  langs:
  - java
  name: getStateAsync()
  nameWithType: IMessageSession.getStateAsync()
  fullName: com.microsoft.azure.servicebus.IMessageSession.getStateAsync()
  overload: com.microsoft.azure.servicebus.IMessageSession.getStateAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously gets the session state.
  syntax:
    content: public abstract CompletableFuture<byte[]> getStateAsync()
    return:
      type: java.util.concurrent.CompletableFuture<byte[]>
      description: a CompletableFuture representing the pending session state retrieving.
- uid: com.microsoft.azure.servicebus.IMessageSession.renewSessionLock()
  id: renewSessionLock()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSession
  langs:
  - java
  name: renewSessionLock()
  nameWithType: IMessageSession.renewSessionLock()
  fullName: com.microsoft.azure.servicebus.IMessageSession.renewSessionLock()
  overload: com.microsoft.azure.servicebus.IMessageSession.renewSessionLock*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: >-
    Renews the lock on the session specified by the <xref uid="com.microsoft.azure.servicebus.IMessageSession.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>. The lock will be renewed based on the setting specified on the entity.


    When you accept a session, the session is locked for this client instance by the service for a duration as specified during the Queue/Subscription creation. If processing of the session requires longer than this duration, the session-lock needs to be renewed. For each renewal, the session-lock is renewed by the entity's LockDuration.


    Renewal of session renews all the messages in the session as well. Each individual message need not be renewed.
  syntax:
    content: public abstract void renewSessionLock()
  exceptions:
  - type: java.lang.InterruptedException
    description: if the current thread was interrupted while waiting
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
    description: if the current thread was interrupted while waiting
- uid: com.microsoft.azure.servicebus.IMessageSession.renewSessionLockAsync()
  id: renewSessionLockAsync()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSession
  langs:
  - java
  name: renewSessionLockAsync()
  nameWithType: IMessageSession.renewSessionLockAsync()
  fullName: com.microsoft.azure.servicebus.IMessageSession.renewSessionLockAsync()
  overload: com.microsoft.azure.servicebus.IMessageSession.renewSessionLockAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Renews the lock on the session specified by the <xref uid="com.microsoft.azure.servicebus.IMessageSession.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>. The lock will be renewed based on the setting specified on the entity.
  syntax:
    content: public abstract CompletableFuture<Void> renewSessionLockAsync()
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
      description: a CompletableFuture representing the pending renew.
- uid: com.microsoft.azure.servicebus.IMessageSession.setState(byte[])
  id: setState(byte[])
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSession
  langs:
  - java
  name: setState(byte[] state)
  nameWithType: IMessageSession.setState(byte[] state)
  fullName: com.microsoft.azure.servicebus.IMessageSession.setState(byte[] state)
  overload: com.microsoft.azure.servicebus.IMessageSession.setState*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Set a custom state on the session which can be later retrieved using <xref uid="com.microsoft.azure.servicebus.IMessageSession.getState()" data-throw-if-not-resolved="false">IMessageSession#getState()</xref>.
  syntax:
    content: public abstract void setState(byte[] state)
    parameters:
    - id: state
      type: byte[]
      description: The session state.
  exceptions:
  - type: java.lang.InterruptedException
    description: if the current thread was interrupted while waiting
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
    description: if the current thread was interrupted while waiting
- uid: com.microsoft.azure.servicebus.IMessageSession.setStateAsync(byte[])
  id: setStateAsync(byte[])
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageSession
  langs:
  - java
  name: setStateAsync(byte[] state)
  nameWithType: IMessageSession.setStateAsync(byte[] state)
  fullName: com.microsoft.azure.servicebus.IMessageSession.setStateAsync(byte[] state)
  overload: com.microsoft.azure.servicebus.IMessageSession.setStateAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously set a custom state on the session which can be later retrieved using <xref uid="com.microsoft.azure.servicebus.IMessageSession.getState()" data-throw-if-not-resolved="false">IMessageSession#getState()</xref>.
  syntax:
    content: public abstract CompletableFuture<Void> setStateAsync(byte[] state)
    parameters:
    - id: state
      type: byte[]
      description: The session state.
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
      description: a CompletableFuture representing the pending session state setting.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.servicebus.IMessageSession.getSessionId*
  name: getSessionId
  nameWithType: IMessageSession.getSessionId
  fullName: com.microsoft.azure.servicebus.IMessageSession.getSessionId
  package: com.microsoft.azure.servicebus
- uid: java.time.Instant
  spec.java:
  - uid: java.time.Instant
    name: Instant
    fullName: java.time.Instant
- uid: com.microsoft.azure.servicebus.IMessageSession.getLockedUntilUtc*
  name: getLockedUntilUtc
  nameWithType: IMessageSession.getLockedUntilUtc
  fullName: com.microsoft.azure.servicebus.IMessageSession.getLockedUntilUtc
  package: com.microsoft.azure.servicebus
- uid: java.lang.InterruptedException
  spec.java:
  - uid: java.lang.InterruptedException
    name: InterruptedException
    fullName: java.lang.InterruptedException
- uid: com.microsoft.azure.servicebus.primitives.ServiceBusException
  name: ServiceBusException
  nameWithType: ServiceBusException
  fullName: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.IMessageSession.renewSessionLock*
  name: renewSessionLock
  nameWithType: IMessageSession.renewSessionLock
  fullName: com.microsoft.azure.servicebus.IMessageSession.renewSessionLock
  package: com.microsoft.azure.servicebus
- uid: java.util.concurrent.CompletableFuture<java.lang.Void>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.IMessageSession.renewSessionLockAsync*
  name: renewSessionLockAsync
  nameWithType: IMessageSession.renewSessionLockAsync
  fullName: com.microsoft.azure.servicebus.IMessageSession.renewSessionLockAsync
  package: com.microsoft.azure.servicebus
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.microsoft.azure.servicebus.IMessageSession.setState*
  name: setState
  nameWithType: IMessageSession.setState
  fullName: com.microsoft.azure.servicebus.IMessageSession.setState
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.IMessageSession.setStateAsync*
  name: setStateAsync
  nameWithType: IMessageSession.setStateAsync
  fullName: com.microsoft.azure.servicebus.IMessageSession.setStateAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.IMessageSession.getState*
  name: getState
  nameWithType: IMessageSession.getState
  fullName: com.microsoft.azure.servicebus.IMessageSession.getState
  package: com.microsoft.azure.servicebus
- uid: java.util.concurrent.CompletableFuture<byte[]>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.IMessageSession.getStateAsync*
  name: getStateAsync
  nameWithType: IMessageSession.getStateAsync
  fullName: com.microsoft.azure.servicebus.IMessageSession.getStateAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.IMessageReceiver
  name: IMessageReceiver
  nameWithType: IMessageReceiver
  fullName: com.microsoft.azure.servicebus.IMessageReceiver
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: java.util.concurrent.CompletableFuture
  name: CompletableFuture
  nameWithType: CompletableFuture
  fullName: java.util.concurrent.CompletableFuture
