### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient
  id: DeviceClient
  parent: com.microsoft.azure.sdk.iot.device
  children:
  - com.microsoft.azure.sdk.iot.device.DeviceClient.close()
  - com.microsoft.azure.sdk.iot.device.DeviceClient.closeNow()
  - com.microsoft.azure.sdk.iot.device.DeviceClient.completeFileUpload(FileUploadCompletionNotification)
  - com.microsoft.azure.sdk.iot.device.DeviceClient.completeFileUploadAsync(FileUploadCompletionNotification)
  - com.microsoft.azure.sdk.iot.device.DeviceClient.CONNECTION_STRING_CHARSET
  - com.microsoft.azure.sdk.iot.device.DeviceClient.createFromSecurityProvider(String,String,SecurityProvider,IotHubClientProtocol)
  - com.microsoft.azure.sdk.iot.device.DeviceClient.createFromSecurityProvider(String,String,SecurityProvider,IotHubClientProtocol,ClientOptions)
  - com.microsoft.azure.sdk.iot.device.DeviceClient.DEVICE_ID_ATTRIBUTE
  - com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient()
  - com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,IotHubClientProtocol)
  - com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,IotHubClientProtocol,ClientOptions)
  - com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,IotHubClientProtocol,SSLContext)
  - com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,IotHubClientProtocol,String,boolean,String,boolean)
  - com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,TransportClient)
  - com.microsoft.azure.sdk.iot.device.DeviceClient.getDeviceTwin()
  - com.microsoft.azure.sdk.iot.device.DeviceClient.getFileUploadSasUri(FileUploadSasUriRequest)
  - com.microsoft.azure.sdk.iot.device.DeviceClient.HOSTNAME_ATTRIBUTE
  - com.microsoft.azure.sdk.iot.device.DeviceClient.open()
  - com.microsoft.azure.sdk.iot.device.DeviceClient.RECEIVE_PERIOD_MILLIS
  - com.microsoft.azure.sdk.iot.device.DeviceClient.RECEIVE_PERIOD_MILLIS_AMQPS
  - com.microsoft.azure.sdk.iot.device.DeviceClient.RECEIVE_PERIOD_MILLIS_HTTPS
  - com.microsoft.azure.sdk.iot.device.DeviceClient.RECEIVE_PERIOD_MILLIS_MQTT
  - com.microsoft.azure.sdk.iot.device.DeviceClient.registerConnectionStateCallback(IotHubConnectionStateCallback,Object)
  - com.microsoft.azure.sdk.iot.device.DeviceClient.SEND_PERIOD_MILLIS
  - com.microsoft.azure.sdk.iot.device.DeviceClient.setMessageCallback(MessageCallback,Object)
  - com.microsoft.azure.sdk.iot.device.DeviceClient.setOption(String,Object)
  - com.microsoft.azure.sdk.iot.device.DeviceClient.SHARED_ACCESS_KEY_ATTRIBUTE
  - com.microsoft.azure.sdk.iot.device.DeviceClient.SHARED_ACCESS_TOKEN_ATTRIBUTE
  - com.microsoft.azure.sdk.iot.device.DeviceClient.startDeviceTwin(IotHubEventCallback,Object,PropertyCallBack,Object)
  - com.microsoft.azure.sdk.iot.device.DeviceClient.startDeviceTwin(IotHubEventCallback,Object,TwinPropertyCallBack,Object)
  - com.microsoft.azure.sdk.iot.device.DeviceClient.subscribeToDeviceMethod(DeviceMethodCallback,Object,IotHubEventCallback,Object)
  - com.microsoft.azure.sdk.iot.device.DeviceClient.uploadToBlobAsync(String,InputStream,long,IotHubEventCallback,Object)
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: DeviceClient
  nameWithType: DeviceClient
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient
  type: Class
  source:
    remote: &o0
      path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-java
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 45
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>The public-facing API. Allows a single logical or physical device to connect to an IoT Hub. The IoT Hub client supports sending events to and receiving messages from an IoT Hub. </p>\r\n<p>To support these workflows, the client library will provide the following abstractions: a message, with its payload and associated properties; and a client, which sends and receives messages. </p>\r\n<p>The client buffers messages while the network is down, and re-sends them when the network comes back online. It also batches messages to improve communication efficiency (HTTPS only). </p>\r\n<p>The client supports HTTPS 1.1 and AMQPS 1.0 transports. </p>"
  syntax: &o3
    content: public class DeviceClient extends InternalClient
  inheritance:
  - java.lang.Object
  - com.microsoft.azure.sdk.iot.device.InternalClient
  inheritedMembers:
  - com.microsoft.azure.sdk.iot.device.InternalClient.getConfig()
  - com.microsoft.azure.sdk.iot.device.InternalClient.getProductInfo()
  - com.microsoft.azure.sdk.iot.device.InternalClient.registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback,Object)
  - com.microsoft.azure.sdk.iot.device.InternalClient.sendEventAsync(Message,IotHubEventCallback,Object)
  - com.microsoft.azure.sdk.iot.device.InternalClient.sendEventBatchAsync(List<Message>,IotHubEventCallback,Object)
  - com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(Set<Property>)
  - com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(Set<Property>,int)
  - com.microsoft.azure.sdk.iot.device.InternalClient.setOperationTimeout(long)
  - com.microsoft.azure.sdk.iot.device.InternalClient.setProxySettings(ProxySettings)
  - com.microsoft.azure.sdk.iot.device.InternalClient.setRetryPolicy(RetryPolicy)
  - com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(Map<Property, Pair<PropertyCallBack<String, Object>, Object>>)
  - com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToTwinDesiredProperties(Map<Property, Pair<TwinPropertyCallBack, Object>>)
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.close()
  id: close()
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: close()
  nameWithType: DeviceClient.close()
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.close()
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.close*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 410
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Completes all current outstanding requests and closes the IoT Hub client. Must be called to terminate the background thread that is sending data to IoT Hub. After<code>closeNow() \r\n    </code> is called, the IoT Hub client is no longer usable. If the client is already closed, the function shall do nothing. <xrefsect id=\"deprecated_1_deprecated000063\"><xreftitle>Deprecated</xreftitle><xrefdescription><p>: As of release 1.1.25 this call is replaced by <xref uid=\"com.microsoft.azure.sdk.iot.device.DeviceClient.closeNow()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"closeNow()\"></xref></p></xrefdescription></xrefsect></p>\r\n<p></p>"
  syntax:
    content: public void close()
  exceptions:
  - type: cbf33bbe
    description: <p>if the connection to an IoT Hub cannot be closed. </p>
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.closeNow()
  id: closeNow()
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: closeNow()
  nameWithType: DeviceClient.closeNow()
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.closeNow()
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.closeNow*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 446
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Closes the IoT Hub client by releasing any resources held by client. When closeNow is called all the messages that were in transit or pending to be sent will be informed to the user in the callbacks and any existing connection to IotHub will be closed. Must be called to terminate the background thread that is sending data to IoT Hub. After<code>closeNow() \r\n    </code> is called, the IoT Hub client is no longer usable. If the client is already closed, the function shall do nothing.</p>\r\n<p></p>"
  syntax: &o4
    content: public void closeNow()
  exceptions:
  - type: cbf33bbe
    description: <p>if the connection to an IoT Hub cannot be closed. </p>
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.completeFileUpload(FileUploadCompletionNotification)
  id: completeFileUpload(FileUploadCompletionNotification)
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: completeFileUpload(FileUploadCompletionNotification notification)
  nameWithType: DeviceClient.completeFileUpload(FileUploadCompletionNotification notification)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.completeFileUpload(FileUploadCompletionNotification notification)
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.completeFileUpload*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 552
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Notify IoT Hub that a file upload has been completed, successfully or otherwise. See <a href=\"https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-file-upload#notify-iot-hub-of-a-completed-file-upload\">this documentation</a> for more details. </p>"
  syntax: &o6
    content: public void completeFileUpload(FileUploadCompletionNotification notification)
    parameters:
    - id: notification
      type: com.microsoft.azure.sdk.iot.deps.serializer.FileUploadCompletionNotification
      description: <p>The notification details, including if the file upload succeeded. </p>
  exceptions:
  - type: cbf33bbe
    description: <p>If this HTTPS request fails to send. </p>
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.completeFileUploadAsync(FileUploadCompletionNotification)
  id: completeFileUploadAsync(FileUploadCompletionNotification)
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: completeFileUploadAsync(FileUploadCompletionNotification notification)
  nameWithType: DeviceClient.completeFileUploadAsync(FileUploadCompletionNotification notification)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.completeFileUploadAsync(FileUploadCompletionNotification notification)
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.completeFileUploadAsync*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 542
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Notify IoT Hub that a file upload has been completed, successfully or otherwise. See <a href=\"https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-file-upload#notify-iot-hub-of-a-completed-file-upload\">this documentation</a> for more details. <xrefsect id=\"deprecated_1_deprecated000065\"><xreftitle>Deprecated</xreftitle><xrefdescription><p>This function is not actually async, so use <xref uid=\"com.microsoft.azure.sdk.iot.device.DeviceClient.completeFileUpload(FileUploadCompletionNotification)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"completeFileUpload(FileUploadCompletionNotification)\"></xref> to avoid confusion </p></xrefdescription></xrefsect></p>"
  syntax:
    content: public void completeFileUploadAsync(FileUploadCompletionNotification notification)
    parameters:
    - id: notification
      type: com.microsoft.azure.sdk.iot.deps.serializer.FileUploadCompletionNotification
      description: <p>The notification details, including if the file upload succeeded. </p>
  exceptions:
  - type: cbf33bbe
    description: <p>If this HTTPS request fails to send. </p>
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.CONNECTION_STRING_CHARSET
  id: CONNECTION_STRING_CHARSET
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: CONNECTION_STRING_CHARSET
  nameWithType: DeviceClient.CONNECTION_STRING_CHARSET
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.CONNECTION_STRING_CHARSET
  type: Field
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 78
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>\r\n  <xrefsect id=\"deprecated_1_deprecated000058\">\r\n    <xreftitle>Deprecated</xreftitle>\r\n    <xrefdescription>\r\n      <p>as of release 1.2.27 this value is deprecated and will not be replaced. The charset used for URL-encoding the device ID in the connection string. </p>\r\n    </xrefdescription>\r\n  </xrefsect>\r\n</p>"
  syntax:
    content: public static final Charset CONNECTION_STRING_CHARSET= StandardCharsets.UTF_8
    return:
      type: d07b5f81
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.createFromSecurityProvider(String,String,SecurityProvider,IotHubClientProtocol)
  id: createFromSecurityProvider(String,String,SecurityProvider,IotHubClientProtocol)
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: createFromSecurityProvider(String uri, String deviceId, SecurityProvider securityProvider, IotHubClientProtocol protocol)
  nameWithType: DeviceClient.createFromSecurityProvider(String uri, String deviceId, SecurityProvider securityProvider, IotHubClientProtocol protocol)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.createFromSecurityProvider(String uri, String deviceId, SecurityProvider securityProvider, IotHubClientProtocol protocol)
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.createFromSecurityProvider*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 286
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Creates a device client that uses the provided security provider for authentication.</p>\r\n<p></p>"
  syntax:
    content: public static DeviceClient createFromSecurityProvider(String uri, String deviceId, SecurityProvider securityProvider, IotHubClientProtocol protocol)
    parameters:
    - id: uri
      type: "26831127"
      description: '<p>The hostname of the iot hub to connect to (format: "yourHubName.azure-devices.net") </p>'
    - id: deviceId
      type: "26831127"
      description: <p>The id for the device to use </p>
    - id: securityProvider
      type: com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider
      description: <p>The security provider for the device </p>
    - id: protocol
      type: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
      description: <p>The protocol the device shall use for communication to the IoT Hub </p>
    return:
      type: com.microsoft.azure.sdk.iot.device.DeviceClient
      description: <p>The created device client instance </p>
  exceptions:
  - type: "44102508"
    description: <p>If the provided connString could not be parsed. </p>
  - type: cbf33bbe
    description: <p>If the SecurityProvider throws any exception while authenticating </p>
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.createFromSecurityProvider(String,String,SecurityProvider,IotHubClientProtocol,ClientOptions)
  id: createFromSecurityProvider(String,String,SecurityProvider,IotHubClientProtocol,ClientOptions)
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: createFromSecurityProvider(String uri, String deviceId, SecurityProvider securityProvider, IotHubClientProtocol protocol, ClientOptions clientOptions)
  nameWithType: DeviceClient.createFromSecurityProvider(String uri, String deviceId, SecurityProvider securityProvider, IotHubClientProtocol protocol, ClientOptions clientOptions)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.createFromSecurityProvider(String uri, String deviceId, SecurityProvider securityProvider, IotHubClientProtocol protocol, ClientOptions clientOptions)
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.createFromSecurityProvider*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 303
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Creates a device client that uses the provided security provider for authentication.</p>\r\n<p></p>"
  syntax:
    content: public static DeviceClient createFromSecurityProvider(String uri, String deviceId, SecurityProvider securityProvider, IotHubClientProtocol protocol, ClientOptions clientOptions)
    parameters:
    - id: uri
      type: "26831127"
      description: '<p>The hostname of the iot hub to connect to (format: "yourHubName.azure-devices.net") </p>'
    - id: deviceId
      type: "26831127"
      description: <p>The id for the device to use </p>
    - id: securityProvider
      type: com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider
      description: <p>The security provider for the device </p>
    - id: protocol
      type: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
      description: <p>The protocol the device shall use for communication to the IoT Hub </p>
    - id: clientOptions
      type: com.microsoft.azure.sdk.iot.device.ClientOptions
      description: <p>The options that allow configuration of the device client instance during initialization </p>
    return:
      type: com.microsoft.azure.sdk.iot.device.DeviceClient
      description: <p>The created device client instance </p>
  exceptions:
  - type: "44102508"
    description: <p>If the provided connString could not be parsed. </p>
  - type: cbf33bbe
    description: <p>If the SecurityProvider throws any exception while authenticating </p>
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.DEVICE_ID_ATTRIBUTE
  id: DEVICE_ID_ATTRIBUTE
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: DEVICE_ID_ATTRIBUTE
  nameWithType: DeviceClient.DEVICE_ID_ATTRIBUTE
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.DEVICE_ID_ATTRIBUTE
  type: Field
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 58
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>\r\n  <xrefsect id=\"deprecated_1_deprecated000055\">\r\n    <xreftitle>Deprecated</xreftitle>\r\n    <xrefdescription>\r\n      <p>as of release 1.2.27 this value is deprecated and will not be replaced. The device ID attribute name in a connection string. </p>\r\n    </xrefdescription>\r\n  </xrefsect>\r\n</p>"
  syntax:
    content: public static final String DEVICE_ID_ATTRIBUTE= "DeviceId="
    return:
      type: 3d93591e
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient()
  id: DeviceClient()
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: DeviceClient()
  nameWithType: DeviceClient.DeviceClient()
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient()
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient*
  type: Constructor
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 909
  package: com.microsoft.azure.sdk.iot.device
  syntax:
    content: protected DeviceClient()
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,IotHubClientProtocol)
  id: DeviceClient(String,IotHubClientProtocol)
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: DeviceClient(String connString, IotHubClientProtocol protocol)
  nameWithType: DeviceClient.DeviceClient(String connString, IotHubClientProtocol protocol)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String connString, IotHubClientProtocol protocol)
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient*
  type: Constructor
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 178
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Constructor that takes a connection string as an argument.</p>\r\n<p></p>"
  syntax:
    content: public DeviceClient(String connString, IotHubClientProtocol protocol)
    parameters:
    - id: connString
      type: "26831127"
      description: >-
        <p>the connection string. The connection string is a set of key-value pairs that are separated by ';', with the keys and values separated by '='. It should contain values for the following keys: <code>HostName 

            </code> ,<code>DeviceId 

            </code> , and<code>SharedAccessKey 

            </code> . </p>
    - id: protocol
      type: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
      description: <p>the communication protocol used (i.e. HTTPS).</p>
  exceptions:
  - type: 3c87bd19
    description: >-
      <p>if any of<code>connString 

          </code> or <code>protocol 

          </code> are<code>null 

          </code> ; or if<code>connString 

          </code> is missing one of the following attributes:<code>HostName 

          </code> ,<code>DeviceId 

          </code> , or <code>SharedAccessKey 

          </code> or if the IoT hub hostname does not conform to RFC 3986 or if the provided<code>connString 

          </code> is for an x509 authenticated device </p>
  - type: "44102508"
    description: <p>if the hostname in the connection string is not a valid URI </p>
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,IotHubClientProtocol,ClientOptions)
  id: DeviceClient(String,IotHubClientProtocol,ClientOptions)
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: DeviceClient(String connString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  nameWithType: DeviceClient.DeviceClient(String connString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String connString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient*
  type: Constructor
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 200
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Constructor that takes a connection string as an argument.</p>\r\n<p></p>"
  syntax: &o2
    content: public DeviceClient(String connString, IotHubClientProtocol protocol, ClientOptions clientOptions)
    parameters:
    - id: connString
      type: "26831127"
      description: >-
        <p>the connection string. The connection string is a set of key-value pairs that are separated by ';', with the keys and values separated by '='. It should contain values for the following keys: <code>HostName 

            </code> ,<code>DeviceId 

            </code> , and<code>SharedAccessKey 

            </code> . </p>
    - id: protocol
      type: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
      description: <p>the communication protocol used (i.e. HTTPS) </p>
    - id: clientOptions
      type: com.microsoft.azure.sdk.iot.device.ClientOptions
      description: <p>The options that allow configuration of the device client instance during initialization</p>
  exceptions:
  - type: 3c87bd19
    description: >-
      <p>if any of<code>connString 

          </code> or <code>protocol 

          </code> are<code>null 

          </code> ; or if<code>connString 

          </code> is missing one of the following attributes:<code>HostName 

          </code> ,<code>DeviceId 

          </code> , or <code>SharedAccessKey 

          </code> or if the IoT hub hostname does not conform to RFC 3986 or if the provided<code>connString 

          </code> is for an x509 authenticated device </p>
  - type: "44102508"
    description: <p>if the hostname in the connection string is not a valid URI </p>
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,IotHubClientProtocol,SSLContext)
  id: DeviceClient(String,IotHubClientProtocol,SSLContext)
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext sslContext)
  nameWithType: DeviceClient.DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext sslContext)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext sslContext)
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient*
  type: Constructor
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 268
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Creates a device client that uses the provided SSLContext for SSL negotiation <xrefsect id=\"deprecated_1_deprecated000062\"><xreftitle>Deprecated</xreftitle><xrefdescription><p>For x509 authentication, use <xref uid=\"com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,IotHubClientProtocol,ClientOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeviceClient(String, IotHubClientProtocol, ClientOptions)\"></xref> and provide an SSLContext instance in the <xref uid=\"com.microsoft.azure.sdk.iot.device.ClientOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientOptions\"></xref> instance. For a sample on how to build this SSLContext, see <a href=\"https://github.com/Azure/azure-iot-sdk-java/blob/master/device/iot-device-samples/send-event-x509/src/main/java/samples/com/microsoft/azure/sdk/iot/SendEventX509.java\">this code</a> which references a helper class for building SSLContext objects for x509 authentication as well as for SAS based authentication. When not using this deprecated constructor, you can safely exclude the Bouncycastle dependencies that this library declares. See <a href=\"https://github.com/Azure/azure-iot-sdk-java/blob/master/device/iot-device-samples/send-event-x509/pom.xml\">this pom.xml</a> for an example of how to do this. </p></xrefdescription></xrefsect></p>"
  syntax:
    content: public DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext sslContext)
    parameters:
    - id: connString
      type: "26831127"
      description: '<p>the connection string for the device. May be an x509 connection string (format: "HostName=...;DeviceId=...;x509=true") and it may be a SAS connection string (format: "HostName=...;DeviceId=...;SharedAccessKey=..."). If this connection string is an x509 connection string, the client will use the provided SSLContext for authentication. </p>'
    - id: protocol
      type: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
      description: <p>the protocol to use when communicating with IotHub </p>
    - id: sslContext
      type: 13e89c07
      description: <p>the ssl context that will be used during authentication. If the provided connection string does not contain SAS based credentials, then the sslContext will be used for x509 authentication. If the provided connection string does contain SAS based credentials, the sslContext will still be used during SSL negotiation. </p>
  exceptions:
  - type: "44102508"
    description: <p>if the hostname in the connection string is not a valid URI </p>
  - type: "44102508"
    description: <p>if the hostname in the connection string is not a valid URI </p>
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,IotHubClientProtocol,String,boolean,String,boolean)
  id: DeviceClient(String,IotHubClientProtocol,String,boolean,String,boolean)
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: DeviceClient(String connString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)
  nameWithType: DeviceClient.DeviceClient(String connString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String connString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient*
  type: Constructor
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 237
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Constructor that uses x509 authentication for communicating with IotHub</p>\r\n<p>\r\n  <xrefsect id=\"deprecated_1_deprecated000061\">\r\n    <xreftitle>Deprecated</xreftitle>\r\n    <xrefdescription>\r\n      <p>For x509 authentication, use <xref uid=\"com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,IotHubClientProtocol,ClientOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeviceClient(String, IotHubClientProtocol, ClientOptions)\"></xref> and provide an SSLContext instance in the <xref uid=\"com.microsoft.azure.sdk.iot.device.ClientOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientOptions\"></xref> instance. For a sample on how to build this SSLContext, see <a href=\"https://github.com/Azure/azure-iot-sdk-java/blob/master/device/iot-device-samples/send-event-x509/src/main/java/samples/com/microsoft/azure/sdk/iot/SendEventX509.java\">this code</a> which references a helper class for building SSLContext objects for x509 authentication as well as for SAS based authentication. When not using this deprecated constructor, you can safely exclude the Bouncycastle dependencies that this library declares. See <a href=\"https://github.com/Azure/azure-iot-sdk-java/blob/master/device/iot-device-samples/send-event-x509/pom.xml\">this pom.xml</a> for an example of how to do this. </p>\r\n    </xrefdescription>\r\n  </xrefsect>\r\n</p>"
  syntax:
    content: public DeviceClient(String connString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)
    parameters:
    - id: connString
      type: "26831127"
      description: '<p>the connection string for the x509 device to connect as (format: "HostName=...;DeviceId=...;x509=true") </p>'
    - id: protocol
      type: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
      description: <p>the protocol to use when communicating with IotHub </p>
    - id: publicKeyCertificate
      type: "26831127"
      description: '<p>the PEM formatted public key certificate or the path to a PEM formatted public key certificate file. Append if there is any intermediate or chained certificates to the end of the public certificate file in the following format: <mdash></mdash><ndash></ndash>BEGIN CERTIFICATE<mdash></mdash><ndash></ndash> (Primary SSL certificate) <mdash></mdash><ndash></ndash>END CERTIFICATE<mdash></mdash><ndash></ndash><mdash></mdash>-BEGIN CERTIFICATE<mdash></mdash><ndash></ndash> (Intermediate certificate) <mdash></mdash><ndash></ndash>END CERTIFICATE<mdash></mdash><ndash></ndash><mdash></mdash><ndash></ndash>BEGIN CERTIFICATE<mdash></mdash><ndash></ndash> (Root certificate) <mdash></mdash><ndash></ndash>END CERTIFICATE<mdash></mdash><ndash></ndash></p>'
    - id: isCertificatePath
      type: 4fc6e284
      description: <p>if the provided publicKeyCertificate is a path to a file containing the PEM formatted public key certificate </p>
    - id: privateKey
      type: "26831127"
      description: <p>the PEM formatted private key or the path to a PEM formatted private key file </p>
    - id: isPrivateKeyPath
      type: 4fc6e284
      description: <p>if the provided privateKey is a path to a file containing the PEM formatted private key </p>
  exceptions:
  - type: "44102508"
    description: <p>if the hostname in the connection string is not a valid URI </p>
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,TransportClient)
  id: DeviceClient(String,TransportClient)
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: DeviceClient(String connString, TransportClient transportClient)
  nameWithType: DeviceClient.DeviceClient(String connString, TransportClient transportClient)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String connString, TransportClient transportClient)
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient*
  type: Constructor
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 131
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Constructor that takes a connection string and a transport client as an argument.</p>\r\n<p></p>"
  syntax:
    content: public DeviceClient(String connString, TransportClient transportClient)
    parameters:
    - id: connString
      type: "26831127"
      description: >-
        <p>the connection string. The connection string is a set of key-value pairs that are separated by ';', with the keys and values separated by '='. It should contain values for the following keys: <code>HostName 

            </code> ,<code>DeviceId 

            </code> , and<code>SharedAccessKey 

            </code> .</p>
    - id: transportClient
      type: com.microsoft.azure.sdk.iot.device.TransportClient
      description: <p>the transport client to use by the device client.</p>
  exceptions:
  - type: 3c87bd19
    description: >-
      <p>if<code>connString 

          </code> or if<code>connString 

          </code> is missing one of the following attributes:<code>HostName 

          </code> ,<code>DeviceId 

          </code> , or <code>SharedAccessKey 

          </code> or if the IoT hub hostname does not conform to RFC 3986 or if the provided<code>connString 

          </code> is for an x509 authenticated device </p>
  - type: "44102508"
    description: <p>if the hostname in the connection string is not a valid URI </p>
  - type: b1c38b44
    description: <p>if the connection string belongs to a module rather than a device </p>
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.getDeviceTwin()
  id: getDeviceTwin()
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: getDeviceTwin()
  nameWithType: DeviceClient.getDeviceTwin()
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.getDeviceTwin()
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.getDeviceTwin*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 566
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Retrieves the twin's latest desired properties </p>"
  syntax:
    content: public void getDeviceTwin()
  exceptions:
  - type: cbf33bbe
    description: <p>if the iothub cannot be reached </p>
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.getFileUploadSasUri(FileUploadSasUriRequest)
  id: getFileUploadSasUri(FileUploadSasUriRequest)
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: getFileUploadSasUri(FileUploadSasUriRequest request)
  nameWithType: DeviceClient.getFileUploadSasUri(FileUploadSasUriRequest request)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.getFileUploadSasUri(FileUploadSasUriRequest request)
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.getFileUploadSasUri*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 525
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Get a file upload SAS URI which the Azure Storage SDK can use to upload a file to blob for this device. See <a href=\"https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-file-upload#initialize-a-file-upload\">this documentation</a> for more details. </p>"
  syntax: &o5
    content: public FileUploadSasUriResponse getFileUploadSasUri(FileUploadSasUriRequest request)
    parameters:
    - id: request
      type: com.microsoft.azure.sdk.iot.deps.serializer.FileUploadSasUriRequest
      description: <p>The request details for getting the SAS URI, including the destination blob name. </p>
    return:
      type: com.microsoft.azure.sdk.iot.deps.serializer.FileUploadSasUriResponse
      description: <p>The file upload details to be used with the Azure Storage SDK in order to upload a file from this device. </p>
  exceptions:
  - type: cbf33bbe
    description: <p>If this HTTPS request fails to send. </p>
  - type: "44102508"
    description: <p>If the returned sas uri cannot be constructed correctly </p>
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.HOSTNAME_ATTRIBUTE
  id: HOSTNAME_ATTRIBUTE
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: HOSTNAME_ATTRIBUTE
  nameWithType: DeviceClient.HOSTNAME_ATTRIBUTE
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.HOSTNAME_ATTRIBUTE
  type: Field
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 52
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>\r\n  <xrefsect id=\"deprecated_1_deprecated000054\">\r\n    <xreftitle>Deprecated</xreftitle>\r\n    <xrefdescription>\r\n      <p>as of release 1.2.27 this value is deprecated and will not be replaced. The hostname attribute name in a connection string. </p>\r\n    </xrefdescription>\r\n  </xrefsect>\r\n</p>"
  syntax:
    content: public static final String HOSTNAME_ATTRIBUTE= "HostName="
    return:
      type: 3d93591e
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.open()
  id: open()
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: open()
  nameWithType: DeviceClient.open()
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.open()
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.open*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 376
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Starts asynchronously sending and receiving messages from an IoT Hub. If the client is already open, the function shall do nothing.</p>\r\n<p></p>"
  syntax:
    content: public void open()
  exceptions:
  - type: cbf33bbe
    description: <p>if a connection to an IoT Hub cannot be established. </p>
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.RECEIVE_PERIOD_MILLIS
  id: RECEIVE_PERIOD_MILLIS
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: RECEIVE_PERIOD_MILLIS
  nameWithType: DeviceClient.RECEIVE_PERIOD_MILLIS
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.RECEIVE_PERIOD_MILLIS
  type: Field
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 104
  package: com.microsoft.azure.sdk.iot.device
  syntax:
    content: protected long RECEIVE_PERIOD_MILLIS
    return:
      type: 0364520f
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.RECEIVE_PERIOD_MILLIS_AMQPS
  id: RECEIVE_PERIOD_MILLIS_AMQPS
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: RECEIVE_PERIOD_MILLIS_AMQPS
  nameWithType: DeviceClient.RECEIVE_PERIOD_MILLIS_AMQPS
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.RECEIVE_PERIOD_MILLIS_AMQPS
  type: Field
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 98
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>\r\n  <xrefsect id=\"deprecated_1_deprecated000060\">\r\n    <xreftitle>Deprecated</xreftitle>\r\n    <xrefdescription>\r\n      <p>as of release 1.2.27 these value is deprecated and replaced by <xref uid=\"com.microsoft.azure.sdk.iot.device.DeviceClient.setOption(String,Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"setOption(String, Object)\"></xref><b>SetMinimumPollingInterval</b> to change it.</p>\r\n    </xrefdescription>\r\n  </xrefsect>\r\n</p>\r\n<p>The number of milliseconds the transport will wait between polling for messages. </p>"
  syntax:
    content: public static long RECEIVE_PERIOD_MILLIS_AMQPS= 10L
    return:
      type: 0364520f
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.RECEIVE_PERIOD_MILLIS_HTTPS
  id: RECEIVE_PERIOD_MILLIS_HTTPS
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: RECEIVE_PERIOD_MILLIS_HTTPS
  nameWithType: DeviceClient.RECEIVE_PERIOD_MILLIS_HTTPS
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.RECEIVE_PERIOD_MILLIS_HTTPS
  type: Field
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 102
  package: com.microsoft.azure.sdk.iot.device
  syntax:
    content: public static long RECEIVE_PERIOD_MILLIS_HTTPS= 25*60*1000
    return:
      type: 0364520f
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.RECEIVE_PERIOD_MILLIS_MQTT
  id: RECEIVE_PERIOD_MILLIS_MQTT
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: RECEIVE_PERIOD_MILLIS_MQTT
  nameWithType: DeviceClient.RECEIVE_PERIOD_MILLIS_MQTT
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.RECEIVE_PERIOD_MILLIS_MQTT
  type: Field
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 100
  package: com.microsoft.azure.sdk.iot.device
  syntax:
    content: public static long RECEIVE_PERIOD_MILLIS_MQTT= 10L
    return:
      type: 0364520f
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.registerConnectionStateCallback(IotHubConnectionStateCallback,Object)
  id: registerConnectionStateCallback(IotHubConnectionStateCallback,Object)
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: registerConnectionStateCallback(IotHubConnectionStateCallback callback, Object callbackContext)
  nameWithType: DeviceClient.registerConnectionStateCallback(IotHubConnectionStateCallback callback, Object callbackContext)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.registerConnectionStateCallback(IotHubConnectionStateCallback callback, Object callbackContext)
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.registerConnectionStateCallback*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 642
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Registers a callback to be executed whenever the connection to the device is lost or established. <xrefsect id=\"deprecated_1_deprecated000066\"><xreftitle>Deprecated</xreftitle><xrefdescription><p>as of release 1.10.0 by <xref uid=\"com.microsoft.azure.sdk.iot.device.InternalClient.registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback,Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)\"></xref></p></xrefdescription></xrefsect></p>"
  syntax:
    content: public void registerConnectionStateCallback(IotHubConnectionStateCallback callback, Object callbackContext)
    parameters:
    - id: callback
      type: com.microsoft.azure.sdk.iot.device.IotHubConnectionStateCallback
      description: <p>the callback to be called. </p>
    - id: callbackContext
      type: "79317049"
      description: >-
        <p>a context to be passed to the callback. Can be <code>null 

            </code> if no callback is provided. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>if the provided callback is null </p>
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.SEND_PERIOD_MILLIS
  id: SEND_PERIOD_MILLIS
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: SEND_PERIOD_MILLIS
  nameWithType: DeviceClient.SEND_PERIOD_MILLIS
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.SEND_PERIOD_MILLIS
  type: Field
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 88
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>\r\n  <xrefsect id=\"deprecated_1_deprecated000059\">\r\n    <xreftitle>Deprecated</xreftitle>\r\n    <xrefdescription>\r\n      <p>as of release 1.2.27 this value is deprecated and replaced by <xref uid=\"com.microsoft.azure.sdk.iot.device.DeviceClient.setOption(String,Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"setOption(String, Object)\"></xref><b>SetSendInterval</b> to change it.</p>\r\n    </xrefdescription>\r\n  </xrefsect>\r\n</p>\r\n<p>The number of milliseconds the transport will wait between sending out messages. </p>"
  syntax:
    content: public static long SEND_PERIOD_MILLIS= 10L
    return:
      type: 0364520f
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.setMessageCallback(MessageCallback,Object)
  id: setMessageCallback(MessageCallback,Object)
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: setMessageCallback(MessageCallback callback, Object context)
  nameWithType: DeviceClient.setMessageCallback(MessageCallback callback, Object context)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.setMessageCallback(MessageCallback callback, Object context)
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.setMessageCallback*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 321
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Sets the message callback.</p>\r\n<p></p>"
  syntax:
    content: public DeviceClient setMessageCallback(MessageCallback callback, Object context)
    parameters:
    - id: callback
      type: com.microsoft.azure.sdk.iot.device.MessageCallback
      description: >-
        <p>the message callback. Can be<code>null 

            </code> . </p>
    - id: context
      type: "79317049"
      description: >-
        <p>the context to be passed to the callback. Can be<code>null 

            </code> .</p>
    return:
      type: com.microsoft.azure.sdk.iot.device.DeviceClient
      description: <p>itself, for fluent setting.</p>
  exceptions:
  - type: 3c87bd19
    description: >-
      <p>if the callback is<code>null 

          </code> but a context is passed in. </p>
  - type: 12fe80de
    description: <p>if the callback is set after the client is closed. </p>
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.setOption(String,Object)
  id: setOption(String,Object)
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: setOption(String optionName, Object value)
  nameWithType: DeviceClient.setOption(String optionName, Object value)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.setOption(String optionName, Object value)
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.setOption*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 726
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Sets a runtime option identified by parameter<code>optionName \r\n    </code> to<code>value \r\n    </code> .</p>\r\n<p>The options that can be set via this API are:<ul><li><p><b>SetMinimumPollingInterval</b> - this option is applicable only when the transport configured with this client is HTTP. This option specifies the interval in milliseconds between calls to the service checking for availability of new messages. The value is expected to be of type<code>long \r\n    </code> .</p></li><li><p><b>SetSendInterval</b> - this option is applicable to all protocols. This value sets the period (in milliseconds) that this SDK spawns threads to send queued messages. Even if no message is queued, this thread will be spawned.</p></li><li><p><b>SetReceiveInterval</b> - this option is applicable to all protocols in case of HTTPS protocol, this option acts the same as<code>SetMinimumPollingInterval \r\n    </code> in case of MQTT and AMQP protocols, this option specifies the interval in millisecods between spawning a thread that dequeues a message from the SDK's queue of received messages.</p></li><li><p><b>SetCertificatePath</b> - this option is applicable only when the transport configured with this client is AMQP. This option specifies the path to the certificate used to verify peer. The value is expected to be of type<code>String \r\n    </code> .</p></li><li><p><b>SetSASTokenExpiryTime</b> - this option is applicable for HTTP/ AMQP/MQTT. This option specifies the interval in seconds after which SASToken expires. If the transport is already open then setting this option will restart the transport with the updated expiry time, and will use that expiry time length for all subsequently generated sas tokens. The value is expected to be of type<code>long \r\n    </code> .</p></li><li><p><b>SetHttpsReadTimeout</b> - this option is applicable for HTTPS. This option specifies the read timeout in milliseconds per https request made by this client. By default, this value is 4 minutes. The value is expected to be of type<code>int \r\n    </code> .</p></li><li><p><b>SetHttpsConnectTimeout</b> - this option is applicable for HTTPS. This option specifies the connect timeout in milliseconds per https request made by this client. By default, this value is 0 (no connect timeout). The value is expected to be of type<code>int \r\n    </code> .</p></li><li><p><b>SetAmqpOpenAuthenticationSessionTimeout</b> - this option is applicable for AMQP with SAS token authentication. This option specifies the timeout in seconds to wait to open the authentication session. By default, this value is 20 seconds. The value is expected to be of type<code>int \r\n    </code> .</p></li><li><p><b>SetAmqpOpenDeviceSessionsTimeout</b> - this option is applicable for AMQP. This option specifies the timeout in seconds to open the device sessions. By default, this value is 60 seconds. The value is expected to be of type<code>int \r\n    </code> .</p></li></ul></p>\r\n<p></p>"
  syntax: &o1
    content: public void setOption(String optionName, Object value)
    parameters:
    - id: optionName
      type: "26831127"
      description: <p>the option name to modify </p>
    - id: value
      type: "79317049"
      description: <p>an object of the appropriate type for the option's value </p>
  exceptions:
  - type: 3c87bd19
    description: <p>if the provided optionName is null </p>
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.SHARED_ACCESS_KEY_ATTRIBUTE
  id: SHARED_ACCESS_KEY_ATTRIBUTE
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: SHARED_ACCESS_KEY_ATTRIBUTE
  nameWithType: DeviceClient.SHARED_ACCESS_KEY_ATTRIBUTE
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.SHARED_ACCESS_KEY_ATTRIBUTE
  type: Field
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 64
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>\r\n  <xrefsect id=\"deprecated_1_deprecated000056\">\r\n    <xreftitle>Deprecated</xreftitle>\r\n    <xrefdescription>\r\n      <p>as of release 1.2.27 this value is deprecated and will not be replaced. The shared access key attribute name in a connection string. </p>\r\n    </xrefdescription>\r\n  </xrefsect>\r\n</p>"
  syntax:
    content: public static final String SHARED_ACCESS_KEY_ATTRIBUTE= "SharedAccessKey="
    return:
      type: 3d93591e
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.SHARED_ACCESS_TOKEN_ATTRIBUTE
  id: SHARED_ACCESS_TOKEN_ATTRIBUTE
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: SHARED_ACCESS_TOKEN_ATTRIBUTE
  nameWithType: DeviceClient.SHARED_ACCESS_TOKEN_ATTRIBUTE
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.SHARED_ACCESS_TOKEN_ATTRIBUTE
  type: Field
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 70
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>\r\n  <xrefsect id=\"deprecated_1_deprecated000057\">\r\n    <xreftitle>Deprecated</xreftitle>\r\n    <xrefdescription>\r\n      <p>as of release 1.2.27 this value is deprecated and will not be replaced. The shared access signature attribute name in a connection string. </p>\r\n    </xrefdescription>\r\n  </xrefsect>\r\n</p>"
  syntax:
    content: public static final String SHARED_ACCESS_TOKEN_ATTRIBUTE= "SharedAccessSignature="
    return:
      type: 3d93591e
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.startDeviceTwin(IotHubEventCallback,Object,PropertyCallBack,Object)
  id: startDeviceTwin(IotHubEventCallback,Object,PropertyCallBack,Object)
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: startDeviceTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, PropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
  nameWithType: DeviceClient.startDeviceTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, PropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.startDeviceTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, PropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.startDeviceTwin*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 595
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Starts the device twin. This device client will receive a callback with the current state of the full twin, including reported properties and desired properties. After that callback is received, this device client will receive a callback each time a desired property is updated. That callback will either contain the full desired properties set, or only the updated desired property depending on how the desired property was changed. IoT Hub supports a PUT and a PATCH on the twin. The PUT will cause this device client to receive the full desired properties set, and the PATCH will cause this device client to only receive the updated desired properties. Similarly, the version of each desired property will be incremented from a PUT call, and only the actually updated desired property will have its version incremented from a PATCH call. The java service client library uses the PATCH call when updated desired properties, but it builds the patch such that all properties are included in the patch. As a result, the device side will receive full twin updates, not partial updates.</p>\r\n<p>See <a href=\"https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/replacedevicetwin\">PUT</a> and <a href=\"https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/updatedevicetwin\">PATCH</a></p>\r\n<p></p>"
  syntax:
    content: public void startDeviceTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, PropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
    parameters:
    - id: deviceTwinStatusCallback
      type: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
      description: >-
        <p>the IotHubEventCallback callback for providing the status of Device Twin operations. Cannot be<code>null 

            </code> . </p>
    - id: deviceTwinStatusCallbackContext
      type: "79317049"
      description: >-
        <p>the context to be passed to the status callback. Can be<code>null 

            </code> . </p>
    - id: genericPropertyCallBack
      type: com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack
      description: >-
        <p>the PropertyCallBack callback for providing any changes in desired properties. Cannot be<code>null 

            </code> . </p>
    - id: genericPropertyCallBackContext
      type: "79317049"
      description: >-
        <p>the context to be passed to the property callback. Can be<code>null 

            </code> . *</p>
  exceptions:
  - type: 3c87bd19
    description: >-
      <p>if the callback is<code>null 

          </code></p>
  - type: b1c38b44
    description: <p>if called more than once on the same device </p>
  - type: cbf33bbe
    description: <p>if called when client is not opened </p>
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.startDeviceTwin(IotHubEventCallback,Object,TwinPropertyCallBack,Object)
  id: startDeviceTwin(IotHubEventCallback,Object,TwinPropertyCallBack,Object)
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: startDeviceTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, TwinPropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
  nameWithType: DeviceClient.startDeviceTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, TwinPropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.startDeviceTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, TwinPropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.startDeviceTwin*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 626
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Starts the device twin. This device client will receive a callback with the current state of the full twin, including reported properties and desired properties. After that callback is received, this device client will receive a callback each time a desired property is updated. That callback will either contain the full desired properties set, or only the updated desired property depending on how the desired property was changed. IoT Hub supports a PUT and a PATCH on the twin. The PUT will cause this device client to receive the full desired properties set, and the PATCH will cause this device client to only receive the updated desired properties. Similarly, the version of each desired property will be incremented from a PUT call, and only the actually updated desired property will have its version incremented from a PATCH call. The java service client library uses the PATCH call when updated desired properties, but it builds the patch such that all properties are included in the patch. As a result, the device side will receive full twin updates, not partial updates.</p>\r\n<p>See <a href=\"https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/replacedevicetwin\">PUT</a> and <a href=\"https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/updatedevicetwin\">PATCH</a></p>\r\n<p></p>"
  syntax:
    content: public void startDeviceTwin(IotHubEventCallback deviceTwinStatusCallback, Object deviceTwinStatusCallbackContext, TwinPropertyCallBack genericPropertyCallBack, Object genericPropertyCallBackContext)
    parameters:
    - id: deviceTwinStatusCallback
      type: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
      description: >-
        <p>the IotHubEventCallback callback for providing the status of Device Twin operations. Cannot be<code>null 

            </code> . </p>
    - id: deviceTwinStatusCallbackContext
      type: "79317049"
      description: >-
        <p>the context to be passed to the status callback. Can be<code>null 

            </code> . </p>
    - id: genericPropertyCallBack
      type: com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack
      description: >-
        <p>the TwinPropertyCallBack callback for providing any changes in desired properties. Cannot be<code>null 

            </code> . </p>
    - id: genericPropertyCallBackContext
      type: "79317049"
      description: >-
        <p>the context to be passed to the property callback. Can be<code>null 

            </code> . *</p>
  exceptions:
  - type: 3c87bd19
    description: >-
      <p>if the callback is<code>null 

          </code></p>
  - type: b1c38b44
    description: <p>if called more than once on the same device </p>
  - type: cbf33bbe
    description: <p>if called when client is not opened </p>
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.subscribeToDeviceMethod(DeviceMethodCallback,Object,IotHubEventCallback,Object)
  id: subscribeToDeviceMethod(DeviceMethodCallback,Object,IotHubEventCallback,Object)
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: subscribeToDeviceMethod(DeviceMethodCallback deviceMethodCallback, Object deviceMethodCallbackContext, IotHubEventCallback deviceMethodStatusCallback, Object deviceMethodStatusCallbackContext)
  nameWithType: DeviceClient.subscribeToDeviceMethod(DeviceMethodCallback deviceMethodCallback, Object deviceMethodCallbackContext, IotHubEventCallback deviceMethodStatusCallback, Object deviceMethodStatusCallbackContext)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.subscribeToDeviceMethod(DeviceMethodCallback deviceMethodCallback, Object deviceMethodCallbackContext, IotHubEventCallback deviceMethodStatusCallback, Object deviceMethodStatusCallbackContext)
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.subscribeToDeviceMethod*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 663
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Subscribes to device methods</p>\r\n<p></p>"
  syntax:
    content: public void subscribeToDeviceMethod(DeviceMethodCallback deviceMethodCallback, Object deviceMethodCallbackContext, IotHubEventCallback deviceMethodStatusCallback, Object deviceMethodStatusCallbackContext)
    parameters:
    - id: deviceMethodCallback
      type: com.microsoft.azure.sdk.iot.device.DeviceTwin.DeviceMethodCallback
      description: >-
        <p>Callback on which device methods shall be invoked. Cannot be<code>null 

            </code> . </p>
    - id: deviceMethodCallbackContext
      type: "79317049"
      description: >-
        <p>Context for device method callback. Can be<code>null 

            </code> . </p>
    - id: deviceMethodStatusCallback
      type: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
      description: >-
        <p>Callback for providing IotHub status for device methods. Cannot be<code>null 

            </code> . </p>
    - id: deviceMethodStatusCallbackContext
      type: "79317049"
      description: >-
        <p>Context for device method status callback. Can be<code>null 

            </code> .</p>
  exceptions:
  - type: cbf33bbe
    description: <p>if called when client is not opened. </p>
  - type: 3c87bd19
    description: <p>if either callback are null. </p>
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.uploadToBlobAsync(String,InputStream,long,IotHubEventCallback,Object)
  id: uploadToBlobAsync(String,InputStream,long,IotHubEventCallback,Object)
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  langs:
  - java
  name: uploadToBlobAsync(String destinationBlobName, InputStream inputStream, long streamLength, IotHubEventCallback callback, Object callbackContext)
  nameWithType: DeviceClient.uploadToBlobAsync(String destinationBlobName, InputStream inputStream, long streamLength, IotHubEventCallback callback, Object callbackContext)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.uploadToBlobAsync(String destinationBlobName, InputStream inputStream, long streamLength, IotHubEventCallback callback, Object callbackContext)
  overload: com.microsoft.azure.sdk.iot.device.DeviceClient.uploadToBlobAsync*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java
    startLine: 492
  package: com.microsoft.azure.sdk.iot.device
  summary: "<p>Asynchronously upload a stream to the IoT Hub.</p>\r\n<p>NOTE: IotHub does not currently support CA signed devices using file upload. Please use SAS based authentication or self signed certificates.</p>\r\n<p>\r\n  <xrefsect id=\"deprecated_1_deprecated000064\">\r\n    <xreftitle>Deprecated</xreftitle>\r\n    <xrefdescription>\r\n      <p>Use <xref uid=\"com.microsoft.azure.sdk.iot.device.DeviceClient.getFileUploadSasUri(FileUploadSasUriRequest)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getFileUploadSasUri(FileUploadSasUriRequest)\"></xref> to get the SAS URI, use the azure storage SDK to upload a file to that SAS URI, and then use <xref uid=\"com.microsoft.azure.sdk.iot.device.DeviceClient.completeFileUpload(FileUploadCompletionNotification)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"completeFileUpload(FileUploadCompletionNotification)\"></xref> to notify Iot Hub that your file upload has completed, successfully or otherwise. This method does all three of these tasks for you, but has limited configuration options. </p>\r\n    </xrefdescription>\r\n  </xrefsect>\r\n</p>"
  syntax:
    content: public void uploadToBlobAsync(String destinationBlobName, InputStream inputStream, long streamLength, IotHubEventCallback callback, Object callbackContext)
    parameters:
    - id: destinationBlobName
      type: "26831127"
      description: <p>is a string with the name of the file in the storage. </p>
    - id: inputStream
      type: 76fcb9b7
      description: <p>is a InputStream with the stream to upload in the blob. </p>
    - id: streamLength
      type: 0364520f
      description: <p>is a long with the number of bytes in the stream to upload. </p>
    - id: callback
      type: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
      description: <p>the callback to be invoked when a file is uploaded. </p>
    - id: callbackContext
      type: "79317049"
      description: >-
        <p>a context to be passed to the callback. Can be<code>null 

            </code> .</p>
  exceptions:
  - type: 3c87bd19
    description: >-
      <p>if the provided blob name, or the file path is<code>null 

          </code> , empty or not valid, or if the callback is<code>null 

          </code> . </p>
  - type: cbf33bbe
    description: <p>if the client cannot create a instance of the FileUpload or the transport. </p>
references:
- uid: 3d93591e
  spec.java:
  - name: final String
    fullName: final String
- uid: d07b5f81
  spec.java:
  - name: final Charset
    fullName: final Charset
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: 3c87bd19
  spec.java:
  - name: IllegalArgumentException
    fullName: IllegalArgumentException
- uid: "44102508"
  spec.java:
  - name: URISyntaxException
    fullName: URISyntaxException
- uid: b1c38b44
  spec.java:
  - name: UnsupportedOperationException
    fullName: UnsupportedOperationException
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient*
  name: DeviceClient
  nameWithType: DeviceClient.DeviceClient
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient
  package: com.microsoft.azure.sdk.iot.device
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: 13e89c07
  spec.java:
  - name: SSLContext
    fullName: SSLContext
- uid: 12fe80de
  spec.java:
  - name: IllegalStateException
    fullName: IllegalStateException
- uid: "79317049"
  spec.java:
  - name: Object
    fullName: Object
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.setMessageCallback*
  name: setMessageCallback
  nameWithType: DeviceClient.setMessageCallback
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.setMessageCallback
  package: com.microsoft.azure.sdk.iot.device
- uid: cbf33bbe
  spec.java:
  - name: IOException
    fullName: IOException
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.open*
  name: open
  nameWithType: DeviceClient.open
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.open
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.close*
  name: close
  nameWithType: DeviceClient.close
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.close
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.closeNow*
  name: closeNow
  nameWithType: DeviceClient.closeNow
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.closeNow
  package: com.microsoft.azure.sdk.iot.device
- uid: 76fcb9b7
  spec.java:
  - name: InputStream
    fullName: InputStream
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.uploadToBlobAsync*
  name: uploadToBlobAsync
  nameWithType: DeviceClient.uploadToBlobAsync
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.uploadToBlobAsync
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.getFileUploadSasUri*
  name: getFileUploadSasUri
  nameWithType: DeviceClient.getFileUploadSasUri
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.getFileUploadSasUri
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.completeFileUploadAsync*
  name: completeFileUploadAsync
  nameWithType: DeviceClient.completeFileUploadAsync
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.completeFileUploadAsync
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.completeFileUpload*
  name: completeFileUpload
  nameWithType: DeviceClient.completeFileUpload
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.completeFileUpload
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.getDeviceTwin*
  name: getDeviceTwin
  nameWithType: DeviceClient.getDeviceTwin
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.getDeviceTwin
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.startDeviceTwin*
  name: startDeviceTwin
  nameWithType: DeviceClient.startDeviceTwin
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.startDeviceTwin
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.registerConnectionStateCallback*
  name: registerConnectionStateCallback
  nameWithType: DeviceClient.registerConnectionStateCallback
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.registerConnectionStateCallback
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.subscribeToDeviceMethod*
  name: subscribeToDeviceMethod
  nameWithType: DeviceClient.subscribeToDeviceMethod
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.subscribeToDeviceMethod
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.setOption*
  name: setOption
  nameWithType: DeviceClient.setOption
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.setOption
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.createFromSecurityProvider*
  name: createFromSecurityProvider
  nameWithType: DeviceClient.createFromSecurityProvider
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.createFromSecurityProvider
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.getConfig()
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: getConfig()
  nameWithType: InternalClient.getConfig()
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.getConfig()
  type: Method
  summary: "<p>Getter for the device client config.</p>\r\n<p></p>"
  syntax:
    content: public DeviceClientConfig getConfig()
    return:
      type: com.microsoft.azure.sdk.iot.device.DeviceClientConfig
      description: <p>the value of the config. </p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.getProductInfo()
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: getProductInfo()
  nameWithType: InternalClient.getProductInfo()
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.getProductInfo()
  type: Method
  syntax:
    content: public ProductInfo getProductInfo()
    return:
      type: com.microsoft.azure.sdk.iot.device.ProductInfo
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback,Object)
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)
  nameWithType: InternalClient.registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)
  type: Method
  summary: "<p>Registers a callback to be executed when the connection status of the device changes. The callback will be fired with a status and a reason why the device's status changed. When the callback is fired, the provided context will be provided alongside the status and reason.</p>\r\n<p>Note that the thread used to deliver this callback should not be used to call open()/closeNow() on the client that this callback belongs to. All open()/closeNow() operations should be done on a separate thread</p>\r\n<p></p>"
  syntax:
    content: public void registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)
    parameters:
    - id: callback
      type: com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeCallback
      description: <p>The callback to be fired when the connection status of the device changes. Can be null to unset this listener as long as the provided callbackContext is also null. </p>
    - id: callbackContext
      type: "79317049"
      description: >-
        <p>a context to be passed to the callback. Can be<code>null 

            </code> . </p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.sendEventAsync(Message,IotHubEventCallback,Object)
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)
  nameWithType: InternalClient.sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)
  type: Method
  summary: "<p>Asynchronously sends an event message to the IoT Hub.</p>\r\n<p></p>"
  syntax:
    content: public void sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)
    parameters:
    - id: message
      type: com.microsoft.azure.sdk.iot.device.Message
      description: <p>the message to be sent. </p>
    - id: callback
      type: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
      description: >-
        <p>the callback to be invoked when a response is received. Can be<code>null 

            </code> . </p>
    - id: callbackContext
      type: "79317049"
      description: >-
        <p>a context to be passed to the callback. Can be <code>null 

            </code> if no callback is provided.</p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.sendEventBatchAsync(List<Message>,IotHubEventCallback,Object)
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: sendEventBatchAsync(List<Message> messages, IotHubEventCallback callback, Object callbackContext)
  nameWithType: InternalClient.sendEventBatchAsync(List<Message> messages, IotHubEventCallback callback, Object callbackContext)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.sendEventBatchAsync(List<Message> messages, IotHubEventCallback callback, Object callbackContext)
  type: Method
  summary: "<p>Asynchronously sends a batch of messages to the IoT Hub HTTPS messages will be sent in a single batch and MQTT and AMQP messages will be sent individually. In case of HTTPS, This API call is an all-or-nothing single HTTPS message and the callback will be triggered only once. Maximum payload size for HTTPS is 255KB</p>\r\n<p></p>"
  syntax:
    content: public void sendEventBatchAsync(List<Message> messages, IotHubEventCallback callback, Object callbackContext)
    parameters:
    - id: messages
      type: 5618da2dcom.microsoft.azure.sdk.iot.device.Messagea08ddfce
      description: <p>the list of message to be sent. </p>
    - id: callback
      type: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
      description: >-
        <p>the callback to be invoked when a response is received. Can be<code>null 

            </code> . </p>
    - id: callbackContext
      type: "79317049"
      description: >-
        <p>a context to be passed to the callback. Can be <code>null 

            </code> if no callback is provided.</p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(Set<Property>)
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: sendReportedProperties(Set<Property> reportedProperties)
  nameWithType: InternalClient.sendReportedProperties(Set<Property> reportedProperties)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(Set<Property> reportedProperties)
  type: Method
  summary: "<p>Sends reported properties</p>\r\n<p></p>"
  syntax:
    content: public void sendReportedProperties(Set<Property> reportedProperties)
    parameters:
    - id: reportedProperties
      type: b398a0f1com.microsoft.azure.sdk.iot.device.DeviceTwin.Propertya08ddfce
      description: >-
        <p>the Set for desired properties and their corresponding callback and context. Cannot be<code>null 

            </code> .</p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(Set<Property>,int)
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: sendReportedProperties(Set<Property> reportedProperties, int version)
  nameWithType: InternalClient.sendReportedProperties(Set<Property> reportedProperties, int version)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(Set<Property> reportedProperties, int version)
  type: Method
  summary: "<p>Sends reported properties</p>\r\n<p></p>"
  syntax:
    content: public void sendReportedProperties(Set<Property> reportedProperties, int version)
    parameters:
    - id: reportedProperties
      type: b398a0f1com.microsoft.azure.sdk.iot.device.DeviceTwin.Propertya08ddfce
      description: >-
        <p>the Set for desired properties and their corresponding callback and context. Cannot be<code>null 

            </code> . </p>
    - id: version
      type: f75371fa
      description: <p>the Reported property version. Cannot be negative.</p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.setOperationTimeout(long)
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: setOperationTimeout(long timeout)
  nameWithType: InternalClient.setOperationTimeout(long timeout)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.setOperationTimeout(long timeout)
  type: Method
  summary: "<p>Set the length of time, in milliseconds, that any given operation will expire in. These operations include reconnecting upon a connection drop and sending a message. </p>"
  syntax:
    content: public void setOperationTimeout(long timeout)
    parameters:
    - id: timeout
      type: 0364520f
      description: <p>the length in time, in milliseconds, until a given operation shall expire </p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.setProxySettings(ProxySettings)
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: setProxySettings(ProxySettings proxySettings)
  nameWithType: InternalClient.setProxySettings(ProxySettings proxySettings)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.setProxySettings(ProxySettings proxySettings)
  type: Method
  summary: "<p>Set the proxy settings for this client to connect through. If null then any previous settings will be erased </p>"
  syntax:
    content: public void setProxySettings(ProxySettings proxySettings)
    parameters:
    - id: proxySettings
      type: com.microsoft.azure.sdk.iot.device.ProxySettings
      description: <p>the settings to be used when connecting to iothub through a proxy. If null, any previously saved settings will be erased, and no proxy will be used </p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.setRetryPolicy(RetryPolicy)
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: setRetryPolicy(RetryPolicy retryPolicy)
  nameWithType: InternalClient.setRetryPolicy(RetryPolicy retryPolicy)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.setRetryPolicy(RetryPolicy retryPolicy)
  type: Method
  summary: "<p>Sets the given retry policy on the underlying transport <a href=\"https://github.com/Azure/azure-iot-sdk-java/blob/master/device/iot-device-client/devdoc/requirement_docs/com/microsoft/azure/iothub/retryPolicy.md\">See more details about the default retry policy and about using custom retry policies here</a></p>"
  syntax:
    content: public void setRetryPolicy(RetryPolicy retryPolicy)
    parameters:
    - id: retryPolicy
      type: com.microsoft.azure.sdk.iot.device.transport.RetryPolicy
      description: <p>the new interval in milliseconds </p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(Map<Property, Pair<PropertyCallBack<String, Object>, Object>>)
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: subscribeToDesiredProperties(Map<Property, Pair<PropertyCallBack<String, Object>, Object>> onDesiredPropertyChange)
  nameWithType: InternalClient.subscribeToDesiredProperties(Map<Property, Pair<PropertyCallBack<String, Object>, Object>> onDesiredPropertyChange)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(Map<Property, Pair<PropertyCallBack<String, Object>, Object>> onDesiredPropertyChange)
  type: Method
  summary: "<p>Subscribes to desired properties.</p>\r\n<p>This client will receive a callback each time a desired property is updated. That callback will either contain the full desired properties set, or only the updated desired property depending on how the desired property was changed. IoT Hub supports a PUT and a PATCH on the twin. The PUT will cause this device client to receive the full desired properties set, and the PATCH will cause this device client to only receive the updated desired properties. Similarly, the version of each desired property will be incremented from a PUT call, and only the actually updated desired property will have its version incremented from a PATCH call. The java service client library uses the PATCH call when updated desired properties, but it builds the patch such that all properties are included in the patch. As a result, the device side will receive full twin updates, not partial updates.</p>\r\n<p>See <a href=\"https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/replacedevicetwin\">PUT</a> and <a href=\"https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/updatedevicetwin\">PATCH</a></p>\r\n<p></p>"
  syntax:
    content: public void subscribeToDesiredProperties(Map<Property, Pair<PropertyCallBack<String, Object>, Object>> onDesiredPropertyChange)
    parameters:
    - id: onDesiredPropertyChange
      type: 6110eba5com.microsoft.azure.sdk.iot.device.DeviceTwin.Propertyb33c76fccom.microsoft.azure.sdk.iot.device.DeviceTwin.Pair78504a52com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack0a3cd938
      description: >-
        <p>the Map for desired properties and their corresponding callback and context. Can be<code>null 

            </code> .</p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToTwinDesiredProperties(Map<Property, Pair<TwinPropertyCallBack, Object>>)
  parent: com.microsoft.azure.sdk.iot.device.InternalClient
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: subscribeToTwinDesiredProperties(Map<Property, Pair<TwinPropertyCallBack, Object>> onDesiredPropertyChange)
  nameWithType: InternalClient.subscribeToTwinDesiredProperties(Map<Property, Pair<TwinPropertyCallBack, Object>> onDesiredPropertyChange)
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToTwinDesiredProperties(Map<Property, Pair<TwinPropertyCallBack, Object>> onDesiredPropertyChange)
  type: Method
  summary: "<p>Subscribes to desired properties</p>\r\n<p></p>"
  syntax:
    content: public void subscribeToTwinDesiredProperties(Map<Property, Pair<TwinPropertyCallBack, Object>> onDesiredPropertyChange)
    parameters:
    - id: onDesiredPropertyChange
      type: 6110eba5com.microsoft.azure.sdk.iot.device.DeviceTwin.Propertyb33c76fccom.microsoft.azure.sdk.iot.device.DeviceTwin.Pair78504a52com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack7ac78387
      description: >-
        <p>the Map for desired properties and their corresponding callback and context. Can be<code>null 

            </code> .</p>
- uid: com.microsoft.azure.sdk.iot.device.InternalClient
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device.InternalClient.yml
  name: InternalClient
  nameWithType: InternalClient
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient
  type: Class
  syntax:
    content: public class InternalClient
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.setOption(String,Object)
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  name: setOption(String optionName, Object value)
  nameWithType: DeviceClient.setOption(String optionName, Object value)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.setOption(String optionName, Object value)
  type: Method
  summary: "<p>Sets a runtime option identified by parameter<code>optionName \r\n    </code> to<code>value \r\n    </code> .</p>\r\n<p>The options that can be set via this API are:<ul><li><p><b>SetMinimumPollingInterval</b> - this option is applicable only when the transport configured with this client is HTTP. This option specifies the interval in milliseconds between calls to the service checking for availability of new messages. The value is expected to be of type<code>long \r\n    </code> .</p></li><li><p><b>SetSendInterval</b> - this option is applicable to all protocols. This value sets the period (in milliseconds) that this SDK spawns threads to send queued messages. Even if no message is queued, this thread will be spawned.</p></li><li><p><b>SetReceiveInterval</b> - this option is applicable to all protocols in case of HTTPS protocol, this option acts the same as<code>SetMinimumPollingInterval \r\n    </code> in case of MQTT and AMQP protocols, this option specifies the interval in millisecods between spawning a thread that dequeues a message from the SDK's queue of received messages.</p></li><li><p><b>SetCertificatePath</b> - this option is applicable only when the transport configured with this client is AMQP. This option specifies the path to the certificate used to verify peer. The value is expected to be of type<code>String \r\n    </code> .</p></li><li><p><b>SetSASTokenExpiryTime</b> - this option is applicable for HTTP/ AMQP/MQTT. This option specifies the interval in seconds after which SASToken expires. If the transport is already open then setting this option will restart the transport with the updated expiry time, and will use that expiry time length for all subsequently generated sas tokens. The value is expected to be of type<code>long \r\n    </code> .</p></li><li><p><b>SetHttpsReadTimeout</b> - this option is applicable for HTTPS. This option specifies the read timeout in milliseconds per https request made by this client. By default, this value is 4 minutes. The value is expected to be of type<code>int \r\n    </code> .</p></li><li><p><b>SetHttpsConnectTimeout</b> - this option is applicable for HTTPS. This option specifies the connect timeout in milliseconds per https request made by this client. By default, this value is 0 (no connect timeout). The value is expected to be of type<code>int \r\n    </code> .</p></li><li><p><b>SetAmqpOpenAuthenticationSessionTimeout</b> - this option is applicable for AMQP with SAS token authentication. This option specifies the timeout in seconds to wait to open the authentication session. By default, this value is 20 seconds. The value is expected to be of type<code>int \r\n    </code> .</p></li><li><p><b>SetAmqpOpenDeviceSessionsTimeout</b> - this option is applicable for AMQP. This option specifies the timeout in seconds to open the device sessions. By default, this value is 60 seconds. The value is expected to be of type<code>int \r\n    </code> .</p></li></ul></p>\r\n<p></p>"
  syntax: *o1
- uid: com.microsoft.azure.sdk.iot.device.transport.amqps.IoTHubConnectionType
  parent: com.microsoft.azure.sdk.iot.device.transport.amqps
  href: com.microsoft.azure.sdk.iot.device.transport.amqps.IoTHubConnectionType.yml
  name: IoTHubConnectionType
  nameWithType: IoTHubConnectionType
  fullName: com.microsoft.azure.sdk.iot.device.transport.amqps.IoTHubConnectionType
  type: Enum
  summary: "<p>Type of the connection </p>"
  syntax:
    content: public enum IoTHubConnectionType
- uid: com.microsoft.azure.sdk.iot.device.TransportClient
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device.TransportClient.yml
  name: TransportClient
  nameWithType: TransportClient
  fullName: com.microsoft.azure.sdk.iot.device.TransportClient
  type: Class
  summary: "<p>The public-facing API. Allows user to create a transport client abstracton object to use it for multiple devices to connect to an IoT Hub using the same connection (multiplexing). Handle to register devices to transport client and open / closeNow the connection. </p>\r\n<p>The multiplexed connection is supported with AMQPS / AMQPS_WS protocols. </p>"
  syntax:
    content: public class TransportClient
- uid: com.microsoft.azure.sdk.iot.device.fileupload.FileUpload
  parent: com.microsoft.azure.sdk.iot.device.fileupload
  href: com.microsoft.azure.sdk.iot.device.fileupload.FileUpload.yml
  name: FileUpload
  nameWithType: FileUpload
  fullName: com.microsoft.azure.sdk.iot.device.fileupload.FileUpload
  type: Class
  summary: "<p>Provide means to upload file in the Azure Storage using the IoTHub. </p>"
  syntax:
    content: public class FileUpload
- uid: com.microsoft.azure.sdk.iot.device.fileupload.FileUploadTask
  parent: com.microsoft.azure.sdk.iot.device.fileupload
  href: com.microsoft.azure.sdk.iot.device.fileupload.FileUploadTask.yml
  name: FileUploadTask
  nameWithType: FileUploadTask
  fullName: com.microsoft.azure.sdk.iot.device.fileupload.FileUploadTask
  type: Class
  summary: "<p>Provide means to asynchronous upload file in the Azure Storage using the IoTHub.</p>\r\n<p>The file upload process is composed by 3 steps represented in the follow diagram. +<mdash></mdash><mdash></mdash><mdash></mdash><mdash></mdash><ndash></ndash>+ +<mdash></mdash><mdash></mdash><mdash></mdash><mdash></mdash><mdash></mdash>+ +<mdash></mdash><mdash></mdash><mdash></mdash><mdash></mdash><mdash></mdash>+ +<mdash></mdash><mdash></mdash><mdash></mdash><mdash></mdash><mdash></mdash>+ | Device | | Iot Hub | | Storage | | Service | +<mdash></mdash><mdash></mdash><mdash></mdash><mdash></mdash><ndash></ndash>+ +<mdash></mdash><mdash></mdash><mdash></mdash><mdash></mdash><mdash></mdash>+ +<mdash></mdash><mdash></mdash><mdash></mdash><mdash></mdash><mdash></mdash>+ +<mdash></mdash><mdash></mdash><mdash></mdash><mdash></mdash><mdash></mdash>+ | | | | | | | | REQUEST_BLOB | | | +<mdash></mdash> request blob <mdash></mdash>&gt;| | | |&lt;<ndash></ndash> blob SAS token <ndash></ndash>+ | | | | | | UPLOAD_FILE | | | +<mdash></mdash>- upload file to the provided blob <mdash></mdash>&gt;| | +&lt;<mdash></mdash><mdash></mdash> end of upload with `status` <mdash></mdash><mdash></mdash>+ | | | | | NOTIFY_IOTHUB | | | +<mdash></mdash> notify status <ndash></ndash>&gt;| | | | +<mdash></mdash><mdash></mdash> notify new file available <mdash></mdash><mdash></mdash>-&gt;| | | | | </p>"
  syntax:
    content: public class FileUploadTask
- uid: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.yml
  name: IotHubClientProtocol
  nameWithType: IotHubClientProtocol
  fullName: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
  type: Enum
  summary: "<p>The application-layer protocol used by the client to communicate with an IoT Hub. </p>"
  syntax:
    content: public enum IotHubClientProtocol
- uid: com.microsoft.azure.sdk.iot.device.ClientOptions
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device.ClientOptions.yml
  name: ClientOptions
  nameWithType: ClientOptions
  fullName: com.microsoft.azure.sdk.iot.device.ClientOptions
  type: Class
  summary: "<p>Options that allow configuration of the device client instance during initialization. </p>"
  syntax:
    content: public class ClientOptions
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,IotHubClientProtocol,ClientOptions)
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  name: DeviceClient(String connString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  nameWithType: DeviceClient.DeviceClient(String connString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String connString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  type: Constructor
  summary: "<p>Constructor that takes a connection string as an argument.</p>\r\n<p></p>"
  syntax: *o2
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  name: DeviceClient
  nameWithType: DeviceClient
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient
  type: Class
  summary: "<p>The public-facing API. Allows a single logical or physical device to connect to an IoT Hub. The IoT Hub client supports sending events to and receiving messages from an IoT Hub. </p>\r\n<p>To support these workflows, the client library will provide the following abstractions: a message, with its payload and associated properties; and a client, which sends and receives messages. </p>\r\n<p>The client buffers messages while the network is down, and re-sends them when the network comes back online. It also batches messages to improve communication efficiency (HTTPS only). </p>\r\n<p>The client supports HTTPS 1.1 and AMQPS 1.0 transports. </p>"
  syntax: *o3
- uid: com.microsoft.azure.sdk.iot.device.MessageCallback
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device.MessageCallback.yml
  name: MessageCallback
  nameWithType: MessageCallback
  fullName: com.microsoft.azure.sdk.iot.device.MessageCallback
  type: Interface
  summary: "<p>An interface for an IoT Hub message callback. </p>\r\n<p>The developer is expected to create an implementation of this interface, and the transport will call <xref uid=\"com.microsoft.azure.sdk.iot.device.MessageCallback.execute(Message,Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessageCallback#execute(Message, Object)\"></xref> upon receiving a message from an IoT Hub. </p>"
  syntax:
    content: public interface MessageCallback
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.closeNow()
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  name: closeNow()
  nameWithType: DeviceClient.closeNow()
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.closeNow()
  type: Method
  summary: "<p>Closes the IoT Hub client by releasing any resources held by client. When closeNow is called all the messages that were in transit or pending to be sent will be informed to the user in the callbacks and any existing connection to IotHub will be closed. Must be called to terminate the background thread that is sending data to IoT Hub. After<code>closeNow() \r\n    </code> is called, the IoT Hub client is no longer usable. If the client is already closed, the function shall do nothing.</p>\r\n<p></p>"
  syntax: *o4
- uid: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device.IotHubEventCallback.yml
  name: IotHubEventCallback
  nameWithType: IotHubEventCallback
  fullName: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
  type: Interface
  summary: "<p>An interface for an IoT Hub event callback.</p>\r\n<p>Developers are expected to create an implementation of this interface, and the transport will call <xref uid=\"com.microsoft.azure.sdk.iot.device.IotHubEventCallback.execute(IotHubStatusCode,Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IotHubEventCallback#execute(IotHubStatusCode, Object)\"></xref> upon receiving a response from an IoT Hub. </p>"
  syntax:
    content: public interface IotHubEventCallback
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.getFileUploadSasUri(FileUploadSasUriRequest)
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  name: getFileUploadSasUri(FileUploadSasUriRequest request)
  nameWithType: DeviceClient.getFileUploadSasUri(FileUploadSasUriRequest request)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.getFileUploadSasUri(FileUploadSasUriRequest request)
  type: Method
  summary: "<p>Get a file upload SAS URI which the Azure Storage SDK can use to upload a file to blob for this device. See <a href=\"https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-file-upload#initialize-a-file-upload\">this documentation</a> for more details. </p>"
  syntax: *o5
- uid: com.microsoft.azure.sdk.iot.device.DeviceClient.completeFileUpload(FileUploadCompletionNotification)
  parent: com.microsoft.azure.sdk.iot.device.DeviceClient
  href: com.microsoft.azure.sdk.iot.device.DeviceClient.yml
  name: completeFileUpload(FileUploadCompletionNotification notification)
  nameWithType: DeviceClient.completeFileUpload(FileUploadCompletionNotification notification)
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.completeFileUpload(FileUploadCompletionNotification notification)
  type: Method
  summary: "<p>Notify IoT Hub that a file upload has been completed, successfully or otherwise. See <a href=\"https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-file-upload#notify-iot-hub-of-a-completed-file-upload\">this documentation</a> for more details. </p>"
  syntax: *o6
- uid: com.microsoft.azure.sdk.iot.deps.serializer.FileUploadSasUriResponse
  parent: com.microsoft.azure.sdk.iot.deps.serializer
  href: com.microsoft.azure.sdk.iot.deps.serializer.FileUploadSasUriResponse.yml
  name: FileUploadSasUriResponse
  nameWithType: FileUploadSasUriResponse
  fullName: com.microsoft.azure.sdk.iot.deps.serializer.FileUploadSasUriResponse
  type: Class
  summary: "<p>The information provided from IoT Hub that can be used with the Azure Storage SDK to upload a file from your device, including authentication. </p>"
  syntax:
    content: public class FileUploadSasUriResponse
- uid: com.microsoft.azure.sdk.iot.deps.serializer.FileUploadSasUriRequest
  parent: com.microsoft.azure.sdk.iot.deps.serializer
  href: com.microsoft.azure.sdk.iot.deps.serializer.FileUploadSasUriRequest.yml
  name: FileUploadSasUriRequest
  nameWithType: FileUploadSasUriRequest
  fullName: com.microsoft.azure.sdk.iot.deps.serializer.FileUploadSasUriRequest
  type: Class
  summary: "<p>The request parameters when getting a file upload sas uri from IoT Hub. </p>"
  syntax:
    content: public class FileUploadSasUriRequest
- uid: com.microsoft.azure.sdk.iot.deps.serializer.FileUploadCompletionNotification
  parent: com.microsoft.azure.sdk.iot.deps.serializer
  href: com.microsoft.azure.sdk.iot.deps.serializer.FileUploadCompletionNotification.yml
  name: FileUploadCompletionNotification
  nameWithType: FileUploadCompletionNotification
  fullName: com.microsoft.azure.sdk.iot.deps.serializer.FileUploadCompletionNotification
  type: Class
  summary: "<p>The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not. Must set <xref uid=\"com.microsoft.azure.sdk.iot.deps.serializer.FileUploadCompletionNotification.setSuccess(Boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"setSuccess(Boolean)\"></xref> and <xref uid=\"com.microsoft.azure.sdk.iot.deps.serializer.FileUploadCompletionNotification.setCorrelationId(String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"setCorrelationId(String)\"></xref>, but all other fields are optional. </p>"
  syntax:
    content: public class FileUploadCompletionNotification
- uid: com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack
  parent: com.microsoft.azure.sdk.iot.device.DeviceTwin
  href: com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack.yml
  name: PropertyCallBack<Type1,Type2>
  nameWithType: PropertyCallBack<Type1,Type2>
  fullName: com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack<Type1,Type2>
  type: Interface
  syntax:
    content: public interface PropertyCallBack<Type1,Type2>
    typeParameters:
    - id: Type1
      type: 5f35c83f
    - id: Type2
      type: be713184
- uid: com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack
  parent: com.microsoft.azure.sdk.iot.device.DeviceTwin
  href: com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack.yml
  name: TwinPropertyCallBack
  nameWithType: TwinPropertyCallBack
  fullName: com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack
  type: Interface
  syntax:
    content: public interface TwinPropertyCallBack
- uid: com.microsoft.azure.sdk.iot.device.IotHubConnectionStateCallback
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device.IotHubConnectionStateCallback.yml
  name: IotHubConnectionStateCallback
  nameWithType: IotHubConnectionStateCallback
  fullName: com.microsoft.azure.sdk.iot.device.IotHubConnectionStateCallback
  type: Interface
  summary: "<p>An interface for an IoT Hub connection state callback.</p>\r\n<p>Developers are expected to create an implementation of this interface, and the transport will call <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IotHubConnectionStateCallback#execute(IotHubConnectionState, Object)\"></xref> passing in the connection status (down, success, etc.). </p>"
  syntax:
    content: public interface IotHubConnectionStateCallback
- uid: com.microsoft.azure.sdk.iot.device.DeviceTwin.DeviceMethodCallback
  parent: com.microsoft.azure.sdk.iot.device.DeviceTwin
  href: com.microsoft.azure.sdk.iot.device.DeviceTwin.DeviceMethodCallback.yml
  name: DeviceMethodCallback
  nameWithType: DeviceMethodCallback
  fullName: com.microsoft.azure.sdk.iot.device.DeviceTwin.DeviceMethodCallback
  type: Interface
  syntax:
    content: public interface DeviceMethodCallback
- uid: com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider
  parent: com.microsoft.azure.sdk.iot.provisioning.security
  href: com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider.yml
  name: SecurityProvider
  nameWithType: SecurityProvider
  fullName: com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider
  type: Class
  syntax:
    content: public class SecurityProvider
