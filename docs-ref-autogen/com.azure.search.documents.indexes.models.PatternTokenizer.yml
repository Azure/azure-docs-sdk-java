### YamlMime:JavaType
uid: "com.azure.search.documents.indexes.models.PatternTokenizer"
fullName: "com.azure.search.documents.indexes.models.PatternTokenizer"
name: "PatternTokenizer"
nameWithType: "PatternTokenizer"
summary: "Tokenizer that uses regex pattern matching to construct distinct tokens."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.search.documents.indexes.models.LexicalTokenizer?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.search.documents.indexes.models.LexicalTokenizer.getName()"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class PatternTokenizer extends LexicalTokenizer"
constructors:
- uid: "com.azure.search.documents.indexes.models.PatternTokenizer.PatternTokenizer(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.models.PatternTokenizer.PatternTokenizer(String name)"
  name: "PatternTokenizer(String name)"
  nameWithType: "PatternTokenizer.PatternTokenizer(String name)"
  summary: "Constructor of <xref uid=\"com.azure.search.documents.indexes.models.PatternTokenizer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PatternTokenizer\"></xref>."
  parameters:
  - description: "The name of the tokenizer. It must only contain letters, digits, spaces,\n dashes or underscores, can only start and end with alphanumeric\n characters, and is limited to 128 characters."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PatternTokenizer(String name)"
  desc: "Constructor of <xref uid=\"com.azure.search.documents.indexes.models.PatternTokenizer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PatternTokenizer\"></xref>."
methods:
- uid: "com.azure.search.documents.indexes.models.PatternTokenizer.getFlags()"
  fullName: "com.azure.search.documents.indexes.models.PatternTokenizer.getFlags()"
  name: "getFlags()"
  nameWithType: "PatternTokenizer.getFlags()"
  summary: "Get the flags property: Regular expression flags."
  syntax: "public List<RegexFlags> getFlags()"
  desc: "Get the flags property: Regular expression flags."
  returns:
    description: "the flags value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.RegexFlags?alt=com.azure.search.documents.indexes.models.RegexFlags&text=RegexFlags\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.models.PatternTokenizer.getGroup()"
  fullName: "com.azure.search.documents.indexes.models.PatternTokenizer.getGroup()"
  name: "getGroup()"
  nameWithType: "PatternTokenizer.getGroup()"
  summary: "Get the group property: The zero-based ordinal of the matching group in the regular expression pattern to extract into tokens."
  syntax: "public Integer getGroup()"
  desc: "Get the group property: The zero-based ordinal of the matching group in the regular expression pattern to extract into tokens. Use -1 if you want to use the entire pattern to split the input into tokens, irrespective of matching groups. Default is -1."
  returns:
    description: "the group value."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.PatternTokenizer.getPattern()"
  fullName: "com.azure.search.documents.indexes.models.PatternTokenizer.getPattern()"
  name: "getPattern()"
  nameWithType: "PatternTokenizer.getPattern()"
  summary: "Get the pattern property: A regular expression pattern to match token separators."
  syntax: "public String getPattern()"
  desc: "Get the pattern property: A regular expression pattern to match token separators. Default is an expression that matches one or more non-word characters."
  returns:
    description: "the pattern value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.PatternTokenizer.setFlags(com.azure.search.documents.indexes.models.RegexFlags...)"
  fullName: "com.azure.search.documents.indexes.models.PatternTokenizer.setFlags(RegexFlags[] flags)"
  name: "setFlags(RegexFlags[] flags)"
  nameWithType: "PatternTokenizer.setFlags(RegexFlags[] flags)"
  summary: "Set the flags property: Regular expression flags."
  parameters:
  - description: "the flags value to set."
    name: "flags"
    type: "<xref href=\"com.azure.search.documents.indexes.models.RegexFlags?alt=com.azure.search.documents.indexes.models.RegexFlags&text=RegexFlags\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public PatternTokenizer setFlags(RegexFlags[] flags)"
  desc: "Set the flags property: Regular expression flags."
  returns:
    description: "the PatternTokenizer object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.PatternTokenizer?alt=com.azure.search.documents.indexes.models.PatternTokenizer&text=PatternTokenizer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.PatternTokenizer.setFlags(java.util.List<com.azure.search.documents.indexes.models.RegexFlags>)"
  fullName: "com.azure.search.documents.indexes.models.PatternTokenizer.setFlags(List<RegexFlags> flags)"
  name: "setFlags(List<RegexFlags> flags)"
  nameWithType: "PatternTokenizer.setFlags(List<RegexFlags> flags)"
  summary: "Set the flags property: Regular expression flags."
  parameters:
  - description: "the flags value to set."
    name: "flags"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.RegexFlags?alt=com.azure.search.documents.indexes.models.RegexFlags&text=RegexFlags\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PatternTokenizer setFlags(List<RegexFlags> flags)"
  desc: "Set the flags property: Regular expression flags."
  returns:
    description: "the PatternTokenizer object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.PatternTokenizer?alt=com.azure.search.documents.indexes.models.PatternTokenizer&text=PatternTokenizer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.PatternTokenizer.setGroup(java.lang.Integer)"
  fullName: "com.azure.search.documents.indexes.models.PatternTokenizer.setGroup(Integer group)"
  name: "setGroup(Integer group)"
  nameWithType: "PatternTokenizer.setGroup(Integer group)"
  summary: "Set the group property: The zero-based ordinal of the matching group in the regular expression pattern to extract into tokens."
  parameters:
  - description: "the group value to set."
    name: "group"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PatternTokenizer setGroup(Integer group)"
  desc: "Set the group property: The zero-based ordinal of the matching group in the regular expression pattern to extract into tokens. Use -1 if you want to use the entire pattern to split the input into tokens, irrespective of matching groups. Default is -1."
  returns:
    description: "the PatternTokenizer object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.PatternTokenizer?alt=com.azure.search.documents.indexes.models.PatternTokenizer&text=PatternTokenizer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.PatternTokenizer.setPattern(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.models.PatternTokenizer.setPattern(String pattern)"
  name: "setPattern(String pattern)"
  nameWithType: "PatternTokenizer.setPattern(String pattern)"
  summary: "Set the pattern property: A regular expression pattern to match token separators."
  parameters:
  - description: "the pattern value to set."
    name: "pattern"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PatternTokenizer setPattern(String pattern)"
  desc: "Set the pattern property: A regular expression pattern to match token separators. Default is an expression that matches one or more non-word characters."
  returns:
    description: "the PatternTokenizer object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.PatternTokenizer?alt=com.azure.search.documents.indexes.models.PatternTokenizer&text=PatternTokenizer\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Tokenizer that uses regex pattern matching to construct distinct tokens. This tokenizer is implemented using Apache Lucene."
metadata: {}
package: "com.azure.search.documents.indexes.models"
artifact: com.azure:azure-search-documents:11.4.13
