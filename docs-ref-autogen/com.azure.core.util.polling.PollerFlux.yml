### YamlMime:ManagedReference
items:
- uid: com.azure.core.util.polling.PollerFlux
  id: PollerFlux
  artifact: com.azure:azure-core:1.5.0
  parent: com.azure.core.util.polling
  children:
  - com.azure.core.util.polling.PollerFlux.<T,U>create(java.time.Duration,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.BiFunction<com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<T>>,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<U>>)
  - com.azure.core.util.polling.PollerFlux.<T,U>error(java.lang.Exception)
  - com.azure.core.util.polling.PollerFlux.PollerFlux(java.time.Duration,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<T>>,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.BiFunction<com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<T>>,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<U>>)
  - com.azure.core.util.polling.PollerFlux.getSyncPoller()
  - com.azure.core.util.polling.PollerFlux.subscribe(reactor.core.CoreSubscriber<? super com.azure.core.util.polling.AsyncPollResponse<T,U>>)
  langs:
  - java
  name: PollerFlux<T,U>
  nameWithType: PollerFlux<T,U>
  fullName: com.azure.core.util.polling.PollerFlux<T,U>
  type: Class
  package: com.azure.core.util.polling
  summary: "A Flux that simplifies the task of executing long running operations against an Azure service. A subscription to <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\">PollerFlux</xref> initiates a long running operation and polls the status until it completes.\n\n**Code samples**\n\n**Instantiating and subscribing to PollerFlux**\n\n```java\nLocalDateTime timeToReturnFinalResponse = LocalDateTime.now().plus(Duration.ofMillis(800));\n \n // Create poller instance\n PollerFlux<String, String> poller = new PollerFlux<>(Duration.ofMillis(100),\n     (context) -> Mono.empty(),\n     // Define your custom poll operation\n     (context) ->  {\n         if (LocalDateTime.now().isBefore(timeToReturnFinalResponse)) {\n             System.out.println(\"Returning intermediate response.\");\n             return Mono.just(new PollResponse<>(LongRunningOperationStatus.IN_PROGRESS,\n                     \"Operation in progress.\"));\n         } else {\n             System.out.println(\"Returning final response.\");\n             return Mono.just(new PollResponse<>(LongRunningOperationStatus.SUCCESSFULLY_COMPLETED,\n                     \"Operation completed.\"));\n         }\n     },\n     (activationResponse, context) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),\n     (context) -> Mono.just(\"Final Output\"));\n \n // Listen to poll responses\n poller.subscribe(response -> {\n     // Process poll response\n     System.out.printf(\"Got response. Status: %s, Value: %s%n\", response.getStatus(), response.getValue());\n });\n // Do something else\n```\n\n**Asynchronously wait for polling to complete and then retrieve the final result**\n\n```java\nLocalDateTime timeToReturnFinalResponse = LocalDateTime.now().plus(Duration.ofMinutes(5));\n \n // Create poller instance\n PollerFlux<String, String> poller = new PollerFlux<>(Duration.ofMillis(100),\n     (context) -> Mono.empty(),\n     (context) ->  {\n         if (LocalDateTime.now().isBefore(timeToReturnFinalResponse)) {\n             System.out.println(\"Returning intermediate response.\");\n             return Mono.just(new PollResponse<>(LongRunningOperationStatus.IN_PROGRESS,\n                     \"Operation in progress.\"));\n         } else {\n             System.out.println(\"Returning final response.\");\n             return Mono.just(new PollResponse<>(LongRunningOperationStatus.SUCCESSFULLY_COMPLETED,\n                     \"Operation completed.\"));\n         }\n     },\n     (activationResponse, context) -> Mono.just(\"FromServer:OperationIsCancelled\"),\n     (context) -> Mono.just(\"FromServer:FinalOutput\"));\n \n poller.take(Duration.ofMinutes(30))\n         .last()\n         .flatMap(asyncPollResponse -> {\n             if (asyncPollResponse.getStatus() == LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {\n                 // operation completed successfully, retrieving final result.\n                 return asyncPollResponse\n                         .getFinalResult();\n             } else {\n                 return Mono.error(new RuntimeException(\"polling completed unsuccessfully with status:\"\n                         + asyncPollResponse.getStatus()));\n             }\n         }).block();\n```\n\n**Block for polling to complete and then retrieve the final result**\n\n```java\nAsyncPollResponse<String, String> terminalResponse = pollerFlux.blockLast();\n System.out.printf(\"Polling complete. Final Status: %s\", terminalResponse.getStatus());\n if (terminalResponse.getStatus() == LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {\n     String finalResult = terminalResponse.getFinalResult().block();\n     System.out.printf(\"Polling complete. Final Status: %s\", finalResult);\n }\n```\n\n**Asynchronously poll until poller receives matching status**\n\n```java\nfinal Predicate<AsyncPollResponse<String, String>> isComplete = response -> {\n     return response.getStatus() != LongRunningOperationStatus.IN_PROGRESS\n         && response.getStatus() != LongRunningOperationStatus.NOT_STARTED;\n };\n \n pollerFlux\n     .takeUntil(isComplete)\n     .subscribe(completed -> {\n         System.out.println(\"Completed poll response, status: \" + completed.getStatus());\n     });\n```\n\n**Asynchronously cancel the long running operation**\n\n```java\nLocalDateTime timeToReturnFinalResponse = LocalDateTime.now().plus(Duration.ofMinutes(5));\n \n // Create poller instance\n PollerFlux<String, String> poller = new PollerFlux<>(Duration.ofMillis(100),\n     (context) -> Mono.empty(),\n     (context) ->  {\n         if (LocalDateTime.now().isBefore(timeToReturnFinalResponse)) {\n             System.out.println(\"Returning intermediate response.\");\n             return Mono.just(new PollResponse<>(LongRunningOperationStatus.IN_PROGRESS,\n                     \"Operation in progress.\"));\n         } else {\n             System.out.println(\"Returning final response.\");\n             return Mono.just(new PollResponse<>(LongRunningOperationStatus.SUCCESSFULLY_COMPLETED,\n                     \"Operation completed.\"));\n         }\n     },\n     (activationResponse, context) -> Mono.just(\"FromServer:OperationIsCancelled\"),\n     (context) -> Mono.just(\"FromServer:FinalOutput\"));\n \n // Asynchronously wait 30 minutes to complete the polling, if not completed\n // within in the time then cancel the server operation.\n poller.take(Duration.ofMinutes(30))\n         .last()\n         .flatMap(asyncPollResponse -> {\n             if (!asyncPollResponse.getStatus().isComplete()) {\n                 return asyncPollResponse\n                         .cancelOperation()\n                         .then(Mono.error(new RuntimeException(\"Operation is cancelled!\")));\n             } else {\n                 return Mono.just(asyncPollResponse);\n             }\n         }).block();\n```"
  syntax:
    content: public final class PollerFlux<T,U> extends Flux<AsyncPollResponse<T,U>>
    typeParameters:
    - id: T
    - id: U
  inheritance:
  - java.lang.Object
  - reactor.core.publisher.Flux
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - reactor.core.publisher.Flux.<A>reduce(A,java.util.function.BiFunction<A,? super T,A>)
  - reactor.core.publisher.Flux.<A>reduceWith(java.util.function.Supplier<A>,java.util.function.BiFunction<A,? super T,A>)
  - reactor.core.publisher.Flux.<A>scan(A,java.util.function.BiFunction<A,? super T,A>)
  - reactor.core.publisher.Flux.<A>scanWith(java.util.function.Supplier<A>,java.util.function.BiFunction<A,? super T,A>)
  - reactor.core.publisher.Flux.<C>buffer(int,int,java.util.function.Supplier<C>)
  - reactor.core.publisher.Flux.<C>buffer(int,java.util.function.Supplier<C>)
  - reactor.core.publisher.Flux.<C>buffer(org.reactivestreams.Publisher<?>,java.util.function.Supplier<C>)
  - reactor.core.publisher.Flux.<C>bufferTimeout(int,java.time.Duration,java.util.function.Supplier<C>)
  - reactor.core.publisher.Flux.<C>bufferTimeout(int,java.time.Duration,reactor.core.scheduler.Scheduler,java.util.function.Supplier<C>)
  - reactor.core.publisher.Flux.<E>cast(java.lang.Class<E>)
  - reactor.core.publisher.Flux.<E>collect(java.util.function.Supplier<E>,java.util.function.BiConsumer<E,? super T>)
  - reactor.core.publisher.Flux.<E>doOnError(java.lang.Class<E>,java.util.function.Consumer<? super E>)
  - reactor.core.publisher.Flux.<E>onErrorContinue(java.lang.Class<E>,java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)
  - reactor.core.publisher.Flux.<E>onErrorContinue(java.util.function.Predicate<E>,java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)
  - reactor.core.publisher.Flux.<E>onErrorMap(java.lang.Class<E>,java.util.function.Function<? super E,? extends java.lang.Throwable>)
  - reactor.core.publisher.Flux.<E>onErrorResume(java.lang.Class<E>,java.util.function.Function<? super E,? extends org.reactivestreams.Publisher<? extends T>>)
  - reactor.core.publisher.Flux.<E>onErrorReturn(java.lang.Class<E>,T)
  - reactor.core.publisher.Flux.<E>subscribeWith(E)
  - reactor.core.publisher.Flux.<I,O>zip(java.util.function.Function<? super java.lang.Object[],? extends O>,int,org.reactivestreams.Publisher<? extends I>...)
  - reactor.core.publisher.Flux.<I,O>zip(java.util.function.Function<? super java.lang.Object[],? extends O>,org.reactivestreams.Publisher<? extends I>...)
  - reactor.core.publisher.Flux.<I>first(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>)
  - reactor.core.publisher.Flux.<I>first(org.reactivestreams.Publisher<? extends I>...)
  - reactor.core.publisher.Flux.<I>index(java.util.function.BiFunction<? super java.lang.Long,? super T,? extends I>)
  - reactor.core.publisher.Flux.<I>merge(int,org.reactivestreams.Publisher<? extends I>...)
  - reactor.core.publisher.Flux.<I>merge(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>)
  - reactor.core.publisher.Flux.<I>merge(org.reactivestreams.Publisher<? extends I>...)
  - reactor.core.publisher.Flux.<I>mergeDelayError(int,org.reactivestreams.Publisher<? extends I>...)
  - reactor.core.publisher.Flux.<I>mergeOrdered(org.reactivestreams.Publisher<? extends I>...)
  - reactor.core.publisher.Flux.<I>mergeSequential(int,org.reactivestreams.Publisher<? extends I>...)
  - reactor.core.publisher.Flux.<I>mergeSequential(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>)
  - reactor.core.publisher.Flux.<I>mergeSequential(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>,int,int)
  - reactor.core.publisher.Flux.<I>mergeSequential(org.reactivestreams.Publisher<? extends I>...)
  - reactor.core.publisher.Flux.<I>mergeSequentialDelayError(int,org.reactivestreams.Publisher<? extends I>...)
  - reactor.core.publisher.Flux.<I>mergeSequentialDelayError(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>,int,int)
  - reactor.core.publisher.Flux.<K,V>collectMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  - reactor.core.publisher.Flux.<K,V>collectMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.Supplier<java.util.Map<K,V>>)
  - reactor.core.publisher.Flux.<K,V>collectMultimap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  - reactor.core.publisher.Flux.<K,V>collectMultimap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.Supplier<java.util.Map<K,java.util.Collection<V>>>)
  - reactor.core.publisher.Flux.<K,V>groupBy(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  - reactor.core.publisher.Flux.<K,V>groupBy(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,int)
  - reactor.core.publisher.Flux.<K>collectMap(java.util.function.Function<? super T,? extends K>)
  - reactor.core.publisher.Flux.<K>collectMultimap(java.util.function.Function<? super T,? extends K>)
  - reactor.core.publisher.Flux.<K>groupBy(java.util.function.Function<? super T,? extends K>)
  - reactor.core.publisher.Flux.<K>groupBy(java.util.function.Function<? super T,? extends K>,int)
  - reactor.core.publisher.Flux.<O>error(java.lang.Throwable,boolean)
  - reactor.core.publisher.Flux.<O>zip(java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>,int,java.util.function.Function<? super java.lang.Object[],? extends O>)
  - reactor.core.publisher.Flux.<O>zip(java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super java.lang.Object[],? extends O>)
  - reactor.core.publisher.Flux.<P>as(java.util.function.Function<? super reactor.core.publisher.Flux<T>,P>)
  - reactor.core.publisher.Flux.<R,A>collect(java.util.stream.Collector<? super T,A,? extends R>)
  - reactor.core.publisher.Flux.<R>concatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>)
  - reactor.core.publisher.Flux.<R>concatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>,int)
  - reactor.core.publisher.Flux.<R>doOnDiscard(java.lang.Class<R>,java.util.function.Consumer<? super R>)
  - reactor.core.publisher.Flux.<R>flatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>)
  - reactor.core.publisher.Flux.<R>flatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,java.util.function.Function<? super java.lang.Throwable,? extends org.reactivestreams.Publisher<? extends R>>,java.util.function.Supplier<? extends org.reactivestreams.Publisher<? extends R>>)
  - reactor.core.publisher.Flux.<R>flatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>)
  - reactor.core.publisher.Flux.<R>flatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>,int)
  - reactor.core.publisher.Flux.<R>flatMapSequential(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>)
  - reactor.core.publisher.Flux.<R>flatMapSequential(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,int)
  - reactor.core.publisher.Flux.<R>flatMapSequential(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,int,int)
  - reactor.core.publisher.Flux.<R>flatMapSequentialDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,int,int)
  - reactor.core.publisher.Flux.<R>handle(java.util.function.BiConsumer<? super T,reactor.core.publisher.SynchronousSink<R>>)
  - reactor.core.publisher.Flux.<R>publish(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<? extends R>>)
  - reactor.core.publisher.Flux.<R>publish(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<? extends R>>,int)
  - reactor.core.publisher.Flux.<T,D>using(java.util.concurrent.Callable<? extends D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Consumer<? super D>)
  - reactor.core.publisher.Flux.<T,D>using(java.util.concurrent.Callable<? extends D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Consumer<? super D>,boolean)
  - reactor.core.publisher.Flux.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)
  - reactor.core.publisher.Flux.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.BiFunction<? super D,? super java.lang.Throwable,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)
  - reactor.core.publisher.Flux.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)
  - reactor.core.publisher.Flux.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)
  - reactor.core.publisher.Flux.<T,S>generate(java.util.concurrent.Callable<S>,java.util.function.BiFunction<S,reactor.core.publisher.SynchronousSink<T>,S>)
  - reactor.core.publisher.Flux.<T,S>generate(java.util.concurrent.Callable<S>,java.util.function.BiFunction<S,reactor.core.publisher.SynchronousSink<T>,S>,java.util.function.Consumer<? super S>)
  - reactor.core.publisher.Flux.<T,V>combineLatest(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>>,int,java.util.function.Function<java.lang.Object[],V>)
  - reactor.core.publisher.Flux.<T,V>combineLatest(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<java.lang.Object[],V>)
  - reactor.core.publisher.Flux.<T,V>combineLatest(java.util.function.Function<java.lang.Object[],V>,int,org.reactivestreams.Publisher<? extends T>...)
  - reactor.core.publisher.Flux.<T,V>combineLatest(java.util.function.Function<java.lang.Object[],V>,org.reactivestreams.Publisher<? extends T>...)
  - reactor.core.publisher.Flux.<T1,T2,O>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,java.util.function.BiFunction<? super T1,? super T2,? extends O>)
  - reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6,T7,T8>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,org.reactivestreams.Publisher<? extends T6>,org.reactivestreams.Publisher<? extends T7>,org.reactivestreams.Publisher<? extends T8>)
  - reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6,T7>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,org.reactivestreams.Publisher<? extends T6>,org.reactivestreams.Publisher<? extends T7>)
  - reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,org.reactivestreams.Publisher<? extends T6>,java.util.function.Function<java.lang.Object[],V>)
  - reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,org.reactivestreams.Publisher<? extends T6>)
  - reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,java.util.function.Function<java.lang.Object[],V>)
  - reactor.core.publisher.Flux.<T1,T2,T3,T4,T5>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>)
  - reactor.core.publisher.Flux.<T1,T2,T3,T4,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,java.util.function.Function<java.lang.Object[],V>)
  - reactor.core.publisher.Flux.<T1,T2,T3,T4>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>)
  - reactor.core.publisher.Flux.<T1,T2,T3,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,java.util.function.Function<java.lang.Object[],V>)
  - reactor.core.publisher.Flux.<T1,T2,T3>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>)
  - reactor.core.publisher.Flux.<T1,T2,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,java.util.function.BiFunction<? super T1,? super T2,? extends V>)
  - reactor.core.publisher.Flux.<T1,T2>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>)
  - reactor.core.publisher.Flux.<T2,V>zipWith(org.reactivestreams.Publisher<? extends T2>,int,java.util.function.BiFunction<? super T,? super T2,? extends V>)
  - reactor.core.publisher.Flux.<T2,V>zipWith(org.reactivestreams.Publisher<? extends T2>,java.util.function.BiFunction<? super T,? super T2,? extends V>)
  - reactor.core.publisher.Flux.<T2,V>zipWithIterable(java.lang.Iterable<? extends T2>,java.util.function.BiFunction<? super T,? super T2,? extends V>)
  - reactor.core.publisher.Flux.<T2>zipWith(org.reactivestreams.Publisher<? extends T2>)
  - reactor.core.publisher.Flux.<T2>zipWith(org.reactivestreams.Publisher<? extends T2>,int)
  - reactor.core.publisher.Flux.<T2>zipWithIterable(java.lang.Iterable<? extends T2>)
  - reactor.core.publisher.Flux.<T>concat(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>>)
  - reactor.core.publisher.Flux.<T>concat(org.reactivestreams.Publisher<? extends T>...)
  - reactor.core.publisher.Flux.<T>concat(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)
  - reactor.core.publisher.Flux.<T>concat(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int)
  - reactor.core.publisher.Flux.<T>concatDelayError(org.reactivestreams.Publisher<? extends T>...)
  - reactor.core.publisher.Flux.<T>concatDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)
  - reactor.core.publisher.Flux.<T>concatDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,boolean,int)
  - reactor.core.publisher.Flux.<T>concatDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int)
  - reactor.core.publisher.Flux.<T>create(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>)
  - reactor.core.publisher.Flux.<T>create(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>,reactor.core.publisher.FluxSink.OverflowStrategy)
  - reactor.core.publisher.Flux.<T>defer(java.util.function.Supplier<? extends org.reactivestreams.Publisher<T>>)
  - reactor.core.publisher.Flux.<T>deferWithContext(java.util.function.Function<reactor.util.context.Context,? extends org.reactivestreams.Publisher<T>>)
  - reactor.core.publisher.Flux.<T>empty()
  - reactor.core.publisher.Flux.<T>error(java.lang.Throwable)
  - reactor.core.publisher.Flux.<T>error(java.util.function.Supplier<? extends java.lang.Throwable>)
  - reactor.core.publisher.Flux.<T>from(org.reactivestreams.Publisher<? extends T>)
  - reactor.core.publisher.Flux.<T>fromArray(T[])
  - reactor.core.publisher.Flux.<T>fromIterable(java.lang.Iterable<? extends T>)
  - reactor.core.publisher.Flux.<T>fromStream(java.util.function.Supplier<java.util.stream.Stream<? extends T>>)
  - reactor.core.publisher.Flux.<T>fromStream(java.util.stream.Stream<? extends T>)
  - reactor.core.publisher.Flux.<T>generate(java.util.function.Consumer<reactor.core.publisher.SynchronousSink<T>>)
  - reactor.core.publisher.Flux.<T>just(T)
  - reactor.core.publisher.Flux.<T>just(T...)
  - reactor.core.publisher.Flux.<T>merge(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)
  - reactor.core.publisher.Flux.<T>merge(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int)
  - reactor.core.publisher.Flux.<T>merge(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int,int)
  - reactor.core.publisher.Flux.<T>mergeOrdered(int,java.util.Comparator<? super T>,org.reactivestreams.Publisher<? extends T>...)
  - reactor.core.publisher.Flux.<T>mergeOrdered(java.util.Comparator<? super T>,org.reactivestreams.Publisher<? extends T>...)
  - reactor.core.publisher.Flux.<T>mergeSequential(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)
  - reactor.core.publisher.Flux.<T>mergeSequential(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int,int)
  - reactor.core.publisher.Flux.<T>mergeSequentialDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int,int)
  - reactor.core.publisher.Flux.<T>never()
  - reactor.core.publisher.Flux.<T>onAssembly(reactor.core.publisher.ConnectableFlux<T>)
  - reactor.core.publisher.Flux.<T>onAssembly(reactor.core.publisher.Flux<T>)
  - reactor.core.publisher.Flux.<T>onLastAssembly(reactor.core.publisher.Flux<T>)
  - reactor.core.publisher.Flux.<T>push(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>)
  - reactor.core.publisher.Flux.<T>push(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>,reactor.core.publisher.FluxSink.OverflowStrategy)
  - reactor.core.publisher.Flux.<T>switchOnNext(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)
  - reactor.core.publisher.Flux.<T>switchOnNext(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int)
  - reactor.core.publisher.Flux.<TRight,TLeftEnd,TRightEnd,R>groupJoin(org.reactivestreams.Publisher<? extends TRight>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<TLeftEnd>>,java.util.function.Function<? super TRight,? extends org.reactivestreams.Publisher<TRightEnd>>,java.util.function.BiFunction<? super T,? super reactor.core.publisher.Flux<TRight>,? extends R>)
  - reactor.core.publisher.Flux.<TRight,TLeftEnd,TRightEnd,R>join(org.reactivestreams.Publisher<? extends TRight>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<TLeftEnd>>,java.util.function.Function<? super TRight,? extends org.reactivestreams.Publisher<TRightEnd>>,java.util.function.BiFunction<? super T,? super TRight,? extends R>)
  - reactor.core.publisher.Flux.<TUPLE,V>zip(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super TUPLE,? extends V>)
  - reactor.core.publisher.Flux.<U,R>withLatestFrom(org.reactivestreams.Publisher<? extends U>,java.util.function.BiFunction<? super T,? super U,? extends R>)
  - reactor.core.publisher.Flux.<U,V,C>bufferWhen(org.reactivestreams.Publisher<U>,java.util.function.Function<? super U,? extends org.reactivestreams.Publisher<V>>,java.util.function.Supplier<C>)
  - reactor.core.publisher.Flux.<U,V>bufferWhen(org.reactivestreams.Publisher<U>,java.util.function.Function<? super U,? extends org.reactivestreams.Publisher<V>>)
  - reactor.core.publisher.Flux.<U,V>timeout(org.reactivestreams.Publisher<U>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<V>>)
  - reactor.core.publisher.Flux.<U,V>timeout(org.reactivestreams.Publisher<U>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<V>>,org.reactivestreams.Publisher<? extends T>)
  - reactor.core.publisher.Flux.<U,V>windowWhen(org.reactivestreams.Publisher<U>,java.util.function.Function<? super U,? extends org.reactivestreams.Publisher<V>>)
  - reactor.core.publisher.Flux.<U>delaySubscription(org.reactivestreams.Publisher<U>)
  - reactor.core.publisher.Flux.<U>ofType(java.lang.Class<U>)
  - reactor.core.publisher.Flux.<U>sample(org.reactivestreams.Publisher<U>)
  - reactor.core.publisher.Flux.<U>sampleFirst(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<U>>)
  - reactor.core.publisher.Flux.<U>sampleTimeout(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<U>>)
  - reactor.core.publisher.Flux.<U>sampleTimeout(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<U>>,int)
  - reactor.core.publisher.Flux.<U>timeout(org.reactivestreams.Publisher<U>)
  - reactor.core.publisher.Flux.<V,C>distinct(java.util.function.Function<? super T,? extends V>,java.util.function.Supplier<C>)
  - reactor.core.publisher.Flux.<V,C>distinct(java.util.function.Function<? super T,? extends V>,java.util.function.Supplier<C>,java.util.function.BiPredicate<C,V>,java.util.function.Consumer<C>)
  - reactor.core.publisher.Flux.<V>bufferUntilChanged()
  - reactor.core.publisher.Flux.<V>bufferUntilChanged(java.util.function.Function<? super T,? extends V>)
  - reactor.core.publisher.Flux.<V>bufferUntilChanged(java.util.function.Function<? super T,? extends V>,java.util.function.BiPredicate<? super V,? super V>)
  - reactor.core.publisher.Flux.<V>compose(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<V>>)
  - reactor.core.publisher.Flux.<V>concatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>)
  - reactor.core.publisher.Flux.<V>concatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int)
  - reactor.core.publisher.Flux.<V>concatMapDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>)
  - reactor.core.publisher.Flux.<V>concatMapDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,boolean,int)
  - reactor.core.publisher.Flux.<V>concatMapDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int)
  - reactor.core.publisher.Flux.<V>distinct(java.util.function.Function<? super T,? extends V>)
  - reactor.core.publisher.Flux.<V>distinctUntilChanged(java.util.function.Function<? super T,? extends V>)
  - reactor.core.publisher.Flux.<V>distinctUntilChanged(java.util.function.Function<? super T,? extends V>,java.util.function.BiPredicate<? super V,? super V>)
  - reactor.core.publisher.Flux.<V>flatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int)
  - reactor.core.publisher.Flux.<V>flatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int,int)
  - reactor.core.publisher.Flux.<V>flatMapDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int,int)
  - reactor.core.publisher.Flux.<V>map(java.util.function.Function<? super T,? extends V>)
  - reactor.core.publisher.Flux.<V>switchMap(java.util.function.Function<? super T,org.reactivestreams.Publisher<? extends V>>)
  - reactor.core.publisher.Flux.<V>switchMap(java.util.function.Function<? super T,org.reactivestreams.Publisher<? extends V>>,int)
  - reactor.core.publisher.Flux.<V>switchOnFirst(java.util.function.BiFunction<reactor.core.publisher.Signal<? extends T>,reactor.core.publisher.Flux<T>,org.reactivestreams.Publisher<? extends V>>)
  - reactor.core.publisher.Flux.<V>switchOnFirst(java.util.function.BiFunction<reactor.core.publisher.Signal<? extends T>,reactor.core.publisher.Flux<T>,org.reactivestreams.Publisher<? extends V>>,boolean)
  - reactor.core.publisher.Flux.<V>then(reactor.core.publisher.Mono<V>)
  - reactor.core.publisher.Flux.<V>thenMany(org.reactivestreams.Publisher<V>)
  - reactor.core.publisher.Flux.<V>transform(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<V>>)
  - reactor.core.publisher.Flux.<V>transformDeferred(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<V>>)
  - reactor.core.publisher.Flux.<V>windowUntilChanged()
  - reactor.core.publisher.Flux.<V>windowUntilChanged(java.util.function.Function<? super T,? extends V>,java.util.function.BiPredicate<? super V,? super V>)
  - reactor.core.publisher.Flux.<V>windowUntilChanged(java.util.function.Function<? super T,? super V>)
  - reactor.core.publisher.Flux.<X>dematerialize()
  - reactor.core.publisher.Flux.all(java.util.function.Predicate<? super T>)
  - reactor.core.publisher.Flux.any(java.util.function.Predicate<? super T>)
  - reactor.core.publisher.Flux.blockFirst()
  - reactor.core.publisher.Flux.blockFirst(java.time.Duration)
  - reactor.core.publisher.Flux.blockLast()
  - reactor.core.publisher.Flux.blockLast(java.time.Duration)
  - reactor.core.publisher.Flux.buffer()
  - reactor.core.publisher.Flux.buffer(int)
  - reactor.core.publisher.Flux.buffer(int,int)
  - reactor.core.publisher.Flux.buffer(java.time.Duration)
  - reactor.core.publisher.Flux.buffer(java.time.Duration,java.time.Duration)
  - reactor.core.publisher.Flux.buffer(java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.buffer(java.time.Duration,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.buffer(org.reactivestreams.Publisher<?>)
  - reactor.core.publisher.Flux.bufferTimeout(int,java.time.Duration)
  - reactor.core.publisher.Flux.bufferTimeout(int,java.time.Duration,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.bufferUntil(java.util.function.Predicate<? super T>)
  - reactor.core.publisher.Flux.bufferUntil(java.util.function.Predicate<? super T>,boolean)
  - reactor.core.publisher.Flux.bufferWhile(java.util.function.Predicate<? super T>)
  - reactor.core.publisher.Flux.cache()
  - reactor.core.publisher.Flux.cache(int)
  - reactor.core.publisher.Flux.cache(int,java.time.Duration)
  - reactor.core.publisher.Flux.cache(int,java.time.Duration,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.cache(java.time.Duration)
  - reactor.core.publisher.Flux.cache(java.time.Duration,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.cancelOn(reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.checkpoint()
  - reactor.core.publisher.Flux.checkpoint(java.lang.String)
  - reactor.core.publisher.Flux.checkpoint(java.lang.String,boolean)
  - reactor.core.publisher.Flux.collectList()
  - reactor.core.publisher.Flux.collectSortedList()
  - reactor.core.publisher.Flux.collectSortedList(java.util.Comparator<? super T>)
  - reactor.core.publisher.Flux.concatWith(org.reactivestreams.Publisher<? extends T>)
  - reactor.core.publisher.Flux.concatWithValues(T...)
  - reactor.core.publisher.Flux.count()
  - reactor.core.publisher.Flux.defaultIfEmpty(T)
  - reactor.core.publisher.Flux.delayElements(java.time.Duration)
  - reactor.core.publisher.Flux.delayElements(java.time.Duration,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.delaySequence(java.time.Duration)
  - reactor.core.publisher.Flux.delaySequence(java.time.Duration,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.delaySubscription(java.time.Duration)
  - reactor.core.publisher.Flux.delaySubscription(java.time.Duration,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.delayUntil(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<?>>)
  - reactor.core.publisher.Flux.distinct()
  - reactor.core.publisher.Flux.distinctUntilChanged()
  - reactor.core.publisher.Flux.doAfterTerminate(java.lang.Runnable)
  - reactor.core.publisher.Flux.doFinally(java.util.function.Consumer<reactor.core.publisher.SignalType>)
  - reactor.core.publisher.Flux.doFirst(java.lang.Runnable)
  - reactor.core.publisher.Flux.doOnCancel(java.lang.Runnable)
  - reactor.core.publisher.Flux.doOnComplete(java.lang.Runnable)
  - reactor.core.publisher.Flux.doOnEach(java.util.function.Consumer<? super reactor.core.publisher.Signal<T>>)
  - reactor.core.publisher.Flux.doOnError(java.util.function.Consumer<? super java.lang.Throwable>)
  - reactor.core.publisher.Flux.doOnError(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Consumer<? super java.lang.Throwable>)
  - reactor.core.publisher.Flux.doOnNext(java.util.function.Consumer<? super T>)
  - reactor.core.publisher.Flux.doOnRequest(java.util.function.LongConsumer)
  - reactor.core.publisher.Flux.doOnSubscribe(java.util.function.Consumer<? super org.reactivestreams.Subscription>)
  - reactor.core.publisher.Flux.doOnTerminate(java.lang.Runnable)
  - reactor.core.publisher.Flux.elapsed()
  - reactor.core.publisher.Flux.elapsed(reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.elementAt(int)
  - reactor.core.publisher.Flux.elementAt(int,T)
  - reactor.core.publisher.Flux.expand(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>)
  - reactor.core.publisher.Flux.expand(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>,int)
  - reactor.core.publisher.Flux.expandDeep(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>)
  - reactor.core.publisher.Flux.expandDeep(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>,int)
  - reactor.core.publisher.Flux.filter(java.util.function.Predicate<? super T>)
  - reactor.core.publisher.Flux.filterWhen(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<java.lang.Boolean>>)
  - reactor.core.publisher.Flux.filterWhen(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<java.lang.Boolean>>,int)
  - reactor.core.publisher.Flux.getPrefetch()
  - reactor.core.publisher.Flux.hasElement(T)
  - reactor.core.publisher.Flux.hasElements()
  - reactor.core.publisher.Flux.hide()
  - reactor.core.publisher.Flux.ignoreElements()
  - reactor.core.publisher.Flux.index()
  - reactor.core.publisher.Flux.interval(java.time.Duration)
  - reactor.core.publisher.Flux.interval(java.time.Duration,java.time.Duration)
  - reactor.core.publisher.Flux.interval(java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.interval(java.time.Duration,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.last()
  - reactor.core.publisher.Flux.last(T)
  - reactor.core.publisher.Flux.limitRate(int)
  - reactor.core.publisher.Flux.limitRate(int,int)
  - reactor.core.publisher.Flux.limitRequest(long)
  - reactor.core.publisher.Flux.log()
  - reactor.core.publisher.Flux.log(java.lang.String)
  - reactor.core.publisher.Flux.log(java.lang.String,java.util.logging.Level,boolean,reactor.core.publisher.SignalType...)
  - reactor.core.publisher.Flux.log(java.lang.String,java.util.logging.Level,reactor.core.publisher.SignalType...)
  - reactor.core.publisher.Flux.log(reactor.util.Logger)
  - reactor.core.publisher.Flux.log(reactor.util.Logger,java.util.logging.Level,boolean,reactor.core.publisher.SignalType...)
  - reactor.core.publisher.Flux.materialize()
  - reactor.core.publisher.Flux.mergeOrderedWith(org.reactivestreams.Publisher<? extends T>,java.util.Comparator<? super T>)
  - reactor.core.publisher.Flux.mergeWith(org.reactivestreams.Publisher<? extends T>)
  - reactor.core.publisher.Flux.metrics()
  - reactor.core.publisher.Flux.name(java.lang.String)
  - reactor.core.publisher.Flux.next()
  - reactor.core.publisher.Flux.onBackpressureBuffer()
  - reactor.core.publisher.Flux.onBackpressureBuffer(int)
  - reactor.core.publisher.Flux.onBackpressureBuffer(int,java.util.function.Consumer<? super T>)
  - reactor.core.publisher.Flux.onBackpressureBuffer(int,java.util.function.Consumer<? super T>,reactor.core.publisher.BufferOverflowStrategy)
  - reactor.core.publisher.Flux.onBackpressureBuffer(int,reactor.core.publisher.BufferOverflowStrategy)
  - reactor.core.publisher.Flux.onBackpressureBuffer(java.time.Duration,int,java.util.function.Consumer<? super T>)
  - reactor.core.publisher.Flux.onBackpressureBuffer(java.time.Duration,int,java.util.function.Consumer<? super T>,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.onBackpressureDrop()
  - reactor.core.publisher.Flux.onBackpressureDrop(java.util.function.Consumer<? super T>)
  - reactor.core.publisher.Flux.onBackpressureError()
  - reactor.core.publisher.Flux.onBackpressureLatest()
  - reactor.core.publisher.Flux.onErrorContinue(java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)
  - reactor.core.publisher.Flux.onErrorMap(java.util.function.Function<? super java.lang.Throwable,? extends java.lang.Throwable>)
  - reactor.core.publisher.Flux.onErrorMap(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Function<? super java.lang.Throwable,? extends java.lang.Throwable>)
  - reactor.core.publisher.Flux.onErrorResume(java.util.function.Function<? super java.lang.Throwable,? extends org.reactivestreams.Publisher<? extends T>>)
  - reactor.core.publisher.Flux.onErrorResume(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Function<? super java.lang.Throwable,? extends org.reactivestreams.Publisher<? extends T>>)
  - reactor.core.publisher.Flux.onErrorReturn(T)
  - reactor.core.publisher.Flux.onErrorReturn(java.util.function.Predicate<? super java.lang.Throwable>,T)
  - reactor.core.publisher.Flux.onErrorStop()
  - reactor.core.publisher.Flux.onTerminateDetach()
  - reactor.core.publisher.Flux.or(org.reactivestreams.Publisher<? extends T>)
  - reactor.core.publisher.Flux.parallel()
  - reactor.core.publisher.Flux.parallel(int)
  - reactor.core.publisher.Flux.parallel(int,int)
  - reactor.core.publisher.Flux.publish()
  - reactor.core.publisher.Flux.publish(int)
  - reactor.core.publisher.Flux.publishNext()
  - reactor.core.publisher.Flux.publishOn(reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.publishOn(reactor.core.scheduler.Scheduler,boolean,int)
  - reactor.core.publisher.Flux.publishOn(reactor.core.scheduler.Scheduler,int)
  - reactor.core.publisher.Flux.range(int,int)
  - reactor.core.publisher.Flux.reduce(java.util.function.BiFunction<T,T,T>)
  - reactor.core.publisher.Flux.repeat()
  - reactor.core.publisher.Flux.repeat(java.util.function.BooleanSupplier)
  - reactor.core.publisher.Flux.repeat(long)
  - reactor.core.publisher.Flux.repeat(long,java.util.function.BooleanSupplier)
  - reactor.core.publisher.Flux.repeatWhen(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Long>,? extends org.reactivestreams.Publisher<?>>)
  - reactor.core.publisher.Flux.replay()
  - reactor.core.publisher.Flux.replay(int)
  - reactor.core.publisher.Flux.replay(int,java.time.Duration)
  - reactor.core.publisher.Flux.replay(int,java.time.Duration,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.replay(java.time.Duration)
  - reactor.core.publisher.Flux.replay(java.time.Duration,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.retry()
  - reactor.core.publisher.Flux.retry(java.util.function.Predicate<? super java.lang.Throwable>)
  - reactor.core.publisher.Flux.retry(long)
  - reactor.core.publisher.Flux.retry(long,java.util.function.Predicate<? super java.lang.Throwable>)
  - reactor.core.publisher.Flux.retryBackoff(long,java.time.Duration)
  - reactor.core.publisher.Flux.retryBackoff(long,java.time.Duration,java.time.Duration)
  - reactor.core.publisher.Flux.retryBackoff(long,java.time.Duration,java.time.Duration,double)
  - reactor.core.publisher.Flux.retryBackoff(long,java.time.Duration,java.time.Duration,double,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.retryBackoff(long,java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.retryWhen(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Throwable>,? extends org.reactivestreams.Publisher<?>>)
  - reactor.core.publisher.Flux.retryWhen(reactor.util.retry.Retry)
  - reactor.core.publisher.Flux.sample(java.time.Duration)
  - reactor.core.publisher.Flux.sampleFirst(java.time.Duration)
  - reactor.core.publisher.Flux.scan(java.util.function.BiFunction<T,T,T>)
  - reactor.core.publisher.Flux.share()
  - reactor.core.publisher.Flux.single()
  - reactor.core.publisher.Flux.single(T)
  - reactor.core.publisher.Flux.singleOrEmpty()
  - reactor.core.publisher.Flux.skip(java.time.Duration)
  - reactor.core.publisher.Flux.skip(java.time.Duration,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.skip(long)
  - reactor.core.publisher.Flux.skipLast(int)
  - reactor.core.publisher.Flux.skipUntil(java.util.function.Predicate<? super T>)
  - reactor.core.publisher.Flux.skipUntilOther(org.reactivestreams.Publisher<?>)
  - reactor.core.publisher.Flux.skipWhile(java.util.function.Predicate<? super T>)
  - reactor.core.publisher.Flux.sort()
  - reactor.core.publisher.Flux.sort(java.util.Comparator<? super T>)
  - reactor.core.publisher.Flux.startWith(T...)
  - reactor.core.publisher.Flux.startWith(java.lang.Iterable<? extends T>)
  - reactor.core.publisher.Flux.startWith(org.reactivestreams.Publisher<? extends T>)
  - reactor.core.publisher.Flux.subscribe()
  - reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>)
  - reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>)
  - reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable)
  - reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable,java.util.function.Consumer<? super org.reactivestreams.Subscription>)
  - reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable,reactor.util.context.Context)
  - reactor.core.publisher.Flux.subscribe(org.reactivestreams.Subscriber<? super T>)
  - reactor.core.publisher.Flux.subscribe(reactor.core.CoreSubscriber<? super T>)
  - reactor.core.publisher.Flux.subscribeOn(reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.subscribeOn(reactor.core.scheduler.Scheduler,boolean)
  - reactor.core.publisher.Flux.subscriberContext(java.util.function.Function<reactor.util.context.Context,reactor.util.context.Context>)
  - reactor.core.publisher.Flux.subscriberContext(reactor.util.context.Context)
  - reactor.core.publisher.Flux.switchIfEmpty(org.reactivestreams.Publisher<? extends T>)
  - reactor.core.publisher.Flux.tag(java.lang.String,java.lang.String)
  - reactor.core.publisher.Flux.take(java.time.Duration)
  - reactor.core.publisher.Flux.take(java.time.Duration,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.take(long)
  - reactor.core.publisher.Flux.takeLast(int)
  - reactor.core.publisher.Flux.takeUntil(java.util.function.Predicate<? super T>)
  - reactor.core.publisher.Flux.takeUntilOther(org.reactivestreams.Publisher<?>)
  - reactor.core.publisher.Flux.takeWhile(java.util.function.Predicate<? super T>)
  - reactor.core.publisher.Flux.then()
  - reactor.core.publisher.Flux.thenEmpty(org.reactivestreams.Publisher<java.lang.Void>)
  - reactor.core.publisher.Flux.timeout(java.time.Duration)
  - reactor.core.publisher.Flux.timeout(java.time.Duration,org.reactivestreams.Publisher<? extends T>)
  - reactor.core.publisher.Flux.timeout(java.time.Duration,org.reactivestreams.Publisher<? extends T>,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.timeout(java.time.Duration,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.timestamp()
  - reactor.core.publisher.Flux.timestamp(reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.toIterable()
  - reactor.core.publisher.Flux.toIterable(int)
  - reactor.core.publisher.Flux.toIterable(int,java.util.function.Supplier<java.util.Queue<T>>)
  - reactor.core.publisher.Flux.toStream()
  - reactor.core.publisher.Flux.toStream(int)
  - reactor.core.publisher.Flux.toString()
  - reactor.core.publisher.Flux.window(int)
  - reactor.core.publisher.Flux.window(int,int)
  - reactor.core.publisher.Flux.window(java.time.Duration)
  - reactor.core.publisher.Flux.window(java.time.Duration,java.time.Duration)
  - reactor.core.publisher.Flux.window(java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.window(java.time.Duration,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.window(org.reactivestreams.Publisher<?>)
  - reactor.core.publisher.Flux.windowTimeout(int,java.time.Duration)
  - reactor.core.publisher.Flux.windowTimeout(int,java.time.Duration,reactor.core.scheduler.Scheduler)
  - reactor.core.publisher.Flux.windowUntil(java.util.function.Predicate<T>)
  - reactor.core.publisher.Flux.windowUntil(java.util.function.Predicate<T>,boolean)
  - reactor.core.publisher.Flux.windowUntil(java.util.function.Predicate<T>,boolean,int)
  - reactor.core.publisher.Flux.windowWhile(java.util.function.Predicate<T>)
  - reactor.core.publisher.Flux.windowWhile(java.util.function.Predicate<T>,int)
- uid: com.azure.core.util.polling.PollerFlux.<T,U>create(java.time.Duration,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.BiFunction<com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<T>>,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<U>>)
  id: <T,U>create(java.time.Duration,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.BiFunction<com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<T>>,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<U>>)
  artifact: com.azure:azure-core:1.5.0
  parent: com.azure.core.util.polling.PollerFlux
  langs:
  - java
  name: <T,U>create(Duration pollInterval, Function<PollingContext<T>,Mono<PollResponse<T>>> activationOperation, Function<PollingContext<T>,Mono<PollResponse<T>>> pollOperation, BiFunction<PollingContext<T>,PollResponse<T>,Mono<T>> cancelOperation, Function<PollingContext<T>,Mono<U>> fetchResultOperation)
  nameWithType: PollerFlux<T,U>.<T,U>create(Duration pollInterval, Function<PollingContext<T>,Mono<PollResponse<T>>> activationOperation, Function<PollingContext<T>,Mono<PollResponse<T>>> pollOperation, BiFunction<PollingContext<T>,PollResponse<T>,Mono<T>> cancelOperation, Function<PollingContext<T>,Mono<U>> fetchResultOperation)
  fullName: com.azure.core.util.polling.PollerFlux<T,U>.<T,U>create(Duration pollInterval, Function<PollingContext<T>,Mono<PollResponse<T>>> activationOperation, Function<PollingContext<T>,Mono<PollResponse<T>>> pollOperation, BiFunction<PollingContext<T>,PollResponse<T>,Mono<T>> cancelOperation, Function<PollingContext<T>,Mono<U>> fetchResultOperation)
  overload: com.azure.core.util.polling.PollerFlux.create*
  type: Method
  package: com.azure.core.util.polling
  summary: Creates PollerFlux. This create method differs from the PollerFlux constructor in that the constructor uses an activationOperation which returns a Mono that emits result, the create method uses an activationOperation which returns a Mono that emits <xref uid="com.azure.core.util.polling.PollResponse" data-throw-if-not-resolved="false">PollResponse</xref>. The <xref uid="com.azure.core.util.polling.PollResponse" data-throw-if-not-resolved="false">PollResponse</xref> holds the result. If the <xref uid="com.azure.core.util.polling.PollResponse" data-throw-if-not-resolved="false">PollResponse</xref> from the activationOperation indicate that long running operation is completed then the pollOperation will not be called.
  syntax:
    content: public static PollerFlux<T,U> <T,U>create(Duration pollInterval, Function<PollingContext<T>,Mono<PollResponse<T>>> activationOperation, Function<PollingContext<T>,Mono<PollResponse<T>>> pollOperation, BiFunction<PollingContext<T>,PollResponse<T>,Mono<T>> cancelOperation, Function<PollingContext<T>,Mono<U>> fetchResultOperation)
    parameters:
    - id: pollInterval
      type: java.time.Duration
      description: the polling interval
    - id: activationOperation
      type: java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>
      description: >-
        the activation operation to activate (start) the long running operation.
             This operation will be invoked at most once across all subscriptions. This parameter is required.
             If there is no specific activation work to be done then invocation should return Mono.empty(),
             this operation will be called with a new <xref uid="com.azure.core.util.polling.PollingContext" data-throw-if-not-resolved="false">PollingContext</xref>.
    - id: pollOperation
      type: java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>
      description: >-
        the operation to poll the current state of long running operation. This parameter
             is required and the operation will be called with current <xref uid="com.azure.core.util.polling.PollingContext" data-throw-if-not-resolved="false">PollingContext</xref>.
    - id: cancelOperation
      type: java.util.function.BiFunction<com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<T>>
      description: >-
        a <xref uid="java.util.function.Function" data-throw-if-not-resolved="false">Function</xref> that represents the operation to cancel the long running operation
             if service supports cancellation. This parameter is required. If service does not support cancellation
             then the implementer should return Mono.error with an error message indicating absence of cancellation
             support. The operation will be called with current <xref uid="com.azure.core.util.polling.PollingContext" data-throw-if-not-resolved="false">PollingContext</xref>.
    - id: fetchResultOperation
      type: java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<U>>
      description: >-
        a <xref uid="java.util.function.Function" data-throw-if-not-resolved="false">Function</xref> that represents the  operation to retrieve final result of
             the long running operation if service support it. This parameter is required and operation will be called
             current <xref uid="com.azure.core.util.polling.PollingContext" data-throw-if-not-resolved="false">PollingContext</xref>. If service does not have an api to fetch final result and if final result
             is same as final poll response value then implementer can choose to simply return value from provided
             final poll response.
    return:
      type: com.azure.core.util.polling.PollerFlux<T,U>
      description: PollerFlux
- uid: com.azure.core.util.polling.PollerFlux.<T,U>error(java.lang.Exception)
  id: <T,U>error(java.lang.Exception)
  artifact: com.azure:azure-core:1.5.0
  parent: com.azure.core.util.polling.PollerFlux
  langs:
  - java
  name: <T,U>error(Exception ex)
  nameWithType: PollerFlux<T,U>.<T,U>error(Exception ex)
  fullName: com.azure.core.util.polling.PollerFlux<T,U>.<T,U>error(Exception ex)
  overload: com.azure.core.util.polling.PollerFlux.error*
  type: Method
  package: com.azure.core.util.polling
  summary: Creates a PollerFlux instance that returns an error on subscription.
  syntax:
    content: public static PollerFlux<T,U> <T,U>error(Exception ex)
    parameters:
    - id: ex
      type: java.lang.Exception
      description: The exception to be returned on subscription of this <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref>.
    return:
      type: com.azure.core.util.polling.PollerFlux<T,U>
      description: A poller flux instance that returns an error without emitting any data.
- uid: com.azure.core.util.polling.PollerFlux.PollerFlux(java.time.Duration,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<T>>,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.BiFunction<com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<T>>,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<U>>)
  id: PollerFlux(java.time.Duration,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<T>>,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.BiFunction<com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<T>>,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<U>>)
  artifact: com.azure:azure-core:1.5.0
  parent: com.azure.core.util.polling.PollerFlux
  langs:
  - java
  name: PollerFlux(Duration pollInterval, Function<PollingContext<T>,Mono<T>> activationOperation, Function<PollingContext<T>,Mono<PollResponse<T>>> pollOperation, BiFunction<PollingContext<T>,PollResponse<T>,Mono<T>> cancelOperation, Function<PollingContext<T>,Mono<U>> fetchResultOperation)
  nameWithType: PollerFlux<T,U>.PollerFlux(Duration pollInterval, Function<PollingContext<T>,Mono<T>> activationOperation, Function<PollingContext<T>,Mono<PollResponse<T>>> pollOperation, BiFunction<PollingContext<T>,PollResponse<T>,Mono<T>> cancelOperation, Function<PollingContext<T>,Mono<U>> fetchResultOperation)
  fullName: com.azure.core.util.polling.PollerFlux<T,U>.PollerFlux(Duration pollInterval, Function<PollingContext<T>,Mono<T>> activationOperation, Function<PollingContext<T>,Mono<PollResponse<T>>> pollOperation, BiFunction<PollingContext<T>,PollResponse<T>,Mono<T>> cancelOperation, Function<PollingContext<T>,Mono<U>> fetchResultOperation)
  overload: com.azure.core.util.polling.PollerFlux.PollerFlux*
  type: Constructor
  package: com.azure.core.util.polling
  summary: Creates PollerFlux.
  syntax:
    content: public PollerFlux(Duration pollInterval, Function<PollingContext<T>,Mono<T>> activationOperation, Function<PollingContext<T>,Mono<PollResponse<T>>> pollOperation, BiFunction<PollingContext<T>,PollResponse<T>,Mono<T>> cancelOperation, Function<PollingContext<T>,Mono<U>> fetchResultOperation)
    parameters:
    - id: pollInterval
      type: java.time.Duration
      description: the polling interval
    - id: activationOperation
      type: java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<T>>
      description: >-
        the activation operation to activate (start) the long running operation.
             This operation will be invoked at most once across all subscriptions. This parameter is required.
             If there is no specific activation work to be done then invocation should return Mono.empty(),
             this operation will be called with a new <xref uid="com.azure.core.util.polling.PollingContext" data-throw-if-not-resolved="false">PollingContext</xref>.
    - id: pollOperation
      type: java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>
      description: >-
        the operation to poll the current state of long running operation. This parameter
             is required and the operation will be called with current <xref uid="com.azure.core.util.polling.PollingContext" data-throw-if-not-resolved="false">PollingContext</xref>.
    - id: cancelOperation
      type: java.util.function.BiFunction<com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<T>>
      description: >-
        a <xref uid="java.util.function.Function" data-throw-if-not-resolved="false">Function</xref> that represents the operation to cancel the long running operation
             if service supports cancellation. This parameter is required. If service does not support cancellation
             then the implementer should return Mono.error with an error message indicating absence of cancellation
             support. The operation will be called with current <xref uid="com.azure.core.util.polling.PollingContext" data-throw-if-not-resolved="false">PollingContext</xref>.
    - id: fetchResultOperation
      type: java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<U>>
      description: >-
        a <xref uid="java.util.function.Function" data-throw-if-not-resolved="false">Function</xref> that represents the  operation to retrieve final result of
             the long running operation if service support it. This parameter is required and operation will be called
             current <xref uid="com.azure.core.util.polling.PollingContext" data-throw-if-not-resolved="false">PollingContext</xref>. If service does not have an api to fetch final result and if final result
             is same as final poll response value then implementer can choose to simply return value from provided
             final poll response.
- uid: com.azure.core.util.polling.PollerFlux.PollerFlux(java.time.Duration,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.BiFunction<com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<T>>,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<U>>,boolean)
  id: PollerFlux(java.time.Duration,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.BiFunction<com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<T>>,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<U>>,boolean)
  artifact: com.azure:azure-core:1.5.0
  parent: com.azure.core.util.polling.PollerFlux
  langs:
  - java
  name: PollerFlux(Duration pollInterval, Function<PollingContext<T>,Mono<PollResponse<T>>> activationOperation, Function<PollingContext<T>,Mono<PollResponse<T>>> pollOperation, BiFunction<PollingContext<T>,PollResponse<T>,Mono<T>> cancelOperation, Function<PollingContext<T>,Mono<U>> fetchResultOperation, boolean ignored)
  nameWithType: PollerFlux<T,U>.PollerFlux(Duration pollInterval, Function<PollingContext<T>,Mono<PollResponse<T>>> activationOperation, Function<PollingContext<T>,Mono<PollResponse<T>>> pollOperation, BiFunction<PollingContext<T>,PollResponse<T>,Mono<T>> cancelOperation, Function<PollingContext<T>,Mono<U>> fetchResultOperation, boolean ignored)
  fullName: com.azure.core.util.polling.PollerFlux<T,U>.PollerFlux(Duration pollInterval, Function<PollingContext<T>,Mono<PollResponse<T>>> activationOperation, Function<PollingContext<T>,Mono<PollResponse<T>>> pollOperation, BiFunction<PollingContext<T>,PollResponse<T>,Mono<T>> cancelOperation, Function<PollingContext<T>,Mono<U>> fetchResultOperation, boolean ignored)
  overload: com.azure.core.util.polling.PollerFlux.PollerFlux*
  type: Constructor
  package: com.azure.core.util.polling
  syntax:
    content: private PollerFlux(Duration pollInterval, Function<PollingContext<T>,Mono<PollResponse<T>>> activationOperation, Function<PollingContext<T>,Mono<PollResponse<T>>> pollOperation, BiFunction<PollingContext<T>,PollResponse<T>,Mono<T>> cancelOperation, Function<PollingContext<T>,Mono<U>> fetchResultOperation, boolean ignored)
    parameters:
    - id: pollInterval
      type: java.time.Duration
    - id: activationOperation
      type: java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>
    - id: pollOperation
      type: java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>
    - id: cancelOperation
      type: java.util.function.BiFunction<com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<T>>
    - id: fetchResultOperation
      type: java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<U>>
    - id: ignored
      type: boolean
- uid: com.azure.core.util.polling.PollerFlux.getSyncPoller()
  id: getSyncPoller()
  artifact: com.azure:azure-core:1.5.0
  parent: com.azure.core.util.polling.PollerFlux
  langs:
  - java
  name: getSyncPoller()
  nameWithType: PollerFlux<T,U>.getSyncPoller()
  fullName: com.azure.core.util.polling.PollerFlux<T,U>.getSyncPoller()
  overload: com.azure.core.util.polling.PollerFlux.getSyncPoller*
  type: Method
  package: com.azure.core.util.polling
  syntax:
    content: public SyncPoller<T,U> getSyncPoller()
    return:
      type: com.azure.core.util.polling.SyncPoller<T,U>
      description: a synchronous blocking poller.
- uid: com.azure.core.util.polling.PollerFlux.subscribe(reactor.core.CoreSubscriber<? super com.azure.core.util.polling.AsyncPollResponse<T,U>>)
  id: subscribe(reactor.core.CoreSubscriber<? super com.azure.core.util.polling.AsyncPollResponse<T,U>>)
  artifact: com.azure:azure-core:1.5.0
  parent: com.azure.core.util.polling.PollerFlux
  langs:
  - java
  name: subscribe(CoreSubscriber<? super AsyncPollResponse<T,U>> actual)
  nameWithType: PollerFlux<T,U>.subscribe(CoreSubscriber<? super AsyncPollResponse<T,U>> actual)
  fullName: com.azure.core.util.polling.PollerFlux<T,U>.subscribe(CoreSubscriber<? super AsyncPollResponse<T,U>> actual)
  overload: com.azure.core.util.polling.PollerFlux.subscribe*
  type: Method
  package: com.azure.core.util.polling
  syntax:
    content: public void subscribe(CoreSubscriber<? super AsyncPollResponse<T,U>> actual)
    parameters:
    - id: actual
      type: reactor.core.CoreSubscriber<? super com.azure.core.util.polling.AsyncPollResponse<T,U>>
references:
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<T>>
  spec.java:
  - uid: java.util.function.Function
    name: Function
    fullName: java.util.function.Function
  - name: <
    fullName: <
  - uid: com.azure.core.util.polling.PollingContext
    name: PollingContext
    fullName: com.azure.core.util.polling.PollingContext
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: ','
    fullName: ','
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>
  spec.java:
  - uid: java.util.function.Function
    name: Function
    fullName: java.util.function.Function
  - name: <
    fullName: <
  - uid: com.azure.core.util.polling.PollingContext
    name: PollingContext
    fullName: com.azure.core.util.polling.PollingContext
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: ','
    fullName: ','
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.util.polling.PollResponse
    name: PollResponse
    fullName: com.azure.core.util.polling.PollResponse
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: java.util.function.BiFunction<com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<T>>
  spec.java:
  - uid: java.util.function.BiFunction
    name: BiFunction
    fullName: java.util.function.BiFunction
  - name: <
    fullName: <
  - uid: com.azure.core.util.polling.PollingContext
    name: PollingContext
    fullName: com.azure.core.util.polling.PollingContext
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: ','
    fullName: ','
  - uid: com.azure.core.util.polling.PollResponse
    name: PollResponse
    fullName: com.azure.core.util.polling.PollResponse
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: ','
    fullName: ','
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<U>>
  spec.java:
  - uid: java.util.function.Function
    name: Function
    fullName: java.util.function.Function
  - name: <
    fullName: <
  - uid: com.azure.core.util.polling.PollingContext
    name: PollingContext
    fullName: com.azure.core.util.polling.PollingContext
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: ','
    fullName: ','
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: U
    name: U
    fullName: U
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.polling.PollerFlux.PollerFlux*
  name: PollerFlux
  nameWithType: PollerFlux<T,U>.PollerFlux
  fullName: com.azure.core.util.polling.PollerFlux<T,U>.PollerFlux
  package: com.azure.core.util.polling
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.core.util.polling.PollerFlux<T,U>
  spec.java:
  - uid: com.azure.core.util.polling.PollerFlux
    name: PollerFlux
    fullName: com.azure.core.util.polling.PollerFlux
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: ','
    fullName: ','
  - uid: U
    name: U
    fullName: U
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.polling.PollerFlux.create*
  name: <T,U>create
  nameWithType: PollerFlux<T,U>.<T,U>create
  fullName: com.azure.core.util.polling.PollerFlux<T,U>.<T,U>create
  package: com.azure.core.util.polling
- uid: java.lang.Exception
  spec.java:
  - uid: java.lang.Exception
    name: Exception
    fullName: java.lang.Exception
- uid: com.azure.core.util.polling.PollerFlux.error*
  name: <T,U>error
  nameWithType: PollerFlux<T,U>.<T,U>error
  fullName: com.azure.core.util.polling.PollerFlux<T,U>.<T,U>error
  package: com.azure.core.util.polling
- uid: reactor.core.CoreSubscriber<? super com.azure.core.util.polling.AsyncPollResponse<T,U>>
  spec.java:
  - uid: reactor.core.CoreSubscriber
    name: CoreSubscriber
    fullName: reactor.core.CoreSubscriber
  - name: <
    fullName: <
  - uid: '? super com.azure.core.util.polling.AsyncPollResponse'
    name: AsyncPollResponse
    fullName: '? super com.azure.core.util.polling.AsyncPollResponse'
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: ','
    fullName: ','
  - uid: U
    name: U
    fullName: U
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.polling.PollerFlux.subscribe*
  name: subscribe
  nameWithType: PollerFlux<T,U>.subscribe
  fullName: com.azure.core.util.polling.PollerFlux<T,U>.subscribe
  package: com.azure.core.util.polling
- uid: com.azure.core.util.polling.SyncPoller<T,U>
  spec.java:
  - uid: com.azure.core.util.polling.SyncPoller
    name: SyncPoller
    fullName: com.azure.core.util.polling.SyncPoller
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: ','
    fullName: ','
  - uid: U
    name: U
    fullName: U
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.polling.PollerFlux.getSyncPoller*
  name: getSyncPoller
  nameWithType: PollerFlux<T,U>.getSyncPoller
  fullName: com.azure.core.util.polling.PollerFlux<T,U>.getSyncPoller
  package: com.azure.core.util.polling
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: U
  name: U
  nameWithType: U
  fullName: U
- uid: reactor.core.publisher.Flux<com.azure.core.util.polling.AsyncPollResponse<T,U>>
  name: Flux<AsyncPollResponse<T,U>>
  nameWithType: Flux<AsyncPollResponse<T,U>>
  fullName: reactor.core.publisher.Flux<com.azure.core.util.polling.AsyncPollResponse<T,U>>
- uid: reactor.core.publisher.Flux.<T1,T2>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>)
  name: Flux.<T1,T2>zip(Publisher<? extends T1>,Publisher<? extends T2>)
  nameWithType: Flux.<T1,T2>zip(Publisher<? extends T1>,Publisher<? extends T2>)
  fullName: reactor.core.publisher.Flux.<T1,T2>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>)
- uid: reactor.core.publisher.Flux.expand(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>,int)
  name: Flux.expand(Function<? super T,? extends Publisher<? extends T>>,int)
  nameWithType: Flux.expand(Function<? super T,? extends Publisher<? extends T>>,int)
  fullName: reactor.core.publisher.Flux.expand(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>,int)
- uid: reactor.core.publisher.Flux.<T>onLastAssembly(reactor.core.publisher.Flux<T>)
  name: Flux.<T>onLastAssembly(Flux<T>)
  nameWithType: Flux.<T>onLastAssembly(Flux<T>)
  fullName: reactor.core.publisher.Flux.<T>onLastAssembly(reactor.core.publisher.Flux<T>)
- uid: reactor.core.publisher.Flux.<R>flatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>,int)
  name: Flux.<R>flatMapIterable(Function<? super T,? extends Iterable<? extends R>>,int)
  nameWithType: Flux.<R>flatMapIterable(Function<? super T,? extends Iterable<? extends R>>,int)
  fullName: reactor.core.publisher.Flux.<R>flatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>,int)
- uid: reactor.core.publisher.Flux.skipLast(int)
  name: Flux.skipLast(int)
  nameWithType: Flux.skipLast(int)
  fullName: reactor.core.publisher.Flux.skipLast(int)
- uid: reactor.core.publisher.Flux.delayElements(java.time.Duration)
  name: Flux.delayElements(Duration)
  nameWithType: Flux.delayElements(Duration)
  fullName: reactor.core.publisher.Flux.delayElements(java.time.Duration)
- uid: reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,org.reactivestreams.Publisher<? extends T6>,java.util.function.Function<java.lang.Object[],V>)
  name: Flux.<T1,T2,T3,T4,T5,T6,V>combineLatest(Publisher<? extends T1>,Publisher<? extends T2>,Publisher<? extends T3>,Publisher<? extends T4>,Publisher<? extends T5>,Publisher<? extends T6>,Function<Object[],V>)
  nameWithType: Flux.<T1,T2,T3,T4,T5,T6,V>combineLatest(Publisher<? extends T1>,Publisher<? extends T2>,Publisher<? extends T3>,Publisher<? extends T4>,Publisher<? extends T5>,Publisher<? extends T6>,Function<Object[],V>)
  fullName: reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,org.reactivestreams.Publisher<? extends T6>,java.util.function.Function<java.lang.Object[],V>)
- uid: reactor.core.publisher.Flux.<A>reduceWith(java.util.function.Supplier<A>,java.util.function.BiFunction<A,? super T,A>)
  name: Flux.<A>reduceWith(Supplier<A>,BiFunction<A,? super T,A>)
  nameWithType: Flux.<A>reduceWith(Supplier<A>,BiFunction<A,? super T,A>)
  fullName: reactor.core.publisher.Flux.<A>reduceWith(java.util.function.Supplier<A>,java.util.function.BiFunction<A,? super T,A>)
- uid: reactor.core.publisher.Flux.index()
  name: Flux.index()
  nameWithType: Flux.index()
  fullName: reactor.core.publisher.Flux.index()
- uid: reactor.core.publisher.Flux.log(java.lang.String,java.util.logging.Level,boolean,reactor.core.publisher.SignalType...)
  name: Flux.log(String,Level,boolean,SignalType)
  nameWithType: Flux.log(String,Level,boolean,SignalType)
  fullName: reactor.core.publisher.Flux.log(java.lang.String,java.util.logging.Level,boolean,reactor.core.publisher.SignalType...)
- uid: reactor.core.publisher.Flux.<K,V>collectMultimap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  name: Flux.<K,V>collectMultimap(Function<? super T,? extends K>,Function<? super T,? extends V>)
  nameWithType: Flux.<K,V>collectMultimap(Function<? super T,? extends K>,Function<? super T,? extends V>)
  fullName: reactor.core.publisher.Flux.<K,V>collectMultimap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: reactor.core.publisher.Flux.publishOn(reactor.core.scheduler.Scheduler)
  name: Flux.publishOn(Scheduler)
  nameWithType: Flux.publishOn(Scheduler)
  fullName: reactor.core.publisher.Flux.publishOn(reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.windowUntil(java.util.function.Predicate<T>,boolean,int)
  name: Flux.windowUntil(Predicate<T>,boolean,int)
  nameWithType: Flux.windowUntil(Predicate<T>,boolean,int)
  fullName: reactor.core.publisher.Flux.windowUntil(java.util.function.Predicate<T>,boolean,int)
- uid: reactor.core.publisher.Flux.filterWhen(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<java.lang.Boolean>>,int)
  name: Flux.filterWhen(Function<? super T,? extends Publisher<Boolean>>,int)
  nameWithType: Flux.filterWhen(Function<? super T,? extends Publisher<Boolean>>,int)
  fullName: reactor.core.publisher.Flux.filterWhen(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<java.lang.Boolean>>,int)
- uid: reactor.core.publisher.Flux.subscribe()
  name: Flux.subscribe()
  nameWithType: Flux.subscribe()
  fullName: reactor.core.publisher.Flux.subscribe()
- uid: reactor.core.publisher.Flux.window(int,int)
  name: Flux.window(int,int)
  nameWithType: Flux.window(int,int)
  fullName: reactor.core.publisher.Flux.window(int,int)
- uid: reactor.core.publisher.Flux.<T>fromIterable(java.lang.Iterable<? extends T>)
  name: Flux.<T>fromIterable(Iterable<? extends T>)
  nameWithType: Flux.<T>fromIterable(Iterable<? extends T>)
  fullName: reactor.core.publisher.Flux.<T>fromIterable(java.lang.Iterable<? extends T>)
- uid: reactor.core.publisher.Flux.<C>buffer(org.reactivestreams.Publisher<?>,java.util.function.Supplier<C>)
  name: Flux.<C>buffer(Publisher<?>,Supplier<C>)
  nameWithType: Flux.<C>buffer(Publisher<?>,Supplier<C>)
  fullName: reactor.core.publisher.Flux.<C>buffer(org.reactivestreams.Publisher<?>,java.util.function.Supplier<C>)
- uid: reactor.core.publisher.Flux.limitRequest(long)
  name: Flux.limitRequest(long)
  nameWithType: Flux.limitRequest(long)
  fullName: reactor.core.publisher.Flux.limitRequest(long)
- uid: reactor.core.publisher.Flux.singleOrEmpty()
  name: Flux.singleOrEmpty()
  nameWithType: Flux.singleOrEmpty()
  fullName: reactor.core.publisher.Flux.singleOrEmpty()
- uid: reactor.core.publisher.Flux.replay(java.time.Duration)
  name: Flux.replay(Duration)
  nameWithType: Flux.replay(Duration)
  fullName: reactor.core.publisher.Flux.replay(java.time.Duration)
- uid: reactor.core.publisher.Flux.<U>sampleTimeout(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<U>>,int)
  name: Flux.<U>sampleTimeout(Function<? super T,? extends Publisher<U>>,int)
  nameWithType: Flux.<U>sampleTimeout(Function<? super T,? extends Publisher<U>>,int)
  fullName: reactor.core.publisher.Flux.<U>sampleTimeout(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<U>>,int)
- uid: reactor.core.publisher.Flux.window(int)
  name: Flux.window(int)
  nameWithType: Flux.window(int)
  fullName: reactor.core.publisher.Flux.window(int)
- uid: reactor.core.publisher.Flux.buffer(java.time.Duration)
  name: Flux.buffer(Duration)
  nameWithType: Flux.buffer(Duration)
  fullName: reactor.core.publisher.Flux.buffer(java.time.Duration)
- uid: reactor.core.publisher.Flux.<T>create(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>,reactor.core.publisher.FluxSink.OverflowStrategy)
  name: Flux.<T>create(Consumer<? super FluxSink<T>>,FluxSink.OverflowStrategy)
  nameWithType: Flux.<T>create(Consumer<? super FluxSink<T>>,FluxSink.OverflowStrategy)
  fullName: reactor.core.publisher.Flux.<T>create(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>,reactor.core.publisher.FluxSink.OverflowStrategy)
- uid: reactor.core.publisher.Flux.<U,V>timeout(org.reactivestreams.Publisher<U>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<V>>)
  name: Flux.<U,V>timeout(Publisher<U>,Function<? super T,? extends Publisher<V>>)
  nameWithType: Flux.<U,V>timeout(Publisher<U>,Function<? super T,? extends Publisher<V>>)
  fullName: reactor.core.publisher.Flux.<U,V>timeout(org.reactivestreams.Publisher<U>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<V>>)
- uid: reactor.core.publisher.Flux.<U,V>timeout(org.reactivestreams.Publisher<U>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<V>>,org.reactivestreams.Publisher<? extends T>)
  name: Flux.<U,V>timeout(Publisher<U>,Function<? super T,? extends Publisher<V>>,Publisher<? extends T>)
  nameWithType: Flux.<U,V>timeout(Publisher<U>,Function<? super T,? extends Publisher<V>>,Publisher<? extends T>)
  fullName: reactor.core.publisher.Flux.<U,V>timeout(org.reactivestreams.Publisher<U>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<V>>,org.reactivestreams.Publisher<? extends T>)
- uid: reactor.core.publisher.Flux.onBackpressureBuffer(int,java.util.function.Consumer<? super T>)
  name: Flux.onBackpressureBuffer(int,Consumer<? super T>)
  nameWithType: Flux.onBackpressureBuffer(int,Consumer<? super T>)
  fullName: reactor.core.publisher.Flux.onBackpressureBuffer(int,java.util.function.Consumer<? super T>)
- uid: reactor.core.publisher.Flux.log(java.lang.String)
  name: Flux.log(String)
  nameWithType: Flux.log(String)
  fullName: reactor.core.publisher.Flux.log(java.lang.String)
- uid: reactor.core.publisher.Flux.takeUntilOther(org.reactivestreams.Publisher<?>)
  name: Flux.takeUntilOther(Publisher<?>)
  nameWithType: Flux.takeUntilOther(Publisher<?>)
  fullName: reactor.core.publisher.Flux.takeUntilOther(org.reactivestreams.Publisher<?>)
- uid: reactor.core.publisher.Flux.repeat(java.util.function.BooleanSupplier)
  name: Flux.repeat(BooleanSupplier)
  nameWithType: Flux.repeat(BooleanSupplier)
  fullName: reactor.core.publisher.Flux.repeat(java.util.function.BooleanSupplier)
- uid: reactor.core.publisher.Flux.retryBackoff(long,java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)
  name: Flux.retryBackoff(long,Duration,Duration,Scheduler)
  nameWithType: Flux.retryBackoff(long,Duration,Duration,Scheduler)
  fullName: reactor.core.publisher.Flux.retryBackoff(long,java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.<T,V>combineLatest(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>>,int,java.util.function.Function<java.lang.Object[],V>)
  name: Flux.<T,V>combineLatest(Iterable<? extends Publisher<? extends T>>,int,Function<Object[],V>)
  nameWithType: Flux.<T,V>combineLatest(Iterable<? extends Publisher<? extends T>>,int,Function<Object[],V>)
  fullName: reactor.core.publisher.Flux.<T,V>combineLatest(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>>,int,java.util.function.Function<java.lang.Object[],V>)
- uid: reactor.core.publisher.Flux.timeout(java.time.Duration,org.reactivestreams.Publisher<? extends T>)
  name: Flux.timeout(Duration,Publisher<? extends T>)
  nameWithType: Flux.timeout(Duration,Publisher<? extends T>)
  fullName: reactor.core.publisher.Flux.timeout(java.time.Duration,org.reactivestreams.Publisher<? extends T>)
- uid: reactor.core.publisher.Flux.buffer()
  name: Flux.buffer()
  nameWithType: Flux.buffer()
  fullName: reactor.core.publisher.Flux.buffer()
- uid: reactor.core.publisher.Flux.<K>collectMultimap(java.util.function.Function<? super T,? extends K>)
  name: Flux.<K>collectMultimap(Function<? super T,? extends K>)
  nameWithType: Flux.<K>collectMultimap(Function<? super T,? extends K>)
  fullName: reactor.core.publisher.Flux.<K>collectMultimap(java.util.function.Function<? super T,? extends K>)
- uid: reactor.core.publisher.Flux.toIterable()
  name: Flux.toIterable()
  nameWithType: Flux.toIterable()
  fullName: reactor.core.publisher.Flux.toIterable()
- uid: reactor.core.publisher.Flux.<V>transformDeferred(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<V>>)
  name: Flux.<V>transformDeferred(Function<? super Flux<T>,? extends Publisher<V>>)
  nameWithType: Flux.<V>transformDeferred(Function<? super Flux<T>,? extends Publisher<V>>)
  fullName: reactor.core.publisher.Flux.<V>transformDeferred(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<V>>)
- uid: reactor.core.publisher.Flux.onErrorContinue(java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)
  name: Flux.onErrorContinue(BiConsumer<Throwable,Object>)
  nameWithType: Flux.onErrorContinue(BiConsumer<Throwable,Object>)
  fullName: reactor.core.publisher.Flux.onErrorContinue(java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)
- uid: reactor.core.publisher.Flux.<T,V>combineLatest(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<java.lang.Object[],V>)
  name: Flux.<T,V>combineLatest(Iterable<? extends Publisher<? extends T>>,Function<Object[],V>)
  nameWithType: Flux.<T,V>combineLatest(Iterable<? extends Publisher<? extends T>>,Function<Object[],V>)
  fullName: reactor.core.publisher.Flux.<T,V>combineLatest(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<java.lang.Object[],V>)
- uid: reactor.core.publisher.Flux.<V>compose(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<V>>)
  name: Flux.<V>compose(Function<? super Flux<T>,? extends Publisher<V>>)
  nameWithType: Flux.<V>compose(Function<? super Flux<T>,? extends Publisher<V>>)
  fullName: reactor.core.publisher.Flux.<V>compose(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<V>>)
- uid: reactor.core.publisher.Flux.count()
  name: Flux.count()
  nameWithType: Flux.count()
  fullName: reactor.core.publisher.Flux.count()
- uid: reactor.core.publisher.Flux.skip(java.time.Duration,reactor.core.scheduler.Scheduler)
  name: Flux.skip(Duration,Scheduler)
  nameWithType: Flux.skip(Duration,Scheduler)
  fullName: reactor.core.publisher.Flux.skip(java.time.Duration,reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.<V>bufferUntilChanged()
  name: Flux.<V>bufferUntilChanged()
  nameWithType: Flux.<V>bufferUntilChanged()
  fullName: reactor.core.publisher.Flux.<V>bufferUntilChanged()
- uid: reactor.core.publisher.Flux.toStream()
  name: Flux.toStream()
  nameWithType: Flux.toStream()
  fullName: reactor.core.publisher.Flux.toStream()
- uid: reactor.core.publisher.Flux.blockLast()
  name: Flux.blockLast()
  nameWithType: Flux.blockLast()
  fullName: reactor.core.publisher.Flux.blockLast()
- uid: reactor.core.publisher.Flux.<T>mergeSequentialDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int,int)
  name: Flux.<T>mergeSequentialDelayError(Publisher<? extends Publisher<? extends T>>,int,int)
  nameWithType: Flux.<T>mergeSequentialDelayError(Publisher<? extends Publisher<? extends T>>,int,int)
  fullName: reactor.core.publisher.Flux.<T>mergeSequentialDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int,int)
- uid: reactor.core.publisher.Flux.or(org.reactivestreams.Publisher<? extends T>)
  name: Flux.or(Publisher<? extends T>)
  nameWithType: Flux.or(Publisher<? extends T>)
  fullName: reactor.core.publisher.Flux.or(org.reactivestreams.Publisher<? extends T>)
- uid: reactor.core.publisher.Flux.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.BiFunction<? super D,? super java.lang.Throwable,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)
  name: Flux.<T,D>usingWhen(Publisher<D>,Function<? super D,? extends Publisher<? extends T>>,Function<? super D,? extends Publisher<?>>,BiFunction<? super D,? super Throwable,? extends Publisher<?>>,Function<? super D,? extends Publisher<?>>)
  nameWithType: Flux.<T,D>usingWhen(Publisher<D>,Function<? super D,? extends Publisher<? extends T>>,Function<? super D,? extends Publisher<?>>,BiFunction<? super D,? super Throwable,? extends Publisher<?>>,Function<? super D,? extends Publisher<?>>)
  fullName: reactor.core.publisher.Flux.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.BiFunction<? super D,? super java.lang.Throwable,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)
- uid: reactor.core.publisher.Flux.retryBackoff(long,java.time.Duration,java.time.Duration)
  name: Flux.retryBackoff(long,Duration,Duration)
  nameWithType: Flux.retryBackoff(long,Duration,Duration)
  fullName: reactor.core.publisher.Flux.retryBackoff(long,java.time.Duration,java.time.Duration)
- uid: reactor.core.publisher.Flux.reduce(java.util.function.BiFunction<T,T,T>)
  name: Flux.reduce(BiFunction<T,T,T>)
  nameWithType: Flux.reduce(BiFunction<T,T,T>)
  fullName: reactor.core.publisher.Flux.reduce(java.util.function.BiFunction<T,T,T>)
- uid: reactor.core.publisher.Flux.<R>flatMapSequential(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,int)
  name: Flux.<R>flatMapSequential(Function<? super T,? extends Publisher<? extends R>>,int)
  nameWithType: Flux.<R>flatMapSequential(Function<? super T,? extends Publisher<? extends R>>,int)
  fullName: reactor.core.publisher.Flux.<R>flatMapSequential(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,int)
- uid: reactor.core.publisher.Flux.<T>concatDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)
  name: Flux.<T>concatDelayError(Publisher<? extends Publisher<? extends T>>)
  nameWithType: Flux.<T>concatDelayError(Publisher<? extends Publisher<? extends T>>)
  fullName: reactor.core.publisher.Flux.<T>concatDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)
- uid: reactor.core.publisher.Flux.cache(java.time.Duration,reactor.core.scheduler.Scheduler)
  name: Flux.cache(Duration,Scheduler)
  nameWithType: Flux.cache(Duration,Scheduler)
  fullName: reactor.core.publisher.Flux.cache(java.time.Duration,reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.<C>buffer(int,int,java.util.function.Supplier<C>)
  name: Flux.<C>buffer(int,int,Supplier<C>)
  nameWithType: Flux.<C>buffer(int,int,Supplier<C>)
  fullName: reactor.core.publisher.Flux.<C>buffer(int,int,java.util.function.Supplier<C>)
- uid: reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,org.reactivestreams.Publisher<? extends T6>)
  name: Flux.<T1,T2,T3,T4,T5,T6>zip(Publisher<? extends T1>,Publisher<? extends T2>,Publisher<? extends T3>,Publisher<? extends T4>,Publisher<? extends T5>,Publisher<? extends T6>)
  nameWithType: Flux.<T1,T2,T3,T4,T5,T6>zip(Publisher<? extends T1>,Publisher<? extends T2>,Publisher<? extends T3>,Publisher<? extends T4>,Publisher<? extends T5>,Publisher<? extends T6>)
  fullName: reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,org.reactivestreams.Publisher<? extends T6>)
- uid: reactor.core.publisher.Flux.cache(int,java.time.Duration)
  name: Flux.cache(int,Duration)
  nameWithType: Flux.cache(int,Duration)
  fullName: reactor.core.publisher.Flux.cache(int,java.time.Duration)
- uid: reactor.core.publisher.Flux.distinctUntilChanged()
  name: Flux.distinctUntilChanged()
  nameWithType: Flux.distinctUntilChanged()
  fullName: reactor.core.publisher.Flux.distinctUntilChanged()
- uid: reactor.core.publisher.Flux.<V>concatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>)
  name: Flux.<V>concatMap(Function<? super T,? extends Publisher<? extends V>>)
  nameWithType: Flux.<V>concatMap(Function<? super T,? extends Publisher<? extends V>>)
  fullName: reactor.core.publisher.Flux.<V>concatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>)
- uid: reactor.core.publisher.Flux.<V>distinct(java.util.function.Function<? super T,? extends V>)
  name: Flux.<V>distinct(Function<? super T,? extends V>)
  nameWithType: Flux.<V>distinct(Function<? super T,? extends V>)
  fullName: reactor.core.publisher.Flux.<V>distinct(java.util.function.Function<? super T,? extends V>)
- uid: reactor.core.publisher.Flux.<V>flatMapDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int,int)
  name: Flux.<V>flatMapDelayError(Function<? super T,? extends Publisher<? extends V>>,int,int)
  nameWithType: Flux.<V>flatMapDelayError(Function<? super T,? extends Publisher<? extends V>>,int,int)
  fullName: reactor.core.publisher.Flux.<V>flatMapDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int,int)
- uid: reactor.core.publisher.Flux.window(org.reactivestreams.Publisher<?>)
  name: Flux.window(Publisher<?>)
  nameWithType: Flux.window(Publisher<?>)
  fullName: reactor.core.publisher.Flux.window(org.reactivestreams.Publisher<?>)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: reactor.core.publisher.Flux.<T>switchOnNext(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int)
  name: Flux.<T>switchOnNext(Publisher<? extends Publisher<? extends T>>,int)
  nameWithType: Flux.<T>switchOnNext(Publisher<? extends Publisher<? extends T>>,int)
  fullName: reactor.core.publisher.Flux.<T>switchOnNext(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int)
- uid: reactor.core.publisher.Flux.windowTimeout(int,java.time.Duration,reactor.core.scheduler.Scheduler)
  name: Flux.windowTimeout(int,Duration,Scheduler)
  nameWithType: Flux.windowTimeout(int,Duration,Scheduler)
  fullName: reactor.core.publisher.Flux.windowTimeout(int,java.time.Duration,reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.<R>publish(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<? extends R>>)
  name: Flux.<R>publish(Function<? super Flux<T>,? extends Publisher<? extends R>>)
  nameWithType: Flux.<R>publish(Function<? super Flux<T>,? extends Publisher<? extends R>>)
  fullName: reactor.core.publisher.Flux.<R>publish(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<? extends R>>)
- uid: reactor.core.publisher.Flux.retryWhen(reactor.util.retry.Retry)
  name: Flux.retryWhen(Retry)
  nameWithType: Flux.retryWhen(Retry)
  fullName: reactor.core.publisher.Flux.retryWhen(reactor.util.retry.Retry)
- uid: reactor.core.publisher.Flux.elapsed()
  name: Flux.elapsed()
  nameWithType: Flux.elapsed()
  fullName: reactor.core.publisher.Flux.elapsed()
- uid: reactor.core.publisher.Flux.log(java.lang.String,java.util.logging.Level,reactor.core.publisher.SignalType...)
  name: Flux.log(String,Level,SignalType)
  nameWithType: Flux.log(String,Level,SignalType)
  fullName: reactor.core.publisher.Flux.log(java.lang.String,java.util.logging.Level,reactor.core.publisher.SignalType...)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: reactor.core.publisher.Flux.doOnError(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Consumer<? super java.lang.Throwable>)
  name: Flux.doOnError(Predicate<? super Throwable>,Consumer<? super Throwable>)
  nameWithType: Flux.doOnError(Predicate<? super Throwable>,Consumer<? super Throwable>)
  fullName: reactor.core.publisher.Flux.doOnError(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Consumer<? super java.lang.Throwable>)
- uid: reactor.core.publisher.Flux.doOnTerminate(java.lang.Runnable)
  name: Flux.doOnTerminate(Runnable)
  nameWithType: Flux.doOnTerminate(Runnable)
  fullName: reactor.core.publisher.Flux.doOnTerminate(java.lang.Runnable)
- uid: reactor.core.publisher.Flux.doOnSubscribe(java.util.function.Consumer<? super org.reactivestreams.Subscription>)
  name: Flux.doOnSubscribe(Consumer<? super Subscription>)
  nameWithType: Flux.doOnSubscribe(Consumer<? super Subscription>)
  fullName: reactor.core.publisher.Flux.doOnSubscribe(java.util.function.Consumer<? super org.reactivestreams.Subscription>)
- uid: reactor.core.publisher.Flux.publishOn(reactor.core.scheduler.Scheduler,int)
  name: Flux.publishOn(Scheduler,int)
  nameWithType: Flux.publishOn(Scheduler,int)
  fullName: reactor.core.publisher.Flux.publishOn(reactor.core.scheduler.Scheduler,int)
- uid: reactor.core.publisher.Flux.<R>concatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>,int)
  name: Flux.<R>concatMapIterable(Function<? super T,? extends Iterable<? extends R>>,int)
  nameWithType: Flux.<R>concatMapIterable(Function<? super T,? extends Iterable<? extends R>>,int)
  fullName: reactor.core.publisher.Flux.<R>concatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>,int)
- uid: reactor.core.publisher.Flux.<R>doOnDiscard(java.lang.Class<R>,java.util.function.Consumer<? super R>)
  name: Flux.<R>doOnDiscard(Class<R>,Consumer<? super R>)
  nameWithType: Flux.<R>doOnDiscard(Class<R>,Consumer<? super R>)
  fullName: reactor.core.publisher.Flux.<R>doOnDiscard(java.lang.Class<R>,java.util.function.Consumer<? super R>)
- uid: reactor.core.publisher.Flux.bufferWhile(java.util.function.Predicate<? super T>)
  name: Flux.bufferWhile(Predicate<? super T>)
  nameWithType: Flux.bufferWhile(Predicate<? super T>)
  fullName: reactor.core.publisher.Flux.bufferWhile(java.util.function.Predicate<? super T>)
- uid: reactor.core.publisher.Flux.<T2,V>zipWithIterable(java.lang.Iterable<? extends T2>,java.util.function.BiFunction<? super T,? super T2,? extends V>)
  name: Flux.<T2,V>zipWithIterable(Iterable<? extends T2>,BiFunction<? super T,? super T2,? extends V>)
  nameWithType: Flux.<T2,V>zipWithIterable(Iterable<? extends T2>,BiFunction<? super T,? super T2,? extends V>)
  fullName: reactor.core.publisher.Flux.<T2,V>zipWithIterable(java.lang.Iterable<? extends T2>,java.util.function.BiFunction<? super T,? super T2,? extends V>)
- uid: reactor.core.publisher.Flux.<T>merge(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int)
  name: Flux.<T>merge(Publisher<? extends Publisher<? extends T>>,int)
  nameWithType: Flux.<T>merge(Publisher<? extends Publisher<? extends T>>,int)
  fullName: reactor.core.publisher.Flux.<T>merge(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int)
- uid: reactor.core.publisher.Flux.<T>mergeOrdered(int,java.util.Comparator<? super T>,org.reactivestreams.Publisher<? extends T>...)
  name: Flux.<T>mergeOrdered(int,Comparator<? super T>,Publisher<? extends T>...)
  nameWithType: Flux.<T>mergeOrdered(int,Comparator<? super T>,Publisher<? extends T>...)
  fullName: reactor.core.publisher.Flux.<T>mergeOrdered(int,java.util.Comparator<? super T>,org.reactivestreams.Publisher<? extends T>...)
- uid: reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6,T7>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,org.reactivestreams.Publisher<? extends T6>,org.reactivestreams.Publisher<? extends T7>)
  name: Flux.<T1,T2,T3,T4,T5,T6,T7>zip(Publisher<? extends T1>,Publisher<? extends T2>,Publisher<? extends T3>,Publisher<? extends T4>,Publisher<? extends T5>,Publisher<? extends T6>,Publisher<? extends T7>)
  nameWithType: Flux.<T1,T2,T3,T4,T5,T6,T7>zip(Publisher<? extends T1>,Publisher<? extends T2>,Publisher<? extends T3>,Publisher<? extends T4>,Publisher<? extends T5>,Publisher<? extends T6>,Publisher<? extends T7>)
  fullName: reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6,T7>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,org.reactivestreams.Publisher<? extends T6>,org.reactivestreams.Publisher<? extends T7>)
- uid: reactor.core.publisher.Flux.checkpoint(java.lang.String)
  name: Flux.checkpoint(String)
  nameWithType: Flux.checkpoint(String)
  fullName: reactor.core.publisher.Flux.checkpoint(java.lang.String)
- uid: reactor.core.publisher.Flux.<K>groupBy(java.util.function.Function<? super T,? extends K>)
  name: Flux.<K>groupBy(Function<? super T,? extends K>)
  nameWithType: Flux.<K>groupBy(Function<? super T,? extends K>)
  fullName: reactor.core.publisher.Flux.<K>groupBy(java.util.function.Function<? super T,? extends K>)
- uid: reactor.core.publisher.Flux.toString()
  name: Flux.toString()
  nameWithType: Flux.toString()
  fullName: reactor.core.publisher.Flux.toString()
- uid: reactor.core.publisher.Flux.<V>concatMapDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>)
  name: Flux.<V>concatMapDelayError(Function<? super T,? extends Publisher<? extends V>>)
  nameWithType: Flux.<V>concatMapDelayError(Function<? super T,? extends Publisher<? extends V>>)
  fullName: reactor.core.publisher.Flux.<V>concatMapDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>)
- uid: reactor.core.publisher.Flux.<K,V>collectMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  name: Flux.<K,V>collectMap(Function<? super T,? extends K>,Function<? super T,? extends V>)
  nameWithType: Flux.<K,V>collectMap(Function<? super T,? extends K>,Function<? super T,? extends V>)
  fullName: reactor.core.publisher.Flux.<K,V>collectMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
- uid: reactor.core.publisher.Flux.doOnRequest(java.util.function.LongConsumer)
  name: Flux.doOnRequest(LongConsumer)
  nameWithType: Flux.doOnRequest(LongConsumer)
  fullName: reactor.core.publisher.Flux.doOnRequest(java.util.function.LongConsumer)
- uid: reactor.core.publisher.Flux.<T1,T2,T3,T4,T5>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>)
  name: Flux.<T1,T2,T3,T4,T5>zip(Publisher<? extends T1>,Publisher<? extends T2>,Publisher<? extends T3>,Publisher<? extends T4>,Publisher<? extends T5>)
  nameWithType: Flux.<T1,T2,T3,T4,T5>zip(Publisher<? extends T1>,Publisher<? extends T2>,Publisher<? extends T3>,Publisher<? extends T4>,Publisher<? extends T5>)
  fullName: reactor.core.publisher.Flux.<T1,T2,T3,T4,T5>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>)
- uid: reactor.core.publisher.Flux.subscriberContext(reactor.util.context.Context)
  name: Flux.subscriberContext(Context)
  nameWithType: Flux.subscriberContext(Context)
  fullName: reactor.core.publisher.Flux.subscriberContext(reactor.util.context.Context)
- uid: reactor.core.publisher.Flux.all(java.util.function.Predicate<? super T>)
  name: Flux.all(Predicate<? super T>)
  nameWithType: Flux.all(Predicate<? super T>)
  fullName: reactor.core.publisher.Flux.all(java.util.function.Predicate<? super T>)
- uid: reactor.core.publisher.Flux.<U>timeout(org.reactivestreams.Publisher<U>)
  name: Flux.<U>timeout(Publisher<U>)
  nameWithType: Flux.<U>timeout(Publisher<U>)
  fullName: reactor.core.publisher.Flux.<U>timeout(org.reactivestreams.Publisher<U>)
- uid: reactor.core.publisher.Flux.<I>mergeSequential(org.reactivestreams.Publisher<? extends I>...)
  name: Flux.<I>mergeSequential(Publisher<? extends I>...)
  nameWithType: Flux.<I>mergeSequential(Publisher<? extends I>...)
  fullName: reactor.core.publisher.Flux.<I>mergeSequential(org.reactivestreams.Publisher<? extends I>...)
- uid: reactor.core.publisher.Flux.scan(java.util.function.BiFunction<T,T,T>)
  name: Flux.scan(BiFunction<T,T,T>)
  nameWithType: Flux.scan(BiFunction<T,T,T>)
  fullName: reactor.core.publisher.Flux.scan(java.util.function.BiFunction<T,T,T>)
- uid: reactor.core.publisher.Flux.publish()
  name: Flux.publish()
  nameWithType: Flux.publish()
  fullName: reactor.core.publisher.Flux.publish()
- uid: reactor.core.publisher.Flux.log(reactor.util.Logger)
  name: Flux.log(Logger)
  nameWithType: Flux.log(Logger)
  fullName: reactor.core.publisher.Flux.log(reactor.util.Logger)
- uid: reactor.core.publisher.Flux.doOnError(java.util.function.Consumer<? super java.lang.Throwable>)
  name: Flux.doOnError(Consumer<? super Throwable>)
  nameWithType: Flux.doOnError(Consumer<? super Throwable>)
  fullName: reactor.core.publisher.Flux.doOnError(java.util.function.Consumer<? super java.lang.Throwable>)
- uid: reactor.core.publisher.Flux.cancelOn(reactor.core.scheduler.Scheduler)
  name: Flux.cancelOn(Scheduler)
  nameWithType: Flux.cancelOn(Scheduler)
  fullName: reactor.core.publisher.Flux.cancelOn(reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.bufferUntil(java.util.function.Predicate<? super T>,boolean)
  name: Flux.bufferUntil(Predicate<? super T>,boolean)
  nameWithType: Flux.bufferUntil(Predicate<? super T>,boolean)
  fullName: reactor.core.publisher.Flux.bufferUntil(java.util.function.Predicate<? super T>,boolean)
- uid: reactor.core.publisher.Flux.<T>merge(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)
  name: Flux.<T>merge(Publisher<? extends Publisher<? extends T>>)
  nameWithType: Flux.<T>merge(Publisher<? extends Publisher<? extends T>>)
  fullName: reactor.core.publisher.Flux.<T>merge(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)
- uid: reactor.core.publisher.Flux.<T>defer(java.util.function.Supplier<? extends org.reactivestreams.Publisher<T>>)
  name: Flux.<T>defer(Supplier<? extends Publisher<T>>)
  nameWithType: Flux.<T>defer(Supplier<? extends Publisher<T>>)
  fullName: reactor.core.publisher.Flux.<T>defer(java.util.function.Supplier<? extends org.reactivestreams.Publisher<T>>)
- uid: reactor.core.publisher.Flux.ignoreElements()
  name: Flux.ignoreElements()
  nameWithType: Flux.ignoreElements()
  fullName: reactor.core.publisher.Flux.ignoreElements()
- uid: reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>)
  name: Flux.subscribe(Consumer<? super T>,Consumer<? super Throwable>)
  nameWithType: Flux.subscribe(Consumer<? super T>,Consumer<? super Throwable>)
  fullName: reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>)
- uid: reactor.core.publisher.Flux.<T>just(T...)
  name: Flux.<T>just(T)
  nameWithType: Flux.<T>just(T)
  fullName: reactor.core.publisher.Flux.<T>just(T...)
- uid: reactor.core.publisher.Flux.interval(java.time.Duration,reactor.core.scheduler.Scheduler)
  name: Flux.interval(Duration,Scheduler)
  nameWithType: Flux.interval(Duration,Scheduler)
  fullName: reactor.core.publisher.Flux.interval(java.time.Duration,reactor.core.scheduler.Scheduler)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: reactor.core.publisher.Flux.<T>fromStream(java.util.stream.Stream<? extends T>)
  name: Flux.<T>fromStream(Stream<? extends T>)
  nameWithType: Flux.<T>fromStream(Stream<? extends T>)
  fullName: reactor.core.publisher.Flux.<T>fromStream(java.util.stream.Stream<? extends T>)
- uid: reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6,T7,T8>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,org.reactivestreams.Publisher<? extends T6>,org.reactivestreams.Publisher<? extends T7>,org.reactivestreams.Publisher<? extends T8>)
  name: Flux.<T1,T2,T3,T4,T5,T6,T7,T8>zip(Publisher<? extends T1>,Publisher<? extends T2>,Publisher<? extends T3>,Publisher<? extends T4>,Publisher<? extends T5>,Publisher<? extends T6>,Publisher<? extends T7>,Publisher<? extends T8>)
  nameWithType: Flux.<T1,T2,T3,T4,T5,T6,T7,T8>zip(Publisher<? extends T1>,Publisher<? extends T2>,Publisher<? extends T3>,Publisher<? extends T4>,Publisher<? extends T5>,Publisher<? extends T6>,Publisher<? extends T7>,Publisher<? extends T8>)
  fullName: reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6,T7,T8>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,org.reactivestreams.Publisher<? extends T6>,org.reactivestreams.Publisher<? extends T7>,org.reactivestreams.Publisher<? extends T8>)
- uid: reactor.core.publisher.Flux.bufferUntil(java.util.function.Predicate<? super T>)
  name: Flux.bufferUntil(Predicate<? super T>)
  nameWithType: Flux.bufferUntil(Predicate<? super T>)
  fullName: reactor.core.publisher.Flux.bufferUntil(java.util.function.Predicate<? super T>)
- uid: reactor.core.publisher.Flux.<T1,T2,O>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,java.util.function.BiFunction<? super T1,? super T2,? extends O>)
  name: Flux.<T1,T2,O>zip(Publisher<? extends T1>,Publisher<? extends T2>,BiFunction<? super T1,? super T2,? extends O>)
  nameWithType: Flux.<T1,T2,O>zip(Publisher<? extends T1>,Publisher<? extends T2>,BiFunction<? super T1,? super T2,? extends O>)
  fullName: reactor.core.publisher.Flux.<T1,T2,O>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,java.util.function.BiFunction<? super T1,? super T2,? extends O>)
- uid: reactor.core.publisher.Flux.blockFirst()
  name: Flux.blockFirst()
  nameWithType: Flux.blockFirst()
  fullName: reactor.core.publisher.Flux.blockFirst()
- uid: reactor.core.publisher.Flux.<T2>zipWith(org.reactivestreams.Publisher<? extends T2>,int)
  name: Flux.<T2>zipWith(Publisher<? extends T2>,int)
  nameWithType: Flux.<T2>zipWith(Publisher<? extends T2>,int)
  fullName: reactor.core.publisher.Flux.<T2>zipWith(org.reactivestreams.Publisher<? extends T2>,int)
- uid: reactor.core.publisher.Flux.<E>subscribeWith(E)
  name: Flux.<E>subscribeWith(E)
  nameWithType: Flux.<E>subscribeWith(E)
  fullName: reactor.core.publisher.Flux.<E>subscribeWith(E)
- uid: reactor.core.publisher.Flux.limitRate(int)
  name: Flux.limitRate(int)
  nameWithType: Flux.limitRate(int)
  fullName: reactor.core.publisher.Flux.limitRate(int)
- uid: reactor.core.publisher.Flux.<I>merge(org.reactivestreams.Publisher<? extends I>...)
  name: Flux.<I>merge(Publisher<? extends I>...)
  nameWithType: Flux.<I>merge(Publisher<? extends I>...)
  fullName: reactor.core.publisher.Flux.<I>merge(org.reactivestreams.Publisher<? extends I>...)
- uid: reactor.core.publisher.Flux.window(java.time.Duration)
  name: Flux.window(Duration)
  nameWithType: Flux.window(Duration)
  fullName: reactor.core.publisher.Flux.window(java.time.Duration)
- uid: reactor.core.publisher.Flux.<X>dematerialize()
  name: Flux.<X>dematerialize()
  nameWithType: Flux.<X>dematerialize()
  fullName: reactor.core.publisher.Flux.<X>dematerialize()
- uid: reactor.core.publisher.Flux.collectSortedList(java.util.Comparator<? super T>)
  name: Flux.collectSortedList(Comparator<? super T>)
  nameWithType: Flux.collectSortedList(Comparator<? super T>)
  fullName: reactor.core.publisher.Flux.collectSortedList(java.util.Comparator<? super T>)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: reactor.core.publisher.Flux.replay(java.time.Duration,reactor.core.scheduler.Scheduler)
  name: Flux.replay(Duration,Scheduler)
  nameWithType: Flux.replay(Duration,Scheduler)
  fullName: reactor.core.publisher.Flux.replay(java.time.Duration,reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.interval(java.time.Duration,java.time.Duration)
  name: Flux.interval(Duration,Duration)
  nameWithType: Flux.interval(Duration,Duration)
  fullName: reactor.core.publisher.Flux.interval(java.time.Duration,java.time.Duration)
- uid: reactor.core.publisher.Flux.retryBackoff(long,java.time.Duration)
  name: Flux.retryBackoff(long,Duration)
  nameWithType: Flux.retryBackoff(long,Duration)
  fullName: reactor.core.publisher.Flux.retryBackoff(long,java.time.Duration)
- uid: reactor.core.publisher.Flux.<R>flatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>)
  name: Flux.<R>flatMapIterable(Function<? super T,? extends Iterable<? extends R>>)
  nameWithType: Flux.<R>flatMapIterable(Function<? super T,? extends Iterable<? extends R>>)
  fullName: reactor.core.publisher.Flux.<R>flatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>)
- uid: reactor.core.publisher.Flux.startWith(org.reactivestreams.Publisher<? extends T>)
  name: Flux.startWith(Publisher<? extends T>)
  nameWithType: Flux.startWith(Publisher<? extends T>)
  fullName: reactor.core.publisher.Flux.startWith(org.reactivestreams.Publisher<? extends T>)
- uid: reactor.core.publisher.Flux.<E>onErrorReturn(java.lang.Class<E>,T)
  name: Flux.<E>onErrorReturn(Class<E>,T)
  nameWithType: Flux.<E>onErrorReturn(Class<E>,T)
  fullName: reactor.core.publisher.Flux.<E>onErrorReturn(java.lang.Class<E>,T)
- uid: reactor.core.publisher.Flux.timeout(java.time.Duration)
  name: Flux.timeout(Duration)
  nameWithType: Flux.timeout(Duration)
  fullName: reactor.core.publisher.Flux.timeout(java.time.Duration)
- uid: reactor.core.publisher.Flux.<I>index(java.util.function.BiFunction<? super java.lang.Long,? super T,? extends I>)
  name: Flux.<I>index(BiFunction<? super Long,? super T,? extends I>)
  nameWithType: Flux.<I>index(BiFunction<? super Long,? super T,? extends I>)
  fullName: reactor.core.publisher.Flux.<I>index(java.util.function.BiFunction<? super java.lang.Long,? super T,? extends I>)
- uid: reactor.core.publisher.Flux.expandDeep(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>)
  name: Flux.expandDeep(Function<? super T,? extends Publisher<? extends T>>)
  nameWithType: Flux.expandDeep(Function<? super T,? extends Publisher<? extends T>>)
  fullName: reactor.core.publisher.Flux.expandDeep(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>)
- uid: reactor.core.publisher.Flux.<U>sampleTimeout(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<U>>)
  name: Flux.<U>sampleTimeout(Function<? super T,? extends Publisher<U>>)
  nameWithType: Flux.<U>sampleTimeout(Function<? super T,? extends Publisher<U>>)
  fullName: reactor.core.publisher.Flux.<U>sampleTimeout(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<U>>)
- uid: reactor.core.publisher.Flux.<R>flatMapSequential(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,int,int)
  name: Flux.<R>flatMapSequential(Function<? super T,? extends Publisher<? extends R>>,int,int)
  nameWithType: Flux.<R>flatMapSequential(Function<? super T,? extends Publisher<? extends R>>,int,int)
  fullName: reactor.core.publisher.Flux.<R>flatMapSequential(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,int,int)
- uid: reactor.core.publisher.Flux.sample(java.time.Duration)
  name: Flux.sample(Duration)
  nameWithType: Flux.sample(Duration)
  fullName: reactor.core.publisher.Flux.sample(java.time.Duration)
- uid: reactor.core.publisher.Flux.<U,V>windowWhen(org.reactivestreams.Publisher<U>,java.util.function.Function<? super U,? extends org.reactivestreams.Publisher<V>>)
  name: Flux.<U,V>windowWhen(Publisher<U>,Function<? super U,? extends Publisher<V>>)
  nameWithType: Flux.<U,V>windowWhen(Publisher<U>,Function<? super U,? extends Publisher<V>>)
  fullName: reactor.core.publisher.Flux.<U,V>windowWhen(org.reactivestreams.Publisher<U>,java.util.function.Function<? super U,? extends org.reactivestreams.Publisher<V>>)
- uid: reactor.core.publisher.Flux.onBackpressureDrop()
  name: Flux.onBackpressureDrop()
  nameWithType: Flux.onBackpressureDrop()
  fullName: reactor.core.publisher.Flux.onBackpressureDrop()
- uid: reactor.core.publisher.Flux.<T,S>generate(java.util.concurrent.Callable<S>,java.util.function.BiFunction<S,reactor.core.publisher.SynchronousSink<T>,S>)
  name: Flux.<T,S>generate(Callable<S>,BiFunction<S,SynchronousSink<T>,S>)
  nameWithType: Flux.<T,S>generate(Callable<S>,BiFunction<S,SynchronousSink<T>,S>)
  fullName: reactor.core.publisher.Flux.<T,S>generate(java.util.concurrent.Callable<S>,java.util.function.BiFunction<S,reactor.core.publisher.SynchronousSink<T>,S>)
- uid: reactor.core.publisher.Flux.<U>sample(org.reactivestreams.Publisher<U>)
  name: Flux.<U>sample(Publisher<U>)
  nameWithType: Flux.<U>sample(Publisher<U>)
  fullName: reactor.core.publisher.Flux.<U>sample(org.reactivestreams.Publisher<U>)
- uid: reactor.core.publisher.Flux.<V>distinctUntilChanged(java.util.function.Function<? super T,? extends V>)
  name: Flux.<V>distinctUntilChanged(Function<? super T,? extends V>)
  nameWithType: Flux.<V>distinctUntilChanged(Function<? super T,? extends V>)
  fullName: reactor.core.publisher.Flux.<V>distinctUntilChanged(java.util.function.Function<? super T,? extends V>)
- uid: reactor.core.publisher.Flux.<I>merge(int,org.reactivestreams.Publisher<? extends I>...)
  name: Flux.<I>merge(int,Publisher<? extends I>...)
  nameWithType: Flux.<I>merge(int,Publisher<? extends I>...)
  fullName: reactor.core.publisher.Flux.<I>merge(int,org.reactivestreams.Publisher<? extends I>...)
- uid: reactor.core.publisher.Flux.repeatWhen(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Long>,? extends org.reactivestreams.Publisher<?>>)
  name: Flux.repeatWhen(Function<Flux<Long>,? extends Publisher<?>>)
  nameWithType: Flux.repeatWhen(Function<Flux<Long>,? extends Publisher<?>>)
  fullName: reactor.core.publisher.Flux.repeatWhen(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Long>,? extends org.reactivestreams.Publisher<?>>)
- uid: reactor.core.publisher.Flux.collectSortedList()
  name: Flux.collectSortedList()
  nameWithType: Flux.collectSortedList()
  fullName: reactor.core.publisher.Flux.collectSortedList()
- uid: reactor.core.publisher.Flux.blockLast(java.time.Duration)
  name: Flux.blockLast(Duration)
  nameWithType: Flux.blockLast(Duration)
  fullName: reactor.core.publisher.Flux.blockLast(java.time.Duration)
- uid: reactor.core.publisher.Flux.name(java.lang.String)
  name: Flux.name(String)
  nameWithType: Flux.name(String)
  fullName: reactor.core.publisher.Flux.name(java.lang.String)
- uid: reactor.core.publisher.Flux.retryBackoff(long,java.time.Duration,java.time.Duration,double)
  name: Flux.retryBackoff(long,Duration,Duration,double)
  nameWithType: Flux.retryBackoff(long,Duration,Duration,double)
  fullName: reactor.core.publisher.Flux.retryBackoff(long,java.time.Duration,java.time.Duration,double)
- uid: reactor.core.publisher.Flux.<R>concatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>)
  name: Flux.<R>concatMapIterable(Function<? super T,? extends Iterable<? extends R>>)
  nameWithType: Flux.<R>concatMapIterable(Function<? super T,? extends Iterable<? extends R>>)
  fullName: reactor.core.publisher.Flux.<R>concatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>)
- uid: reactor.core.publisher.Flux.<E>onErrorContinue(java.lang.Class<E>,java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)
  name: Flux.<E>onErrorContinue(Class<E>,BiConsumer<Throwable,Object>)
  nameWithType: Flux.<E>onErrorContinue(Class<E>,BiConsumer<Throwable,Object>)
  fullName: reactor.core.publisher.Flux.<E>onErrorContinue(java.lang.Class<E>,java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)
- uid: reactor.core.publisher.Flux.<K,V>groupBy(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,int)
  name: Flux.<K,V>groupBy(Function<? super T,? extends K>,Function<? super T,? extends V>,int)
  nameWithType: Flux.<K,V>groupBy(Function<? super T,? extends K>,Function<? super T,? extends V>,int)
  fullName: reactor.core.publisher.Flux.<K,V>groupBy(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,int)
- uid: reactor.core.publisher.Flux.doOnNext(java.util.function.Consumer<? super T>)
  name: Flux.doOnNext(Consumer<? super T>)
  nameWithType: Flux.doOnNext(Consumer<? super T>)
  fullName: reactor.core.publisher.Flux.doOnNext(java.util.function.Consumer<? super T>)
- uid: reactor.core.publisher.Flux.doOnComplete(java.lang.Runnable)
  name: Flux.doOnComplete(Runnable)
  nameWithType: Flux.doOnComplete(Runnable)
  fullName: reactor.core.publisher.Flux.doOnComplete(java.lang.Runnable)
- uid: reactor.core.publisher.Flux.<T2,V>zipWith(org.reactivestreams.Publisher<? extends T2>,java.util.function.BiFunction<? super T,? super T2,? extends V>)
  name: Flux.<T2,V>zipWith(Publisher<? extends T2>,BiFunction<? super T,? super T2,? extends V>)
  nameWithType: Flux.<T2,V>zipWith(Publisher<? extends T2>,BiFunction<? super T,? super T2,? extends V>)
  fullName: reactor.core.publisher.Flux.<T2,V>zipWith(org.reactivestreams.Publisher<? extends T2>,java.util.function.BiFunction<? super T,? super T2,? extends V>)
- uid: reactor.core.publisher.Flux.<T>error(java.util.function.Supplier<? extends java.lang.Throwable>)
  name: Flux.<T>error(Supplier<? extends Throwable>)
  nameWithType: Flux.<T>error(Supplier<? extends Throwable>)
  fullName: reactor.core.publisher.Flux.<T>error(java.util.function.Supplier<? extends java.lang.Throwable>)
- uid: reactor.core.publisher.Flux.share()
  name: Flux.share()
  nameWithType: Flux.share()
  fullName: reactor.core.publisher.Flux.share()
- uid: reactor.core.publisher.Flux.delaySequence(java.time.Duration)
  name: Flux.delaySequence(Duration)
  nameWithType: Flux.delaySequence(Duration)
  fullName: reactor.core.publisher.Flux.delaySequence(java.time.Duration)
- uid: reactor.core.publisher.Flux.elapsed(reactor.core.scheduler.Scheduler)
  name: Flux.elapsed(Scheduler)
  nameWithType: Flux.elapsed(Scheduler)
  fullName: reactor.core.publisher.Flux.elapsed(reactor.core.scheduler.Scheduler)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: reactor.core.publisher.Flux.onBackpressureDrop(java.util.function.Consumer<? super T>)
  name: Flux.onBackpressureDrop(Consumer<? super T>)
  nameWithType: Flux.onBackpressureDrop(Consumer<? super T>)
  fullName: reactor.core.publisher.Flux.onBackpressureDrop(java.util.function.Consumer<? super T>)
- uid: reactor.core.publisher.Flux.interval(java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)
  name: Flux.interval(Duration,Duration,Scheduler)
  nameWithType: Flux.interval(Duration,Duration,Scheduler)
  fullName: reactor.core.publisher.Flux.interval(java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.<T>mergeSequential(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)
  name: Flux.<T>mergeSequential(Publisher<? extends Publisher<? extends T>>)
  nameWithType: Flux.<T>mergeSequential(Publisher<? extends Publisher<? extends T>>)
  fullName: reactor.core.publisher.Flux.<T>mergeSequential(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)
- uid: reactor.core.publisher.Flux.<K>collectMap(java.util.function.Function<? super T,? extends K>)
  name: Flux.<K>collectMap(Function<? super T,? extends K>)
  nameWithType: Flux.<K>collectMap(Function<? super T,? extends K>)
  fullName: reactor.core.publisher.Flux.<K>collectMap(java.util.function.Function<? super T,? extends K>)
- uid: reactor.core.publisher.Flux.<T>mergeOrdered(java.util.Comparator<? super T>,org.reactivestreams.Publisher<? extends T>...)
  name: Flux.<T>mergeOrdered(Comparator<? super T>,Publisher<? extends T>...)
  nameWithType: Flux.<T>mergeOrdered(Comparator<? super T>,Publisher<? extends T>...)
  fullName: reactor.core.publisher.Flux.<T>mergeOrdered(java.util.Comparator<? super T>,org.reactivestreams.Publisher<? extends T>...)
- uid: reactor.core.publisher.Flux.toIterable(int)
  name: Flux.toIterable(int)
  nameWithType: Flux.toIterable(int)
  fullName: reactor.core.publisher.Flux.toIterable(int)
- uid: reactor.core.publisher.Flux.onErrorResume(java.util.function.Function<? super java.lang.Throwable,? extends org.reactivestreams.Publisher<? extends T>>)
  name: Flux.onErrorResume(Function<? super Throwable,? extends Publisher<? extends T>>)
  nameWithType: Flux.onErrorResume(Function<? super Throwable,? extends Publisher<? extends T>>)
  fullName: reactor.core.publisher.Flux.onErrorResume(java.util.function.Function<? super java.lang.Throwable,? extends org.reactivestreams.Publisher<? extends T>>)
- uid: reactor.core.publisher.Flux.<T1,T2,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,java.util.function.BiFunction<? super T1,? super T2,? extends V>)
  name: Flux.<T1,T2,V>combineLatest(Publisher<? extends T1>,Publisher<? extends T2>,BiFunction<? super T1,? super T2,? extends V>)
  nameWithType: Flux.<T1,T2,V>combineLatest(Publisher<? extends T1>,Publisher<? extends T2>,BiFunction<? super T1,? super T2,? extends V>)
  fullName: reactor.core.publisher.Flux.<T1,T2,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,java.util.function.BiFunction<? super T1,? super T2,? extends V>)
- uid: reactor.core.publisher.Flux.<U,R>withLatestFrom(org.reactivestreams.Publisher<? extends U>,java.util.function.BiFunction<? super T,? super U,? extends R>)
  name: Flux.<U,R>withLatestFrom(Publisher<? extends U>,BiFunction<? super T,? super U,? extends R>)
  nameWithType: Flux.<U,R>withLatestFrom(Publisher<? extends U>,BiFunction<? super T,? super U,? extends R>)
  fullName: reactor.core.publisher.Flux.<U,R>withLatestFrom(org.reactivestreams.Publisher<? extends U>,java.util.function.BiFunction<? super T,? super U,? extends R>)
- uid: reactor.core.publisher.Flux.then()
  name: Flux.then()
  nameWithType: Flux.then()
  fullName: reactor.core.publisher.Flux.then()
- uid: reactor.core.publisher.Flux.<V>bufferUntilChanged(java.util.function.Function<? super T,? extends V>)
  name: Flux.<V>bufferUntilChanged(Function<? super T,? extends V>)
  nameWithType: Flux.<V>bufferUntilChanged(Function<? super T,? extends V>)
  fullName: reactor.core.publisher.Flux.<V>bufferUntilChanged(java.util.function.Function<? super T,? extends V>)
- uid: reactor.core.publisher.Flux.take(long)
  name: Flux.take(long)
  nameWithType: Flux.take(long)
  fullName: reactor.core.publisher.Flux.take(long)
- uid: reactor.core.publisher.Flux.<V>then(reactor.core.publisher.Mono<V>)
  name: Flux.<V>then(Mono<V>)
  nameWithType: Flux.<V>then(Mono<V>)
  fullName: reactor.core.publisher.Flux.<V>then(reactor.core.publisher.Mono<V>)
- uid: reactor.core.publisher.Flux.takeWhile(java.util.function.Predicate<? super T>)
  name: Flux.takeWhile(Predicate<? super T>)
  nameWithType: Flux.takeWhile(Predicate<? super T>)
  fullName: reactor.core.publisher.Flux.takeWhile(java.util.function.Predicate<? super T>)
- uid: reactor.core.publisher.Flux.<V>concatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int)
  name: Flux.<V>concatMap(Function<? super T,? extends Publisher<? extends V>>,int)
  nameWithType: Flux.<V>concatMap(Function<? super T,? extends Publisher<? extends V>>,int)
  fullName: reactor.core.publisher.Flux.<V>concatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int)
- uid: reactor.core.publisher.Flux.onErrorMap(java.util.function.Function<? super java.lang.Throwable,? extends java.lang.Throwable>)
  name: Flux.onErrorMap(Function<? super Throwable,? extends Throwable>)
  nameWithType: Flux.onErrorMap(Function<? super Throwable,? extends Throwable>)
  fullName: reactor.core.publisher.Flux.onErrorMap(java.util.function.Function<? super java.lang.Throwable,? extends java.lang.Throwable>)
- uid: reactor.core.publisher.Flux.<V>map(java.util.function.Function<? super T,? extends V>)
  name: Flux.<V>map(Function<? super T,? extends V>)
  nameWithType: Flux.<V>map(Function<? super T,? extends V>)
  fullName: reactor.core.publisher.Flux.<V>map(java.util.function.Function<? super T,? extends V>)
- uid: reactor.core.publisher.Flux.last(T)
  name: Flux.last(T)
  nameWithType: Flux.last(T)
  fullName: reactor.core.publisher.Flux.last(T)
- uid: reactor.core.publisher.Flux.<TRight,TLeftEnd,TRightEnd,R>groupJoin(org.reactivestreams.Publisher<? extends TRight>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<TLeftEnd>>,java.util.function.Function<? super TRight,? extends org.reactivestreams.Publisher<TRightEnd>>,java.util.function.BiFunction<? super T,? super reactor.core.publisher.Flux<TRight>,? extends R>)
  name: Flux.<TRight,TLeftEnd,TRightEnd,R>groupJoin(Publisher<? extends TRight>,Function<? super T,? extends Publisher<TLeftEnd>>,Function<? super TRight,? extends Publisher<TRightEnd>>,BiFunction<? super T,? super Flux<TRight>,? extends R>)
  nameWithType: Flux.<TRight,TLeftEnd,TRightEnd,R>groupJoin(Publisher<? extends TRight>,Function<? super T,? extends Publisher<TLeftEnd>>,Function<? super TRight,? extends Publisher<TRightEnd>>,BiFunction<? super T,? super Flux<TRight>,? extends R>)
  fullName: reactor.core.publisher.Flux.<TRight,TLeftEnd,TRightEnd,R>groupJoin(org.reactivestreams.Publisher<? extends TRight>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<TLeftEnd>>,java.util.function.Function<? super TRight,? extends org.reactivestreams.Publisher<TRightEnd>>,java.util.function.BiFunction<? super T,? super reactor.core.publisher.Flux<TRight>,? extends R>)
- uid: reactor.core.publisher.Flux.<T>onAssembly(reactor.core.publisher.ConnectableFlux<T>)
  name: Flux.<T>onAssembly(ConnectableFlux<T>)
  nameWithType: Flux.<T>onAssembly(ConnectableFlux<T>)
  fullName: reactor.core.publisher.Flux.<T>onAssembly(reactor.core.publisher.ConnectableFlux<T>)
- uid: reactor.core.publisher.Flux.<U,V,C>bufferWhen(org.reactivestreams.Publisher<U>,java.util.function.Function<? super U,? extends org.reactivestreams.Publisher<V>>,java.util.function.Supplier<C>)
  name: Flux.<U,V,C>bufferWhen(Publisher<U>,Function<? super U,? extends Publisher<V>>,Supplier<C>)
  nameWithType: Flux.<U,V,C>bufferWhen(Publisher<U>,Function<? super U,? extends Publisher<V>>,Supplier<C>)
  fullName: reactor.core.publisher.Flux.<U,V,C>bufferWhen(org.reactivestreams.Publisher<U>,java.util.function.Function<? super U,? extends org.reactivestreams.Publisher<V>>,java.util.function.Supplier<C>)
- uid: reactor.core.publisher.Flux.onErrorStop()
  name: Flux.onErrorStop()
  nameWithType: Flux.onErrorStop()
  fullName: reactor.core.publisher.Flux.onErrorStop()
- uid: reactor.core.publisher.Flux.limitRate(int,int)
  name: Flux.limitRate(int,int)
  nameWithType: Flux.limitRate(int,int)
  fullName: reactor.core.publisher.Flux.limitRate(int,int)
- uid: reactor.core.publisher.Flux.materialize()
  name: Flux.materialize()
  nameWithType: Flux.materialize()
  fullName: reactor.core.publisher.Flux.materialize()
- uid: reactor.core.publisher.Flux.timestamp(reactor.core.scheduler.Scheduler)
  name: Flux.timestamp(Scheduler)
  nameWithType: Flux.timestamp(Scheduler)
  fullName: reactor.core.publisher.Flux.timestamp(reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.<C>bufferTimeout(int,java.time.Duration,reactor.core.scheduler.Scheduler,java.util.function.Supplier<C>)
  name: Flux.<C>bufferTimeout(int,Duration,Scheduler,Supplier<C>)
  nameWithType: Flux.<C>bufferTimeout(int,Duration,Scheduler,Supplier<C>)
  fullName: reactor.core.publisher.Flux.<C>bufferTimeout(int,java.time.Duration,reactor.core.scheduler.Scheduler,java.util.function.Supplier<C>)
- uid: reactor.core.publisher.Flux.<V>flatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int,int)
  name: Flux.<V>flatMap(Function<? super T,? extends Publisher<? extends V>>,int,int)
  nameWithType: Flux.<V>flatMap(Function<? super T,? extends Publisher<? extends V>>,int,int)
  fullName: reactor.core.publisher.Flux.<V>flatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int,int)
- uid: reactor.core.publisher.Flux.expandDeep(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>,int)
  name: Flux.expandDeep(Function<? super T,? extends Publisher<? extends T>>,int)
  nameWithType: Flux.expandDeep(Function<? super T,? extends Publisher<? extends T>>,int)
  fullName: reactor.core.publisher.Flux.expandDeep(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>,int)
- uid: reactor.core.publisher.Flux.last()
  name: Flux.last()
  nameWithType: Flux.last()
  fullName: reactor.core.publisher.Flux.last()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: reactor.core.publisher.Flux.doFinally(java.util.function.Consumer<reactor.core.publisher.SignalType>)
  name: Flux.doFinally(Consumer<SignalType>)
  nameWithType: Flux.doFinally(Consumer<SignalType>)
  fullName: reactor.core.publisher.Flux.doFinally(java.util.function.Consumer<reactor.core.publisher.SignalType>)
- uid: reactor.core.publisher.Flux.getPrefetch()
  name: Flux.getPrefetch()
  nameWithType: Flux.getPrefetch()
  fullName: reactor.core.publisher.Flux.getPrefetch()
- uid: reactor.core.publisher.Flux.<O>zip(java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>,int,java.util.function.Function<? super java.lang.Object[],? extends O>)
  name: Flux.<O>zip(Iterable<? extends Publisher<?>>,int,Function<? super Object[],? extends O>)
  nameWithType: Flux.<O>zip(Iterable<? extends Publisher<?>>,int,Function<? super Object[],? extends O>)
  fullName: reactor.core.publisher.Flux.<O>zip(java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>,int,java.util.function.Function<? super java.lang.Object[],? extends O>)
- uid: reactor.core.publisher.Flux.<E>onErrorContinue(java.util.function.Predicate<E>,java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)
  name: Flux.<E>onErrorContinue(Predicate<E>,BiConsumer<Throwable,Object>)
  nameWithType: Flux.<E>onErrorContinue(Predicate<E>,BiConsumer<Throwable,Object>)
  fullName: reactor.core.publisher.Flux.<E>onErrorContinue(java.util.function.Predicate<E>,java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)
- uid: reactor.core.publisher.Flux.<I>mergeSequentialDelayError(int,org.reactivestreams.Publisher<? extends I>...)
  name: Flux.<I>mergeSequentialDelayError(int,Publisher<? extends I>...)
  nameWithType: Flux.<I>mergeSequentialDelayError(int,Publisher<? extends I>...)
  fullName: reactor.core.publisher.Flux.<I>mergeSequentialDelayError(int,org.reactivestreams.Publisher<? extends I>...)
- uid: reactor.core.publisher.Flux.buffer(org.reactivestreams.Publisher<?>)
  name: Flux.buffer(Publisher<?>)
  nameWithType: Flux.buffer(Publisher<?>)
  fullName: reactor.core.publisher.Flux.buffer(org.reactivestreams.Publisher<?>)
- uid: reactor.core.publisher.Flux.elementAt(int)
  name: Flux.elementAt(int)
  nameWithType: Flux.elementAt(int)
  fullName: reactor.core.publisher.Flux.elementAt(int)
- uid: reactor.core.publisher.Flux.retry()
  name: Flux.retry()
  nameWithType: Flux.retry()
  fullName: reactor.core.publisher.Flux.retry()
- uid: reactor.core.publisher.Flux.<T>concat(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>>)
  name: Flux.<T>concat(Iterable<? extends Publisher<? extends T>>)
  nameWithType: Flux.<T>concat(Iterable<? extends Publisher<? extends T>>)
  fullName: reactor.core.publisher.Flux.<T>concat(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>>)
- uid: reactor.core.publisher.Flux.<I>first(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>)
  name: Flux.<I>first(Iterable<? extends Publisher<? extends I>>)
  nameWithType: Flux.<I>first(Iterable<? extends Publisher<? extends I>>)
  fullName: reactor.core.publisher.Flux.<I>first(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>)
- uid: reactor.core.publisher.Flux.publishOn(reactor.core.scheduler.Scheduler,boolean,int)
  name: Flux.publishOn(Scheduler,boolean,int)
  nameWithType: Flux.publishOn(Scheduler,boolean,int)
  fullName: reactor.core.publisher.Flux.publishOn(reactor.core.scheduler.Scheduler,boolean,int)
- uid: reactor.core.publisher.Flux.checkpoint(java.lang.String,boolean)
  name: Flux.checkpoint(String,boolean)
  nameWithType: Flux.checkpoint(String,boolean)
  fullName: reactor.core.publisher.Flux.checkpoint(java.lang.String,boolean)
- uid: reactor.core.publisher.Flux.<T>deferWithContext(java.util.function.Function<reactor.util.context.Context,? extends org.reactivestreams.Publisher<T>>)
  name: Flux.<T>deferWithContext(Function<Context,? extends Publisher<T>>)
  nameWithType: Flux.<T>deferWithContext(Function<Context,? extends Publisher<T>>)
  fullName: reactor.core.publisher.Flux.<T>deferWithContext(java.util.function.Function<reactor.util.context.Context,? extends org.reactivestreams.Publisher<T>>)
- uid: reactor.core.publisher.Flux.<V>switchMap(java.util.function.Function<? super T,org.reactivestreams.Publisher<? extends V>>)
  name: Flux.<V>switchMap(Function<? super T,Publisher<? extends V>>)
  nameWithType: Flux.<V>switchMap(Function<? super T,Publisher<? extends V>>)
  fullName: reactor.core.publisher.Flux.<V>switchMap(java.util.function.Function<? super T,org.reactivestreams.Publisher<? extends V>>)
- uid: reactor.core.publisher.Flux.sampleFirst(java.time.Duration)
  name: Flux.sampleFirst(Duration)
  nameWithType: Flux.sampleFirst(Duration)
  fullName: reactor.core.publisher.Flux.sampleFirst(java.time.Duration)
- uid: reactor.core.publisher.Flux.<I>mergeSequential(int,org.reactivestreams.Publisher<? extends I>...)
  name: Flux.<I>mergeSequential(int,Publisher<? extends I>...)
  nameWithType: Flux.<I>mergeSequential(int,Publisher<? extends I>...)
  fullName: reactor.core.publisher.Flux.<I>mergeSequential(int,org.reactivestreams.Publisher<? extends I>...)
- uid: reactor.core.publisher.Flux.onBackpressureError()
  name: Flux.onBackpressureError()
  nameWithType: Flux.onBackpressureError()
  fullName: reactor.core.publisher.Flux.onBackpressureError()
- uid: reactor.core.publisher.Flux.<T1,T2,T3,T4>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>)
  name: Flux.<T1,T2,T3,T4>zip(Publisher<? extends T1>,Publisher<? extends T2>,Publisher<? extends T3>,Publisher<? extends T4>)
  nameWithType: Flux.<T1,T2,T3,T4>zip(Publisher<? extends T1>,Publisher<? extends T2>,Publisher<? extends T3>,Publisher<? extends T4>)
  fullName: reactor.core.publisher.Flux.<T1,T2,T3,T4>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>)
- uid: reactor.core.publisher.Flux.mergeOrderedWith(org.reactivestreams.Publisher<? extends T>,java.util.Comparator<? super T>)
  name: Flux.mergeOrderedWith(Publisher<? extends T>,Comparator<? super T>)
  nameWithType: Flux.mergeOrderedWith(Publisher<? extends T>,Comparator<? super T>)
  fullName: reactor.core.publisher.Flux.mergeOrderedWith(org.reactivestreams.Publisher<? extends T>,java.util.Comparator<? super T>)
- uid: reactor.core.publisher.Flux.<V>switchMap(java.util.function.Function<? super T,org.reactivestreams.Publisher<? extends V>>,int)
  name: Flux.<V>switchMap(Function<? super T,Publisher<? extends V>>,int)
  nameWithType: Flux.<V>switchMap(Function<? super T,Publisher<? extends V>>,int)
  fullName: reactor.core.publisher.Flux.<V>switchMap(java.util.function.Function<? super T,org.reactivestreams.Publisher<? extends V>>,int)
- uid: reactor.core.publisher.Flux.takeUntil(java.util.function.Predicate<? super T>)
  name: Flux.takeUntil(Predicate<? super T>)
  nameWithType: Flux.takeUntil(Predicate<? super T>)
  fullName: reactor.core.publisher.Flux.takeUntil(java.util.function.Predicate<? super T>)
- uid: reactor.core.publisher.Flux.bufferTimeout(int,java.time.Duration)
  name: Flux.bufferTimeout(int,Duration)
  nameWithType: Flux.bufferTimeout(int,Duration)
  fullName: reactor.core.publisher.Flux.bufferTimeout(int,java.time.Duration)
- uid: reactor.core.publisher.Flux.<K,V>collectMultimap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.Supplier<java.util.Map<K,java.util.Collection<V>>>)
  name: Flux.<K,V>collectMultimap(Function<? super T,? extends K>,Function<? super T,? extends V>,Supplier<Map<K,Collection<V>>>)
  nameWithType: Flux.<K,V>collectMultimap(Function<? super T,? extends K>,Function<? super T,? extends V>,Supplier<Map<K,Collection<V>>>)
  fullName: reactor.core.publisher.Flux.<K,V>collectMultimap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.Supplier<java.util.Map<K,java.util.Collection<V>>>)
- uid: reactor.core.publisher.Flux.distinct()
  name: Flux.distinct()
  nameWithType: Flux.distinct()
  fullName: reactor.core.publisher.Flux.distinct()
- uid: reactor.core.publisher.Flux.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)
  name: Flux.<T,D>usingWhen(Publisher<D>,Function<? super D,? extends Publisher<? extends T>>,Function<? super D,? extends Publisher<?>>)
  nameWithType: Flux.<T,D>usingWhen(Publisher<D>,Function<? super D,? extends Publisher<? extends T>>,Function<? super D,? extends Publisher<?>>)
  fullName: reactor.core.publisher.Flux.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: reactor.core.publisher.Flux.window(java.time.Duration,reactor.core.scheduler.Scheduler)
  name: Flux.window(Duration,Scheduler)
  nameWithType: Flux.window(Duration,Scheduler)
  fullName: reactor.core.publisher.Flux.window(java.time.Duration,reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.<T>concatDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int)
  name: Flux.<T>concatDelayError(Publisher<? extends Publisher<? extends T>>,int)
  nameWithType: Flux.<T>concatDelayError(Publisher<? extends Publisher<? extends T>>,int)
  fullName: reactor.core.publisher.Flux.<T>concatDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int)
- uid: reactor.core.publisher.Flux.filter(java.util.function.Predicate<? super T>)
  name: Flux.filter(Predicate<? super T>)
  nameWithType: Flux.filter(Predicate<? super T>)
  fullName: reactor.core.publisher.Flux.filter(java.util.function.Predicate<? super T>)
- uid: reactor.core.publisher.Flux.<T2>zipWith(org.reactivestreams.Publisher<? extends T2>)
  name: Flux.<T2>zipWith(Publisher<? extends T2>)
  nameWithType: Flux.<T2>zipWith(Publisher<? extends T2>)
  fullName: reactor.core.publisher.Flux.<T2>zipWith(org.reactivestreams.Publisher<? extends T2>)
- uid: reactor.core.publisher.Flux.onBackpressureBuffer(int)
  name: Flux.onBackpressureBuffer(int)
  nameWithType: Flux.onBackpressureBuffer(int)
  fullName: reactor.core.publisher.Flux.onBackpressureBuffer(int)
- uid: reactor.core.publisher.Flux.retry(long)
  name: Flux.retry(long)
  nameWithType: Flux.retry(long)
  fullName: reactor.core.publisher.Flux.retry(long)
- uid: reactor.core.publisher.Flux.<K,V>collectMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.Supplier<java.util.Map<K,V>>)
  name: Flux.<K,V>collectMap(Function<? super T,? extends K>,Function<? super T,? extends V>,Supplier<Map<K,V>>)
  nameWithType: Flux.<K,V>collectMap(Function<? super T,? extends K>,Function<? super T,? extends V>,Supplier<Map<K,V>>)
  fullName: reactor.core.publisher.Flux.<K,V>collectMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.Supplier<java.util.Map<K,V>>)
- uid: reactor.core.publisher.Flux.delayUntil(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<?>>)
  name: Flux.delayUntil(Function<? super T,? extends Publisher<?>>)
  nameWithType: Flux.delayUntil(Function<? super T,? extends Publisher<?>>)
  fullName: reactor.core.publisher.Flux.delayUntil(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<?>>)
- uid: reactor.core.publisher.Flux.<T>generate(java.util.function.Consumer<reactor.core.publisher.SynchronousSink<T>>)
  name: Flux.<T>generate(Consumer<SynchronousSink<T>>)
  nameWithType: Flux.<T>generate(Consumer<SynchronousSink<T>>)
  fullName: reactor.core.publisher.Flux.<T>generate(java.util.function.Consumer<reactor.core.publisher.SynchronousSink<T>>)
- uid: reactor.core.publisher.Flux.tag(java.lang.String,java.lang.String)
  name: Flux.tag(String,String)
  nameWithType: Flux.tag(String,String)
  fullName: reactor.core.publisher.Flux.tag(java.lang.String,java.lang.String)
- uid: reactor.core.publisher.Flux.publishNext()
  name: Flux.publishNext()
  nameWithType: Flux.publishNext()
  fullName: reactor.core.publisher.Flux.publishNext()
- uid: reactor.core.publisher.Flux.any(java.util.function.Predicate<? super T>)
  name: Flux.any(Predicate<? super T>)
  nameWithType: Flux.any(Predicate<? super T>)
  fullName: reactor.core.publisher.Flux.any(java.util.function.Predicate<? super T>)
- uid: reactor.core.publisher.Flux.window(java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)
  name: Flux.window(Duration,Duration,Scheduler)
  nameWithType: Flux.window(Duration,Duration,Scheduler)
  fullName: reactor.core.publisher.Flux.window(java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.concatWithValues(T...)
  name: Flux.concatWithValues(T)
  nameWithType: Flux.concatWithValues(T)
  fullName: reactor.core.publisher.Flux.concatWithValues(T...)
- uid: reactor.core.publisher.Flux.skip(long)
  name: Flux.skip(long)
  nameWithType: Flux.skip(long)
  fullName: reactor.core.publisher.Flux.skip(long)
- uid: reactor.core.publisher.Flux.checkpoint()
  name: Flux.checkpoint()
  nameWithType: Flux.checkpoint()
  fullName: reactor.core.publisher.Flux.checkpoint()
- uid: reactor.core.publisher.Flux.doOnEach(java.util.function.Consumer<? super reactor.core.publisher.Signal<T>>)
  name: Flux.doOnEach(Consumer<? super Signal<T>>)
  nameWithType: Flux.doOnEach(Consumer<? super Signal<T>>)
  fullName: reactor.core.publisher.Flux.doOnEach(java.util.function.Consumer<? super reactor.core.publisher.Signal<T>>)
- uid: reactor.core.publisher.Flux.repeat()
  name: Flux.repeat()
  nameWithType: Flux.repeat()
  fullName: reactor.core.publisher.Flux.repeat()
- uid: reactor.core.publisher.Flux.toStream(int)
  name: Flux.toStream(int)
  nameWithType: Flux.toStream(int)
  fullName: reactor.core.publisher.Flux.toStream(int)
- uid: reactor.core.publisher.Flux.<T2,V>zipWith(org.reactivestreams.Publisher<? extends T2>,int,java.util.function.BiFunction<? super T,? super T2,? extends V>)
  name: Flux.<T2,V>zipWith(Publisher<? extends T2>,int,BiFunction<? super T,? super T2,? extends V>)
  nameWithType: Flux.<T2,V>zipWith(Publisher<? extends T2>,int,BiFunction<? super T,? super T2,? extends V>)
  fullName: reactor.core.publisher.Flux.<T2,V>zipWith(org.reactivestreams.Publisher<? extends T2>,int,java.util.function.BiFunction<? super T,? super T2,? extends V>)
- uid: reactor.core.publisher.Flux.<C>bufferTimeout(int,java.time.Duration,java.util.function.Supplier<C>)
  name: Flux.<C>bufferTimeout(int,Duration,Supplier<C>)
  nameWithType: Flux.<C>bufferTimeout(int,Duration,Supplier<C>)
  fullName: reactor.core.publisher.Flux.<C>bufferTimeout(int,java.time.Duration,java.util.function.Supplier<C>)
- uid: reactor.core.publisher.Flux.toIterable(int,java.util.function.Supplier<java.util.Queue<T>>)
  name: Flux.toIterable(int,Supplier<Queue<T>>)
  nameWithType: Flux.toIterable(int,Supplier<Queue<T>>)
  fullName: reactor.core.publisher.Flux.toIterable(int,java.util.function.Supplier<java.util.Queue<T>>)
- uid: reactor.core.publisher.Flux.<I>mergeSequentialDelayError(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>,int,int)
  name: Flux.<I>mergeSequentialDelayError(Iterable<? extends Publisher<? extends I>>,int,int)
  nameWithType: Flux.<I>mergeSequentialDelayError(Iterable<? extends Publisher<? extends I>>,int,int)
  fullName: reactor.core.publisher.Flux.<I>mergeSequentialDelayError(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>,int,int)
- uid: reactor.core.publisher.Flux.<O>error(java.lang.Throwable,boolean)
  name: Flux.<O>error(Throwable,boolean)
  nameWithType: Flux.<O>error(Throwable,boolean)
  fullName: reactor.core.publisher.Flux.<O>error(java.lang.Throwable,boolean)
- uid: reactor.core.publisher.Flux.windowUntil(java.util.function.Predicate<T>,boolean)
  name: Flux.windowUntil(Predicate<T>,boolean)
  nameWithType: Flux.windowUntil(Predicate<T>,boolean)
  fullName: reactor.core.publisher.Flux.windowUntil(java.util.function.Predicate<T>,boolean)
- uid: reactor.core.publisher.Flux.onTerminateDetach()
  name: Flux.onTerminateDetach()
  nameWithType: Flux.onTerminateDetach()
  fullName: reactor.core.publisher.Flux.onTerminateDetach()
- uid: reactor.core.publisher.Flux.<T>push(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>)
  name: Flux.<T>push(Consumer<? super FluxSink<T>>)
  nameWithType: Flux.<T>push(Consumer<? super FluxSink<T>>)
  fullName: reactor.core.publisher.Flux.<T>push(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>)
- uid: reactor.core.publisher.Flux.<T>fromArray(T[])
  name: Flux.<T>fromArray(T[])
  nameWithType: Flux.<T>fromArray(T[])
  fullName: reactor.core.publisher.Flux.<T>fromArray(T[])
- uid: reactor.core.publisher.Flux.delaySubscription(java.time.Duration,reactor.core.scheduler.Scheduler)
  name: Flux.delaySubscription(Duration,Scheduler)
  nameWithType: Flux.delaySubscription(Duration,Scheduler)
  fullName: reactor.core.publisher.Flux.delaySubscription(java.time.Duration,reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.filterWhen(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<java.lang.Boolean>>)
  name: Flux.filterWhen(Function<? super T,? extends Publisher<Boolean>>)
  nameWithType: Flux.filterWhen(Function<? super T,? extends Publisher<Boolean>>)
  fullName: reactor.core.publisher.Flux.filterWhen(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<java.lang.Boolean>>)
- uid: reactor.core.publisher.Flux.<V>switchOnFirst(java.util.function.BiFunction<reactor.core.publisher.Signal<? extends T>,reactor.core.publisher.Flux<T>,org.reactivestreams.Publisher<? extends V>>,boolean)
  name: Flux.<V>switchOnFirst(BiFunction<Signal<? extends T>,Flux<T>,Publisher<? extends V>>,boolean)
  nameWithType: Flux.<V>switchOnFirst(BiFunction<Signal<? extends T>,Flux<T>,Publisher<? extends V>>,boolean)
  fullName: reactor.core.publisher.Flux.<V>switchOnFirst(java.util.function.BiFunction<reactor.core.publisher.Signal<? extends T>,reactor.core.publisher.Flux<T>,org.reactivestreams.Publisher<? extends V>>,boolean)
- uid: reactor.core.publisher.Flux.timestamp()
  name: Flux.timestamp()
  nameWithType: Flux.timestamp()
  fullName: reactor.core.publisher.Flux.timestamp()
- uid: reactor.core.publisher.Flux.<K,V>groupBy(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  name: Flux.<K,V>groupBy(Function<? super T,? extends K>,Function<? super T,? extends V>)
  nameWithType: Flux.<K,V>groupBy(Function<? super T,? extends K>,Function<? super T,? extends V>)
  fullName: reactor.core.publisher.Flux.<K,V>groupBy(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
- uid: reactor.core.publisher.Flux.<V>windowUntilChanged(java.util.function.Function<? super T,? super V>)
  name: Flux.<V>windowUntilChanged(Function<? super T,? super V>)
  nameWithType: Flux.<V>windowUntilChanged(Function<? super T,? super V>)
  fullName: reactor.core.publisher.Flux.<V>windowUntilChanged(java.util.function.Function<? super T,? super V>)
- uid: reactor.core.publisher.Flux.windowWhile(java.util.function.Predicate<T>)
  name: Flux.windowWhile(Predicate<T>)
  nameWithType: Flux.windowWhile(Predicate<T>)
  fullName: reactor.core.publisher.Flux.windowWhile(java.util.function.Predicate<T>)
- uid: reactor.core.publisher.Flux.onErrorMap(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Function<? super java.lang.Throwable,? extends java.lang.Throwable>)
  name: Flux.onErrorMap(Predicate<? super Throwable>,Function<? super Throwable,? extends Throwable>)
  nameWithType: Flux.onErrorMap(Predicate<? super Throwable>,Function<? super Throwable,? extends Throwable>)
  fullName: reactor.core.publisher.Flux.onErrorMap(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Function<? super java.lang.Throwable,? extends java.lang.Throwable>)
- uid: reactor.core.publisher.Flux.<T,D>using(java.util.concurrent.Callable<? extends D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Consumer<? super D>,boolean)
  name: Flux.<T,D>using(Callable<? extends D>,Function<? super D,? extends Publisher<? extends T>>,Consumer<? super D>,boolean)
  nameWithType: Flux.<T,D>using(Callable<? extends D>,Function<? super D,? extends Publisher<? extends T>>,Consumer<? super D>,boolean)
  fullName: reactor.core.publisher.Flux.<T,D>using(java.util.concurrent.Callable<? extends D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Consumer<? super D>,boolean)
- uid: reactor.core.publisher.Flux.<I,O>zip(java.util.function.Function<? super java.lang.Object[],? extends O>,int,org.reactivestreams.Publisher<? extends I>...)
  name: Flux.<I,O>zip(Function<? super Object[],? extends O>,int,Publisher<? extends I>...)
  nameWithType: Flux.<I,O>zip(Function<? super Object[],? extends O>,int,Publisher<? extends I>...)
  fullName: reactor.core.publisher.Flux.<I,O>zip(java.util.function.Function<? super java.lang.Object[],? extends O>,int,org.reactivestreams.Publisher<? extends I>...)
- uid: reactor.core.publisher.Flux.buffer(java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)
  name: Flux.buffer(Duration,Duration,Scheduler)
  nameWithType: Flux.buffer(Duration,Duration,Scheduler)
  fullName: reactor.core.publisher.Flux.buffer(java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.<R>flatMapSequential(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>)
  name: Flux.<R>flatMapSequential(Function<? super T,? extends Publisher<? extends R>>)
  nameWithType: Flux.<R>flatMapSequential(Function<? super T,? extends Publisher<? extends R>>)
  fullName: reactor.core.publisher.Flux.<R>flatMapSequential(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>)
- uid: reactor.core.publisher.Flux.<T,V>combineLatest(java.util.function.Function<java.lang.Object[],V>,org.reactivestreams.Publisher<? extends T>...)
  name: Flux.<T,V>combineLatest(Function<Object[],V>,Publisher<? extends T>...)
  nameWithType: Flux.<T,V>combineLatest(Function<Object[],V>,Publisher<? extends T>...)
  fullName: reactor.core.publisher.Flux.<T,V>combineLatest(java.util.function.Function<java.lang.Object[],V>,org.reactivestreams.Publisher<? extends T>...)
- uid: reactor.core.publisher.Flux.replay(int)
  name: Flux.replay(int)
  nameWithType: Flux.replay(int)
  fullName: reactor.core.publisher.Flux.replay(int)
- uid: reactor.core.publisher.Flux.windowTimeout(int,java.time.Duration)
  name: Flux.windowTimeout(int,Duration)
  nameWithType: Flux.windowTimeout(int,Duration)
  fullName: reactor.core.publisher.Flux.windowTimeout(int,java.time.Duration)
- uid: reactor.core.publisher.Flux.<A>scanWith(java.util.function.Supplier<A>,java.util.function.BiFunction<A,? super T,A>)
  name: Flux.<A>scanWith(Supplier<A>,BiFunction<A,? super T,A>)
  nameWithType: Flux.<A>scanWith(Supplier<A>,BiFunction<A,? super T,A>)
  fullName: reactor.core.publisher.Flux.<A>scanWith(java.util.function.Supplier<A>,java.util.function.BiFunction<A,? super T,A>)
- uid: reactor.core.publisher.Flux.<E>cast(java.lang.Class<E>)
  name: Flux.<E>cast(Class<E>)
  nameWithType: Flux.<E>cast(Class<E>)
  fullName: reactor.core.publisher.Flux.<E>cast(java.lang.Class<E>)
- uid: reactor.core.publisher.Flux.<V>concatMapDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int)
  name: Flux.<V>concatMapDelayError(Function<? super T,? extends Publisher<? extends V>>,int)
  nameWithType: Flux.<V>concatMapDelayError(Function<? super T,? extends Publisher<? extends V>>,int)
  fullName: reactor.core.publisher.Flux.<V>concatMapDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int)
- uid: reactor.core.publisher.Flux.<U,V>bufferWhen(org.reactivestreams.Publisher<U>,java.util.function.Function<? super U,? extends org.reactivestreams.Publisher<V>>)
  name: Flux.<U,V>bufferWhen(Publisher<U>,Function<? super U,? extends Publisher<V>>)
  nameWithType: Flux.<U,V>bufferWhen(Publisher<U>,Function<? super U,? extends Publisher<V>>)
  fullName: reactor.core.publisher.Flux.<U,V>bufferWhen(org.reactivestreams.Publisher<U>,java.util.function.Function<? super U,? extends org.reactivestreams.Publisher<V>>)
- uid: reactor.core.publisher.Flux.expand(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>)
  name: Flux.expand(Function<? super T,? extends Publisher<? extends T>>)
  nameWithType: Flux.expand(Function<? super T,? extends Publisher<? extends T>>)
  fullName: reactor.core.publisher.Flux.expand(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>)
- uid: reactor.core.publisher.Flux.<T>never()
  name: Flux.<T>never()
  nameWithType: Flux.<T>never()
  fullName: reactor.core.publisher.Flux.<T>never()
- uid: reactor.core.publisher.Flux.<R>flatMapSequentialDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,int,int)
  name: Flux.<R>flatMapSequentialDelayError(Function<? super T,? extends Publisher<? extends R>>,int,int)
  nameWithType: Flux.<R>flatMapSequentialDelayError(Function<? super T,? extends Publisher<? extends R>>,int,int)
  fullName: reactor.core.publisher.Flux.<R>flatMapSequentialDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,int,int)
- uid: reactor.core.publisher.Flux.retryWhen(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Throwable>,? extends org.reactivestreams.Publisher<?>>)
  name: Flux.retryWhen(Function<Flux<Throwable>,? extends Publisher<?>>)
  nameWithType: Flux.retryWhen(Function<Flux<Throwable>,? extends Publisher<?>>)
  fullName: reactor.core.publisher.Flux.retryWhen(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Throwable>,? extends org.reactivestreams.Publisher<?>>)
- uid: reactor.core.publisher.Flux.onBackpressureBuffer(java.time.Duration,int,java.util.function.Consumer<? super T>,reactor.core.scheduler.Scheduler)
  name: Flux.onBackpressureBuffer(Duration,int,Consumer<? super T>,Scheduler)
  nameWithType: Flux.onBackpressureBuffer(Duration,int,Consumer<? super T>,Scheduler)
  fullName: reactor.core.publisher.Flux.onBackpressureBuffer(java.time.Duration,int,java.util.function.Consumer<? super T>,reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.<U>ofType(java.lang.Class<U>)
  name: Flux.<U>ofType(Class<U>)
  nameWithType: Flux.<U>ofType(Class<U>)
  fullName: reactor.core.publisher.Flux.<U>ofType(java.lang.Class<U>)
- uid: reactor.core.publisher.Flux.onBackpressureLatest()
  name: Flux.onBackpressureLatest()
  nameWithType: Flux.onBackpressureLatest()
  fullName: reactor.core.publisher.Flux.onBackpressureLatest()
- uid: reactor.core.publisher.Flux.<E>onErrorResume(java.lang.Class<E>,java.util.function.Function<? super E,? extends org.reactivestreams.Publisher<? extends T>>)
  name: Flux.<E>onErrorResume(Class<E>,Function<? super E,? extends Publisher<? extends T>>)
  nameWithType: Flux.<E>onErrorResume(Class<E>,Function<? super E,? extends Publisher<? extends T>>)
  fullName: reactor.core.publisher.Flux.<E>onErrorResume(java.lang.Class<E>,java.util.function.Function<? super E,? extends org.reactivestreams.Publisher<? extends T>>)
- uid: reactor.core.publisher.Flux.<T>mergeSequential(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int,int)
  name: Flux.<T>mergeSequential(Publisher<? extends Publisher<? extends T>>,int,int)
  nameWithType: Flux.<T>mergeSequential(Publisher<? extends Publisher<? extends T>>,int,int)
  fullName: reactor.core.publisher.Flux.<T>mergeSequential(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int,int)
- uid: reactor.core.publisher.Flux.<T,D>using(java.util.concurrent.Callable<? extends D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Consumer<? super D>)
  name: Flux.<T,D>using(Callable<? extends D>,Function<? super D,? extends Publisher<? extends T>>,Consumer<? super D>)
  nameWithType: Flux.<T,D>using(Callable<? extends D>,Function<? super D,? extends Publisher<? extends T>>,Consumer<? super D>)
  fullName: reactor.core.publisher.Flux.<T,D>using(java.util.concurrent.Callable<? extends D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Consumer<? super D>)
- uid: reactor.core.publisher.Flux.startWith(T...)
  name: Flux.startWith(T)
  nameWithType: Flux.startWith(T)
  fullName: reactor.core.publisher.Flux.startWith(T...)
- uid: reactor.core.publisher.Flux.take(java.time.Duration,reactor.core.scheduler.Scheduler)
  name: Flux.take(Duration,Scheduler)
  nameWithType: Flux.take(Duration,Scheduler)
  fullName: reactor.core.publisher.Flux.take(java.time.Duration,reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.<T>merge(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int,int)
  name: Flux.<T>merge(Publisher<? extends Publisher<? extends T>>,int,int)
  nameWithType: Flux.<T>merge(Publisher<? extends Publisher<? extends T>>,int,int)
  fullName: reactor.core.publisher.Flux.<T>merge(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int,int)
- uid: reactor.core.publisher.Flux.<V>thenMany(org.reactivestreams.Publisher<V>)
  name: Flux.<V>thenMany(Publisher<V>)
  nameWithType: Flux.<V>thenMany(Publisher<V>)
  fullName: reactor.core.publisher.Flux.<V>thenMany(org.reactivestreams.Publisher<V>)
- uid: reactor.core.publisher.Flux.cache(java.time.Duration)
  name: Flux.cache(Duration)
  nameWithType: Flux.cache(Duration)
  fullName: reactor.core.publisher.Flux.cache(java.time.Duration)
- uid: reactor.core.publisher.Flux.subscribe(org.reactivestreams.Subscriber<? super T>)
  name: Flux.subscribe(Subscriber<? super T>)
  nameWithType: Flux.subscribe(Subscriber<? super T>)
  fullName: reactor.core.publisher.Flux.subscribe(org.reactivestreams.Subscriber<? super T>)
- uid: reactor.core.publisher.Flux.hasElement(T)
  name: Flux.hasElement(T)
  nameWithType: Flux.hasElement(T)
  fullName: reactor.core.publisher.Flux.hasElement(T)
- uid: reactor.core.publisher.Flux.skipUntilOther(org.reactivestreams.Publisher<?>)
  name: Flux.skipUntilOther(Publisher<?>)
  nameWithType: Flux.skipUntilOther(Publisher<?>)
  fullName: reactor.core.publisher.Flux.skipUntilOther(org.reactivestreams.Publisher<?>)
- uid: reactor.core.publisher.Flux.doFirst(java.lang.Runnable)
  name: Flux.doFirst(Runnable)
  nameWithType: Flux.doFirst(Runnable)
  fullName: reactor.core.publisher.Flux.doFirst(java.lang.Runnable)
- uid: reactor.core.publisher.Flux.<T>concat(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int)
  name: Flux.<T>concat(Publisher<? extends Publisher<? extends T>>,int)
  nameWithType: Flux.<T>concat(Publisher<? extends Publisher<? extends T>>,int)
  fullName: reactor.core.publisher.Flux.<T>concat(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int)
- uid: reactor.core.publisher.Flux.collectList()
  name: Flux.collectList()
  nameWithType: Flux.collectList()
  fullName: reactor.core.publisher.Flux.collectList()
- uid: reactor.core.publisher.Flux.metrics()
  name: Flux.metrics()
  nameWithType: Flux.metrics()
  fullName: reactor.core.publisher.Flux.metrics()
- uid: reactor.core.publisher.Flux.cache()
  name: Flux.cache()
  nameWithType: Flux.cache()
  fullName: reactor.core.publisher.Flux.cache()
- uid: reactor.core.publisher.Flux.onBackpressureBuffer()
  name: Flux.onBackpressureBuffer()
  nameWithType: Flux.onBackpressureBuffer()
  fullName: reactor.core.publisher.Flux.onBackpressureBuffer()
- uid: reactor.core.publisher.Flux.<R>publish(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<? extends R>>,int)
  name: Flux.<R>publish(Function<? super Flux<T>,? extends Publisher<? extends R>>,int)
  nameWithType: Flux.<R>publish(Function<? super Flux<T>,? extends Publisher<? extends R>>,int)
  fullName: reactor.core.publisher.Flux.<R>publish(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<? extends R>>,int)
- uid: reactor.core.publisher.Flux.retryBackoff(long,java.time.Duration,java.time.Duration,double,reactor.core.scheduler.Scheduler)
  name: Flux.retryBackoff(long,Duration,Duration,double,Scheduler)
  nameWithType: Flux.retryBackoff(long,Duration,Duration,double,Scheduler)
  fullName: reactor.core.publisher.Flux.retryBackoff(long,java.time.Duration,java.time.Duration,double,reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.next()
  name: Flux.next()
  nameWithType: Flux.next()
  fullName: reactor.core.publisher.Flux.next()
- uid: reactor.core.publisher.Flux.<T>from(org.reactivestreams.Publisher<? extends T>)
  name: Flux.<T>from(Publisher<? extends T>)
  nameWithType: Flux.<T>from(Publisher<? extends T>)
  fullName: reactor.core.publisher.Flux.<T>from(org.reactivestreams.Publisher<? extends T>)
- uid: reactor.core.publisher.Flux.<E>doOnError(java.lang.Class<E>,java.util.function.Consumer<? super E>)
  name: Flux.<E>doOnError(Class<E>,Consumer<? super E>)
  nameWithType: Flux.<E>doOnError(Class<E>,Consumer<? super E>)
  fullName: reactor.core.publisher.Flux.<E>doOnError(java.lang.Class<E>,java.util.function.Consumer<? super E>)
- uid: reactor.core.publisher.Flux.parallel(int)
  name: Flux.parallel(int)
  nameWithType: Flux.parallel(int)
  fullName: reactor.core.publisher.Flux.parallel(int)
- uid: reactor.core.publisher.Flux.takeLast(int)
  name: Flux.takeLast(int)
  nameWithType: Flux.takeLast(int)
  fullName: reactor.core.publisher.Flux.takeLast(int)
- uid: reactor.core.publisher.Flux.<T>empty()
  name: Flux.<T>empty()
  nameWithType: Flux.<T>empty()
  fullName: reactor.core.publisher.Flux.<T>empty()
- uid: reactor.core.publisher.Flux.<T>switchOnNext(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)
  name: Flux.<T>switchOnNext(Publisher<? extends Publisher<? extends T>>)
  nameWithType: Flux.<T>switchOnNext(Publisher<? extends Publisher<? extends T>>)
  fullName: reactor.core.publisher.Flux.<T>switchOnNext(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)
- uid: reactor.core.publisher.Flux.<P>as(java.util.function.Function<? super reactor.core.publisher.Flux<T>,P>)
  name: Flux.<P>as(Function<? super Flux<T>,P>)
  nameWithType: Flux.<P>as(Function<? super Flux<T>,P>)
  fullName: reactor.core.publisher.Flux.<P>as(java.util.function.Function<? super reactor.core.publisher.Flux<T>,P>)
- uid: reactor.core.publisher.Flux.<V>bufferUntilChanged(java.util.function.Function<? super T,? extends V>,java.util.function.BiPredicate<? super V,? super V>)
  name: Flux.<V>bufferUntilChanged(Function<? super T,? extends V>,BiPredicate<? super V,? super V>)
  nameWithType: Flux.<V>bufferUntilChanged(Function<? super T,? extends V>,BiPredicate<? super V,? super V>)
  fullName: reactor.core.publisher.Flux.<V>bufferUntilChanged(java.util.function.Function<? super T,? extends V>,java.util.function.BiPredicate<? super V,? super V>)
- uid: reactor.core.publisher.Flux.buffer(java.time.Duration,reactor.core.scheduler.Scheduler)
  name: Flux.buffer(Duration,Scheduler)
  nameWithType: Flux.buffer(Duration,Scheduler)
  fullName: reactor.core.publisher.Flux.buffer(java.time.Duration,reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.<V>windowUntilChanged(java.util.function.Function<? super T,? extends V>,java.util.function.BiPredicate<? super V,? super V>)
  name: Flux.<V>windowUntilChanged(Function<? super T,? extends V>,BiPredicate<? super V,? super V>)
  nameWithType: Flux.<V>windowUntilChanged(Function<? super T,? extends V>,BiPredicate<? super V,? super V>)
  fullName: reactor.core.publisher.Flux.<V>windowUntilChanged(java.util.function.Function<? super T,? extends V>,java.util.function.BiPredicate<? super V,? super V>)
- uid: reactor.core.publisher.Flux.<A>reduce(A,java.util.function.BiFunction<A,? super T,A>)
  name: Flux.<A>reduce(A,BiFunction<A,? super T,A>)
  nameWithType: Flux.<A>reduce(A,BiFunction<A,? super T,A>)
  fullName: reactor.core.publisher.Flux.<A>reduce(A,java.util.function.BiFunction<A,? super T,A>)
- uid: reactor.core.publisher.Flux.sort(java.util.Comparator<? super T>)
  name: Flux.sort(Comparator<? super T>)
  nameWithType: Flux.sort(Comparator<? super T>)
  fullName: reactor.core.publisher.Flux.sort(java.util.Comparator<? super T>)
- uid: reactor.core.publisher.Flux.<T>concatDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,boolean,int)
  name: Flux.<T>concatDelayError(Publisher<? extends Publisher<? extends T>>,boolean,int)
  nameWithType: Flux.<T>concatDelayError(Publisher<? extends Publisher<? extends T>>,boolean,int)
  fullName: reactor.core.publisher.Flux.<T>concatDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,boolean,int)
- uid: reactor.core.publisher.Flux.parallel(int,int)
  name: Flux.parallel(int,int)
  nameWithType: Flux.parallel(int,int)
  fullName: reactor.core.publisher.Flux.parallel(int,int)
- uid: reactor.core.publisher.Flux.blockFirst(java.time.Duration)
  name: Flux.blockFirst(Duration)
  nameWithType: Flux.blockFirst(Duration)
  fullName: reactor.core.publisher.Flux.blockFirst(java.time.Duration)
- uid: reactor.core.publisher.Flux.skipUntil(java.util.function.Predicate<? super T>)
  name: Flux.skipUntil(Predicate<? super T>)
  nameWithType: Flux.skipUntil(Predicate<? super T>)
  fullName: reactor.core.publisher.Flux.skipUntil(java.util.function.Predicate<? super T>)
- uid: reactor.core.publisher.Flux.cache(int,java.time.Duration,reactor.core.scheduler.Scheduler)
  name: Flux.cache(int,Duration,Scheduler)
  nameWithType: Flux.cache(int,Duration,Scheduler)
  fullName: reactor.core.publisher.Flux.cache(int,java.time.Duration,reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.onBackpressureBuffer(java.time.Duration,int,java.util.function.Consumer<? super T>)
  name: Flux.onBackpressureBuffer(Duration,int,Consumer<? super T>)
  nameWithType: Flux.onBackpressureBuffer(Duration,int,Consumer<? super T>)
  fullName: reactor.core.publisher.Flux.onBackpressureBuffer(java.time.Duration,int,java.util.function.Consumer<? super T>)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: reactor.core.publisher.Flux.<T,S>generate(java.util.concurrent.Callable<S>,java.util.function.BiFunction<S,reactor.core.publisher.SynchronousSink<T>,S>,java.util.function.Consumer<? super S>)
  name: Flux.<T,S>generate(Callable<S>,BiFunction<S,SynchronousSink<T>,S>,Consumer<? super S>)
  nameWithType: Flux.<T,S>generate(Callable<S>,BiFunction<S,SynchronousSink<T>,S>,Consumer<? super S>)
  fullName: reactor.core.publisher.Flux.<T,S>generate(java.util.concurrent.Callable<S>,java.util.function.BiFunction<S,reactor.core.publisher.SynchronousSink<T>,S>,java.util.function.Consumer<? super S>)
- uid: reactor.core.publisher.Flux.<T>onAssembly(reactor.core.publisher.Flux<T>)
  name: Flux.<T>onAssembly(Flux<T>)
  nameWithType: Flux.<T>onAssembly(Flux<T>)
  fullName: reactor.core.publisher.Flux.<T>onAssembly(reactor.core.publisher.Flux<T>)
- uid: reactor.core.publisher.Flux.sort()
  name: Flux.sort()
  nameWithType: Flux.sort()
  fullName: reactor.core.publisher.Flux.sort()
- uid: reactor.core.publisher.Flux.repeat(long)
  name: Flux.repeat(long)
  nameWithType: Flux.repeat(long)
  fullName: reactor.core.publisher.Flux.repeat(long)
- uid: reactor.core.publisher.Flux.cache(int)
  name: Flux.cache(int)
  nameWithType: Flux.cache(int)
  fullName: reactor.core.publisher.Flux.cache(int)
- uid: reactor.core.publisher.Flux.<I>mergeSequential(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>,int,int)
  name: Flux.<I>mergeSequential(Iterable<? extends Publisher<? extends I>>,int,int)
  nameWithType: Flux.<I>mergeSequential(Iterable<? extends Publisher<? extends I>>,int,int)
  fullName: reactor.core.publisher.Flux.<I>mergeSequential(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>,int,int)
- uid: reactor.core.publisher.Flux.onErrorReturn(java.util.function.Predicate<? super java.lang.Throwable>,T)
  name: Flux.onErrorReturn(Predicate<? super Throwable>,T)
  nameWithType: Flux.onErrorReturn(Predicate<? super Throwable>,T)
  fullName: reactor.core.publisher.Flux.onErrorReturn(java.util.function.Predicate<? super java.lang.Throwable>,T)
- uid: reactor.core.publisher.Flux.onErrorReturn(T)
  name: Flux.onErrorReturn(T)
  nameWithType: Flux.onErrorReturn(T)
  fullName: reactor.core.publisher.Flux.onErrorReturn(T)
- uid: reactor.core.publisher.Flux.<U>sampleFirst(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<U>>)
  name: Flux.<U>sampleFirst(Function<? super T,? extends Publisher<U>>)
  nameWithType: Flux.<U>sampleFirst(Function<? super T,? extends Publisher<U>>)
  fullName: reactor.core.publisher.Flux.<U>sampleFirst(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<U>>)
- uid: reactor.core.publisher.Flux.doAfterTerminate(java.lang.Runnable)
  name: Flux.doAfterTerminate(Runnable)
  nameWithType: Flux.doAfterTerminate(Runnable)
  fullName: reactor.core.publisher.Flux.doAfterTerminate(java.lang.Runnable)
- uid: reactor.core.publisher.Flux.mergeWith(org.reactivestreams.Publisher<? extends T>)
  name: Flux.mergeWith(Publisher<? extends T>)
  nameWithType: Flux.mergeWith(Publisher<? extends T>)
  fullName: reactor.core.publisher.Flux.mergeWith(org.reactivestreams.Publisher<? extends T>)
- uid: reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable,reactor.util.context.Context)
  name: Flux.subscribe(Consumer<? super T>,Consumer<? super Throwable>,Runnable,Context)
  nameWithType: Flux.subscribe(Consumer<? super T>,Consumer<? super Throwable>,Runnable,Context)
  fullName: reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable,reactor.util.context.Context)
- uid: reactor.core.publisher.Flux.concatWith(org.reactivestreams.Publisher<? extends T>)
  name: Flux.concatWith(Publisher<? extends T>)
  nameWithType: Flux.concatWith(Publisher<? extends T>)
  fullName: reactor.core.publisher.Flux.concatWith(org.reactivestreams.Publisher<? extends T>)
- uid: reactor.core.publisher.Flux.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)
  name: Flux.<T,D>usingWhen(Publisher<D>,Function<? super D,? extends Publisher<? extends T>>,Function<? super D,? extends Publisher<?>>,Function<? super D,? extends Publisher<?>>,Function<? super D,? extends Publisher<?>>)
  nameWithType: Flux.<T,D>usingWhen(Publisher<D>,Function<? super D,? extends Publisher<? extends T>>,Function<? super D,? extends Publisher<?>>,Function<? super D,? extends Publisher<?>>,Function<? super D,? extends Publisher<?>>)
  fullName: reactor.core.publisher.Flux.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)
- uid: reactor.core.publisher.Flux.subscribeOn(reactor.core.scheduler.Scheduler,boolean)
  name: Flux.subscribeOn(Scheduler,boolean)
  nameWithType: Flux.subscribeOn(Scheduler,boolean)
  fullName: reactor.core.publisher.Flux.subscribeOn(reactor.core.scheduler.Scheduler,boolean)
- uid: reactor.core.publisher.Flux.<I>merge(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>)
  name: Flux.<I>merge(Iterable<? extends Publisher<? extends I>>)
  nameWithType: Flux.<I>merge(Iterable<? extends Publisher<? extends I>>)
  fullName: reactor.core.publisher.Flux.<I>merge(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>)
- uid: reactor.core.publisher.Flux.buffer(java.time.Duration,java.time.Duration)
  name: Flux.buffer(Duration,Duration)
  nameWithType: Flux.buffer(Duration,Duration)
  fullName: reactor.core.publisher.Flux.buffer(java.time.Duration,java.time.Duration)
- uid: reactor.core.publisher.Flux.<TUPLE,V>zip(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super TUPLE,? extends V>)
  name: Flux.<TUPLE,V>zip(Publisher<? extends Publisher<?>>,Function<? super TUPLE,? extends V>)
  nameWithType: Flux.<TUPLE,V>zip(Publisher<? extends Publisher<?>>,Function<? super TUPLE,? extends V>)
  fullName: reactor.core.publisher.Flux.<TUPLE,V>zip(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super TUPLE,? extends V>)
- uid: reactor.core.publisher.Flux.<I,O>zip(java.util.function.Function<? super java.lang.Object[],? extends O>,org.reactivestreams.Publisher<? extends I>...)
  name: Flux.<I,O>zip(Function<? super Object[],? extends O>,Publisher<? extends I>...)
  nameWithType: Flux.<I,O>zip(Function<? super Object[],? extends O>,Publisher<? extends I>...)
  fullName: reactor.core.publisher.Flux.<I,O>zip(java.util.function.Function<? super java.lang.Object[],? extends O>,org.reactivestreams.Publisher<? extends I>...)
- uid: reactor.core.publisher.Flux.timeout(java.time.Duration,reactor.core.scheduler.Scheduler)
  name: Flux.timeout(Duration,Scheduler)
  nameWithType: Flux.timeout(Duration,Scheduler)
  fullName: reactor.core.publisher.Flux.timeout(java.time.Duration,reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.log()
  name: Flux.log()
  nameWithType: Flux.log()
  fullName: reactor.core.publisher.Flux.log()
- uid: reactor.core.publisher.Flux.parallel()
  name: Flux.parallel()
  nameWithType: Flux.parallel()
  fullName: reactor.core.publisher.Flux.parallel()
- uid: reactor.core.publisher.Flux.replay(int,java.time.Duration)
  name: Flux.replay(int,Duration)
  nameWithType: Flux.replay(int,Duration)
  fullName: reactor.core.publisher.Flux.replay(int,java.time.Duration)
- uid: reactor.core.publisher.Flux.<E>onErrorMap(java.lang.Class<E>,java.util.function.Function<? super E,? extends java.lang.Throwable>)
  name: Flux.<E>onErrorMap(Class<E>,Function<? super E,? extends Throwable>)
  nameWithType: Flux.<E>onErrorMap(Class<E>,Function<? super E,? extends Throwable>)
  fullName: reactor.core.publisher.Flux.<E>onErrorMap(java.lang.Class<E>,java.util.function.Function<? super E,? extends java.lang.Throwable>)
- uid: reactor.core.publisher.Flux.subscriberContext(java.util.function.Function<reactor.util.context.Context,reactor.util.context.Context>)
  name: Flux.subscriberContext(Function<Context,Context>)
  nameWithType: Flux.subscriberContext(Function<Context,Context>)
  fullName: reactor.core.publisher.Flux.subscriberContext(java.util.function.Function<reactor.util.context.Context,reactor.util.context.Context>)
- uid: reactor.core.publisher.Flux.single()
  name: Flux.single()
  nameWithType: Flux.single()
  fullName: reactor.core.publisher.Flux.single()
- uid: reactor.core.publisher.Flux.log(reactor.util.Logger,java.util.logging.Level,boolean,reactor.core.publisher.SignalType...)
  name: Flux.log(Logger,Level,boolean,SignalType)
  nameWithType: Flux.log(Logger,Level,boolean,SignalType)
  fullName: reactor.core.publisher.Flux.log(reactor.util.Logger,java.util.logging.Level,boolean,reactor.core.publisher.SignalType...)
- uid: reactor.core.publisher.Flux.<I>mergeSequential(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>)
  name: Flux.<I>mergeSequential(Iterable<? extends Publisher<? extends I>>)
  nameWithType: Flux.<I>mergeSequential(Iterable<? extends Publisher<? extends I>>)
  fullName: reactor.core.publisher.Flux.<I>mergeSequential(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>)
- uid: reactor.core.publisher.Flux.<V>transform(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<V>>)
  name: Flux.<V>transform(Function<? super Flux<T>,? extends Publisher<V>>)
  nameWithType: Flux.<V>transform(Function<? super Flux<T>,? extends Publisher<V>>)
  fullName: reactor.core.publisher.Flux.<V>transform(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<V>>)
- uid: reactor.core.publisher.Flux.<I>mergeOrdered(org.reactivestreams.Publisher<? extends I>...)
  name: Flux.<I>mergeOrdered(Publisher<? extends I>...)
  nameWithType: Flux.<I>mergeOrdered(Publisher<? extends I>...)
  fullName: reactor.core.publisher.Flux.<I>mergeOrdered(org.reactivestreams.Publisher<? extends I>...)
- uid: reactor.core.publisher.Flux.subscribe(reactor.core.CoreSubscriber<? super T>)
  name: Flux.subscribe(CoreSubscriber<? super T>)
  nameWithType: Flux.subscribe(CoreSubscriber<? super T>)
  fullName: reactor.core.publisher.Flux.subscribe(reactor.core.CoreSubscriber<? super T>)
- uid: reactor.core.publisher.Flux.onBackpressureBuffer(int,java.util.function.Consumer<? super T>,reactor.core.publisher.BufferOverflowStrategy)
  name: Flux.onBackpressureBuffer(int,Consumer<? super T>,BufferOverflowStrategy)
  nameWithType: Flux.onBackpressureBuffer(int,Consumer<? super T>,BufferOverflowStrategy)
  fullName: reactor.core.publisher.Flux.onBackpressureBuffer(int,java.util.function.Consumer<? super T>,reactor.core.publisher.BufferOverflowStrategy)
- uid: reactor.core.publisher.Flux.skip(java.time.Duration)
  name: Flux.skip(Duration)
  nameWithType: Flux.skip(Duration)
  fullName: reactor.core.publisher.Flux.skip(java.time.Duration)
- uid: reactor.core.publisher.Flux.<T>create(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>)
  name: Flux.<T>create(Consumer<? super FluxSink<T>>)
  nameWithType: Flux.<T>create(Consumer<? super FluxSink<T>>)
  fullName: reactor.core.publisher.Flux.<T>create(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>)
- uid: reactor.core.publisher.Flux.buffer(int,int)
  name: Flux.buffer(int,int)
  nameWithType: Flux.buffer(int,int)
  fullName: reactor.core.publisher.Flux.buffer(int,int)
- uid: reactor.core.publisher.Flux.buffer(int)
  name: Flux.buffer(int)
  nameWithType: Flux.buffer(int)
  fullName: reactor.core.publisher.Flux.buffer(int)
- uid: reactor.core.publisher.Flux.skipWhile(java.util.function.Predicate<? super T>)
  name: Flux.skipWhile(Predicate<? super T>)
  nameWithType: Flux.skipWhile(Predicate<? super T>)
  fullName: reactor.core.publisher.Flux.skipWhile(java.util.function.Predicate<? super T>)
- uid: reactor.core.publisher.Flux.<T1,T2,T3>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>)
  name: Flux.<T1,T2,T3>zip(Publisher<? extends T1>,Publisher<? extends T2>,Publisher<? extends T3>)
  nameWithType: Flux.<T1,T2,T3>zip(Publisher<? extends T1>,Publisher<? extends T2>,Publisher<? extends T3>)
  fullName: reactor.core.publisher.Flux.<T1,T2,T3>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>)
- uid: reactor.core.publisher.Flux.elementAt(int,T)
  name: Flux.elementAt(int,T)
  nameWithType: Flux.elementAt(int,T)
  fullName: reactor.core.publisher.Flux.elementAt(int,T)
- uid: reactor.core.publisher.Flux.hide()
  name: Flux.hide()
  nameWithType: Flux.hide()
  fullName: reactor.core.publisher.Flux.hide()
- uid: reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>)
  name: Flux.subscribe(Consumer<? super T>)
  nameWithType: Flux.subscribe(Consumer<? super T>)
  fullName: reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>)
- uid: reactor.core.publisher.Flux.<T>concatDelayError(org.reactivestreams.Publisher<? extends T>...)
  name: Flux.<T>concatDelayError(Publisher<? extends T>...)
  nameWithType: Flux.<T>concatDelayError(Publisher<? extends T>...)
  fullName: reactor.core.publisher.Flux.<T>concatDelayError(org.reactivestreams.Publisher<? extends T>...)
- uid: reactor.core.publisher.Flux.onBackpressureBuffer(int,reactor.core.publisher.BufferOverflowStrategy)
  name: Flux.onBackpressureBuffer(int,BufferOverflowStrategy)
  nameWithType: Flux.onBackpressureBuffer(int,BufferOverflowStrategy)
  fullName: reactor.core.publisher.Flux.onBackpressureBuffer(int,reactor.core.publisher.BufferOverflowStrategy)
- uid: reactor.core.publisher.Flux.<T2>zipWithIterable(java.lang.Iterable<? extends T2>)
  name: Flux.<T2>zipWithIterable(Iterable<? extends T2>)
  nameWithType: Flux.<T2>zipWithIterable(Iterable<? extends T2>)
  fullName: reactor.core.publisher.Flux.<T2>zipWithIterable(java.lang.Iterable<? extends T2>)
- uid: reactor.core.publisher.Flux.<I>first(org.reactivestreams.Publisher<? extends I>...)
  name: Flux.<I>first(Publisher<? extends I>...)
  nameWithType: Flux.<I>first(Publisher<? extends I>...)
  fullName: reactor.core.publisher.Flux.<I>first(org.reactivestreams.Publisher<? extends I>...)
- uid: reactor.core.publisher.Flux.<O>zip(java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super java.lang.Object[],? extends O>)
  name: Flux.<O>zip(Iterable<? extends Publisher<?>>,Function<? super Object[],? extends O>)
  nameWithType: Flux.<O>zip(Iterable<? extends Publisher<?>>,Function<? super Object[],? extends O>)
  fullName: reactor.core.publisher.Flux.<O>zip(java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super java.lang.Object[],? extends O>)
- uid: reactor.core.publisher.Flux.hasElements()
  name: Flux.hasElements()
  nameWithType: Flux.hasElements()
  fullName: reactor.core.publisher.Flux.hasElements()
- uid: reactor.core.publisher.Flux.single(T)
  name: Flux.single(T)
  nameWithType: Flux.single(T)
  fullName: reactor.core.publisher.Flux.single(T)
- uid: reactor.core.publisher.Flux.startWith(java.lang.Iterable<? extends T>)
  name: Flux.startWith(Iterable<? extends T>)
  nameWithType: Flux.startWith(Iterable<? extends T>)
  fullName: reactor.core.publisher.Flux.startWith(java.lang.Iterable<? extends T>)
- uid: reactor.core.publisher.Flux.<TRight,TLeftEnd,TRightEnd,R>join(org.reactivestreams.Publisher<? extends TRight>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<TLeftEnd>>,java.util.function.Function<? super TRight,? extends org.reactivestreams.Publisher<TRightEnd>>,java.util.function.BiFunction<? super T,? super TRight,? extends R>)
  name: Flux.<TRight,TLeftEnd,TRightEnd,R>join(Publisher<? extends TRight>,Function<? super T,? extends Publisher<TLeftEnd>>,Function<? super TRight,? extends Publisher<TRightEnd>>,BiFunction<? super T,? super TRight,? extends R>)
  nameWithType: Flux.<TRight,TLeftEnd,TRightEnd,R>join(Publisher<? extends TRight>,Function<? super T,? extends Publisher<TLeftEnd>>,Function<? super TRight,? extends Publisher<TRightEnd>>,BiFunction<? super T,? super TRight,? extends R>)
  fullName: reactor.core.publisher.Flux.<TRight,TLeftEnd,TRightEnd,R>join(org.reactivestreams.Publisher<? extends TRight>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<TLeftEnd>>,java.util.function.Function<? super TRight,? extends org.reactivestreams.Publisher<TRightEnd>>,java.util.function.BiFunction<? super T,? super TRight,? extends R>)
- uid: reactor.core.publisher.Flux.<T>push(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>,reactor.core.publisher.FluxSink.OverflowStrategy)
  name: Flux.<T>push(Consumer<? super FluxSink<T>>,FluxSink.OverflowStrategy)
  nameWithType: Flux.<T>push(Consumer<? super FluxSink<T>>,FluxSink.OverflowStrategy)
  fullName: reactor.core.publisher.Flux.<T>push(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>,reactor.core.publisher.FluxSink.OverflowStrategy)
- uid: reactor.core.publisher.Flux.replay(int,java.time.Duration,reactor.core.scheduler.Scheduler)
  name: Flux.replay(int,Duration,Scheduler)
  nameWithType: Flux.replay(int,Duration,Scheduler)
  fullName: reactor.core.publisher.Flux.replay(int,java.time.Duration,reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.doOnCancel(java.lang.Runnable)
  name: Flux.doOnCancel(Runnable)
  nameWithType: Flux.doOnCancel(Runnable)
  fullName: reactor.core.publisher.Flux.doOnCancel(java.lang.Runnable)
- uid: reactor.core.publisher.Flux.<V>flatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int)
  name: Flux.<V>flatMap(Function<? super T,? extends Publisher<? extends V>>,int)
  nameWithType: Flux.<V>flatMap(Function<? super T,? extends Publisher<? extends V>>,int)
  fullName: reactor.core.publisher.Flux.<V>flatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int)
- uid: reactor.core.publisher.Flux.<T>fromStream(java.util.function.Supplier<java.util.stream.Stream<? extends T>>)
  name: Flux.<T>fromStream(Supplier<Stream<? extends T>>)
  nameWithType: Flux.<T>fromStream(Supplier<Stream<? extends T>>)
  fullName: reactor.core.publisher.Flux.<T>fromStream(java.util.function.Supplier<java.util.stream.Stream<? extends T>>)
- uid: reactor.core.publisher.Flux.range(int,int)
  name: Flux.range(int,int)
  nameWithType: Flux.range(int,int)
  fullName: reactor.core.publisher.Flux.range(int,int)
- uid: reactor.core.publisher.Flux.onErrorResume(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Function<? super java.lang.Throwable,? extends org.reactivestreams.Publisher<? extends T>>)
  name: Flux.onErrorResume(Predicate<? super Throwable>,Function<? super Throwable,? extends Publisher<? extends T>>)
  nameWithType: Flux.onErrorResume(Predicate<? super Throwable>,Function<? super Throwable,? extends Publisher<? extends T>>)
  fullName: reactor.core.publisher.Flux.onErrorResume(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Function<? super java.lang.Throwable,? extends org.reactivestreams.Publisher<? extends T>>)
- uid: reactor.core.publisher.Flux.<T,V>combineLatest(java.util.function.Function<java.lang.Object[],V>,int,org.reactivestreams.Publisher<? extends T>...)
  name: Flux.<T,V>combineLatest(Function<Object[],V>,int,Publisher<? extends T>...)
  nameWithType: Flux.<T,V>combineLatest(Function<Object[],V>,int,Publisher<? extends T>...)
  fullName: reactor.core.publisher.Flux.<T,V>combineLatest(java.util.function.Function<java.lang.Object[],V>,int,org.reactivestreams.Publisher<? extends T>...)
- uid: reactor.core.publisher.Flux.<T>concat(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)
  name: Flux.<T>concat(Publisher<? extends Publisher<? extends T>>)
  nameWithType: Flux.<T>concat(Publisher<? extends Publisher<? extends T>>)
  fullName: reactor.core.publisher.Flux.<T>concat(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)
- uid: reactor.core.publisher.Flux.timeout(java.time.Duration,org.reactivestreams.Publisher<? extends T>,reactor.core.scheduler.Scheduler)
  name: Flux.timeout(Duration,Publisher<? extends T>,Scheduler)
  nameWithType: Flux.timeout(Duration,Publisher<? extends T>,Scheduler)
  fullName: reactor.core.publisher.Flux.timeout(java.time.Duration,org.reactivestreams.Publisher<? extends T>,reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.<T>concat(org.reactivestreams.Publisher<? extends T>...)
  name: Flux.<T>concat(Publisher<? extends T>...)
  nameWithType: Flux.<T>concat(Publisher<? extends T>...)
  fullName: reactor.core.publisher.Flux.<T>concat(org.reactivestreams.Publisher<? extends T>...)
- uid: reactor.core.publisher.Flux.delaySequence(java.time.Duration,reactor.core.scheduler.Scheduler)
  name: Flux.delaySequence(Duration,Scheduler)
  nameWithType: Flux.delaySequence(Duration,Scheduler)
  fullName: reactor.core.publisher.Flux.delaySequence(java.time.Duration,reactor.core.scheduler.Scheduler)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: reactor.core.publisher.Flux.<K>groupBy(java.util.function.Function<? super T,? extends K>,int)
  name: Flux.<K>groupBy(Function<? super T,? extends K>,int)
  nameWithType: Flux.<K>groupBy(Function<? super T,? extends K>,int)
  fullName: reactor.core.publisher.Flux.<K>groupBy(java.util.function.Function<? super T,? extends K>,int)
- uid: reactor.core.publisher.Flux.windowWhile(java.util.function.Predicate<T>,int)
  name: Flux.windowWhile(Predicate<T>,int)
  nameWithType: Flux.windowWhile(Predicate<T>,int)
  fullName: reactor.core.publisher.Flux.windowWhile(java.util.function.Predicate<T>,int)
- uid: reactor.core.publisher.Flux.<T>just(T)
  name: Flux.<T>just(T)
  nameWithType: Flux.<T>just(T)
  fullName: reactor.core.publisher.Flux.<T>just(T)
- uid: reactor.core.publisher.Flux.repeat(long,java.util.function.BooleanSupplier)
  name: Flux.repeat(long,BooleanSupplier)
  nameWithType: Flux.repeat(long,BooleanSupplier)
  fullName: reactor.core.publisher.Flux.repeat(long,java.util.function.BooleanSupplier)
- uid: reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,java.util.function.Function<java.lang.Object[],V>)
  name: Flux.<T1,T2,T3,T4,T5,V>combineLatest(Publisher<? extends T1>,Publisher<? extends T2>,Publisher<? extends T3>,Publisher<? extends T4>,Publisher<? extends T5>,Function<Object[],V>)
  nameWithType: Flux.<T1,T2,T3,T4,T5,V>combineLatest(Publisher<? extends T1>,Publisher<? extends T2>,Publisher<? extends T3>,Publisher<? extends T4>,Publisher<? extends T5>,Function<Object[],V>)
  fullName: reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,java.util.function.Function<java.lang.Object[],V>)
- uid: reactor.core.publisher.Flux.<V>windowUntilChanged()
  name: Flux.<V>windowUntilChanged()
  nameWithType: Flux.<V>windowUntilChanged()
  fullName: reactor.core.publisher.Flux.<V>windowUntilChanged()
- uid: reactor.core.publisher.Flux.<R>flatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,java.util.function.Function<? super java.lang.Throwable,? extends org.reactivestreams.Publisher<? extends R>>,java.util.function.Supplier<? extends org.reactivestreams.Publisher<? extends R>>)
  name: Flux.<R>flatMap(Function<? super T,? extends Publisher<? extends R>>,Function<? super Throwable,? extends Publisher<? extends R>>,Supplier<? extends Publisher<? extends R>>)
  nameWithType: Flux.<R>flatMap(Function<? super T,? extends Publisher<? extends R>>,Function<? super Throwable,? extends Publisher<? extends R>>,Supplier<? extends Publisher<? extends R>>)
  fullName: reactor.core.publisher.Flux.<R>flatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,java.util.function.Function<? super java.lang.Throwable,? extends org.reactivestreams.Publisher<? extends R>>,java.util.function.Supplier<? extends org.reactivestreams.Publisher<? extends R>>)
- uid: reactor.core.publisher.Flux.replay()
  name: Flux.replay()
  nameWithType: Flux.replay()
  fullName: reactor.core.publisher.Flux.replay()
- uid: reactor.core.publisher.Flux.retry(long,java.util.function.Predicate<? super java.lang.Throwable>)
  name: Flux.retry(long,Predicate<? super Throwable>)
  nameWithType: Flux.retry(long,Predicate<? super Throwable>)
  fullName: reactor.core.publisher.Flux.retry(long,java.util.function.Predicate<? super java.lang.Throwable>)
- uid: reactor.core.publisher.Flux.<C>buffer(int,java.util.function.Supplier<C>)
  name: Flux.<C>buffer(int,Supplier<C>)
  nameWithType: Flux.<C>buffer(int,Supplier<C>)
  fullName: reactor.core.publisher.Flux.<C>buffer(int,java.util.function.Supplier<C>)
- uid: reactor.core.publisher.Flux.interval(java.time.Duration)
  name: Flux.interval(Duration)
  nameWithType: Flux.interval(Duration)
  fullName: reactor.core.publisher.Flux.interval(java.time.Duration)
- uid: reactor.core.publisher.Flux.<E>collect(java.util.function.Supplier<E>,java.util.function.BiConsumer<E,? super T>)
  name: Flux.<E>collect(Supplier<E>,BiConsumer<E,? super T>)
  nameWithType: Flux.<E>collect(Supplier<E>,BiConsumer<E,? super T>)
  fullName: reactor.core.publisher.Flux.<E>collect(java.util.function.Supplier<E>,java.util.function.BiConsumer<E,? super T>)
- uid: reactor.core.publisher.Flux.<T1,T2,T3,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,java.util.function.Function<java.lang.Object[],V>)
  name: Flux.<T1,T2,T3,V>combineLatest(Publisher<? extends T1>,Publisher<? extends T2>,Publisher<? extends T3>,Function<Object[],V>)
  nameWithType: Flux.<T1,T2,T3,V>combineLatest(Publisher<? extends T1>,Publisher<? extends T2>,Publisher<? extends T3>,Function<Object[],V>)
  fullName: reactor.core.publisher.Flux.<T1,T2,T3,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,java.util.function.Function<java.lang.Object[],V>)
- uid: reactor.core.publisher.Flux.subscribeOn(reactor.core.scheduler.Scheduler)
  name: Flux.subscribeOn(Scheduler)
  nameWithType: Flux.subscribeOn(Scheduler)
  fullName: reactor.core.publisher.Flux.subscribeOn(reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable)
  name: Flux.subscribe(Consumer<? super T>,Consumer<? super Throwable>,Runnable)
  nameWithType: Flux.subscribe(Consumer<? super T>,Consumer<? super Throwable>,Runnable)
  fullName: reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable)
- uid: reactor.core.publisher.Flux.delayElements(java.time.Duration,reactor.core.scheduler.Scheduler)
  name: Flux.delayElements(Duration,Scheduler)
  nameWithType: Flux.delayElements(Duration,Scheduler)
  fullName: reactor.core.publisher.Flux.delayElements(java.time.Duration,reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.window(java.time.Duration,java.time.Duration)
  name: Flux.window(Duration,Duration)
  nameWithType: Flux.window(Duration,Duration)
  fullName: reactor.core.publisher.Flux.window(java.time.Duration,java.time.Duration)
- uid: reactor.core.publisher.Flux.take(java.time.Duration)
  name: Flux.take(Duration)
  nameWithType: Flux.take(Duration)
  fullName: reactor.core.publisher.Flux.take(java.time.Duration)
- uid: reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable,java.util.function.Consumer<? super org.reactivestreams.Subscription>)
  name: Flux.subscribe(Consumer<? super T>,Consumer<? super Throwable>,Runnable,Consumer<? super Subscription>)
  nameWithType: Flux.subscribe(Consumer<? super T>,Consumer<? super Throwable>,Runnable,Consumer<? super Subscription>)
  fullName: reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable,java.util.function.Consumer<? super org.reactivestreams.Subscription>)
- uid: reactor.core.publisher.Flux.<U>delaySubscription(org.reactivestreams.Publisher<U>)
  name: Flux.<U>delaySubscription(Publisher<U>)
  nameWithType: Flux.<U>delaySubscription(Publisher<U>)
  fullName: reactor.core.publisher.Flux.<U>delaySubscription(org.reactivestreams.Publisher<U>)
- uid: reactor.core.publisher.Flux.<V>concatMapDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,boolean,int)
  name: Flux.<V>concatMapDelayError(Function<? super T,? extends Publisher<? extends V>>,boolean,int)
  nameWithType: Flux.<V>concatMapDelayError(Function<? super T,? extends Publisher<? extends V>>,boolean,int)
  fullName: reactor.core.publisher.Flux.<V>concatMapDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,boolean,int)
- uid: reactor.core.publisher.Flux.<V,C>distinct(java.util.function.Function<? super T,? extends V>,java.util.function.Supplier<C>,java.util.function.BiPredicate<C,V>,java.util.function.Consumer<C>)
  name: Flux.<V,C>distinct(Function<? super T,? extends V>,Supplier<C>,BiPredicate<C,V>,Consumer<C>)
  nameWithType: Flux.<V,C>distinct(Function<? super T,? extends V>,Supplier<C>,BiPredicate<C,V>,Consumer<C>)
  fullName: reactor.core.publisher.Flux.<V,C>distinct(java.util.function.Function<? super T,? extends V>,java.util.function.Supplier<C>,java.util.function.BiPredicate<C,V>,java.util.function.Consumer<C>)
- uid: reactor.core.publisher.Flux.<R>flatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>)
  name: Flux.<R>flatMap(Function<? super T,? extends Publisher<? extends R>>)
  nameWithType: Flux.<R>flatMap(Function<? super T,? extends Publisher<? extends R>>)
  fullName: reactor.core.publisher.Flux.<R>flatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>)
- uid: reactor.core.publisher.Flux.<R>handle(java.util.function.BiConsumer<? super T,reactor.core.publisher.SynchronousSink<R>>)
  name: Flux.<R>handle(BiConsumer<? super T,SynchronousSink<R>>)
  nameWithType: Flux.<R>handle(BiConsumer<? super T,SynchronousSink<R>>)
  fullName: reactor.core.publisher.Flux.<R>handle(java.util.function.BiConsumer<? super T,reactor.core.publisher.SynchronousSink<R>>)
- uid: reactor.core.publisher.Flux.bufferTimeout(int,java.time.Duration,reactor.core.scheduler.Scheduler)
  name: Flux.bufferTimeout(int,Duration,Scheduler)
  nameWithType: Flux.bufferTimeout(int,Duration,Scheduler)
  fullName: reactor.core.publisher.Flux.bufferTimeout(int,java.time.Duration,reactor.core.scheduler.Scheduler)
- uid: reactor.core.publisher.Flux.<T1,T2,T3,T4,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,java.util.function.Function<java.lang.Object[],V>)
  name: Flux.<T1,T2,T3,T4,V>combineLatest(Publisher<? extends T1>,Publisher<? extends T2>,Publisher<? extends T3>,Publisher<? extends T4>,Function<Object[],V>)
  nameWithType: Flux.<T1,T2,T3,T4,V>combineLatest(Publisher<? extends T1>,Publisher<? extends T2>,Publisher<? extends T3>,Publisher<? extends T4>,Function<Object[],V>)
  fullName: reactor.core.publisher.Flux.<T1,T2,T3,T4,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,java.util.function.Function<java.lang.Object[],V>)
- uid: reactor.core.publisher.Flux.<V>distinctUntilChanged(java.util.function.Function<? super T,? extends V>,java.util.function.BiPredicate<? super V,? super V>)
  name: Flux.<V>distinctUntilChanged(Function<? super T,? extends V>,BiPredicate<? super V,? super V>)
  nameWithType: Flux.<V>distinctUntilChanged(Function<? super T,? extends V>,BiPredicate<? super V,? super V>)
  fullName: reactor.core.publisher.Flux.<V>distinctUntilChanged(java.util.function.Function<? super T,? extends V>,java.util.function.BiPredicate<? super V,? super V>)
- uid: reactor.core.publisher.Flux.delaySubscription(java.time.Duration)
  name: Flux.delaySubscription(Duration)
  nameWithType: Flux.delaySubscription(Duration)
  fullName: reactor.core.publisher.Flux.delaySubscription(java.time.Duration)
- uid: reactor.core.publisher.Flux.defaultIfEmpty(T)
  name: Flux.defaultIfEmpty(T)
  nameWithType: Flux.defaultIfEmpty(T)
  fullName: reactor.core.publisher.Flux.defaultIfEmpty(T)
- uid: reactor.core.publisher.Flux.<V,C>distinct(java.util.function.Function<? super T,? extends V>,java.util.function.Supplier<C>)
  name: Flux.<V,C>distinct(Function<? super T,? extends V>,Supplier<C>)
  nameWithType: Flux.<V,C>distinct(Function<? super T,? extends V>,Supplier<C>)
  fullName: reactor.core.publisher.Flux.<V,C>distinct(java.util.function.Function<? super T,? extends V>,java.util.function.Supplier<C>)
- uid: reactor.core.publisher.Flux.retry(java.util.function.Predicate<? super java.lang.Throwable>)
  name: Flux.retry(Predicate<? super Throwable>)
  nameWithType: Flux.retry(Predicate<? super Throwable>)
  fullName: reactor.core.publisher.Flux.retry(java.util.function.Predicate<? super java.lang.Throwable>)
- uid: reactor.core.publisher.Flux.switchIfEmpty(org.reactivestreams.Publisher<? extends T>)
  name: Flux.switchIfEmpty(Publisher<? extends T>)
  nameWithType: Flux.switchIfEmpty(Publisher<? extends T>)
  fullName: reactor.core.publisher.Flux.switchIfEmpty(org.reactivestreams.Publisher<? extends T>)
- uid: reactor.core.publisher.Flux.<T>error(java.lang.Throwable)
  name: Flux.<T>error(Throwable)
  nameWithType: Flux.<T>error(Throwable)
  fullName: reactor.core.publisher.Flux.<T>error(java.lang.Throwable)
- uid: reactor.core.publisher.Flux.<V>switchOnFirst(java.util.function.BiFunction<reactor.core.publisher.Signal<? extends T>,reactor.core.publisher.Flux<T>,org.reactivestreams.Publisher<? extends V>>)
  name: Flux.<V>switchOnFirst(BiFunction<Signal<? extends T>,Flux<T>,Publisher<? extends V>>)
  nameWithType: Flux.<V>switchOnFirst(BiFunction<Signal<? extends T>,Flux<T>,Publisher<? extends V>>)
  fullName: reactor.core.publisher.Flux.<V>switchOnFirst(java.util.function.BiFunction<reactor.core.publisher.Signal<? extends T>,reactor.core.publisher.Flux<T>,org.reactivestreams.Publisher<? extends V>>)
- uid: reactor.core.publisher.Flux.thenEmpty(org.reactivestreams.Publisher<java.lang.Void>)
  name: Flux.thenEmpty(Publisher<Void>)
  nameWithType: Flux.thenEmpty(Publisher<Void>)
  fullName: reactor.core.publisher.Flux.thenEmpty(org.reactivestreams.Publisher<java.lang.Void>)
- uid: reactor.core.publisher.Flux.<R,A>collect(java.util.stream.Collector<? super T,A,? extends R>)
  name: Flux.<R,A>collect(Collector<? super T,A,? extends R>)
  nameWithType: Flux.<R,A>collect(Collector<? super T,A,? extends R>)
  fullName: reactor.core.publisher.Flux.<R,A>collect(java.util.stream.Collector<? super T,A,? extends R>)
- uid: reactor.core.publisher.Flux.publish(int)
  name: Flux.publish(int)
  nameWithType: Flux.publish(int)
  fullName: reactor.core.publisher.Flux.publish(int)
- uid: reactor.core.publisher.Flux.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)
  name: Flux.<T,D>usingWhen(Publisher<D>,Function<? super D,? extends Publisher<? extends T>>,Function<? super D,? extends Publisher<?>>,Function<? super D,? extends Publisher<?>>)
  nameWithType: Flux.<T,D>usingWhen(Publisher<D>,Function<? super D,? extends Publisher<? extends T>>,Function<? super D,? extends Publisher<?>>,Function<? super D,? extends Publisher<?>>)
  fullName: reactor.core.publisher.Flux.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)
- uid: reactor.core.publisher.Flux.<A>scan(A,java.util.function.BiFunction<A,? super T,A>)
  name: Flux.<A>scan(A,BiFunction<A,? super T,A>)
  nameWithType: Flux.<A>scan(A,BiFunction<A,? super T,A>)
  fullName: reactor.core.publisher.Flux.<A>scan(A,java.util.function.BiFunction<A,? super T,A>)
- uid: reactor.core.publisher.Flux.windowUntil(java.util.function.Predicate<T>)
  name: Flux.windowUntil(Predicate<T>)
  nameWithType: Flux.windowUntil(Predicate<T>)
  fullName: reactor.core.publisher.Flux.windowUntil(java.util.function.Predicate<T>)
- uid: reactor.core.publisher.Flux.<I>mergeDelayError(int,org.reactivestreams.Publisher<? extends I>...)
  name: Flux.<I>mergeDelayError(int,Publisher<? extends I>...)
  nameWithType: Flux.<I>mergeDelayError(int,Publisher<? extends I>...)
  fullName: reactor.core.publisher.Flux.<I>mergeDelayError(int,org.reactivestreams.Publisher<? extends I>...)
- uid: com.azure.core.util.polling.PollingContext
  name: PollingContext
  nameWithType: PollingContext
  fullName: com.azure.core.util.polling.PollingContext
- uid: T>,reactor.core.publisher.Mono
  name: T>,Mono
  nameWithType: T>,Mono
  fullName: T>,reactor.core.publisher.Mono
- uid: java.util.function.Function
  name: Function
  nameWithType: Function
  fullName: java.util.function.Function
- uid: com.azure.core.util.polling.PollResponse
  name: PollResponse
  nameWithType: PollResponse
  fullName: com.azure.core.util.polling.PollResponse
- uid: java.util.function.BiFunction
  name: BiFunction
  nameWithType: BiFunction
  fullName: java.util.function.BiFunction
- uid: T>,com.azure.core.util.polling.PollResponse
  name: T>,PollResponse
  nameWithType: T>,PollResponse
  fullName: T>,com.azure.core.util.polling.PollResponse
- uid: T,U
  name: T,U
  nameWithType: T,U
  fullName: T,U
- uid: '? super com.azure.core.util.polling.AsyncPollResponse'
  name: '? super AsyncPollResponse'
  nameWithType: '? super AsyncPollResponse'
  fullName: '? super com.azure.core.util.polling.AsyncPollResponse'
- uid: reactor.core.CoreSubscriber
  name: CoreSubscriber
  nameWithType: CoreSubscriber
  fullName: reactor.core.CoreSubscriber
- uid: com.azure.core.util.polling.SyncPoller
  name: SyncPoller
  nameWithType: SyncPoller
  fullName: com.azure.core.util.polling.SyncPoller
- uid: reactor.core.publisher.Flux
  name: Flux
  nameWithType: Flux
  fullName: reactor.core.publisher.Flux
- uid: com.azure.core.util.polling.AsyncPollResponse
  name: AsyncPollResponse
  nameWithType: AsyncPollResponse
  fullName: com.azure.core.util.polling.AsyncPollResponse
- uid: T1,T2>zip(org.reactivestreams.Publisher
  name: T1,T2>zip(Publisher
  nameWithType: T1,T2>zip(Publisher
  fullName: T1,T2>zip(org.reactivestreams.Publisher
- uid: reactor.core.publisher.Flux.
  name: Flux.
  nameWithType: Flux.
  fullName: reactor.core.publisher.Flux.
- uid: '? extends T1>,org.reactivestreams.Publisher'
  name: '? extends T1>,Publisher'
  nameWithType: '? extends T1>,Publisher'
  fullName: '? extends T1>,org.reactivestreams.Publisher'
- uid: '? extends T2>)'
  name: '? extends T2>)'
  nameWithType: '? extends T2>)'
  fullName: '? extends T2>)'
- uid: reactor.core.publisher.Flux.expand(java.util.function.Function
  name: Flux.expand(Function
  nameWithType: Flux.expand(Function
  fullName: reactor.core.publisher.Flux.expand(java.util.function.Function
- uid: '? extends T>>,int)'
  name: '? extends T>>,int)'
  nameWithType: '? extends T>>,int)'
  fullName: '? extends T>>,int)'
- uid: '? super T,? extends org.reactivestreams.Publisher'
  name: '? super T,? extends Publisher'
  nameWithType: '? super T,? extends Publisher'
  fullName: '? super T,? extends org.reactivestreams.Publisher'
- uid: T>onLastAssembly(reactor.core.publisher.Flux
  name: T>onLastAssembly(Flux
  nameWithType: T>onLastAssembly(Flux
  fullName: T>onLastAssembly(reactor.core.publisher.Flux
- uid: T>)
  name: T>)
  nameWithType: T>)
  fullName: T>)
- uid: '? extends R>>,int)'
  name: '? extends R>>,int)'
  nameWithType: '? extends R>>,int)'
  fullName: '? extends R>>,int)'
- uid: '? super T,? extends java.lang.Iterable'
  name: '? super T,? extends Iterable'
  nameWithType: '? super T,? extends Iterable'
  fullName: '? super T,? extends java.lang.Iterable'
- uid: R>flatMapIterable(java.util.function.Function
  name: R>flatMapIterable(Function
  nameWithType: R>flatMapIterable(Function
  fullName: R>flatMapIterable(java.util.function.Function
- uid: T1,T2,T3,T4,T5,T6,V>combineLatest(org.reactivestreams.Publisher
  name: T1,T2,T3,T4,T5,T6,V>combineLatest(Publisher
  nameWithType: T1,T2,T3,T4,T5,T6,V>combineLatest(Publisher
  fullName: T1,T2,T3,T4,T5,T6,V>combineLatest(org.reactivestreams.Publisher
- uid: '? extends T5>,org.reactivestreams.Publisher'
  name: '? extends T5>,Publisher'
  nameWithType: '? extends T5>,Publisher'
  fullName: '? extends T5>,org.reactivestreams.Publisher'
- uid: java.lang.Object[],V>)
  name: Object[],V>)
  nameWithType: Object[],V>)
  fullName: java.lang.Object[],V>)
- uid: '? extends T6>,java.util.function.Function'
  name: '? extends T6>,Function'
  nameWithType: '? extends T6>,Function'
  fullName: '? extends T6>,java.util.function.Function'
- uid: '? extends T2>,org.reactivestreams.Publisher'
  name: '? extends T2>,Publisher'
  nameWithType: '? extends T2>,Publisher'
  fullName: '? extends T2>,org.reactivestreams.Publisher'
- uid: '? extends T4>,org.reactivestreams.Publisher'
  name: '? extends T4>,Publisher'
  nameWithType: '? extends T4>,Publisher'
  fullName: '? extends T4>,org.reactivestreams.Publisher'
- uid: '? extends T3>,org.reactivestreams.Publisher'
  name: '? extends T3>,Publisher'
  nameWithType: '? extends T3>,Publisher'
  fullName: '? extends T3>,org.reactivestreams.Publisher'
- uid: A,? super T,A>)
  name: A,? super T,A>)
  nameWithType: A,? super T,A>)
  fullName: A,? super T,A>)
- uid: A>,java.util.function.BiFunction
  name: A>,BiFunction
  nameWithType: A>,BiFunction
  fullName: A>,java.util.function.BiFunction
- uid: A>reduceWith(java.util.function.Supplier
  name: A>reduceWith(Supplier
  nameWithType: A>reduceWith(Supplier
  fullName: A>reduceWith(java.util.function.Supplier
- uid: '? super T,? extends V>)'
  name: '? super T,? extends V>)'
  nameWithType: '? super T,? extends V>)'
  fullName: '? super T,? extends V>)'
- uid: K,V>collectMultimap(java.util.function.Function
  name: K,V>collectMultimap(Function
  nameWithType: K,V>collectMultimap(Function
  fullName: K,V>collectMultimap(java.util.function.Function
- uid: '? super T,? extends K>,java.util.function.Function'
  name: '? super T,? extends K>,Function'
  nameWithType: '? super T,? extends K>,Function'
  fullName: '? super T,? extends K>,java.util.function.Function'
- uid: T>,boolean,int)
  name: T>,boolean,int)
  nameWithType: T>,boolean,int)
  fullName: T>,boolean,int)
- uid: reactor.core.publisher.Flux.windowUntil(java.util.function.Predicate
  name: Flux.windowUntil(Predicate
  nameWithType: Flux.windowUntil(Predicate
  fullName: reactor.core.publisher.Flux.windowUntil(java.util.function.Predicate
- uid: reactor.core.publisher.Flux.filterWhen(java.util.function.Function
  name: Flux.filterWhen(Function
  nameWithType: Flux.filterWhen(Function
  fullName: reactor.core.publisher.Flux.filterWhen(java.util.function.Function
- uid: java.lang.Boolean>>,int)
  name: Boolean>>,int)
  nameWithType: Boolean>>,int)
  fullName: java.lang.Boolean>>,int)
- uid: T>fromIterable(java.lang.Iterable
  name: T>fromIterable(Iterable
  nameWithType: T>fromIterable(Iterable
  fullName: T>fromIterable(java.lang.Iterable
- uid: '? extends T>)'
  name: '? extends T>)'
  nameWithType: '? extends T>)'
  fullName: '? extends T>)'
- uid: ?>,java.util.function.Supplier
  name: ?>,Supplier
  nameWithType: ?>,Supplier
  fullName: ?>,java.util.function.Supplier
- uid: C>buffer(org.reactivestreams.Publisher
  name: C>buffer(Publisher
  nameWithType: C>buffer(Publisher
  fullName: C>buffer(org.reactivestreams.Publisher
- uid: C>)
  name: C>)
  nameWithType: C>)
  fullName: C>)
- uid: U>>,int)
  name: U>>,int)
  nameWithType: U>>,int)
  fullName: U>>,int)
- uid: U>sampleTimeout(java.util.function.Function
  name: U>sampleTimeout(Function
  nameWithType: U>sampleTimeout(Function
  fullName: U>sampleTimeout(java.util.function.Function
- uid: T>create(java.util.function.Consumer
  name: T>create(Consumer
  nameWithType: T>create(Consumer
  fullName: T>create(java.util.function.Consumer
- uid: '? super reactor.core.publisher.FluxSink'
  name: '? super FluxSink'
  nameWithType: '? super FluxSink'
  fullName: '? super reactor.core.publisher.FluxSink'
- uid: T>>,reactor.core.publisher.FluxSink.OverflowStrategy)
  name: T>>,FluxSink.OverflowStrategy)
  nameWithType: T>>,FluxSink.OverflowStrategy)
  fullName: T>>,reactor.core.publisher.FluxSink.OverflowStrategy)
- uid: U,V>timeout(org.reactivestreams.Publisher
  name: U,V>timeout(Publisher
  nameWithType: U,V>timeout(Publisher
  fullName: U,V>timeout(org.reactivestreams.Publisher
- uid: U>,java.util.function.Function
  name: U>,Function
  nameWithType: U>,Function
  fullName: U>,java.util.function.Function
- uid: V>>)
  name: V>>)
  nameWithType: V>>)
  fullName: V>>)
- uid: V>>,org.reactivestreams.Publisher
  name: V>>,Publisher
  nameWithType: V>>,Publisher
  fullName: V>>,org.reactivestreams.Publisher
- uid: reactor.core.publisher.Flux.onBackpressureBuffer(int,java.util.function.Consumer
  name: Flux.onBackpressureBuffer(int,Consumer
  nameWithType: Flux.onBackpressureBuffer(int,Consumer
  fullName: reactor.core.publisher.Flux.onBackpressureBuffer(int,java.util.function.Consumer
- uid: '? super T>)'
  name: '? super T>)'
  nameWithType: '? super T>)'
  fullName: '? super T>)'
- uid: reactor.core.publisher.Flux.takeUntilOther(org.reactivestreams.Publisher
  name: Flux.takeUntilOther(Publisher
  nameWithType: Flux.takeUntilOther(Publisher
  fullName: reactor.core.publisher.Flux.takeUntilOther(org.reactivestreams.Publisher
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: T,V>combineLatest(java.lang.Iterable
  name: T,V>combineLatest(Iterable
  nameWithType: T,V>combineLatest(Iterable
  fullName: T,V>combineLatest(java.lang.Iterable
- uid: '? extends org.reactivestreams.Publisher'
  name: '? extends Publisher'
  nameWithType: '? extends Publisher'
  fullName: '? extends org.reactivestreams.Publisher'
- uid: '? extends T>>,int,java.util.function.Function'
  name: '? extends T>>,int,Function'
  nameWithType: '? extends T>>,int,Function'
  fullName: '? extends T>>,int,java.util.function.Function'
- uid: reactor.core.publisher.Flux.timeout(java.time.Duration,org.reactivestreams.Publisher
  name: Flux.timeout(Duration,Publisher
  nameWithType: Flux.timeout(Duration,Publisher
  fullName: reactor.core.publisher.Flux.timeout(java.time.Duration,org.reactivestreams.Publisher
- uid: '? super T,? extends K>)'
  name: '? super T,? extends K>)'
  nameWithType: '? super T,? extends K>)'
  fullName: '? super T,? extends K>)'
- uid: K>collectMultimap(java.util.function.Function
  name: K>collectMultimap(Function
  nameWithType: K>collectMultimap(Function
  fullName: K>collectMultimap(java.util.function.Function
- uid: V>transformDeferred(java.util.function.Function
  name: V>transformDeferred(Function
  nameWithType: V>transformDeferred(Function
  fullName: V>transformDeferred(java.util.function.Function
- uid: '? super reactor.core.publisher.Flux'
  name: '? super Flux'
  nameWithType: '? super Flux'
  fullName: '? super reactor.core.publisher.Flux'
- uid: T>,? extends org.reactivestreams.Publisher
  name: T>,? extends Publisher
  nameWithType: T>,? extends Publisher
  fullName: T>,? extends org.reactivestreams.Publisher
- uid: java.lang.Throwable,java.lang.Object>)
  name: Throwable,Object>)
  nameWithType: Throwable,Object>)
  fullName: java.lang.Throwable,java.lang.Object>)
- uid: reactor.core.publisher.Flux.onErrorContinue(java.util.function.BiConsumer
  name: Flux.onErrorContinue(BiConsumer
  nameWithType: Flux.onErrorContinue(BiConsumer
  fullName: reactor.core.publisher.Flux.onErrorContinue(java.util.function.BiConsumer
- uid: '? extends T>>,java.util.function.Function'
  name: '? extends T>>,Function'
  nameWithType: '? extends T>>,Function'
  fullName: '? extends T>>,java.util.function.Function'
- uid: V>compose(java.util.function.Function
  name: V>compose(Function
  nameWithType: V>compose(Function
  fullName: V>compose(java.util.function.Function
- uid: V>bufferUntilChanged()
  name: V>bufferUntilChanged()
  nameWithType: V>bufferUntilChanged()
  fullName: V>bufferUntilChanged()
- uid: '? extends T>>,int,int)'
  name: '? extends T>>,int,int)'
  nameWithType: '? extends T>>,int,int)'
  fullName: '? extends T>>,int,int)'
- uid: T>mergeSequentialDelayError(org.reactivestreams.Publisher
  name: T>mergeSequentialDelayError(Publisher
  nameWithType: T>mergeSequentialDelayError(Publisher
  fullName: T>mergeSequentialDelayError(org.reactivestreams.Publisher
- uid: reactor.core.publisher.Flux.or(org.reactivestreams.Publisher
  name: Flux.or(Publisher
  nameWithType: Flux.or(Publisher
  fullName: reactor.core.publisher.Flux.or(org.reactivestreams.Publisher
- uid: '? super D,? super java.lang.Throwable,? extends org.reactivestreams.Publisher'
  name: '? super D,? super Throwable,? extends Publisher'
  nameWithType: '? super D,? super Throwable,? extends Publisher'
  fullName: '? super D,? super java.lang.Throwable,? extends org.reactivestreams.Publisher'
- uid: ?>>,java.util.function.Function
  name: ?>>,Function
  nameWithType: ?>>,Function
  fullName: ?>>,java.util.function.Function
- uid: '? super D,? extends org.reactivestreams.Publisher'
  name: '? super D,? extends Publisher'
  nameWithType: '? super D,? extends Publisher'
  fullName: '? super D,? extends org.reactivestreams.Publisher'
- uid: ?>>)
  name: ?>>)
  nameWithType: ?>>)
  fullName: ?>>)
- uid: D>,java.util.function.Function
  name: D>,Function
  nameWithType: D>,Function
  fullName: D>,java.util.function.Function
- uid: T,D>usingWhen(org.reactivestreams.Publisher
  name: T,D>usingWhen(Publisher
  nameWithType: T,D>usingWhen(Publisher
  fullName: T,D>usingWhen(org.reactivestreams.Publisher
- uid: ?>>,java.util.function.BiFunction
  name: ?>>,BiFunction
  nameWithType: ?>>,BiFunction
  fullName: ?>>,java.util.function.BiFunction
- uid: reactor.core.publisher.Flux.reduce(java.util.function.BiFunction
  name: Flux.reduce(BiFunction
  nameWithType: Flux.reduce(BiFunction
  fullName: reactor.core.publisher.Flux.reduce(java.util.function.BiFunction
- uid: T,T,T>)
  name: T,T,T>)
  nameWithType: T,T,T>)
  fullName: T,T,T>)
- uid: R>flatMapSequential(java.util.function.Function
  name: R>flatMapSequential(Function
  nameWithType: R>flatMapSequential(Function
  fullName: R>flatMapSequential(java.util.function.Function
- uid: '? extends T>>)'
  name: '? extends T>>)'
  nameWithType: '? extends T>>)'
  fullName: '? extends T>>)'
- uid: T>concatDelayError(org.reactivestreams.Publisher
  name: T>concatDelayError(Publisher
  nameWithType: T>concatDelayError(Publisher
  fullName: T>concatDelayError(org.reactivestreams.Publisher
- uid: C>buffer(int,int,java.util.function.Supplier
  name: C>buffer(int,int,Supplier
  nameWithType: C>buffer(int,int,Supplier
  fullName: C>buffer(int,int,java.util.function.Supplier
- uid: '? extends T6>)'
  name: '? extends T6>)'
  nameWithType: '? extends T6>)'
  fullName: '? extends T6>)'
- uid: T1,T2,T3,T4,T5,T6>zip(org.reactivestreams.Publisher
  name: T1,T2,T3,T4,T5,T6>zip(Publisher
  nameWithType: T1,T2,T3,T4,T5,T6>zip(Publisher
  fullName: T1,T2,T3,T4,T5,T6>zip(org.reactivestreams.Publisher
- uid: '? extends V>>)'
  name: '? extends V>>)'
  nameWithType: '? extends V>>)'
  fullName: '? extends V>>)'
- uid: V>concatMap(java.util.function.Function
  name: V>concatMap(Function
  nameWithType: V>concatMap(Function
  fullName: V>concatMap(java.util.function.Function
- uid: V>distinct(java.util.function.Function
  name: V>distinct(Function
  nameWithType: V>distinct(Function
  fullName: V>distinct(java.util.function.Function
- uid: V>flatMapDelayError(java.util.function.Function
  name: V>flatMapDelayError(Function
  nameWithType: V>flatMapDelayError(Function
  fullName: V>flatMapDelayError(java.util.function.Function
- uid: '? extends V>>,int,int)'
  name: '? extends V>>,int,int)'
  nameWithType: '? extends V>>,int,int)'
  fullName: '? extends V>>,int,int)'
- uid: reactor.core.publisher.Flux.window(org.reactivestreams.Publisher
  name: Flux.window(Publisher
  nameWithType: Flux.window(Publisher
  fullName: reactor.core.publisher.Flux.window(org.reactivestreams.Publisher
- uid: T>switchOnNext(org.reactivestreams.Publisher
  name: T>switchOnNext(Publisher
  nameWithType: T>switchOnNext(Publisher
  fullName: T>switchOnNext(org.reactivestreams.Publisher
- uid: '? extends R>>)'
  name: '? extends R>>)'
  nameWithType: '? extends R>>)'
  fullName: '? extends R>>)'
- uid: R>publish(java.util.function.Function
  name: R>publish(Function
  nameWithType: R>publish(Function
  fullName: R>publish(java.util.function.Function
- uid: reactor.core.publisher.Flux.doOnError(java.util.function.Predicate
  name: Flux.doOnError(Predicate
  nameWithType: Flux.doOnError(Predicate
  fullName: reactor.core.publisher.Flux.doOnError(java.util.function.Predicate
- uid: '? super java.lang.Throwable>,java.util.function.Consumer'
  name: '? super Throwable>,Consumer'
  nameWithType: '? super Throwable>,Consumer'
  fullName: '? super java.lang.Throwable>,java.util.function.Consumer'
- uid: '? super java.lang.Throwable>)'
  name: '? super Throwable>)'
  nameWithType: '? super Throwable>)'
  fullName: '? super java.lang.Throwable>)'
- uid: '? super org.reactivestreams.Subscription>)'
  name: '? super Subscription>)'
  nameWithType: '? super Subscription>)'
  fullName: '? super org.reactivestreams.Subscription>)'
- uid: reactor.core.publisher.Flux.doOnSubscribe(java.util.function.Consumer
  name: Flux.doOnSubscribe(Consumer
  nameWithType: Flux.doOnSubscribe(Consumer
  fullName: reactor.core.publisher.Flux.doOnSubscribe(java.util.function.Consumer
- uid: R>concatMapIterable(java.util.function.Function
  name: R>concatMapIterable(Function
  nameWithType: R>concatMapIterable(Function
  fullName: R>concatMapIterable(java.util.function.Function
- uid: '? super R>)'
  name: '? super R>)'
  nameWithType: '? super R>)'
  fullName: '? super R>)'
- uid: R>,java.util.function.Consumer
  name: R>,Consumer
  nameWithType: R>,Consumer
  fullName: R>,java.util.function.Consumer
- uid: R>doOnDiscard(java.lang.Class
  name: R>doOnDiscard(Class
  nameWithType: R>doOnDiscard(Class
  fullName: R>doOnDiscard(java.lang.Class
- uid: reactor.core.publisher.Flux.bufferWhile(java.util.function.Predicate
  name: Flux.bufferWhile(Predicate
  nameWithType: Flux.bufferWhile(Predicate
  fullName: reactor.core.publisher.Flux.bufferWhile(java.util.function.Predicate
- uid: T2,V>zipWithIterable(java.lang.Iterable
  name: T2,V>zipWithIterable(Iterable
  nameWithType: T2,V>zipWithIterable(Iterable
  fullName: T2,V>zipWithIterable(java.lang.Iterable
- uid: '? super T,? super T2,? extends V>)'
  name: '? super T,? super T2,? extends V>)'
  nameWithType: '? super T,? super T2,? extends V>)'
  fullName: '? super T,? super T2,? extends V>)'
- uid: '? extends T2>,java.util.function.BiFunction'
  name: '? extends T2>,BiFunction'
  nameWithType: '? extends T2>,BiFunction'
  fullName: '? extends T2>,java.util.function.BiFunction'
- uid: T>merge(org.reactivestreams.Publisher
  name: T>merge(Publisher
  nameWithType: T>merge(Publisher
  fullName: T>merge(org.reactivestreams.Publisher
- uid: '? super T>,org.reactivestreams.Publisher'
  name: '? super T>,Publisher'
  nameWithType: '? super T>,Publisher'
  fullName: '? super T>,org.reactivestreams.Publisher'
- uid: T>mergeOrdered(int,java.util.Comparator
  name: T>mergeOrdered(int,Comparator
  nameWithType: T>mergeOrdered(int,Comparator
  fullName: T>mergeOrdered(int,java.util.Comparator
- uid: '? extends T>...)'
  name: '? extends T>...)'
  nameWithType: '? extends T>...)'
  fullName: '? extends T>...)'
- uid: '? extends T6>,org.reactivestreams.Publisher'
  name: '? extends T6>,Publisher'
  nameWithType: '? extends T6>,Publisher'
  fullName: '? extends T6>,org.reactivestreams.Publisher'
- uid: T1,T2,T3,T4,T5,T6,T7>zip(org.reactivestreams.Publisher
  name: T1,T2,T3,T4,T5,T6,T7>zip(Publisher
  nameWithType: T1,T2,T3,T4,T5,T6,T7>zip(Publisher
  fullName: T1,T2,T3,T4,T5,T6,T7>zip(org.reactivestreams.Publisher
- uid: '? extends T7>)'
  name: '? extends T7>)'
  nameWithType: '? extends T7>)'
  fullName: '? extends T7>)'
- uid: K>groupBy(java.util.function.Function
  name: K>groupBy(Function
  nameWithType: K>groupBy(Function
  fullName: K>groupBy(java.util.function.Function
- uid: V>concatMapDelayError(java.util.function.Function
  name: V>concatMapDelayError(Function
  nameWithType: V>concatMapDelayError(Function
  fullName: V>concatMapDelayError(java.util.function.Function
- uid: K,V>collectMap(java.util.function.Function
  name: K,V>collectMap(Function
  nameWithType: K,V>collectMap(Function
  fullName: K,V>collectMap(java.util.function.Function
- uid: T1,T2,T3,T4,T5>zip(org.reactivestreams.Publisher
  name: T1,T2,T3,T4,T5>zip(Publisher
  nameWithType: T1,T2,T3,T4,T5>zip(Publisher
  fullName: T1,T2,T3,T4,T5>zip(org.reactivestreams.Publisher
- uid: '? extends T5>)'
  name: '? extends T5>)'
  nameWithType: '? extends T5>)'
  fullName: '? extends T5>)'
- uid: reactor.core.publisher.Flux.all(java.util.function.Predicate
  name: Flux.all(Predicate
  nameWithType: Flux.all(Predicate
  fullName: reactor.core.publisher.Flux.all(java.util.function.Predicate
- uid: U>)
  name: U>)
  nameWithType: U>)
  fullName: U>)
- uid: U>timeout(org.reactivestreams.Publisher
  name: U>timeout(Publisher
  nameWithType: U>timeout(Publisher
  fullName: U>timeout(org.reactivestreams.Publisher
- uid: '? extends I>...)'
  name: '? extends I>...)'
  nameWithType: '? extends I>...)'
  fullName: '? extends I>...)'
- uid: I>mergeSequential(org.reactivestreams.Publisher
  name: I>mergeSequential(Publisher
  nameWithType: I>mergeSequential(Publisher
  fullName: I>mergeSequential(org.reactivestreams.Publisher
- uid: reactor.core.publisher.Flux.scan(java.util.function.BiFunction
  name: Flux.scan(BiFunction
  nameWithType: Flux.scan(BiFunction
  fullName: reactor.core.publisher.Flux.scan(java.util.function.BiFunction
- uid: reactor.core.publisher.Flux.doOnError(java.util.function.Consumer
  name: Flux.doOnError(Consumer
  nameWithType: Flux.doOnError(Consumer
  fullName: reactor.core.publisher.Flux.doOnError(java.util.function.Consumer
- uid: reactor.core.publisher.Flux.bufferUntil(java.util.function.Predicate
  name: Flux.bufferUntil(Predicate
  nameWithType: Flux.bufferUntil(Predicate
  fullName: reactor.core.publisher.Flux.bufferUntil(java.util.function.Predicate
- uid: '? super T>,boolean)'
  name: '? super T>,boolean)'
  nameWithType: '? super T>,boolean)'
  fullName: '? super T>,boolean)'
- uid: T>>)
  name: T>>)
  nameWithType: T>>)
  fullName: T>>)
- uid: T>defer(java.util.function.Supplier
  name: T>defer(Supplier
  nameWithType: T>defer(Supplier
  fullName: T>defer(java.util.function.Supplier
- uid: '? super T>,java.util.function.Consumer'
  name: '? super T>,Consumer'
  nameWithType: '? super T>,Consumer'
  fullName: '? super T>,java.util.function.Consumer'
- uid: reactor.core.publisher.Flux.subscribe(java.util.function.Consumer
  name: Flux.subscribe(Consumer
  nameWithType: Flux.subscribe(Consumer
  fullName: reactor.core.publisher.Flux.subscribe(java.util.function.Consumer
- uid: T>just(T...)
  name: T>just(T)
  nameWithType: T>just(T)
  fullName: T>just(T...)
- uid: T>fromStream(java.util.stream.Stream
  name: T>fromStream(Stream
  nameWithType: T>fromStream(Stream
  fullName: T>fromStream(java.util.stream.Stream
- uid: '? extends T7>,org.reactivestreams.Publisher'
  name: '? extends T7>,Publisher'
  nameWithType: '? extends T7>,Publisher'
  fullName: '? extends T7>,org.reactivestreams.Publisher'
- uid: T1,T2,T3,T4,T5,T6,T7,T8>zip(org.reactivestreams.Publisher
  name: T1,T2,T3,T4,T5,T6,T7,T8>zip(Publisher
  nameWithType: T1,T2,T3,T4,T5,T6,T7,T8>zip(Publisher
  fullName: T1,T2,T3,T4,T5,T6,T7,T8>zip(org.reactivestreams.Publisher
- uid: '? extends T8>)'
  name: '? extends T8>)'
  nameWithType: '? extends T8>)'
  fullName: '? extends T8>)'
- uid: T1,T2,O>zip(org.reactivestreams.Publisher
  name: T1,T2,O>zip(Publisher
  nameWithType: T1,T2,O>zip(Publisher
  fullName: T1,T2,O>zip(org.reactivestreams.Publisher
- uid: '? super T1,? super T2,? extends O>)'
  name: '? super T1,? super T2,? extends O>)'
  nameWithType: '? super T1,? super T2,? extends O>)'
  fullName: '? super T1,? super T2,? extends O>)'
- uid: T2>zipWith(org.reactivestreams.Publisher
  name: T2>zipWith(Publisher
  nameWithType: T2>zipWith(Publisher
  fullName: T2>zipWith(org.reactivestreams.Publisher
- uid: '? extends T2>,int)'
  name: '? extends T2>,int)'
  nameWithType: '? extends T2>,int)'
  fullName: '? extends T2>,int)'
- uid: E>subscribeWith(E)
  name: E>subscribeWith(E)
  nameWithType: E>subscribeWith(E)
  fullName: E>subscribeWith(E)
- uid: I>merge(org.reactivestreams.Publisher
  name: I>merge(Publisher
  nameWithType: I>merge(Publisher
  fullName: I>merge(org.reactivestreams.Publisher
- uid: X>dematerialize()
  name: X>dematerialize()
  nameWithType: X>dematerialize()
  fullName: X>dematerialize()
- uid: reactor.core.publisher.Flux.collectSortedList(java.util.Comparator
  name: Flux.collectSortedList(Comparator
  nameWithType: Flux.collectSortedList(Comparator
  fullName: reactor.core.publisher.Flux.collectSortedList(java.util.Comparator
- uid: reactor.core.publisher.Flux.startWith(org.reactivestreams.Publisher
  name: Flux.startWith(Publisher
  nameWithType: Flux.startWith(Publisher
  fullName: reactor.core.publisher.Flux.startWith(org.reactivestreams.Publisher
- uid: E>,T)
  name: E>,T)
  nameWithType: E>,T)
  fullName: E>,T)
- uid: E>onErrorReturn(java.lang.Class
  name: E>onErrorReturn(Class
  nameWithType: E>onErrorReturn(Class
  fullName: E>onErrorReturn(java.lang.Class
- uid: '? super java.lang.Long,? super T,? extends I>)'
  name: '? super Long,? super T,? extends I>)'
  nameWithType: '? super Long,? super T,? extends I>)'
  fullName: '? super java.lang.Long,? super T,? extends I>)'
- uid: I>index(java.util.function.BiFunction
  name: I>index(BiFunction
  nameWithType: I>index(BiFunction
  fullName: I>index(java.util.function.BiFunction
- uid: reactor.core.publisher.Flux.expandDeep(java.util.function.Function
  name: Flux.expandDeep(Function
  nameWithType: Flux.expandDeep(Function
  fullName: reactor.core.publisher.Flux.expandDeep(java.util.function.Function
- uid: U>>)
  name: U>>)
  nameWithType: U>>)
  fullName: U>>)
- uid: '? extends R>>,int,int)'
  name: '? extends R>>,int,int)'
  nameWithType: '? extends R>>,int,int)'
  fullName: '? extends R>>,int,int)'
- uid: '? super U,? extends org.reactivestreams.Publisher'
  name: '? super U,? extends Publisher'
  nameWithType: '? super U,? extends Publisher'
  fullName: '? super U,? extends org.reactivestreams.Publisher'
- uid: U,V>windowWhen(org.reactivestreams.Publisher
  name: U,V>windowWhen(Publisher
  nameWithType: U,V>windowWhen(Publisher
  fullName: U,V>windowWhen(org.reactivestreams.Publisher
- uid: S>,java.util.function.BiFunction
  name: S>,BiFunction
  nameWithType: S>,BiFunction
  fullName: S>,java.util.function.BiFunction
- uid: S,reactor.core.publisher.SynchronousSink
  name: S,SynchronousSink
  nameWithType: S,SynchronousSink
  fullName: S,reactor.core.publisher.SynchronousSink
- uid: T,S>generate(java.util.concurrent.Callable
  name: T,S>generate(Callable
  nameWithType: T,S>generate(Callable
  fullName: T,S>generate(java.util.concurrent.Callable
- uid: T>,S>)
  name: T>,S>)
  nameWithType: T>,S>)
  fullName: T>,S>)
- uid: U>sample(org.reactivestreams.Publisher
  name: U>sample(Publisher
  nameWithType: U>sample(Publisher
  fullName: U>sample(org.reactivestreams.Publisher
- uid: V>distinctUntilChanged(java.util.function.Function
  name: V>distinctUntilChanged(Function
  nameWithType: V>distinctUntilChanged(Function
  fullName: V>distinctUntilChanged(java.util.function.Function
- uid: I>merge(int,org.reactivestreams.Publisher
  name: I>merge(int,Publisher
  nameWithType: I>merge(int,Publisher
  fullName: I>merge(int,org.reactivestreams.Publisher
- uid: java.lang.Long>,? extends org.reactivestreams.Publisher
  name: Long>,? extends Publisher
  nameWithType: Long>,? extends Publisher
  fullName: java.lang.Long>,? extends org.reactivestreams.Publisher
- uid: reactor.core.publisher.Flux.repeatWhen(java.util.function.Function
  name: Flux.repeatWhen(Function
  nameWithType: Flux.repeatWhen(Function
  fullName: reactor.core.publisher.Flux.repeatWhen(java.util.function.Function
- uid: E>onErrorContinue(java.lang.Class
  name: E>onErrorContinue(Class
  nameWithType: E>onErrorContinue(Class
  fullName: E>onErrorContinue(java.lang.Class
- uid: E>,java.util.function.BiConsumer
  name: E>,BiConsumer
  nameWithType: E>,BiConsumer
  fullName: E>,java.util.function.BiConsumer
- uid: '? super T,? extends V>,int)'
  name: '? super T,? extends V>,int)'
  nameWithType: '? super T,? extends V>,int)'
  fullName: '? super T,? extends V>,int)'
- uid: K,V>groupBy(java.util.function.Function
  name: K,V>groupBy(Function
  nameWithType: K,V>groupBy(Function
  fullName: K,V>groupBy(java.util.function.Function
- uid: reactor.core.publisher.Flux.doOnNext(java.util.function.Consumer
  name: Flux.doOnNext(Consumer
  nameWithType: Flux.doOnNext(Consumer
  fullName: reactor.core.publisher.Flux.doOnNext(java.util.function.Consumer
- uid: T2,V>zipWith(org.reactivestreams.Publisher
  name: T2,V>zipWith(Publisher
  nameWithType: T2,V>zipWith(Publisher
  fullName: T2,V>zipWith(org.reactivestreams.Publisher
- uid: '? extends java.lang.Throwable>)'
  name: '? extends Throwable>)'
  nameWithType: '? extends Throwable>)'
  fullName: '? extends java.lang.Throwable>)'
- uid: T>error(java.util.function.Supplier
  name: T>error(Supplier
  nameWithType: T>error(Supplier
  fullName: T>error(java.util.function.Supplier
- uid: reactor.core.publisher.Flux.onBackpressureDrop(java.util.function.Consumer
  name: Flux.onBackpressureDrop(Consumer
  nameWithType: Flux.onBackpressureDrop(Consumer
  fullName: reactor.core.publisher.Flux.onBackpressureDrop(java.util.function.Consumer
- uid: T>mergeSequential(org.reactivestreams.Publisher
  name: T>mergeSequential(Publisher
  nameWithType: T>mergeSequential(Publisher
  fullName: T>mergeSequential(org.reactivestreams.Publisher
- uid: K>collectMap(java.util.function.Function
  name: K>collectMap(Function
  nameWithType: K>collectMap(Function
  fullName: K>collectMap(java.util.function.Function
- uid: T>mergeOrdered(java.util.Comparator
  name: T>mergeOrdered(Comparator
  nameWithType: T>mergeOrdered(Comparator
  fullName: T>mergeOrdered(java.util.Comparator
- uid: reactor.core.publisher.Flux.onErrorResume(java.util.function.Function
  name: Flux.onErrorResume(Function
  nameWithType: Flux.onErrorResume(Function
  fullName: reactor.core.publisher.Flux.onErrorResume(java.util.function.Function
- uid: '? super java.lang.Throwable,? extends org.reactivestreams.Publisher'
  name: '? super Throwable,? extends Publisher'
  nameWithType: '? super Throwable,? extends Publisher'
  fullName: '? super java.lang.Throwable,? extends org.reactivestreams.Publisher'
- uid: '? super T1,? super T2,? extends V>)'
  name: '? super T1,? super T2,? extends V>)'
  nameWithType: '? super T1,? super T2,? extends V>)'
  fullName: '? super T1,? super T2,? extends V>)'
- uid: T1,T2,V>combineLatest(org.reactivestreams.Publisher
  name: T1,T2,V>combineLatest(Publisher
  nameWithType: T1,T2,V>combineLatest(Publisher
  fullName: T1,T2,V>combineLatest(org.reactivestreams.Publisher
- uid: '? extends U>,java.util.function.BiFunction'
  name: '? extends U>,BiFunction'
  nameWithType: '? extends U>,BiFunction'
  fullName: '? extends U>,java.util.function.BiFunction'
- uid: '? super T,? super U,? extends R>)'
  name: '? super T,? super U,? extends R>)'
  nameWithType: '? super T,? super U,? extends R>)'
  fullName: '? super T,? super U,? extends R>)'
- uid: U,R>withLatestFrom(org.reactivestreams.Publisher
  name: U,R>withLatestFrom(Publisher
  nameWithType: U,R>withLatestFrom(Publisher
  fullName: U,R>withLatestFrom(org.reactivestreams.Publisher
- uid: V>bufferUntilChanged(java.util.function.Function
  name: V>bufferUntilChanged(Function
  nameWithType: V>bufferUntilChanged(Function
  fullName: V>bufferUntilChanged(java.util.function.Function
- uid: V>)
  name: V>)
  nameWithType: V>)
  fullName: V>)
- uid: V>then(reactor.core.publisher.Mono
  name: V>then(Mono
  nameWithType: V>then(Mono
  fullName: V>then(reactor.core.publisher.Mono
- uid: reactor.core.publisher.Flux.takeWhile(java.util.function.Predicate
  name: Flux.takeWhile(Predicate
  nameWithType: Flux.takeWhile(Predicate
  fullName: reactor.core.publisher.Flux.takeWhile(java.util.function.Predicate
- uid: '? extends V>>,int)'
  name: '? extends V>>,int)'
  nameWithType: '? extends V>>,int)'
  fullName: '? extends V>>,int)'
- uid: '? super java.lang.Throwable,? extends java.lang.Throwable>)'
  name: '? super Throwable,? extends Throwable>)'
  nameWithType: '? super Throwable,? extends Throwable>)'
  fullName: '? super java.lang.Throwable,? extends java.lang.Throwable>)'
- uid: reactor.core.publisher.Flux.onErrorMap(java.util.function.Function
  name: Flux.onErrorMap(Function
  nameWithType: Flux.onErrorMap(Function
  fullName: reactor.core.publisher.Flux.onErrorMap(java.util.function.Function
- uid: V>map(java.util.function.Function
  name: V>map(Function
  nameWithType: V>map(Function
  fullName: V>map(java.util.function.Function
- uid: '? super T,? super reactor.core.publisher.Flux'
  name: '? super T,? super Flux'
  nameWithType: '? super T,? super Flux'
  fullName: '? super T,? super reactor.core.publisher.Flux'
- uid: '? extends TRight>,java.util.function.Function'
  name: '? extends TRight>,Function'
  nameWithType: '? extends TRight>,Function'
  fullName: '? extends TRight>,java.util.function.Function'
- uid: '? super TRight,? extends org.reactivestreams.Publisher'
  name: '? super TRight,? extends Publisher'
  nameWithType: '? super TRight,? extends Publisher'
  fullName: '? super TRight,? extends org.reactivestreams.Publisher'
- uid: TLeftEnd>>,java.util.function.Function
  name: TLeftEnd>>,Function
  nameWithType: TLeftEnd>>,Function
  fullName: TLeftEnd>>,java.util.function.Function
- uid: TRight,TLeftEnd,TRightEnd,R>groupJoin(org.reactivestreams.Publisher
  name: TRight,TLeftEnd,TRightEnd,R>groupJoin(Publisher
  nameWithType: TRight,TLeftEnd,TRightEnd,R>groupJoin(Publisher
  fullName: TRight,TLeftEnd,TRightEnd,R>groupJoin(org.reactivestreams.Publisher
- uid: TRight>,? extends R>)
  name: TRight>,? extends R>)
  nameWithType: TRight>,? extends R>)
  fullName: TRight>,? extends R>)
- uid: TRightEnd>>,java.util.function.BiFunction
  name: TRightEnd>>,BiFunction
  nameWithType: TRightEnd>>,BiFunction
  fullName: TRightEnd>>,java.util.function.BiFunction
- uid: T>onAssembly(reactor.core.publisher.ConnectableFlux
  name: T>onAssembly(ConnectableFlux
  nameWithType: T>onAssembly(ConnectableFlux
  fullName: T>onAssembly(reactor.core.publisher.ConnectableFlux
- uid: U,V,C>bufferWhen(org.reactivestreams.Publisher
  name: U,V,C>bufferWhen(Publisher
  nameWithType: U,V,C>bufferWhen(Publisher
  fullName: U,V,C>bufferWhen(org.reactivestreams.Publisher
- uid: V>>,java.util.function.Supplier
  name: V>>,Supplier
  nameWithType: V>>,Supplier
  fullName: V>>,java.util.function.Supplier
- uid: C>bufferTimeout(int,java.time.Duration,reactor.core.scheduler.Scheduler,java.util.function.Supplier
  name: C>bufferTimeout(int,Duration,Scheduler,Supplier
  nameWithType: C>bufferTimeout(int,Duration,Scheduler,Supplier
  fullName: C>bufferTimeout(int,java.time.Duration,reactor.core.scheduler.Scheduler,java.util.function.Supplier
- uid: V>flatMap(java.util.function.Function
  name: V>flatMap(Function
  nameWithType: V>flatMap(Function
  fullName: V>flatMap(java.util.function.Function
- uid: reactor.core.publisher.Flux.doFinally(java.util.function.Consumer
  name: Flux.doFinally(Consumer
  nameWithType: Flux.doFinally(Consumer
  fullName: reactor.core.publisher.Flux.doFinally(java.util.function.Consumer
- uid: reactor.core.publisher.SignalType>)
  name: SignalType>)
  nameWithType: SignalType>)
  fullName: reactor.core.publisher.SignalType>)
- uid: '? super java.lang.Object[],? extends O>)'
  name: '? super Object[],? extends O>)'
  nameWithType: '? super Object[],? extends O>)'
  fullName: '? super java.lang.Object[],? extends O>)'
- uid: ?>>,int,java.util.function.Function
  name: ?>>,int,Function
  nameWithType: ?>>,int,Function
  fullName: ?>>,int,java.util.function.Function
- uid: O>zip(java.lang.Iterable
  name: O>zip(Iterable
  nameWithType: O>zip(Iterable
  fullName: O>zip(java.lang.Iterable
- uid: E>onErrorContinue(java.util.function.Predicate
  name: E>onErrorContinue(Predicate
  nameWithType: E>onErrorContinue(Predicate
  fullName: E>onErrorContinue(java.util.function.Predicate
- uid: I>mergeSequentialDelayError(int,org.reactivestreams.Publisher
  name: I>mergeSequentialDelayError(int,Publisher
  nameWithType: I>mergeSequentialDelayError(int,Publisher
  fullName: I>mergeSequentialDelayError(int,org.reactivestreams.Publisher
- uid: reactor.core.publisher.Flux.buffer(org.reactivestreams.Publisher
  name: Flux.buffer(Publisher
  nameWithType: Flux.buffer(Publisher
  fullName: reactor.core.publisher.Flux.buffer(org.reactivestreams.Publisher
- uid: T>concat(java.lang.Iterable
  name: T>concat(Iterable
  nameWithType: T>concat(Iterable
  fullName: T>concat(java.lang.Iterable
- uid: I>first(java.lang.Iterable
  name: I>first(Iterable
  nameWithType: I>first(Iterable
  fullName: I>first(java.lang.Iterable
- uid: '? extends I>>)'
  name: '? extends I>>)'
  nameWithType: '? extends I>>)'
  fullName: '? extends I>>)'
- uid: T>deferWithContext(java.util.function.Function
  name: T>deferWithContext(Function
  nameWithType: T>deferWithContext(Function
  fullName: T>deferWithContext(java.util.function.Function
- uid: reactor.util.context.Context,? extends org.reactivestreams.Publisher
  name: Context,? extends Publisher
  nameWithType: Context,? extends Publisher
  fullName: reactor.util.context.Context,? extends org.reactivestreams.Publisher
- uid: V>switchMap(java.util.function.Function
  name: V>switchMap(Function
  nameWithType: V>switchMap(Function
  fullName: V>switchMap(java.util.function.Function
- uid: '? super T,org.reactivestreams.Publisher'
  name: '? super T,Publisher'
  nameWithType: '? super T,Publisher'
  fullName: '? super T,org.reactivestreams.Publisher'
- uid: I>mergeSequential(int,org.reactivestreams.Publisher
  name: I>mergeSequential(int,Publisher
  nameWithType: I>mergeSequential(int,Publisher
  fullName: I>mergeSequential(int,org.reactivestreams.Publisher
- uid: T1,T2,T3,T4>zip(org.reactivestreams.Publisher
  name: T1,T2,T3,T4>zip(Publisher
  nameWithType: T1,T2,T3,T4>zip(Publisher
  fullName: T1,T2,T3,T4>zip(org.reactivestreams.Publisher
- uid: '? extends T4>)'
  name: '? extends T4>)'
  nameWithType: '? extends T4>)'
  fullName: '? extends T4>)'
- uid: reactor.core.publisher.Flux.mergeOrderedWith(org.reactivestreams.Publisher
  name: Flux.mergeOrderedWith(Publisher
  nameWithType: Flux.mergeOrderedWith(Publisher
  fullName: reactor.core.publisher.Flux.mergeOrderedWith(org.reactivestreams.Publisher
- uid: '? extends T>,java.util.Comparator'
  name: '? extends T>,Comparator'
  nameWithType: '? extends T>,Comparator'
  fullName: '? extends T>,java.util.Comparator'
- uid: reactor.core.publisher.Flux.takeUntil(java.util.function.Predicate
  name: Flux.takeUntil(Predicate
  nameWithType: Flux.takeUntil(Predicate
  fullName: reactor.core.publisher.Flux.takeUntil(java.util.function.Predicate
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: '? super T,? extends V>,java.util.function.Supplier'
  name: '? super T,? extends V>,Supplier'
  nameWithType: '? super T,? extends V>,Supplier'
  fullName: '? super T,? extends V>,java.util.function.Supplier'
- uid: V>>>)
  name: V>>>)
  nameWithType: V>>>)
  fullName: V>>>)
- uid: K,java.util.Collection
  name: K,Collection
  nameWithType: K,Collection
  fullName: K,java.util.Collection
- uid: reactor.core.publisher.Flux.filter(java.util.function.Predicate
  name: Flux.filter(Predicate
  nameWithType: Flux.filter(Predicate
  fullName: reactor.core.publisher.Flux.filter(java.util.function.Predicate
- uid: K,V>>)
  name: K,V>>)
  nameWithType: K,V>>)
  fullName: K,V>>)
- uid: reactor.core.publisher.Flux.delayUntil(java.util.function.Function
  name: Flux.delayUntil(Function
  nameWithType: Flux.delayUntil(Function
  fullName: reactor.core.publisher.Flux.delayUntil(java.util.function.Function
- uid: reactor.core.publisher.SynchronousSink
  name: SynchronousSink
  nameWithType: SynchronousSink
  fullName: reactor.core.publisher.SynchronousSink
- uid: T>generate(java.util.function.Consumer
  name: T>generate(Consumer
  nameWithType: T>generate(Consumer
  fullName: T>generate(java.util.function.Consumer
- uid: reactor.core.publisher.Flux.any(java.util.function.Predicate
  name: Flux.any(Predicate
  nameWithType: Flux.any(Predicate
  fullName: reactor.core.publisher.Flux.any(java.util.function.Predicate
- uid: reactor.core.publisher.Flux.doOnEach(java.util.function.Consumer
  name: Flux.doOnEach(Consumer
  nameWithType: Flux.doOnEach(Consumer
  fullName: reactor.core.publisher.Flux.doOnEach(java.util.function.Consumer
- uid: '? super reactor.core.publisher.Signal'
  name: '? super Signal'
  nameWithType: '? super Signal'
  fullName: '? super reactor.core.publisher.Signal'
- uid: '? extends T2>,int,java.util.function.BiFunction'
  name: '? extends T2>,int,BiFunction'
  nameWithType: '? extends T2>,int,BiFunction'
  fullName: '? extends T2>,int,java.util.function.BiFunction'
- uid: C>bufferTimeout(int,java.time.Duration,java.util.function.Supplier
  name: C>bufferTimeout(int,Duration,Supplier
  nameWithType: C>bufferTimeout(int,Duration,Supplier
  fullName: C>bufferTimeout(int,java.time.Duration,java.util.function.Supplier
- uid: reactor.core.publisher.Flux.toIterable(int,java.util.function.Supplier
  name: Flux.toIterable(int,Supplier
  nameWithType: Flux.toIterable(int,Supplier
  fullName: reactor.core.publisher.Flux.toIterable(int,java.util.function.Supplier
- uid: java.util.Queue
  name: Queue
  nameWithType: Queue
  fullName: java.util.Queue
- uid: '? extends I>>,int,int)'
  name: '? extends I>>,int,int)'
  nameWithType: '? extends I>>,int,int)'
  fullName: '? extends I>>,int,int)'
- uid: I>mergeSequentialDelayError(java.lang.Iterable
  name: I>mergeSequentialDelayError(Iterable
  nameWithType: I>mergeSequentialDelayError(Iterable
  fullName: I>mergeSequentialDelayError(java.lang.Iterable
- uid: O>error(java.lang.Throwable,boolean)
  name: O>error(Throwable,boolean)
  nameWithType: O>error(Throwable,boolean)
  fullName: O>error(java.lang.Throwable,boolean)
- uid: T>,boolean)
  name: T>,boolean)
  nameWithType: T>,boolean)
  fullName: T>,boolean)
- uid: T>push(java.util.function.Consumer
  name: T>push(Consumer
  nameWithType: T>push(Consumer
  fullName: T>push(java.util.function.Consumer
- uid: T>fromArray(T[])
  name: T>fromArray(T[])
  nameWithType: T>fromArray(T[])
  fullName: T>fromArray(T[])
- uid: java.lang.Boolean>>)
  name: Boolean>>)
  nameWithType: Boolean>>)
  fullName: java.lang.Boolean>>)
- uid: T>,org.reactivestreams.Publisher
  name: T>,Publisher
  nameWithType: T>,Publisher
  fullName: T>,org.reactivestreams.Publisher
- uid: reactor.core.publisher.Signal
  name: Signal
  nameWithType: Signal
  fullName: reactor.core.publisher.Signal
- uid: '? extends T>,reactor.core.publisher.Flux'
  name: '? extends T>,Flux'
  nameWithType: '? extends T>,Flux'
  fullName: '? extends T>,reactor.core.publisher.Flux'
- uid: '? extends V>>,boolean)'
  name: '? extends V>>,boolean)'
  nameWithType: '? extends V>>,boolean)'
  fullName: '? extends V>>,boolean)'
- uid: V>switchOnFirst(java.util.function.BiFunction
  name: V>switchOnFirst(BiFunction
  nameWithType: V>switchOnFirst(BiFunction
  fullName: V>switchOnFirst(java.util.function.BiFunction
- uid: V>windowUntilChanged(java.util.function.Function
  name: V>windowUntilChanged(Function
  nameWithType: V>windowUntilChanged(Function
  fullName: V>windowUntilChanged(java.util.function.Function
- uid: '? super T,? super V>)'
  name: '? super T,? super V>)'
  nameWithType: '? super T,? super V>)'
  fullName: '? super T,? super V>)'
- uid: reactor.core.publisher.Flux.windowWhile(java.util.function.Predicate
  name: Flux.windowWhile(Predicate
  nameWithType: Flux.windowWhile(Predicate
  fullName: reactor.core.publisher.Flux.windowWhile(java.util.function.Predicate
- uid: reactor.core.publisher.Flux.onErrorMap(java.util.function.Predicate
  name: Flux.onErrorMap(Predicate
  nameWithType: Flux.onErrorMap(Predicate
  fullName: reactor.core.publisher.Flux.onErrorMap(java.util.function.Predicate
- uid: '? super java.lang.Throwable>,java.util.function.Function'
  name: '? super Throwable>,Function'
  nameWithType: '? super Throwable>,Function'
  fullName: '? super java.lang.Throwable>,java.util.function.Function'
- uid: '? super D>,boolean)'
  name: '? super D>,boolean)'
  nameWithType: '? super D>,boolean)'
  fullName: '? super D>,boolean)'
- uid: T,D>using(java.util.concurrent.Callable
  name: T,D>using(Callable
  nameWithType: T,D>using(Callable
  fullName: T,D>using(java.util.concurrent.Callable
- uid: '? extends D>,java.util.function.Function'
  name: '? extends D>,Function'
  nameWithType: '? extends D>,Function'
  fullName: '? extends D>,java.util.function.Function'
- uid: '? extends T>>,java.util.function.Consumer'
  name: '? extends T>>,Consumer'
  nameWithType: '? extends T>>,Consumer'
  fullName: '? extends T>>,java.util.function.Consumer'
- uid: I,O>zip(java.util.function.Function
  name: I,O>zip(Function
  nameWithType: I,O>zip(Function
  fullName: I,O>zip(java.util.function.Function
- uid: '? super java.lang.Object[],? extends O>,int,org.reactivestreams.Publisher'
  name: '? super Object[],? extends O>,int,Publisher'
  nameWithType: '? super Object[],? extends O>,int,Publisher'
  fullName: '? super java.lang.Object[],? extends O>,int,org.reactivestreams.Publisher'
- uid: java.lang.Object[],V>,org.reactivestreams.Publisher
  name: Object[],V>,Publisher
  nameWithType: Object[],V>,Publisher
  fullName: java.lang.Object[],V>,org.reactivestreams.Publisher
- uid: T,V>combineLatest(java.util.function.Function
  name: T,V>combineLatest(Function
  nameWithType: T,V>combineLatest(Function
  fullName: T,V>combineLatest(java.util.function.Function
- uid: A>scanWith(java.util.function.Supplier
  name: A>scanWith(Supplier
  nameWithType: A>scanWith(Supplier
  fullName: A>scanWith(java.util.function.Supplier
- uid: E>)
  name: E>)
  nameWithType: E>)
  fullName: E>)
- uid: E>cast(java.lang.Class
  name: E>cast(Class
  nameWithType: E>cast(Class
  fullName: E>cast(java.lang.Class
- uid: U,V>bufferWhen(org.reactivestreams.Publisher
  name: U,V>bufferWhen(Publisher
  nameWithType: U,V>bufferWhen(Publisher
  fullName: U,V>bufferWhen(org.reactivestreams.Publisher
- uid: T>never()
  name: T>never()
  nameWithType: T>never()
  fullName: T>never()
- uid: R>flatMapSequentialDelayError(java.util.function.Function
  name: R>flatMapSequentialDelayError(Function
  nameWithType: R>flatMapSequentialDelayError(Function
  fullName: R>flatMapSequentialDelayError(java.util.function.Function
- uid: reactor.core.publisher.Flux.retryWhen(java.util.function.Function
  name: Flux.retryWhen(Function
  nameWithType: Flux.retryWhen(Function
  fullName: reactor.core.publisher.Flux.retryWhen(java.util.function.Function
- uid: java.lang.Throwable>,? extends org.reactivestreams.Publisher
  name: Throwable>,? extends Publisher
  nameWithType: Throwable>,? extends Publisher
  fullName: java.lang.Throwable>,? extends org.reactivestreams.Publisher
- uid: reactor.core.publisher.Flux.onBackpressureBuffer(java.time.Duration,int,java.util.function.Consumer
  name: Flux.onBackpressureBuffer(Duration,int,Consumer
  nameWithType: Flux.onBackpressureBuffer(Duration,int,Consumer
  fullName: reactor.core.publisher.Flux.onBackpressureBuffer(java.time.Duration,int,java.util.function.Consumer
- uid: '? super T>,reactor.core.scheduler.Scheduler)'
  name: '? super T>,Scheduler)'
  nameWithType: '? super T>,Scheduler)'
  fullName: '? super T>,reactor.core.scheduler.Scheduler)'
- uid: U>ofType(java.lang.Class
  name: U>ofType(Class
  nameWithType: U>ofType(Class
  fullName: U>ofType(java.lang.Class
- uid: '? super E,? extends org.reactivestreams.Publisher'
  name: '? super E,? extends Publisher'
  nameWithType: '? super E,? extends Publisher'
  fullName: '? super E,? extends org.reactivestreams.Publisher'
- uid: E>,java.util.function.Function
  name: E>,Function
  nameWithType: E>,Function
  fullName: E>,java.util.function.Function
- uid: E>onErrorResume(java.lang.Class
  name: E>onErrorResume(Class
  nameWithType: E>onErrorResume(Class
  fullName: E>onErrorResume(java.lang.Class
- uid: '? super D>)'
  name: '? super D>)'
  nameWithType: '? super D>)'
  fullName: '? super D>)'
- uid: V>thenMany(org.reactivestreams.Publisher
  name: V>thenMany(Publisher
  nameWithType: V>thenMany(Publisher
  fullName: V>thenMany(org.reactivestreams.Publisher
- uid: reactor.core.publisher.Flux.subscribe(org.reactivestreams.Subscriber
  name: Flux.subscribe(Subscriber
  nameWithType: Flux.subscribe(Subscriber
  fullName: reactor.core.publisher.Flux.subscribe(org.reactivestreams.Subscriber
- uid: reactor.core.publisher.Flux.skipUntilOther(org.reactivestreams.Publisher
  name: Flux.skipUntilOther(Publisher
  nameWithType: Flux.skipUntilOther(Publisher
  fullName: reactor.core.publisher.Flux.skipUntilOther(org.reactivestreams.Publisher
- uid: T>concat(org.reactivestreams.Publisher
  name: T>concat(Publisher
  nameWithType: T>concat(Publisher
  fullName: T>concat(org.reactivestreams.Publisher
- uid: T>from(org.reactivestreams.Publisher
  name: T>from(Publisher
  nameWithType: T>from(Publisher
  fullName: T>from(org.reactivestreams.Publisher
- uid: E>doOnError(java.lang.Class
  name: E>doOnError(Class
  nameWithType: E>doOnError(Class
  fullName: E>doOnError(java.lang.Class
- uid: E>,java.util.function.Consumer
  name: E>,Consumer
  nameWithType: E>,Consumer
  fullName: E>,java.util.function.Consumer
- uid: '? super E>)'
  name: '? super E>)'
  nameWithType: '? super E>)'
  fullName: '? super E>)'
- uid: T>empty()
  name: T>empty()
  nameWithType: T>empty()
  fullName: T>empty()
- uid: P>as(java.util.function.Function
  name: P>as(Function
  nameWithType: P>as(Function
  fullName: P>as(java.util.function.Function
- uid: T>,P>)
  name: T>,P>)
  nameWithType: T>,P>)
  fullName: T>,P>)
- uid: '? super T,? extends V>,java.util.function.BiPredicate'
  name: '? super T,? extends V>,BiPredicate'
  nameWithType: '? super T,? extends V>,BiPredicate'
  fullName: '? super T,? extends V>,java.util.function.BiPredicate'
- uid: '? super V,? super V>)'
  name: '? super V,? super V>)'
  nameWithType: '? super V,? super V>)'
  fullName: '? super V,? super V>)'
- uid: A>reduce(A,java.util.function.BiFunction
  name: A>reduce(A,BiFunction
  nameWithType: A>reduce(A,BiFunction
  fullName: A>reduce(A,java.util.function.BiFunction
- uid: reactor.core.publisher.Flux.sort(java.util.Comparator
  name: Flux.sort(Comparator
  nameWithType: Flux.sort(Comparator
  fullName: reactor.core.publisher.Flux.sort(java.util.Comparator
- uid: '? extends T>>,boolean,int)'
  name: '? extends T>>,boolean,int)'
  nameWithType: '? extends T>>,boolean,int)'
  fullName: '? extends T>>,boolean,int)'
- uid: reactor.core.publisher.Flux.skipUntil(java.util.function.Predicate
  name: Flux.skipUntil(Predicate
  nameWithType: Flux.skipUntil(Predicate
  fullName: reactor.core.publisher.Flux.skipUntil(java.util.function.Predicate
- uid: T>,S>,java.util.function.Consumer
  name: T>,S>,Consumer
  nameWithType: T>,S>,Consumer
  fullName: T>,S>,java.util.function.Consumer
- uid: '? super S>)'
  name: '? super S>)'
  nameWithType: '? super S>)'
  fullName: '? super S>)'
- uid: T>onAssembly(reactor.core.publisher.Flux
  name: T>onAssembly(Flux
  nameWithType: T>onAssembly(Flux
  fullName: T>onAssembly(reactor.core.publisher.Flux
- uid: I>mergeSequential(java.lang.Iterable
  name: I>mergeSequential(Iterable
  nameWithType: I>mergeSequential(Iterable
  fullName: I>mergeSequential(java.lang.Iterable
- uid: reactor.core.publisher.Flux.onErrorReturn(java.util.function.Predicate
  name: Flux.onErrorReturn(Predicate
  nameWithType: Flux.onErrorReturn(Predicate
  fullName: reactor.core.publisher.Flux.onErrorReturn(java.util.function.Predicate
- uid: '? super java.lang.Throwable>,T)'
  name: '? super Throwable>,T)'
  nameWithType: '? super Throwable>,T)'
  fullName: '? super java.lang.Throwable>,T)'
- uid: U>sampleFirst(java.util.function.Function
  name: U>sampleFirst(Function
  nameWithType: U>sampleFirst(Function
  fullName: U>sampleFirst(java.util.function.Function
- uid: reactor.core.publisher.Flux.mergeWith(org.reactivestreams.Publisher
  name: Flux.mergeWith(Publisher
  nameWithType: Flux.mergeWith(Publisher
  fullName: reactor.core.publisher.Flux.mergeWith(org.reactivestreams.Publisher
- uid: '? super java.lang.Throwable>,java.lang.Runnable,reactor.util.context.Context)'
  name: '? super Throwable>,Runnable,Context)'
  nameWithType: '? super Throwable>,Runnable,Context)'
  fullName: '? super java.lang.Throwable>,java.lang.Runnable,reactor.util.context.Context)'
- uid: reactor.core.publisher.Flux.concatWith(org.reactivestreams.Publisher
  name: Flux.concatWith(Publisher
  nameWithType: Flux.concatWith(Publisher
  fullName: reactor.core.publisher.Flux.concatWith(org.reactivestreams.Publisher
- uid: I>merge(java.lang.Iterable
  name: I>merge(Iterable
  nameWithType: I>merge(Iterable
  fullName: I>merge(java.lang.Iterable
- uid: '? super TUPLE,? extends V>)'
  name: '? super TUPLE,? extends V>)'
  nameWithType: '? super TUPLE,? extends V>)'
  fullName: '? super TUPLE,? extends V>)'
- uid: TUPLE,V>zip(org.reactivestreams.Publisher
  name: TUPLE,V>zip(Publisher
  nameWithType: TUPLE,V>zip(Publisher
  fullName: TUPLE,V>zip(org.reactivestreams.Publisher
- uid: '? super java.lang.Object[],? extends O>,org.reactivestreams.Publisher'
  name: '? super Object[],? extends O>,Publisher'
  nameWithType: '? super Object[],? extends O>,Publisher'
  fullName: '? super java.lang.Object[],? extends O>,org.reactivestreams.Publisher'
- uid: E>onErrorMap(java.lang.Class
  name: E>onErrorMap(Class
  nameWithType: E>onErrorMap(Class
  fullName: E>onErrorMap(java.lang.Class
- uid: '? super E,? extends java.lang.Throwable>)'
  name: '? super E,? extends Throwable>)'
  nameWithType: '? super E,? extends Throwable>)'
  fullName: '? super E,? extends java.lang.Throwable>)'
- uid: reactor.core.publisher.Flux.subscriberContext(java.util.function.Function
  name: Flux.subscriberContext(Function
  nameWithType: Flux.subscriberContext(Function
  fullName: reactor.core.publisher.Flux.subscriberContext(java.util.function.Function
- uid: reactor.util.context.Context,reactor.util.context.Context>)
  name: Context,Context>)
  nameWithType: Context,Context>)
  fullName: reactor.util.context.Context,reactor.util.context.Context>)
- uid: V>transform(java.util.function.Function
  name: V>transform(Function
  nameWithType: V>transform(Function
  fullName: V>transform(java.util.function.Function
- uid: I>mergeOrdered(org.reactivestreams.Publisher
  name: I>mergeOrdered(Publisher
  nameWithType: I>mergeOrdered(Publisher
  fullName: I>mergeOrdered(org.reactivestreams.Publisher
- uid: reactor.core.publisher.Flux.subscribe(reactor.core.CoreSubscriber
  name: Flux.subscribe(CoreSubscriber
  nameWithType: Flux.subscribe(CoreSubscriber
  fullName: reactor.core.publisher.Flux.subscribe(reactor.core.CoreSubscriber
- uid: '? super T>,reactor.core.publisher.BufferOverflowStrategy)'
  name: '? super T>,BufferOverflowStrategy)'
  nameWithType: '? super T>,BufferOverflowStrategy)'
  fullName: '? super T>,reactor.core.publisher.BufferOverflowStrategy)'
- uid: reactor.core.publisher.Flux.skipWhile(java.util.function.Predicate
  name: Flux.skipWhile(Predicate
  nameWithType: Flux.skipWhile(Predicate
  fullName: reactor.core.publisher.Flux.skipWhile(java.util.function.Predicate
- uid: T1,T2,T3>zip(org.reactivestreams.Publisher
  name: T1,T2,T3>zip(Publisher
  nameWithType: T1,T2,T3>zip(Publisher
  fullName: T1,T2,T3>zip(org.reactivestreams.Publisher
- uid: '? extends T3>)'
  name: '? extends T3>)'
  nameWithType: '? extends T3>)'
  fullName: '? extends T3>)'
- uid: T2>zipWithIterable(java.lang.Iterable
  name: T2>zipWithIterable(Iterable
  nameWithType: T2>zipWithIterable(Iterable
  fullName: T2>zipWithIterable(java.lang.Iterable
- uid: I>first(org.reactivestreams.Publisher
  name: I>first(Publisher
  nameWithType: I>first(Publisher
  fullName: I>first(org.reactivestreams.Publisher
- uid: reactor.core.publisher.Flux.startWith(java.lang.Iterable
  name: Flux.startWith(Iterable
  nameWithType: Flux.startWith(Iterable
  fullName: reactor.core.publisher.Flux.startWith(java.lang.Iterable
- uid: '? super T,? super TRight,? extends R>)'
  name: '? super T,? super TRight,? extends R>)'
  nameWithType: '? super T,? super TRight,? extends R>)'
  fullName: '? super T,? super TRight,? extends R>)'
- uid: TRight,TLeftEnd,TRightEnd,R>join(org.reactivestreams.Publisher
  name: TRight,TLeftEnd,TRightEnd,R>join(Publisher
  nameWithType: TRight,TLeftEnd,TRightEnd,R>join(Publisher
  fullName: TRight,TLeftEnd,TRightEnd,R>join(org.reactivestreams.Publisher
- uid: java.util.stream.Stream
  name: Stream
  nameWithType: Stream
  fullName: java.util.stream.Stream
- uid: T>fromStream(java.util.function.Supplier
  name: T>fromStream(Supplier
  nameWithType: T>fromStream(Supplier
  fullName: T>fromStream(java.util.function.Supplier
- uid: reactor.core.publisher.Flux.onErrorResume(java.util.function.Predicate
  name: Flux.onErrorResume(Predicate
  nameWithType: Flux.onErrorResume(Predicate
  fullName: reactor.core.publisher.Flux.onErrorResume(java.util.function.Predicate
- uid: java.lang.Object[],V>,int,org.reactivestreams.Publisher
  name: Object[],V>,int,Publisher
  nameWithType: Object[],V>,int,Publisher
  fullName: java.lang.Object[],V>,int,org.reactivestreams.Publisher
- uid: '? extends T>,reactor.core.scheduler.Scheduler)'
  name: '? extends T>,Scheduler)'
  nameWithType: '? extends T>,Scheduler)'
  fullName: '? extends T>,reactor.core.scheduler.Scheduler)'
- uid: '? super T,? extends K>,int)'
  name: '? super T,? extends K>,int)'
  nameWithType: '? super T,? extends K>,int)'
  fullName: '? super T,? extends K>,int)'
- uid: T>,int)
  name: T>,int)
  nameWithType: T>,int)
  fullName: T>,int)
- uid: T>just(T)
  name: T>just(T)
  nameWithType: T>just(T)
  fullName: T>just(T)
- uid: T1,T2,T3,T4,T5,V>combineLatest(org.reactivestreams.Publisher
  name: T1,T2,T3,T4,T5,V>combineLatest(Publisher
  nameWithType: T1,T2,T3,T4,T5,V>combineLatest(Publisher
  fullName: T1,T2,T3,T4,T5,V>combineLatest(org.reactivestreams.Publisher
- uid: '? extends T5>,java.util.function.Function'
  name: '? extends T5>,Function'
  nameWithType: '? extends T5>,Function'
  fullName: '? extends T5>,java.util.function.Function'
- uid: V>windowUntilChanged()
  name: V>windowUntilChanged()
  nameWithType: V>windowUntilChanged()
  fullName: V>windowUntilChanged()
- uid: '? extends R>>,java.util.function.Function'
  name: '? extends R>>,Function'
  nameWithType: '? extends R>>,Function'
  fullName: '? extends R>>,java.util.function.Function'
- uid: '? extends R>>,java.util.function.Supplier'
  name: '? extends R>>,Supplier'
  nameWithType: '? extends R>>,Supplier'
  fullName: '? extends R>>,java.util.function.Supplier'
- uid: R>flatMap(java.util.function.Function
  name: R>flatMap(Function
  nameWithType: R>flatMap(Function
  fullName: R>flatMap(java.util.function.Function
- uid: reactor.core.publisher.Flux.retry(long,java.util.function.Predicate
  name: Flux.retry(long,Predicate
  nameWithType: Flux.retry(long,Predicate
  fullName: reactor.core.publisher.Flux.retry(long,java.util.function.Predicate
- uid: C>buffer(int,java.util.function.Supplier
  name: C>buffer(int,Supplier
  nameWithType: C>buffer(int,Supplier
  fullName: C>buffer(int,java.util.function.Supplier
- uid: E>collect(java.util.function.Supplier
  name: E>collect(Supplier
  nameWithType: E>collect(Supplier
  fullName: E>collect(java.util.function.Supplier
- uid: E,? super T>)
  name: E,? super T>)
  nameWithType: E,? super T>)
  fullName: E,? super T>)
- uid: T1,T2,T3,V>combineLatest(org.reactivestreams.Publisher
  name: T1,T2,T3,V>combineLatest(Publisher
  nameWithType: T1,T2,T3,V>combineLatest(Publisher
  fullName: T1,T2,T3,V>combineLatest(org.reactivestreams.Publisher
- uid: '? extends T3>,java.util.function.Function'
  name: '? extends T3>,Function'
  nameWithType: '? extends T3>,Function'
  fullName: '? extends T3>,java.util.function.Function'
- uid: '? super java.lang.Throwable>,java.lang.Runnable)'
  name: '? super Throwable>,Runnable)'
  nameWithType: '? super Throwable>,Runnable)'
  fullName: '? super java.lang.Throwable>,java.lang.Runnable)'
- uid: '? super java.lang.Throwable>,java.lang.Runnable,java.util.function.Consumer'
  name: '? super Throwable>,Runnable,Consumer'
  nameWithType: '? super Throwable>,Runnable,Consumer'
  fullName: '? super java.lang.Throwable>,java.lang.Runnable,java.util.function.Consumer'
- uid: U>delaySubscription(org.reactivestreams.Publisher
  name: U>delaySubscription(Publisher
  nameWithType: U>delaySubscription(Publisher
  fullName: U>delaySubscription(org.reactivestreams.Publisher
- uid: '? extends V>>,boolean,int)'
  name: '? extends V>>,boolean,int)'
  nameWithType: '? extends V>>,boolean,int)'
  fullName: '? extends V>>,boolean,int)'
- uid: V,C>distinct(java.util.function.Function
  name: V,C>distinct(Function
  nameWithType: V,C>distinct(Function
  fullName: V,C>distinct(java.util.function.Function
- uid: C,V>,java.util.function.Consumer
  name: C,V>,Consumer
  nameWithType: C,V>,Consumer
  fullName: C,V>,java.util.function.Consumer
- uid: C>,java.util.function.BiPredicate
  name: C>,BiPredicate
  nameWithType: C>,BiPredicate
  fullName: C>,java.util.function.BiPredicate
- uid: R>handle(java.util.function.BiConsumer
  name: R>handle(BiConsumer
  nameWithType: R>handle(BiConsumer
  fullName: R>handle(java.util.function.BiConsumer
- uid: R>>)
  name: R>>)
  nameWithType: R>>)
  fullName: R>>)
- uid: '? super T,reactor.core.publisher.SynchronousSink'
  name: '? super T,SynchronousSink'
  nameWithType: '? super T,SynchronousSink'
  fullName: '? super T,reactor.core.publisher.SynchronousSink'
- uid: '? extends T4>,java.util.function.Function'
  name: '? extends T4>,Function'
  nameWithType: '? extends T4>,Function'
  fullName: '? extends T4>,java.util.function.Function'
- uid: T1,T2,T3,T4,V>combineLatest(org.reactivestreams.Publisher
  name: T1,T2,T3,T4,V>combineLatest(Publisher
  nameWithType: T1,T2,T3,T4,V>combineLatest(Publisher
  fullName: T1,T2,T3,T4,V>combineLatest(org.reactivestreams.Publisher
- uid: reactor.core.publisher.Flux.retry(java.util.function.Predicate
  name: Flux.retry(Predicate
  nameWithType: Flux.retry(Predicate
  fullName: reactor.core.publisher.Flux.retry(java.util.function.Predicate
- uid: reactor.core.publisher.Flux.switchIfEmpty(org.reactivestreams.Publisher
  name: Flux.switchIfEmpty(Publisher
  nameWithType: Flux.switchIfEmpty(Publisher
  fullName: reactor.core.publisher.Flux.switchIfEmpty(org.reactivestreams.Publisher
- uid: T>error(java.lang.Throwable)
  name: T>error(Throwable)
  nameWithType: T>error(Throwable)
  fullName: T>error(java.lang.Throwable)
- uid: java.lang.Void>)
  name: Void>)
  nameWithType: Void>)
  fullName: java.lang.Void>)
- uid: reactor.core.publisher.Flux.thenEmpty(org.reactivestreams.Publisher
  name: Flux.thenEmpty(Publisher
  nameWithType: Flux.thenEmpty(Publisher
  fullName: reactor.core.publisher.Flux.thenEmpty(org.reactivestreams.Publisher
- uid: '? super T,A,? extends R>)'
  name: '? super T,A,? extends R>)'
  nameWithType: '? super T,A,? extends R>)'
  fullName: '? super T,A,? extends R>)'
- uid: R,A>collect(java.util.stream.Collector
  name: R,A>collect(Collector
  nameWithType: R,A>collect(Collector
  fullName: R,A>collect(java.util.stream.Collector
- uid: A>scan(A,java.util.function.BiFunction
  name: A>scan(A,BiFunction
  nameWithType: A>scan(A,BiFunction
  fullName: A>scan(A,java.util.function.BiFunction
- uid: I>mergeDelayError(int,org.reactivestreams.Publisher
  name: I>mergeDelayError(int,Publisher
  nameWithType: I>mergeDelayError(int,Publisher
  fullName: I>mergeDelayError(int,org.reactivestreams.Publisher
