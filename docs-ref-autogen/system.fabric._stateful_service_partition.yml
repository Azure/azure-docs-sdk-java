items:
- uid: system.fabric._stateful_service_partition
  id: _stateful_service_partition
  parent: system.fabric
  children:
  - system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)
  - system.fabric._stateful_service_partition.getReadStatus()
  - system.fabric._stateful_service_partition.getwriteStatus()
  - system.fabric._stateful_service_partition.reportReplicaHealth(HealthInformation)
  href: system.fabric._stateful_service_partition.yml
  langs:
  - java
  name: StatefulServicePartition
  nameWithType: StatefulServicePartition
  fullName: system.fabric.StatefulServicePartition
  type: Interface
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
    startLine: 5
  package: system.fabric
  syntax:
    content: public interface StatefulServicePartition extends ServicePartition
  inheritedMembers:
  - system.fabric._service_partition.getPartitionInfo()
  - system.fabric._service_partition.reportFault(FaultType)
  - system.fabric._service_partition.reportLoad(Collection<LoadMetric>)
  - system.fabric._service_partition.reportMoveCost(MoveCost)
  - system.fabric._service_partition.reportPartitionHealth(HealthInformation)
- uid: system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)
  id: createReplicator(StateProvider,ReplicatorSettings)
  parent: system.fabric._stateful_service_partition
  href: system.fabric._stateful_service_partition.yml
  langs:
  - java
  name: createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)
  nameWithType: StatefulServicePartition.createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)
  fullName: FabricReplicator system.fabric.StatefulServicePartition.createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)
  overload: system.fabric._stateful_service_partition.createReplicator*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
    startLine: 51
  package: system.fabric
  summary: >-
    <p>Creates a <xref href="system.fabric._fabric_replicator" data-throw-if-not-resolved="false"></xref> with the specified settings and returns it to the replica.</p>

    <p>

      <bold>Remarks:</bold>This method should be used to create a <xref href="system.fabric._fabric_replicator" data-throw-if-not-resolved="false"></xref> to service as the <xref href="system.fabric._state_replicator" data-throw-if-not-resolved="false"></xref> for a stateful service that implements <xref href="system.fabric._state_provider" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public FabricReplicator createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)
    parameters:
    - id: stateProvider
      type: system.fabric._state_provider
      description: <p>The <xref href="system.fabric._state_provider" data-throw-if-not-resolved="false"></xref> with which the returned <xref href="system.fabric._fabric_replicator" data-throw-if-not-resolved="false"></xref> should be associated. This is often the same object that implements <xref href="system.fabric._stateful_service_replica" data-throw-if-not-resolved="false"></xref>, but certain services might be factored differently. </p>
    - id: replicatorSettings
      type: system.fabric._replicator_settings
      description: >-
        <p>

          <xref href="system.fabric._replicator_settings" data-throw-if-not-resolved="false"></xref> with which the returned <xref href="system.fabric._fabric_replicator" data-throw-if-not-resolved="false"></xref> should be configured. </p>
    return:
      type: system.fabric._fabric_replicator
      description: <p>Returns <xref href="system.fabric._fabric_replicator" data-throw-if-not-resolved="false"></xref>. </p>
- uid: system.fabric._stateful_service_partition.getReadStatus()
  id: getReadStatus()
  parent: system.fabric._stateful_service_partition
  href: system.fabric._stateful_service_partition.yml
  langs:
  - java
  name: getReadStatus()
  nameWithType: StatefulServicePartition.getReadStatus()
  fullName: PartitionAccessStatus system.fabric.StatefulServicePartition.getReadStatus()
  overload: system.fabric._stateful_service_partition.getReadStatus*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
    startLine: 17
  package: system.fabric
  summary: >-
    <p>Used to check the readiness of the replica in regard to read operations.</p>

    <p>

      <bold>Remarks:</bold>The readStatus should be checked before the replica is servicing a customer request that is a read operation. </p>
  syntax:
    content: public PartitionAccessStatus getReadStatus()
    return:
      type: system.fabric._partition_access_status
      description: >-
        <p>

          <xref href="system.fabric._partition_access_status" data-throw-if-not-resolved="false"></xref>. </p>
  exceptions:
  - type: system.fabric.exception._fabric_object_closed_exception
    description: <p>This indicates that the partition object is closed. The replica/replicator/instance has either been closed or is about to be closed. </p>
- uid: system.fabric._stateful_service_partition.getwriteStatus()
  id: getwriteStatus()
  parent: system.fabric._stateful_service_partition
  href: system.fabric._stateful_service_partition.yml
  langs:
  - java
  name: getwriteStatus()
  nameWithType: StatefulServicePartition.getwriteStatus()
  fullName: PartitionAccessStatus system.fabric.StatefulServicePartition.getwriteStatus()
  overload: system.fabric._stateful_service_partition.getwriteStatus*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
    startLine: 30
  package: system.fabric
  summary: >-
    <p>Used to check the readiness of the partition in regard to write operations.</p>

    <p>

      <bold>Remarks:</bold>The WriteStatus should be checked before the replica services a customer request that is a write operation. </p>
  syntax:
    content: public PartitionAccessStatus getwriteStatus()
    return:
      type: system.fabric._partition_access_status
      description: >-
        <p>

          <xref href="system.fabric._partition_access_status" data-throw-if-not-resolved="false"></xref>. </p>
  exceptions:
  - type: system.fabric.exception._fabric_object_closed_exception
    description: <p>This indicates that the partition object is closed. The replica/replicator/instance has either been closed or is about to be closed. </p>
- uid: system.fabric._stateful_service_partition.reportReplicaHealth(HealthInformation)
  id: reportReplicaHealth(HealthInformation)
  parent: system.fabric._stateful_service_partition
  href: system.fabric._stateful_service_partition.yml
  langs:
  - java
  name: reportReplicaHealth(HealthInformation healthInfo)
  nameWithType: StatefulServicePartition.reportReplicaHealth(HealthInformation healthInfo)
  fullName: void system.fabric.StatefulServicePartition.reportReplicaHealth(HealthInformation healthInfo)
  overload: system.fabric._stateful_service_partition.reportReplicaHealth*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
    startLine: 59
  package: system.fabric
  summary: >-
    <p>Reports health of the current replica associated with this partition.</p>

    <p></p>
  syntax:
    content: public void reportReplicaHealth(HealthInformation healthInfo)
    parameters:
    - id: healthInfo
      type: system.fabric.health._health_information
      description: <p>Health information that is to be reported. </p>
references:
- uid: system.fabric._stateful_service_partition.getReadStatus*
  name: getReadStatus
  nameWithType: StatefulServicePartition.getReadStatus
  fullName: PartitionAccessStatus system.fabric.StatefulServicePartition.getReadStatus
  package: system.fabric
- uid: system.fabric._stateful_service_partition.getwriteStatus*
  name: getwriteStatus
  nameWithType: StatefulServicePartition.getwriteStatus
  fullName: PartitionAccessStatus system.fabric.StatefulServicePartition.getwriteStatus
  package: system.fabric
- uid: system.fabric._stateful_service_partition.createReplicator*
  name: createReplicator
  nameWithType: StatefulServicePartition.createReplicator
  fullName: FabricReplicator system.fabric.StatefulServicePartition.createReplicator
  package: system.fabric
- uid: system.fabric._stateful_service_partition.reportReplicaHealth*
  name: reportReplicaHealth
  nameWithType: StatefulServicePartition.reportReplicaHealth
  fullName: void system.fabric.StatefulServicePartition.reportReplicaHealth
  package: system.fabric
- uid: system.fabric._service_partition.getPartitionInfo()
  parent: system.fabric._service_partition
  href: system.fabric._service_partition.yml
  name: getPartitionInfo()
  nameWithType: ServicePartition.getPartitionInfo()
  fullName: ServicePartitionInformation system.fabric.ServicePartition.getPartitionInfo()
  type: Method
  summary: >-
    <p>Provides access to the <xref href="system.fabric._service_partition_information" data-throw-if-not-resolved="false"></xref> of the service, which contains the partition type and ID.</p>

    <p></p>
  syntax:
    content: public ServicePartitionInformation getPartitionInfo()
    return:
      type: system.fabric._service_partition_information
      description: <p>Returns <xref href="system.fabric._service_partition_information" data-throw-if-not-resolved="false"></xref>. </p>
- uid: system.fabric._service_partition.reportFault(FaultType)
  parent: system.fabric._service_partition
  href: system.fabric._service_partition.yml
  name: reportFault(FaultType faultType)
  nameWithType: ServicePartition.reportFault(FaultType faultType)
  fullName: void system.fabric.ServicePartition.reportFault(FaultType faultType)
  type: Method
  summary: >-
    <p>Reports the load for a set of load balancing metrics. The load can be reported at any time via the <ref refid="" kindref="compound">java.util.Collection</ref> of <xref href="system.fabric._load_metric" data-throw-if-not-resolved="false"></xref> method and provides one or more properties of the <xref href="system.fabric._load_metric" data-throw-if-not-resolved="false"></xref> method.</p>

    <p>

      <bold>Remarks:</bold>A fault is typically reported when the service code encounters some issue from which it cannot recover. </p>
  syntax:
    content: public void reportFault(FaultType faultType)
    parameters:
    - id: faultType
      type: system.fabric._fault_type
      description: <p>The <xref href="system.fabric._load_metric" data-throw-if-not-resolved="false"></xref> that the service has encountered. </p>
- uid: system.fabric._service_partition.reportLoad(Collection<LoadMetric>)
  parent: system.fabric._service_partition
  href: system.fabric._service_partition.yml
  name: reportLoad(Collection<LoadMetric> metrics)
  nameWithType: ServicePartition.reportLoad(Collection<LoadMetric> metrics)
  fullName: void system.fabric.ServicePartition.reportLoad(Collection<LoadMetric> metrics)
  type: Method
  summary: >-
    <p>Reports the load for a set of load balancing metrics. The load can be reported at any time via the <ref refid="" kindref="compound">java.util.Collection</ref> of <xref href="system.fabric._load_metric" data-throw-if-not-resolved="false"></xref> method and provides one or more properties of the <xref href="system.fabric._load_metric" data-throw-if-not-resolved="false"></xref> method.</p>

    <p>

      <bold>Remarks:</bold>The reported metrics should correspond to those that are provided in the <xref href="system.fabric._service_load_metric_description" data-throw-if-not-resolved="false"></xref> as a part of the <xref href="system.fabric._service_description" data-throw-if-not-resolved="false"></xref> that is used to create the service. Load metrics that are not present in the description are ignored. Reporting custom metrics allows Service Fabric to balance services that are based on additional custom information. </p>
  syntax:
    content: public void reportLoad(Collection<LoadMetric> metrics)
    parameters:
    - id: metrics
      type: 12ebb11asystem.fabric._load_metrica08ddfce
      description: <p>collection of <xref href="system.fabric._load_metric" data-throw-if-not-resolved="false"></xref> to report the load for. </p>
- uid: system.fabric._service_partition.reportMoveCost(MoveCost)
  parent: system.fabric._service_partition
  href: system.fabric._service_partition.yml
  name: reportMoveCost(MoveCost moveCost)
  nameWithType: ServicePartition.reportMoveCost(MoveCost moveCost)
  fullName: void system.fabric.ServicePartition.reportMoveCost(MoveCost moveCost)
  type: Method
  summary: >-
    <p>Reports the move cost for a replica.</p>

    <p>

      <bold>Remarks:</bold>Services can report move cost of a replica using this method. While the Service Fabric Resource Balances searches for the best balance in the cluster, it examines both load information and move cost of each replica. Resource balances will prefer to move replicas with lower cost in order to achieve balance. </p>
  syntax:
    content: public void reportMoveCost(MoveCost moveCost)
    parameters:
    - id: moveCost
      type: system.fabric._move_cost
      description: <p>The reported <xref href="system.fabric._move_cost" data-throw-if-not-resolved="false"></xref>. </p>
- uid: system.fabric._service_partition.reportPartitionHealth(HealthInformation)
  parent: system.fabric._service_partition
  href: system.fabric._service_partition.yml
  name: reportPartitionHealth(HealthInformation healthInfo)
  nameWithType: ServicePartition.reportPartitionHealth(HealthInformation healthInfo)
  fullName: void system.fabric.ServicePartition.reportPartitionHealth(HealthInformation healthInfo)
  type: Method
  summary: >-
    <p>Reports current partition health.</p>

    <p></p>
  syntax:
    content: public void reportPartitionHealth(HealthInformation healthInfo)
    parameters:
    - id: healthInfo
      type: system.fabric.health._health_information
      description: <p>is <ref refid="" kindref="compound">HealthInformation</ref></p>
- uid: system.fabric._service_partition
  parent: system.fabric
  href: system.fabric._service_partition.yml
  name: ServicePartition
  nameWithType: ServicePartition
  fullName: system.fabric.ServicePartition
  type: Interface
  summary: <p>Provides information to the service about the partition to which it belongs and provides methods for the service to interact with the system during runtime. </p>
  syntax:
    content: public interface ServicePartition
- uid: system.fabric._j_stateful_service_partition
- uid: system.fabric._partition_access_status
  parent: system.fabric
  href: system.fabric._partition_access_status.yml
  name: PartitionAccessStatus
  nameWithType: PartitionAccessStatus
  fullName: system.fabric.PartitionAccessStatus
  type: Enum
  syntax:
    content: public enum PartitionAccessStatus
- uid: system.fabric.exception._fabric_object_closed_exception
  parent: system.fabric.exception
  href: system.fabric.exception._fabric_object_closed_exception.yml
  name: FabricObjectClosedException
  nameWithType: FabricObjectClosedException
  fullName: system.fabric.exception.FabricObjectClosedException
  type: Class
  syntax:
    content: public class FabricObjectClosedException extends FabricException
- uid: system.fabric._fabric_replicator
  parent: system.fabric
  href: system.fabric._fabric_replicator.yml
  name: FabricReplicator
  nameWithType: FabricReplicator
  fullName: system.fabric.FabricReplicator
  type: Class
  summary: >-
    <p>Replicates state for high availability and reliability. </p>

    <p>

      <bold>Remarks:</bold>Provides the default implementation of the <xref href="system.fabric._state_replicator" data-throw-if-not-resolved="false"></xref>, <xref href="system.fabric._replicator" data-throw-if-not-resolved="false"></xref>, and <xref href="system.fabric._primary_replicator" data-throw-if-not-resolved="false"></xref> interfaces, which user services can use, along with their implementation of the <xref href="system.fabric._state_provider" data-throw-if-not-resolved="false"></xref> interface. An instance of the <ref refid="" kindref="compound">system.fabric.FabricReplicator</ref> class is obtained via the <xref href="system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)" data-throw-if-not-resolved="false"></xref> method, which can be cast to <xref href="system.fabric._state_replicator" data-throw-if-not-resolved="false"></xref> for use. </p>
  syntax:
    content: public class FabricReplicator implements Replicator
- uid: system.fabric._state_provider
  parent: system.fabric
  href: system.fabric._state_provider.yml
  name: StateProvider
  nameWithType: StateProvider
  fullName: system.fabric.StateProvider
  type: Interface
  summary: <p>Defines the behavior that a service must implement to interact with the <xref href="system.fabric._fabric_replicator" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public interface StateProvider
- uid: system.fabric._replicator_settings
  parent: system.fabric
  href: system.fabric._replicator_settings.yml
  name: ReplicatorSettings
  nameWithType: ReplicatorSettings
  fullName: system.fabric.ReplicatorSettings
  type: Class
  syntax:
    content: public class ReplicatorSettings
- uid: system.fabric._stateful_service_replica
  parent: system.fabric
  href: system.fabric._stateful_service_replica.yml
  name: StatefulServiceReplica
  nameWithType: StatefulServiceReplica
  fullName: system.fabric.StatefulServiceReplica
  type: Interface
  summary: >-
    <p>Defines behavior that governs the lifecycle of a replica, such as startup, initialization, role changes, and shutdown. </p>

    <p>

      <bold>Remarks:</bold>Stateful service types must implement this interface. The logic of a stateful service type includes behavior that is invoked on Primary replicas and behavior that is invoked on Secondary replicas. If the service author wants to make use of the provided <xref href="system.fabric._fabric_replicator" data-throw-if-not-resolved="false"></xref>, then the service must also implement <xref href="system.fabric._state_provider" data-throw-if-not-resolved="false"></xref> to use the implementation of <xref href="system.fabric._state_replicator" data-throw-if-not-resolved="false"></xref> that is provided by <xref href="system.fabric._fabric_replicator" data-throw-if-not-resolved="false"></xref></p>
  syntax:
    content: public interface StatefulServiceReplica
- uid: system.fabric._state_replicator
  parent: system.fabric
  href: system.fabric._state_replicator.yml
  name: StateReplicator
  nameWithType: StateReplicator
  fullName: system.fabric.StateReplicator
  type: Interface
  syntax:
    content: public interface StateReplicator
- uid: system.fabric.health._health_information
  parent: system.fabric.health
  href: system.fabric.health._health_information.yml
  name: HealthInformation
  nameWithType: HealthInformation
  fullName: system.fabric.health.HealthInformation
  type: Class
  summary: <p>Contains the health information about the entity. This information is included in the health report. It is also provided as part of the health event. </p>
  syntax:
    content: public class HealthInformation
