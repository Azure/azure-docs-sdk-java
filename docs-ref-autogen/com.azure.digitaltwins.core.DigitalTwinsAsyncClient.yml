### YamlMime:JavaType
uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient"
fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient"
name: "DigitalTwinsAsyncClient"
nameWithType: "DigitalTwinsAsyncClient"
summary: "This class provides a client for interacting asynchronously with an Azure Digital Twins instance."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class DigitalTwinsAsyncClient"
methods:
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwin(java.lang.String,T,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwin(String digitalTwinId, T digitalTwin, Class<T> clazz)"
  name: "<T>createOrReplaceDigitalTwin(String digitalTwinId, T digitalTwin, Class<T> clazz)"
  nameWithType: "DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwin(String digitalTwinId, T digitalTwin, Class<T> clazz)"
  summary: "Creates a digital twin."
  parameters:
  - description: "The Id of the digital twin. The Id is unique within the service and case sensitive."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application/json object representing the digital twin to create."
    name: "digitalTwin"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to serialize the request with and deserialize the response with."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<T> <T>createOrReplaceDigitalTwin(String digitalTwinId, T digitalTwin, Class<T> clazz)"
  desc: "Creates a digital twin. If the provided digital twin Id is already in use, then this will attempt to replace the existing digital twin with the provided digital twin.\n\n**Code Samples**\n\nYou can provide a strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref> as the input parameter:\n\n```java\nString modelId = \"dtmi:com:samples:Building;1\";\n\n BasicDigitalTwin basicTwin = new BasicDigitalTwin(\"myDigitalTwinId\")\n     .setMetadata(\n         new BasicDigitalTwinMetadata()\n             .setModelId(modelId)\n     );\n\n digitalTwinsAsyncClient.createOrReplaceDigitalTwin(basicTwin.getId(), basicTwin, BasicDigitalTwin.class)\n     .subscribe(response -> System.out.println(\"Created digital twin Id: \" + response.getId()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\ndigitalTwinsAsyncClient.createOrReplaceDigitalTwin(\"myDigitalTwinId\", digitalTwinStringPayload, String.class)\n     .subscribe(stringResponse -> System.out.println(\"Created digital twin: \" + stringResponse));\n```"
  returns:
    description: "The deserialized application/json object representing the digital twin created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwinWithResponse(java.lang.String,T,java.lang.Class<T>,com.azure.digitaltwins.core.models.CreateOrReplaceDigitalTwinOptions)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwinWithResponse(String digitalTwinId, T digitalTwin, Class<T> clazz, CreateOrReplaceDigitalTwinOptions options)"
  name: "<T>createOrReplaceDigitalTwinWithResponse(String digitalTwinId, T digitalTwin, Class<T> clazz, CreateOrReplaceDigitalTwinOptions options)"
  nameWithType: "DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwinWithResponse(String digitalTwinId, T digitalTwin, Class<T> clazz, CreateOrReplaceDigitalTwinOptions options)"
  summary: "Creates a digital twin."
  parameters:
  - description: "The Id of the digital twin. The Id is unique within the service and case sensitive."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application/json object representing the digital twin to create."
    name: "digitalTwin"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to serialize the request with and deserialize the response with."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.CreateOrReplaceDigitalTwinOptions?alt=com.azure.digitaltwins.core.models.CreateOrReplaceDigitalTwinOptions&text=CreateOrReplaceDigitalTwinOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DigitalTwinsResponse<T>> <T>createOrReplaceDigitalTwinWithResponse(String digitalTwinId, T digitalTwin, Class<T> clazz, CreateOrReplaceDigitalTwinOptions options)"
  desc: "Creates a digital twin. If the provided digital twin Id is already in use, then this will attempt to replace the existing digital twin with the provided digital twin.\n\n**Code Samples**\n\nYou can provide a strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref> as the input parameter:\n\n```java\nString modelId = \"dtmi:com:samples:Building;1\";\n\n BasicDigitalTwin basicDigitalTwin = new BasicDigitalTwin(\"myDigitalTwinId\")\n     .setMetadata(\n         new BasicDigitalTwinMetadata()\n             .setModelId(modelId)\n     );\n\n digitalTwinsAsyncClient.createOrReplaceDigitalTwinWithResponse(\n     basicDigitalTwin.getId(),\n     basicDigitalTwin,\n     BasicDigitalTwin.class,\n     new CreateOrReplaceDigitalTwinOptions())\n     .subscribe(resultWithResponse ->\n         System.out.println(\n             \"Response http status: \"\n             + resultWithResponse.getStatusCode()\n             + \" created digital twin Id: \"\n             + resultWithResponse.getValue().getId()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\ndigitalTwinsAsyncClient.createOrReplaceDigitalTwinWithResponse(\n     basicDigitalTwin.getId(),\n     stringPayload,\n     String.class,\n     new CreateOrReplaceDigitalTwinOptions())\n     .subscribe(stringWithResponse ->\n         System.out.println(\n             \"Response http status: \"\n             + stringWithResponse.getStatusCode()\n             + \" created digital twin: \"\n             + stringWithResponse.getValue()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsResponse\"></xref> containing the deserialized application/json object representing the digital twin created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse?alt=com.azure.digitaltwins.core.models.DigitalTwinsResponse&text=DigitalTwinsResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceRelationship(java.lang.String,java.lang.String,T,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceRelationship(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz)"
  name: "<T>createOrReplaceRelationship(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz)"
  nameWithType: "DigitalTwinsAsyncClient.<T>createOrReplaceRelationship(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz)"
  summary: "Creates a relationship on a digital twin."
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the relationship to be created."
    name: "relationshipId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The relationship to be created."
    name: "relationship"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class of the relationship."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<T> <T>createOrReplaceRelationship(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz)"
  desc: "Creates a relationship on a digital twin. If the provided relationship Id is already in use, then this will attempt to replace the existing relationship with the provided relationship.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\nBasicRelationship buildingToFloorBasicRelationship = new BasicRelationship(\n         \"myRelationshipId\",\n         \"mySourceDigitalTwinId\",\n         \"myTargetDigitalTwinId\",\n         \"contains\")\n     .addProperty(\"Prop1\", \"Prop1 value\")\n     .addProperty(\"Prop2\", 6);\n\n digitalTwinsAsyncClient.createOrReplaceRelationship(\n     \"mySourceDigitalTwinId\",\n     \"myRelationshipId\",\n     buildingToFloorBasicRelationship,\n     BasicRelationship.class)\n     .subscribe(createdRelationship -> System.out.println(\n         \"Created relationship with Id: \"\n         + createdRelationship.getId()\n         + \" from: \" + createdRelationship.getSourceId()\n         + \" to: \" + createdRelationship.getTargetId()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\nString relationshipPayload = getRelationshipPayload();\n\n digitalTwinsAsyncClient.createOrReplaceRelationship(\n     \"mySourceDigitalTwinId\",\n     \"myRelationshipId\",\n     relationshipPayload,\n     String.class)\n     .subscribe(createRelationshipString ->\n         System.out.println(\"Created relationship: \" + createRelationshipString));\n```"
  returns:
    description: "The relationship created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceRelationshipWithResponse(java.lang.String,java.lang.String,T,java.lang.Class<T>,com.azure.digitaltwins.core.models.CreateOrReplaceRelationshipOptions)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceRelationshipWithResponse(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz, CreateOrReplaceRelationshipOptions options)"
  name: "<T>createOrReplaceRelationshipWithResponse(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz, CreateOrReplaceRelationshipOptions options)"
  nameWithType: "DigitalTwinsAsyncClient.<T>createOrReplaceRelationshipWithResponse(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz, CreateOrReplaceRelationshipOptions options)"
  summary: "Creates a relationship on a digital twin."
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the relationship to be created."
    name: "relationshipId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The relationship to be created."
    name: "relationship"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class of the relationship."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.CreateOrReplaceRelationshipOptions?alt=com.azure.digitaltwins.core.models.CreateOrReplaceRelationshipOptions&text=CreateOrReplaceRelationshipOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DigitalTwinsResponse<T>> <T>createOrReplaceRelationshipWithResponse(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz, CreateOrReplaceRelationshipOptions options)"
  desc: "Creates a relationship on a digital twin. If the provided relationship Id is already in use, then this will attempt to replace the existing relationship with the provided relationship.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\nBasicRelationship buildingToFloorBasicRelationship = new BasicRelationship(\n         \"myRelationshipId\",\n         \"mySourceDigitalTwinId\",\n         \"myTargetDigitalTwinId\",\n         \"contains\")\n     .addProperty(\"Prop1\", \"Prop1 value\")\n     .addProperty(\"Prop2\", 6);\n\n digitalTwinsAsyncClient.createOrReplaceRelationshipWithResponse(\n     \"mySourceDigitalTwinId\",\n     \"myRelationshipId\",\n     buildingToFloorBasicRelationship,\n     BasicRelationship.class,\n     new CreateOrReplaceRelationshipOptions())\n     .subscribe(createdRelationshipWithResponse -> System.out.println(\n         \"Created relationship with Id: \"\n         + createdRelationshipWithResponse.getValue().getId()\n         + \" from: \" + createdRelationshipWithResponse.getValue().getSourceId()\n         + \" to: \" + createdRelationshipWithResponse.getValue().getTargetId()\n         + \" Http status code: \"\n         + createdRelationshipWithResponse.getStatusCode()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\nString relationshipPayload = getRelationshipPayload();\n\n digitalTwinsAsyncClient.createOrReplaceRelationshipWithResponse(\n     \"mySourceDigitalTwinId\",\n     \"myRelationshipId\",\n     relationshipPayload,\n     String.class,\n     new CreateOrReplaceRelationshipOptions())\n     .subscribe(createdRelationshipStringWithResponse -> System.out.println(\n         \"Created relationship: \"\n         + createdRelationshipStringWithResponse\n         + \" With HTTP status code: \"\n         + createdRelationshipStringWithResponse.getStatusCode()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsResponse\"></xref> containing the relationship created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse?alt=com.azure.digitaltwins.core.models.DigitalTwinsResponse&text=DigitalTwinsResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getComponent(java.lang.String,java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getComponent(String digitalTwinId, String componentName, Class<T> clazz)"
  name: "<T>getComponent(String digitalTwinId, String componentName, Class<T> clazz)"
  nameWithType: "DigitalTwinsAsyncClient.<T>getComponent(String digitalTwinId, String componentName, Class<T> clazz)"
  summary: "Get a component of a digital twin."
  parameters:
  - description: "The Id of the digital twin to get the component from."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the component on the digital twin to retrieve."
    name: "componentName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The class to deserialize the application/json component into."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<T> <T>getComponent(String digitalTwinId, String componentName, Class<T> clazz)"
  desc: "Get a component of a digital twin.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.getComponent(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     String.class)\n     .subscribe();\n```"
  returns:
    description: "The deserialized application/json object representing the component of the digital twin."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getComponentWithResponse(java.lang.String,java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getComponentWithResponse(String digitalTwinId, String componentName, Class<T> clazz)"
  name: "<T>getComponentWithResponse(String digitalTwinId, String componentName, Class<T> clazz)"
  nameWithType: "DigitalTwinsAsyncClient.<T>getComponentWithResponse(String digitalTwinId, String componentName, Class<T> clazz)"
  summary: "Get a component of a digital twin."
  parameters:
  - description: "The Id of the digital twin to get the component from."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the component on the digital twin to retrieve."
    name: "componentName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The class to deserialize the application/json component into."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<DigitalTwinsResponse<T>> <T>getComponentWithResponse(String digitalTwinId, String componentName, Class<T> clazz)"
  desc: "Get a component of a digital twin.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.getComponentWithResponse(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     String.class)\n     .subscribe(response ->\n         System.out.println(\n             \"Received component get operation response with HTTP status code: \"\n             + response.getStatusCode()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsResponse\"></xref> containing the deserialized application/json object representing the component of the digital twin."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse?alt=com.azure.digitaltwins.core.models.DigitalTwinsResponse&text=DigitalTwinsResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getDigitalTwin(java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getDigitalTwin(String digitalTwinId, Class<T> clazz)"
  name: "<T>getDigitalTwin(String digitalTwinId, Class<T> clazz)"
  nameWithType: "DigitalTwinsAsyncClient.<T>getDigitalTwin(String digitalTwinId, Class<T> clazz)"
  summary: "Gets a digital twin."
  parameters:
  - description: "The Id of the digital twin. The Id is unique within the service and case sensitive."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to deserialize the response with."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<T> <T>getDigitalTwin(String digitalTwinId, Class<T> clazz)"
  desc: "Gets a digital twin.\n\n**Code Samples**\n\nA Strongly typed object type such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref> can be provided as an input parameter for `clazz` to indicate what type is used to deserialize the response.\n\n```java\ndigitalTwinsAsyncClient.getDigitalTwin(\"myDigitalTwinId\", BasicDigitalTwin.class)\n     .subscribe(\n         basicDigitalTwin -> System.out.println(\"Retrieved digital twin with Id: \" + basicDigitalTwin.getId()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\ndigitalTwinsAsyncClient.getDigitalTwin(\"myDigitalTwinId\", String.class)\n     .subscribe(stringResult -> System.out.println(\"Retrieved digital twin: \" + stringResult));\n```"
  returns:
    description: "The deserialized application/json object representing the digital twin"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getDigitalTwinWithResponse(java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)"
  name: "<T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)"
  nameWithType: "DigitalTwinsAsyncClient.<T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)"
  summary: "Gets a digital twin."
  parameters:
  - description: "The Id of the digital twin. The Id is unique within the service and case sensitive."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to deserialize the response with."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<DigitalTwinsResponse<T>> <T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)"
  desc: "Gets a digital twin.\n\n**Code Samples**\n\nA Strongly typed object type such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref> can be provided as an input parameter for `clazz` to indicate what type is used to deserialize the response.\n\n```java\ndigitalTwinsAsyncClient.getDigitalTwinWithResponse(\n     \"myDigitalTwinId\",\n     BasicDigitalTwin.class)\n     .subscribe(\n         basicDigitalTwinWithResponse -> System.out.println(\n             \"Retrieved digital twin with Id: \" + basicDigitalTwinWithResponse.getValue().getId()\n             + \" Http Status Code: \" + basicDigitalTwinWithResponse.getStatusCode()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\ndigitalTwinsAsyncClient.getDigitalTwinWithResponse(\n     \"myDigitalTwinId\",\n     String.class)\n     .subscribe(\n         basicDigitalTwinWithResponse -> System.out.println(\n             \"Retrieved digital twin: \" + basicDigitalTwinWithResponse.getValue()\n             + \" Http Status Code: \" + basicDigitalTwinWithResponse.getStatusCode()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsResponse\"></xref> containing the deserialized application/json object representing the digital twin."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse?alt=com.azure.digitaltwins.core.models.DigitalTwinsResponse&text=DigitalTwinsResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getRelationship(java.lang.String,java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getRelationship(String digitalTwinId, String relationshipId, Class<T> clazz)"
  name: "<T>getRelationship(String digitalTwinId, String relationshipId, Class<T> clazz)"
  nameWithType: "DigitalTwinsAsyncClient.<T>getRelationship(String digitalTwinId, String relationshipId, Class<T> clazz)"
  summary: "Gets a relationship on a digital twin."
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the relationship to retrieve."
    name: "relationshipId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to deserialize the relationship into."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<T> <T>getRelationship(String digitalTwinId, String relationshipId, Class<T> clazz)"
  desc: "Gets a relationship on a digital twin.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\ndigitalTwinsAsyncClient.getRelationship(\n     \"myDigitalTwinId\",\n     \"myRelationshipName\",\n     BasicRelationship.class)\n     .subscribe(retrievedRelationship -> System.out.println(\n         \"Retrieved relationship with Id: \"\n         + retrievedRelationship.getId()\n         + \" from: \"\n         + retrievedRelationship.getSourceId()\n         + \" to: \" + retrievedRelationship.getTargetId()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\ndigitalTwinsAsyncClient.getRelationship(\n     \"myDigitalTwinId\",\n     \"myRelationshipName\",\n     String.class)\n     .subscribe(retrievedRelationshipString ->\n         System.out.println(\"Retrieved relationship: \" + retrievedRelationshipString));\n```"
  returns:
    description: "The deserialized relationship."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getRelationshipWithResponse(java.lang.String,java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getRelationshipWithResponse(String digitalTwinId, String relationshipId, Class<T> clazz)"
  name: "<T>getRelationshipWithResponse(String digitalTwinId, String relationshipId, Class<T> clazz)"
  nameWithType: "DigitalTwinsAsyncClient.<T>getRelationshipWithResponse(String digitalTwinId, String relationshipId, Class<T> clazz)"
  summary: "Gets a relationship on a digital twin."
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the relationship to retrieve."
    name: "relationshipId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to deserialize the relationship into."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<DigitalTwinsResponse<T>> <T>getRelationshipWithResponse(String digitalTwinId, String relationshipId, Class<T> clazz)"
  desc: "Gets a relationship on a digital twin.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\ndigitalTwinsAsyncClient.getRelationshipWithResponse(\n     \"myDigitalTwinId\",\n     \"myRelationshipName\",\n     BasicRelationship.class)\n     .subscribe(retrievedRelationshipWithResponse -> System.out.println(\n         \"Retrieved relationship with Id: \"\n             + retrievedRelationshipWithResponse.getValue().getId()\n             + \" from: \"\n             + retrievedRelationshipWithResponse.getValue().getSourceId()\n             + \" to: \" + retrievedRelationshipWithResponse.getValue().getTargetId()\n             + \"HTTP status code: \" + retrievedRelationshipWithResponse.getStatusCode()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\ndigitalTwinsAsyncClient.getRelationshipWithResponse(\n     \"myDigitalTwinId\",\n     \"myRelationshipName\",\n     String.class)\n     .subscribe(retrievedRelationshipStringWithResponse -> System.out.println(\n         \"Retrieved relationship: \"\n         + retrievedRelationshipStringWithResponse\n         + \" HTTP status code: \"\n         + retrievedRelationshipStringWithResponse.getStatusCode()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsResponse\"></xref> containing the deserialized relationship."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse?alt=com.azure.digitaltwins.core.models.DigitalTwinsResponse&text=DigitalTwinsResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>listRelationships(java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>listRelationships(String digitalTwinId, Class<T> clazz)"
  name: "<T>listRelationships(String digitalTwinId, Class<T> clazz)"
  nameWithType: "DigitalTwinsAsyncClient.<T>listRelationships(String digitalTwinId, Class<T> clazz)"
  summary: "Gets all the relationships on a digital twin by iterating through a collection."
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to convert the relationship to. Since a digital twin might have relationships conforming to different models, it is advisable to convert them to a generic model like <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref>."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PagedFlux<T> <T>listRelationships(String digitalTwinId, Class<T> clazz)"
  desc: "Gets all the relationships on a digital twin by iterating through a collection.\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\ndigitalTwinsAsyncClient.listRelationships(\"myDigitalTwinId\", BasicRelationship.class)\n     .doOnNext(basicRel -> System.out.println(\"Retrieved relationship with Id: \" + basicRel.getId()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\ndigitalTwinsAsyncClient.listRelationships(\"myDigitalTwinId\", String.class)\n     .doOnNext(rel -> System.out.println(\"Retrieved relationship: \" + rel));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of relationships belonging to the specified digital twin and the http response."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>listRelationships(java.lang.String,java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>listRelationships(String digitalTwinId, String relationshipName, Class<T> clazz)"
  name: "<T>listRelationships(String digitalTwinId, String relationshipName, Class<T> clazz)"
  nameWithType: "DigitalTwinsAsyncClient.<T>listRelationships(String digitalTwinId, String relationshipName, Class<T> clazz)"
  summary: "Gets all the relationships on a digital twin filtered by the relationship name, by iterating through a collection."
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of a relationship to filter to."
    name: "relationshipName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to convert the relationship to."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PagedFlux<T> <T>listRelationships(String digitalTwinId, String relationshipName, Class<T> clazz)"
  desc: "Gets all the relationships on a digital twin filtered by the relationship name, by iterating through a collection.\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\ndigitalTwinsAsyncClient.listRelationships(\n     \"myDigitalTwinId\",\n     \"myRelationshipName\",\n     BasicRelationship.class)\n     .doOnNext(rel -> System.out.println(\"Retrieved relationship with Id: \" + rel.getId()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\ndigitalTwinsAsyncClient.listRelationships(\n     \"myDigitalTwinId\",\n     \"myRelationshipId\",\n     String.class)\n     .doOnNext(rel -> System.out.println(\"Retrieved relationship: \" + rel));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of relationships belonging to the specified digital twin and the http response."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>query(java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>query(String query, Class<T> clazz)"
  name: "<T>query(String query, Class<T> clazz)"
  nameWithType: "DigitalTwinsAsyncClient.<T>query(String query, Class<T> clazz)"
  summary: "Query digital twins."
  parameters:
  - description: "The query string, in SQL-like syntax."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to deserialize each queried digital twin into. Since the queried twins may not all\n              have the same model class, it is recommended to use a common denominator class such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref>."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PagedFlux<T> <T>query(String query, Class<T> clazz)"
  desc: "Query digital twins.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\ndigitalTwinsAsyncClient.query(\n     \"SELECT * FROM digitaltwins\",\n     BasicDigitalTwin.class)\n     .doOnNext(\n         basicTwin -> System.out.println(\"Retrieved digitalTwin query result with Id: \" + basicTwin.getId()))\n     .subscribe();\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\ndigitalTwinsAsyncClient.query(\n     \"SELECT * FROM digitaltwins\",\n     String.class)\n     .doOnNext(twinString -> System.out.println(\"Retrieved digitalTwin query result with Id: \" + twinString))\n     .subscribe();\n```\n\nNote that there may be a delay between before changes in your instance are reflected in queries. For more details on query limitations, see [Query limitations][]\n\n\n[Query limitations]: https://docs.microsoft.com/azure/digital-twins/how-to-query-graph#query-limitations"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of deserialized digital twins."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>query(java.lang.String,java.lang.Class<T>,com.azure.digitaltwins.core.models.QueryOptions)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>query(String query, Class<T> clazz, QueryOptions options)"
  name: "<T>query(String query, Class<T> clazz, QueryOptions options)"
  nameWithType: "DigitalTwinsAsyncClient.<T>query(String query, Class<T> clazz, QueryOptions options)"
  summary: "Query digital twins."
  parameters:
  - description: "The query string, in SQL-like syntax."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to deserialize each queried digital twin into. Since the queried twins may not all\n              have the same model class, it is recommended to use a common denominator class such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref>."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.QueryOptions?alt=com.azure.digitaltwins.core.models.QueryOptions&text=QueryOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<T> <T>query(String query, Class<T> clazz, QueryOptions options)"
  desc: "Query digital twins.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\ndigitalTwinsAsyncClient.query(\n     \"SELECT * FROM digitaltwins\",\n     BasicDigitalTwin.class,\n     new QueryOptions().setMaxItemsPerPage(5))\n     .doOnNext(\n         basicTwin -> System.out.println(\"Retrieved digitalTwin query result with Id: \" + basicTwin.getId()))\n     .subscribe();\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\ndigitalTwinsAsyncClient.query(\n     \"SELECT * FROM digitaltwins\",\n     String.class,\n     new QueryOptions().setMaxItemsPerPage(5))\n     .doOnNext(twinString -> System.out.println(\"Retrieved digitalTwin query result with Id: \" + twinString))\n     .subscribe();\n```\n\nNote that there may be a delay between before changes in your instance are reflected in queries. For more details on query limitations, see [Query limitations][]\n\n\n[Query limitations]: https://docs.microsoft.com/azure/digital-twins/how-to-query-graph#query-limitations"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of deserialized digital twins."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createModels(java.lang.Iterable<java.lang.String>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createModels(Iterable<String> dtdlModels)"
  name: "createModels(Iterable<String> dtdlModels)"
  nameWithType: "DigitalTwinsAsyncClient.createModels(Iterable<String> dtdlModels)"
  summary: "Creates one or many models."
  parameters:
  - description: "The list of models to create. Each string corresponds to exactly one model."
    name: "dtdlModels"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Iterable<DigitalTwinsModelData>> createModels(Iterable<String> dtdlModels)"
  desc: "Creates one or many models.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.createModels(Arrays.asList(model1, model2, model3))\n     .subscribe(createdModels -> createdModels.forEach(model ->\n         System.out.println(\"Retrieved model with Id: \" + model.getModelId())));\n```"
  returns:
    description: "A List of created models. Each <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsModelData\"></xref> instance in this list\n will contain metadata about the created model, but will not contain the model itself."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData?alt=com.azure.digitaltwins.core.models.DigitalTwinsModelData&text=DigitalTwinsModelData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createModelsWithResponse(java.lang.Iterable<java.lang.String>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createModelsWithResponse(Iterable<String> dtdlModels)"
  name: "createModelsWithResponse(Iterable<String> dtdlModels)"
  nameWithType: "DigitalTwinsAsyncClient.createModelsWithResponse(Iterable<String> dtdlModels)"
  summary: "Creates one or many models."
  parameters:
  - description: "The list of models to create. Each string corresponds to exactly one model."
    name: "dtdlModels"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<Iterable<DigitalTwinsModelData>>> createModelsWithResponse(Iterable<String> dtdlModels)"
  desc: "Creates one or many models.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.createModelsWithResponse(\n     Arrays.asList(model1, model2, model3))\n     .subscribe(createdModels -> {\n         System.out.println(\"Received a response with HTTP status code: \" + createdModels.getStatusCode());\n         createdModels.getValue().forEach(\n             model -> System.out.println(\"Retrieved model with Id: \" + model.getModelId()));\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing the list of created models. Each <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsModelData\"></xref> instance in this list\n will contain metadata about the created model, but will not contain the model itself."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData?alt=com.azure.digitaltwins.core.models.DigitalTwinsModelData&text=DigitalTwinsModelData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceEventRoute(java.lang.String,com.azure.digitaltwins.core.models.DigitalTwinsEventRoute)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceEventRoute(String eventRouteId, DigitalTwinsEventRoute eventRoute)"
  name: "createOrReplaceEventRoute(String eventRouteId, DigitalTwinsEventRoute eventRoute)"
  nameWithType: "DigitalTwinsAsyncClient.createOrReplaceEventRoute(String eventRouteId, DigitalTwinsEventRoute eventRoute)"
  summary: "Create an event route."
  parameters:
  - description: "The Id of the event route to create."
    name: "eventRouteId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The event route to create."
    name: "eventRoute"
    type: "<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute?alt=com.azure.digitaltwins.core.models.DigitalTwinsEventRoute&text=DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> createOrReplaceEventRoute(String eventRouteId, DigitalTwinsEventRoute eventRoute)"
  desc: "Create an event route. If the provided eventRouteId is already in use, then this will attempt to replace the existing event route with the provided event route.\n\n**Code Samples**\n\n```java\nString filter =\n     \"$eventType = 'DigitalTwinTelemetryMessages' or $eventType = 'DigitalTwinLifecycleNotification'\";\n\n DigitalTwinsEventRoute eventRoute = new DigitalTwinsEventRoute(\"myEndpointName\").setFilter(filter);\n digitalTwinsAsyncClient.createOrReplaceEventRoute(\"myEventRouteId\", eventRoute).subscribe();\n```"
  returns:
    description: "An empty mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceEventRouteWithResponse(java.lang.String,com.azure.digitaltwins.core.models.DigitalTwinsEventRoute)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceEventRouteWithResponse(String eventRouteId, DigitalTwinsEventRoute eventRoute)"
  name: "createOrReplaceEventRouteWithResponse(String eventRouteId, DigitalTwinsEventRoute eventRoute)"
  nameWithType: "DigitalTwinsAsyncClient.createOrReplaceEventRouteWithResponse(String eventRouteId, DigitalTwinsEventRoute eventRoute)"
  summary: "Create an event route."
  parameters:
  - description: "The Id of the event route to create."
    name: "eventRouteId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The event route to create."
    name: "eventRoute"
    type: "<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute?alt=com.azure.digitaltwins.core.models.DigitalTwinsEventRoute&text=DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> createOrReplaceEventRouteWithResponse(String eventRouteId, DigitalTwinsEventRoute eventRoute)"
  desc: "Create an event route. If the provided eventRouteId is already in use, then this will attempt to replace the existing event route with the provided event route.\n\n**Code Samples**\n\n```java\nString filter =\n     \"$eventType = 'DigitalTwinTelemetryMessages' or $eventType = 'DigitalTwinLifecycleNotification'\";\n\n DigitalTwinsEventRoute eventRoute = new DigitalTwinsEventRoute(\"myEndpointName\").setFilter(filter);\n digitalTwinsAsyncClient.createOrReplaceEventRouteWithResponse(\n     \"myEventRouteId\",\n     eventRoute)\n     .subscribe(response ->\n         System.out.println(\"Created an event rout with HTTP status code: \" + response.getStatusCode()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing an empty mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.decommissionModel(java.lang.String)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.decommissionModel(String modelId)"
  name: "decommissionModel(String modelId)"
  nameWithType: "DigitalTwinsAsyncClient.decommissionModel(String modelId)"
  summary: "Decommissions a model."
  parameters:
  - description: "The Id of the model to decommission."
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> decommissionModel(String modelId)"
  desc: "Decommissions a model.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.decommissionModel(\"dtmi:com:samples:Building;1\")\n     .subscribe();\n```"
  returns:
    description: "an empty Mono"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.decommissionModelWithResponse(java.lang.String)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.decommissionModelWithResponse(String modelId)"
  name: "decommissionModelWithResponse(String modelId)"
  nameWithType: "DigitalTwinsAsyncClient.decommissionModelWithResponse(String modelId)"
  summary: "Decommissions a model."
  parameters:
  - description: "The Id of the model to decommission."
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> decommissionModelWithResponse(String modelId)"
  desc: "Decommissions a model.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.decommissionModelWithResponse(\n     \"dtmi:com:samples:Building;1\")\n     .subscribe(response ->\n         System.out.println(\n             \"Received decommission model HTTP response with status:\"\n             + response.getStatusCode()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> with no parsed payload object."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteDigitalTwin(java.lang.String)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteDigitalTwin(String digitalTwinId)"
  name: "deleteDigitalTwin(String digitalTwinId)"
  nameWithType: "DigitalTwinsAsyncClient.deleteDigitalTwin(String digitalTwinId)"
  summary: "Deletes a digital twin."
  parameters:
  - description: "The Id of the digital twin. The Id is unique within the service and case sensitive."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteDigitalTwin(String digitalTwinId)"
  desc: "Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.deleteDigitalTwin(\"myDigitalTwinId\")\n     .subscribe();\n```"
  returns:
    description: "An empty Mono"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteDigitalTwinWithResponse(java.lang.String,com.azure.digitaltwins.core.models.DeleteDigitalTwinOptions)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteDigitalTwinWithResponse(String digitalTwinId, DeleteDigitalTwinOptions options)"
  name: "deleteDigitalTwinWithResponse(String digitalTwinId, DeleteDigitalTwinOptions options)"
  nameWithType: "DigitalTwinsAsyncClient.deleteDigitalTwinWithResponse(String digitalTwinId, DeleteDigitalTwinOptions options)"
  summary: "Deletes a digital twin."
  parameters:
  - description: "The Id of the digital twin. The Id is unique within the service and case sensitive."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.DeleteDigitalTwinOptions?alt=com.azure.digitaltwins.core.models.DeleteDigitalTwinOptions&text=DeleteDigitalTwinOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteDigitalTwinWithResponse(String digitalTwinId, DeleteDigitalTwinOptions options)"
  desc: "Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.deleteDigitalTwinWithResponse(\n     \"myDigitalTwinId\",\n     new DeleteDigitalTwinOptions())\n     .subscribe(deleteResponse ->\n         System.out.println(\"Deleted digital twin. HTTP response status code: \" + deleteResponse.getStatusCode()));\n```"
  returns:
    description: "The Http response"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteEventRoute(java.lang.String)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteEventRoute(String eventRouteId)"
  name: "deleteEventRoute(String eventRouteId)"
  nameWithType: "DigitalTwinsAsyncClient.deleteEventRoute(String eventRouteId)"
  summary: "Delete an event route."
  parameters:
  - description: "The Id of the event route to delete."
    name: "eventRouteId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteEventRoute(String eventRouteId)"
  desc: "Delete an event route.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.deleteEventRoute(\"myEventRouteId\")\n     .subscribe();\n```"
  returns:
    description: "An empty mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteEventRouteWithResponse(java.lang.String)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteEventRouteWithResponse(String eventRouteId)"
  name: "deleteEventRouteWithResponse(String eventRouteId)"
  nameWithType: "DigitalTwinsAsyncClient.deleteEventRouteWithResponse(String eventRouteId)"
  summary: "Delete an event route."
  parameters:
  - description: "The Id of the event route to delete."
    name: "eventRouteId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteEventRouteWithResponse(String eventRouteId)"
  desc: "Delete an event route.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.deleteEventRouteWithResponse(\n     \"myEventRouteId\")\n     .subscribe(deleteResponse ->\n         System.out.println(\n             \"Received delete event route operation response with HTTP status code: \"\n             + deleteResponse.getStatusCode()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing an empty mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteModel(java.lang.String)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteModel(String modelId)"
  name: "deleteModel(String modelId)"
  nameWithType: "DigitalTwinsAsyncClient.deleteModel(String modelId)"
  summary: "Deletes a model."
  parameters:
  - description: "The Id for the model. The Id is globally unique and case sensitive."
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteModel(String modelId)"
  desc: "Deletes a model.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.deleteModel(\"dtmi:com:samples:Building;1\")\n     .subscribe();\n```"
  returns:
    description: "An empty Mono"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteModelWithResponse(java.lang.String)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteModelWithResponse(String modelId)"
  name: "deleteModelWithResponse(String modelId)"
  nameWithType: "DigitalTwinsAsyncClient.deleteModelWithResponse(String modelId)"
  summary: "Deletes a model."
  parameters:
  - description: "The Id for the model. The Id is globally unique and case sensitive."
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteModelWithResponse(String modelId)"
  desc: "Deletes a model.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.deleteModelWithResponse(\n     \"dtmi:com:samples:Building;1\")\n     .subscribe(response ->\n         System.out.println(\n             \"Received delete model operation response with HTTP status code:\"\n             + response.getStatusCode()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> with no parsed payload object."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteRelationship(java.lang.String,java.lang.String)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteRelationship(String digitalTwinId, String relationshipId)"
  name: "deleteRelationship(String digitalTwinId, String relationshipId)"
  nameWithType: "DigitalTwinsAsyncClient.deleteRelationship(String digitalTwinId, String relationshipId)"
  summary: "Deletes a relationship on a digital twin."
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the relationship to delete."
    name: "relationshipId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteRelationship(String digitalTwinId, String relationshipId)"
  desc: "Deletes a relationship on a digital twin.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.deleteRelationship(\"myDigitalTwinId\", \"myRelationshipId\")\n     .subscribe();\n```"
  returns:
    description: "An empty Mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteRelationshipWithResponse(java.lang.String,java.lang.String,com.azure.digitaltwins.core.models.DeleteRelationshipOptions)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteRelationshipWithResponse(String digitalTwinId, String relationshipId, DeleteRelationshipOptions options)"
  name: "deleteRelationshipWithResponse(String digitalTwinId, String relationshipId, DeleteRelationshipOptions options)"
  nameWithType: "DigitalTwinsAsyncClient.deleteRelationshipWithResponse(String digitalTwinId, String relationshipId, DeleteRelationshipOptions options)"
  summary: "Deletes a relationship on a digital twin."
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the relationship to delete."
    name: "relationshipId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.DeleteRelationshipOptions?alt=com.azure.digitaltwins.core.models.DeleteRelationshipOptions&text=DeleteRelationshipOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteRelationshipWithResponse(String digitalTwinId, String relationshipId, DeleteRelationshipOptions options)"
  desc: "Deletes a relationship on a digital twin.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.deleteRelationshipWithResponse(\n     \"myDigitalTwinId\",\n     \"myRelationshipId\",\n     new DeleteRelationshipOptions())\n     .subscribe(deleteResponse ->\n         System.out.println(\n             \"Deleted relationship with HTTP status code: \"\n             + deleteResponse.getStatusCode()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing no parsed payload object."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getEventRoute(java.lang.String)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getEventRoute(String eventRouteId)"
  name: "getEventRoute(String eventRouteId)"
  nameWithType: "DigitalTwinsAsyncClient.getEventRoute(String eventRouteId)"
  summary: "Get an event route."
  parameters:
  - description: "The Id of the event route to get."
    name: "eventRouteId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DigitalTwinsEventRoute> getEventRoute(String eventRouteId)"
  desc: "Get an event route.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.getEventRoute(\"myEventRouteId\")\n     .subscribe(eventRoute -> System.out.println(\"Retrieved event route with Id: \" + eventRoute.getEventRouteId()));\n```"
  returns:
    description: "The retrieved event route."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute?alt=com.azure.digitaltwins.core.models.DigitalTwinsEventRoute&text=DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getEventRouteWithResponse(java.lang.String)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getEventRouteWithResponse(String eventRouteId)"
  name: "getEventRouteWithResponse(String eventRouteId)"
  nameWithType: "DigitalTwinsAsyncClient.getEventRouteWithResponse(String eventRouteId)"
  summary: "Get an event route."
  parameters:
  - description: "The Id of the event route to get."
    name: "eventRouteId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DigitalTwinsEventRoute>> getEventRouteWithResponse(String eventRouteId)"
  desc: "Get an event route.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.getEventRouteWithResponse(\n     \"myEventRouteId\")\n     .subscribe(eventRouteWithResponse -> {\n         System.out.println(\n             \"Received get event route operation response with HTTP status code: \"\n             + eventRouteWithResponse.getStatusCode());\n         System.out.println(\n             \"Retrieved event route with Id: \"\n             + eventRouteWithResponse.getValue().getEventRouteId());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing the retrieved event route."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute?alt=com.azure.digitaltwins.core.models.DigitalTwinsEventRoute&text=DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getModel(java.lang.String)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getModel(String modelId)"
  name: "getModel(String modelId)"
  nameWithType: "DigitalTwinsAsyncClient.getModel(String modelId)"
  summary: "Gets a model, including the model metadata and the model definition."
  parameters:
  - description: "The Id of the model."
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DigitalTwinsModelData> getModel(String modelId)"
  desc: "Gets a model, including the model metadata and the model definition.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.getModel(\"dtmi:com:samples:Building;1\")\n     .subscribe(model -> System.out.println(\"Retrieved model with Id: \" + model.getModelId()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsModelData\"></xref> instance that contains the model and its metadata."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData?alt=com.azure.digitaltwins.core.models.DigitalTwinsModelData&text=DigitalTwinsModelData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getModelWithResponse(java.lang.String)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getModelWithResponse(String modelId)"
  name: "getModelWithResponse(String modelId)"
  nameWithType: "DigitalTwinsAsyncClient.getModelWithResponse(String modelId)"
  summary: "Gets a model, including the model metadata and the model definition."
  parameters:
  - description: "The Id of the model."
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DigitalTwinsModelData>> getModelWithResponse(String modelId)"
  desc: "Gets a model, including the model metadata and the model definition.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.getModelWithResponse(\n     \"dtmi:com:samples:Building;1\")\n     .subscribe(modelWithResponse -> {\n         System.out.println(\"Received HTTP response with status code: \" + modelWithResponse.getStatusCode());\n         System.out.println(\"Retrieved model with Id: \" + modelWithResponse.getValue().getModelId());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing a <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsModelData\"></xref> instance that contains the model and its metadata."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData?alt=com.azure.digitaltwins.core.models.DigitalTwinsModelData&text=DigitalTwinsModelData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getServiceVersion()"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getServiceVersion()"
  name: "getServiceVersion()"
  nameWithType: "DigitalTwinsAsyncClient.getServiceVersion()"
  summary: "Gets the Azure Digital Twins service API version that this client is configured to use for all service requests."
  syntax: "public DigitalTwinsServiceVersion getServiceVersion()"
  desc: "Gets the Azure Digital Twins service API version that this client is configured to use for all service requests. Unless configured while building this client through <xref uid=\"com.azure.digitaltwins.core.DigitalTwinsClientBuilder.serviceVersion(com.azure.digitaltwins.core.DigitalTwinsServiceVersion)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsClientBuilder#serviceVersion(DigitalTwinsServiceVersion)\"></xref>, this value will be equal to the latest service API version supported by this client."
  returns:
    description: "The Azure Digital Twins service API version."
    type: "<xref href=\"com.azure.digitaltwins.core.DigitalTwinsServiceVersion?alt=com.azure.digitaltwins.core.DigitalTwinsServiceVersion&text=DigitalTwinsServiceVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listEventRoutes()"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listEventRoutes()"
  name: "listEventRoutes()"
  nameWithType: "DigitalTwinsAsyncClient.listEventRoutes()"
  summary: "List all the event routes that exist in your digital twins instance."
  syntax: "public PagedFlux<DigitalTwinsEventRoute> listEventRoutes()"
  desc: "List all the event routes that exist in your digital twins instance.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.listEventRoutes()\n     .doOnNext(eventRoute -> System.out.println(\"Retrieved event route with Id: \" + eventRoute.getEventRouteId()))\n     .subscribe();\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> that contains all the event routes that exist in your digital twins instance.\n This PagedFlux may take multiple service requests to iterate over all event routes."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute?alt=com.azure.digitaltwins.core.models.DigitalTwinsEventRoute&text=DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listEventRoutes(com.azure.digitaltwins.core.models.ListDigitalTwinsEventRoutesOptions)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listEventRoutes(ListDigitalTwinsEventRoutesOptions options)"
  name: "listEventRoutes(ListDigitalTwinsEventRoutesOptions options)"
  nameWithType: "DigitalTwinsAsyncClient.listEventRoutes(ListDigitalTwinsEventRoutesOptions options)"
  summary: "List all the event routes that exist in your digital twins instance."
  parameters:
  - description: "The optional parameters to use when listing event routes. See <xref uid=\"com.azure.digitaltwins.core.models.ListDigitalTwinsEventRoutesOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ListDigitalTwinsEventRoutesOptions\"></xref> for more details\n on what optional parameters can be set."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.ListDigitalTwinsEventRoutesOptions?alt=com.azure.digitaltwins.core.models.ListDigitalTwinsEventRoutesOptions&text=ListDigitalTwinsEventRoutesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<DigitalTwinsEventRoute> listEventRoutes(ListDigitalTwinsEventRoutesOptions options)"
  desc: "List all the event routes that exist in your digital twins instance.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.listEventRoutes(new ListDigitalTwinsEventRoutesOptions().setMaxItemsPerPage(5))\n     .doOnNext(eventRoute -> System.out.println(\"Retrieved event route with Id: \" + eventRoute.getEventRouteId()))\n     .subscribe();\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> that contains all the event routes that exist in your digital twins instance.\n This PagedFlux may take multiple service requests to iterate over all event routes."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute?alt=com.azure.digitaltwins.core.models.DigitalTwinsEventRoute&text=DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listIncomingRelationships(java.lang.String)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listIncomingRelationships(String digitalTwinId)"
  name: "listIncomingRelationships(String digitalTwinId)"
  nameWithType: "DigitalTwinsAsyncClient.listIncomingRelationships(String digitalTwinId)"
  summary: "Gets all the relationships referencing a digital twin as a target by iterating through a collection."
  parameters:
  - description: "The Id of the target digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<IncomingRelationship> listIncomingRelationships(String digitalTwinId)"
  desc: "Gets all the relationships referencing a digital twin as a target by iterating through a collection.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.listIncomingRelationships(\"myDigitalTwinId\")\n     .doOnNext(incomingRel -> System.out.println(\n         \"Retrieved relationship with Id: \"\n             + incomingRel.getRelationshipId()\n             + \" from: \" + incomingRel.getSourceId()\n             + \" to: myDigitalTwinId\"))\n     .subscribe();\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of relationships directed towards the specified digital twin and the http response."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.IncomingRelationship?alt=com.azure.digitaltwins.core.models.IncomingRelationship&text=IncomingRelationship\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listModels()"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listModels()"
  name: "listModels()"
  nameWithType: "DigitalTwinsAsyncClient.listModels()"
  summary: "List all of the models in this digital twins instance."
  syntax: "public PagedFlux<DigitalTwinsModelData> listModels()"
  desc: "List all of the models in this digital twins instance.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.listModels()\n     .doOnNext(model -> System.out.println(\"Retrieved model with Id: \" + model.getModelId()))\n     .subscribe();\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsModelData\"></xref> that enumerates all the models."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData?alt=com.azure.digitaltwins.core.models.DigitalTwinsModelData&text=DigitalTwinsModelData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listModels(com.azure.digitaltwins.core.models.ListModelsOptions)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listModels(ListModelsOptions options)"
  name: "listModels(ListModelsOptions options)"
  nameWithType: "DigitalTwinsAsyncClient.listModels(ListModelsOptions options)"
  summary: "List the models in this digital twins instance based on some options."
  parameters:
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.ListModelsOptions?alt=com.azure.digitaltwins.core.models.ListModelsOptions&text=ListModelsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<DigitalTwinsModelData> listModels(ListModelsOptions options)"
  desc: "List the models in this digital twins instance based on some options.\n\n**Code Samples**\n\n```java\ndigitalTwinsAsyncClient.listModels(\n     new ListModelsOptions()\n         .setMaxItemsPerPage(5)\n         .setIncludeModelDefinition(true))\n     .doOnNext(model -> System.out.println(\"Retrieved model with Id: \" + model.getModelId()))\n     .subscribe();\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing the retrieved <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsModelData\"></xref> instances."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsModelData?alt=com.azure.digitaltwins.core.models.DigitalTwinsModelData&text=DigitalTwinsModelData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishComponentTelemetry(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishComponentTelemetry(String digitalTwinId, String componentName, String messageId, Object payload)"
  name: "publishComponentTelemetry(String digitalTwinId, String componentName, String messageId, Object payload)"
  nameWithType: "DigitalTwinsAsyncClient.publishComponentTelemetry(String digitalTwinId, String componentName, String messageId, Object payload)"
  summary: "Publishes telemetry from a digital twin's component"
  parameters:
  - description: "The Id of the digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the DTDL component."
    name: "componentName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages. Defaults to a random UUID if argument is null."
    name: "messageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application/json telemetry payload to be sent. payload can be a raw json string or a strongly typed object like a Dictionary."
    name: "payload"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> publishComponentTelemetry(String digitalTwinId, String componentName, String messageId, Object payload)"
  desc: "Publishes telemetry from a digital twin's component\n\n**Code Samples**\n\nA strongly typed object such as <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Hashtable\"></xref> can be provided as the input parameter for the telemetry payload.\n\n```java\nDictionary<String, Integer> telemetryPayload = new Hashtable<>();\n telemetryPayload.put(\"Telemetry1\", 5);\n\n digitalTwinsAsyncClient.publishComponentTelemetry(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     UUID.randomUUID().toString(),\n     telemetryPayload)\n     .subscribe();\n```\n\nOr alternatively String can be used as input type to construct the json string telemetry payload:\n\n```java\ndigitalTwinsAsyncClient.publishComponentTelemetry(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     UUID.randomUUID().toString(),\n     \"{\\\"Telemetry1\\\": 5}\")\n     .subscribe();\n```\n\nThe result is then consumed by one or many destination endpoints (subscribers) defined under <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsEventRoute\"></xref> These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed."
  returns:
    description: "An empty mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishComponentTelemetryWithResponse(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,com.azure.digitaltwins.core.models.PublishComponentTelemetryOptions)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String messageId, Object payload, PublishComponentTelemetryOptions options)"
  name: "publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String messageId, Object payload, PublishComponentTelemetryOptions options)"
  nameWithType: "DigitalTwinsAsyncClient.publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String messageId, Object payload, PublishComponentTelemetryOptions options)"
  summary: "Publishes telemetry from a digital twin's component"
  parameters:
  - description: "The Id of the digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the DTDL component."
    name: "componentName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages. Defaults to a random UUID if argument is null."
    name: "messageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application/json telemetry payload to be sent. payload can be a raw json string or a strongly typed object like a Dictionary."
    name: "payload"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.PublishComponentTelemetryOptions?alt=com.azure.digitaltwins.core.models.PublishComponentTelemetryOptions&text=PublishComponentTelemetryOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String messageId, Object payload, PublishComponentTelemetryOptions options)"
  desc: "Publishes telemetry from a digital twin's component\n\n**Code Samples**\n\nA strongly typed object such as <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Hashtable\"></xref> can be provided as the input parameter for the telemetry payload.\n\n```java\nDictionary<String, Integer> telemetryPayload = new Hashtable<>();\n telemetryPayload.put(\"Telemetry1\", 5);\n\n digitalTwinsAsyncClient.publishComponentTelemetryWithResponse(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     UUID.randomUUID().toString(),\n     telemetryPayload,\n     new PublishComponentTelemetryOptions().setTimestamp(OffsetDateTime.now(ZoneId.systemDefault())))\n     .subscribe(responseObject ->\n         System.out.println(\n             \"Received publish component telemetry operation response with HTTP status code: \"\n             + responseObject.getStatusCode()));\n```\n\nOr alternatively String can be used as input type to construct the json string telemetry payload:\n\n```java\ndigitalTwinsAsyncClient.publishComponentTelemetryWithResponse(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     UUID.randomUUID().toString(),\n     \"{\\\"Telemetry1\\\": 5}\",\n     new PublishComponentTelemetryOptions().setTimestamp(OffsetDateTime.now(ZoneId.systemDefault())))\n     .subscribe(responseString ->\n         System.out.println(\n             \"Received publish component telemetry operation response with HTTP status code: \"\n             + responseString.getStatusCode()));\n```\n\nThe result is then consumed by one or many destination endpoints (subscribers) defined under <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsEventRoute\"></xref> These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed."
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing an empty mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishTelemetry(java.lang.String,java.lang.String,java.lang.Object)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishTelemetry(String digitalTwinId, String messageId, Object payload)"
  name: "publishTelemetry(String digitalTwinId, String messageId, Object payload)"
  nameWithType: "DigitalTwinsAsyncClient.publishTelemetry(String digitalTwinId, String messageId, Object payload)"
  summary: "Publishes telemetry from a digital twin"
  parameters:
  - description: "The Id of the digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages. Defaults to a random UUID if argument is null."
    name: "messageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application/json telemetry payload to be sent. payload can be a raw json string or a strongly typed object like a Dictionary."
    name: "payload"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> publishTelemetry(String digitalTwinId, String messageId, Object payload)"
  desc: "Publishes telemetry from a digital twin\n\n**Code Samples**\n\nA strongly typed object such as <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Hashtable\"></xref> can be provided as the input parameter for the telemetry payload.\n\n```java\nDictionary<String, Integer> telemetryPayload = new Hashtable<>();\n telemetryPayload.put(\"Telemetry1\", 5);\n\n digitalTwinsAsyncClient.publishTelemetry(\n     \"myDigitalTwinId\",\n     UUID.randomUUID().toString(),\n     telemetryPayload)\n     .subscribe();\n```\n\nOr alternatively String can be used as input type to construct the json string telemetry payload:\n\n```java\ndigitalTwinsAsyncClient.publishTelemetry(\n     \"myDigitalTwinId\",\n     UUID.randomUUID().toString(),\n     \"{\\\"Telemetry1\\\": 5}\")\n     .subscribe();\n```\n\nThe result is then consumed by one or many destination endpoints (subscribers) defined under <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsEventRoute\"></xref> These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed."
  returns:
    description: "An empty mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishTelemetryWithResponse(java.lang.String,java.lang.String,java.lang.Object,com.azure.digitaltwins.core.models.PublishTelemetryOptions)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishTelemetryWithResponse(String digitalTwinId, String messageId, Object payload, PublishTelemetryOptions options)"
  name: "publishTelemetryWithResponse(String digitalTwinId, String messageId, Object payload, PublishTelemetryOptions options)"
  nameWithType: "DigitalTwinsAsyncClient.publishTelemetryWithResponse(String digitalTwinId, String messageId, Object payload, PublishTelemetryOptions options)"
  summary: "Publishes telemetry from a digital twin"
  parameters:
  - description: "The Id of the digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages. Defaults to a random UUID if argument is null."
    name: "messageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application/json telemetry payload to be sent. payload can be a raw json string or a strongly typed object like a Dictionary."
    name: "payload"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.PublishTelemetryOptions?alt=com.azure.digitaltwins.core.models.PublishTelemetryOptions&text=PublishTelemetryOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String messageId, Object payload, PublishTelemetryOptions options)"
  desc: "Publishes telemetry from a digital twin\n\n**Code Samples**\n\nA strongly typed object such as <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Hashtable\"></xref> can be provided as the input parameter for the telemetry payload.\n\n```java\nDictionary<String, Integer> telemetryPayload = new Hashtable<>();\n telemetryPayload.put(\"Telemetry1\", 5);\n\n digitalTwinsAsyncClient.publishTelemetryWithResponse(\n     \"myDigitalTwinId\",\n     UUID.randomUUID().toString(),\n     telemetryPayload,\n     new PublishTelemetryOptions().setTimestamp(OffsetDateTime.now(ZoneId.systemDefault())))\n     .subscribe(responseObject ->\n         System.out.println(\n             \"Received publish telemetry operation response with HTTP status code: \"\n             + responseObject.getStatusCode()));\n```\n\nOr alternatively String can be used as input type to construct the json string telemetry payload:\n\n```java\ndigitalTwinsAsyncClient.publishTelemetryWithResponse(\n     \"myDigitalTwinId\",\n     UUID.randomUUID().toString(),\n     \"{\\\"Telemetry1\\\": 5}\",\n     new PublishTelemetryOptions().setTimestamp(OffsetDateTime.now(ZoneId.systemDefault())))\n     .subscribe(responseString ->\n         System.out.println(\n             \"Received publish telemetry operation response with HTTP status code: \"\n             + responseString.getStatusCode()));\n```\n\nThe result is then consumed by one or many destination endpoints (subscribers) defined under <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsEventRoute\"></xref> These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed."
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing an empty mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateComponent(java.lang.String,java.lang.String,com.azure.core.models.JsonPatchDocument)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateComponent(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch)"
  name: "updateComponent(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch)"
  nameWithType: "DigitalTwinsAsyncClient.updateComponent(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch)"
  summary: "Patch a component on a digital twin."
  parameters:
  - description: "The Id of the digital twin that has the component to patch."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the component on the digital twin."
    name: "componentName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The JSON patch to apply to the specified digital twin's relationship.\n                                  This argument can be created using <xref uid=\"com.azure.core.models.JsonPatchDocument\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonPatchDocument\"></xref>."
    name: "jsonPatch"
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> updateComponent(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch)"
  desc: "Patch a component on a digital twin.\n\n**Code Samples**\n\n```java\nJsonPatchDocument jsonPatchDocument = new JsonPatchDocument();\n jsonPatchDocument.appendReplace(\"/ComponentProp1\", \"Some new value\");\n\n digitalTwinsAsyncClient.updateComponent(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     jsonPatchDocument)\n     .subscribe();\n```"
  returns:
    description: "An empty Mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateComponentWithResponse(java.lang.String,java.lang.String,com.azure.core.models.JsonPatchDocument,com.azure.digitaltwins.core.models.UpdateComponentOptions)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateComponentWithResponse(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch, UpdateComponentOptions options)"
  name: "updateComponentWithResponse(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch, UpdateComponentOptions options)"
  nameWithType: "DigitalTwinsAsyncClient.updateComponentWithResponse(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch, UpdateComponentOptions options)"
  summary: "Patch a component on a digital twin."
  parameters:
  - description: "The Id of the digital twin that has the component to patch."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the component on the digital twin."
    name: "componentName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The JSON patch to apply to the specified digital twin's relationship.\n                                  This argument can be created using <xref uid=\"com.azure.core.models.JsonPatchDocument\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonPatchDocument\"></xref>."
    name: "jsonPatch"
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.UpdateComponentOptions?alt=com.azure.digitaltwins.core.models.UpdateComponentOptions&text=UpdateComponentOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DigitalTwinsResponse<Void>> updateComponentWithResponse(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch, UpdateComponentOptions options)"
  desc: "Patch a component on a digital twin.\n\n**Code Samples**\n\n```java\nJsonPatchDocument jsonPatchDocument = new JsonPatchDocument();\n jsonPatchDocument.appendReplace(\"/ComponentProp1\", \"Some new value\");\n\n digitalTwinsAsyncClient.updateComponentWithResponse(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     jsonPatchDocument,\n     new UpdateComponentOptions().setIfMatch(\"*\"))\n     .subscribe(updateResponse ->\n         System.out.println(\n             \"Received update operation response with HTTP status code: \"\n             + updateResponse.getStatusCode()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsResponse\"></xref> containing an empty Mono. This response object includes an HTTP header\n that gives you the updated ETag for this resource."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse?alt=com.azure.digitaltwins.core.models.DigitalTwinsResponse&text=DigitalTwinsResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateDigitalTwin(java.lang.String,com.azure.core.models.JsonPatchDocument)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateDigitalTwin(String digitalTwinId, JsonPatchDocument jsonPatch)"
  name: "updateDigitalTwin(String digitalTwinId, JsonPatchDocument jsonPatch)"
  nameWithType: "DigitalTwinsAsyncClient.updateDigitalTwin(String digitalTwinId, JsonPatchDocument jsonPatch)"
  summary: "Updates a digital twin."
  parameters:
  - description: "The Id of the digital twin. The Id is unique within the service and case sensitive."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The JSON patch to apply to the specified digital twin.\n                                    This argument can be created using <xref uid=\"com.azure.core.models.JsonPatchDocument\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonPatchDocument\"></xref>."
    name: "jsonPatch"
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> updateDigitalTwin(String digitalTwinId, JsonPatchDocument jsonPatch)"
  desc: "Updates a digital twin.\n\n**Code Samples**\n\nUpdate digital twin by providing list of intended patch operations.\n\n```java\nJsonPatchDocument jsonPatchDocument = new JsonPatchDocument();\n jsonPatchDocument.appendReplace(\"Prop1\", \"newValue\");\n\n digitalTwinsAsyncClient.updateDigitalTwin(\n     \"myDigitalTwinId\",\n     jsonPatchDocument)\n     .subscribe();\n```"
  returns:
    description: "An empty Mono"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateDigitalTwinWithResponse(java.lang.String,com.azure.core.models.JsonPatchDocument,com.azure.digitaltwins.core.models.UpdateDigitalTwinOptions)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateDigitalTwinWithResponse(String digitalTwinId, JsonPatchDocument jsonPatch, UpdateDigitalTwinOptions options)"
  name: "updateDigitalTwinWithResponse(String digitalTwinId, JsonPatchDocument jsonPatch, UpdateDigitalTwinOptions options)"
  nameWithType: "DigitalTwinsAsyncClient.updateDigitalTwinWithResponse(String digitalTwinId, JsonPatchDocument jsonPatch, UpdateDigitalTwinOptions options)"
  summary: "Updates a digital twin."
  parameters:
  - description: "The Id of the digital twin. The Id is unique within the service and case sensitive."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The JSON patch to apply to the specified digital twin.\n                                    This argument can be created using <xref uid=\"com.azure.core.models.JsonPatchDocument\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonPatchDocument\"></xref>."
    name: "jsonPatch"
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.UpdateDigitalTwinOptions?alt=com.azure.digitaltwins.core.models.UpdateDigitalTwinOptions&text=UpdateDigitalTwinOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, JsonPatchDocument jsonPatch, UpdateDigitalTwinOptions options)"
  desc: "Updates a digital twin.\n\n**Code Samples**\n\nUpdate digital twin by providing list of intended patch operations.\n\n```java\nJsonPatchDocument jsonPatchDocument = new JsonPatchDocument();\n jsonPatchDocument.appendReplace(\"Prop1\", \"newValue\");\n\n digitalTwinsAsyncClient.updateDigitalTwinWithResponse(\n     \"myDigitalTwinId\",\n     jsonPatchDocument,\n     new UpdateDigitalTwinOptions())\n     .subscribe(updateResponse ->\n         System.out.println(\"Update completed with HTTP status code: \" + updateResponse.getStatusCode()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsResponse\"></xref>. This response object includes an HTTP header that gives you the updated\n ETag for this resource."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse?alt=com.azure.digitaltwins.core.models.DigitalTwinsResponse&text=DigitalTwinsResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateRelationship(java.lang.String,java.lang.String,com.azure.core.models.JsonPatchDocument)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateRelationship(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch)"
  name: "updateRelationship(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch)"
  nameWithType: "DigitalTwinsAsyncClient.updateRelationship(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch)"
  summary: "Updates the properties of a relationship on a digital twin."
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the relationship to be updated."
    name: "relationshipId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The JSON patch to apply to the specified digital twin's relationship.\n                                     This argument can be created using <xref uid=\"com.azure.core.models.JsonPatchDocument\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonPatchDocument\"></xref>."
    name: "jsonPatch"
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> updateRelationship(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch)"
  desc: "Updates the properties of a relationship on a digital twin.\n\n**Code Samples**\n\n```java\nJsonPatchDocument jsonPatchDocument = new JsonPatchDocument();\n jsonPatchDocument.appendReplace(\"/relationshipProperty1\", \"new property value\");\n\n digitalTwinsAsyncClient.updateRelationship(\n     \"myDigitalTwinId\",\n     \"myRelationshipId\",\n     jsonPatchDocument)\n     .subscribe();\n```"
  returns:
    description: "An empty Mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateRelationshipWithResponse(java.lang.String,java.lang.String,com.azure.core.models.JsonPatchDocument,com.azure.digitaltwins.core.models.UpdateRelationshipOptions)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateRelationshipWithResponse(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch, UpdateRelationshipOptions options)"
  name: "updateRelationshipWithResponse(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch, UpdateRelationshipOptions options)"
  nameWithType: "DigitalTwinsAsyncClient.updateRelationshipWithResponse(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch, UpdateRelationshipOptions options)"
  summary: "Updates the properties of a relationship on a digital twin."
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the relationship to be updated."
    name: "relationshipId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The JSON patch to apply to the specified digital twin's relationship.\n                                     This argument can be created using <xref uid=\"com.azure.core.models.JsonPatchDocument\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonPatchDocument\"></xref>."
    name: "jsonPatch"
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.UpdateRelationshipOptions?alt=com.azure.digitaltwins.core.models.UpdateRelationshipOptions&text=UpdateRelationshipOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DigitalTwinsResponse<Void>> updateRelationshipWithResponse(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch, UpdateRelationshipOptions options)"
  desc: "Updates the properties of a relationship on a digital twin.\n\n**Code Samples**\n\n```java\nJsonPatchDocument jsonPatchDocument = new JsonPatchDocument();\n jsonPatchDocument.appendReplace(\"/relationshipProperty1\", \"new property value\");\n\n digitalTwinsAsyncClient.updateRelationshipWithResponse(\n     \"myDigitalTwinId\",\n     \"myRelationshipId\",\n     jsonPatchDocument,\n     new UpdateRelationshipOptions())\n     .subscribe(updateResponse ->\n         System.out.println(\n             \"Relationship updated with status code: \"\n             + updateResponse.getStatusCode()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsResponse\"></xref> containing no parsed payload object. This response object includes an\n HTTP header that gives you the updated ETag for this resource."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse?alt=com.azure.digitaltwins.core.models.DigitalTwinsResponse&text=DigitalTwinsResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "This class provides a client for interacting asynchronously with an Azure Digital Twins instance. This client is instantiated through <xref uid=\"com.azure.digitaltwins.core.DigitalTwinsClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsClientBuilder\"></xref>.\n\n**Code Samples**\n\n```java\nDigitalTwinsAsyncClient digitalTwinsAsyncClient = new DigitalTwinsClientBuilder()\n     .credential(\n         new ClientSecretCredentialBuilder()\n             .tenantId(tenantId)\n             .clientId(clientId)\n             .clientSecret(clientSecret)\n             .build())\n     .endpoint(digitalTwinsEndpointUrl)\n     .buildAsyncClient();\n```\n\nThis client allows for management of digital twins, their components, and their relationships. It also allows for managing the digital twin models and event routes tied to your Azure Digital Twins instance."
metadata: {}
package: "com.azure.digitaltwins.core"
artifact: com.azure:azure-digitaltwins-core:1.3.1
