### YamlMime:ManagedReference
items:
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  id: DigitalTwinsAsyncClient
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core
  children:
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwin(java.lang.String,T,java.lang.Class<T>)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwinWithResponse(java.lang.String,T,java.lang.Class<T>,com.azure.digitaltwins.core.models.CreateOrReplaceDigitalTwinOptions)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceRelationship(java.lang.String,java.lang.String,T,java.lang.Class<T>)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceRelationshipWithResponse(java.lang.String,java.lang.String,T,java.lang.Class<T>,com.azure.digitaltwins.core.models.CreateOrReplaceRelationshipOptions)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getComponent(java.lang.String,java.lang.String,java.lang.Class<T>)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getComponentWithResponse(java.lang.String,java.lang.String,java.lang.Class<T>)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getDigitalTwin(java.lang.String,java.lang.Class<T>)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getDigitalTwinWithResponse(java.lang.String,java.lang.Class<T>)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getRelationship(java.lang.String,java.lang.String,java.lang.Class<T>)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getRelationshipWithResponse(java.lang.String,java.lang.String,java.lang.Class<T>)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>listRelationships(java.lang.String,java.lang.Class<T>)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>listRelationships(java.lang.String,java.lang.String,java.lang.Class<T>)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>query(java.lang.String,java.lang.Class<T>)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>query(java.lang.String,java.lang.Class<T>,com.azure.digitaltwins.core.models.QueryOptions)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createModels(java.lang.Iterable<java.lang.String>)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createModelsWithResponse(java.lang.Iterable<java.lang.String>)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceEventRoute(java.lang.String,com.azure.digitaltwins.core.models.DigitalTwinsEventRoute)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceEventRouteWithResponse(java.lang.String,com.azure.digitaltwins.core.models.DigitalTwinsEventRoute)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.decommissionModel(java.lang.String)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.decommissionModelWithResponse(java.lang.String)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteDigitalTwin(java.lang.String)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteDigitalTwinWithResponse(java.lang.String,com.azure.digitaltwins.core.models.DeleteDigitalTwinOptions)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteEventRoute(java.lang.String)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteEventRouteWithResponse(java.lang.String)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteModel(java.lang.String)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteModelWithResponse(java.lang.String)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteRelationship(java.lang.String,java.lang.String)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteRelationshipWithResponse(java.lang.String,java.lang.String,com.azure.digitaltwins.core.models.DeleteRelationshipOptions)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getEventRoute(java.lang.String)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getEventRouteWithResponse(java.lang.String)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getModel(java.lang.String)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getModelWithResponse(java.lang.String)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getServiceVersion()
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listEventRoutes()
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listEventRoutes(com.azure.digitaltwins.core.models.ListDigitalTwinsEventRoutesOptions)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listIncomingRelationships(java.lang.String)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listModels()
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listModels(com.azure.digitaltwins.core.models.ListModelsOptions)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishComponentTelemetry(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishComponentTelemetryWithResponse(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,com.azure.digitaltwins.core.models.PublishComponentTelemetryOptions)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishTelemetry(java.lang.String,java.lang.String,java.lang.Object)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishTelemetryWithResponse(java.lang.String,java.lang.String,java.lang.Object,com.azure.digitaltwins.core.models.PublishTelemetryOptions)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateComponent(java.lang.String,java.lang.String,com.azure.core.models.JsonPatchDocument)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateComponentWithResponse(java.lang.String,java.lang.String,com.azure.core.models.JsonPatchDocument,com.azure.digitaltwins.core.models.UpdateComponentOptions)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateDigitalTwin(java.lang.String,com.azure.core.models.JsonPatchDocument)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateDigitalTwinWithResponse(java.lang.String,com.azure.core.models.JsonPatchDocument,com.azure.digitaltwins.core.models.UpdateDigitalTwinOptions)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateRelationship(java.lang.String,java.lang.String,com.azure.core.models.JsonPatchDocument)
  - com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateRelationshipWithResponse(java.lang.String,java.lang.String,com.azure.core.models.JsonPatchDocument,com.azure.digitaltwins.core.models.UpdateRelationshipOptions)
  langs:
  - java
  name: DigitalTwinsAsyncClient
  nameWithType: DigitalTwinsAsyncClient
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  type: Class
  package: com.azure.digitaltwins.core
  summary: >-
    This class provides a client for interacting asynchronously with an Azure Digital Twins instance. This client is instantiated through <xref uid="com.azure.digitaltwins.core.DigitalTwinsClientBuilder" data-throw-if-not-resolved="false">DigitalTwinsClientBuilder</xref>.


    **Code Samples**


    ```java

    DigitalTwinsAsyncClient digitalTwinsAsyncClient = new DigitalTwinsClientBuilder()
         .credential(
             new ClientSecretCredentialBuilder()
                 .tenantId(tenantId)
                 .clientId(clientId)
                 .clientSecret(clientSecret)
                 .build())
         .endpoint(digitalTwinsEndpointUrl)
         .buildAsyncClient();
    ```


    This client allows for management of digital twins, their components, and their relationships. It also allows for managing the digital twin models and event routes tied to your Azure Digital Twins instance.
  syntax:
    content: public final class DigitalTwinsAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwin(java.lang.String,T,java.lang.Class<T>)
  id: <T>createOrReplaceDigitalTwin(java.lang.String,T,java.lang.Class<T>)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: <T>createOrReplaceDigitalTwin(String digitalTwinId, T digitalTwin, Class<T> clazz)
  nameWithType: DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwin(String digitalTwinId, T digitalTwin, Class<T> clazz)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwin(String digitalTwinId, T digitalTwin, Class<T> clazz)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceDigitalTwin*
  type: Method
  package: com.azure.digitaltwins.core
  summary: "Creates a digital twin. If the provided digital twin Id is already in use, then this will attempt to replace the existing digital twin with the provided digital twin.\n\n**Code Samples**\n\nYou can provide a strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\">BasicDigitalTwin</xref> as the input parameter:\n\n```java\nString modelId = \"dtmi:com:samples:Building;1\";\n \n BasicDigitalTwin basicTwin = new BasicDigitalTwin(\"myDigitalTwinId\")\n     .setMetadata(\n         new BasicDigitalTwinMetadata()\n             .setModelId(modelId)\n     );\n \n digitalTwinsAsyncClient.createOrReplaceDigitalTwin(basicTwin.getId(), basicTwin, BasicDigitalTwin.class)\n     .subscribe(response -> System.out.println(\"Created digital twin Id: \" + response.getId()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\ndigitalTwinsAsyncClient.createOrReplaceDigitalTwin(\"myDigitalTwinId\", digitalTwinStringPayload, String.class)\n     .subscribe(stringResponse -> System.out.println(\"Created digital twin: \" + stringResponse));\n```"
  syntax:
    content: public Mono<T> <T>createOrReplaceDigitalTwin(String digitalTwinId, T digitalTwin, Class<T> clazz)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin. The Id is unique within the service and case sensitive.
    - id: digitalTwin
      type: T
      description: The application/json object representing the digital twin to create.
    - id: clazz
      type: java.lang.Class<T>
      description: The model class to serialize the request with and deserialize the response with.
    return:
      type: reactor.core.publisher.Mono<T>
      description: The deserialized application/json object representing the digital twin created.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwinWithResponse(java.lang.String,T,java.lang.Class<T>,com.azure.digitaltwins.core.models.CreateOrReplaceDigitalTwinOptions)
  id: <T>createOrReplaceDigitalTwinWithResponse(java.lang.String,T,java.lang.Class<T>,com.azure.digitaltwins.core.models.CreateOrReplaceDigitalTwinOptions)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: <T>createOrReplaceDigitalTwinWithResponse(String digitalTwinId, T digitalTwin, Class<T> clazz, CreateOrReplaceDigitalTwinOptions options)
  nameWithType: DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwinWithResponse(String digitalTwinId, T digitalTwin, Class<T> clazz, CreateOrReplaceDigitalTwinOptions options)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwinWithResponse(String digitalTwinId, T digitalTwin, Class<T> clazz, CreateOrReplaceDigitalTwinOptions options)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceDigitalTwinWithResponse*
  type: Method
  package: com.azure.digitaltwins.core
  summary: "Creates a digital twin. If the provided digital twin Id is already in use, then this will attempt to replace the existing digital twin with the provided digital twin.\n\n**Code Samples**\n\nYou can provide a strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\">BasicDigitalTwin</xref> as the input parameter:\n\n```java\nString modelId = \"dtmi:com:samples:Building;1\";\n \n BasicDigitalTwin basicDigitalTwin = new BasicDigitalTwin(\"myDigitalTwinId\")\n     .setMetadata(\n         new BasicDigitalTwinMetadata()\n             .setModelId(modelId)\n     );\n \n digitalTwinsAsyncClient.createOrReplaceDigitalTwinWithResponse(\n     basicDigitalTwin.getId(),\n     basicDigitalTwin,\n     BasicDigitalTwin.class,\n     new CreateOrReplaceDigitalTwinOptions())\n     .subscribe(resultWithResponse ->\n         System.out.println(\n             \"Response http status: \" +\n             resultWithResponse.getStatusCode() +\n             \" created digital twin Id: \" +\n             resultWithResponse.getValue().getId()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\ndigitalTwinsAsyncClient.createOrReplaceDigitalTwinWithResponse(\n     basicDigitalTwin.getId(),\n     stringPayload,\n     String.class,\n     new CreateOrReplaceDigitalTwinOptions())\n     .subscribe(stringWithResponse ->\n         System.out.println(\n             \"Response http status: \" +\n             stringWithResponse.getStatusCode() +\n             \" created digital twin: \" +\n             stringWithResponse.getValue()));\n```"
  syntax:
    content: public Mono<DigitalTwinsResponse<T>> <T>createOrReplaceDigitalTwinWithResponse(String digitalTwinId, T digitalTwin, Class<T> clazz, CreateOrReplaceDigitalTwinOptions options)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin. The Id is unique within the service and case sensitive.
    - id: digitalTwin
      type: T
      description: The application/json object representing the digital twin to create.
    - id: clazz
      type: java.lang.Class<T>
      description: The model class to serialize the request with and deserialize the response with.
    - id: options
      type: com.azure.digitaltwins.core.models.CreateOrReplaceDigitalTwinOptions
      description: The optional parameters for this request. If null, the default option values will be used.
    return:
      type: reactor.core.publisher.Mono<com.azure.digitaltwins.core.models.DigitalTwinsResponse<T>>
      description: A <xref uid="com.azure.digitaltwins.core.models.DigitalTwinsResponse" data-throw-if-not-resolved="false">DigitalTwinsResponse</xref> containing the deserialized application/json object representing the digital twin created.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceRelationship(java.lang.String,java.lang.String,T,java.lang.Class<T>)
  id: <T>createOrReplaceRelationship(java.lang.String,java.lang.String,T,java.lang.Class<T>)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: <T>createOrReplaceRelationship(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz)
  nameWithType: DigitalTwinsAsyncClient.<T>createOrReplaceRelationship(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceRelationship(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceRelationship*
  type: Method
  package: com.azure.digitaltwins.core
  summary: "Creates a relationship on a digital twin. If the provided relationship Id is already in use, then this will attempt to replace the existing relationship with the provided relationship.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\">BasicRelationship</xref> can be provided as the input parameter to deserialize the response into.\n\n```java\nBasicRelationship buildingToFloorBasicRelationship = new BasicRelationship(\n         \"myRelationshipId\",\n         \"mySourceDigitalTwinId\",\n         \"myTargetDigitalTwinId\",\n         \"contains\")\n     .addProperty(\"Prop1\", \"Prop1 value\")\n     .addProperty(\"Prop2\", 6);\n \n digitalTwinsAsyncClient.createOrReplaceRelationship(\n     \"mySourceDigitalTwinId\",\n     \"myRelationshipId\",\n     buildingToFloorBasicRelationship,\n     BasicRelationship.class)\n .subscribe(createdRelationship -> System.out.println(\n     \"Created relationship with Id: \" +\n         createdRelationship.getId() +\n         \" from: \" + createdRelationship.getSourceId() +\n         \" to: \" + createdRelationship.getTargetId()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\nString relationshipPayload = getRelationshipPayload();\n \n digitalTwinsAsyncClient.createOrReplaceRelationship(\n     \"mySourceDigitalTwinId\",\n     \"myRelationshipId\",\n     relationshipPayload,\n     String.class)\n .subscribe(createRelationshipString ->\n     System.out.println(\"Created relationship: \" + createRelationshipString));\n```"
  syntax:
    content: public Mono<T> <T>createOrReplaceRelationship(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the source digital twin.
    - id: relationshipId
      type: java.lang.String
      description: The Id of the relationship to be created.
    - id: relationship
      type: T
      description: The relationship to be created.
    - id: clazz
      type: java.lang.Class<T>
      description: The model class of the relationship.
    return:
      type: reactor.core.publisher.Mono<T>
      description: The relationship created.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceRelationshipWithResponse(java.lang.String,java.lang.String,T,java.lang.Class<T>,com.azure.digitaltwins.core.models.CreateOrReplaceRelationshipOptions)
  id: <T>createOrReplaceRelationshipWithResponse(java.lang.String,java.lang.String,T,java.lang.Class<T>,com.azure.digitaltwins.core.models.CreateOrReplaceRelationshipOptions)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: <T>createOrReplaceRelationshipWithResponse(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz, CreateOrReplaceRelationshipOptions options)
  nameWithType: DigitalTwinsAsyncClient.<T>createOrReplaceRelationshipWithResponse(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz, CreateOrReplaceRelationshipOptions options)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceRelationshipWithResponse(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz, CreateOrReplaceRelationshipOptions options)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceRelationshipWithResponse*
  type: Method
  package: com.azure.digitaltwins.core
  summary: "Creates a relationship on a digital twin. If the provided relationship Id is already in use, then this will attempt to replace the existing relationship with the provided relationship.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\">BasicRelationship</xref> can be provided as the input parameter to deserialize the response into.\n\n```java\nBasicRelationship buildingToFloorBasicRelationship = new BasicRelationship(\n         \"myRelationshipId\",\n         \"mySourceDigitalTwinId\",\n         \"myTargetDigitalTwinId\",\n         \"contains\")\n     .addProperty(\"Prop1\", \"Prop1 value\")\n     .addProperty(\"Prop2\", 6);\n \n digitalTwinsAsyncClient.createOrReplaceRelationshipWithResponse(\n     \"mySourceDigitalTwinId\",\n     \"myRelationshipId\",\n     buildingToFloorBasicRelationship,\n     BasicRelationship.class,\n     new CreateOrReplaceRelationshipOptions())\n .subscribe(createdRelationshipWithResponse -> System.out.println(\n     \"Created relationship with Id: \" +\n         createdRelationshipWithResponse.getValue().getId() +\n         \" from: \" + createdRelationshipWithResponse.getValue().getSourceId() +\n         \" to: \" + createdRelationshipWithResponse.getValue().getTargetId() +\n         \" Http status code: \" +\n         createdRelationshipWithResponse.getStatusCode()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\nString relationshipPayload = getRelationshipPayload();\n \n digitalTwinsAsyncClient.createOrReplaceRelationshipWithResponse(\n     \"mySourceDigitalTwinId\",\n     \"myRelationshipId\",\n     relationshipPayload,\n     String.class,\n     new CreateOrReplaceRelationshipOptions())\n .subscribe(createdRelationshipStringWithResponse -> System.out.println(\n     \"Created relationship: \" +\n         createdRelationshipStringWithResponse +\n         \" With HTTP status code: \" +\n         createdRelationshipStringWithResponse.getStatusCode()));\n```"
  syntax:
    content: public Mono<DigitalTwinsResponse<T>> <T>createOrReplaceRelationshipWithResponse(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz, CreateOrReplaceRelationshipOptions options)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the source digital twin.
    - id: relationshipId
      type: java.lang.String
      description: The Id of the relationship to be created.
    - id: relationship
      type: T
      description: The relationship to be created.
    - id: clazz
      type: java.lang.Class<T>
      description: The model class of the relationship.
    - id: options
      type: com.azure.digitaltwins.core.models.CreateOrReplaceRelationshipOptions
      description: The optional parameters for this request. If null, the default option values will be used.
    return:
      type: reactor.core.publisher.Mono<com.azure.digitaltwins.core.models.DigitalTwinsResponse<T>>
      description: A <xref uid="com.azure.digitaltwins.core.models.DigitalTwinsResponse" data-throw-if-not-resolved="false">DigitalTwinsResponse</xref> containing the relationship created.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getComponent(java.lang.String,java.lang.String,java.lang.Class<T>)
  id: <T>getComponent(java.lang.String,java.lang.String,java.lang.Class<T>)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: <T>getComponent(String digitalTwinId, String componentName, Class<T> clazz)
  nameWithType: DigitalTwinsAsyncClient.<T>getComponent(String digitalTwinId, String componentName, Class<T> clazz)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getComponent(String digitalTwinId, String componentName, Class<T> clazz)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getComponent*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Get a component of a digital twin.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.getComponent(
         "myDigitalTwinId",
         "myComponentName",
         String.class)
     .subscribe();
    ```
  syntax:
    content: public Mono<T> <T>getComponent(String digitalTwinId, String componentName, Class<T> clazz)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin to get the component from.
    - id: componentName
      type: java.lang.String
      description: The name of the component on the digital twin to retrieve.
    - id: clazz
      type: java.lang.Class<T>
      description: The class to deserialize the application/json component into.
    return:
      type: reactor.core.publisher.Mono<T>
      description: The deserialized application/json object representing the component of the digital twin.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getComponentWithResponse(java.lang.String,java.lang.String,java.lang.Class<T>)
  id: <T>getComponentWithResponse(java.lang.String,java.lang.String,java.lang.Class<T>)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: <T>getComponentWithResponse(String digitalTwinId, String componentName, Class<T> clazz)
  nameWithType: DigitalTwinsAsyncClient.<T>getComponentWithResponse(String digitalTwinId, String componentName, Class<T> clazz)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getComponentWithResponse(String digitalTwinId, String componentName, Class<T> clazz)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getComponentWithResponse*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Get a component of a digital twin.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.getComponentWithResponse(
         "myDigitalTwinId",
         "myComponentName",
         String.class)
     .subscribe(response ->
         System.out.println(
             "Received component get operation response with HTTP status code: " +
             response.getStatusCode()));
    ```
  syntax:
    content: public Mono<DigitalTwinsResponse<T>> <T>getComponentWithResponse(String digitalTwinId, String componentName, Class<T> clazz)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin to get the component from.
    - id: componentName
      type: java.lang.String
      description: The name of the component on the digital twin to retrieve.
    - id: clazz
      type: java.lang.Class<T>
      description: The class to deserialize the application/json component into.
    return:
      type: reactor.core.publisher.Mono<com.azure.digitaltwins.core.models.DigitalTwinsResponse<T>>
      description: A <xref uid="com.azure.digitaltwins.core.models.DigitalTwinsResponse" data-throw-if-not-resolved="false">DigitalTwinsResponse</xref> containing the deserialized application/json object representing the component of the digital twin.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getDigitalTwin(java.lang.String,java.lang.Class<T>)
  id: <T>getDigitalTwin(java.lang.String,java.lang.Class<T>)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: <T>getDigitalTwin(String digitalTwinId, Class<T> clazz)
  nameWithType: DigitalTwinsAsyncClient.<T>getDigitalTwin(String digitalTwinId, Class<T> clazz)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getDigitalTwin(String digitalTwinId, Class<T> clazz)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getDigitalTwin*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Gets a digital twin.


    **Code Samples**


    A Strongly typed object type such as <xref uid="com.azure.digitaltwins.core.BasicDigitalTwin" data-throw-if-not-resolved="false">BasicDigitalTwin</xref> can be provided as an input parameter for `clazz` to indicate what type is used to deserialize the response.


    ```java

    digitalTwinsAsyncClient.getDigitalTwin("myDigitalTwinId", BasicDigitalTwin.class)
         .subscribe(
             basicDigitalTwin -> System.out.println("Retrieved digital twin with Id: " + basicDigitalTwin.getId()));
    ```


    Or alternatively String can be used as input and output deserialization type:


    ```java

    digitalTwinsAsyncClient.getDigitalTwin("myDigitalTwinId", String.class)
         .subscribe(stringResult -> System.out.println("Retrieved digital twin: " + stringResult));
    ```
  syntax:
    content: public Mono<T> <T>getDigitalTwin(String digitalTwinId, Class<T> clazz)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin. The Id is unique within the service and case sensitive.
    - id: clazz
      type: java.lang.Class<T>
      description: The model class to deserialize the response with.
    return:
      type: reactor.core.publisher.Mono<T>
      description: The deserialized application/json object representing the digital twin
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getDigitalTwinWithResponse(java.lang.String,java.lang.Class<T>)
  id: <T>getDigitalTwinWithResponse(java.lang.String,java.lang.Class<T>)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: <T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)
  nameWithType: DigitalTwinsAsyncClient.<T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getDigitalTwinWithResponse*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Gets a digital twin.


    **Code Samples**


    A Strongly typed object type such as <xref uid="com.azure.digitaltwins.core.BasicDigitalTwin" data-throw-if-not-resolved="false">BasicDigitalTwin</xref> can be provided as an input parameter for `clazz` to indicate what type is used to deserialize the response.


    ```java

    digitalTwinsAsyncClient.getDigitalTwinWithResponse(
         "myDigitalTwinId",
         BasicDigitalTwin.class)
         .subscribe(
             basicDigitalTwinWithResponse -> System.out.println(
                 "Retrieved digital twin with Id: " + basicDigitalTwinWithResponse.getValue().getId() +
                 " Http Status Code: " + basicDigitalTwinWithResponse.getStatusCode()));
    ```


    Or alternatively String can be used as input and output deserialization type:


    ```java

    digitalTwinsAsyncClient.getDigitalTwinWithResponse(
         "myDigitalTwinId",
         String.class)
         .subscribe(
             basicDigitalTwinWithResponse -> System.out.println(
                 "Retrieved digital twin: " + basicDigitalTwinWithResponse.getValue() +
                 " Http Status Code: " + basicDigitalTwinWithResponse.getStatusCode()));
    ```
  syntax:
    content: public Mono<DigitalTwinsResponse<T>> <T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin. The Id is unique within the service and case sensitive.
    - id: clazz
      type: java.lang.Class<T>
      description: The model class to deserialize the response with.
    return:
      type: reactor.core.publisher.Mono<com.azure.digitaltwins.core.models.DigitalTwinsResponse<T>>
      description: A <xref uid="com.azure.digitaltwins.core.models.DigitalTwinsResponse" data-throw-if-not-resolved="false">DigitalTwinsResponse</xref> containing the deserialized application/json object representing the digital twin.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getRelationship(java.lang.String,java.lang.String,java.lang.Class<T>)
  id: <T>getRelationship(java.lang.String,java.lang.String,java.lang.Class<T>)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: <T>getRelationship(String digitalTwinId, String relationshipId, Class<T> clazz)
  nameWithType: DigitalTwinsAsyncClient.<T>getRelationship(String digitalTwinId, String relationshipId, Class<T> clazz)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getRelationship(String digitalTwinId, String relationshipId, Class<T> clazz)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getRelationship*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Gets a relationship on a digital twin.


    **Code Samples**


    A strongly typed digital twin object such as <xref uid="com.azure.digitaltwins.core.BasicRelationship" data-throw-if-not-resolved="false">BasicRelationship</xref> can be provided as the input parameter to deserialize the response into.


    ```java

    digitalTwinsAsyncClient.getRelationship(
         "myDigitalTwinId",
         "myRelationshipName",
         BasicRelationship.class)
         .subscribe(retrievedRelationship -> System.out.println(
             "Retrieved relationship with Id: "
                 + retrievedRelationship.getId() +
                 " from: " +
                 retrievedRelationship.getSourceId() +
                 " to: " + retrievedRelationship.getTargetId()));
    ```


    Or alternatively String can be used as input and output deserialization type:


    ```java

    digitalTwinsAsyncClient.getRelationship(
         "myDigitalTwinId",
         "myRelationshipName",
         String.class)
         .subscribe(retrievedRelationshipString ->
             System.out.println("Retrieved relationship: " + retrievedRelationshipString));
    ```
  syntax:
    content: public Mono<T> <T>getRelationship(String digitalTwinId, String relationshipId, Class<T> clazz)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the source digital twin.
    - id: relationshipId
      type: java.lang.String
      description: The Id of the relationship to retrieve.
    - id: clazz
      type: java.lang.Class<T>
      description: The model class to deserialize the relationship into.
    return:
      type: reactor.core.publisher.Mono<T>
      description: The deserialized relationship.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getRelationshipWithResponse(java.lang.String,java.lang.String,java.lang.Class<T>)
  id: <T>getRelationshipWithResponse(java.lang.String,java.lang.String,java.lang.Class<T>)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: <T>getRelationshipWithResponse(String digitalTwinId, String relationshipId, Class<T> clazz)
  nameWithType: DigitalTwinsAsyncClient.<T>getRelationshipWithResponse(String digitalTwinId, String relationshipId, Class<T> clazz)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getRelationshipWithResponse(String digitalTwinId, String relationshipId, Class<T> clazz)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getRelationshipWithResponse*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Gets a relationship on a digital twin.


    **Code Samples**


    A strongly typed digital twin object such as <xref uid="com.azure.digitaltwins.core.BasicRelationship" data-throw-if-not-resolved="false">BasicRelationship</xref> can be provided as the input parameter to deserialize the response into.


    ```java

    digitalTwinsAsyncClient.getRelationshipWithResponse(
         "myDigitalTwinId",
         "myRelationshipName",
         BasicRelationship.class)
     .subscribe(retrievedRelationshipWithResponse -> System.out.println(
         "Retrieved relationship with Id: "
             + retrievedRelationshipWithResponse.getValue().getId() +
             " from: " +
             retrievedRelationshipWithResponse.getValue().getSourceId() +
             " to: " + retrievedRelationshipWithResponse.getValue().getTargetId() +
             "HTTP status code: " + retrievedRelationshipWithResponse.getStatusCode()));
    ```


    Or alternatively String can be used as input and output deserialization type:


    ```java

    digitalTwinsAsyncClient.getRelationshipWithResponse(
         "myDigitalTwinId",
         "myRelationshipName",
         String.class)
     .subscribe(retrievedRelationshipStringWithResponse -> System.out.println(
         "Retrieved relationship: " +
         retrievedRelationshipStringWithResponse +
         " HTTP status code: " +
         retrievedRelationshipStringWithResponse.getStatusCode()));
    ```
  syntax:
    content: public Mono<DigitalTwinsResponse<T>> <T>getRelationshipWithResponse(String digitalTwinId, String relationshipId, Class<T> clazz)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the source digital twin.
    - id: relationshipId
      type: java.lang.String
      description: The Id of the relationship to retrieve.
    - id: clazz
      type: java.lang.Class<T>
      description: The model class to deserialize the relationship into.
    return:
      type: reactor.core.publisher.Mono<com.azure.digitaltwins.core.models.DigitalTwinsResponse<T>>
      description: A <xref uid="com.azure.digitaltwins.core.models.DigitalTwinsResponse" data-throw-if-not-resolved="false">DigitalTwinsResponse</xref> containing the deserialized relationship.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>listRelationships(java.lang.String,java.lang.Class<T>)
  id: <T>listRelationships(java.lang.String,java.lang.Class<T>)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: <T>listRelationships(String digitalTwinId, Class<T> clazz)
  nameWithType: DigitalTwinsAsyncClient.<T>listRelationships(String digitalTwinId, Class<T> clazz)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>listRelationships(String digitalTwinId, Class<T> clazz)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listRelationships*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Gets all the relationships on a digital twin by iterating through a collection.


    A strongly typed digital twin object such as <xref uid="com.azure.digitaltwins.core.BasicRelationship" data-throw-if-not-resolved="false">BasicRelationship</xref> can be provided as the input parameter to deserialize the response into.


    ```java

    digitalTwinsAsyncClient.listRelationships("myDigitalTwinId", BasicRelationship.class)
         .doOnNext(basicRel -> System.out.println("Retrieved relationship with Id: " + basicRel.getId()));
    ```


    Or alternatively String can be used as input and output deserialization type:


    ```java

    digitalTwinsAsyncClient.listRelationships("myDigitalTwinId", String.class)
         .doOnNext(rel -> System.out.println("Retrieved relationship: " + rel));
    ```
  syntax:
    content: public PagedFlux<T> <T>listRelationships(String digitalTwinId, Class<T> clazz)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the source digital twin.
    - id: clazz
      type: java.lang.Class<T>
      description: The model class to convert the relationship to. Since a digital twin might have relationships conforming to different models, it is advisable to convert them to a generic model like <xref uid="com.azure.digitaltwins.core.BasicRelationship" data-throw-if-not-resolved="false">BasicRelationship</xref>.
    return:
      type: com.azure.core.http.rest.PagedFlux<T>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> of relationships belonging to the specified digital twin and the http response.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>listRelationships(java.lang.String,java.lang.String,java.lang.Class<T>)
  id: <T>listRelationships(java.lang.String,java.lang.String,java.lang.Class<T>)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: <T>listRelationships(String digitalTwinId, String relationshipName, Class<T> clazz)
  nameWithType: DigitalTwinsAsyncClient.<T>listRelationships(String digitalTwinId, String relationshipName, Class<T> clazz)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>listRelationships(String digitalTwinId, String relationshipName, Class<T> clazz)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listRelationships*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Gets all the relationships on a digital twin filtered by the relationship name, by iterating through a collection.


    A strongly typed digital twin object such as <xref uid="com.azure.digitaltwins.core.BasicRelationship" data-throw-if-not-resolved="false">BasicRelationship</xref> can be provided as the input parameter to deserialize the response into.


    ```java

    digitalTwinsAsyncClient.listRelationships(
         "myDigitalTwinId",
         "myRelationshipName",
         BasicRelationship.class)
         .doOnNext(rel -> System.out.println("Retrieved relationship with Id: " + rel.getId()));
    ```


    Or alternatively String can be used as input and output deserialization type:


    ```java

    digitalTwinsAsyncClient.listRelationships(
         "myDigitalTwinId",
         "myRelationshipId",
         String.class)
         .doOnNext(rel -> System.out.println("Retrieved relationship: " + rel));
    ```
  syntax:
    content: public PagedFlux<T> <T>listRelationships(String digitalTwinId, String relationshipName, Class<T> clazz)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the source digital twin.
    - id: relationshipName
      type: java.lang.String
      description: The name of a relationship to filter to.
    - id: clazz
      type: java.lang.Class<T>
      description: The model class to convert the relationship to.
    return:
      type: com.azure.core.http.rest.PagedFlux<T>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> of relationships belonging to the specified digital twin and the http response.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>query(java.lang.String,java.lang.Class<T>)
  id: <T>query(java.lang.String,java.lang.Class<T>)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: <T>query(String query, Class<T> clazz)
  nameWithType: DigitalTwinsAsyncClient.<T>query(String query, Class<T> clazz)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>query(String query, Class<T> clazz)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.query*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Query digital twins.


    **Code Samples**


    A strongly typed digital twin object such as <xref uid="com.azure.digitaltwins.core.BasicDigitalTwin" data-throw-if-not-resolved="false">BasicDigitalTwin</xref> can be provided as the input parameter to deserialize the response into.


    ```java

    digitalTwinsAsyncClient.query(
         "SELECT * FROM digitaltwins",
         BasicDigitalTwin.class)
         .doOnNext(
             basicTwin -> System.out.println("Retrieved digitalTwin query result with Id: " + basicTwin.getId()))
         .subscribe();
    ```


    Or alternatively String can be used as input and output deserialization type:


    ```java

    digitalTwinsAsyncClient.query(
         "SELECT * FROM digitaltwins",
         String.class)
         .doOnNext(twinString -> System.out.println("Retrieved digitalTwin query result with Id: " + twinString))
         .subscribe();
    ```


    Note that there may be a delay between before changes in your instance are reflected in queries. For more details on query limitations, see [Query limitations][]



    [Query limitations]: https://docs.microsoft.com/en-us/azure/digital-twins/how-to-query-graph#query-limitations
  syntax:
    content: public PagedFlux<T> <T>query(String query, Class<T> clazz)
    parameters:
    - id: query
      type: java.lang.String
      description: The query string, in SQL-like syntax.
    - id: clazz
      type: java.lang.Class<T>
      description: >-
        The model class to deserialize each queried digital twin into. Since the queried twins may not all
                      have the same model class, it is recommended to use a common denominator class such as <xref uid="com.azure.digitaltwins.core.BasicDigitalTwin" data-throw-if-not-resolved="false">BasicDigitalTwin</xref>.
    return:
      type: com.azure.core.http.rest.PagedFlux<T>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> of deserialized digital twins.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>query(java.lang.String,java.lang.Class<T>,com.azure.digitaltwins.core.models.QueryOptions)
  id: <T>query(java.lang.String,java.lang.Class<T>,com.azure.digitaltwins.core.models.QueryOptions)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: <T>query(String query, Class<T> clazz, QueryOptions options)
  nameWithType: DigitalTwinsAsyncClient.<T>query(String query, Class<T> clazz, QueryOptions options)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>query(String query, Class<T> clazz, QueryOptions options)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.query*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Query digital twins.


    **Code Samples**


    A strongly typed digital twin object such as <xref uid="com.azure.digitaltwins.core.BasicDigitalTwin" data-throw-if-not-resolved="false">BasicDigitalTwin</xref> can be provided as the input parameter to deserialize the response into.


    ```java

    digitalTwinsAsyncClient.query(
         "SELECT * FROM digitaltwins",
         BasicDigitalTwin.class,
         new QueryOptions().setMaxItemsPerPage(5))
         .doOnNext(
             basicTwin -> System.out.println("Retrieved digitalTwin query result with Id: " + basicTwin.getId()))
         .subscribe();
    ```


    Or alternatively String can be used as input and output deserialization type:


    ```java

    digitalTwinsAsyncClient.query(
         "SELECT * FROM digitaltwins",
         String.class,
         new QueryOptions().setMaxItemsPerPage(5))
         .doOnNext(twinString -> System.out.println("Retrieved digitalTwin query result with Id: " + twinString))
         .subscribe();
    ```


    Note that there may be a delay between before changes in your instance are reflected in queries. For more details on query limitations, see [Query limitations][]



    [Query limitations]: https://docs.microsoft.com/en-us/azure/digital-twins/how-to-query-graph#query-limitations
  syntax:
    content: public PagedFlux<T> <T>query(String query, Class<T> clazz, QueryOptions options)
    parameters:
    - id: query
      type: java.lang.String
      description: The query string, in SQL-like syntax.
    - id: clazz
      type: java.lang.Class<T>
      description: >-
        The model class to deserialize each queried digital twin into. Since the queried twins may not all
                      have the same model class, it is recommended to use a common denominator class such as <xref uid="com.azure.digitaltwins.core.BasicDigitalTwin" data-throw-if-not-resolved="false">BasicDigitalTwin</xref>.
    - id: options
      type: com.azure.digitaltwins.core.models.QueryOptions
      description: The optional parameters for this request. If null, the default option values will be used.
    return:
      type: com.azure.core.http.rest.PagedFlux<T>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> of deserialized digital twins.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.DigitalTwinsAsyncClient(java.lang.String,com.azure.core.http.HttpPipeline,com.azure.digitaltwins.core.DigitalTwinsServiceVersion,com.azure.core.util.serializer.JsonSerializer)
  id: DigitalTwinsAsyncClient(java.lang.String,com.azure.core.http.HttpPipeline,com.azure.digitaltwins.core.DigitalTwinsServiceVersion,com.azure.core.util.serializer.JsonSerializer)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: DigitalTwinsAsyncClient(String serviceEndpoint, HttpPipeline pipeline, DigitalTwinsServiceVersion serviceVersion, JsonSerializer jsonSerializer)
  nameWithType: DigitalTwinsAsyncClient.DigitalTwinsAsyncClient(String serviceEndpoint, HttpPipeline pipeline, DigitalTwinsServiceVersion serviceVersion, JsonSerializer jsonSerializer)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.DigitalTwinsAsyncClient(String serviceEndpoint, HttpPipeline pipeline, DigitalTwinsServiceVersion serviceVersion, JsonSerializer jsonSerializer)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.DigitalTwinsAsyncClient*
  type: Constructor
  package: com.azure.digitaltwins.core
  syntax:
    content: " DigitalTwinsAsyncClient(String serviceEndpoint, HttpPipeline pipeline, DigitalTwinsServiceVersion serviceVersion, JsonSerializer jsonSerializer)"
    parameters:
    - id: serviceEndpoint
      type: java.lang.String
    - id: pipeline
      type: com.azure.core.http.HttpPipeline
    - id: serviceVersion
      type: com.azure.digitaltwins.core.DigitalTwinsServiceVersion
    - id: jsonSerializer
      type: com.azure.core.util.serializer.JsonSerializer
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createModels(java.lang.Iterable<java.lang.String>)
  id: createModels(java.lang.Iterable<java.lang.String>)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: createModels(Iterable<String> dtdlModels)
  nameWithType: DigitalTwinsAsyncClient.createModels(Iterable<String> dtdlModels)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createModels(Iterable<String> dtdlModels)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createModels*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Creates one or many models.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.createModels(Arrays.asList(model1, model2, model3))
         .subscribe(createdModels -> createdModels.forEach(model ->
             System.out.println("Retrieved model with Id: " + model.getModelId())));
    ```
  syntax:
    content: public Mono<Iterable<DigitalTwinsModelData>> createModels(Iterable<String> dtdlModels)
    parameters:
    - id: dtdlModels
      type: java.lang.Iterable<java.lang.String>
      description: The list of models to create. Each string corresponds to exactly one model.
    return:
      type: reactor.core.publisher.Mono<java.lang.Iterable<com.azure.digitaltwins.core.models.DigitalTwinsModelData>>
      description: >-
        A List of created models. Each <xref uid="com.azure.digitaltwins.core.models.DigitalTwinsModelData" data-throw-if-not-resolved="false">DigitalTwinsModelData</xref> instance in this list
         will contain metadata about the created model, but will not contain the model itself.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createModelsWithResponse(java.lang.Iterable<java.lang.String>)
  id: createModelsWithResponse(java.lang.Iterable<java.lang.String>)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: createModelsWithResponse(Iterable<String> dtdlModels)
  nameWithType: DigitalTwinsAsyncClient.createModelsWithResponse(Iterable<String> dtdlModels)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createModelsWithResponse(Iterable<String> dtdlModels)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createModelsWithResponse*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Creates one or many models.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.createModelsWithResponse(
         Arrays.asList(model1, model2, model3))
         .subscribe(createdModels -> {
             System.out.println("Received a response with HTTP status code: " + createdModels.getStatusCode());
             createdModels.getValue().forEach(
                 model -> System.out.println("Retrieved model with Id: " + model.getModelId()));
         });
    ```
  syntax:
    content: public Mono<Response<Iterable<DigitalTwinsModelData>>> createModelsWithResponse(Iterable<String> dtdlModels)
    parameters:
    - id: dtdlModels
      type: java.lang.Iterable<java.lang.String>
      description: The list of models to create. Each string corresponds to exactly one model.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Iterable<com.azure.digitaltwins.core.models.DigitalTwinsModelData>>>
      description: >-
        A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> containing the list of created models. Each <xref uid="com.azure.digitaltwins.core.models.DigitalTwinsModelData" data-throw-if-not-resolved="false">DigitalTwinsModelData</xref> instance in this list
         will contain metadata about the created model, but will not contain the model itself.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceEventRoute(java.lang.String,com.azure.digitaltwins.core.models.DigitalTwinsEventRoute)
  id: createOrReplaceEventRoute(java.lang.String,com.azure.digitaltwins.core.models.DigitalTwinsEventRoute)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: createOrReplaceEventRoute(String eventRouteId, DigitalTwinsEventRoute eventRoute)
  nameWithType: DigitalTwinsAsyncClient.createOrReplaceEventRoute(String eventRouteId, DigitalTwinsEventRoute eventRoute)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceEventRoute(String eventRouteId, DigitalTwinsEventRoute eventRoute)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceEventRoute*
  type: Method
  package: com.azure.digitaltwins.core
  summary: "Create an event route. If the provided eventRouteId is already in use, then this will attempt to replace the existing event route with the provided event route.\n\n**Code Samples**\n\n```java\nString filter =\n     \"$eventType = 'DigitalTwinTelemetryMessages' or $eventType = 'DigitalTwinLifecycleNotification'\";\n \n DigitalTwinsEventRoute eventRoute = new DigitalTwinsEventRoute(\"myEndpointName\").setFilter(filter);\n digitalTwinsAsyncClient.createOrReplaceEventRoute(\"myEventRouteId\", eventRoute).subscribe();\n```"
  syntax:
    content: public Mono<Void> createOrReplaceEventRoute(String eventRouteId, DigitalTwinsEventRoute eventRoute)
    parameters:
    - id: eventRouteId
      type: java.lang.String
      description: The Id of the event route to create.
    - id: eventRoute
      type: com.azure.digitaltwins.core.models.DigitalTwinsEventRoute
      description: The event route to create.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty mono.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceEventRouteWithResponse(java.lang.String,com.azure.digitaltwins.core.models.DigitalTwinsEventRoute)
  id: createOrReplaceEventRouteWithResponse(java.lang.String,com.azure.digitaltwins.core.models.DigitalTwinsEventRoute)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: createOrReplaceEventRouteWithResponse(String eventRouteId, DigitalTwinsEventRoute eventRoute)
  nameWithType: DigitalTwinsAsyncClient.createOrReplaceEventRouteWithResponse(String eventRouteId, DigitalTwinsEventRoute eventRoute)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceEventRouteWithResponse(String eventRouteId, DigitalTwinsEventRoute eventRoute)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceEventRouteWithResponse*
  type: Method
  package: com.azure.digitaltwins.core
  summary: "Create an event route. If the provided eventRouteId is already in use, then this will attempt to replace the existing event route with the provided event route.\n\n**Code Samples**\n\n```java\nString filter =\n     \"$eventType = 'DigitalTwinTelemetryMessages' or $eventType = 'DigitalTwinLifecycleNotification'\";\n \n DigitalTwinsEventRoute eventRoute = new DigitalTwinsEventRoute(\"myEndpointName\").setFilter(filter);\n digitalTwinsAsyncClient.createOrReplaceEventRouteWithResponse(\n     \"myEventRouteId\",\n     eventRoute)\n     .subscribe(response ->\n         System.out.println(\"Created an event rout with HTTP status code: \" + response.getStatusCode()));\n```"
  syntax:
    content: public Mono<Response<Void>> createOrReplaceEventRouteWithResponse(String eventRouteId, DigitalTwinsEventRoute eventRoute)
    parameters:
    - id: eventRouteId
      type: java.lang.String
      description: The Id of the event route to create.
    - id: eventRoute
      type: com.azure.digitaltwins.core.models.DigitalTwinsEventRoute
      description: The event route to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> containing an empty mono.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.decommissionModel(java.lang.String)
  id: decommissionModel(java.lang.String)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: decommissionModel(String modelId)
  nameWithType: DigitalTwinsAsyncClient.decommissionModel(String modelId)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.decommissionModel(String modelId)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.decommissionModel*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Decommissions a model.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.decommissionModel("dtmi:com:samples:Building;1")
         .subscribe();
    ```
  syntax:
    content: public Mono<Void> decommissionModel(String modelId)
    parameters:
    - id: modelId
      type: java.lang.String
      description: The Id of the model to decommission.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: an empty Mono
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.decommissionModelWithResponse(java.lang.String)
  id: decommissionModelWithResponse(java.lang.String)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: decommissionModelWithResponse(String modelId)
  nameWithType: DigitalTwinsAsyncClient.decommissionModelWithResponse(String modelId)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.decommissionModelWithResponse(String modelId)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.decommissionModelWithResponse*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Decommissions a model.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.decommissionModelWithResponse(
         "dtmi:com:samples:Building;1")
     .subscribe(response ->
         System.out.println(
             "Received decommission model HTTP response with status:" +
             response.getStatusCode()));
    ```
  syntax:
    content: public Mono<Response<Void>> decommissionModelWithResponse(String modelId)
    parameters:
    - id: modelId
      type: java.lang.String
      description: The Id of the model to decommission.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> with no parsed payload object.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteDigitalTwin(java.lang.String)
  id: deleteDigitalTwin(java.lang.String)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: deleteDigitalTwin(String digitalTwinId)
  nameWithType: DigitalTwinsAsyncClient.deleteDigitalTwin(String digitalTwinId)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteDigitalTwin(String digitalTwinId)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteDigitalTwin*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Deletes a digital twin. All relationships referencing the digital twin must already be deleted.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.deleteDigitalTwin("myDigitalTwinId")
         .subscribe();
    ```
  syntax:
    content: public Mono<Void> deleteDigitalTwin(String digitalTwinId)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin. The Id is unique within the service and case sensitive.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty Mono
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteDigitalTwinWithResponse(java.lang.String,com.azure.digitaltwins.core.models.DeleteDigitalTwinOptions)
  id: deleteDigitalTwinWithResponse(java.lang.String,com.azure.digitaltwins.core.models.DeleteDigitalTwinOptions)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: deleteDigitalTwinWithResponse(String digitalTwinId, DeleteDigitalTwinOptions options)
  nameWithType: DigitalTwinsAsyncClient.deleteDigitalTwinWithResponse(String digitalTwinId, DeleteDigitalTwinOptions options)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteDigitalTwinWithResponse(String digitalTwinId, DeleteDigitalTwinOptions options)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteDigitalTwinWithResponse*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Deletes a digital twin. All relationships referencing the digital twin must already be deleted.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.deleteDigitalTwinWithResponse(
         "myDigitalTwinId",
         new DeleteDigitalTwinOptions())
     .subscribe(deleteResponse ->
         System.out.println("Deleted digital twin. HTTP response status code: " + deleteResponse.getStatusCode()));
    ```
  syntax:
    content: public Mono<Response<Void>> deleteDigitalTwinWithResponse(String digitalTwinId, DeleteDigitalTwinOptions options)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin. The Id is unique within the service and case sensitive.
    - id: options
      type: com.azure.digitaltwins.core.models.DeleteDigitalTwinOptions
      description: The optional parameters for this request. If null, the default option values will be used.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: The Http response
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteEventRoute(java.lang.String)
  id: deleteEventRoute(java.lang.String)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: deleteEventRoute(String eventRouteId)
  nameWithType: DigitalTwinsAsyncClient.deleteEventRoute(String eventRouteId)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteEventRoute(String eventRouteId)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteEventRoute*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Delete an event route.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.deleteEventRoute("myEventRouteId")
         .subscribe();
    ```
  syntax:
    content: public Mono<Void> deleteEventRoute(String eventRouteId)
    parameters:
    - id: eventRouteId
      type: java.lang.String
      description: The Id of the event route to delete.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty mono.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteEventRouteWithResponse(java.lang.String)
  id: deleteEventRouteWithResponse(java.lang.String)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: deleteEventRouteWithResponse(String eventRouteId)
  nameWithType: DigitalTwinsAsyncClient.deleteEventRouteWithResponse(String eventRouteId)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteEventRouteWithResponse(String eventRouteId)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteEventRouteWithResponse*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Delete an event route.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.deleteEventRouteWithResponse(
         "myEventRouteId")
         .subscribe(deleteResponse ->
             System.out.println(
                 "Received delete event route operation response with HTTP status code: " +
                 deleteResponse.getStatusCode()));
    ```
  syntax:
    content: public Mono<Response<Void>> deleteEventRouteWithResponse(String eventRouteId)
    parameters:
    - id: eventRouteId
      type: java.lang.String
      description: The Id of the event route to delete.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> containing an empty mono.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteModel(java.lang.String)
  id: deleteModel(java.lang.String)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: deleteModel(String modelId)
  nameWithType: DigitalTwinsAsyncClient.deleteModel(String modelId)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteModel(String modelId)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteModel*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Deletes a model.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.deleteModel("dtmi:com:samples:Building;1")
         .subscribe();
    ```
  syntax:
    content: public Mono<Void> deleteModel(String modelId)
    parameters:
    - id: modelId
      type: java.lang.String
      description: The Id for the model. The Id is globally unique and case sensitive.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty Mono
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteModelWithResponse(java.lang.String)
  id: deleteModelWithResponse(java.lang.String)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: deleteModelWithResponse(String modelId)
  nameWithType: DigitalTwinsAsyncClient.deleteModelWithResponse(String modelId)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteModelWithResponse(String modelId)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteModelWithResponse*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Deletes a model.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.deleteModelWithResponse(
         "dtmi:com:samples:Building;1")
     .subscribe(response ->
         System.out.println(
             "Received delete model operation response with HTTP status code:" +
             response.getStatusCode()));
    ```
  syntax:
    content: public Mono<Response<Void>> deleteModelWithResponse(String modelId)
    parameters:
    - id: modelId
      type: java.lang.String
      description: The Id for the model. The Id is globally unique and case sensitive.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> with no parsed payload object.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteRelationship(java.lang.String,java.lang.String)
  id: deleteRelationship(java.lang.String,java.lang.String)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: deleteRelationship(String digitalTwinId, String relationshipId)
  nameWithType: DigitalTwinsAsyncClient.deleteRelationship(String digitalTwinId, String relationshipId)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteRelationship(String digitalTwinId, String relationshipId)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteRelationship*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Deletes a relationship on a digital twin.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.deleteRelationship("myDigitalTwinId", "myRelationshipId")
         .subscribe();
    ```
  syntax:
    content: public Mono<Void> deleteRelationship(String digitalTwinId, String relationshipId)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the source digital twin.
    - id: relationshipId
      type: java.lang.String
      description: The Id of the relationship to delete.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty Mono.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteRelationshipWithResponse(java.lang.String,java.lang.String,com.azure.digitaltwins.core.models.DeleteRelationshipOptions)
  id: deleteRelationshipWithResponse(java.lang.String,java.lang.String,com.azure.digitaltwins.core.models.DeleteRelationshipOptions)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: deleteRelationshipWithResponse(String digitalTwinId, String relationshipId, DeleteRelationshipOptions options)
  nameWithType: DigitalTwinsAsyncClient.deleteRelationshipWithResponse(String digitalTwinId, String relationshipId, DeleteRelationshipOptions options)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteRelationshipWithResponse(String digitalTwinId, String relationshipId, DeleteRelationshipOptions options)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteRelationshipWithResponse*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Deletes a relationship on a digital twin.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.deleteRelationshipWithResponse(
         "myDigitalTwinId",
         "myRelationshipId",
         new DeleteRelationshipOptions())
     .subscribe(deleteResponse ->
         System.out.println(
             "Deleted relationship with HTTP status code: " +
             deleteResponse.getStatusCode()));
    ```
  syntax:
    content: public Mono<Response<Void>> deleteRelationshipWithResponse(String digitalTwinId, String relationshipId, DeleteRelationshipOptions options)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the source digital twin.
    - id: relationshipId
      type: java.lang.String
      description: The Id of the relationship to delete.
    - id: options
      type: com.azure.digitaltwins.core.models.DeleteRelationshipOptions
      description: The optional parameters for this request. If null, the default option values will be used.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> containing no parsed payload object.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getEventRoute(java.lang.String)
  id: getEventRoute(java.lang.String)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: getEventRoute(String eventRouteId)
  nameWithType: DigitalTwinsAsyncClient.getEventRoute(String eventRouteId)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getEventRoute(String eventRouteId)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getEventRoute*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Get an event route.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.getEventRoute("myEventRouteId")
         .subscribe(eventRoute -> System.out.println("Retrieved event route with Id: " + eventRoute.getEventRouteId()));
    ```
  syntax:
    content: public Mono<DigitalTwinsEventRoute> getEventRoute(String eventRouteId)
    parameters:
    - id: eventRouteId
      type: java.lang.String
      description: The Id of the event route to get.
    return:
      type: reactor.core.publisher.Mono<com.azure.digitaltwins.core.models.DigitalTwinsEventRoute>
      description: The retrieved event route.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getEventRouteWithResponse(java.lang.String)
  id: getEventRouteWithResponse(java.lang.String)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: getEventRouteWithResponse(String eventRouteId)
  nameWithType: DigitalTwinsAsyncClient.getEventRouteWithResponse(String eventRouteId)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getEventRouteWithResponse(String eventRouteId)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getEventRouteWithResponse*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Get an event route.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.getEventRouteWithResponse(
         "myEventRouteId")
     .subscribe(eventRouteWithResponse -> {
         System.out.println(
             "Received get event route operation response with HTTP status code: " +
             eventRouteWithResponse.getStatusCode() );
         System.out.println(
             "Retrieved event route with Id: " +
             eventRouteWithResponse.getValue().getEventRouteId());
     } );
    ```
  syntax:
    content: public Mono<Response<DigitalTwinsEventRoute>> getEventRouteWithResponse(String eventRouteId)
    parameters:
    - id: eventRouteId
      type: java.lang.String
      description: The Id of the event route to get.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.digitaltwins.core.models.DigitalTwinsEventRoute>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> containing the retrieved event route.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getModel(java.lang.String)
  id: getModel(java.lang.String)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: getModel(String modelId)
  nameWithType: DigitalTwinsAsyncClient.getModel(String modelId)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getModel(String modelId)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getModel*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Gets a model, including the model metadata and the model definition.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.getModel("dtmi:com:samples:Building;1")
         .subscribe(model -> System.out.println("Retrieved model with Id: " + model.getModelId()));
    ```
  syntax:
    content: public Mono<DigitalTwinsModelData> getModel(String modelId)
    parameters:
    - id: modelId
      type: java.lang.String
      description: The Id of the model.
    return:
      type: reactor.core.publisher.Mono<com.azure.digitaltwins.core.models.DigitalTwinsModelData>
      description: A <xref uid="com.azure.digitaltwins.core.models.DigitalTwinsModelData" data-throw-if-not-resolved="false">DigitalTwinsModelData</xref> instance that contains the model and its metadata.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getModelWithResponse(java.lang.String)
  id: getModelWithResponse(java.lang.String)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: getModelWithResponse(String modelId)
  nameWithType: DigitalTwinsAsyncClient.getModelWithResponse(String modelId)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getModelWithResponse(String modelId)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getModelWithResponse*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Gets a model, including the model metadata and the model definition.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.getModelWithResponse(
         "dtmi:com:samples:Building;1")
         .subscribe(modelWithResponse -> {
             System.out.println("Received HTTP response with status code: " + modelWithResponse.getStatusCode());
             System.out.println("Retrieved model with Id: " + modelWithResponse.getValue().getModelId());
         });
    ```
  syntax:
    content: public Mono<Response<DigitalTwinsModelData>> getModelWithResponse(String modelId)
    parameters:
    - id: modelId
      type: java.lang.String
      description: The Id of the model.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.digitaltwins.core.models.DigitalTwinsModelData>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> containing a <xref uid="com.azure.digitaltwins.core.models.DigitalTwinsModelData" data-throw-if-not-resolved="false">DigitalTwinsModelData</xref> instance that contains the model and its metadata.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getServiceVersion()
  id: getServiceVersion()
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: getServiceVersion()
  nameWithType: DigitalTwinsAsyncClient.getServiceVersion()
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getServiceVersion()
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getServiceVersion*
  type: Method
  package: com.azure.digitaltwins.core
  summary: Gets the Azure Digital Twins service API version that this client is configured to use for all service requests. Unless configured while building this client through <xref uid="com.azure.digitaltwins.core.DigitalTwinsClientBuilder.serviceVersion(com.azure.digitaltwins.core.DigitalTwinsServiceVersion)" data-throw-if-not-resolved="false">DigitalTwinsClientBuilder#serviceVersion(DigitalTwinsServiceVersion)</xref>, this value will be equal to the latest service API version supported by this client.
  syntax:
    content: public DigitalTwinsServiceVersion getServiceVersion()
    return:
      type: com.azure.digitaltwins.core.DigitalTwinsServiceVersion
      description: The Azure Digital Twins service API version.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listEventRoutes()
  id: listEventRoutes()
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: listEventRoutes()
  nameWithType: DigitalTwinsAsyncClient.listEventRoutes()
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listEventRoutes()
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listEventRoutes*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    List all the event routes that exist in your digital twins instance.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.listEventRoutes()
         .doOnNext(eventRoute -> System.out.println("Retrieved event route with Id: " + eventRoute.getEventRouteId()))
         .subscribe();
    ```
  syntax:
    content: public PagedFlux<DigitalTwinsEventRoute> listEventRoutes()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.digitaltwins.core.models.DigitalTwinsEventRoute>
      description: >-
        A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> that contains all the event routes that exist in your digital twins instance.
         This PagedFlux may take multiple service requests to iterate over all event routes.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listEventRoutes(com.azure.digitaltwins.core.models.ListDigitalTwinsEventRoutesOptions)
  id: listEventRoutes(com.azure.digitaltwins.core.models.ListDigitalTwinsEventRoutesOptions)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: listEventRoutes(ListDigitalTwinsEventRoutesOptions options)
  nameWithType: DigitalTwinsAsyncClient.listEventRoutes(ListDigitalTwinsEventRoutesOptions options)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listEventRoutes(ListDigitalTwinsEventRoutesOptions options)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listEventRoutes*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    List all the event routes that exist in your digital twins instance.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.listEventRoutes(new ListDigitalTwinsEventRoutesOptions().setMaxItemsPerPage(5))
         .doOnNext(eventRoute -> System.out.println("Retrieved event route with Id: " + eventRoute.getEventRouteId()))
         .subscribe();
    ```
  syntax:
    content: public PagedFlux<DigitalTwinsEventRoute> listEventRoutes(ListDigitalTwinsEventRoutesOptions options)
    parameters:
    - id: options
      type: com.azure.digitaltwins.core.models.ListDigitalTwinsEventRoutesOptions
      description: >-
        The optional parameters to use when listing event routes. See <xref uid="com.azure.digitaltwins.core.models.ListDigitalTwinsEventRoutesOptions" data-throw-if-not-resolved="false">ListDigitalTwinsEventRoutesOptions</xref> for more details
         on what optional parameters can be set.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.digitaltwins.core.models.DigitalTwinsEventRoute>
      description: >-
        A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> that contains all the event routes that exist in your digital twins instance.
         This PagedFlux may take multiple service requests to iterate over all event routes.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listIncomingRelationships(java.lang.String)
  id: listIncomingRelationships(java.lang.String)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: listIncomingRelationships(String digitalTwinId)
  nameWithType: DigitalTwinsAsyncClient.listIncomingRelationships(String digitalTwinId)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listIncomingRelationships(String digitalTwinId)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listIncomingRelationships*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    Gets all the relationships referencing a digital twin as a target by iterating through a collection.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.listIncomingRelationships("myDigitalTwinId")
         .doOnNext(incomingRel -> System.out.println(
             "Retrieved relationship with Id: " +
                 incomingRel.getRelationshipId() +
                 " from: " + incomingRel.getSourceId() +
                 " to: myDigitalTwinId"))
         .subscribe();
    ```
  syntax:
    content: public PagedFlux<IncomingRelationship> listIncomingRelationships(String digitalTwinId)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the target digital twin.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.digitaltwins.core.models.IncomingRelationship>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> of relationships directed towards the specified digital twin and the http response.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listModels()
  id: listModels()
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: listModels()
  nameWithType: DigitalTwinsAsyncClient.listModels()
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listModels()
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listModels*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    List all of the models in this digital twins instance.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.listModels()
         .doOnNext(model -> System.out.println("Retrieved model with Id: " + model.getModelId()))
         .subscribe();
    ```
  syntax:
    content: public PagedFlux<DigitalTwinsModelData> listModels()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.digitaltwins.core.models.DigitalTwinsModelData>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> of <xref uid="com.azure.digitaltwins.core.models.DigitalTwinsModelData" data-throw-if-not-resolved="false">DigitalTwinsModelData</xref> that enumerates all the models.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listModels(com.azure.digitaltwins.core.models.ListModelsOptions)
  id: listModels(com.azure.digitaltwins.core.models.ListModelsOptions)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: listModels(ListModelsOptions options)
  nameWithType: DigitalTwinsAsyncClient.listModels(ListModelsOptions options)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listModels(ListModelsOptions options)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listModels*
  type: Method
  package: com.azure.digitaltwins.core
  summary: >-
    List the models in this digital twins instance based on some options.


    **Code Samples**


    ```java

    digitalTwinsAsyncClient.listModels(
         new ListModelsOptions()
             .setMaxItemsPerPage(5)
             .setIncludeModelDefinition(true))
         .doOnNext(model -> System.out.println("Retrieved model with Id: " + model.getModelId()))
         .subscribe();
    ```
  syntax:
    content: public PagedFlux<DigitalTwinsModelData> listModels(ListModelsOptions options)
    parameters:
    - id: options
      type: com.azure.digitaltwins.core.models.ListModelsOptions
      description: The optional parameters for this request. If null, the default option values will be used.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.digitaltwins.core.models.DigitalTwinsModelData>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing the retrieved <xref uid="com.azure.digitaltwins.core.models.DigitalTwinsModelData" data-throw-if-not-resolved="false">DigitalTwinsModelData</xref> instances.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishComponentTelemetry(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
  id: publishComponentTelemetry(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: publishComponentTelemetry(String digitalTwinId, String componentName, String messageId, Object payload)
  nameWithType: DigitalTwinsAsyncClient.publishComponentTelemetry(String digitalTwinId, String componentName, String messageId, Object payload)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishComponentTelemetry(String digitalTwinId, String componentName, String messageId, Object payload)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishComponentTelemetry*
  type: Method
  package: com.azure.digitaltwins.core
  summary: "Publishes telemetry from a digital twin's component\n\n**Code Samples**\n\nA strongly typed object such as <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.Hashtable</xref> can be provided as the input parameter for the telemetry payload.\n\n```java\nDictionary<String, Integer> telemetryPayload = new Hashtable<>();\n telemetryPayload.put(\"Telemetry1\", 5);\n \n digitalTwinsAsyncClient.publishComponentTelemetry(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     UUID.randomUUID().toString(),\n     telemetryPayload)\n .subscribe();\n```\n\nOr alternatively String can be used as input type to construct the json string telemetry payload:\n\n```java\ndigitalTwinsAsyncClient.publishComponentTelemetry(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     UUID.randomUUID().toString(),\n     \"{\\\"Telemetry1\\\": 5}\")\n .subscribe();\n```\n\nThe result is then consumed by one or many destination endpoints (subscribers) defined under <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"false\">DigitalTwinsEventRoute</xref> These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed."
  syntax:
    content: public Mono<Void> publishComponentTelemetry(String digitalTwinId, String componentName, String messageId, Object payload)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin.
    - id: componentName
      type: java.lang.String
      description: The name of the DTDL component.
    - id: messageId
      type: java.lang.String
      description: A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages. Defaults to a random UUID if argument is null.
    - id: payload
      type: java.lang.Object
      description: The application/json telemetry payload to be sent. payload can be a raw json string or a strongly typed object like a Dictionary.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty mono.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishComponentTelemetryWithResponse(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,com.azure.digitaltwins.core.models.PublishComponentTelemetryOptions)
  id: publishComponentTelemetryWithResponse(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,com.azure.digitaltwins.core.models.PublishComponentTelemetryOptions)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String messageId, Object payload, PublishComponentTelemetryOptions options)
  nameWithType: DigitalTwinsAsyncClient.publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String messageId, Object payload, PublishComponentTelemetryOptions options)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String messageId, Object payload, PublishComponentTelemetryOptions options)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishComponentTelemetryWithResponse*
  type: Method
  package: com.azure.digitaltwins.core
  summary: "Publishes telemetry from a digital twin's component\n\n**Code Samples**\n\nA strongly typed object such as <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.Hashtable</xref> can be provided as the input parameter for the telemetry payload.\n\n```java\nDictionary<String, Integer> telemetryPayload = new Hashtable<>();\n telemetryPayload.put(\"Telemetry1\", 5);\n \n digitalTwinsAsyncClient.publishComponentTelemetryWithResponse(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     UUID.randomUUID().toString(),\n     telemetryPayload,\n     new PublishComponentTelemetryOptions().setTimestamp(OffsetDateTime.now(ZoneId.systemDefault())))\n     .subscribe(responseObject ->\n         System.out.println(\n             \"Received publish component telemetry operation response with HTTP status code: \" +\n             responseObject.getStatusCode()));\n```\n\nOr alternatively String can be used as input type to construct the json string telemetry payload:\n\n```java\ndigitalTwinsAsyncClient.publishComponentTelemetryWithResponse(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     UUID.randomUUID().toString(),\n     \"{\\\"Telemetry1\\\": 5}\",\n     new PublishComponentTelemetryOptions().setTimestamp(OffsetDateTime.now(ZoneId.systemDefault())))\n     .subscribe(responseString ->\n         System.out.println(\n             \"Received publish component telemetry operation response with HTTP status code: \" +\n             responseString.getStatusCode()));\n```\n\nThe result is then consumed by one or many destination endpoints (subscribers) defined under <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"false\">DigitalTwinsEventRoute</xref> These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed."
  syntax:
    content: public Mono<Response<Void>> publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String messageId, Object payload, PublishComponentTelemetryOptions options)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin.
    - id: componentName
      type: java.lang.String
      description: The name of the DTDL component.
    - id: messageId
      type: java.lang.String
      description: A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages. Defaults to a random UUID if argument is null.
    - id: payload
      type: java.lang.Object
      description: The application/json telemetry payload to be sent. payload can be a raw json string or a strongly typed object like a Dictionary.
    - id: options
      type: com.azure.digitaltwins.core.models.PublishComponentTelemetryOptions
      description: The optional parameters for this request. If null, the default option values will be used.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> containing an empty mono.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishTelemetry(java.lang.String,java.lang.String,java.lang.Object)
  id: publishTelemetry(java.lang.String,java.lang.String,java.lang.Object)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: publishTelemetry(String digitalTwinId, String messageId, Object payload)
  nameWithType: DigitalTwinsAsyncClient.publishTelemetry(String digitalTwinId, String messageId, Object payload)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishTelemetry(String digitalTwinId, String messageId, Object payload)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishTelemetry*
  type: Method
  package: com.azure.digitaltwins.core
  summary: "Publishes telemetry from a digital twin\n\n**Code Samples**\n\nA strongly typed object such as <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.Hashtable</xref> can be provided as the input parameter for the telemetry payload.\n\n```java\nDictionary<String, Integer> telemetryPayload = new Hashtable<>();\n telemetryPayload.put(\"Telemetry1\", 5);\n \n digitalTwinsAsyncClient.publishTelemetry(\n     \"myDigitalTwinId\",\n     UUID.randomUUID().toString(),\n     telemetryPayload)\n     .subscribe();\n```\n\nOr alternatively String can be used as input type to construct the json string telemetry payload:\n\n```java\ndigitalTwinsAsyncClient.publishTelemetry(\n     \"myDigitalTwinId\",\n     UUID.randomUUID().toString(),\n     \"{\\\"Telemetry1\\\": 5}\")\n     .subscribe();\n```\n\nThe result is then consumed by one or many destination endpoints (subscribers) defined under <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"false\">DigitalTwinsEventRoute</xref> These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed."
  syntax:
    content: public Mono<Void> publishTelemetry(String digitalTwinId, String messageId, Object payload)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin.
    - id: messageId
      type: java.lang.String
      description: A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages. Defaults to a random UUID if argument is null.
    - id: payload
      type: java.lang.Object
      description: The application/json telemetry payload to be sent. payload can be a raw json string or a strongly typed object like a Dictionary.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty mono.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishTelemetryWithResponse(java.lang.String,java.lang.String,java.lang.Object,com.azure.digitaltwins.core.models.PublishTelemetryOptions)
  id: publishTelemetryWithResponse(java.lang.String,java.lang.String,java.lang.Object,com.azure.digitaltwins.core.models.PublishTelemetryOptions)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: publishTelemetryWithResponse(String digitalTwinId, String messageId, Object payload, PublishTelemetryOptions options)
  nameWithType: DigitalTwinsAsyncClient.publishTelemetryWithResponse(String digitalTwinId, String messageId, Object payload, PublishTelemetryOptions options)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishTelemetryWithResponse(String digitalTwinId, String messageId, Object payload, PublishTelemetryOptions options)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishTelemetryWithResponse*
  type: Method
  package: com.azure.digitaltwins.core
  summary: "Publishes telemetry from a digital twin\n\n**Code Samples**\n\nA strongly typed object such as <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.Hashtable</xref> can be provided as the input parameter for the telemetry payload.\n\n```java\nDictionary<String, Integer> telemetryPayload = new Hashtable<>();\n telemetryPayload.put(\"Telemetry1\", 5);\n \n digitalTwinsAsyncClient.publishTelemetryWithResponse(\n     \"myDigitalTwinId\",\n     UUID.randomUUID().toString(),\n     telemetryPayload,\n     new PublishTelemetryOptions().setTimestamp(OffsetDateTime.now(ZoneId.systemDefault())))\n .subscribe(responseObject ->\n     System.out.println(\n         \"Received publish telemetry operation response with HTTP status code: \" +\n         responseObject.getStatusCode()));\n```\n\nOr alternatively String can be used as input type to construct the json string telemetry payload:\n\n```java\ndigitalTwinsAsyncClient.publishTelemetryWithResponse(\n     \"myDigitalTwinId\",\n     UUID.randomUUID().toString(),\n     \"{\\\"Telemetry1\\\": 5}\",\n     new PublishTelemetryOptions().setTimestamp(OffsetDateTime.now(ZoneId.systemDefault())))\n .subscribe(responseString ->\n     System.out.println(\n         \"Received publish telemetry operation response with HTTP status code: \" +\n         responseString.getStatusCode()));\n```\n\nThe result is then consumed by one or many destination endpoints (subscribers) defined under <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"false\">DigitalTwinsEventRoute</xref> These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed."
  syntax:
    content: public Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String messageId, Object payload, PublishTelemetryOptions options)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin.
    - id: messageId
      type: java.lang.String
      description: A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages. Defaults to a random UUID if argument is null.
    - id: payload
      type: java.lang.Object
      description: The application/json telemetry payload to be sent. payload can be a raw json string or a strongly typed object like a Dictionary.
    - id: options
      type: com.azure.digitaltwins.core.models.PublishTelemetryOptions
      description: The optional parameters for this request. If null, the default option values will be used.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> containing an empty mono.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateComponent(java.lang.String,java.lang.String,com.azure.core.models.JsonPatchDocument)
  id: updateComponent(java.lang.String,java.lang.String,com.azure.core.models.JsonPatchDocument)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: updateComponent(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch)
  nameWithType: DigitalTwinsAsyncClient.updateComponent(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateComponent(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateComponent*
  type: Method
  package: com.azure.digitaltwins.core
  summary: "Patch a component on a digital twin.\n\n**Code Samples**\n\n```java\nJsonPatchDocument jsonPatchDocument = new JsonPatchDocument();\n jsonPatchDocument.appendReplace(\"/ComponentProp1\", \"Some new value\");\n \n digitalTwinsAsyncClient.updateComponent(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     jsonPatchDocument)\n .subscribe();\n```"
  syntax:
    content: public Mono<Void> updateComponent(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin that has the component to patch.
    - id: componentName
      type: java.lang.String
      description: The name of the component on the digital twin.
    - id: jsonPatch
      type: com.azure.core.models.JsonPatchDocument
      description: >-
        The JSON patch to apply to the specified digital twin's relationship.
                                          This argument can be created using <xref uid="com.azure.core.models.JsonPatchDocument" data-throw-if-not-resolved="false">JsonPatchDocument</xref>.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty Mono.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateComponentWithResponse(java.lang.String,java.lang.String,com.azure.core.models.JsonPatchDocument,com.azure.digitaltwins.core.models.UpdateComponentOptions)
  id: updateComponentWithResponse(java.lang.String,java.lang.String,com.azure.core.models.JsonPatchDocument,com.azure.digitaltwins.core.models.UpdateComponentOptions)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: updateComponentWithResponse(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch, UpdateComponentOptions options)
  nameWithType: DigitalTwinsAsyncClient.updateComponentWithResponse(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch, UpdateComponentOptions options)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateComponentWithResponse(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch, UpdateComponentOptions options)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateComponentWithResponse*
  type: Method
  package: com.azure.digitaltwins.core
  summary: "Patch a component on a digital twin.\n\n**Code Samples**\n\n```java\nJsonPatchDocument jsonPatchDocument = new JsonPatchDocument();\n jsonPatchDocument.appendReplace(\"/ComponentProp1\", \"Some new value\");\n \n digitalTwinsAsyncClient.updateComponentWithResponse(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     jsonPatchDocument,\n     new UpdateComponentOptions().setIfMatch(\"*\"))\n .subscribe(updateResponse ->\n     System.out.println(\n         \"Received update operation response with HTTP status code: \" +\n         updateResponse.getStatusCode()));\n```"
  syntax:
    content: public Mono<DigitalTwinsResponse<Void>> updateComponentWithResponse(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch, UpdateComponentOptions options)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin that has the component to patch.
    - id: componentName
      type: java.lang.String
      description: The name of the component on the digital twin.
    - id: jsonPatch
      type: com.azure.core.models.JsonPatchDocument
      description: >-
        The JSON patch to apply to the specified digital twin's relationship.
                                          This argument can be created using <xref uid="com.azure.core.models.JsonPatchDocument" data-throw-if-not-resolved="false">JsonPatchDocument</xref>.
    - id: options
      type: com.azure.digitaltwins.core.models.UpdateComponentOptions
      description: The optional parameters for this request. If null, the default option values will be used.
    return:
      type: reactor.core.publisher.Mono<com.azure.digitaltwins.core.models.DigitalTwinsResponse<java.lang.Void>>
      description: A <xref uid="com.azure.digitaltwins.core.models.DigitalTwinsResponse" data-throw-if-not-resolved="false">DigitalTwinsResponse</xref> containing an empty Mono.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateDigitalTwin(java.lang.String,com.azure.core.models.JsonPatchDocument)
  id: updateDigitalTwin(java.lang.String,com.azure.core.models.JsonPatchDocument)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: updateDigitalTwin(String digitalTwinId, JsonPatchDocument jsonPatch)
  nameWithType: DigitalTwinsAsyncClient.updateDigitalTwin(String digitalTwinId, JsonPatchDocument jsonPatch)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateDigitalTwin(String digitalTwinId, JsonPatchDocument jsonPatch)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateDigitalTwin*
  type: Method
  package: com.azure.digitaltwins.core
  summary: "Updates a digital twin.\n\n**Code Samples**\n\nUpdate digital twin by providing list of intended patch operations.\n\n```java\nJsonPatchDocument jsonPatchDocument = new JsonPatchDocument();\n jsonPatchDocument.appendReplace(\"Prop1\", \"newValue\");\n \n digitalTwinsAsyncClient.updateDigitalTwin(\n     \"myDigitalTwinId\",\n     jsonPatchDocument)\n .subscribe();\n```"
  syntax:
    content: public Mono<Void> updateDigitalTwin(String digitalTwinId, JsonPatchDocument jsonPatch)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin. The Id is unique within the service and case sensitive.
    - id: jsonPatch
      type: com.azure.core.models.JsonPatchDocument
      description: >-
        The JSON patch to apply to the specified digital twin.
                                            This argument can be created using <xref uid="com.azure.core.models.JsonPatchDocument" data-throw-if-not-resolved="false">JsonPatchDocument</xref>.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty Mono
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateDigitalTwinWithResponse(java.lang.String,com.azure.core.models.JsonPatchDocument,com.azure.digitaltwins.core.models.UpdateDigitalTwinOptions)
  id: updateDigitalTwinWithResponse(java.lang.String,com.azure.core.models.JsonPatchDocument,com.azure.digitaltwins.core.models.UpdateDigitalTwinOptions)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: updateDigitalTwinWithResponse(String digitalTwinId, JsonPatchDocument jsonPatch, UpdateDigitalTwinOptions options)
  nameWithType: DigitalTwinsAsyncClient.updateDigitalTwinWithResponse(String digitalTwinId, JsonPatchDocument jsonPatch, UpdateDigitalTwinOptions options)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateDigitalTwinWithResponse(String digitalTwinId, JsonPatchDocument jsonPatch, UpdateDigitalTwinOptions options)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateDigitalTwinWithResponse*
  type: Method
  package: com.azure.digitaltwins.core
  summary: "Updates a digital twin.\n\n**Code Samples**\n\nUpdate digital twin by providing list of intended patch operations.\n\n```java\nJsonPatchDocument jsonPatchDocument = new JsonPatchDocument();\n jsonPatchDocument.appendReplace(\"Prop1\", \"newValue\");\n \n digitalTwinsAsyncClient.updateDigitalTwinWithResponse(\n     \"myDigitalTwinId\",\n     jsonPatchDocument,\n     new UpdateDigitalTwinOptions())\n .subscribe(updateResponse ->\n     System.out.println(\"Update completed with HTTP status code: \" + updateResponse.getStatusCode()));\n```"
  syntax:
    content: public Mono<DigitalTwinsResponse<Void>> updateDigitalTwinWithResponse(String digitalTwinId, JsonPatchDocument jsonPatch, UpdateDigitalTwinOptions options)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin. The Id is unique within the service and case sensitive.
    - id: jsonPatch
      type: com.azure.core.models.JsonPatchDocument
      description: >-
        The JSON patch to apply to the specified digital twin.
                                            This argument can be created using <xref uid="com.azure.core.models.JsonPatchDocument" data-throw-if-not-resolved="false">JsonPatchDocument</xref>.
    - id: options
      type: com.azure.digitaltwins.core.models.UpdateDigitalTwinOptions
      description: The optional parameters for this request. If null, the default option values will be used.
    return:
      type: reactor.core.publisher.Mono<com.azure.digitaltwins.core.models.DigitalTwinsResponse<java.lang.Void>>
      description: A <xref uid="com.azure.digitaltwins.core.models.DigitalTwinsResponse" data-throw-if-not-resolved="false">DigitalTwinsResponse</xref>
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateRelationship(java.lang.String,java.lang.String,com.azure.core.models.JsonPatchDocument)
  id: updateRelationship(java.lang.String,java.lang.String,com.azure.core.models.JsonPatchDocument)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: updateRelationship(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch)
  nameWithType: DigitalTwinsAsyncClient.updateRelationship(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateRelationship(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateRelationship*
  type: Method
  package: com.azure.digitaltwins.core
  summary: "Updates the properties of a relationship on a digital twin.\n\n**Code Samples**\n\n```java\nJsonPatchDocument jsonPatchDocument = new JsonPatchDocument();\n jsonPatchDocument.appendReplace(\"/relationshipProperty1\", \"new property value\");\n \n digitalTwinsAsyncClient.updateRelationship(\n     \"myDigitalTwinId\",\n     \"myRelationshipId\",\n     jsonPatchDocument)\n .subscribe();\n```"
  syntax:
    content: public Mono<Void> updateRelationship(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the source digital twin.
    - id: relationshipId
      type: java.lang.String
      description: The Id of the relationship to be updated.
    - id: jsonPatch
      type: com.azure.core.models.JsonPatchDocument
      description: >-
        The JSON patch to apply to the specified digital twin's relationship.
                                             This argument can be created using <xref uid="com.azure.core.models.JsonPatchDocument" data-throw-if-not-resolved="false">JsonPatchDocument</xref>.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty Mono.
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateRelationshipWithResponse(java.lang.String,java.lang.String,com.azure.core.models.JsonPatchDocument,com.azure.digitaltwins.core.models.UpdateRelationshipOptions)
  id: updateRelationshipWithResponse(java.lang.String,java.lang.String,com.azure.core.models.JsonPatchDocument,com.azure.digitaltwins.core.models.UpdateRelationshipOptions)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.DigitalTwinsAsyncClient
  langs:
  - java
  name: updateRelationshipWithResponse(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch, UpdateRelationshipOptions options)
  nameWithType: DigitalTwinsAsyncClient.updateRelationshipWithResponse(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch, UpdateRelationshipOptions options)
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateRelationshipWithResponse(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch, UpdateRelationshipOptions options)
  overload: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateRelationshipWithResponse*
  type: Method
  package: com.azure.digitaltwins.core
  summary: "Updates the properties of a relationship on a digital twin.\n\n**Code Samples**\n\n```java\nJsonPatchDocument jsonPatchDocument = new JsonPatchDocument();\n jsonPatchDocument.appendReplace(\"/relationshipProperty1\", \"new property value\");\n \n digitalTwinsAsyncClient.updateRelationshipWithResponse(\n     \"myDigitalTwinId\",\n     \"myRelationshipId\",\n     jsonPatchDocument,\n     new UpdateRelationshipOptions())\n .subscribe(updateResponse ->\n     System.out.println(\n         \"Relationship updated with status code: \" +\n         updateResponse.getStatusCode()));\n```"
  syntax:
    content: public Mono<DigitalTwinsResponse<Void>> updateRelationshipWithResponse(String digitalTwinId, String relationshipId, JsonPatchDocument jsonPatch, UpdateRelationshipOptions options)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the source digital twin.
    - id: relationshipId
      type: java.lang.String
      description: The Id of the relationship to be updated.
    - id: jsonPatch
      type: com.azure.core.models.JsonPatchDocument
      description: >-
        The JSON patch to apply to the specified digital twin's relationship.
                                             This argument can be created using <xref uid="com.azure.core.models.JsonPatchDocument" data-throw-if-not-resolved="false">JsonPatchDocument</xref>.
    - id: options
      type: com.azure.digitaltwins.core.models.UpdateRelationshipOptions
      description: The optional parameters for this request. If null, the default option values will be used.
    return:
      type: reactor.core.publisher.Mono<com.azure.digitaltwins.core.models.DigitalTwinsResponse<java.lang.Void>>
      description: A <xref uid="com.azure.digitaltwins.core.models.DigitalTwinsResponse" data-throw-if-not-resolved="false">DigitalTwinsResponse</xref> containing no parsed payload object.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: com.azure.digitaltwins.core.DigitalTwinsServiceVersion
  name: DigitalTwinsServiceVersion
  nameWithType: DigitalTwinsServiceVersion
  fullName: com.azure.digitaltwins.core.DigitalTwinsServiceVersion
- uid: com.azure.core.util.serializer.JsonSerializer
  spec.java:
  - uid: com.azure.core.util.serializer.JsonSerializer
    name: JsonSerializer
    fullName: com.azure.core.util.serializer.JsonSerializer
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.DigitalTwinsAsyncClient*
  name: DigitalTwinsAsyncClient
  nameWithType: DigitalTwinsAsyncClient.DigitalTwinsAsyncClient
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.DigitalTwinsAsyncClient
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getServiceVersion*
  name: getServiceVersion
  nameWithType: DigitalTwinsAsyncClient.getServiceVersion
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getServiceVersion
  package: com.azure.digitaltwins.core
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<T>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceDigitalTwin*
  name: <T>createOrReplaceDigitalTwin
  nameWithType: DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwin
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwin
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.models.CreateOrReplaceDigitalTwinOptions
  name: CreateOrReplaceDigitalTwinOptions
  nameWithType: CreateOrReplaceDigitalTwinOptions
  fullName: com.azure.digitaltwins.core.models.CreateOrReplaceDigitalTwinOptions
- uid: reactor.core.publisher.Mono<com.azure.digitaltwins.core.models.DigitalTwinsResponse<T>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.digitaltwins.core.models.DigitalTwinsResponse
    name: DigitalTwinsResponse
    fullName: com.azure.digitaltwins.core.models.DigitalTwinsResponse
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceDigitalTwinWithResponse*
  name: <T>createOrReplaceDigitalTwinWithResponse
  nameWithType: DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwinWithResponse
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwinWithResponse
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getDigitalTwin*
  name: <T>getDigitalTwin
  nameWithType: DigitalTwinsAsyncClient.<T>getDigitalTwin
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getDigitalTwin
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getDigitalTwinWithResponse*
  name: <T>getDigitalTwinWithResponse
  nameWithType: DigitalTwinsAsyncClient.<T>getDigitalTwinWithResponse
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getDigitalTwinWithResponse
  package: com.azure.digitaltwins.core
- uid: com.azure.core.models.JsonPatchDocument
  spec.java:
  - uid: com.azure.core.models.JsonPatchDocument
    name: JsonPatchDocument
    fullName: com.azure.core.models.JsonPatchDocument
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateDigitalTwin*
  name: updateDigitalTwin
  nameWithType: DigitalTwinsAsyncClient.updateDigitalTwin
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateDigitalTwin
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.models.UpdateDigitalTwinOptions
  name: UpdateDigitalTwinOptions
  nameWithType: UpdateDigitalTwinOptions
  fullName: com.azure.digitaltwins.core.models.UpdateDigitalTwinOptions
- uid: reactor.core.publisher.Mono<com.azure.digitaltwins.core.models.DigitalTwinsResponse<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.digitaltwins.core.models.DigitalTwinsResponse
    name: DigitalTwinsResponse
    fullName: com.azure.digitaltwins.core.models.DigitalTwinsResponse
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateDigitalTwinWithResponse*
  name: updateDigitalTwinWithResponse
  nameWithType: DigitalTwinsAsyncClient.updateDigitalTwinWithResponse
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateDigitalTwinWithResponse
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteDigitalTwin*
  name: deleteDigitalTwin
  nameWithType: DigitalTwinsAsyncClient.deleteDigitalTwin
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteDigitalTwin
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.models.DeleteDigitalTwinOptions
  name: DeleteDigitalTwinOptions
  nameWithType: DeleteDigitalTwinOptions
  fullName: com.azure.digitaltwins.core.models.DeleteDigitalTwinOptions
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteDigitalTwinWithResponse*
  name: deleteDigitalTwinWithResponse
  nameWithType: DigitalTwinsAsyncClient.deleteDigitalTwinWithResponse
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteDigitalTwinWithResponse
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceRelationship*
  name: <T>createOrReplaceRelationship
  nameWithType: DigitalTwinsAsyncClient.<T>createOrReplaceRelationship
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceRelationship
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.models.CreateOrReplaceRelationshipOptions
  name: CreateOrReplaceRelationshipOptions
  nameWithType: CreateOrReplaceRelationshipOptions
  fullName: com.azure.digitaltwins.core.models.CreateOrReplaceRelationshipOptions
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceRelationshipWithResponse*
  name: <T>createOrReplaceRelationshipWithResponse
  nameWithType: DigitalTwinsAsyncClient.<T>createOrReplaceRelationshipWithResponse
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceRelationshipWithResponse
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getRelationship*
  name: <T>getRelationship
  nameWithType: DigitalTwinsAsyncClient.<T>getRelationship
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getRelationship
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getRelationshipWithResponse*
  name: <T>getRelationshipWithResponse
  nameWithType: DigitalTwinsAsyncClient.<T>getRelationshipWithResponse
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getRelationshipWithResponse
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateRelationship*
  name: updateRelationship
  nameWithType: DigitalTwinsAsyncClient.updateRelationship
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateRelationship
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.models.UpdateRelationshipOptions
  name: UpdateRelationshipOptions
  nameWithType: UpdateRelationshipOptions
  fullName: com.azure.digitaltwins.core.models.UpdateRelationshipOptions
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateRelationshipWithResponse*
  name: updateRelationshipWithResponse
  nameWithType: DigitalTwinsAsyncClient.updateRelationshipWithResponse
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateRelationshipWithResponse
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteRelationship*
  name: deleteRelationship
  nameWithType: DigitalTwinsAsyncClient.deleteRelationship
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteRelationship
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.models.DeleteRelationshipOptions
  name: DeleteRelationshipOptions
  nameWithType: DeleteRelationshipOptions
  fullName: com.azure.digitaltwins.core.models.DeleteRelationshipOptions
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteRelationshipWithResponse*
  name: deleteRelationshipWithResponse
  nameWithType: DigitalTwinsAsyncClient.deleteRelationshipWithResponse
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteRelationshipWithResponse
  package: com.azure.digitaltwins.core
- uid: com.azure.core.http.rest.PagedFlux<T>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listRelationships*
  name: <T>listRelationships
  nameWithType: DigitalTwinsAsyncClient.<T>listRelationships
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>listRelationships
  package: com.azure.digitaltwins.core
- uid: com.azure.core.http.rest.PagedFlux<com.azure.digitaltwins.core.models.IncomingRelationship>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.digitaltwins.core.models.IncomingRelationship
    name: IncomingRelationship
    fullName: com.azure.digitaltwins.core.models.IncomingRelationship
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listIncomingRelationships*
  name: listIncomingRelationships
  nameWithType: DigitalTwinsAsyncClient.listIncomingRelationships
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listIncomingRelationships
  package: com.azure.digitaltwins.core
- uid: java.lang.Iterable<java.lang.String>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<java.lang.Iterable<com.azure.digitaltwins.core.models.DigitalTwinsModelData>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: com.azure.digitaltwins.core.models.DigitalTwinsModelData
    name: DigitalTwinsModelData
    fullName: com.azure.digitaltwins.core.models.DigitalTwinsModelData
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createModels*
  name: createModels
  nameWithType: DigitalTwinsAsyncClient.createModels
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createModels
  package: com.azure.digitaltwins.core
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Iterable<com.azure.digitaltwins.core.models.DigitalTwinsModelData>>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: com.azure.digitaltwins.core.models.DigitalTwinsModelData
    name: DigitalTwinsModelData
    fullName: com.azure.digitaltwins.core.models.DigitalTwinsModelData
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createModelsWithResponse*
  name: createModelsWithResponse
  nameWithType: DigitalTwinsAsyncClient.createModelsWithResponse
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createModelsWithResponse
  package: com.azure.digitaltwins.core
- uid: reactor.core.publisher.Mono<com.azure.digitaltwins.core.models.DigitalTwinsModelData>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.digitaltwins.core.models.DigitalTwinsModelData
    name: DigitalTwinsModelData
    fullName: com.azure.digitaltwins.core.models.DigitalTwinsModelData
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getModel*
  name: getModel
  nameWithType: DigitalTwinsAsyncClient.getModel
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getModel
  package: com.azure.digitaltwins.core
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.digitaltwins.core.models.DigitalTwinsModelData>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.digitaltwins.core.models.DigitalTwinsModelData
    name: DigitalTwinsModelData
    fullName: com.azure.digitaltwins.core.models.DigitalTwinsModelData
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getModelWithResponse*
  name: getModelWithResponse
  nameWithType: DigitalTwinsAsyncClient.getModelWithResponse
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getModelWithResponse
  package: com.azure.digitaltwins.core
- uid: com.azure.core.http.rest.PagedFlux<com.azure.digitaltwins.core.models.DigitalTwinsModelData>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.digitaltwins.core.models.DigitalTwinsModelData
    name: DigitalTwinsModelData
    fullName: com.azure.digitaltwins.core.models.DigitalTwinsModelData
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listModels*
  name: listModels
  nameWithType: DigitalTwinsAsyncClient.listModels
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listModels
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.models.ListModelsOptions
  name: ListModelsOptions
  nameWithType: ListModelsOptions
  fullName: com.azure.digitaltwins.core.models.ListModelsOptions
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteModel*
  name: deleteModel
  nameWithType: DigitalTwinsAsyncClient.deleteModel
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteModel
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteModelWithResponse*
  name: deleteModelWithResponse
  nameWithType: DigitalTwinsAsyncClient.deleteModelWithResponse
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteModelWithResponse
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.decommissionModel*
  name: decommissionModel
  nameWithType: DigitalTwinsAsyncClient.decommissionModel
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.decommissionModel
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.decommissionModelWithResponse*
  name: decommissionModelWithResponse
  nameWithType: DigitalTwinsAsyncClient.decommissionModelWithResponse
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.decommissionModelWithResponse
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getComponent*
  name: <T>getComponent
  nameWithType: DigitalTwinsAsyncClient.<T>getComponent
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getComponent
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getComponentWithResponse*
  name: <T>getComponentWithResponse
  nameWithType: DigitalTwinsAsyncClient.<T>getComponentWithResponse
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getComponentWithResponse
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateComponent*
  name: updateComponent
  nameWithType: DigitalTwinsAsyncClient.updateComponent
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateComponent
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.models.UpdateComponentOptions
  name: UpdateComponentOptions
  nameWithType: UpdateComponentOptions
  fullName: com.azure.digitaltwins.core.models.UpdateComponentOptions
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateComponentWithResponse*
  name: updateComponentWithResponse
  nameWithType: DigitalTwinsAsyncClient.updateComponentWithResponse
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateComponentWithResponse
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.query*
  name: <T>query
  nameWithType: DigitalTwinsAsyncClient.<T>query
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>query
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.models.QueryOptions
  name: QueryOptions
  nameWithType: QueryOptions
  fullName: com.azure.digitaltwins.core.models.QueryOptions
- uid: com.azure.digitaltwins.core.models.DigitalTwinsEventRoute
  name: DigitalTwinsEventRoute
  nameWithType: DigitalTwinsEventRoute
  fullName: com.azure.digitaltwins.core.models.DigitalTwinsEventRoute
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceEventRoute*
  name: createOrReplaceEventRoute
  nameWithType: DigitalTwinsAsyncClient.createOrReplaceEventRoute
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceEventRoute
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceEventRouteWithResponse*
  name: createOrReplaceEventRouteWithResponse
  nameWithType: DigitalTwinsAsyncClient.createOrReplaceEventRouteWithResponse
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceEventRouteWithResponse
  package: com.azure.digitaltwins.core
- uid: reactor.core.publisher.Mono<com.azure.digitaltwins.core.models.DigitalTwinsEventRoute>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.digitaltwins.core.models.DigitalTwinsEventRoute
    name: DigitalTwinsEventRoute
    fullName: com.azure.digitaltwins.core.models.DigitalTwinsEventRoute
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getEventRoute*
  name: getEventRoute
  nameWithType: DigitalTwinsAsyncClient.getEventRoute
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getEventRoute
  package: com.azure.digitaltwins.core
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.digitaltwins.core.models.DigitalTwinsEventRoute>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.digitaltwins.core.models.DigitalTwinsEventRoute
    name: DigitalTwinsEventRoute
    fullName: com.azure.digitaltwins.core.models.DigitalTwinsEventRoute
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getEventRouteWithResponse*
  name: getEventRouteWithResponse
  nameWithType: DigitalTwinsAsyncClient.getEventRouteWithResponse
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getEventRouteWithResponse
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteEventRoute*
  name: deleteEventRoute
  nameWithType: DigitalTwinsAsyncClient.deleteEventRoute
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteEventRoute
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteEventRouteWithResponse*
  name: deleteEventRouteWithResponse
  nameWithType: DigitalTwinsAsyncClient.deleteEventRouteWithResponse
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.deleteEventRouteWithResponse
  package: com.azure.digitaltwins.core
- uid: com.azure.core.http.rest.PagedFlux<com.azure.digitaltwins.core.models.DigitalTwinsEventRoute>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.digitaltwins.core.models.DigitalTwinsEventRoute
    name: DigitalTwinsEventRoute
    fullName: com.azure.digitaltwins.core.models.DigitalTwinsEventRoute
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listEventRoutes*
  name: listEventRoutes
  nameWithType: DigitalTwinsAsyncClient.listEventRoutes
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listEventRoutes
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.models.ListDigitalTwinsEventRoutesOptions
  name: ListDigitalTwinsEventRoutesOptions
  nameWithType: ListDigitalTwinsEventRoutesOptions
  fullName: com.azure.digitaltwins.core.models.ListDigitalTwinsEventRoutesOptions
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishTelemetry*
  name: publishTelemetry
  nameWithType: DigitalTwinsAsyncClient.publishTelemetry
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishTelemetry
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.models.PublishTelemetryOptions
  name: PublishTelemetryOptions
  nameWithType: PublishTelemetryOptions
  fullName: com.azure.digitaltwins.core.models.PublishTelemetryOptions
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishTelemetryWithResponse*
  name: publishTelemetryWithResponse
  nameWithType: DigitalTwinsAsyncClient.publishTelemetryWithResponse
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishTelemetryWithResponse
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishComponentTelemetry*
  name: publishComponentTelemetry
  nameWithType: DigitalTwinsAsyncClient.publishComponentTelemetry
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishComponentTelemetry
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.models.PublishComponentTelemetryOptions
  name: PublishComponentTelemetryOptions
  nameWithType: PublishComponentTelemetryOptions
  fullName: com.azure.digitaltwins.core.models.PublishComponentTelemetryOptions
- uid: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishComponentTelemetryWithResponse*
  name: publishComponentTelemetryWithResponse
  nameWithType: DigitalTwinsAsyncClient.publishComponentTelemetryWithResponse
  fullName: com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishComponentTelemetryWithResponse
  package: com.azure.digitaltwins.core
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.digitaltwins.core.models.DigitalTwinsResponse
  name: DigitalTwinsResponse
  nameWithType: DigitalTwinsResponse
  fullName: com.azure.digitaltwins.core.models.DigitalTwinsResponse
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
- uid: com.azure.digitaltwins.core.models.IncomingRelationship
  name: IncomingRelationship
  nameWithType: IncomingRelationship
  fullName: com.azure.digitaltwins.core.models.IncomingRelationship
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: com.azure.digitaltwins.core.models.DigitalTwinsModelData
  name: DigitalTwinsModelData
  nameWithType: DigitalTwinsModelData
  fullName: com.azure.digitaltwins.core.models.DigitalTwinsModelData
