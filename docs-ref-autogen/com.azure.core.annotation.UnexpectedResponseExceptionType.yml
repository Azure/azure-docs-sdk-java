### YamlMime:JavaType
uid: "com.azure.core.annotation.UnexpectedResponseExceptionType"
fullName: "com.azure.core.annotation.UnexpectedResponseExceptionType"
name: "UnexpectedResponseExceptionType"
nameWithType: "UnexpectedResponseExceptionType"
summary: "The exception type that is thrown or returned when one of the status codes is returned from a REST API. Multiple annotations can be used. When no codes are listed that exception is always thrown or returned if it is reached during evaluation, this should be treated as a default case. If no default case is annotated the fall through exception is <xref uid=\"? extends com.azure.core.exception.HttpResponseException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpResponseException\"></xref>.\n\n**Example:**\n\n```java\n// Set it so that all response exceptions use a custom exception type.\n\n @UnexpectedResponseExceptionType(MyCustomExceptionHttpResponseException.class)\n @Post(\"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/\"\n     + \"Microsoft.CustomerInsights/hubs/{hubName}/images/getEntityTypeImageUploadUrl\")\n void singleExceptionType(@PathParam(\"resourceGroupName\") String resourceGroupName,\n     @PathParam(\"hubName\") String hubName,\n     @PathParam(\"subscriptionId\") String subscriptionId,\n     @BodyParam(\"application/json\") RequestBody parameters);\n\n\n // Set it so 404 uses a specific exception type while others use a generic exception type.\n\n @UnexpectedResponseExceptionType(code = {404}, value = ResourceNotFoundException.class)\n @UnexpectedResponseExceptionType(HttpResponseException.class)\n @Post(\"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/\"\n     + \"Microsoft.CustomerInsights/hubs/{hubName}/images/getEntityTypeImageUploadUrl\")\n void multipleExceptionTypes(@PathParam(\"resourceGroupName\") String resourceGroupName,\n     @PathParam(\"hubName\") String hubName,\n     @PathParam(\"subscriptionId\") String subscriptionId,\n     @BodyParam(\"application/json\") RequestBody parameters);\n\n // If multiple annotations share the same HTTP status code or there is multiple default annotations the\n // exception, the last annotation in the top to bottom order will be used (so the bottom most annotation).\n```"
syntax: "public interface UnexpectedResponseExceptionType implements Annotation"
methods:
- "com.azure.core.annotation.UnexpectedResponseExceptionType.code()"
- "com.azure.core.annotation.UnexpectedResponseExceptionType.value()"
type: "interface"
implements:
- "<xref href=\"java.lang.annotation.Annotation?alt=java.lang.annotation.Annotation&text=Annotation\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.core.annotation"
artifact: com.azure:azure-core:1.23.0
