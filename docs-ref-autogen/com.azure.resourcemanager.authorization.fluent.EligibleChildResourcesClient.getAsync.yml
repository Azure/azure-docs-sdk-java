### YamlMime:JavaMember
uid: "com.azure.resourcemanager.authorization.fluent.EligibleChildResourcesClient.getAsync*"
fullName: "com.azure.resourcemanager.authorization.fluent.EligibleChildResourcesClient.getAsync"
name: "getAsync"
nameWithType: "EligibleChildResourcesClient.getAsync"
members:
- uid: "com.azure.resourcemanager.authorization.fluent.EligibleChildResourcesClient.getAsync(java.lang.String)"
  fullName: "com.azure.resourcemanager.authorization.fluent.EligibleChildResourcesClient.getAsync(String scope)"
  name: "getAsync(String scope)"
  nameWithType: "EligibleChildResourcesClient.getAsync(String scope)"
  summary: "Get the child resources of a resource on which user has eligible access."
  parameters:
  - description: "The scope of the role management policy."
    name: "scope"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedFlux<EligibleChildResourceInner> getAsync(String scope)"
  returns:
    description: "the child resources of a resource on which user has eligible access as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.authorization.fluent.models.EligibleChildResourceInner?alt=com.azure.resourcemanager.authorization.fluent.models.EligibleChildResourceInner&text=EligibleChildResourceInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.authorization.fluent.EligibleChildResourcesClient.getAsync(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.authorization.fluent.EligibleChildResourcesClient.getAsync(String scope, String filter)"
  name: "getAsync(String scope, String filter)"
  nameWithType: "EligibleChildResourcesClient.getAsync(String scope, String filter)"
  summary: "Get the child resources of a resource on which user has eligible access."
  parameters:
  - description: "The scope of the role management policy."
    name: "scope"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The filter to apply on the operation. Use $filter=resourceType+eq+'Subscription' to filter on only\n     resource of type = 'Subscription'. Use\n     $filter=resourceType+eq+'subscription'+or+resourceType+eq+'resourcegroup' to filter on resource of type =\n     'Subscription' or 'ResourceGroup'."
    name: "filter"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedFlux<EligibleChildResourceInner> getAsync(String scope, String filter)"
  returns:
    description: "the child resources of a resource on which user has eligible access as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.authorization.fluent.models.EligibleChildResourceInner?alt=com.azure.resourcemanager.authorization.fluent.models.EligibleChildResourceInner&text=EligibleChildResourceInner\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.resourcemanager.authorization.fluent"
artifact: com.azure.resourcemanager:azure-resourcemanager-authorization:2.16.0
