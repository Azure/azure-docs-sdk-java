### YamlMime:JavaMember
uid: "com.azure.security.keyvault.keys.KeyAsyncClient.listPropertiesOfKeyVersions*"
fullName: "com.azure.security.keyvault.keys.KeyAsyncClient.listPropertiesOfKeyVersions"
name: "listPropertiesOfKeyVersions"
nameWithType: "KeyAsyncClient.listPropertiesOfKeyVersions"
members:
- uid: "com.azure.security.keyvault.keys.KeyAsyncClient.listPropertiesOfKeyVersions(java.lang.String)"
  fullName: "com.azure.security.keyvault.keys.KeyAsyncClient.listPropertiesOfKeyVersions(String name)"
  name: "listPropertiesOfKeyVersions(String name)"
  nameWithType: "KeyAsyncClient.listPropertiesOfKeyVersions(String name)"
  summary: "List all versions of the specified key. The individual key response in the flux is represented by <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyProperties\"></xref> as only the key identifier, attributes and tags are provided in the response. The key material values are not provided in the response. This operation requires the `keys/list` permission.\n\nIt is possible to get the keys with key material of all the versions from this information. Convert the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> containing <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key properties\"></xref> to <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> containing <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref> using <xref uid=\"com.azure.security.keyvault.keys.KeyAsyncClient.getKey(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyAsyncClient#getKey(String, String)\"></xref> within <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux#flatMap(Function)\"></xref>.\n\n```java\nkeyAsyncClient.listPropertiesOfKeyVersions(\"keyName\")\n     .subscriberContext(Context.of(key1, value1, key2, value2))\n     .subscribe(keyProperties -> keyAsyncClient.getKey(keyProperties.getName(), keyProperties.getVersion())\n         .subscribe(keyResponse ->\n             System.out.printf(\"Received key's version with name %s, type %s and version %s\",\n                 keyResponse.getName(),\n                 keyResponse.getKeyType(), keyResponse.getProperties().getVersion())));\n```"
  parameters:
  - description: "The name of the key."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<KeyProperties> listPropertiesOfKeyVersions(String name)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref> of all the versions of the specified key in the vault.\n     Flux is empty if key with <code>name</code> does not exist in key vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.models.KeyProperties?alt=com.azure.security.keyvault.keys.models.KeyProperties&text=KeyProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.security.keyvault.keys"
artifact: com.azure:azure-security-keyvault-keys:4.2.3
