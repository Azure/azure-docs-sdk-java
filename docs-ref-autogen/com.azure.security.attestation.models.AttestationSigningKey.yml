### YamlMime:JavaType
uid: "com.azure.security.attestation.models.AttestationSigningKey"
fullName: "com.azure.security.attestation.models.AttestationSigningKey"
name: "AttestationSigningKey"
nameWithType: "AttestationSigningKey"
summary: "Signing Key used to sign requests to the attestation service."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class AttestationSigningKey"
constructors:
- uid: "com.azure.security.attestation.models.AttestationSigningKey.AttestationSigningKey(java.security.cert.X509Certificate,java.security.PrivateKey)"
  fullName: "com.azure.security.attestation.models.AttestationSigningKey.AttestationSigningKey(X509Certificate certificate, PrivateKey privateKey)"
  name: "AttestationSigningKey(X509Certificate certificate, PrivateKey privateKey)"
  nameWithType: "AttestationSigningKey.AttestationSigningKey(X509Certificate certificate, PrivateKey privateKey)"
  summary: "Creates a new instance of an Attestation<wbr>Signing<wbr>Key."
  parameters:
  - description: "An X.509 Certificate wrapping the public key associated with `privateKey`.\n                    This certificate will be sent to the attestation service to allow the service\n                    to validate the certificate."
    name: "certificate"
    type: "<xref href=\"java.security.cert.X509Certificate?alt=java.security.cert.X509Certificate&text=X509Certificate\" data-throw-if-not-resolved=\"False\" />"
  - description: "The asymmetric key used to sign the request to be sent to the server."
    name: "privateKey"
    type: "<xref href=\"java.security.PrivateKey?alt=java.security.PrivateKey&text=PrivateKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AttestationSigningKey(X509Certificate certificate, PrivateKey privateKey)"
  desc: "Creates a new instance of an AttestationSigningKey."
methods:
- uid: "com.azure.security.attestation.models.AttestationSigningKey.getCertificate()"
  fullName: "com.azure.security.attestation.models.AttestationSigningKey.getCertificate()"
  name: "getCertificate()"
  nameWithType: "AttestationSigningKey.getCertificate()"
  syntax: "public X509Certificate getCertificate()"
  returns:
    description: "Returns the X.509 certificate associated with this Signing Key."
    type: "<xref href=\"java.security.cert.X509Certificate?alt=java.security.cert.X509Certificate&text=X509Certificate\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationSigningKey.getPrivateKey()"
  fullName: "com.azure.security.attestation.models.AttestationSigningKey.getPrivateKey()"
  name: "getPrivateKey()"
  nameWithType: "AttestationSigningKey.getPrivateKey()"
  syntax: "public PrivateKey getPrivateKey()"
  returns:
    description: "Returns the private key associated with this signing key."
    type: "<xref href=\"java.security.PrivateKey?alt=java.security.PrivateKey&text=PrivateKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationSigningKey.isWeakKeyAllowed()"
  fullName: "com.azure.security.attestation.models.AttestationSigningKey.isWeakKeyAllowed()"
  name: "isWeakKeyAllowed()"
  nameWithType: "AttestationSigningKey.isWeakKeyAllowed()"
  syntax: "public boolean isWeakKeyAllowed()"
  returns:
    description: "Returns if a weak key is allowed on this signing key."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationSigningKey.setWeakKeyAllowed(boolean)"
  fullName: "com.azure.security.attestation.models.AttestationSigningKey.setWeakKeyAllowed(boolean weakKeyAllowed)"
  name: "setWeakKeyAllowed(boolean weakKeyAllowed)"
  nameWithType: "AttestationSigningKey.setWeakKeyAllowed(boolean weakKeyAllowed)"
  summary: "Sets whether the private<wbr>Key is allowed to be a weak key (less than or equal to 1024 bits)."
  parameters:
  - description: "- boolean indicating if weak keys should be allowed (default False)."
    name: "weakKeyAllowed"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AttestationSigningKey setWeakKeyAllowed(boolean weakKeyAllowed)"
  desc: "Sets whether the privateKey is allowed to be a weak key (less than or equal to 1024 bits)."
  returns:
    description: "Returns the AttestationSigningKey."
    type: "<xref href=\"com.azure.security.attestation.models.AttestationSigningKey?alt=com.azure.security.attestation.models.AttestationSigningKey&text=AttestationSigningKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationSigningKey.verify()"
  fullName: "com.azure.security.attestation.models.AttestationSigningKey.verify()"
  name: "verify()"
  nameWithType: "AttestationSigningKey.verify()"
  summary: "Verifies that the provided private<wbr>Key can sign a buffer which is verified by certificate."
  syntax: "public void verify()"
  desc: "Verifies that the provided privateKey can sign a buffer which is verified by certificate."
type: "class"
desc: "Signing Key used to sign requests to the attestation service."
metadata: {}
package: "com.azure.security.attestation.models"
artifact: com.azure:azure-security-attestation:1.1.5
