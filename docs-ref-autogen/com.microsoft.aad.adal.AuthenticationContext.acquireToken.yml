### YamlMime:JavaMember
nameWithType: AuthenticationContext.acquireToken
type: method
members:
- fullName: com.microsoft.aad.adal.AuthenticationContext.acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable PromptBehavior prompt, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
  name: acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable PromptBehavior prompt, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
  nameWithType: AuthenticationContext.acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable PromptBehavior prompt, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
  parameters:
  - description: <p>Calling activity </p>
    name: activity
    type: <xref href="Activity?alt=Activity&text=Activity" data-throw-if-not-resolved="False"/>
  - description: <p>required resource identifier. </p>
    name: resource
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>required client identifier. </p>
    name: clientId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. It will use packagename and provided suffix for this. </p>
    name: redirectUri
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. added as query parameter to authorization url </p>
    name: prompt
    type: '@Nullable <xref href="com.microsoft.aad.adal.PromptBehavior?alt=com.microsoft.aad.adal.PromptBehavior&text=PromptBehavior" data-throw-if-not-resolved="False"/>'
  - description: <p>Optional. added to authorization url </p>
    name: extraQueryParameters
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>required <xref uid="com.microsoft.aad.adal.AuthenticationCallback" data-throw-if-not-resolved="false">AuthenticationCallback</xref> object for async call. </p>
    name: callback
    type: <xref href="com.microsoft.aad.adal.AuthenticationCallback?alt=com.microsoft.aad.adal.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.aad.adal.AuthenticationResult?alt=com.microsoft.aad.adal.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>acquireToken will start interactive flow if needed. It checks the cache to return existing result if not expired. It tries to use refresh token if available. If it fails to get token with refresh token, behavior will depend on options. If promptbehavior is AUTO, it will remove this refresh token from cache and fall back on the UI if activitycontext is not null. Default is AUTO.</p>

    <p></p>
  syntax: public void acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable PromptBehavior prompt, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
  uid: com.microsoft.aad.adal.AuthenticationContext.acquireToken(Activity,String,String,@Nullable String,@Nullable PromptBehavior,@Nullable String,AuthenticationCallback<AuthenticationResult>)
- fullName: com.microsoft.aad.adal.AuthenticationContext.acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable PromptBehavior prompt, AuthenticationCallback<AuthenticationResult> callback)
  name: acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable PromptBehavior prompt, AuthenticationCallback<AuthenticationResult> callback)
  nameWithType: AuthenticationContext.acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable PromptBehavior prompt, AuthenticationCallback<AuthenticationResult> callback)
  parameters:
  - description: <p>Calling activity </p>
    name: activity
    type: <xref href="Activity?alt=Activity&text=Activity" data-throw-if-not-resolved="False"/>
  - description: <p>required resource identifier. </p>
    name: resource
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>required client identifier. </p>
    name: clientId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. It will use packagename and provided suffix for this. </p>
    name: redirectUri
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. <xref uid="com.microsoft.aad.adal.PromptBehavior" data-throw-if-not-resolved="false">PromptBehavior</xref> added as query parameter to authorization url </p>
    name: prompt
    type: '@Nullable <xref href="com.microsoft.aad.adal.PromptBehavior?alt=com.microsoft.aad.adal.PromptBehavior&text=PromptBehavior" data-throw-if-not-resolved="False"/>'
  - description: <p>required <xref uid="com.microsoft.aad.adal.AuthenticationCallback" data-throw-if-not-resolved="false">AuthenticationCallback</xref> object for async call. </p>
    name: callback
    type: <xref href="com.microsoft.aad.adal.AuthenticationCallback?alt=com.microsoft.aad.adal.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.aad.adal.AuthenticationResult?alt=com.microsoft.aad.adal.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>acquireToken will start interactive flow if needed. It checks the cache to return existing result if not expired. It tries to use refresh token if available. If it fails to get token with refresh token, behavior will depend on options. If <xref uid="com.microsoft.aad.adal.PromptBehavior" data-throw-if-not-resolved="false">PromptBehavior</xref> is AUTO, it will remove this refresh token from cache and fall back on the UI. Default is AUTO. if <xref uid="com.microsoft.aad.adal.PromptBehavior" data-throw-if-not-resolved="false">PromptBehavior</xref> is Always, it will display prompt screen.</p>

    <p></p>
  syntax: public void acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable PromptBehavior prompt, AuthenticationCallback<AuthenticationResult> callback)
  uid: com.microsoft.aad.adal.AuthenticationContext.acquireToken(Activity,String,String,@Nullable String,@Nullable PromptBehavior,AuthenticationCallback<AuthenticationResult>)
- fullName: com.microsoft.aad.adal.AuthenticationContext.acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable String loginHint, @Nullable PromptBehavior prompt, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
  name: acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable String loginHint, @Nullable PromptBehavior prompt, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
  nameWithType: AuthenticationContext.acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable String loginHint, @Nullable PromptBehavior prompt, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
  parameters:
  - description: <p>Calling activity </p>
    name: activity
    type: <xref href="Activity?alt=Activity&text=Activity" data-throw-if-not-resolved="False"/>
  - description: <p>required resource identifier. </p>
    name: resource
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>required client identifier. </p>
    name: clientId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. It will use packagename and provided suffix for this. </p>
    name: redirectUri
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional if validateAuthority == null. It is used for cache and as a loginhint at authentication. </p>
    name: loginHint
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. added as query parameter to authorization url </p>
    name: prompt
    type: '@Nullable <xref href="com.microsoft.aad.adal.PromptBehavior?alt=com.microsoft.aad.adal.PromptBehavior&text=PromptBehavior" data-throw-if-not-resolved="False"/>'
  - description: <p>Optional. added to authorization url </p>
    name: extraQueryParameters
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>required <xref uid="com.microsoft.aad.adal.AuthenticationCallback" data-throw-if-not-resolved="false">AuthenticationCallback</xref> object for async call. </p>
    name: callback
    type: <xref href="com.microsoft.aad.adal.AuthenticationCallback?alt=com.microsoft.aad.adal.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.aad.adal.AuthenticationResult?alt=com.microsoft.aad.adal.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>acquireToken will start interactive flow if needed. It checks the cache to return existing result if not expired. It tries to use refresh token if available. If it fails to get token with refresh token, behavior will depend on options. If promptbehavior is AUTO, it will remove this refresh token from cache and fall back on the UI if activitycontext is not null. Default is AUTO.</p>

    <p></p>
  syntax: public void acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable String loginHint, @Nullable PromptBehavior prompt, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
  uid: com.microsoft.aad.adal.AuthenticationContext.acquireToken(Activity,String,String,@Nullable String,@Nullable String,@Nullable PromptBehavior,@Nullable String,AuthenticationCallback<AuthenticationResult>)
- fullName: com.microsoft.aad.adal.AuthenticationContext.acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable String loginHint, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
  name: acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable String loginHint, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
  nameWithType: AuthenticationContext.acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable String loginHint, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
  parameters:
  - description: <p>Calling activity </p>
    name: activity
    type: <xref href="Activity?alt=Activity&text=Activity" data-throw-if-not-resolved="False"/>
  - description: <p>required resource identifier. </p>
    name: resource
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>required client identifier </p>
    name: clientId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. It will use packagename and provided suffix for this. </p>
    name: redirectUri
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional if validateAuthority == null. This parameter will be used to pre-populate the username field in the authentication form. Please note that the end user can still edit the username field and authenticate as a different user. </p>
    name: loginHint
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. This parameter will be appended as is to the query string in the HTTP authentication request to the authority. The parameter can be null. </p>
    name: extraQueryParameters
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>required <xref uid="com.microsoft.aad.adal.AuthenticationCallback" data-throw-if-not-resolved="false">AuthenticationCallback</xref> object for async call. </p>
    name: callback
    type: <xref href="com.microsoft.aad.adal.AuthenticationCallback?alt=com.microsoft.aad.adal.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.aad.adal.AuthenticationResult?alt=com.microsoft.aad.adal.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>acquireToken will start interactive flow if needed. It checks the cache to return existing result if not expired. It tries to use the refresh token if available. If it fails to get token with refresh token, it will remove this refresh token from cache and fall back on the UI.</p>

    <p></p>
  syntax: public void acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable String loginHint, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
  uid: com.microsoft.aad.adal.AuthenticationContext.acquireToken(Activity,String,String,@Nullable String,@Nullable String,@Nullable String,AuthenticationCallback<AuthenticationResult>)
- fullName: com.microsoft.aad.adal.AuthenticationContext.acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable String loginHint, AuthenticationCallback<AuthenticationResult> callback)
  name: acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable String loginHint, AuthenticationCallback<AuthenticationResult> callback)
  nameWithType: AuthenticationContext.acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable String loginHint, AuthenticationCallback<AuthenticationResult> callback)
  parameters:
  - description: <p>required to launch authentication activity. </p>
    name: activity
    type: <xref href="Activity?alt=Activity&text=Activity" data-throw-if-not-resolved="False"/>
  - description: <p>required resource identifier. </p>
    name: resource
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>required client identifier </p>
    name: clientId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. It will use package name info if not provided. </p>
    name: redirectUri
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>login hint (optional if validateAuthority == false) </p>
    name: loginHint
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>required </p>
    name: callback
    type: <xref href="com.microsoft.aad.adal.AuthenticationCallback?alt=com.microsoft.aad.adal.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.aad.adal.AuthenticationResult?alt=com.microsoft.aad.adal.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>acquireToken will start interactive flow if needed. It checks the cache to return existing result if not expired. It tries to use refresh token if available. If it fails to get token with refresh token, it will remove this refresh token from cache and start authentication.</p>

    <p></p>
  syntax: public void acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable String loginHint, AuthenticationCallback<AuthenticationResult> callback)
  uid: com.microsoft.aad.adal.AuthenticationContext.acquireToken(Activity,String,String,@Nullable String,@Nullable String,AuthenticationCallback<AuthenticationResult>)
- fullName: com.microsoft.aad.adal.AuthenticationContext.acquireToken(final Activity activity, final String resource, final String clientId, @Nullable String redirectUri, @Nullable final String loginHint, @Nullable final PromptBehavior prompt, @Nullable String extraQueryParameters, @Nullable final String claims, final AuthenticationCallback<AuthenticationResult> callback)
  name: acquireToken(final Activity activity, final String resource, final String clientId, @Nullable String redirectUri, @Nullable final String loginHint, @Nullable final PromptBehavior prompt, @Nullable String extraQueryParameters, @Nullable final String claims, final AuthenticationCallback<AuthenticationResult> callback)
  nameWithType: AuthenticationContext.acquireToken(final Activity activity, final String resource, final String clientId, @Nullable String redirectUri, @Nullable final String loginHint, @Nullable final PromptBehavior prompt, @Nullable String extraQueryParameters, @Nullable final String claims, final AuthenticationCallback<AuthenticationResult> callback)
  parameters:
  - description: <p>Calling activity </p>
    name: activity
    type: <xref href="final+Activity?alt=final Activity&text=final+Activity" data-throw-if-not-resolved="False"/>
  - description: <p>required resource identifier. </p>
    name: resource
    type: <xref href="final+String?alt=final String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>required client identifier. </p>
    name: clientId
    type: <xref href="final+String?alt=final String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. It will use packagename and provided suffix for this. </p>
    name: redirectUri
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional if validateAuthority == null. It is used for cache and as a loginhint at authentication. </p>
    name: loginHint
    type: <xref href="%40Nullable+final+String?alt=@Nullable final String&text=%40Nullable+final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. added as query parameter to authorization url </p>
    name: prompt
    type: '@Nullable final <xref href="com.microsoft.aad.adal.PromptBehavior?alt=com.microsoft.aad.adal.PromptBehavior&text=PromptBehavior" data-throw-if-not-resolved="False"/>'
  - description: <p>Optional. added to authorization url </p>
    name: extraQueryParameters
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. The claims challenge returned from middle tier service, will be added as query string to authorize endpoint. </p>
    name: claims
    type: <xref href="%40Nullable+final+String?alt=@Nullable final String&text=%40Nullable+final+String" data-throw-if-not-resolved="False"/>
  - description: <p>required <xref uid="com.microsoft.aad.adal.AuthenticationCallback" data-throw-if-not-resolved="false">AuthenticationCallback</xref> object for async call. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal.AuthenticationCallback?alt=com.microsoft.aad.adal.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.aad.adal.AuthenticationResult?alt=com.microsoft.aad.adal.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>acquireToken will start an interactive auth flow to acquire new tokens with the requested claims. Bypasses token cache if promptbehavior is not AUTO or claims are passed.</p>

    <p></p>
  syntax: public void acquireToken(final Activity activity, final String resource, final String clientId, @Nullable String redirectUri, @Nullable final String loginHint, @Nullable final PromptBehavior prompt, @Nullable String extraQueryParameters, @Nullable final String claims, final AuthenticationCallback<AuthenticationResult> callback)
  uid: com.microsoft.aad.adal.AuthenticationContext.acquireToken(final Activity,final String,final String,@Nullable String,@Nullable final String,@Nullable final PromptBehavior,@Nullable String,@Nullable final String,final AuthenticationCallback<AuthenticationResult>)
- fullName: com.microsoft.aad.adal.AuthenticationContext.acquireToken(final IWindowComponent fragment, final String resource, final String clientId, @Nullable String redirectUri, @Nullable final String loginHint, @Nullable final PromptBehavior prompt, @Nullable String extraQueryParameters, @Nullable final String claims, final AuthenticationCallback<AuthenticationResult> callback)
  name: acquireToken(final IWindowComponent fragment, final String resource, final String clientId, @Nullable String redirectUri, @Nullable final String loginHint, @Nullable final PromptBehavior prompt, @Nullable String extraQueryParameters, @Nullable final String claims, final AuthenticationCallback<AuthenticationResult> callback)
  nameWithType: AuthenticationContext.acquireToken(final IWindowComponent fragment, final String resource, final String clientId, @Nullable String redirectUri, @Nullable final String loginHint, @Nullable final PromptBehavior prompt, @Nullable String extraQueryParameters, @Nullable final String claims, final AuthenticationCallback<AuthenticationResult> callback)
  parameters:
  - description: <p>It accepts both type of fragments. </p>
    name: fragment
    type: final <xref href="com.microsoft.aad.adal.IWindowComponent?alt=com.microsoft.aad.adal.IWindowComponent&text=IWindowComponent" data-throw-if-not-resolved="False"/>
  - description: <p>required resource identifier. </p>
    name: resource
    type: <xref href="final+String?alt=final String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>required client identifier. </p>
    name: clientId
    type: <xref href="final+String?alt=final String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. It will use packagename and provided suffix for this. </p>
    name: redirectUri
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional if validateAuthority == null. It is used for cache and as a loginhint at authentication. </p>
    name: loginHint
    type: <xref href="%40Nullable+final+String?alt=@Nullable final String&text=%40Nullable+final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. added as query parameter to authorization url </p>
    name: prompt
    type: '@Nullable final <xref href="com.microsoft.aad.adal.PromptBehavior?alt=com.microsoft.aad.adal.PromptBehavior&text=PromptBehavior" data-throw-if-not-resolved="False"/>'
  - description: <p>Optional. added to authorization url </p>
    name: extraQueryParameters
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. The claims challenge returned from middle tier service, will be added as query string to authorize endpoint. </p>
    name: claims
    type: <xref href="%40Nullable+final+String?alt=@Nullable final String&text=%40Nullable+final+String" data-throw-if-not-resolved="False"/>
  - description: <p>required <xref uid="com.microsoft.aad.adal.AuthenticationCallback" data-throw-if-not-resolved="false">AuthenticationCallback</xref> object for async call. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal.AuthenticationCallback?alt=com.microsoft.aad.adal.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.aad.adal.AuthenticationResult?alt=com.microsoft.aad.adal.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>acquireToken will start an interactive auth flow to acquire new tokens with the requested claims. Bypasses token cache if promptbehavior is not AUTO or claims are passed.</p>

    <p></p>
  syntax: public void acquireToken(final IWindowComponent fragment, final String resource, final String clientId, @Nullable String redirectUri, @Nullable final String loginHint, @Nullable final PromptBehavior prompt, @Nullable String extraQueryParameters, @Nullable final String claims, final AuthenticationCallback<AuthenticationResult> callback)
  uid: com.microsoft.aad.adal.AuthenticationContext.acquireToken(final IWindowComponent,final String,final String,@Nullable String,@Nullable final String,@Nullable final PromptBehavior,@Nullable String,@Nullable final String,final AuthenticationCallback<AuthenticationResult>)
- fullName: com.microsoft.aad.adal.AuthenticationContext.acquireToken(final String resource, final String clientId, @Nullable String redirectUri, @Nullable final String loginHint, @Nullable final PromptBehavior prompt, @Nullable String extraQueryParameters, @Nullable final String claims, final AuthenticationCallback<AuthenticationResult> callback)
  name: acquireToken(final String resource, final String clientId, @Nullable String redirectUri, @Nullable final String loginHint, @Nullable final PromptBehavior prompt, @Nullable String extraQueryParameters, @Nullable final String claims, final AuthenticationCallback<AuthenticationResult> callback)
  nameWithType: AuthenticationContext.acquireToken(final String resource, final String clientId, @Nullable String redirectUri, @Nullable final String loginHint, @Nullable final PromptBehavior prompt, @Nullable String extraQueryParameters, @Nullable final String claims, final AuthenticationCallback<AuthenticationResult> callback)
  parameters:
  - description: <p>required resource identifier. </p>
    name: resource
    type: <xref href="final+String?alt=final String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>required client identifier. </p>
    name: clientId
    type: <xref href="final+String?alt=final String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. It will use packagename and provided suffix for this. </p>
    name: redirectUri
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional if validateAuthority == null. It is used for cache and as a loginhint at authentication. </p>
    name: loginHint
    type: <xref href="%40Nullable+final+String?alt=@Nullable final String&text=%40Nullable+final+String" data-throw-if-not-resolved="False"/>
  - description: <p>is not AUTO or claims are passed. This overload uses an [AlertDialog](<a href="https://developer.android.com/guide/topics/ui/dialogs">https://developer.android.com/guide/topics/ui/dialogs</a>) when user interaction is required. This overload does not support any flow requiring a [token broker](<a href="https://github.com/AzureAD/azure-activedirectory-library-for-android/wiki/Broker">https://github.com/AzureAD/azure-activedirectory-library-for-android/wiki/Broker</a>).</p>
    name: prompt
    type: '@Nullable final <xref href="com.microsoft.aad.adal.PromptBehavior?alt=com.microsoft.aad.adal.PromptBehavior&text=PromptBehavior" data-throw-if-not-resolved="False"/>'
  - description: <p>Optional. added to authorization url </p>
    name: extraQueryParameters
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. The claims challenge returned from middle tier service, will be added as query string to authorize endpoint. </p>
    name: claims
    type: <xref href="%40Nullable+final+String?alt=@Nullable final String&text=%40Nullable+final+String" data-throw-if-not-resolved="False"/>
  - description: <p>required <xref uid="com.microsoft.aad.adal.AuthenticationCallback" data-throw-if-not-resolved="false">AuthenticationCallback</xref> object for async call. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal.AuthenticationCallback?alt=com.microsoft.aad.adal.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.aad.adal.AuthenticationResult?alt=com.microsoft.aad.adal.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>acquireToken will authorize an end user to call the specified resource. The access token returned from the STS will be sent to the <xref uid="com.microsoft.aad.adal.AuthenticationCallback" data-throw-if-not-resolved="false">AuthenticationCallback</xref> and can be used to call the specified protected resource. Bypasses token cache if </p>
  syntax: public void acquireToken(final String resource, final String clientId, @Nullable String redirectUri, @Nullable final String loginHint, @Nullable final PromptBehavior prompt, @Nullable String extraQueryParameters, @Nullable final String claims, final AuthenticationCallback<AuthenticationResult> callback)
  uid: com.microsoft.aad.adal.AuthenticationContext.acquireToken(final String,final String,@Nullable String,@Nullable final String,@Nullable final PromptBehavior,@Nullable String,@Nullable final String,final AuthenticationCallback<AuthenticationResult>)
- fullName: com.microsoft.aad.adal.AuthenticationContext.acquireToken(IWindowComponent fragment, String resource, String clientId, @Nullable String redirectUri, @Nullable String loginHint, @Nullable PromptBehavior prompt, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
  name: acquireToken(IWindowComponent fragment, String resource, String clientId, @Nullable String redirectUri, @Nullable String loginHint, @Nullable PromptBehavior prompt, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
  nameWithType: AuthenticationContext.acquireToken(IWindowComponent fragment, String resource, String clientId, @Nullable String redirectUri, @Nullable String loginHint, @Nullable PromptBehavior prompt, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
  parameters:
  - description: <p>It accepts both type of fragments. </p>
    name: fragment
    type: <xref href="com.microsoft.aad.adal.IWindowComponent?alt=com.microsoft.aad.adal.IWindowComponent&text=IWindowComponent" data-throw-if-not-resolved="False"/>
  - description: <p>required resource identifier. </p>
    name: resource
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>required client identifier. </p>
    name: clientId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. It will use packagename and provided suffix for this. </p>
    name: redirectUri
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional if validateAuthority == null. It is used for cache and as a loginhint at authentication. </p>
    name: loginHint
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. added as query parameter to authorization url </p>
    name: prompt
    type: '@Nullable <xref href="com.microsoft.aad.adal.PromptBehavior?alt=com.microsoft.aad.adal.PromptBehavior&text=PromptBehavior" data-throw-if-not-resolved="False"/>'
  - description: <p>Optional. added to authorization url </p>
    name: extraQueryParameters
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>required <xref uid="com.microsoft.aad.adal.AuthenticationCallback" data-throw-if-not-resolved="false">AuthenticationCallback</xref> object for async call. </p>
    name: callback
    type: <xref href="com.microsoft.aad.adal.AuthenticationCallback?alt=com.microsoft.aad.adal.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.aad.adal.AuthenticationResult?alt=com.microsoft.aad.adal.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>It will start interactive flow if needed. It checks the cache to return existing result if not expired. It tries to use refresh token if available. If it fails to get token with refresh token, behavior will depend on options. If promptbehavior is AUTO, it will remove this refresh token from cache and fall back on the UI. Default is AUTO.</p>

    <p></p>
  syntax: public void acquireToken(IWindowComponent fragment, String resource, String clientId, @Nullable String redirectUri, @Nullable String loginHint, @Nullable PromptBehavior prompt, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
  uid: com.microsoft.aad.adal.AuthenticationContext.acquireToken(IWindowComponent,String,String,@Nullable String,@Nullable String,@Nullable PromptBehavior,@Nullable String,AuthenticationCallback<AuthenticationResult>)
- fullName: com.microsoft.aad.adal.AuthenticationContext.acquireToken(String resource, String clientId, @Nullable String redirectUri, @Nullable String loginHint, @Nullable PromptBehavior prompt, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
  name: acquireToken(String resource, String clientId, @Nullable String redirectUri, @Nullable String loginHint, @Nullable PromptBehavior prompt, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
  nameWithType: AuthenticationContext.acquireToken(String resource, String clientId, @Nullable String redirectUri, @Nullable String loginHint, @Nullable PromptBehavior prompt, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
  parameters:
  - description: <p>required resource identifier. </p>
    name: resource
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>required client identifier. </p>
    name: clientId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. It will use packagename and provided suffix for this. </p>
    name: redirectUri
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional if validateAuthority == null. It is used for cache and as a loginhint at authentication. </p>
    name: loginHint
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. added as query parameter to authorization url </p>
    name: prompt
    type: '@Nullable <xref href="com.microsoft.aad.adal.PromptBehavior?alt=com.microsoft.aad.adal.PromptBehavior&text=PromptBehavior" data-throw-if-not-resolved="False"/>'
  - description: <p>Optional. added to authorization url </p>
    name: extraQueryParameters
    type: <xref href="%40Nullable+String?alt=@Nullable String&text=%40Nullable+String" data-throw-if-not-resolved="False"/>
  - description: <p>required <xref uid="com.microsoft.aad.adal.AuthenticationCallback" data-throw-if-not-resolved="false">AuthenticationCallback</xref> object for async call. </p>
    name: callback
    type: <xref href="com.microsoft.aad.adal.AuthenticationCallback?alt=com.microsoft.aad.adal.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.aad.adal.AuthenticationResult?alt=com.microsoft.aad.adal.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>acquireToken will authorize an end user to call the specified resource. The access token returned from the STS will be sent to the <xref uid="com.microsoft.aad.adal.AuthenticationCallback" data-throw-if-not-resolved="false">AuthenticationCallback</xref> and can be used to call the specified protected resource. By default, acquireToken will attempt to fulfill the request silently, and perform an interactive login if needed or explicitly specified in the request. This overload uses an [AlertDialog](<a href="https://developer.android.com/guide/topics/ui/dialogs">https://developer.android.com/guide/topics/ui/dialogs</a>) when user interaction is required. This overload does not support any flow requiring a [token broker](<a href="https://github.com/AzureAD/azure-activedirectory-library-for-android/wiki/Broker">https://github.com/AzureAD/azure-activedirectory-library-for-android/wiki/Broker</a>). </p>
  syntax: public void acquireToken(String resource, String clientId, @Nullable String redirectUri, @Nullable String loginHint, @Nullable PromptBehavior prompt, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
  uid: com.microsoft.aad.adal.AuthenticationContext.acquireToken(String,String,@Nullable String,@Nullable String,@Nullable PromptBehavior,@Nullable String,AuthenticationCallback<AuthenticationResult>)
uid: com.microsoft.aad.adal.AuthenticationContext.acquireToken*
fullName: com.microsoft.aad.adal.AuthenticationContext.acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable PromptBehavior prompt, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
name: acquireToken(Activity activity, String resource, String clientId, @Nullable String redirectUri, @Nullable PromptBehavior prompt, @Nullable String extraQueryParameters, AuthenticationCallback<AuthenticationResult> callback)
package: com.microsoft.aad.adal
metadata: {}
