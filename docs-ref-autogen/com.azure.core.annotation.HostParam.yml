### YamlMime:ManagedReference
items:
- uid: com.azure.core.annotation.HostParam
  id: HostParam
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.annotation
  children:
  - com.azure.core.annotation.HostParam.encoded()
  - com.azure.core.annotation.HostParam.value()
  langs:
  - java
  name: HostParam
  nameWithType: HostParam
  fullName: com.azure.core.annotation.HostParam
  type: Interface
  package: com.azure.core.annotation
  summary: >-
    Annotation to annotate replacement of parameterized segments in a dynamic <xref uid="com.azure.core.annotation.Host" data-throw-if-not-resolved="false">Host</xref>.


    You provide the value, which should be the same (case sensitive) with the parameterized segments in '\{\}' in the host, unless there's only one parameterized segment, then you can leave the value empty. This is extremely useful when the designer of the API interface doesn't know about the named parameters in the host.


    **Example 1: Named parameters**


    ```java

    @Host("{accountName}.{suffix}")
      interface DatalakeService {
       @GET("jobs/{jobIdentity}")
        Job getJob(@HostParam("accountName") String accountName, @HostParam("suffix") String suffix, @PathParam
        ("jobIdentity") jobIdentity);
      }
    ```


    **Example 2: Unnamed parameter**


    ```java

    @Host(KEY_VAULT_ENDPOINT)
      interface KeyVaultService {
       @GET("secrets/{secretName}")
        Secret get(@HostParam String vaultName, @PathParam("secretName") String secretName);
      }
    ```
  syntax:
    content: public interface HostParam implements Annotation
  implements:
  - java.lang.annotation.Annotation
- uid: com.azure.core.annotation.HostParam.encoded()
  id: encoded()
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.annotation.HostParam
  langs:
  - java
  name: encoded()
  nameWithType: HostParam.encoded()
  fullName: com.azure.core.annotation.HostParam.encoded()
  overload: com.azure.core.annotation.HostParam.encoded*
  type: Method
  package: com.azure.core.annotation
  summary: A value true for this argument indicates that value of <xref uid="com.azure.core.annotation.HostParam.value()" data-throw-if-not-resolved="false">HostParam#value()</xref> is already encoded hence engine should not encode it, by default value will be encoded.
  syntax:
    content: public abstract boolean encoded()
    return:
      type: boolean
      description: Whether or not this argument is already encoded.
- uid: com.azure.core.annotation.HostParam.value()
  id: value()
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.annotation.HostParam
  langs:
  - java
  name: value()
  nameWithType: HostParam.value()
  fullName: com.azure.core.annotation.HostParam.value()
  overload: com.azure.core.annotation.HostParam.value*
  type: Method
  package: com.azure.core.annotation
  summary: The name of the variable in the endpoint uri template which will be replaced with the value of the parameter annotated with this annotation.
  syntax:
    content: public abstract String value()
    return:
      type: java.lang.String
      description: >-
        The name of the variable in the endpoint uri template which will be replaced with the
             value of the parameter annotated with this annotation.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.core.annotation.HostParam.value*
  name: value
  nameWithType: HostParam.value
  fullName: com.azure.core.annotation.HostParam.value
  package: com.azure.core.annotation
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.core.annotation.HostParam.encoded*
  name: encoded
  nameWithType: HostParam.encoded
  fullName: com.azure.core.annotation.HostParam.encoded
  package: com.azure.core.annotation
- uid: java.lang.annotation.Annotation
  name: Annotation
  nameWithType: Annotation
  fullName: java.lang.annotation.Annotation
