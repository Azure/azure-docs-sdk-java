### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice"
fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice"
name: "DeviceTwinDevice"
nameWithType: "DeviceTwinDevice"
summary: "Represent the twin on IoT hub."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class DeviceTwinDevice"
constructors:
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.DeviceTwinDevice()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.DeviceTwinDevice()"
  name: "DeviceTwinDevice()"
  nameWithType: "DeviceTwinDevice.DeviceTwinDevice()"
  summary: "Constructor to create an instance for a device."
  syntax: "public DeviceTwinDevice()"
  desc: "Constructor to create an instance for a device."
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.DeviceTwinDevice(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.DeviceTwinDevice(String deviceId)"
  name: "DeviceTwinDevice(String deviceId)"
  nameWithType: "DeviceTwinDevice.DeviceTwinDevice(String deviceId)"
  summary: "Constructor to create instance for a device."
  parameters:
  - description: "Id for this device."
    name: "deviceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DeviceTwinDevice(String deviceId)"
  exceptions:
  - description: "This exception is thrown if the device Id is <code>null</code> or empty"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Constructor to create instance for a device."
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.DeviceTwinDevice(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.DeviceTwinDevice(String deviceId, String moduleId)"
  name: "DeviceTwinDevice(String deviceId, String moduleId)"
  nameWithType: "DeviceTwinDevice.DeviceTwinDevice(String deviceId, String moduleId)"
  summary: "Constructor to create an instance for a module."
  parameters:
  - description: "Id for this device."
    name: "deviceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Id for this device's module."
    name: "moduleId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DeviceTwinDevice(String deviceId, String moduleId)"
  exceptions:
  - description: "This exception is thrown if the device id is <code>null</code> or empty."
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Constructor to create an instance for a module."
methods:
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.clearDesiredProperties()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.clearDesiredProperties()"
  name: "clearDesiredProperties()"
  nameWithType: "DeviceTwinDevice.clearDesiredProperties()"
  summary: "Clears the desired properties set so far."
  syntax: "public void clearDesiredProperties()"
  desc: "Clears the desired properties set so far."
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.clearTags()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.clearTags()"
  name: "clearTags()"
  nameWithType: "DeviceTwinDevice.clearTags()"
  summary: "Clears the tags set so far."
  syntax: "public void clearTags()"
  desc: "Clears the tags set so far."
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.clearTwin()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.clearTwin()"
  name: "clearTwin()"
  nameWithType: "DeviceTwinDevice.clearTwin()"
  summary: "Clear tags and desired properties set so far."
  syntax: "public void clearTwin()"
  desc: "Clear tags and desired properties set so far."
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.desiredPropertiesToString()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.desiredPropertiesToString()"
  name: "desiredPropertiesToString()"
  nameWithType: "DeviceTwinDevice.desiredPropertiesToString()"
  summary: "String representation for this device containing desired properties."
  syntax: "public String desiredPropertiesToString()"
  desc: "String representation for this device containing desired properties."
  returns:
    description: "String representation for this device desired properties."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getCapabilities()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getCapabilities()"
  name: "getCapabilities()"
  nameWithType: "DeviceTwinDevice.getCapabilities()"
  summary: "Getter for capabilities."
  syntax: "public DeviceCapabilities getCapabilities()"
  desc: "Getter for capabilities."
  returns:
    description: "The value of capabilities, which can be <code>null</code>."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.DeviceCapabilities?alt=com.microsoft.azure.sdk.iot.deps.twin.DeviceCapabilities&text=DeviceCapabilities\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getConfigurations()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getConfigurations()"
  name: "getConfigurations()"
  nameWithType: "DeviceTwinDevice.getConfigurations()"
  summary: "Getter for configuration properties."
  syntax: "public Map<String,ConfigurationInfo> getConfigurations()"
  desc: "Getter for configuration properties."
  returns:
    description: "The configuration properties which can be <code>null</code>."
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.ConfigurationInfo?alt=com.microsoft.azure.sdk.iot.deps.twin.ConfigurationInfo&text=ConfigurationInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getConnectionState()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getConnectionState()"
  name: "getConnectionState()"
  nameWithType: "DeviceTwinDevice.getConnectionState()"
  syntax: "public String getConnectionState()"
  returns:
    description: "Gets the connection state as last reported by the service."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getDesiredMap()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getDesiredMap()"
  name: "getDesiredMap()"
  nameWithType: "DeviceTwinDevice.getDesiredMap()"
  summary: "Getter for desired properties."
  modifiers:
  - "protected"
  syntax: "protected TwinCollection getDesiredMap()"
  desc: "Getter for desired properties."
  returns:
    description: "A map of validated key/value pairs for desired properties."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.deps.twin.TwinCollection&text=TwinCollection\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getDesiredProperties()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getDesiredProperties()"
  name: "getDesiredProperties()"
  nameWithType: "DeviceTwinDevice.getDesiredProperties()"
  summary: "Getter to get the desired properties setter."
  syntax: "public Set<Pair> getDesiredProperties()"
  desc: "Getter to get the desired properties setter."
  returns:
    description: "A set of desired property pairs."
    type: "<xref href=\"java.util.Set?alt=java.util.Set&text=Set\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.service.devicetwin.Pair?alt=com.microsoft.azure.sdk.iot.service.devicetwin.Pair&text=Pair\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getDesiredPropertiesVersion()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getDesiredPropertiesVersion()"
  name: "getDesiredPropertiesVersion()"
  nameWithType: "DeviceTwinDevice.getDesiredPropertiesVersion()"
  summary: "Getter for the desired properties version."
  syntax: "public Integer getDesiredPropertiesVersion()"
  desc: "Getter for the desired properties version."
  returns:
    description: "The <code>Integer</code> with the desired properties collection version."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getDeviceId()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getDeviceId()"
  name: "getDeviceId()"
  nameWithType: "DeviceTwinDevice.getDeviceId()"
  summary: "Getter to get the device Id."
  syntax: "public String getDeviceId()"
  desc: "Getter to get the device Id."
  returns:
    description: "The Id for this device."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getDeviceScope()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getDeviceScope()"
  name: "getDeviceScope()"
  nameWithType: "DeviceTwinDevice.getDeviceScope()"
  summary: "The scope of the device."
  syntax: "public String getDeviceScope()"
  desc: "The scope of the device. Auto-generated and immutable for edge devices and modifiable in leaf devices to create child/parent relationship.\n\nFor more information, see [this document][].\n\n\n[this document]: https://docs.microsoft.com/azure/iot-edge/iot-edge-as-gateway?view=iotedge-2020-11#parent-and-child-relationships"
  returns:
    description: "The scope of the device. Auto-generated and immutable for edge devices and modifiable in leaf devices to\n create child/parent relationship."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getETag()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getETag()"
  name: "getETag()"
  nameWithType: "DeviceTwinDevice.getETag()"
  summary: "Getter for the ETag."
  syntax: "public String getETag()"
  desc: "Getter for the ETag."
  returns:
    description: "The stored ETag. It will be <code>null</code> if not set."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getModelId()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getModelId()"
  name: "getModelId()"
  nameWithType: "DeviceTwinDevice.getModelId()"
  summary: "Getter for a model Id."
  syntax: "public String getModelId()"
  desc: "Getter for a model Id."
  returns:
    description: "The DTDL model Id of the device.\n The value will be <code>null</code> for a non-PnP device.\n The value will be <code>null</code> for a PnP device until the device connects and registers with a model Id."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getModuleId()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getModuleId()"
  name: "getModuleId()"
  nameWithType: "DeviceTwinDevice.getModuleId()"
  summary: "Getter to get the module Id."
  syntax: "public String getModuleId()"
  desc: "Getter to get the module Id."
  returns:
    description: "The Id for this module."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getParentScopes()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getParentScopes()"
  name: "getParentScopes()"
  nameWithType: "DeviceTwinDevice.getParentScopes()"
  summary: "The scopes of the upper level edge devices if applicable."
  syntax: "public List<String> getParentScopes()"
  desc: "The scopes of the upper level edge devices if applicable. Only available for edge devices.\n\nFor more information, see [this document][].\n\n\n[this document]: https://docs.microsoft.com/azure/iot-edge/iot-edge-as-gateway?view=iotedge-2020-11#parent-and-child-relationships"
  returns:
    description: "The parent scopes edge and leaf devices, if applicable."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getReportedMap()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getReportedMap()"
  name: "getReportedMap()"
  nameWithType: "DeviceTwinDevice.getReportedMap()"
  summary: "Getter for reported properties."
  modifiers:
  - "protected"
  syntax: "protected TwinCollection getReportedMap()"
  desc: "Getter for reported properties."
  returns:
    description: "A map of validated key/value pairs for reported properties."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.deps.twin.TwinCollection&text=TwinCollection\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getReportedProperties()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getReportedProperties()"
  name: "getReportedProperties()"
  nameWithType: "DeviceTwinDevice.getReportedProperties()"
  summary: "Getter to get reported properties setter."
  syntax: "public Set<Pair> getReportedProperties()"
  desc: "Getter to get reported properties setter."
  returns:
    description: "A set of reported property pairs."
    type: "<xref href=\"java.util.Set?alt=java.util.Set&text=Set\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.service.devicetwin.Pair?alt=com.microsoft.azure.sdk.iot.service.devicetwin.Pair&text=Pair\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getReportedPropertiesVersion()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getReportedPropertiesVersion()"
  name: "getReportedPropertiesVersion()"
  nameWithType: "DeviceTwinDevice.getReportedPropertiesVersion()"
  summary: "Getter for the reported properties version."
  syntax: "public Integer getReportedPropertiesVersion()"
  desc: "Getter for the reported properties version."
  returns:
    description: "The <code>Integer</code> with the desired properties collection version."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getTags()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getTags()"
  name: "getTags()"
  nameWithType: "DeviceTwinDevice.getTags()"
  summary: "Getter for the twin tags."
  syntax: "public Set<Pair> getTags()"
  desc: "Getter for the twin tags."
  returns:
    description: "A set of tag key/value pairs."
    type: "<xref href=\"java.util.Set?alt=java.util.Set&text=Set\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.service.devicetwin.Pair?alt=com.microsoft.azure.sdk.iot.service.devicetwin.Pair&text=Pair\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getTagsMap()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getTagsMap()"
  name: "getTagsMap()"
  nameWithType: "DeviceTwinDevice.getTagsMap()"
  summary: "Getter for tags."
  modifiers:
  - "protected"
  syntax: "protected TwinCollection getTagsMap()"
  desc: "Getter for tags."
  returns:
    description: "A map of validated key/value pairs for tags."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.deps.twin.TwinCollection&text=TwinCollection\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getTagsVersion()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getTagsVersion()"
  name: "getTagsVersion()"
  nameWithType: "DeviceTwinDevice.getTagsVersion()"
  summary: "Getter for the tag version."
  syntax: "public Integer getTagsVersion()"
  desc: "Getter for the tag version."
  returns:
    description: "The <code>Integer</code> with the tags collection version."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getVersion()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.getVersion()"
  name: "getVersion()"
  nameWithType: "DeviceTwinDevice.getVersion()"
  summary: "Getter for the twin version."
  syntax: "public Integer getVersion()"
  desc: "Getter for the twin version."
  returns:
    description: "The stored version. It can be <code>null</code>."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.reportedPropertiesToString()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.reportedPropertiesToString()"
  name: "reportedPropertiesToString()"
  nameWithType: "DeviceTwinDevice.reportedPropertiesToString()"
  summary: "String representation for this device containing reported properties.'"
  syntax: "public String reportedPropertiesToString()"
  desc: "String representation for this device containing reported properties.'"
  returns:
    description: "String representation for this device reported properties."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setCapabilities(com.microsoft.azure.sdk.iot.deps.twin.DeviceCapabilities)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setCapabilities(DeviceCapabilities capabilities)"
  name: "setCapabilities(DeviceCapabilities capabilities)"
  nameWithType: "DeviceTwinDevice.setCapabilities(DeviceCapabilities capabilities)"
  summary: "Setter for capabilities."
  modifiers:
  - "protected"
  parameters:
  - description: "The value of capabilities."
    name: "capabilities"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.DeviceCapabilities?alt=com.microsoft.azure.sdk.iot.deps.twin.DeviceCapabilities&text=DeviceCapabilities\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected void setCapabilities(DeviceCapabilities capabilities)"
  desc: "Setter for capabilities."
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setConfigurations(java.util.Map<java.lang.String,com.microsoft.azure.sdk.iot.deps.twin.ConfigurationInfo>)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setConfigurations(Map<String,ConfigurationInfo> configurations)"
  name: "setConfigurations(Map<String,ConfigurationInfo> configurations)"
  nameWithType: "DeviceTwinDevice.setConfigurations(Map<String,ConfigurationInfo> configurations)"
  summary: "Setter for configuration properties."
  modifiers:
  - "protected"
  parameters:
  - description: "Is the configuration properties."
    name: "configurations"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.ConfigurationInfo?alt=com.microsoft.azure.sdk.iot.deps.twin.ConfigurationInfo&text=ConfigurationInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "protected void setConfigurations(Map<String,ConfigurationInfo> configurations)"
  desc: "Setter for configuration properties."
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setConnectionState(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setConnectionState(String connectionState)"
  name: "setConnectionState(String connectionState)"
  nameWithType: "DeviceTwinDevice.setConnectionState(String connectionState)"
  summary: "Sets the connection state of the device."
  modifiers:
  - "protected"
  parameters:
  - description: "The state to set."
    name: "connectionState"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected void setConnectionState(String connectionState)"
  desc: "Sets the connection state of the device."
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setDesiredProperties(com.microsoft.azure.sdk.iot.deps.twin.TwinCollection)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setDesiredProperties(TwinCollection desiredProperties)"
  name: "setDesiredProperties(TwinCollection desiredProperties)"
  nameWithType: "DeviceTwinDevice.setDesiredProperties(TwinCollection desiredProperties)"
  summary: "Setter for the desired properties."
  modifiers:
  - "protected"
  parameters:
  - description: "A map of validated key/value pairs for desired properties."
    name: "desiredProperties"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.deps.twin.TwinCollection&text=TwinCollection\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected void setDesiredProperties(TwinCollection desiredProperties)"
  desc: "Setter for the desired properties."
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setDesiredProperties(java.util.Set<com.microsoft.azure.sdk.iot.service.devicetwin.Pair>)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setDesiredProperties(Set<Pair> desiredProperties)"
  name: "setDesiredProperties(Set<Pair> desiredProperties)"
  nameWithType: "DeviceTwinDevice.setDesiredProperties(Set<Pair> desiredProperties)"
  summary: "Setter for the desired properties."
  parameters:
  - description: "A set of key/value pairs for desired properties."
    name: "desiredProperties"
    type: "<xref href=\"java.util.Set?alt=java.util.Set&text=Set\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.service.devicetwin.Pair?alt=com.microsoft.azure.sdk.iot.service.devicetwin.Pair&text=Pair\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void setDesiredProperties(Set<Pair> desiredProperties)"
  exceptions:
  - description: "This exception is thrown if the set is <code>null</code>."
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Setter for the desired properties."
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setDeviceScope(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setDeviceScope(String deviceScope)"
  name: "setDeviceScope(String deviceScope)"
  nameWithType: "DeviceTwinDevice.setDeviceScope(String deviceScope)"
  summary: "Sets the device scope."
  modifiers:
  - "protected"
  parameters:
  - description: "The device scope to set."
    name: "deviceScope"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected void setDeviceScope(String deviceScope)"
  desc: "Sets the device scope."
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setETag(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setETag(String eTag)"
  name: "setETag(String eTag)"
  nameWithType: "DeviceTwinDevice.setETag(String eTag)"
  summary: "Setter for ETag."
  parameters:
  - description: "The value of the ETag."
    name: "eTag"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setETag(String eTag)"
  exceptions:
  - description: "If the provided etag is <code>null</code> or empty."
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Setter for ETag."
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setModelId(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setModelId(String modelId)"
  name: "setModelId(String modelId)"
  nameWithType: "DeviceTwinDevice.setModelId(String modelId)"
  summary: "Setter for a model Id"
  parameters:
  - description: "is the DTDL model Id of the device."
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setModelId(String modelId)"
  desc: "Setter for a model Id"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setParentScopes(java.util.List<java.lang.String>)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setParentScopes(List<String> parentScopes)"
  name: "setParentScopes(List<String> parentScopes)"
  nameWithType: "DeviceTwinDevice.setParentScopes(List<String> parentScopes)"
  summary: "Sets the parent scopes."
  modifiers:
  - "protected"
  parameters:
  - description: "The parent scopes."
    name: "parentScopes"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "protected void setParentScopes(List<String> parentScopes)"
  desc: "Sets the parent scopes."
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setReportedProperties(com.microsoft.azure.sdk.iot.deps.twin.TwinCollection)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setReportedProperties(TwinCollection reportedProperties)"
  name: "setReportedProperties(TwinCollection reportedProperties)"
  nameWithType: "DeviceTwinDevice.setReportedProperties(TwinCollection reportedProperties)"
  summary: "Setter for the reported properties."
  modifiers:
  - "protected"
  parameters:
  - description: "A map of validated key/value pairs for reported properties."
    name: "reportedProperties"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.deps.twin.TwinCollection&text=TwinCollection\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected void setReportedProperties(TwinCollection reportedProperties)"
  desc: "Setter for the reported properties."
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setTags(com.microsoft.azure.sdk.iot.deps.twin.TwinCollection)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setTags(TwinCollection tag)"
  name: "setTags(TwinCollection tag)"
  nameWithType: "DeviceTwinDevice.setTags(TwinCollection tag)"
  summary: "Setter for tags."
  modifiers:
  - "protected"
  parameters:
  - description: "A map of validated key/value pairs for tags."
    name: "tag"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.deps.twin.TwinCollection&text=TwinCollection\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected void setTags(TwinCollection tag)"
  desc: "Setter for tags."
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setTags(java.util.Set<com.microsoft.azure.sdk.iot.service.devicetwin.Pair>)"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.setTags(Set<Pair> tags)"
  name: "setTags(Set<Pair> tags)"
  nameWithType: "DeviceTwinDevice.setTags(Set<Pair> tags)"
  summary: "Setter for twin tags."
  parameters:
  - description: "A set of tag key/value pairs."
    name: "tags"
    type: "<xref href=\"java.util.Set?alt=java.util.Set&text=Set\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.service.devicetwin.Pair?alt=com.microsoft.azure.sdk.iot.service.devicetwin.Pair&text=Pair\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void setTags(Set<Pair> tags)"
  exceptions:
  - description: "This exception is thrown if the set tags is <code>null</code>."
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Setter for twin tags."
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.tagsToString()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.tagsToString()"
  name: "tagsToString()"
  nameWithType: "DeviceTwinDevice.tagsToString()"
  summary: "String representation for this device containing tags."
  syntax: "public String tagsToString()"
  desc: "String representation for this device containing tags."
  returns:
    description: "String representation for this device tags."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.toString()"
  fullName: "com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice.toString()"
  name: "toString()"
  nameWithType: "DeviceTwinDevice.toString()"
  summary: "String representation for this device containing device Id, tags, desired and reported properties."
  overridden: "java.lang.Object.toString()"
  syntax: "public String toString()"
  desc: "String representation for this device containing device Id, tags, desired and reported properties."
  returns:
    description: "String representation for this device."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Represent the twin on IoT hub. Implementing constructors and serialization functionality.\n\nThe object is a representation of a module twin if and only if the moduleId is set."
metadata: {}
package: "com.microsoft.azure.sdk.iot.service.devicetwin"
artifact: com.microsoft.azure.sdk.iot:iot-service-client:1.30.0
