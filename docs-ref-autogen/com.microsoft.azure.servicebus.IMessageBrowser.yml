### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.servicebus.IMessageBrowser
  id: IMessageBrowser
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus
  children:
  - com.microsoft.azure.servicebus.IMessageBrowser.peek()
  - com.microsoft.azure.servicebus.IMessageBrowser.peek(long)
  - com.microsoft.azure.servicebus.IMessageBrowser.peekAsync()
  - com.microsoft.azure.servicebus.IMessageBrowser.peekAsync(long)
  - com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(int)
  - com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(long,int)
  - com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(int)
  - com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(long,int)
  langs:
  - java
  name: IMessageBrowser
  nameWithType: IMessageBrowser
  fullName: com.microsoft.azure.servicebus.IMessageBrowser
  type: Interface
  package: com.microsoft.azure.servicebus
  summary: Represents a message browser that can browse messages from Azure Service Bus.
  syntax:
    content: public interface IMessageBrowser
- uid: com.microsoft.azure.servicebus.IMessageBrowser.peek()
  id: peek()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageBrowser
  langs:
  - java
  name: peek()
  nameWithType: IMessageBrowser.peek()
  fullName: com.microsoft.azure.servicebus.IMessageBrowser.peek()
  overload: com.microsoft.azure.servicebus.IMessageBrowser.peek*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: reads next the active message without changing the state of the receiver or the message source. The first call to <xref uid="com.microsoft.azure.servicebus.IMessageBrowser.peek()" data-throw-if-not-resolved="false">IMessageBrowser#peek()</xref> fetches the first active message for this receiver. Each subsequent call fetches the subsequent message in the entity.
  syntax:
    content: public abstract IMessage peek()
    return:
      type: com.microsoft.azure.servicebus.IMessage
      description: <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> peeked
  exceptions:
  - type: java.lang.InterruptedException
    description: if the current thread was interrupted while waiting
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
    description: if the current thread was interrupted while waiting
- uid: com.microsoft.azure.servicebus.IMessageBrowser.peek(long)
  id: peek(long)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageBrowser
  langs:
  - java
  name: peek(long fromSequenceNumber)
  nameWithType: IMessageBrowser.peek(long fromSequenceNumber)
  fullName: com.microsoft.azure.servicebus.IMessageBrowser.peek(long fromSequenceNumber)
  overload: com.microsoft.azure.servicebus.IMessageBrowser.peek*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Reads next the active message without changing the state of the receiver or the message source.
  syntax:
    content: public abstract IMessage peek(long fromSequenceNumber)
    parameters:
    - id: fromSequenceNumber
      type: long
      description: The sequence number from where to read the message.
    return:
      type: com.microsoft.azure.servicebus.IMessage
      description: <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> peeked
  exceptions:
  - type: java.lang.InterruptedException
    description: if the current thread was interrupted while waiting
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
    description: if the current thread was interrupted while waiting
- uid: com.microsoft.azure.servicebus.IMessageBrowser.peekAsync()
  id: peekAsync()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageBrowser
  langs:
  - java
  name: peekAsync()
  nameWithType: IMessageBrowser.peekAsync()
  fullName: com.microsoft.azure.servicebus.IMessageBrowser.peekAsync()
  overload: com.microsoft.azure.servicebus.IMessageBrowser.peekAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously reads the active messages without changing the state of the receiver or the message source.
  syntax:
    content: public abstract CompletableFuture<IMessage> peekAsync()
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.servicebus.IMessage>
      description: <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> peeked
- uid: com.microsoft.azure.servicebus.IMessageBrowser.peekAsync(long)
  id: peekAsync(long)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageBrowser
  langs:
  - java
  name: peekAsync(long fromSequenceNumber)
  nameWithType: IMessageBrowser.peekAsync(long fromSequenceNumber)
  fullName: com.microsoft.azure.servicebus.IMessageBrowser.peekAsync(long fromSequenceNumber)
  overload: com.microsoft.azure.servicebus.IMessageBrowser.peekAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously reads next the active message without changing the state of the receiver or the message source.
  syntax:
    content: public abstract CompletableFuture<IMessage> peekAsync(long fromSequenceNumber)
    parameters:
    - id: fromSequenceNumber
      type: long
      description: The sequence number from where to read the message.
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.servicebus.IMessage>
      description: CompletableFuture that returns <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> peeked.
- uid: com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(int)
  id: peekBatch(int)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageBrowser
  langs:
  - java
  name: peekBatch(int messageCount)
  nameWithType: IMessageBrowser.peekBatch(int messageCount)
  fullName: com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(int messageCount)
  overload: com.microsoft.azure.servicebus.IMessageBrowser.peekBatch*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Reads next batch of the active messages without changing the state of the receiver or the message source.
  syntax:
    content: public abstract Collection<IMessage> peekBatch(int messageCount)
    parameters:
    - id: messageCount
      type: int
      description: The number of messages.
    return:
      type: java.util.Collection<com.microsoft.azure.servicebus.IMessage>
      description: Batch of <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> peeked
  exceptions:
  - type: java.lang.InterruptedException
    description: if the current thread was interrupted while waiting
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
    description: if the current thread was interrupted while waiting
- uid: com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(long,int)
  id: peekBatch(long,int)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageBrowser
  langs:
  - java
  name: peekBatch(long fromSequenceNumber, int messageCount)
  nameWithType: IMessageBrowser.peekBatch(long fromSequenceNumber, int messageCount)
  fullName: com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(long fromSequenceNumber, int messageCount)
  overload: com.microsoft.azure.servicebus.IMessageBrowser.peekBatch*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Reads next batch of the active messages without changing the state of the receiver or the message source.
  syntax:
    content: public abstract Collection<IMessage> peekBatch(long fromSequenceNumber, int messageCount)
    parameters:
    - id: fromSequenceNumber
      type: long
      description: The sequence number from where to read the message.
    - id: messageCount
      type: int
      description: The number of messages.
    return:
      type: java.util.Collection<com.microsoft.azure.servicebus.IMessage>
      description: Batch of <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> peeked
  exceptions:
  - type: java.lang.InterruptedException
    description: if the current thread was interrupted while waiting
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
    description: if the current thread was interrupted while waiting
- uid: com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(int)
  id: peekBatchAsync(int)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageBrowser
  langs:
  - java
  name: peekBatchAsync(int messageCount)
  nameWithType: IMessageBrowser.peekBatchAsync(int messageCount)
  fullName: com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(int messageCount)
  overload: com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously reads the next batch of active messages without changing the state of the receiver or the message source.
  syntax:
    content: public abstract CompletableFuture<Collection<IMessage>> peekBatchAsync(int messageCount)
    parameters:
    - id: messageCount
      type: int
      description: The number of messages.
    return:
      type: java.util.concurrent.CompletableFuture<java.util.Collection<com.microsoft.azure.servicebus.IMessage>>
      description: CompletableFuture that returns batch of <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> peeked.
- uid: com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(long,int)
  id: peekBatchAsync(long,int)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.IMessageBrowser
  langs:
  - java
  name: peekBatchAsync(long fromSequenceNumber, int messageCount)
  nameWithType: IMessageBrowser.peekBatchAsync(long fromSequenceNumber, int messageCount)
  fullName: com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(long fromSequenceNumber, int messageCount)
  overload: com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously reads the next batch of active messages without changing the state of the receiver or the message source.
  syntax:
    content: public abstract CompletableFuture<Collection<IMessage>> peekBatchAsync(long fromSequenceNumber, int messageCount)
    parameters:
    - id: fromSequenceNumber
      type: long
      description: The sequence number from where to read the message.
    - id: messageCount
      type: int
      description: The number of messages.
    return:
      type: java.util.concurrent.CompletableFuture<java.util.Collection<com.microsoft.azure.servicebus.IMessage>>
      description: CompletableFuture that returns batch of <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> peeked.
references:
- uid: java.lang.InterruptedException
  spec.java:
  - uid: java.lang.InterruptedException
    name: InterruptedException
    fullName: java.lang.InterruptedException
- uid: com.microsoft.azure.servicebus.primitives.ServiceBusException
  name: ServiceBusException
  nameWithType: ServiceBusException
  fullName: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.IMessage
  name: IMessage
  nameWithType: IMessage
  fullName: com.microsoft.azure.servicebus.IMessage
- uid: com.microsoft.azure.servicebus.IMessageBrowser.peek*
  name: peek
  nameWithType: IMessageBrowser.peek
  fullName: com.microsoft.azure.servicebus.IMessageBrowser.peek
  package: com.microsoft.azure.servicebus
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: java.util.Collection<com.microsoft.azure.servicebus.IMessage>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: com.microsoft.azure.servicebus.IMessage
    name: IMessage
    fullName: com.microsoft.azure.servicebus.IMessage
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.IMessageBrowser.peekBatch*
  name: peekBatch
  nameWithType: IMessageBrowser.peekBatch
  fullName: com.microsoft.azure.servicebus.IMessageBrowser.peekBatch
  package: com.microsoft.azure.servicebus
- uid: java.util.concurrent.CompletableFuture<com.microsoft.azure.servicebus.IMessage>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: com.microsoft.azure.servicebus.IMessage
    name: IMessage
    fullName: com.microsoft.azure.servicebus.IMessage
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.IMessageBrowser.peekAsync*
  name: peekAsync
  nameWithType: IMessageBrowser.peekAsync
  fullName: com.microsoft.azure.servicebus.IMessageBrowser.peekAsync
  package: com.microsoft.azure.servicebus
- uid: java.util.concurrent.CompletableFuture<java.util.Collection<com.microsoft.azure.servicebus.IMessage>>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: com.microsoft.azure.servicebus.IMessage
    name: IMessage
    fullName: com.microsoft.azure.servicebus.IMessage
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync*
  name: peekBatchAsync
  nameWithType: IMessageBrowser.peekBatchAsync
  fullName: com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync
  package: com.microsoft.azure.servicebus
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: java.util.concurrent.CompletableFuture
  name: CompletableFuture
  nameWithType: CompletableFuture
  fullName: java.util.concurrent.CompletableFuture
