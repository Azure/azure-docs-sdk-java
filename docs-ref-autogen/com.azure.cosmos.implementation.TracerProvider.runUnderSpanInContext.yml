### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.TracerProvider.runUnderSpanInContext*"
fullName: "com.azure.cosmos.implementation.TracerProvider.<T>runUnderSpanInContext"
name: "<T>runUnderSpanInContext"
nameWithType: "TracerProvider.<T>runUnderSpanInContext"
members:
- uid: "com.azure.cosmos.implementation.TracerProvider.<T>runUnderSpanInContext(reactor.core.publisher.Flux<T>)"
  fullName: "com.azure.cosmos.implementation.TracerProvider.<T>runUnderSpanInContext(Flux<T> publisher)"
  name: "<T>runUnderSpanInContext(Flux<T> publisher)"
  nameWithType: "TracerProvider.<T>runUnderSpanInContext(Flux<T> publisher)"
  summary: "Runs given `Flux` publisher in the scope of trace context passed in using <xref uid=\"com.azure.cosmos.implementation.TracerProvider.setContextInReactor*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TracerProvider#setContextInReactor(Context, reactor.util.context.Context)\"></xref> in `contextWrite` Populates active trace context on Reactor's hot path. Reactor's instrumentation for OpenTelemetry (or other hypothetical solution) will take care of the cold path."
  parameters:
  - description: "publisher to run."
    name: "publisher"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Flux<T> <T>runUnderSpanInContext(Flux<T> publisher)"
  returns:
    description: "wrapped publisher."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation"
artifact: com.azure:azure-cosmos:4.25.0
