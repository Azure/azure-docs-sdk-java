### YamlMime:JavaType
constructors:
- fullName: com.microsoft.identity.client.SingleAccountPublicClientApplication.SingleAccountPublicClientApplication(@NonNull final PublicClientApplicationConfiguration config)
  name: SingleAccountPublicClientApplication(@NonNull final PublicClientApplicationConfiguration config)
  nameWithType: SingleAccountPublicClientApplication.SingleAccountPublicClientApplication(@NonNull final PublicClientApplicationConfiguration config)
  parameters:
  - name: config
    type: '@NonNull final <xref href="com.microsoft.identity.client.PublicClientApplicationConfiguration?alt=com.microsoft.identity.client.PublicClientApplicationConfiguration&text=PublicClientApplicationConfiguration" data-throw-if-not-resolved="False"/>'
  syntax: protected SingleAccountPublicClientApplication(@NonNull final PublicClientApplicationConfiguration config)
  uid: com.microsoft.identity.client.SingleAccountPublicClientApplication.SingleAccountPublicClientApplication(@NonNull final PublicClientApplicationConfiguration)
fields:
- field:
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.identity.client.SingleAccountPublicClientApplication.CURRENT_ACCOUNT_SHARED_PREFERENCE_KEY
  name: CURRENT_ACCOUNT_SHARED_PREFERENCE_KEY
  nameWithType: SingleAccountPublicClientApplication.CURRENT_ACCOUNT_SHARED_PREFERENCE_KEY
  summary: <p>SharedPreference key for storing current account. </p>
  syntax: >-
    public static final String CURRENT_ACCOUNT_SHARED_PREFERENCE_KEY=
                "com.microsoft.identity.client.single_account_credential_cache.current_account"
  uid: com.microsoft.identity.client.SingleAccountPublicClientApplication.CURRENT_ACCOUNT_SHARED_PREFERENCE_KEY
- field:
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.identity.client.SingleAccountPublicClientApplication.SINGLE_ACCOUNT_CREDENTIAL_SHARED_PREFERENCES
  name: SINGLE_ACCOUNT_CREDENTIAL_SHARED_PREFERENCES
  nameWithType: SingleAccountPublicClientApplication.SINGLE_ACCOUNT_CREDENTIAL_SHARED_PREFERENCES
  summary: <p>Name of the shared preference cache for storing SingleAccountPublicClientApplication data. </p>
  syntax: >-
    public static final String SINGLE_ACCOUNT_CREDENTIAL_SHARED_PREFERENCES=
                "com.microsoft.identity.client.single_account_credential_cache"
  uid: com.microsoft.identity.client.SingleAccountPublicClientApplication.SINGLE_ACCOUNT_CREDENTIAL_SHARED_PREFERENCES
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.identity.client.IPublicClientApplication" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.identity.client.PublicClientApplication?alt=com.microsoft.identity.client.PublicClientApplication&text=PublicClientApplication" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.identity.client.PublicClientApplication.acquireTokenWithDeviceCode(@Nullable String [],@NonNull final DeviceCodeFlowCallback)
- com.microsoft.identity.client.IPublicClientApplication.acquireTokenWithDeviceCode(@NonNull String [],@NonNull final DeviceCodeFlowCallback)
- com.microsoft.identity.client.PublicClientApplication.buildAcquireTokenSilentParameters(@NonNull final String [],@NonNull final IAccount,@NonNull final String,final boolean,@Nullable final ClaimsRequest,@NonNull final SilentAuthenticationCallback)
- com.microsoft.identity.client.PublicClientApplication.create(@NonNull final Context,final int,@NonNull final ApplicationCreatedListener)
- com.microsoft.identity.client.PublicClientApplication.create(@NonNull final Context,@NonNull final File,@NonNull final ApplicationCreatedListener)
- com.microsoft.identity.client.PublicClientApplication.create(@NonNull final Context,@NonNull final String,@Nullable final String,@NonNull final String,@NonNull final ApplicationCreatedListener)
- com.microsoft.identity.client.PublicClientApplication.create(@NonNull final Context,final int)
- com.microsoft.identity.client.PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context,final int,@NonNull final IMultipleAccountApplicationCreatedListener)
- com.microsoft.identity.client.PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context,@NonNull final File,@NonNull final IMultipleAccountApplicationCreatedListener)
- com.microsoft.identity.client.PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context,@NonNull final int)
- com.microsoft.identity.client.PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context,@NonNull final File)
- com.microsoft.identity.client.PublicClientApplication.createSingleAccountPublicClientApplication(@NonNull final Context,final int,@NonNull final ISingleAccountApplicationCreatedListener)
- com.microsoft.identity.client.PublicClientApplication.createSingleAccountPublicClientApplication(@NonNull final Context,@NonNull final File,@NonNull final ISingleAccountApplicationCreatedListener)
- com.microsoft.identity.client.PublicClientApplication.createSingleAccountPublicClientApplication(@NonNull final Context,final int)
- com.microsoft.identity.client.PublicClientApplication.createSingleAccountPublicClientApplication(@NonNull final Context,@Nullable final File)
- com.microsoft.identity.client.PublicClientApplication.generateSignedHttpRequest(@NonNull final IAccount,@NonNull final PoPAuthenticationScheme)
- com.microsoft.identity.client.PublicClientApplication.generateSignedHttpRequest(@NonNull final IAccount,@NonNull final PoPAuthenticationScheme,@NonNull final SignedHttpRequestRequestCallback)
- com.microsoft.identity.client.PublicClientApplication.getConfiguration()
- com.microsoft.identity.client.ISingleAccountPublicClientApplication.getCurrentAccountAsync(final CurrentAccountCallback)
- com.microsoft.identity.client.PublicClientApplication.getMsaFamilyRefreshToken(@NonNull final String)
- com.microsoft.identity.client.ITokenShare.getMsaFamilyRefreshToken(String)
- com.microsoft.identity.client.PublicClientApplication.getMsaFamilyRefreshTokenWithMetadata(@NonNull final String)
- com.microsoft.identity.client.ITokenShare.getMsaFamilyRefreshTokenWithMetadata(String)
- com.microsoft.identity.client.PublicClientApplication.getOrgIdFamilyRefreshToken(@NonNull final String)
- com.microsoft.identity.client.ITokenShare.getOrgIdFamilyRefreshToken(String)
- com.microsoft.identity.client.PublicClientApplication.getOrgIdFamilyRefreshTokenWithMetadata(@NonNull final String)
- com.microsoft.identity.client.ITokenShare.getOrgIdFamilyRefreshTokenWithMetadata(String)
- com.microsoft.identity.client.PublicClientApplication.getSdkVersion()
- com.microsoft.identity.client.PublicClientApplication.homeAccountMatcher
- com.microsoft.identity.client.PublicClientApplication.isSharedDevice()
- com.microsoft.identity.client.PublicClientApplication.localAccountMatcher
- com.microsoft.identity.client.PublicClientApplication.mPublicClientConfiguration
- com.microsoft.identity.client.PublicClientApplication.mTokenShareUtility
- com.microsoft.identity.client.PublicClientApplication.postAuthResult(@NonNull final ILocalAuthenticationResult,@NonNull final TokenParameters,@NonNull final SilentAuthenticationCallback)
- com.microsoft.identity.client.PublicClientApplication.PublicClientApplication(@NonNull final PublicClientApplicationConfiguration)
- com.microsoft.identity.client.PublicClientApplication.saveMsaFamilyRefreshToken(@NonNull final String)
- com.microsoft.identity.client.ITokenShare.saveMsaFamilyRefreshToken(String)
- com.microsoft.identity.client.PublicClientApplication.saveOrgIdFamilyRefreshToken(@NonNull final String)
- com.microsoft.identity.client.ITokenShare.saveOrgIdFamilyRefreshToken(String)
- com.microsoft.identity.client.PublicClientApplication.showExpectedMsalRedirectUriInfo(Activity)
- com.microsoft.identity.client.PublicClientApplication.usernameMatcher
- com.microsoft.identity.client.PublicClientApplication.validateAcquireTokenParameters(AcquireTokenParameters)
- com.microsoft.identity.client.PublicClientApplication.validateAcquireTokenSilentParameters(AcquireTokenSilentParameters)
methods:
- fullName: com.microsoft.identity.client.SingleAccountPublicClientApplication.acquireToken(@NonNull final AcquireTokenParameters acquireTokenParameters)
  name: acquireToken(@NonNull final AcquireTokenParameters acquireTokenParameters)
  nameWithType: SingleAccountPublicClientApplication.acquireToken(@NonNull final AcquireTokenParameters acquireTokenParameters)
  overridden: com.microsoft.identity.client.IPublicClientApplication.acquireToken(@NonNull final AcquireTokenParameters)
  parameters:
  - name: acquireTokenParameters
    type: '@NonNull final <xref href="com.microsoft.identity.client.AcquireTokenParameters?alt=com.microsoft.identity.client.AcquireTokenParameters&text=AcquireTokenParameters" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Acquire token interactively, will pop-up webUI. Interactive flow will skip the cache lookup. Default value for <xref uid="com.microsoft.identity.client.Prompt" data-throw-if-not-resolved="false" data-raw-source="Prompt"></xref> is <xref uid="com.microsoft.identity.client.Prompt.SELECT_ACCOUNT" data-throw-if-not-resolved="false" data-raw-source="Prompt#SELECT_ACCOUNT"></xref>. </p>

    <p>Convey parameters via the AquireTokenParameters object</p>

    <p></p>
  syntax: public void acquireToken(@NonNull final AcquireTokenParameters acquireTokenParameters)
  uid: com.microsoft.identity.client.SingleAccountPublicClientApplication.acquireToken(@NonNull final AcquireTokenParameters)
- fullName: com.microsoft.identity.client.SingleAccountPublicClientApplication.acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  name: acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  nameWithType: SingleAccountPublicClientApplication.acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  overridden: com.microsoft.identity.client.IPublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],@NonNull final AuthenticationCallback)
  parameters:
  - description: <p>Non-null <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Activity"></xref> that is used as the parent activity for launching the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.providers.oauth2.AuthorizationActivity"></xref>. </p>
    name: activity
    type: <xref href="%40NonNull+final+Activity?alt=%40NonNull+final+Activity&text=%40NonNull+final+Activity" data-throw-if-not-resolved="False"/>
  - description: <p>The non-null array of scopes to be requested for the access token. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. </p>
    name: scopes
    type: <xref href="%40NonNull+final+String+%5B%5D?alt=%40NonNull+final+String+%5B%5D&text=%40NonNull+final+String+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="com.microsoft.identity.client.AuthenticationCallback" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback"></xref> to receive the result back. 1) If user cancels the flow by pressing the device back button, the result will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onCancel()" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onCancel()"></xref>. 2) If the sdk successfully receives the token back, result will be sent back via <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onSuccess(final IAuthenticationResult)" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onSuccess(IAuthenticationResult)"></xref> 3) All the other errors will be sent back via <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onError(MsalException)"></xref>. </p>
    name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.AuthenticationCallback?alt=com.microsoft.identity.client.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Acquire token interactively, will pop-up webUI. Interactive flow will skip the cache lookup. Default value for <xref uid="com.microsoft.identity.client.Prompt" data-throw-if-not-resolved="false" data-raw-source="Prompt"></xref> is <xref uid="com.microsoft.identity.client.Prompt.SELECT_ACCOUNT" data-throw-if-not-resolved="false" data-raw-source="Prompt#SELECT_ACCOUNT"></xref>.</p>

    <p></p>
  syntax: public void acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  uid: com.microsoft.identity.client.SingleAccountPublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],@NonNull final AuthenticationCallback)
- fullName: com.microsoft.identity.client.SingleAccountPublicClientApplication.acquireTokenSilent(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  name: acquireTokenSilent(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  nameWithType: SingleAccountPublicClientApplication.acquireTokenSilent(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  overridden: com.microsoft.identity.client.IPublicClientApplication.acquireTokenSilent(@NonNull final AcquireTokenSilentParameters)
  parameters:
  - name: acquireTokenSilentParameters
    type: '@NonNull final <xref href="com.microsoft.identity.client.AcquireTokenSilentParameters?alt=com.microsoft.identity.client.AcquireTokenSilentParameters&text=AcquireTokenSilentParameters" data-throw-if-not-resolved="False"/>'
  returns:
    type: <xref href="com.microsoft.identity.client.IAuthenticationResult?alt=com.microsoft.identity.client.IAuthenticationResult&text=IAuthenticationResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Perform acquire token silent call. If there is a valid access token in the cache, the sdk will return the access token; If no valid access token exists, the sdk will try to find a refresh token and use the refresh token to get a new access token. If refresh token does not exist or it fails the refresh, exception will be sent back via callback.</p>

    <p></p>
  syntax: public IAuthenticationResult acquireTokenSilent(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  uid: com.microsoft.identity.client.SingleAccountPublicClientApplication.acquireTokenSilent(@NonNull final AcquireTokenSilentParameters)
- fullName: com.microsoft.identity.client.SingleAccountPublicClientApplication.acquireTokenSilent(@NonNull final String[] scopes, @NonNull final String authority)
  name: acquireTokenSilent(@NonNull final String[] scopes, @NonNull final String authority)
  nameWithType: SingleAccountPublicClientApplication.acquireTokenSilent(@NonNull final String[] scopes, @NonNull final String authority)
  overridden: com.microsoft.identity.client.ISingleAccountPublicClientApplication.acquireTokenSilent(@NonNull final String [],@NonNull final String)
  parameters:
  - description: <p>The non-null array of scopes to be requested for the access token. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. </p>
    name: scopes
    type: <xref href="%40NonNull+final+String+%5B%5D?alt=%40NonNull+final+String+%5B%5D&text=%40NonNull+final+String+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>Authority to issue the token. </p>
    name: authority
    type: <xref href="%40NonNull+final+String?alt=%40NonNull+final+String&text=%40NonNull+final+String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.identity.client.IAuthenticationResult?alt=com.microsoft.identity.client.IAuthenticationResult&text=IAuthenticationResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Perform acquire token silent call. If there is a valid access token in the cache, the sdk will return the access token; If no valid access token exists, the sdk will try to find a refresh token and use the refresh token to get a new access token. If refresh token does not exist or it fails the refresh, exception will be sent back via callback.</p>

    <p></p>
  syntax: public IAuthenticationResult acquireTokenSilent(@NonNull final String[] scopes, @NonNull final String authority)
  uid: com.microsoft.identity.client.SingleAccountPublicClientApplication.acquireTokenSilent(@NonNull final String [],@NonNull final String)
- fullName: com.microsoft.identity.client.SingleAccountPublicClientApplication.acquireTokenSilentAsync(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  name: acquireTokenSilentAsync(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  nameWithType: SingleAccountPublicClientApplication.acquireTokenSilentAsync(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  overridden: com.microsoft.identity.client.IPublicClientApplication.acquireTokenSilentAsync(@NonNull final AcquireTokenSilentParameters)
  parameters:
  - name: acquireTokenSilentParameters
    type: '@NonNull final <xref href="com.microsoft.identity.client.AcquireTokenSilentParameters?alt=com.microsoft.identity.client.AcquireTokenSilentParameters&text=AcquireTokenSilentParameters" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Perform acquire token silent call. If there is a valid access token in the cache, the sdk will return the access token; If no valid access token exists, the sdk will try to find a refresh token and use the refresh token to get a new access token. If refresh token does not exist or it fails the refresh, exception will be sent back via callback.</p>

    <p></p>
  syntax: public void acquireTokenSilentAsync(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  uid: com.microsoft.identity.client.SingleAccountPublicClientApplication.acquireTokenSilentAsync(@NonNull final AcquireTokenSilentParameters)
- fullName: com.microsoft.identity.client.SingleAccountPublicClientApplication.acquireTokenSilentAsync(@NonNull final String[] scopes, @NonNull final String authority, @NonNull final SilentAuthenticationCallback callback)
  name: acquireTokenSilentAsync(@NonNull final String[] scopes, @NonNull final String authority, @NonNull final SilentAuthenticationCallback callback)
  nameWithType: SingleAccountPublicClientApplication.acquireTokenSilentAsync(@NonNull final String[] scopes, @NonNull final String authority, @NonNull final SilentAuthenticationCallback callback)
  overridden: com.microsoft.identity.client.ISingleAccountPublicClientApplication.acquireTokenSilentAsync(@NonNull final String [],@NonNull final String,@NonNull final SilentAuthenticationCallback)
  parameters:
  - description: <p>The non-null array of scopes to be requested for the access token. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. </p>
    name: scopes
    type: <xref href="%40NonNull+final+String+%5B%5D?alt=%40NonNull+final+String+%5B%5D&text=%40NonNull+final+String+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>Authority to issue the token. </p>
    name: authority
    type: <xref href="%40NonNull+final+String?alt=%40NonNull+final+String&text=%40NonNull+final+String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback" data-throw-if-not-resolved="false" data-raw-source="SilentAuthenticationCallback"></xref> that is used to send the result back. The success result will be sent back via <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onSuccess(final IAuthenticationResult)" data-throw-if-not-resolved="false" data-raw-source="SilentAuthenticationCallback#onSuccess(IAuthenticationResult)"></xref>. Failure case will be sent back via { <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false" data-raw-source="}. "></xref></p>
    name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.SilentAuthenticationCallback?alt=com.microsoft.identity.client.SilentAuthenticationCallback&text=SilentAuthenticationCallback" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Perform acquire token silent call. If there is a valid access token in the cache, the sdk will return the access token; If no valid access token exists, the sdk will try to find a refresh token and use the refresh token to get a new access token. If refresh token does not exist or it fails the refresh, exception will be sent back via callback.</p>

    <p></p>
  syntax: public void acquireTokenSilentAsync(@NonNull final String[] scopes, @NonNull final String authority, @NonNull final SilentAuthenticationCallback callback)
  uid: com.microsoft.identity.client.SingleAccountPublicClientApplication.acquireTokenSilentAsync(@NonNull final String [],@NonNull final String,@NonNull final SilentAuthenticationCallback)
- fullName: com.microsoft.identity.client.SingleAccountPublicClientApplication.getCommandCallback( @NonNull final SilentAuthenticationCallback authenticationCallback, @NonNull final TokenParameters tokenParameters)
  name: getCommandCallback( @NonNull final SilentAuthenticationCallback authenticationCallback, @NonNull final TokenParameters tokenParameters)
  nameWithType: SingleAccountPublicClientApplication.getCommandCallback( @NonNull final SilentAuthenticationCallback authenticationCallback, @NonNull final TokenParameters tokenParameters)
  parameters:
  - name: authenticationCallback
    type: '@NonNull final <xref href="com.microsoft.identity.client.SilentAuthenticationCallback?alt=com.microsoft.identity.client.SilentAuthenticationCallback&text=SilentAuthenticationCallback" data-throw-if-not-resolved="False"/>'
  - name: tokenParameters
    type: '@NonNull final <xref href="com.microsoft.identity.client.TokenParameters?alt=com.microsoft.identity.client.TokenParameters&text=TokenParameters" data-throw-if-not-resolved="False"/>'
  returns:
    type: <xref href="CommandCallback%3CILocalAuthenticationResult%2C+BaseException%3E?alt=CommandCallback%3CILocalAuthenticationResult%2C+BaseException%3E&text=CommandCallback%3CILocalAuthenticationResult%2C+BaseException%3E" data-throw-if-not-resolved="False"/>
  syntax: protected CommandCallback<ILocalAuthenticationResult, BaseException> getCommandCallback( @NonNull final SilentAuthenticationCallback authenticationCallback, @NonNull final TokenParameters tokenParameters)
  uid: com.microsoft.identity.client.SingleAccountPublicClientApplication.getCommandCallback(@NonNull final SilentAuthenticationCallback,@NonNull final TokenParameters)
- fullName: com.microsoft.identity.client.SingleAccountPublicClientApplication.getCurrentAccount()
  name: getCurrentAccount()
  nameWithType: SingleAccountPublicClientApplication.getCurrentAccount()
  overridden: com.microsoft.identity.client.ISingleAccountPublicClientApplication.getCurrentAccount()
  returns:
    description: <p>CurrentAccountResult </p>
    type: <xref href="com.microsoft.identity.client.ICurrentAccountResult?alt=com.microsoft.identity.client.ICurrentAccountResult&text=ICurrentAccountResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the current account and notify if the current account changes. This method must be called whenever the application is resumed or prior to running a scheduled background operation.</p>

    <p></p>
  syntax: public ICurrentAccountResult getCurrentAccount()
  uid: com.microsoft.identity.client.SingleAccountPublicClientApplication.getCurrentAccount()
- fullName: com.microsoft.identity.client.SingleAccountPublicClientApplication.getCurrentAccountAsync(@NonNull final CurrentAccountCallback callback)
  name: getCurrentAccountAsync(@NonNull final CurrentAccountCallback callback)
  nameWithType: SingleAccountPublicClientApplication.getCurrentAccountAsync(@NonNull final CurrentAccountCallback callback)
  parameters:
  - name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.ISingleAccountPublicClientApplication.CurrentAccountCallback?alt=com.microsoft.identity.client.ISingleAccountPublicClientApplication.CurrentAccountCallback&text=ISingleAccountPublicClientApplication.CurrentAccountCallback" data-throw-if-not-resolved="False"/>'
  syntax: public void getCurrentAccountAsync(@NonNull final CurrentAccountCallback callback)
  uid: com.microsoft.identity.client.SingleAccountPublicClientApplication.getCurrentAccountAsync(@NonNull final CurrentAccountCallback)
- fullName: com.microsoft.identity.client.SingleAccountPublicClientApplication.signIn(@NonNull final Activity activity, @Nullable final String loginHint, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  name: signIn(@NonNull final Activity activity, @Nullable final String loginHint, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  nameWithType: SingleAccountPublicClientApplication.signIn(@NonNull final Activity activity, @Nullable final String loginHint, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  overridden: com.microsoft.identity.client.ISingleAccountPublicClientApplication.signIn(@NonNull final Activity,@Nullable final String,@NonNull final String [],@NonNull final AuthenticationCallback)
  parameters:
  - description: <p>Non-null <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Activity"></xref> that is used as the parent activity for launching the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.providers.oauth2.AuthorizationActivity"></xref>. </p>
    name: activity
    type: <xref href="%40NonNull+final+Activity?alt=%40NonNull+final+Activity&text=%40NonNull+final+Activity" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. If provided, will be used as the query parameter sent for authenticating the user, which will have the UPN pre-populated. </p>
    name: loginHint
    type: <xref href="%40Nullable+final+String?alt=%40Nullable+final+String&text=%40Nullable+final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The non-null array of scopes to be consented to during sign in. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. The access token returned is for MS Graph and will allow you to query for additional information about the signed in account. </p>
    name: scopes
    type: <xref href="%40NonNull+final+String+%5B%5D?alt=%40NonNull+final+String+%5B%5D&text=%40NonNull+final+String+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.identity.client.AuthenticationCallback" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback"></xref> that is used to send the result back. The success result will be sent back via <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onSuccess(final IAuthenticationResult)" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onSuccess(IAuthenticationResult)"></xref>. Failure case will be sent back via { <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false" data-raw-source="}. "></xref></p>
    name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.AuthenticationCallback?alt=com.microsoft.identity.client.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Allows a user to sign in to your application with one of their accounts. This method may only be called once: once a user is signed in, they must first be signed out before another user may sign in. If you wish to prompt the existing user for credentials use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="signInAgain(Activity, String[], Prompt, AuthenticationCallback)"></xref> or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="acquireToken(AcquireTokenParameters)"></xref>. </p>

    <p>Note: The authority used to make the sign in request will be either the MSAL default: <a href="https://login.microsoftonline.com/common">https://login.microsoftonline.com/common</a> or the default authority specified by you in your configuration</p>

    <p></p>
  syntax: public void signIn(@NonNull final Activity activity, @Nullable final String loginHint, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  uid: com.microsoft.identity.client.SingleAccountPublicClientApplication.signIn(@NonNull final Activity,@Nullable final String,@NonNull final String [],@NonNull final AuthenticationCallback)
- fullName: com.microsoft.identity.client.SingleAccountPublicClientApplication.signIn(@NonNull final Activity activity, @Nullable final String loginHint, @NonNull final String[] scopes, @Nullable final Prompt prompt, @NonNull final AuthenticationCallback callback)
  name: signIn(@NonNull final Activity activity, @Nullable final String loginHint, @NonNull final String[] scopes, @Nullable final Prompt prompt, @NonNull final AuthenticationCallback callback)
  nameWithType: SingleAccountPublicClientApplication.signIn(@NonNull final Activity activity, @Nullable final String loginHint, @NonNull final String[] scopes, @Nullable final Prompt prompt, @NonNull final AuthenticationCallback callback)
  overridden: com.microsoft.identity.client.ISingleAccountPublicClientApplication.signIn(@NonNull final Activity,@Nullable final String,@NonNull final String [],@Nullable final Prompt,@NonNull final AuthenticationCallback)
  parameters:
  - description: <p>Non-null <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Activity"></xref> that is used as the parent activity for launching the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.providers.oauth2.AuthorizationActivity"></xref>. </p>
    name: activity
    type: <xref href="%40NonNull+final+Activity?alt=%40NonNull+final+Activity&text=%40NonNull+final+Activity" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. If provided, will be used as the query parameter sent for authenticating the user, which will have the UPN pre-populated. </p>
    name: loginHint
    type: <xref href="%40Nullable+final+String?alt=%40Nullable+final+String&text=%40Nullable+final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The non-null array of scopes to be consented to during sign in. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. The access token returned is for MS Graph and will allow you to query for additional information about the signed in account. </p>
    name: scopes
    type: <xref href="%40NonNull+final+String+%5B%5D?alt=%40NonNull+final+String+%5B%5D&text=%40NonNull+final+String+%5B%5D" data-throw-if-not-resolved="False"/>
  - name: prompt
    type: '@Nullable final <xref href="com.microsoft.identity.client.Prompt?alt=com.microsoft.identity.client.Prompt&text=Prompt" data-throw-if-not-resolved="False"/>'
  - description: >-
      <p>

        <xref uid="com.microsoft.identity.client.AuthenticationCallback" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback"></xref> that is used to send the result back. The success result will be sent back via <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onSuccess(final IAuthenticationResult)" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onSuccess(IAuthenticationResult)"></xref>. Failure case will be sent back via { <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false" data-raw-source="}. "></xref></p>
    name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.AuthenticationCallback?alt=com.microsoft.identity.client.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Allows a user to sign in to your application with one of their accounts. This method may only be called once: once a user is signed in, they must first be signed out before another user may sign in. If you wish to prompt the existing user for credentials use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="signInAgain(Activity, String[], Prompt, AuthenticationCallback)"></xref> or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="acquireToken(AcquireTokenParameters)"></xref>. </p>

    <p>Note: The authority used to make the sign in request will be either the MSAL default: <a href="https://login.microsoftonline.com/common">https://login.microsoftonline.com/common</a> or the default authority specified by you in your configuration</p>

    <p></p>
  syntax: public void signIn(@NonNull final Activity activity, @Nullable final String loginHint, @NonNull final String[] scopes, @Nullable final Prompt prompt, @NonNull final AuthenticationCallback callback)
  uid: com.microsoft.identity.client.SingleAccountPublicClientApplication.signIn(@NonNull final Activity,@Nullable final String,@NonNull final String [],@Nullable final Prompt,@NonNull final AuthenticationCallback)
- fullName: com.microsoft.identity.client.SingleAccountPublicClientApplication.signInAgain(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final Prompt prompt, @NonNull final AuthenticationCallback callback)
  name: signInAgain(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final Prompt prompt, @NonNull final AuthenticationCallback callback)
  nameWithType: SingleAccountPublicClientApplication.signInAgain(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final Prompt prompt, @NonNull final AuthenticationCallback callback)
  overridden: com.microsoft.identity.client.ISingleAccountPublicClientApplication.signInAgain(@NonNull final Activity,@NonNull final String [],@Nullable final Prompt,@NonNull final AuthenticationCallback)
  parameters:
  - description: <p>Non-null <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Activity"></xref> that is used as the parent activity for launching the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.providers.oauth2.AuthorizationActivity"></xref>. </p>
    name: activity
    type: <xref href="%40NonNull+final+Activity?alt=%40NonNull+final+Activity&text=%40NonNull+final+Activity" data-throw-if-not-resolved="False"/>
  - description: <p>The non-null array of scopes to be consented to during sign in. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. The access token returned is for MS Graph and will allow you to query for additional information about the signed in account. </p>
    name: scopes
    type: <xref href="%40NonNull+final+String+%5B%5D?alt=%40NonNull+final+String+%5B%5D&text=%40NonNull+final+String+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>Nullable. Indicates the type of user interaction that is required. If no argument is supplied the default behavior will be used. </p>
    name: prompt
    type: '@Nullable final <xref href="com.microsoft.identity.client.Prompt?alt=com.microsoft.identity.client.Prompt&text=Prompt" data-throw-if-not-resolved="False"/>'
  - description: >-
      <p>

        <xref uid="com.microsoft.identity.client.AuthenticationCallback" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback"></xref> that is used to send the result back. The success result will be sent back via <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onSuccess(final IAuthenticationResult)" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onSuccess(IAuthenticationResult)"></xref>. Failure case will be sent back via <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onError(MsalException)"></xref>. </p>
    name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.AuthenticationCallback?alt=com.microsoft.identity.client.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Reauthorizes the current account according to the supplied scopes and prompt behavior. </p>

    <p>Note: The authority used to make the sign in request will be either the MSAL default: <a href="https://login.microsoftonline.com/common">https://login.microsoftonline.com/common</a> or the default authority specified by you in your configuration.</p>

    <p></p>
  syntax: public void signInAgain(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final Prompt prompt, @NonNull final AuthenticationCallback callback)
  uid: com.microsoft.identity.client.SingleAccountPublicClientApplication.signInAgain(@NonNull final Activity,@NonNull final String [],@Nullable final Prompt,@NonNull final AuthenticationCallback)
- fullName: com.microsoft.identity.client.SingleAccountPublicClientApplication.signOut()
  name: signOut()
  nameWithType: SingleAccountPublicClientApplication.signOut()
  overridden: com.microsoft.identity.client.ISingleAccountPublicClientApplication.signOut()
  returns:
    description: <p>boolean indicating whether the account was removed successfully </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Signs out the current the Account and Credentials (tokens). NOTE: If a device is marked as a shared device within broker signout will be device wide.</p>

    <p></p>
  syntax: public boolean signOut()
  uid: com.microsoft.identity.client.SingleAccountPublicClientApplication.signOut()
- fullName: com.microsoft.identity.client.SingleAccountPublicClientApplication.signOut(@NonNull final SignOutCallback callback)
  name: signOut(@NonNull final SignOutCallback callback)
  nameWithType: SingleAccountPublicClientApplication.signOut(@NonNull final SignOutCallback callback)
  overridden: com.microsoft.identity.client.ISingleAccountPublicClientApplication.signOut(@NonNull final SignOutCallback)
  parameters:
  - description: <p>a callback to be invoked when the operation finishes. </p>
    name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.ISingleAccountPublicClientApplication.SignOutCallback?alt=com.microsoft.identity.client.ISingleAccountPublicClientApplication.SignOutCallback&text=ISingleAccountPublicClientApplication.SignOutCallback" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Signs out the current the Account and Credentials (tokens). NOTE: If a device is marked as a shared device within broker signout will be device wide.</p>

    <p></p>
  syntax: public void signOut(@NonNull final SignOutCallback callback)
  uid: com.microsoft.identity.client.SingleAccountPublicClientApplication.signOut(@NonNull final SignOutCallback)
nameWithType: SingleAccountPublicClientApplication
syntax: public class SingleAccountPublicClientApplication extends PublicClientApplication implements ISingleAccountPublicClientApplication
type: class
uid: com.microsoft.identity.client.SingleAccountPublicClientApplication
fullName: com.microsoft.identity.client.SingleAccountPublicClientApplication
name: SingleAccountPublicClientApplication
package: com.microsoft.identity.client
metadata: {}
