### YamlMime:JavaMember
uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createOrReplaceDigitalTwin*"
fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwin"
name: "<T>createOrReplaceDigitalTwin"
nameWithType: "DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwin"
members:
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwin(java.lang.String,T,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwin(String digitalTwinId, T digitalTwin, Class<T> clazz)"
  name: "<T>createOrReplaceDigitalTwin(String digitalTwinId, T digitalTwin, Class<T> clazz)"
  nameWithType: "DigitalTwinsAsyncClient.<T>createOrReplaceDigitalTwin(String digitalTwinId, T digitalTwin, Class<T> clazz)"
  summary: "Creates a digital twin. If the provided digital twin Id is already in use, then this will attempt to replace the existing digital twin with the provided digital twin.\n\n**Code Samples**\n\nYou can provide a strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref> as the input parameter:\n\n```java\nString modelId = \"dtmi:com:samples:Building;1\";\n \n BasicDigitalTwin basicTwin = new BasicDigitalTwin(\"myDigitalTwinId\")\n     .setMetadata(\n         new BasicDigitalTwinMetadata()\n             .setModelId(modelId)\n     );\n \n digitalTwinsAsyncClient.createOrReplaceDigitalTwin(basicTwin.getId(), basicTwin, BasicDigitalTwin.class)\n     .subscribe(response -> System.out.println(\"Created digital twin Id: \" + response.getId()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\ndigitalTwinsAsyncClient.createOrReplaceDigitalTwin(\"myDigitalTwinId\", digitalTwinStringPayload, String.class)\n     .subscribe(stringResponse -> System.out.println(\"Created digital twin: \" + stringResponse));\n```"
  parameters:
  - description: "The Id of the digital twin. The Id is unique within the service and case sensitive."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application/json object representing the digital twin to create."
    name: "digitalTwin"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to serialize the request with and deserialize the response with."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<T> <T>createOrReplaceDigitalTwin(String digitalTwinId, T digitalTwin, Class<T> clazz)"
  returns:
    description: "The deserialized application/json object representing the digital twin created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.digitaltwins.core"
artifact: com.azure:azure-digitaltwins-core:1.0.1
