### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.ShardKey()
  name: ShardKey()
  nameWithType: ShardKey.ShardKey()
  summary: <p>endregion </p><p>region Constructors </p>
  syntax: public ShardKey()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.ShardKey()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.ShardKey(byte[] value)
  name: ShardKey(byte[] value)
  nameWithType: ShardKey.ShardKey(byte[] value)
  parameters:
  - description: <p>Input byte array. </p>
    name: value
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Constructs a shard key using a byte array.</p>

    <p></p>
  syntax: public ShardKey(byte[] value)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.ShardKey(byte [])
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.ShardKey(Duration value)
  name: ShardKey(Duration value)
  nameWithType: ShardKey.ShardKey(Duration value)
  parameters:
  - description: <p>Input TimeSpan. </p>
    name: value
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Constructs a shard key using TimeSpan value.</p>

    <p></p>
  syntax: public ShardKey(Duration value)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.ShardKey(Duration)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.ShardKey(int value)
  name: ShardKey(int value)
  nameWithType: ShardKey.ShardKey(int value)
  parameters:
  - description: <p>Input 32-bit integer. </p>
    name: value
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Constructs a shard key using 32-bit integer value.</p>

    <p></p>
  syntax: public ShardKey(int value)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.ShardKey(int)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.ShardKey(LocalDateTime value)
  name: ShardKey(LocalDateTime value)
  nameWithType: ShardKey.ShardKey(LocalDateTime value)
  parameters:
  - description: <p>Input DateTime. </p>
    name: value
    type: <xref href="LocalDateTime?alt=LocalDateTime&text=LocalDateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Constructs a shard key using DateTime value.</p>

    <p></p>
  syntax: public ShardKey(LocalDateTime value)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.ShardKey(LocalDateTime)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.ShardKey(long value)
  name: ShardKey(long value)
  nameWithType: ShardKey.ShardKey(long value)
  parameters:
  - description: <p>Input 64-bit integer. </p>
    name: value
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Constructs a shard key using 64-bit integer value.</p>

    <p></p>
  syntax: public ShardKey(long value)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.ShardKey(long)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.ShardKey(Object value)
  name: ShardKey(Object value)
  nameWithType: ShardKey.ShardKey(Object value)
  parameters:
  - description: <p>Input object. </p>
    name: value
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Constructs a shard key using given object.</p>

    <p></p>
  syntax: public ShardKey(Object value)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.ShardKey(Object)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.ShardKey(OffsetDateTime value)
  name: ShardKey(OffsetDateTime value)
  nameWithType: ShardKey.ShardKey(OffsetDateTime value)
  parameters:
  - description: <p>Input DateTimeOffset. </p>
    name: value
    type: <xref href="OffsetDateTime?alt=OffsetDateTime&text=OffsetDateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Constructs a shard key using TimeSpan value.</p>

    <p></p>
  syntax: public ShardKey(OffsetDateTime value)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.ShardKey(OffsetDateTime)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.ShardKey(ShardKeyType keyType, Object value)
  name: ShardKey(ShardKeyType keyType, Object value)
  nameWithType: ShardKey.ShardKey(ShardKeyType keyType, Object value)
  parameters:
  - description: <p>The key type of value in object. </p>
    name: keyType
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKeyType?alt=com.microsoft.azure.elasticdb.shard.base.ShardKeyType&text=ShardKeyType" data-throw-if-not-resolved="False"/>
  - description: <p>Input object. </p>
    name: value
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Constructs a shard key using given object and keyType.</p>

    <p></p>
  syntax: public ShardKey(ShardKeyType keyType, Object value)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.ShardKey(ShardKeyType,Object)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.ShardKey(UUID value)
  name: ShardKey(UUID value)
  nameWithType: ShardKey.ShardKey(UUID value)
  parameters:
  - description: <p>Input Guid. </p>
    name: value
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Constructs a shard key using a Guid.</p>

    <p></p>
  syntax: public ShardKey(UUID value)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.ShardKey(UUID)
fields:
- field:
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.MAXIMUM_VAR_BYTES_KEY_SIZE
  name: MAXIMUM_VAR_BYTES_KEY_SIZE
  nameWithType: ShardKey.MAXIMUM_VAR_BYTES_KEY_SIZE
  summary: <p>Maximum size allowed for VarBytes keys. </p>
  syntax: public static final int MAXIMUM_VAR_BYTES_KEY_SIZE= 128
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.MAXIMUM_VAR_BYTES_KEY_SIZE
- field:
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.SIZE_OF_DATE_TIME_OFFSET
  name: SIZE_OF_DATE_TIME_OFFSET
  nameWithType: ShardKey.SIZE_OF_DATE_TIME_OFFSET
  summary: <p>Size of Guid. </p>
  syntax: public static final int SIZE_OF_DATE_TIME_OFFSET= 16
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.SIZE_OF_DATE_TIME_OFFSET
- field:
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.SIZE_OF_GUID
  name: SIZE_OF_GUID
  nameWithType: ShardKey.SIZE_OF_GUID
  summary: <p>Size of Guid. </p>
  syntax: public static final int SIZE_OF_GUID= 16
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.SIZE_OF_GUID
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="Comparable&lt;ShardKey&gt;" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.compareTo(ShardKey other)
  name: compareTo(ShardKey other)
  nameWithType: ShardKey.compareTo(ShardKey other)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardKey" data-throw-if-not-resolved="false" data-raw-source="ShardKey"></xref> compared with this object. </p>
    name: other
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>0 for equality, &lt;-1 if this key is less than <em>other</em> ,&gt; 1 otherwise. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Compares between two <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardKey" data-throw-if-not-resolved="false" data-raw-source="ShardKey"></xref> values.</p>

    <p></p>
  syntax: public int compareTo(ShardKey other)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.compareTo(ShardKey)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.detectShardKeyType(Object value)
  name: detectShardKeyType(Object value)
  nameWithType: ShardKey.detectShardKeyType(Object value)
  parameters:
  - description: <p>Given value. Must be non-null. </p>
    name: value
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Corresponding ShardKeyType. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKeyType?alt=com.microsoft.azure.elasticdb.shard.base.ShardKeyType&text=ShardKeyType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Given an object detect its ShardKeyType.</p>

    <p></p>
  syntax: public static ShardKeyType detectShardKeyType(Object value)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.detectShardKeyType(Object)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.equals(Object obj)
  name: equals(Object obj)
  nameWithType: ShardKey.equals(Object obj)
  parameters:
  - description: <p>The object to compare with the current object. </p>
    name: obj
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if the specified object is equal to the current object; otherwise, false. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Determines whether the specified object is equal to the current object.</p>

    <p></p>
  syntax: public boolean equals(Object obj)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.equals(Object)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.equals(ShardKey other)
  name: equals(ShardKey other)
  nameWithType: ShardKey.equals(ShardKey other)
  parameters:
  - description: <p>ShardKey to compare with. </p>
    name: other
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if same shard key, false otherwise. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Performs equality comparison with another given ShardKey.</p>

    <p></p>
  syntax: public boolean equals(ShardKey other)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.equals(ShardKey)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.fromRawValue(ShardKeyType keyType, byte[] rawValue)
  name: fromRawValue(ShardKeyType keyType, byte[] rawValue)
  nameWithType: ShardKey.fromRawValue(ShardKeyType keyType, byte[] rawValue)
  parameters:
  - description: <p>Type of the shard key (Int32, Int64, Guid, byte[] etc.). </p>
    name: keyType
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKeyType?alt=com.microsoft.azure.elasticdb.shard.base.ShardKeyType&text=ShardKeyType" data-throw-if-not-resolved="False"/>
  - description: <p>Binary representation of the key. </p>
    name: rawValue
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A new shard key instance. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>endregion </p><p>Instantiates a new shard key using the specified type and binary representation.</p>

    <p></p>
  syntax: public static ShardKey fromRawValue(ShardKeyType keyType, byte[] rawValue)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.fromRawValue(ShardKeyType,byte [])
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getDataType()
  name: getDataType()
  nameWithType: ShardKey.getDataType()
  returns:
    type: <xref href="Class?alt=Class&text=Class" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the type of the value present in the object. </p>
  syntax: public Class getDataType()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getDataType()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getHasValue()
  name: getHasValue()
  nameWithType: ShardKey.getHasValue()
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>endregion </p><p>True if the key has a value; otherwise, false. Positive infinity returns false. </p>
  syntax: public boolean getHasValue()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getHasValue()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getIsMax()
  name: getIsMax()
  nameWithType: ShardKey.getIsMax()
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>True if the key value is positive infinity; otherwise, false. </p>
  syntax: public boolean getIsMax()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getIsMax()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getIsMin()
  name: getIsMin()
  nameWithType: ShardKey.getIsMin()
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>Returns true if the key value is negative infinity; otherwise, false. </p>
  syntax: public boolean getIsMin()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getIsMin()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getKeyType()
  name: getKeyType()
  nameWithType: ShardKey.getKeyType()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKeyType?alt=com.microsoft.azure.elasticdb.shard.base.ShardKeyType&text=ShardKeyType" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the type of the shard key. </p>
  syntax: public ShardKeyType getKeyType()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getKeyType()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMaxBinary()
  name: getMaxBinary()
  nameWithType: ShardKey.getMaxBinary()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  summary: <p>Represents negative infinity. </p>
  syntax: public static ShardKey getMaxBinary()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMaxBinary()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMaxDateTime()
  name: getMaxDateTime()
  nameWithType: ShardKey.getMaxDateTime()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  summary: <p>Represents negative infinity. </p>
  syntax: public static ShardKey getMaxDateTime()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMaxDateTime()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMaxDateTimeOffset()
  name: getMaxDateTimeOffset()
  nameWithType: ShardKey.getMaxDateTimeOffset()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  summary: <p>Represents negative infinity. </p>
  syntax: public static ShardKey getMaxDateTimeOffset()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMaxDateTimeOffset()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMaxGuid()
  name: getMaxGuid()
  nameWithType: ShardKey.getMaxGuid()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  summary: <p>Represents negative infinity. </p>
  syntax: public static ShardKey getMaxGuid()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMaxGuid()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMaxInt()
  name: getMaxInt()
  nameWithType: ShardKey.getMaxInt()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  summary: <p>Represents negative infinity. </p>
  syntax: public static ShardKey getMaxInt()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMaxInt()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMaxLong()
  name: getMaxLong()
  nameWithType: ShardKey.getMaxLong()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  summary: <p>Represents negative infinity. </p>
  syntax: public static ShardKey getMaxLong()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMaxLong()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMaxTimeSpan()
  name: getMaxTimeSpan()
  nameWithType: ShardKey.getMaxTimeSpan()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  summary: <p>Represents negative infinity. </p>
  syntax: public static ShardKey getMaxTimeSpan()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMaxTimeSpan()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMinBinary()
  name: getMinBinary()
  nameWithType: ShardKey.getMinBinary()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  summary: <p>Represents negative infinity. </p>
  syntax: public static ShardKey getMinBinary()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMinBinary()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMinDateTime()
  name: getMinDateTime()
  nameWithType: ShardKey.getMinDateTime()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  summary: <p>Represents negative infinity. </p>
  syntax: public static ShardKey getMinDateTime()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMinDateTime()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMinDateTimeOffset()
  name: getMinDateTimeOffset()
  nameWithType: ShardKey.getMinDateTimeOffset()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  summary: <p>Represents negative infinity. </p>
  syntax: public static ShardKey getMinDateTimeOffset()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMinDateTimeOffset()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMinGuid()
  name: getMinGuid()
  nameWithType: ShardKey.getMinGuid()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  summary: <p>Represents negative infinity. </p>
  syntax: public static ShardKey getMinGuid()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMinGuid()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMinInt()
  name: getMinInt()
  nameWithType: ShardKey.getMinInt()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  summary: <p>endregion </p><p>region Static Getters Represents negative infinity. </p>
  syntax: public static ShardKey getMinInt()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMinInt()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMinLong()
  name: getMinLong()
  nameWithType: ShardKey.getMinLong()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  summary: <p>Represents negative infinity. </p>
  syntax: public static ShardKey getMinLong()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMinLong()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMinTimeSpan()
  name: getMinTimeSpan()
  nameWithType: ShardKey.getMinTimeSpan()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  summary: <p>Represents negative infinity. </p>
  syntax: public static ShardKey getMinTimeSpan()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getMinTimeSpan()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getNextKey()
  name: getNextKey()
  nameWithType: ShardKey.getNextKey()
  returns:
    description: <p>Incremented newly constructed ShardKey Returns a new ShardKey that is the numerical successor of this ShardKey (add a binary bit). For example, if this ShardKey has the integer value 0, getNextKey() returns a ShardKey with the value 1. Alternatively, if this ShardKey is a byte array with the value 0x1234, getNextKey() returns a ShardKey with the value 0x1234...251 zeros....1 </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the next higher key</p>

    <p></p>
  syntax: public ShardKey getNextKey()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getNextKey()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getRawValue()
  name: getRawValue()
  nameWithType: ShardKey.getRawValue()
  returns:
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Gets a byte array representing the key value. </p>
  syntax: public byte [] getRawValue()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getRawValue()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getStoreValue()
  name: getStoreValue()
  nameWithType: ShardKey.getStoreValue()
  returns:
    description: <p>String representation of the object. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Converts the object to its string representation.</p>

    <p></p>
  syntax: public String getStoreValue()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getStoreValue()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.getValue()
  name: getValue()
  nameWithType: ShardKey.getValue()
  returns:
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the denormalized value of the key. </p>
  syntax: public Object getValue()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.getValue()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.hashCode()
  name: hashCode()
  nameWithType: ShardKey.hashCode()
  returns:
    description: <p>Hash code for the object. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Calculates the hash code for this instance.</p>

    <p></p>
  syntax: public int hashCode()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.hashCode()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.isSupportedType(Class type)
  name: isSupportedType(Class type)
  nameWithType: ShardKey.isSupportedType(Class type)
  parameters:
  - description: <p>Input type. </p>
    name: type
    type: <xref href="Class?alt=Class&text=Class" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if supported, false otherwise. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks whether the specified type is supported as ShardKey type.</p>

    <p></p>
  syntax: public static boolean isSupportedType(Class type)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.isSupportedType(Class)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.max(ShardKey left, ShardKey right)
  name: max(ShardKey left, ShardKey right)
  nameWithType: ShardKey.max(ShardKey left, ShardKey right)
  parameters:
  - description: <p>Left hand side. </p>
    name: left
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  - description: <p>Right hand side. </p>
    name: right
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Maximum of two shard keys. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the maximum of two shard keys.</p>

    <p></p>
  syntax: public static ShardKey max(ShardKey left, ShardKey right)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.max(ShardKey,ShardKey)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.min(ShardKey left, ShardKey right)
  name: min(ShardKey left, ShardKey right)
  nameWithType: ShardKey.min(ShardKey left, ShardKey right)
  parameters:
  - description: <p>Left hand side. </p>
    name: left
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  - description: <p>Right hand side. </p>
    name: right
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Minimum of two shard keys. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the minimum of two shard keys.</p>

    <p></p>
  syntax: public static ShardKey min(ShardKey left, ShardKey right)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.min(ShardKey,ShardKey)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.opEquality(ShardKey left, ShardKey right)
  name: opEquality(ShardKey left, ShardKey right)
  nameWithType: ShardKey.opEquality(ShardKey left, ShardKey right)
  parameters:
  - description: <p>Left hand side </p>
    name: left
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  - description: <p>Right hand side </p>
    name: right
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if the two objects are equal, false in all other cases </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Equality operator.</p>

    <p></p>
  syntax: public static boolean opEquality(ShardKey left, ShardKey right)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.opEquality(ShardKey,ShardKey)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.opGreaterThan(ShardKey left, ShardKey right)
  name: opGreaterThan(ShardKey left, ShardKey right)
  nameWithType: ShardKey.opGreaterThan(ShardKey left, ShardKey right)
  parameters:
  - description: <p>Left hand side <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardKey" data-throw-if-not-resolved="false" data-raw-source="ShardKey"></xref> of the operator. </p>
    name: left
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  - description: <p>Right hand side <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardKey" data-throw-if-not-resolved="false" data-raw-source="ShardKey"></xref> of the operator. </p>
    name: right
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if lhs&gt; rhs </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Compares two <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardKey" data-throw-if-not-resolved="false" data-raw-source="ShardKey"></xref> using lexicographic order (greater than).</p>

    <p></p>
  syntax: public static boolean opGreaterThan(ShardKey left, ShardKey right)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.opGreaterThan(ShardKey,ShardKey)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.opGreaterThanOrEqual(ShardKey left, ShardKey right)
  name: opGreaterThanOrEqual(ShardKey left, ShardKey right)
  nameWithType: ShardKey.opGreaterThanOrEqual(ShardKey left, ShardKey right)
  parameters:
  - description: <p>Left hand side <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardKey" data-throw-if-not-resolved="false" data-raw-source="ShardKey"></xref> of the operator. </p>
    name: left
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  - description: <p>Right hand side <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardKey" data-throw-if-not-resolved="false" data-raw-source="ShardKey"></xref> of the operator. </p>
    name: right
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if lhs&gt;= rhs </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Compares two <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardKey" data-throw-if-not-resolved="false" data-raw-source="ShardKey"></xref> using lexicographic order (greater or equal).</p>

    <p></p>
  syntax: public static boolean opGreaterThanOrEqual(ShardKey left, ShardKey right)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.opGreaterThanOrEqual(ShardKey,ShardKey)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.opInequality(ShardKey left, ShardKey right)
  name: opInequality(ShardKey left, ShardKey right)
  nameWithType: ShardKey.opInequality(ShardKey left, ShardKey right)
  parameters:
  - description: <p>Left hand side </p>
    name: left
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  - description: <p>Right hand side </p>
    name: right
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if the two objects are not equal, false in all other cases </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Inequality operator.</p>

    <p></p>
  syntax: public static boolean opInequality(ShardKey left, ShardKey right)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.opInequality(ShardKey,ShardKey)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.opLessThan(ShardKey left, ShardKey right)
  name: opLessThan(ShardKey left, ShardKey right)
  nameWithType: ShardKey.opLessThan(ShardKey left, ShardKey right)
  parameters:
  - description: <p>Left hand side <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardKey" data-throw-if-not-resolved="false" data-raw-source="ShardKey"></xref> of the operator. </p>
    name: left
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  - description: <p>Right hand side <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardKey" data-throw-if-not-resolved="false" data-raw-source="ShardKey"></xref> of the operator. </p>
    name: right
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if lhs &lt;rhs </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>endregion </p><p>region Operators Compares two <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardKey" data-throw-if-not-resolved="false" data-raw-source="ShardKey"></xref> using lexicographic order (less than).</p>

    <p></p>
  syntax: public static boolean opLessThan(ShardKey left, ShardKey right)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.opLessThan(ShardKey,ShardKey)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.opLessThanOrEqual(ShardKey left, ShardKey right)
  name: opLessThanOrEqual(ShardKey left, ShardKey right)
  nameWithType: ShardKey.opLessThanOrEqual(ShardKey left, ShardKey right)
  parameters:
  - description: <p>Left hand side <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardKey" data-throw-if-not-resolved="false" data-raw-source="ShardKey"></xref> of the operator. </p>
    name: left
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  - description: <p>Right hand side <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardKey" data-throw-if-not-resolved="false" data-raw-source="ShardKey"></xref> of the operator. </p>
    name: right
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if lhs &lt;= rhs </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Compares two <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardKey" data-throw-if-not-resolved="false" data-raw-source="ShardKey"></xref> using lexicographic order (less or equal).</p>

    <p></p>
  syntax: public static boolean opLessThanOrEqual(ShardKey left, ShardKey right)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.opLessThanOrEqual(ShardKey,ShardKey)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.qpHash(int hashKey, int value)
  name: qpHash(int hashKey, int value)
  nameWithType: ShardKey.qpHash(int hashKey, int value)
  parameters:
  - description: <p>The previous value of the hash </p>
    name: hashKey
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>The additional value to mix into the hash </p>
    name: value
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The updated hash value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Mix up the hash key and add the specified value into it.</p>

    <p></p>
  syntax: public static int qpHash(int hashKey, int value)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.qpHash(int,int)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.shardKeyTypeFromType(Class type)
  name: shardKeyTypeFromType(Class type)
  nameWithType: ShardKey.shardKeyTypeFromType(Class type)
  parameters:
  - description: <p>CLR type. </p>
    name: type
    type: <xref href="Class?alt=Class&text=Class" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>ShardKey type. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKeyType?alt=com.microsoft.azure.elasticdb.shard.base.ShardKeyType&text=ShardKeyType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the ShardKeyType corresponding to CLR type.</p>

    <p></p>
  syntax: public static ShardKeyType shardKeyTypeFromType(Class type)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.shardKeyTypeFromType(Class)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.toString()
  name: toString()
  nameWithType: ShardKey.toString()
  returns:
    description: <p>String representation of the object. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Converts the object to its string representation.</p>

    <p></p>
  syntax: public String toString()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.toString()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey.typeFromShardKeyType(ShardKeyType keyType)
  name: typeFromShardKeyType(ShardKeyType keyType)
  nameWithType: ShardKey.typeFromShardKeyType(ShardKeyType keyType)
  parameters:
  - description: <p>Input ShardKeyType. </p>
    name: keyType
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKeyType?alt=com.microsoft.azure.elasticdb.shard.base.ShardKeyType&text=ShardKeyType" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>CLR type. </p>
    type: <xref href="Class?alt=Class&text=Class" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the CLR type corresponding to the specified ShardKeyType.</p>

    <p></p>
  syntax: public static Class typeFromShardKeyType(ShardKeyType keyType)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardKey.typeFromShardKeyType(ShardKeyType)
nameWithType: ShardKey
syntax: public class ShardKey
type: class
uid: com.microsoft.azure.elasticdb.shard.base.ShardKey
fullName: com.microsoft.azure.elasticdb.shard.base.ShardKey
name: ShardKey
package: com.microsoft.azure.elasticdb.shard.base
summary: <p>Shard key value. Wraps the type and value and allows normalization/denormalization for serialization. </p>
metadata: {}
