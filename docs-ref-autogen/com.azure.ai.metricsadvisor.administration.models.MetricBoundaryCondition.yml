### YamlMime:JavaType
uid: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition"
fullName: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition"
name: "MetricBoundaryCondition"
nameWithType: "MetricBoundaryCondition"
summary: "Defines the boundary conditions for the anomaly (abnormal data points) to be included in the alert."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class MetricBoundaryCondition"
constructors:
- uid: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.MetricBoundaryCondition()"
  fullName: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.MetricBoundaryCondition()"
  name: "MetricBoundaryCondition()"
  nameWithType: "MetricBoundaryCondition.MetricBoundaryCondition()"
  syntax: "public MetricBoundaryCondition()"
methods:
- uid: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.getCompanionMetricId()"
  fullName: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.getCompanionMetricId()"
  name: "getCompanionMetricId()"
  nameWithType: "MetricBoundaryCondition.getCompanionMetricId()"
  summary: "Gets the id of the companion metric."
  syntax: "public String getCompanionMetricId()"
  desc: "Gets the id of the companion metric. When the companion-metric is set for a metric, the abnormal data points detected in the original metric will be included in the alert only if data points values of corresponding series in companion-metric are not within the boundary."
  returns:
    description: "The companion metric id."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.getDirection()"
  fullName: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.getDirection()"
  name: "getDirection()"
  nameWithType: "MetricBoundaryCondition.getDirection()"
  summary: "Gets the boundary direction."
  syntax: "public BoundaryDirection getDirection()"
  desc: "Gets the boundary direction."
  returns:
    description: "The boundary direction."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.BoundaryDirection?alt=com.azure.ai.metricsadvisor.administration.models.BoundaryDirection&text=BoundaryDirection\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.getLowerBoundary()"
  fullName: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.getLowerBoundary()"
  name: "getLowerBoundary()"
  nameWithType: "MetricBoundaryCondition.getLowerBoundary()"
  summary: "Gets the lower boundary, if the detected abnormal data point is below this value then it will be included in the alert."
  syntax: "public Double getLowerBoundary()"
  desc: "Gets the lower boundary, if the detected abnormal data point is below this value then it will be included in the alert. This boundary is taken into consideration only if the direction is either <xref uid=\"com.azure.ai.metricsadvisor.administration.models.BoundaryDirection.LOWER\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BoundaryDirection#LOWER\"></xref> or <xref uid=\"com.azure.ai.metricsadvisor.administration.models.BoundaryDirection.BOTH\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BoundaryDirection#BOTH\"></xref>."
  returns:
    description: "The lower boundary."
    type: "<xref href=\"java.lang.Double?alt=java.lang.Double&text=Double\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.getMeasureType()"
  fullName: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.getMeasureType()"
  name: "getMeasureType()"
  nameWithType: "MetricBoundaryCondition.getMeasureType()"
  summary: "Gets the measure type that detector should use for measuring data-points."
  syntax: "public BoundaryMeasureType getMeasureType()"
  desc: "Gets the measure type that detector should use for measuring data-points."
  returns:
    description: "the measure type."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.BoundaryMeasureType?alt=com.azure.ai.metricsadvisor.administration.models.BoundaryMeasureType&text=BoundaryMeasureType\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.getUpperBoundary()"
  fullName: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.getUpperBoundary()"
  name: "getUpperBoundary()"
  nameWithType: "MetricBoundaryCondition.getUpperBoundary()"
  summary: "Gets the upper boundary."
  syntax: "public Double getUpperBoundary()"
  desc: "Gets the upper boundary. if the detected abnormal data point is above this value then it will be included in the alert. This boundary is taken into consideration only if the direction is either <xref uid=\"com.azure.ai.metricsadvisor.administration.models.BoundaryDirection.UPPER\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BoundaryDirection#UPPER\"></xref> or <xref uid=\"com.azure.ai.metricsadvisor.administration.models.BoundaryDirection.BOTH\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BoundaryDirection#BOTH\"></xref>."
  returns:
    description: "The upper boundary."
    type: "<xref href=\"java.lang.Double?alt=java.lang.Double&text=Double\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.setBoundary(com.azure.ai.metricsadvisor.administration.models.BoundaryDirection,java.lang.Double,java.lang.Double)"
  fullName: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.setBoundary(BoundaryDirection direction, Double lowerBoundary, Double upperBoundary)"
  name: "setBoundary(BoundaryDirection direction, Double lowerBoundary, Double upperBoundary)"
  nameWithType: "MetricBoundaryCondition.setBoundary(BoundaryDirection direction, Double lowerBoundary, Double upperBoundary)"
  summary: "Sets the boundary."
  parameters:
  - description: "Both <code>lowerBoundary</code> and <code>upperBoundary</code> must be specified\n     when the direction is <xref uid=\"com.azure.ai.metricsadvisor.administration.models.BoundaryDirection.BOTH\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BoundaryDirection#BOTH\"></xref>. The <code>lowerBoundary</code>\n     must be specified for <xref uid=\"com.azure.ai.metricsadvisor.administration.models.BoundaryDirection.LOWER\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BoundaryDirection#LOWER\"></xref>, similarly <code>upperBoundary</code>\n     must set specified for <xref uid=\"com.azure.ai.metricsadvisor.administration.models.BoundaryDirection.UPPER\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BoundaryDirection#UPPER\"></xref>."
    name: "direction"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.BoundaryDirection?alt=com.azure.ai.metricsadvisor.administration.models.BoundaryDirection&text=BoundaryDirection\" data-throw-if-not-resolved=\"False\" />"
  - description: "The lower boundary value."
    name: "lowerBoundary"
    type: "<xref href=\"java.lang.Double?alt=java.lang.Double&text=Double\" data-throw-if-not-resolved=\"False\" />"
  - description: "The upper boundary value."
    name: "upperBoundary"
    type: "<xref href=\"java.lang.Double?alt=java.lang.Double&text=Double\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public MetricBoundaryCondition setBoundary(BoundaryDirection direction, Double lowerBoundary, Double upperBoundary)"
  desc: "Sets the boundary."
  returns:
    description: "The MetricBoundaryCondition object itself."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition?alt=com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition&text=MetricBoundaryCondition\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.setCompanionMetricId(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.setCompanionMetricId(String companionMetricId)"
  name: "setCompanionMetricId(String companionMetricId)"
  nameWithType: "MetricBoundaryCondition.setCompanionMetricId(String companionMetricId)"
  summary: "Sets the companion metric id."
  parameters:
  - description: "The companion metric id."
    name: "companionMetricId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public MetricBoundaryCondition setCompanionMetricId(String companionMetricId)"
  desc: "Sets the companion metric id. When the companion-metric is set for a metric, an anomaly detected in the original metric will be included in the alert only if data points values of corresponding series in companion-metric are not within the boundary."
  returns:
    description: "The MetricBoundaryCondition object itself."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition?alt=com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition&text=MetricBoundaryCondition\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.setCompanionMetricId(java.lang.String,boolean)"
  fullName: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.setCompanionMetricId(String companionMetricId, boolean alertIfMissing)"
  name: "setCompanionMetricId(String companionMetricId, boolean alertIfMissing)"
  nameWithType: "MetricBoundaryCondition.setCompanionMetricId(String companionMetricId, boolean alertIfMissing)"
  summary: "Sets the companion metric id."
  parameters:
  - description: "The companion metric id."
    name: "companionMetricId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Indicate whether or not alert should be triggered when\n     the companion-metric data-points are out of boundary but the corresponding data-point\n     is missing for the original metric."
    name: "alertIfMissing"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public MetricBoundaryCondition setCompanionMetricId(String companionMetricId, boolean alertIfMissing)"
  desc: "Sets the companion metric id. When the companion-metric is set for a metric, an anomaly detected in the original metric series will be included in the alert only if data points values of corresponding series in companion-metric are not within the boundary."
  returns:
    description: "The MetricBoundaryCondition object itself."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition?alt=com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition&text=MetricBoundaryCondition\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.setMeasureType(com.azure.ai.metricsadvisor.administration.models.BoundaryMeasureType)"
  fullName: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.setMeasureType(BoundaryMeasureType measureType)"
  name: "setMeasureType(BoundaryMeasureType measureType)"
  nameWithType: "MetricBoundaryCondition.setMeasureType(BoundaryMeasureType measureType)"
  summary: "Sets the measure type that detector should use for measuring data-points."
  parameters:
  - description: "the type of measure to use."
    name: "measureType"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.BoundaryMeasureType?alt=com.azure.ai.metricsadvisor.administration.models.BoundaryMeasureType&text=BoundaryMeasureType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public MetricBoundaryCondition setMeasureType(BoundaryMeasureType measureType)"
  desc: "Sets the measure type that detector should use for measuring data-points."
  returns:
    description: "The MetricBoundaryCondition object itself."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition?alt=com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition&text=MetricBoundaryCondition\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.shouldAlertIfDataPointMissing()"
  fullName: "com.azure.ai.metricsadvisor.administration.models.MetricBoundaryCondition.shouldAlertIfDataPointMissing()"
  name: "shouldAlertIfDataPointMissing()"
  nameWithType: "MetricBoundaryCondition.shouldAlertIfDataPointMissing()"
  summary: "True if alert will be triggered when the companion-metric data-points are out of boundary but the corresponding data-point is missing for the original metric."
  syntax: "public Boolean shouldAlertIfDataPointMissing()"
  desc: "True if alert will be triggered when the companion-metric data-points are out of boundary but the corresponding data-point is missing for the original metric."
  returns:
    description: "True if alert is triggered for missing data-points, false otherwise."
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Defines the boundary conditions for the anomaly (abnormal data points) to be included in the alert."
metadata: {}
package: "com.azure.ai.metricsadvisor.administration.models"
artifact: com.azure:azure-ai-metricsadvisor:1.1.6
