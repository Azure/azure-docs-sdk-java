### YamlMime:JavaMember
uid: "com.azure.storage.file.datalake.DataLakeFileClient.queryWithResponse*"
fullName: "com.azure.storage.file.datalake.DataLakeFileClient.queryWithResponse"
name: "queryWithResponse"
nameWithType: "DataLakeFileClient.queryWithResponse"
members:
- uid: "com.azure.storage.file.datalake.DataLakeFileClient.queryWithResponse(com.azure.storage.file.datalake.options.FileQueryOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileClient.queryWithResponse(FileQueryOptions queryOptions, Duration timeout, Context context)"
  name: "queryWithResponse(FileQueryOptions queryOptions, Duration timeout, Context context)"
  nameWithType: "DataLakeFileClient.queryWithResponse(FileQueryOptions queryOptions, Duration timeout, Context context)"
  summary: "Queries an entire file into an output stream.\n\nFor more information, see the [Azure Docs][]\n\n**Code Samples**\n\n```java\nByteArrayOutputStream queryData = new ByteArrayOutputStream();\n String expression = \"SELECT * from BlobStorage\";\n FileQueryJsonSerialization input = new FileQueryJsonSerialization()\n     .setRecordSeparator('\\n');\n FileQueryDelimitedSerialization output = new FileQueryDelimitedSerialization()\n     .setEscapeChar('\\0')\n     .setColumnSeparator(',')\n     .setRecordSeparator('\\n')\n     .setFieldQuote('\\'')\n     .setHeadersPresent(true);\n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n Consumer<FileQueryError> errorConsumer = System.out::println;\n Consumer<FileQueryProgress> progressConsumer = progress -> System.out.println(\"total file bytes read: \"\n     + progress.getBytesScanned());\n FileQueryOptions queryOptions = new FileQueryOptions(expression, queryData)\n     .setInputSerialization(input)\n     .setOutputSerialization(output)\n     .setRequestConditions(requestConditions)\n     .setErrorConsumer(errorConsumer)\n     .setProgressConsumer(progressConsumer);\n System.out.printf(\"Query completed with status %d%n\",\n     client.queryWithResponse(queryOptions, timeout, new Context(key1, value1))\n         .getStatusCode());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/query-blob-contents"
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.FileQueryOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"The query options\"></xref>."
    name: "queryOptions"
    type: "<xref href=\"com.azure.storage.file.datalake.options.FileQueryOptions?alt=com.azure.storage.file.datalake.options.FileQueryOptions&text=FileQueryOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public FileQueryResponse queryWithResponse(FileQueryOptions queryOptions, Duration timeout, Context context)"
  returns:
    description: "A response containing status code and HTTP headers."
    type: "<xref href=\"com.azure.storage.file.datalake.models.FileQueryResponse?alt=com.azure.storage.file.datalake.models.FileQueryResponse&text=FileQueryResponse\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.storage.file.datalake"
artifact: com.azure:azure-storage-file-datalake:12.4.0
