### YamlMime:JavaMember
uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getDigitalTwinWithResponse*"
fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getDigitalTwinWithResponse"
name: "<T>getDigitalTwinWithResponse"
nameWithType: "DigitalTwinsAsyncClient.<T>getDigitalTwinWithResponse"
members:
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getDigitalTwinWithResponse(java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)"
  name: "<T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)"
  nameWithType: "DigitalTwinsAsyncClient.<T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)"
  summary: "Gets a digital twin.\n\n**Code Samples**\n\nA Strongly typed object type such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref> can be provided as an input parameter for `clazz` to indicate what type is used to deserialize the response.\n\n```java\ndigitalTwinsAsyncClient.getDigitalTwinWithResponse(\n     \"myDigitalTwinId\",\n     BasicDigitalTwin.class)\n     .subscribe(\n         basicDigitalTwinWithResponse -> System.out.println(\n             \"Retrieved digital twin with Id: \" + basicDigitalTwinWithResponse.getValue().getId() +\n             \" Http Status Code: \" + basicDigitalTwinWithResponse.getStatusCode()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\ndigitalTwinsAsyncClient.getDigitalTwinWithResponse(\n     \"myDigitalTwinId\",\n     String.class)\n     .subscribe(\n         basicDigitalTwinWithResponse -> System.out.println(\n             \"Retrieved digital twin: \" + basicDigitalTwinWithResponse.getValue() +\n             \" Http Status Code: \" + basicDigitalTwinWithResponse.getStatusCode()));\n```"
  parameters:
  - description: "The Id of the digital twin. The Id is unique within the service and case sensitive."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to deserialize the response with."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<DigitalTwinsResponse<T>> <T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)"
  returns:
    description: "A <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsResponse\"></xref> containing the deserialized application/json object representing the digital twin."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse?alt=com.azure.digitaltwins.core.models.DigitalTwinsResponse&text=DigitalTwinsResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.digitaltwins.core"
artifact: com.azure:azure-digitaltwins-core:1.0.1
