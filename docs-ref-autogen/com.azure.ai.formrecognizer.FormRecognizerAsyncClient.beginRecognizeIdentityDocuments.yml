### YamlMime:JavaMember
uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeIdentityDocuments*"
fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeIdentityDocuments"
name: "beginRecognizeIdentityDocuments"
nameWithType: "FormRecognizerAsyncClient.beginRecognizeIdentityDocuments"
members:
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeIdentityDocuments(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeIdentityDocuments(Flux<ByteBuffer> identityDocument, long length)"
  name: "beginRecognizeIdentityDocuments(Flux<ByteBuffer> identityDocument, long length)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeIdentityDocuments(Flux<ByteBuffer> identityDocument, long length)"
  summary: "Analyze identity documents using optical character recognition (OCR) and a prebuilt model trained on identity documents model to extract key information from passports and US driver licenses. See [here][] for fields found on an identity document.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `identityDocument` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile license = new File(\"local/file_path/license.jpg\");\n Flux<ByteBuffer> buffer =\n     toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(license.toPath())));\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeIdentityDocuments(buffer, license.length())\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(recognizedIDDocumentResult -> {\n         for (int i = 0; i < recognizedIDDocumentResult.size(); i++) {\n             RecognizedForm recognizedForm = recognizedIDDocumentResult.get(i);\n             Map<String, FormField> recognizedFields = recognizedForm.getFields();\n             System.out.printf(\"----------- Recognized license info for page %d -----------%n\", i);\n\n             FormField firstNameField = recognizedFields.get(\"FirstName\");\n             if (firstNameField != null) {\n                 if (FieldValueType.STRING == firstNameField.getValue().getValueType()) {\n                     String firstName = firstNameField.getValue().asString();\n                     System.out.printf(\"First Name: %s, confidence: %.2f%n\",\n                         firstName, firstNameField.getConfidence());\n                 }\n             }\n\n             FormField lastNameField = recognizedFields.get(\"LastName\");\n             if (lastNameField != null) {\n                 if (FieldValueType.STRING == lastNameField.getValue().getValueType()) {\n                     String lastName = lastNameField.getValue().asString();\n                     System.out.printf(\"Last name: %s, confidence: %.2f%n\",\n                         lastName, lastNameField.getConfidence());\n                 }\n             }\n\n             FormField countryRegionFormField = recognizedFields.get(\"CountryRegion\");\n             if (countryRegionFormField != null) {\n                 if (FieldValueType.STRING == countryRegionFormField.getValue().getValueType()) {\n                     String countryRegion = countryRegionFormField.getValue().asCountryRegion();\n                     System.out.printf(\"Country or region: %s, confidence: %.2f%n\",\n                         countryRegion, countryRegionFormField.getConfidence());\n                 }\n             }\n\n             FormField dateOfExpirationField = recognizedFields.get(\"DateOfExpiration\");\n             if (dateOfExpirationField != null) {\n                 if (FieldValueType.DATE == dateOfExpirationField.getValue().getValueType()) {\n                     LocalDate expirationDate = dateOfExpirationField.getValue().asDate();\n                     System.out.printf(\"Document date of expiration: %s, confidence: %.2f%n\",\n                         expirationDate, dateOfExpirationField.getConfidence());\n                 }\n             }\n\n             FormField documentNumberField = recognizedFields.get(\"DocumentNumber\");\n             if (documentNumberField != null) {\n                 if (FieldValueType.STRING == documentNumberField.getValue().getValueType()) {\n                     String documentNumber = documentNumberField.getValue().asString();\n                     System.out.printf(\"Document number: %s, confidence: %.2f%n\",\n                         documentNumber, documentNumberField.getConfidence());\n                 }\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/iddocumentfields"
  parameters:
  - description: "The data of the document to recognize identity document information from."
    name: "identityDocument"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The exact length of the data."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeIdentityDocuments(Flux<ByteBuffer> identityDocument, long length)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize identity document operation until it has completed,\n has failed, or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeIdentityDocuments(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeIdentityDocumentOptions)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeIdentityDocuments(Flux<ByteBuffer> identityDocument, long length, RecognizeIdentityDocumentOptions recognizeIdentityDocumentOptions)"
  name: "beginRecognizeIdentityDocuments(Flux<ByteBuffer> identityDocument, long length, RecognizeIdentityDocumentOptions recognizeIdentityDocumentOptions)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeIdentityDocuments(Flux<ByteBuffer> identityDocument, long length, RecognizeIdentityDocumentOptions recognizeIdentityDocumentOptions)"
  summary: "Analyze identity documents using optical character recognition (OCR) and a prebuilt model trained on identity documents model to extract key information from passports and US driver licenses. See [here][] for fields found on an identity document.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `identityDocument` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile licenseDocument = new File(\"local/file_path/license.jpg\");\n boolean includeFieldElements = true;\n // Utility method to convert input stream to Byte buffer\n Flux<ByteBuffer> buffer =\n     toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(licenseDocument.toPath())));\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeIdentityDocuments(buffer,\n     licenseDocument.length(),\n     new RecognizeIdentityDocumentOptions()\n         .setContentType(FormContentType.IMAGE_JPEG)\n         .setFieldElementsIncluded(includeFieldElements))\n     .setPollInterval(Duration.ofSeconds(5))\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(recognizedIDDocumentResult -> {\n         for (int i = 0; i < recognizedIDDocumentResult.size(); i++) {\n             RecognizedForm recognizedForm = recognizedIDDocumentResult.get(i);\n             Map<String, FormField> recognizedFields = recognizedForm.getFields();\n             System.out.printf(\"----------- Recognized license info for page %d -----------%n\", i);\n\n             FormField firstNameField = recognizedFields.get(\"FirstName\");\n             if (firstNameField != null) {\n                 if (FieldValueType.STRING == firstNameField.getValue().getValueType()) {\n                     String firstName = firstNameField.getValue().asString();\n                     System.out.printf(\"First Name: %s, confidence: %.2f%n\",\n                         firstName, firstNameField.getConfidence());\n                 }\n             }\n\n             FormField lastNameField = recognizedFields.get(\"LastName\");\n             if (lastNameField != null) {\n                 if (FieldValueType.STRING == lastNameField.getValue().getValueType()) {\n                     String lastName = lastNameField.getValue().asString();\n                     System.out.printf(\"Last name: %s, confidence: %.2f%n\",\n                         lastName, lastNameField.getConfidence());\n                 }\n             }\n\n             FormField countryRegionFormField = recognizedFields.get(\"CountryRegion\");\n             if (countryRegionFormField != null) {\n                 if (FieldValueType.STRING == countryRegionFormField.getValue().getValueType()) {\n                     String countryRegion = countryRegionFormField.getValue().asCountryRegion();\n                     System.out.printf(\"Country or region: %s, confidence: %.2f%n\",\n                         countryRegion, countryRegionFormField.getConfidence());\n                 }\n             }\n\n             FormField dateOfExpirationField = recognizedFields.get(\"DateOfExpiration\");\n             if (dateOfExpirationField != null) {\n                 if (FieldValueType.DATE == dateOfExpirationField.getValue().getValueType()) {\n                     LocalDate expirationDate = dateOfExpirationField.getValue().asDate();\n                     System.out.printf(\"Document date of expiration: %s, confidence: %.2f%n\",\n                         expirationDate, dateOfExpirationField.getConfidence());\n                 }\n             }\n\n             FormField documentNumberField = recognizedFields.get(\"DocumentNumber\");\n             if (documentNumberField != null) {\n                 if (FieldValueType.STRING == documentNumberField.getValue().getValueType()) {\n                     String documentNumber = documentNumberField.getValue().asString();\n                     System.out.printf(\"Document number: %s, confidence: %.2f%n\",\n                         documentNumber, documentNumberField.getConfidence());\n                 }\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/iddocumentfields"
  parameters:
  - description: "The data of the document to recognize identity document information from."
    name: "identityDocument"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The exact length of the data."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional configurable\n <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeIdentityDocumentOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> that may be passed when analyzing an identity document."
    name: "recognizeIdentityDocumentOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.RecognizeIdentityDocumentOptions?alt=com.azure.ai.formrecognizer.models.RecognizeIdentityDocumentOptions&text=RecognizeIdentityDocumentOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeIdentityDocuments(Flux<ByteBuffer> identityDocument, long length, RecognizeIdentityDocumentOptions recognizeIdentityDocumentOptions)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize identity document operation until it has completed,\n has failed, or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.formrecognizer"
artifact: com.azure:azure-ai-formrecognizer:3.1.9
