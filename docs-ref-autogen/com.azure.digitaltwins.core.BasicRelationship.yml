### YamlMime:ManagedReference
items:
- uid: com.azure.digitaltwins.core.BasicRelationship
  id: BasicRelationship
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core
  children:
  - com.azure.digitaltwins.core.BasicRelationship.BasicRelationship(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
  - com.azure.digitaltwins.core.BasicRelationship.addProperty(java.lang.String,java.lang.Object)
  - com.azure.digitaltwins.core.BasicRelationship.getETag()
  - com.azure.digitaltwins.core.BasicRelationship.getId()
  - com.azure.digitaltwins.core.BasicRelationship.getName()
  - com.azure.digitaltwins.core.BasicRelationship.getProperties()
  - com.azure.digitaltwins.core.BasicRelationship.getSourceId()
  - com.azure.digitaltwins.core.BasicRelationship.getTargetId()
  - com.azure.digitaltwins.core.BasicRelationship.setETag(java.lang.String)
  langs:
  - java
  name: BasicRelationship
  nameWithType: BasicRelationship
  fullName: com.azure.digitaltwins.core.BasicRelationship
  type: Class
  package: com.azure.digitaltwins.core
  summary: >-
    Although relationships have a user-defined schema, these properties should exist on every instance. This is useful to use as a base class to ensure your custom relationships have the necessary properties.


    Note that this class uses <xref uid="" data-throw-if-not-resolved="false">JsonProperty</xref> from the Jackson serialization library. Because of this, this type will only work if the default json serializer is used by the digital twins client or if the custom json serializer uses Jackson as well. In order to use a different json library, a new BasicRelationship class must be constructed and have its json properties tagged by the annotation used by that json library.
  syntax:
    content: public final class BasicRelationship
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.digitaltwins.core.BasicRelationship.BasicRelationship()
  id: BasicRelationship()
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.BasicRelationship
  langs:
  - java
  name: BasicRelationship()
  nameWithType: BasicRelationship.BasicRelationship()
  fullName: com.azure.digitaltwins.core.BasicRelationship.BasicRelationship()
  overload: com.azure.digitaltwins.core.BasicRelationship.BasicRelationship*
  type: Constructor
  package: com.azure.digitaltwins.core
  syntax:
    content: private BasicRelationship()
- uid: com.azure.digitaltwins.core.BasicRelationship.BasicRelationship(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
  id: BasicRelationship(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.BasicRelationship
  langs:
  - java
  name: BasicRelationship(String relationshipId, String sourceDigitalTwinId, String targetDigitalTwinId, String relationshipName)
  nameWithType: BasicRelationship.BasicRelationship(String relationshipId, String sourceDigitalTwinId, String targetDigitalTwinId, String relationshipName)
  fullName: com.azure.digitaltwins.core.BasicRelationship.BasicRelationship(String relationshipId, String sourceDigitalTwinId, String targetDigitalTwinId, String relationshipName)
  overload: com.azure.digitaltwins.core.BasicRelationship.BasicRelationship*
  type: Constructor
  package: com.azure.digitaltwins.core
  summary: Construct a basic digital twin relationship.
  syntax:
    content: public BasicRelationship(String relationshipId, String sourceDigitalTwinId, String targetDigitalTwinId, String relationshipName)
    parameters:
    - id: relationshipId
      type: java.lang.String
      description: The unique Id of this relationship.
    - id: sourceDigitalTwinId
      type: java.lang.String
      description: The digital twin that this relationship comes from.
    - id: targetDigitalTwinId
      type: java.lang.String
      description: The digital twin that this relationship points to.
    - id: relationshipName
      type: java.lang.String
      description: The user defined name of this relationship, for instance "Contains" or "isAdjacentTo"
- uid: com.azure.digitaltwins.core.BasicRelationship.addProperty(java.lang.String,java.lang.Object)
  id: addProperty(java.lang.String,java.lang.Object)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.BasicRelationship
  langs:
  - java
  name: addProperty(String key, Object value)
  nameWithType: BasicRelationship.addProperty(String key, Object value)
  fullName: com.azure.digitaltwins.core.BasicRelationship.addProperty(String key, Object value)
  overload: com.azure.digitaltwins.core.BasicRelationship.addProperty*
  type: Method
  package: com.azure.digitaltwins.core
  summary: Adds an additional custom property to this model. This field will contain any properties of the relationship that are not already defined by the other strong types of this class.
  syntax:
    content: public BasicRelationship addProperty(String key, Object value)
    parameters:
    - id: key
      type: java.lang.String
      description: The key of the additional property to be added to the relationship.
    - id: value
      type: java.lang.Object
      description: The value of the additional property to be added to the relationship.
    return:
      type: com.azure.digitaltwins.core.BasicRelationship
      description: The BasicRelationship object itself.
- uid: com.azure.digitaltwins.core.BasicRelationship.getETag()
  id: getETag()
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.BasicRelationship
  langs:
  - java
  name: getETag()
  nameWithType: BasicRelationship.getETag()
  fullName: com.azure.digitaltwins.core.BasicRelationship.getETag()
  overload: com.azure.digitaltwins.core.BasicRelationship.getETag*
  type: Method
  package: com.azure.digitaltwins.core
  summary: Gets a string representing a weak ETag for the entity that this request performs an operation against, as per RFC7232.
  syntax:
    content: public String getETag()
    return:
      type: java.lang.String
      description: A string representing a weak ETag for the entity that this request performs an operation against, as per RFC7232.
- uid: com.azure.digitaltwins.core.BasicRelationship.getId()
  id: getId()
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.BasicRelationship
  langs:
  - java
  name: getId()
  nameWithType: BasicRelationship.getId()
  fullName: com.azure.digitaltwins.core.BasicRelationship.getId()
  overload: com.azure.digitaltwins.core.BasicRelationship.getId*
  type: Method
  package: com.azure.digitaltwins.core
  summary: Gets the unique Id of the relationship. This field is present on every relationship.
  syntax:
    content: public String getId()
    return:
      type: java.lang.String
      description: The unique Id of the relationship. This field is present on every relationship.
- uid: com.azure.digitaltwins.core.BasicRelationship.getName()
  id: getName()
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.BasicRelationship
  langs:
  - java
  name: getName()
  nameWithType: BasicRelationship.getName()
  fullName: com.azure.digitaltwins.core.BasicRelationship.getName()
  overload: com.azure.digitaltwins.core.BasicRelationship.getName*
  type: Method
  package: com.azure.digitaltwins.core
  summary: Gets the name of the relationship, which defines the type of link (e.g. Contains). This field is present on every relationship.
  syntax:
    content: public String getName()
    return:
      type: java.lang.String
      description: The name of the relationship, which defines the type of link (e.g. Contains). This field is present on every relationship.
- uid: com.azure.digitaltwins.core.BasicRelationship.getProperties()
  id: getProperties()
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.BasicRelationship
  langs:
  - java
  name: getProperties()
  nameWithType: BasicRelationship.getProperties()
  fullName: com.azure.digitaltwins.core.BasicRelationship.getProperties()
  overload: com.azure.digitaltwins.core.BasicRelationship.getProperties*
  type: Method
  package: com.azure.digitaltwins.core
  summary: Gets the additional custom properties defined in the model. This field will contain any properties of the relationship that are not already defined by the other strong types of this class.
  syntax:
    content: public Map<String,Object> getProperties()
    return:
      type: java.util.Map<java.lang.String,java.lang.Object>
      description: The additional custom properties defined in the model. This field will contain any properties of the relationship that are not already defined by the other strong types of this class.
- uid: com.azure.digitaltwins.core.BasicRelationship.getSourceId()
  id: getSourceId()
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.BasicRelationship
  langs:
  - java
  name: getSourceId()
  nameWithType: BasicRelationship.getSourceId()
  fullName: com.azure.digitaltwins.core.BasicRelationship.getSourceId()
  overload: com.azure.digitaltwins.core.BasicRelationship.getSourceId*
  type: Method
  package: com.azure.digitaltwins.core
  summary: Gets the unique Id of the source digital twin. This field is present on every relationship.
  syntax:
    content: public String getSourceId()
    return:
      type: java.lang.String
      description: The unique Id of the source digital twin. This field is present on every relationship.
- uid: com.azure.digitaltwins.core.BasicRelationship.getTargetId()
  id: getTargetId()
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.BasicRelationship
  langs:
  - java
  name: getTargetId()
  nameWithType: BasicRelationship.getTargetId()
  fullName: com.azure.digitaltwins.core.BasicRelationship.getTargetId()
  overload: com.azure.digitaltwins.core.BasicRelationship.getTargetId*
  type: Method
  package: com.azure.digitaltwins.core
  summary: Gets the unique Id of the target digital twin. This field is present on every relationship.
  syntax:
    content: public String getTargetId()
    return:
      type: java.lang.String
      description: The unique Id of the target digital twin. This field is present on every relationship.
- uid: com.azure.digitaltwins.core.BasicRelationship.setETag(java.lang.String)
  id: setETag(java.lang.String)
  artifact: com.azure:azure-digitaltwins-core:1.0.1
  parent: com.azure.digitaltwins.core.BasicRelationship
  langs:
  - java
  name: setETag(String etag)
  nameWithType: BasicRelationship.setETag(String etag)
  fullName: com.azure.digitaltwins.core.BasicRelationship.setETag(String etag)
  overload: com.azure.digitaltwins.core.BasicRelationship.setETag*
  type: Method
  package: com.azure.digitaltwins.core
  summary: Sets a string representing a weak ETag for the entity that this request performs an operation against, as per RFC7232.
  syntax:
    content: public BasicRelationship setETag(String etag)
    parameters:
    - id: etag
      type: java.lang.String
      description: A string representing a weak ETag for the entity that this request performs an operation against, as per RFC7232.
    return:
      type: com.azure.digitaltwins.core.BasicRelationship
      description: The BasicRelationship object itself.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.digitaltwins.core.BasicRelationship.BasicRelationship*
  name: BasicRelationship
  nameWithType: BasicRelationship.BasicRelationship
  fullName: com.azure.digitaltwins.core.BasicRelationship.BasicRelationship
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.BasicRelationship.getId*
  name: getId
  nameWithType: BasicRelationship.getId
  fullName: com.azure.digitaltwins.core.BasicRelationship.getId
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.BasicRelationship.getSourceId*
  name: getSourceId
  nameWithType: BasicRelationship.getSourceId
  fullName: com.azure.digitaltwins.core.BasicRelationship.getSourceId
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.BasicRelationship.getTargetId*
  name: getTargetId
  nameWithType: BasicRelationship.getTargetId
  fullName: com.azure.digitaltwins.core.BasicRelationship.getTargetId
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.BasicRelationship.getName*
  name: getName
  nameWithType: BasicRelationship.getName
  fullName: com.azure.digitaltwins.core.BasicRelationship.getName
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.BasicRelationship.getETag*
  name: getETag
  nameWithType: BasicRelationship.getETag
  fullName: com.azure.digitaltwins.core.BasicRelationship.getETag
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.BasicRelationship.setETag*
  name: setETag
  nameWithType: BasicRelationship.setETag
  fullName: com.azure.digitaltwins.core.BasicRelationship.setETag
  package: com.azure.digitaltwins.core
- uid: java.util.Map<java.lang.String,java.lang.Object>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.BasicRelationship.getProperties*
  name: getProperties
  nameWithType: BasicRelationship.getProperties
  fullName: com.azure.digitaltwins.core.BasicRelationship.getProperties
  package: com.azure.digitaltwins.core
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.digitaltwins.core.BasicRelationship.addProperty*
  name: addProperty
  nameWithType: BasicRelationship.addProperty
  fullName: com.azure.digitaltwins.core.BasicRelationship.addProperty
  package: com.azure.digitaltwins.core
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.String,java.lang.Object
  name: String,Object
  nameWithType: String,Object
  fullName: java.lang.String,java.lang.Object
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
