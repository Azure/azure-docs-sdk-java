### YamlMime:JavaType
uid: "com.azure.digitaltwins.core.BasicRelationship"
fullName: "com.azure.digitaltwins.core.BasicRelationship"
name: "BasicRelationship"
nameWithType: "BasicRelationship"
summary: "Although relationships have a user-defined schema, these properties should exist on every instance."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **BasicRelationship**</br> implements <xref href=\"com.azure.json.JsonSerializable?alt=com.azure.json.JsonSerializable&text=JsonSerializable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.BasicRelationship?alt=com.azure.digitaltwins.core.BasicRelationship&text=BasicRelationship\" data-throw-if-not-resolved=\"False\" />&gt;"
constructors:
- uid: "com.azure.digitaltwins.core.BasicRelationship.BasicRelationship(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.digitaltwins.core.BasicRelationship.BasicRelationship(String relationshipId, String sourceDigitalTwinId, String targetDigitalTwinId, String relationshipName)"
  name: "BasicRelationship(String relationshipId, String sourceDigitalTwinId, String targetDigitalTwinId, String relationshipName)"
  nameWithType: "BasicRelationship.BasicRelationship(String relationshipId, String sourceDigitalTwinId, String targetDigitalTwinId, String relationshipName)"
  summary: "Construct a basic digital twin relationship."
  parameters:
  - description: "The unique Id of this relationship."
    name: "relationshipId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The digital twin that this relationship comes from."
    name: "sourceDigitalTwinId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The digital twin that this relationship points to."
    name: "targetDigitalTwinId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The user defined name of this relationship, for instance \"Contains\" or \"isAdjacentTo\""
    name: "relationshipName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public BasicRelationship(String relationshipId, String sourceDigitalTwinId, String targetDigitalTwinId, String relationshipName)"
  desc: "Construct a basic digital twin relationship."
methods:
- uid: "com.azure.digitaltwins.core.BasicRelationship.addProperty(java.lang.String,java.lang.Object)"
  fullName: "com.azure.digitaltwins.core.BasicRelationship.addProperty(String key, Object value)"
  name: "addProperty(String key, Object value)"
  nameWithType: "BasicRelationship.addProperty(String key, Object value)"
  summary: "Adds a custom property to this model."
  parameters:
  - description: "The key of the additional property to be added to the relationship."
    name: "key"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The value of the additional property to be added to the relationship."
    name: "value"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  syntax: "public BasicRelationship addProperty(String key, Object value)"
  desc: "Adds a custom property to this model. This field will contain any properties of the relationship that are not already defined by the other strong types of this class."
  returns:
    description: "The BasicRelationship object itself."
    type: "<xref href=\"com.azure.digitaltwins.core.BasicRelationship?alt=com.azure.digitaltwins.core.BasicRelationship&text=BasicRelationship\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.digitaltwins.core.BasicRelationship.fromJson(com.azure.json.JsonReader)"
  fullName: "com.azure.digitaltwins.core.BasicRelationship.fromJson(JsonReader jsonReader)"
  name: "fromJson(JsonReader jsonReader)"
  nameWithType: "BasicRelationship.fromJson(JsonReader jsonReader)"
  summary: "Reads an instance of Basic<wbr>Relationship from the Json<wbr>Reader."
  modifiers:
  - "static"
  parameters:
  - description: "The JsonReader being read."
    name: "jsonReader"
    type: "<xref href=\"com.azure.json.JsonReader?alt=com.azure.json.JsonReader&text=JsonReader\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static BasicRelationship fromJson(JsonReader jsonReader)"
  exceptions:
  - description: "If an error occurs while reading the BasicRelationship."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/IOException.html\">IOException</a>"
  desc: "Reads an instance of BasicRelationship from the JsonReader."
  returns:
    description: "An instance of BasicRelationship if the JsonReader was pointing to an instance of it, or null\n if it was pointing to JSON null."
    type: "<xref href=\"com.azure.digitaltwins.core.BasicRelationship?alt=com.azure.digitaltwins.core.BasicRelationship&text=BasicRelationship\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.digitaltwins.core.BasicRelationship.getETag()"
  fullName: "com.azure.digitaltwins.core.BasicRelationship.getETag()"
  name: "getETag()"
  nameWithType: "BasicRelationship.getETag()"
  summary: "Gets a string representing a weak ETag for the entity that this request performs an operation against, as per RFC7232."
  syntax: "public String getETag()"
  desc: "Gets a string representing a weak ETag for the entity that this request performs an operation against, as per RFC7232."
  returns:
    description: "A string representing a weak ETag for the entity that this request performs an operation against, as per\n RFC7232."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.digitaltwins.core.BasicRelationship.getId()"
  fullName: "com.azure.digitaltwins.core.BasicRelationship.getId()"
  name: "getId()"
  nameWithType: "BasicRelationship.getId()"
  summary: "Gets the unique ID of the relationship."
  syntax: "public String getId()"
  desc: "Gets the unique ID of the relationship. This field is present on every relationship."
  returns:
    description: "The unique ID of the relationship. This field is present on every relationship."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.digitaltwins.core.BasicRelationship.getName()"
  fullName: "com.azure.digitaltwins.core.BasicRelationship.getName()"
  name: "getName()"
  nameWithType: "BasicRelationship.getName()"
  summary: "Gets the name of the relationship, which defines the type of link (e.<wbr>g."
  syntax: "public String getName()"
  desc: "Gets the name of the relationship, which defines the type of link (e.g. Contains). This field is present on every relationship."
  returns:
    description: "The name of the relationship, which defines the type of link (e.g. Contains). This field is present on\n every relationship."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.digitaltwins.core.BasicRelationship.getProperties()"
  fullName: "com.azure.digitaltwins.core.BasicRelationship.getProperties()"
  name: "getProperties()"
  nameWithType: "BasicRelationship.getProperties()"
  summary: "Gets the additional custom properties defined in the model."
  syntax: "public Map<String,Object> getProperties()"
  desc: "Gets the additional custom properties defined in the model. This field will contain any properties of the relationship that are not already defined by the other strong types of this class."
  returns:
    description: "The additional custom properties defined in the model. This field will contain any properties of the\n relationship that are not already defined by the other strong types of this class."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Map.html\">Map</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>&gt;"
- uid: "com.azure.digitaltwins.core.BasicRelationship.getSourceId()"
  fullName: "com.azure.digitaltwins.core.BasicRelationship.getSourceId()"
  name: "getSourceId()"
  nameWithType: "BasicRelationship.getSourceId()"
  summary: "Gets the unique ID of the source digital twin."
  syntax: "public String getSourceId()"
  desc: "Gets the unique ID of the source digital twin. This field is present on every relationship."
  returns:
    description: "The unique ID of the source digital twin. This field is present on every relationship."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.digitaltwins.core.BasicRelationship.getTargetId()"
  fullName: "com.azure.digitaltwins.core.BasicRelationship.getTargetId()"
  name: "getTargetId()"
  nameWithType: "BasicRelationship.getTargetId()"
  summary: "Gets the unique ID of the target digital twin."
  syntax: "public String getTargetId()"
  desc: "Gets the unique ID of the target digital twin. This field is present on every relationship."
  returns:
    description: "The unique ID of the target digital twin. This field is present on every relationship."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.digitaltwins.core.BasicRelationship.setETag(java.lang.String)"
  fullName: "com.azure.digitaltwins.core.BasicRelationship.setETag(String etag)"
  name: "setETag(String etag)"
  nameWithType: "BasicRelationship.setETag(String etag)"
  summary: "Sets a string representing a weak ETag for the entity that this request performs an operation against, as per RFC7232."
  parameters:
  - description: "A string representing a weak ETag for the entity that this request performs an operation against, as\n per RFC7232."
    name: "etag"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public BasicRelationship setETag(String etag)"
  desc: "Sets a string representing a weak ETag for the entity that this request performs an operation against, as per RFC7232."
  returns:
    description: "The BasicRelationship object itself."
    type: "<xref href=\"com.azure.digitaltwins.core.BasicRelationship?alt=com.azure.digitaltwins.core.BasicRelationship&text=BasicRelationship\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.digitaltwins.core.BasicRelationship.toJson(com.azure.json.JsonWriter)"
  fullName: "com.azure.digitaltwins.core.BasicRelationship.toJson(JsonWriter jsonWriter)"
  name: "toJson(JsonWriter jsonWriter)"
  nameWithType: "BasicRelationship.toJson(JsonWriter jsonWriter)"
  parameters:
  - name: "jsonWriter"
    type: "<xref href=\"com.azure.json.JsonWriter?alt=com.azure.json.JsonWriter&text=JsonWriter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonWriter toJson(JsonWriter jsonWriter)"
  exceptions:
  - type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/IOException.html\">IOException</a>"
  returns:
    type: "<xref href=\"com.azure.json.JsonWriter?alt=com.azure.json.JsonWriter&text=JsonWriter\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Although relationships have a user-defined schema, these properties should exist on every instance. This is useful to use as a base class to ensure your custom relationships have the necessary properties.\n\nNote that this class uses <xref uid=\"com.azure.json.JsonSerializable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializable\"></xref> from `azure-json`. Because of this, this type will work with any implementation of `azure-json` but support for generic <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"objects\"></xref> is limited to what <xref uid=\"com.azure.json.JsonWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonWriter\"></xref> supports in <xref uid=\"com.azure.json.JsonWriter.writeUntyped*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonWriter#writeUntyped(Object)\"></xref>. In order to support custom objects, a custom serializer must be used."
implements:
- "<xref href=\"com.azure.json.JsonSerializable?alt=com.azure.json.JsonSerializable&text=JsonSerializable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.BasicRelationship?alt=com.azure.digitaltwins.core.BasicRelationship&text=BasicRelationship\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.digitaltwins.core"
artifact: com.azure:azure-digitaltwins-core:1.4.1
