### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  id: EventHubClientImpl
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.impl
  children:
  - com.microsoft.azure.eventhubs.impl.EventHubClientImpl.USER_AGENT
  - com.microsoft.azure.eventhubs.impl.EventHubClientImpl.create(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.ProxyConfiguration)
  - com.microsoft.azure.eventhubs.impl.EventHubClientImpl.create(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.ProxyConfiguration,java.time.Duration)
  - com.microsoft.azure.eventhubs.impl.EventHubClientImpl.create(java.net.URI,java.lang.String,com.microsoft.azure.eventhubs.ITokenProvider,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.EventHubClientOptions)
  - com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createBatch(com.microsoft.azure.eventhubs.BatchOptions)
  - com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createEpochReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,long)
  - com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createEpochReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,long,com.microsoft.azure.eventhubs.ReceiverOptions)
  - com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createPartitionSender(java.lang.String)
  - com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition)
  - com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,com.microsoft.azure.eventhubs.ReceiverOptions)
  - com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getEventHubName()
  - com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getPartitionRuntimeInformation(java.lang.String)
  - com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getRuntimeInformation()
  - com.microsoft.azure.eventhubs.impl.EventHubClientImpl.onClose()
  - com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(com.microsoft.azure.eventhubs.EventData)
  - com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(com.microsoft.azure.eventhubs.EventData,java.lang.String)
  - com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(com.microsoft.azure.eventhubs.EventDataBatch)
  - com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>)
  - com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>,java.lang.String)
  langs:
  - java
  name: EventHubClientImpl
  nameWithType: EventHubClientImpl
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  type: Class
  package: com.microsoft.azure.eventhubs.impl
  syntax:
    content: public final class EventHubClientImpl extends ClientEntity implements EventHubClient
  inheritance:
  - java.lang.Object
  - com.microsoft.azure.eventhubs.impl.ClientEntity
  implements:
  - com.microsoft.azure.eventhubs.EventHubClient
  inheritedMembers:
  - com.microsoft.azure.eventhubs.impl.ClientEntity.close()
  - com.microsoft.azure.eventhubs.impl.ClientEntity.closeSync()
  - com.microsoft.azure.eventhubs.impl.ClientEntity.getClientId()
  - com.microsoft.azure.eventhubs.impl.ClientEntity.getLastKnownError()
  - com.microsoft.azure.eventhubs.impl.ClientEntity.onClose()
  - com.microsoft.azure.eventhubs.impl.ClientEntity.setClosed()
  - com.microsoft.azure.eventhubs.impl.ClientEntity.throwIfClosed()
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.EventHubClientImpl(java.lang.String,java.util.concurrent.ScheduledExecutorService)
  id: EventHubClientImpl(java.lang.String,java.util.concurrent.ScheduledExecutorService)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  langs:
  - java
  name: EventHubClientImpl(String eventHubName, ScheduledExecutorService executor)
  nameWithType: EventHubClientImpl.EventHubClientImpl(String eventHubName, ScheduledExecutorService executor)
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.EventHubClientImpl(String eventHubName, ScheduledExecutorService executor)
  overload: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.EventHubClientImpl*
  type: Constructor
  package: com.microsoft.azure.eventhubs.impl
  syntax:
    content: private EventHubClientImpl(String eventHubName, ScheduledExecutorService executor)
    parameters:
    - id: eventHubName
      type: java.lang.String
    - id: executor
      type: java.util.concurrent.ScheduledExecutorService
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.USER_AGENT
  id: USER_AGENT
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  langs:
  - java
  name: USER_AGENT
  nameWithType: EventHubClientImpl.USER_AGENT
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.USER_AGENT
  type: Field
  package: com.microsoft.azure.eventhubs.impl
  summary: It will be truncated to 128 characters
  syntax:
    content: public static String USER_AGENT
    return:
      type: java.lang.String
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.create(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.ProxyConfiguration)
  id: create(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.ProxyConfiguration)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  langs:
  - java
  name: create(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration proxyConfiguration)
  nameWithType: EventHubClientImpl.create(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration proxyConfiguration)
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.create(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration proxyConfiguration)
  overload: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.create*
  type: Method
  package: com.microsoft.azure.eventhubs.impl
  syntax:
    content: public static CompletableFuture<EventHubClient> create(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration proxyConfiguration)
    parameters:
    - id: connectionString
      type: java.lang.String
    - id: retryPolicy
      type: com.microsoft.azure.eventhubs.RetryPolicy
    - id: executor
      type: java.util.concurrent.ScheduledExecutorService
    - id: proxyConfiguration
      type: com.microsoft.azure.eventhubs.ProxyConfiguration
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.EventHubClient>
  exceptions:
  - type: java.io.IOException
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.create(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.ProxyConfiguration,java.time.Duration)
  id: create(java.lang.String,com.microsoft.azure.eventhubs.RetryPolicy,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.ProxyConfiguration,java.time.Duration)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  langs:
  - java
  name: create(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration proxyConfiguration, Duration watchdogTriggerTime)
  nameWithType: EventHubClientImpl.create(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration proxyConfiguration, Duration watchdogTriggerTime)
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.create(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration proxyConfiguration, Duration watchdogTriggerTime)
  overload: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.create*
  type: Method
  package: com.microsoft.azure.eventhubs.impl
  syntax:
    content: public static CompletableFuture<EventHubClient> create(String connectionString, RetryPolicy retryPolicy, ScheduledExecutorService executor, ProxyConfiguration proxyConfiguration, Duration watchdogTriggerTime)
    parameters:
    - id: connectionString
      type: java.lang.String
    - id: retryPolicy
      type: com.microsoft.azure.eventhubs.RetryPolicy
    - id: executor
      type: java.util.concurrent.ScheduledExecutorService
    - id: proxyConfiguration
      type: com.microsoft.azure.eventhubs.ProxyConfiguration
    - id: watchdogTriggerTime
      type: java.time.Duration
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.EventHubClient>
  exceptions:
  - type: java.io.IOException
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.create(java.net.URI,java.lang.String,com.microsoft.azure.eventhubs.ITokenProvider,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.EventHubClientOptions)
  id: create(java.net.URI,java.lang.String,com.microsoft.azure.eventhubs.ITokenProvider,java.util.concurrent.ScheduledExecutorService,com.microsoft.azure.eventhubs.EventHubClientOptions)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  langs:
  - java
  name: create(URI endpoint, String eventHubName, ITokenProvider tokenProvider, ScheduledExecutorService executor, EventHubClientOptions options)
  nameWithType: EventHubClientImpl.create(URI endpoint, String eventHubName, ITokenProvider tokenProvider, ScheduledExecutorService executor, EventHubClientOptions options)
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.create(URI endpoint, String eventHubName, ITokenProvider tokenProvider, ScheduledExecutorService executor, EventHubClientOptions options)
  overload: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.create*
  type: Method
  package: com.microsoft.azure.eventhubs.impl
  syntax:
    content: public static CompletableFuture<EventHubClient> create(URI endpoint, String eventHubName, ITokenProvider tokenProvider, ScheduledExecutorService executor, EventHubClientOptions options)
    parameters:
    - id: endpoint
      type: java.net.URI
    - id: eventHubName
      type: java.lang.String
    - id: tokenProvider
      type: com.microsoft.azure.eventhubs.ITokenProvider
    - id: executor
      type: java.util.concurrent.ScheduledExecutorService
    - id: options
      type: com.microsoft.azure.eventhubs.EventHubClientOptions
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.EventHubClient>
  exceptions:
  - type: java.io.IOException
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createBatch(com.microsoft.azure.eventhubs.BatchOptions)
  id: createBatch(com.microsoft.azure.eventhubs.BatchOptions)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  langs:
  - java
  name: createBatch(BatchOptions options)
  nameWithType: EventHubClientImpl.createBatch(BatchOptions options)
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createBatch(BatchOptions options)
  overload: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createBatch*
  type: Method
  package: com.microsoft.azure.eventhubs.impl
  summary: Creates an Empty Collection of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>. The same partitionKey must be used while sending these events using <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventDataBatch)" data-throw-if-not-resolved="false">EventHubClient#send(EventDataBatch)</xref>.
  syntax:
    content: public EventDataBatch createBatch(BatchOptions options)
    parameters:
    - id: options
      type: com.microsoft.azure.eventhubs.BatchOptions
    return:
      type: com.microsoft.azure.eventhubs.EventDataBatch
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createEpochReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,long)
  id: createEpochReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,long)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  langs:
  - java
  name: createEpochReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch)
  nameWithType: EventHubClientImpl.createEpochReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch)
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createEpochReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch)
  overload: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createEpochReceiver*
  type: Method
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    Create a Epoch based EventHub receiver with given partition id and start receiving from the beginning of the partition stream. The receiver is created for a specific EventHub Partition from the specific consumer group.


    It is important to pay attention to the following when creating epoch based receiver:

     *  Ownership enforcement - Once you created an epoch based receiver, you cannot create a non-epoch receiver to the same consumerGroup-Partition combo until all receivers to the combo are closed.
     *  Ownership stealing - If a receiver with higher epoch value is created for a consumerGroup-Partition combo, any older epoch receiver to that combo will be force closed.
     *  Any receiver closed due to lost of ownership to a consumerGroup-Partition combo will get ReceiverDisconnectedException for all operations from that receiver.
  syntax:
    content: public CompletableFuture<PartitionReceiver> createEpochReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch)
    parameters:
    - id: consumerGroupName
      type: java.lang.String
    - id: partitionId
      type: java.lang.String
    - id: eventPosition
      type: com.microsoft.azure.eventhubs.EventPosition
    - id: epoch
      type: long
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.PartitionReceiver>
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createEpochReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,long,com.microsoft.azure.eventhubs.ReceiverOptions)
  id: createEpochReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,long,com.microsoft.azure.eventhubs.ReceiverOptions)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  langs:
  - java
  name: createEpochReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch, ReceiverOptions receiverOptions)
  nameWithType: EventHubClientImpl.createEpochReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch, ReceiverOptions receiverOptions)
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createEpochReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch, ReceiverOptions receiverOptions)
  overload: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createEpochReceiver*
  type: Method
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    Create a Epoch based EventHub receiver with given partition id and start receiving from the beginning of the partition stream. The receiver is created for a specific EventHub Partition from the specific consumer group.


    It is important to pay attention to the following when creating epoch based receiver:

     *  Ownership enforcement - Once you created an epoch based receiver, you cannot create a non-epoch receiver to the same consumerGroup-Partition combo until all receivers to the combo are closed.
     *  Ownership stealing - If a receiver with higher epoch value is created for a consumerGroup-Partition combo, any older epoch receiver to that combo will be force closed.
     *  Any receiver closed due to lost of ownership to a consumerGroup-Partition combo will get ReceiverDisconnectedException for all operations from that receiver.
  syntax:
    content: public CompletableFuture<PartitionReceiver> createEpochReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, long epoch, ReceiverOptions receiverOptions)
    parameters:
    - id: consumerGroupName
      type: java.lang.String
    - id: partitionId
      type: java.lang.String
    - id: eventPosition
      type: com.microsoft.azure.eventhubs.EventPosition
    - id: epoch
      type: long
    - id: receiverOptions
      type: com.microsoft.azure.eventhubs.ReceiverOptions
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.PartitionReceiver>
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createPartitionSender(java.lang.String)
  id: createPartitionSender(java.lang.String)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  langs:
  - java
  name: createPartitionSender(String partitionId)
  nameWithType: EventHubClientImpl.createPartitionSender(String partitionId)
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createPartitionSender(String partitionId)
  overload: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createPartitionSender*
  type: Method
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    Create a <xref uid="com.microsoft.azure.eventhubs.PartitionSender" data-throw-if-not-resolved="false">PartitionSender</xref> which can publish <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s directly to a specific EventHub partition (sender type iii. in the below list).


    There are 3 patterns/ways to send to EventHubs:


    ```java

    i.   #send(EventData) or #send(Iterable)
     ii.  #send(EventData, String) or #send(Iterable, String)
     iii. PartitionSender#send(EventData) or PartitionSender#send(Iterable)
    ```
  syntax:
    content: public CompletableFuture<PartitionSender> createPartitionSender(String partitionId)
    parameters:
    - id: partitionId
      type: java.lang.String
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.PartitionSender>
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition)
  id: createReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  langs:
  - java
  name: createReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition)
  nameWithType: EventHubClientImpl.createReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition)
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition)
  overload: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createReceiver*
  type: Method
  package: com.microsoft.azure.eventhubs.impl
  summary: Create the EventHub receiver with given partition id and start receiving from the specified starting offset. The receiver is created for a specific EventHub Partition from the specific consumer group.
  syntax:
    content: public CompletableFuture<PartitionReceiver> createReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition)
    parameters:
    - id: consumerGroupName
      type: java.lang.String
    - id: partitionId
      type: java.lang.String
    - id: eventPosition
      type: com.microsoft.azure.eventhubs.EventPosition
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.PartitionReceiver>
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,com.microsoft.azure.eventhubs.ReceiverOptions)
  id: createReceiver(java.lang.String,java.lang.String,com.microsoft.azure.eventhubs.EventPosition,com.microsoft.azure.eventhubs.ReceiverOptions)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  langs:
  - java
  name: createReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, ReceiverOptions receiverOptions)
  nameWithType: EventHubClientImpl.createReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, ReceiverOptions receiverOptions)
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, ReceiverOptions receiverOptions)
  overload: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createReceiver*
  type: Method
  package: com.microsoft.azure.eventhubs.impl
  summary: Create the EventHub receiver with given partition id and start receiving from the specified starting offset. The receiver is created for a specific EventHub Partition from the specific consumer group.
  syntax:
    content: public CompletableFuture<PartitionReceiver> createReceiver(String consumerGroupName, String partitionId, EventPosition eventPosition, ReceiverOptions receiverOptions)
    parameters:
    - id: consumerGroupName
      type: java.lang.String
    - id: partitionId
      type: java.lang.String
    - id: eventPosition
      type: com.microsoft.azure.eventhubs.EventPosition
    - id: receiverOptions
      type: com.microsoft.azure.eventhubs.ReceiverOptions
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.PartitionReceiver>
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getEventHubName()
  id: getEventHubName()
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  langs:
  - java
  name: getEventHubName()
  nameWithType: EventHubClientImpl.getEventHubName()
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getEventHubName()
  overload: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getEventHubName*
  type: Method
  package: com.microsoft.azure.eventhubs.impl
  syntax:
    content: public String getEventHubName()
    return:
      type: java.lang.String
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getPartitionRuntimeInformation(java.lang.String)
  id: getPartitionRuntimeInformation(java.lang.String)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  langs:
  - java
  name: getPartitionRuntimeInformation(String partitionId)
  nameWithType: EventHubClientImpl.getPartitionRuntimeInformation(String partitionId)
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getPartitionRuntimeInformation(String partitionId)
  overload: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getPartitionRuntimeInformation*
  type: Method
  package: com.microsoft.azure.eventhubs.impl
  summary: Retrieves dynamic information about a partition of an event hub (see <xref uid="com.microsoft.azure.eventhubs.PartitionRuntimeInformation" data-throw-if-not-resolved="false">PartitionRuntimeInformation</xref> for details. Retries until it reaches the operation timeout, then either rethrows the last error if available or returns null to indicate timeout.
  syntax:
    content: public CompletableFuture<PartitionRuntimeInformation> getPartitionRuntimeInformation(String partitionId)
    parameters:
    - id: partitionId
      type: java.lang.String
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.PartitionRuntimeInformation>
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getRuntimeInformation()
  id: getRuntimeInformation()
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  langs:
  - java
  name: getRuntimeInformation()
  nameWithType: EventHubClientImpl.getRuntimeInformation()
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getRuntimeInformation()
  overload: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getRuntimeInformation*
  type: Method
  package: com.microsoft.azure.eventhubs.impl
  summary: Retrieves general information about an event hub (see <xref uid="com.microsoft.azure.eventhubs.EventHubRuntimeInformation" data-throw-if-not-resolved="false">EventHubRuntimeInformation</xref> for details). Retries until it reaches the operation timeout, then either rethrows the last error if available or returns null to indicate timeout.
  syntax:
    content: public CompletableFuture<EventHubRuntimeInformation> getRuntimeInformation()
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.EventHubRuntimeInformation>
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.onClose()
  id: onClose()
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  langs:
  - java
  name: onClose()
  nameWithType: EventHubClientImpl.onClose()
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.onClose()
  overload: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.onClose*
  type: Method
  package: com.microsoft.azure.eventhubs.impl
  syntax:
    content: public CompletableFuture<Void> onClose()
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(com.microsoft.azure.eventhubs.EventData)
  id: send(com.microsoft.azure.eventhubs.EventData)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  langs:
  - java
  name: send(EventData data)
  nameWithType: EventHubClientImpl.send(EventData data)
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(EventData data)
  overload: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send*
  type: Method
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    Send <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> will land on any arbitrarily chosen EventHubs partition.


    There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload):

     *  <xref uid="com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(com.microsoft.azure.eventhubs.EventData)" data-throw-if-not-resolved="false">#send(EventData)</xref>, <xref uid="com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(java.lang.Iterable&lt;com.microsoft.azure.eventhubs.EventData&gt;)" data-throw-if-not-resolved="false">#send(Iterable)</xref>, or <xref uid="com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(com.microsoft.azure.eventhubs.EventDataBatch)" data-throw-if-not-resolved="false">#send(EventDataBatch)</xref>
     *  <xref uid="com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(com.microsoft.azure.eventhubs.EventData,java.lang.String)" data-throw-if-not-resolved="false">#send(EventData, String)</xref> or <xref uid="com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(java.lang.Iterable&lt;com.microsoft.azure.eventhubs.EventData&gt;,java.lang.String)" data-throw-if-not-resolved="false">#send(Iterable, String)</xref>
     *  <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(com.microsoft.azure.eventhubs.EventData)" data-throw-if-not-resolved="false">PartitionSender#send(EventData)</xref>, <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(java.lang.Iterable&lt;com.microsoft.azure.eventhubs.EventData&gt;)" data-throw-if-not-resolved="false">PartitionSender#send(Iterable)</xref>, or <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(com.microsoft.azure.eventhubs.EventDataBatch)" data-throw-if-not-resolved="false">PartitionSender#send(EventDataBatch)</xref>

    Use this method to Send, if:


    ```java

    a)  the send(EventData) operation should be highly available and
     b)  the data needs to be evenly distributed among all partitions; exception being, when a subset of partitions are unavailable
    ```


    <xref uid="com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(com.microsoft.azure.eventhubs.EventData)" data-throw-if-not-resolved="false">#send(EventData)</xref> send's the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to a Service Gateway, which in-turn will forward the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to one of the EventHubs' partitions. Here's the message forwarding algorithm:


    ```java

    i.  Forward the EventData's to EventHub partitions, by equally distributing the data among all partitions (ex: Round-robin the EventData's to all EventHubs' partitions)
     ii. If one of the EventHub partitions is unavailable for a moment, the Service Gateway will automatically detect it and forward the message to another available partition - making the Send operation highly-available.
    ```
  syntax:
    content: public CompletableFuture<Void> send(EventData data)
    parameters:
    - id: data
      type: com.microsoft.azure.eventhubs.EventData
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(com.microsoft.azure.eventhubs.EventData,java.lang.String)
  id: send(com.microsoft.azure.eventhubs.EventData,java.lang.String)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  langs:
  - java
  name: send(EventData eventData, String partitionKey)
  nameWithType: EventHubClientImpl.send(EventData eventData, String partitionKey)
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(EventData eventData, String partitionKey)
  overload: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send*
  type: Method
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    Send an '<xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> with a partitionKey' to EventHub. All <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s with a partitionKey are guaranteed to land on the same partition. This send pattern emphasize data correlation over general availability and latency.


    There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload):


    ```java

    i.   #send(EventData) or #send(Iterable)
     ii.  #send(EventData, String) or #send(Iterable, String)
     iii. PartitionSender#send(EventData) or PartitionSender#send(Iterable)
    ```


    Use this type of Send, if:


    ```java

    i.  There is a need for correlation of events based on Sender instance; The sender can generate a UniqueId and set it as partitionKey - which on the received Message can be used for correlation
     ii. The client wants to take control of distribution of data across partitions.
    ```


    Multiple PartitionKey's could be mapped to one Partition. EventHubs service uses a proprietary Hash algorithm to map the PartitionKey to a PartitionId. Using this type of Send (Sending using a specific partitionKey), could sometimes result in partitions which are not evenly distributed.
  syntax:
    content: public CompletableFuture<Void> send(EventData eventData, String partitionKey)
    parameters:
    - id: eventData
      type: com.microsoft.azure.eventhubs.EventData
    - id: partitionKey
      type: java.lang.String
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(com.microsoft.azure.eventhubs.EventDataBatch)
  id: send(com.microsoft.azure.eventhubs.EventDataBatch)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  langs:
  - java
  name: send(EventDataBatch eventDatas)
  nameWithType: EventHubClientImpl.send(EventDataBatch eventDatas)
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(EventDataBatch eventDatas)
  overload: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send*
  type: Method
  package: com.microsoft.azure.eventhubs.impl
  summary: Send <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false">EventDataBatch</xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false">EventDataBatch</xref> will land according the partition key set in the <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false">EventDataBatch</xref>. If a partition key is not set, then we will Round-robin the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s to all EventHubs' partitions.
  syntax:
    content: public CompletableFuture<Void> send(EventDataBatch eventDatas)
    parameters:
    - id: eventDatas
      type: com.microsoft.azure.eventhubs.EventDataBatch
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>)
  id: send(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  langs:
  - java
  name: send(Iterable<EventData> eventDatas)
  nameWithType: EventHubClientImpl.send(Iterable<EventData> eventDatas)
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(Iterable<EventData> eventDatas)
  overload: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send*
  type: Method
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    Send a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> will land on any arbitrarily chosen EventHubs partition. This is the most recommended way to Send to EventHubs.


    There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid="com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(com.microsoft.azure.eventhubs.EventData)" data-throw-if-not-resolved="false">#send(EventData)</xref>, which is used to send single <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>. Use this overload versus <xref uid="com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(com.microsoft.azure.eventhubs.EventData)" data-throw-if-not-resolved="false">#send(EventData)</xref>, if you need to send a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>.


    Sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s is useful in the following cases:


    ```java

    i.   Efficient send - sending a batch of EventData maximizes the overall throughput by optimally using the number of sessions created to EventHubs' service.
     ii.  Send multiple EventData's in a Transaction. To achieve ACID properties, the Gateway Service will forward all EventData's in the batch to a single EventHubs' partition.
    ```


    Sample code (sample uses sync version of the api but concept are identical):


    ```java

    Gson gson = new GsonBuilder().create();
     EventHubClient client = EventHubClient.createSync("__connection__");

     while (true)
     {
         LinkedList events = new LinkedList();}
         for (int count = 1; count < 11; count++)
         {
             PayloadEvent payload = new PayloadEvent(count);
             byte[] payloadBytes = gson.toJson(payload).getBytes(Charset.defaultCharset());
             EventData sendEvent = new EventData(payloadBytes);
             sendEvent.getProperties().put("from", "javaClient");
             events.add(sendEvent);
         }

         client.sendSync(events);
         System.out.println(String.format("Sent Batch... Size: %s", events.size()));
     }
    ```


    for Exceptions refer to <xref uid="com.microsoft.azure.eventhubs.impl.EventHubClientImpl.sendSync*" data-throw-if-not-resolved="false">#sendSync(Iterable)</xref>
  syntax:
    content: public CompletableFuture<Void> send(Iterable<EventData> eventDatas)
    parameters:
    - id: eventDatas
      type: java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>,java.lang.String)
  id: send(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>,java.lang.String)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  langs:
  - java
  name: send(Iterable<EventData> eventDatas, String partitionKey)
  nameWithType: EventHubClientImpl.send(Iterable<EventData> eventDatas, String partitionKey)
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(Iterable<EventData> eventDatas, String partitionKey)
  overload: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send*
  type: Method
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    Send a 'batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> with the same partitionKey' to EventHub. All <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s with a partitionKey are guaranteed to land on the same partition. Multiple PartitionKey's will be mapped to one Partition.


    There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid="com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(com.microsoft.azure.eventhubs.EventData,java.lang.String)" data-throw-if-not-resolved="false">#send(EventData, String)</xref>, which is the same type of Send and is used to send single <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>.


    Sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s is useful in the following cases:


    ```java

    i.   Efficient send - sending a batch of EventData maximizes the overall throughput by optimally using the number of sessions created to EventHubs service.
     ii.  Send multiple events in One Transaction. This is the reason why all events sent in a batch needs to have same partitionKey (so that they are sent to one partition only).
    ```
  syntax:
    content: public CompletableFuture<Void> send(Iterable<EventData> eventDatas, String partitionKey)
    parameters:
    - id: eventDatas
      type: java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>
    - id: partitionKey
      type: java.lang.String
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: java.util.concurrent.ScheduledExecutorService
  spec.java:
  - uid: java.util.concurrent.ScheduledExecutorService
    name: ScheduledExecutorService
    fullName: java.util.concurrent.ScheduledExecutorService
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.EventHubClientImpl*
  name: EventHubClientImpl
  nameWithType: EventHubClientImpl.EventHubClientImpl
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.EventHubClientImpl
  package: com.microsoft.azure.eventhubs.impl
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.microsoft.azure.eventhubs.RetryPolicy
  name: RetryPolicy
  nameWithType: RetryPolicy
  fullName: com.microsoft.azure.eventhubs.RetryPolicy
- uid: com.microsoft.azure.eventhubs.ProxyConfiguration
  name: ProxyConfiguration
  nameWithType: ProxyConfiguration
  fullName: com.microsoft.azure.eventhubs.ProxyConfiguration
- uid: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.EventHubClient>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: com.microsoft.azure.eventhubs.EventHubClient
    name: EventHubClient
    fullName: com.microsoft.azure.eventhubs.EventHubClient
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.create*
  name: create
  nameWithType: EventHubClientImpl.create
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.create
  package: com.microsoft.azure.eventhubs.impl
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: java.net.URI
  spec.java:
  - uid: java.net.URI
    name: URI
    fullName: java.net.URI
- uid: com.microsoft.azure.eventhubs.ITokenProvider
  name: ITokenProvider
  nameWithType: ITokenProvider
  fullName: com.microsoft.azure.eventhubs.ITokenProvider
- uid: com.microsoft.azure.eventhubs.EventHubClientOptions
  name: EventHubClientOptions
  nameWithType: EventHubClientOptions
  fullName: com.microsoft.azure.eventhubs.EventHubClientOptions
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getEventHubName*
  name: getEventHubName
  nameWithType: EventHubClientImpl.getEventHubName
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getEventHubName
  package: com.microsoft.azure.eventhubs.impl
- uid: com.microsoft.azure.eventhubs.EventHubException
  name: EventHubException
  nameWithType: EventHubException
  fullName: com.microsoft.azure.eventhubs.EventHubException
- uid: com.microsoft.azure.eventhubs.BatchOptions
  name: BatchOptions
  nameWithType: BatchOptions
  fullName: com.microsoft.azure.eventhubs.BatchOptions
- uid: com.microsoft.azure.eventhubs.EventDataBatch
  name: EventDataBatch
  nameWithType: EventDataBatch
  fullName: com.microsoft.azure.eventhubs.EventDataBatch
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createBatch*
  name: createBatch
  nameWithType: EventHubClientImpl.createBatch
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createBatch
  package: com.microsoft.azure.eventhubs.impl
- uid: com.microsoft.azure.eventhubs.EventData
  name: EventData
  nameWithType: EventData
  fullName: com.microsoft.azure.eventhubs.EventData
- uid: java.util.concurrent.CompletableFuture<java.lang.Void>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send*
  name: send
  nameWithType: EventHubClientImpl.send
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send
  package: com.microsoft.azure.eventhubs.impl
- uid: java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: com.microsoft.azure.eventhubs.EventData
    name: EventData
    fullName: com.microsoft.azure.eventhubs.EventData
  - name: '>'
    fullName: '>'
- uid: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.PartitionSender>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: com.microsoft.azure.eventhubs.PartitionSender
    name: PartitionSender
    fullName: com.microsoft.azure.eventhubs.PartitionSender
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createPartitionSender*
  name: createPartitionSender
  nameWithType: EventHubClientImpl.createPartitionSender
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createPartitionSender
  package: com.microsoft.azure.eventhubs.impl
- uid: com.microsoft.azure.eventhubs.EventPosition
  name: EventPosition
  nameWithType: EventPosition
  fullName: com.microsoft.azure.eventhubs.EventPosition
- uid: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.PartitionReceiver>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: com.microsoft.azure.eventhubs.PartitionReceiver
    name: PartitionReceiver
    fullName: com.microsoft.azure.eventhubs.PartitionReceiver
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createReceiver*
  name: createReceiver
  nameWithType: EventHubClientImpl.createReceiver
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createReceiver
  package: com.microsoft.azure.eventhubs.impl
- uid: com.microsoft.azure.eventhubs.ReceiverOptions
  name: ReceiverOptions
  nameWithType: ReceiverOptions
  fullName: com.microsoft.azure.eventhubs.ReceiverOptions
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createEpochReceiver*
  name: createEpochReceiver
  nameWithType: EventHubClientImpl.createEpochReceiver
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createEpochReceiver
  package: com.microsoft.azure.eventhubs.impl
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.onClose*
  name: onClose
  nameWithType: EventHubClientImpl.onClose
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.onClose
  package: com.microsoft.azure.eventhubs.impl
- uid: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.EventHubRuntimeInformation>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: com.microsoft.azure.eventhubs.EventHubRuntimeInformation
    name: EventHubRuntimeInformation
    fullName: com.microsoft.azure.eventhubs.EventHubRuntimeInformation
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getRuntimeInformation*
  name: getRuntimeInformation
  nameWithType: EventHubClientImpl.getRuntimeInformation
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getRuntimeInformation
  package: com.microsoft.azure.eventhubs.impl
- uid: java.util.concurrent.CompletableFuture<com.microsoft.azure.eventhubs.PartitionRuntimeInformation>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: com.microsoft.azure.eventhubs.PartitionRuntimeInformation
    name: PartitionRuntimeInformation
    fullName: com.microsoft.azure.eventhubs.PartitionRuntimeInformation
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getPartitionRuntimeInformation*
  name: getPartitionRuntimeInformation
  nameWithType: EventHubClientImpl.getPartitionRuntimeInformation
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getPartitionRuntimeInformation
  package: com.microsoft.azure.eventhubs.impl
- uid: com.microsoft.azure.eventhubs.impl.ClientEntity
  name: ClientEntity
  nameWithType: ClientEntity
  fullName: com.microsoft.azure.eventhubs.impl.ClientEntity
- uid: com.microsoft.azure.eventhubs.EventHubClient
  name: EventHubClient
  nameWithType: EventHubClient
  fullName: com.microsoft.azure.eventhubs.EventHubClient
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.microsoft.azure.eventhubs.impl.ClientEntity.getClientId()
  name: ClientEntity.getClientId()
  nameWithType: ClientEntity.getClientId()
  fullName: com.microsoft.azure.eventhubs.impl.ClientEntity.getClientId()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.microsoft.azure.eventhubs.impl.ClientEntity.throwIfClosed()
  name: ClientEntity.throwIfClosed()
  nameWithType: ClientEntity.throwIfClosed()
  fullName: com.microsoft.azure.eventhubs.impl.ClientEntity.throwIfClosed()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.microsoft.azure.eventhubs.impl.ClientEntity.close()
  name: ClientEntity.close()
  nameWithType: ClientEntity.close()
  fullName: com.microsoft.azure.eventhubs.impl.ClientEntity.close()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.microsoft.azure.eventhubs.impl.ClientEntity.setClosed()
  name: ClientEntity.setClosed()
  nameWithType: ClientEntity.setClosed()
  fullName: com.microsoft.azure.eventhubs.impl.ClientEntity.setClosed()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.microsoft.azure.eventhubs.impl.ClientEntity.closeSync()
  name: ClientEntity.closeSync()
  nameWithType: ClientEntity.closeSync()
  fullName: com.microsoft.azure.eventhubs.impl.ClientEntity.closeSync()
- uid: com.microsoft.azure.eventhubs.impl.ClientEntity.getLastKnownError()
  name: ClientEntity.getLastKnownError()
  nameWithType: ClientEntity.getLastKnownError()
  fullName: com.microsoft.azure.eventhubs.impl.ClientEntity.getLastKnownError()
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.eventhubs.impl.ClientEntity.onClose()
  name: ClientEntity.onClose()
  nameWithType: ClientEntity.onClose()
  fullName: com.microsoft.azure.eventhubs.impl.ClientEntity.onClose()
- uid: java.util.concurrent.CompletableFuture
  name: CompletableFuture
  nameWithType: CompletableFuture
  fullName: java.util.concurrent.CompletableFuture
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: com.microsoft.azure.eventhubs.PartitionSender
  name: PartitionSender
  nameWithType: PartitionSender
  fullName: com.microsoft.azure.eventhubs.PartitionSender
- uid: com.microsoft.azure.eventhubs.PartitionReceiver
  name: PartitionReceiver
  nameWithType: PartitionReceiver
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver
- uid: com.microsoft.azure.eventhubs.EventHubRuntimeInformation
  name: EventHubRuntimeInformation
  nameWithType: EventHubRuntimeInformation
  fullName: com.microsoft.azure.eventhubs.EventHubRuntimeInformation
- uid: com.microsoft.azure.eventhubs.PartitionRuntimeInformation
  name: PartitionRuntimeInformation
  nameWithType: PartitionRuntimeInformation
  fullName: com.microsoft.azure.eventhubs.PartitionRuntimeInformation
