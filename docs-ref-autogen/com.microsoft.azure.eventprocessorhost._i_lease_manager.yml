### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager
  id: _i_lease_manager
  parent: com.microsoft.azure.eventprocessorhost
  children:
  - com.microsoft.azure.eventprocessorhost._i_lease_manager.acquireLease(Lease)
  - com.microsoft.azure.eventprocessorhost._i_lease_manager.createLeaseIfNotExists(String)
  - com.microsoft.azure.eventprocessorhost._i_lease_manager.createLeaseStoreIfNotExists()
  - com.microsoft.azure.eventprocessorhost._i_lease_manager.deleteLease(Lease)
  - com.microsoft.azure.eventprocessorhost._i_lease_manager.deleteLeaseStore()
  - com.microsoft.azure.eventprocessorhost._i_lease_manager.getAllLeases()
  - com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease(String)
  - com.microsoft.azure.eventprocessorhost._i_lease_manager.getLeaseDurationInMilliseconds()
  - com.microsoft.azure.eventprocessorhost._i_lease_manager.getLeaseRenewIntervalInMilliseconds()
  - com.microsoft.azure.eventprocessorhost._i_lease_manager.leaseStoreExists()
  - com.microsoft.azure.eventprocessorhost._i_lease_manager.releaseLease(Lease)
  - com.microsoft.azure.eventprocessorhost._i_lease_manager.renewLease(Lease)
  - com.microsoft.azure.eventprocessorhost._i_lease_manager.updateLease(Lease)
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  langs:
  - java
  name: ILeaseManager
  nameWithType: ILeaseManager
  fullName: com.microsoft.azure.eventprocessorhost.ILeaseManager
  type: Interface
  source:
    remote: &o0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-java
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
    startLine: 20
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public interface ILeaseManager
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.acquireLease(Lease)
  id: acquireLease(Lease)
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  langs:
  - java
  name: acquireLease(Lease lease)
  nameWithType: ILeaseManager.acquireLease(Lease lease)
  fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.acquireLease(Lease lease)
  overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.acquireLease*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
    startLine: 105
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Acquire the lease on the desired partition for this <xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref>.</p>

    <p>Note that it is legal to acquire a lease that is already owned by another host. Lease-stealing is how partitions are redistributed when additional hosts are started.</p>

    <p></p>
  syntax: &o2
    content: public Future<Boolean> acquireLease(Lease lease)
    parameters:
    - id: lease
      type: com.microsoft.azure.eventprocessorhost._lease
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false">Lease</xref> info for the desired partition as previously obtained from <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease(String)" data-throw-if-not-resolved="false">getLease()</xref></p>
    return:
      type: ec0e250a
      description: <p>true if the lease was acquired successfully, false if not </p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.createLeaseIfNotExists(String)
  id: createLeaseIfNotExists(String)
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  langs:
  - java
  name: createLeaseIfNotExists(String partitionId)
  nameWithType: ILeaseManager.createLeaseIfNotExists(String partitionId)
  fullName: Future<Lease> com.microsoft.azure.eventprocessorhost.ILeaseManager.createLeaseIfNotExists(String partitionId)
  overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.createLeaseIfNotExists*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
    startLine: 85
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Create in the store the lease info for the given partition, if it does not exist. Do nothing if it does exist in the store already.</p>

    <p></p>
  syntax:
    content: public Future<Lease> createLeaseIfNotExists(String partitionId)
    parameters:
    - id: partitionId
      type: "26831127"
      description: <p>id of partition to create lease info for </p>
    return:
      type: 9b3030f6com.microsoft.azure.eventprocessorhost._leasea08ddfce
      description: <p>the existing or newly-created lease info for the partition </p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.createLeaseStoreIfNotExists()
  id: createLeaseStoreIfNotExists()
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  langs:
  - java
  name: createLeaseStoreIfNotExists()
  nameWithType: ILeaseManager.createLeaseStoreIfNotExists()
  fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.createLeaseStoreIfNotExists()
  overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.createLeaseStoreIfNotExists*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
    startLine: 51
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Create the lease store if it does not exist, do nothing if it does exist.</p>

    <p></p>
  syntax:
    content: public Future<Boolean> createLeaseStoreIfNotExists()
    return:
      type: ec0e250a
      description: <p>true if the lease store already exists or was created successfully, false if not </p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.deleteLease(Lease)
  id: deleteLease(Lease)
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  langs:
  - java
  name: deleteLease(Lease lease)
  nameWithType: ILeaseManager.deleteLease(Lease lease)
  fullName: Future<Void> com.microsoft.azure.eventprocessorhost.ILeaseManager.deleteLease(Lease lease)
  overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.deleteLease*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
    startLine: 94
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Delete the lease info for the given partition from the store. If there is no stored lease for the given partition, that is treated as success.</p>

    <p></p>
  syntax:
    content: public Future<Void> deleteLease(Lease lease)
    parameters:
    - id: lease
      type: com.microsoft.azure.eventprocessorhost._lease
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false">Lease</xref> info for the desired partition as previously obtained from <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease(String)" data-throw-if-not-resolved="false">getLease()</xref></p>
    return:
      type: 075d0a89
      description: <p>Void </p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.deleteLeaseStore()
  id: deleteLeaseStore()
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  langs:
  - java
  name: deleteLeaseStore()
  nameWithType: ILeaseManager.deleteLeaseStore()
  fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.deleteLeaseStore()
  overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.deleteLeaseStore*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
    startLine: 58
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Not used by <xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref>, but a convenient function to have for testing.</p>

    <p></p>
  syntax:
    content: public Future<Boolean> deleteLeaseStore()
    return:
      type: ec0e250a
      description: <p>true if the lease store was deleted successfully, false if not </p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getAllLeases()
  id: getAllLeases()
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  langs:
  - java
  name: getAllLeases()
  nameWithType: ILeaseManager.getAllLeases()
  fullName: Iterable<Future<Lease>> com.microsoft.azure.eventprocessorhost.ILeaseManager.getAllLeases()
  overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.getAllLeases*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
    startLine: 76
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Return the lease info for all partitions.</p>

    <p>A typical implementation could just call <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease(String)" data-throw-if-not-resolved="false">getLease()</xref> on all partitions.</p>

    <p></p>
  syntax:
    content: public Iterable<Future<Lease>> getAllLeases()
    return:
      type: 1f5dfe8ecom.microsoft.azure.eventprocessorhost._leasee7daa122
      description: <p>Iterable list of lease info. </p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease(String)
  id: getLease(String)
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  langs:
  - java
  name: getLease(String partitionId)
  nameWithType: ILeaseManager.getLease(String partitionId)
  fullName: Future<Lease> com.microsoft.azure.eventprocessorhost.ILeaseManager.getLease(String partitionId)
  overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
    startLine: 67
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Return the lease info for the specified partition. Can return null if no lease has been created in the store for the specified partition.</p>

    <p></p>
  syntax: &o1
    content: public Future<Lease> getLease(String partitionId)
    parameters:
    - id: partitionId
      type: "26831127"
      description: <p>id of partition to get lease for </p>
    return:
      type: 9b3030f6com.microsoft.azure.eventprocessorhost._leasea08ddfce
      description: <p>lease info for the partition, or null </p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLeaseDurationInMilliseconds()
  id: getLeaseDurationInMilliseconds()
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  langs:
  - java
  name: getLeaseDurationInMilliseconds()
  nameWithType: ILeaseManager.getLeaseDurationInMilliseconds()
  fullName: int com.microsoft.azure.eventprocessorhost.ILeaseManager.getLeaseDurationInMilliseconds()
  overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLeaseDurationInMilliseconds*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
    startLine: 37
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Mostly useful for testing.</p>

    <p></p>
  syntax:
    content: public int getLeaseDurationInMilliseconds()
    return:
      type: f75371fa
      description: <p>Duration of a lease before it expires unless renewed. </p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLeaseRenewIntervalInMilliseconds()
  id: getLeaseRenewIntervalInMilliseconds()
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  langs:
  - java
  name: getLeaseRenewIntervalInMilliseconds()
  nameWithType: ILeaseManager.getLeaseRenewIntervalInMilliseconds()
  fullName: int com.microsoft.azure.eventprocessorhost.ILeaseManager.getLeaseRenewIntervalInMilliseconds()
  overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLeaseRenewIntervalInMilliseconds*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
    startLine: 30
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Allows a lease manager implementation to specify to PartitionManager how often it should scan leases and renew them. In order to redistribute leases in a timely fashion after a host ceases operating, we recommend a relatively short interval, such as ten seconds. Obviously it should be less than half of the lease length, to prevent accidental expiration.</p>

    <p></p>
  syntax:
    content: public int getLeaseRenewIntervalInMilliseconds()
    return:
      type: f75371fa
      description: <p>The sleep interval between scans, specified in milliseconds. </p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.leaseStoreExists()
  id: leaseStoreExists()
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  langs:
  - java
  name: leaseStoreExists()
  nameWithType: ILeaseManager.leaseStoreExists()
  fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.leaseStoreExists()
  overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.leaseStoreExists*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
    startLine: 44
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Does the lease store exist?</p>

    <p></p>
  syntax:
    content: public Future<Boolean> leaseStoreExists()
    return:
      type: ec0e250a
      description: <p>true if it does, false if not </p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.releaseLease(Lease)
  id: releaseLease(Lease)
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  langs:
  - java
  name: releaseLease(Lease lease)
  nameWithType: ILeaseManager.releaseLease(Lease lease)
  fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.releaseLease(Lease lease)
  overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.releaseLease*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
    startLine: 126
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Give up a lease currently held by this host.</p>

    <p>If the lease has been stolen, or expired, releasing it is unnecessary, and will fail if attempted.</p>

    <p></p>
  syntax:
    content: public Future<Boolean> releaseLease(Lease lease)
    parameters:
    - id: lease
      type: com.microsoft.azure.eventprocessorhost._lease
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false">Lease</xref> to be give up </p>
    return:
      type: ec0e250a
      description: <p>true if the lease was released successfully, false if not </p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.renewLease(Lease)
  id: renewLease(Lease)
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  langs:
  - java
  name: renewLease(Lease lease)
  nameWithType: ILeaseManager.renewLease(Lease lease)
  fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.renewLease(Lease lease)
  overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.renewLease*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
    startLine: 116
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Renew a lease currently held by this host.</p>

    <p>If the lease has been stolen, or expired, or released, it is not possible to renew it. You will have to call <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease(String)" data-throw-if-not-resolved="false">getLease()</xref> and then <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager.acquireLease(Lease)" data-throw-if-not-resolved="false">acquireLease()</xref> again.</p>

    <p></p>
  syntax:
    content: public Future<Boolean> renewLease(Lease lease)
    parameters:
    - id: lease
      type: com.microsoft.azure.eventprocessorhost._lease
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false">Lease</xref> to be renewed </p>
    return:
      type: ec0e250a
      description: <p>true if the lease was renewed successfully, false if not </p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.updateLease(Lease)
  id: updateLease(Lease)
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  langs:
  - java
  name: updateLease(Lease lease)
  nameWithType: ILeaseManager.updateLease(Lease lease)
  fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.updateLease(Lease lease)
  overload: com.microsoft.azure.eventprocessorhost._i_lease_manager.updateLease*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ILeaseManager.java
    startLine: 138
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Update the store with the information in the provided lease.</p>

    <p>It is necessary to currently hold a lease in order to update it. If the lease has been stolen, or expired, or released, it cannot be updated. Updating should renew the lease before performing the update to avoid lease expiration during the process.</p>

    <p></p>
  syntax:
    content: public Future<Boolean> updateLease(Lease lease)
    parameters:
    - id: lease
      type: com.microsoft.azure.eventprocessorhost._lease
      description: <p>New lease info to be stored </p>
    return:
      type: ec0e250a
      description: <p>true if the updated was performed successfully, false if not </p>
references:
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLeaseRenewIntervalInMilliseconds*
  name: getLeaseRenewIntervalInMilliseconds
  nameWithType: ILeaseManager.getLeaseRenewIntervalInMilliseconds
  fullName: int com.microsoft.azure.eventprocessorhost.ILeaseManager.getLeaseRenewIntervalInMilliseconds
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLeaseDurationInMilliseconds*
  name: getLeaseDurationInMilliseconds
  nameWithType: ILeaseManager.getLeaseDurationInMilliseconds
  fullName: int com.microsoft.azure.eventprocessorhost.ILeaseManager.getLeaseDurationInMilliseconds
  package: com.microsoft.azure.eventprocessorhost
- uid: ec0e250a
  spec.java:
  - name: Future<Boolean>
    fullName: Future<Boolean>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.leaseStoreExists*
  name: leaseStoreExists
  nameWithType: ILeaseManager.leaseStoreExists
  fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.leaseStoreExists
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.createLeaseStoreIfNotExists*
  name: createLeaseStoreIfNotExists
  nameWithType: ILeaseManager.createLeaseStoreIfNotExists
  fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.createLeaseStoreIfNotExists
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.deleteLeaseStore*
  name: deleteLeaseStore
  nameWithType: ILeaseManager.deleteLeaseStore
  fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.deleteLeaseStore
  package: com.microsoft.azure.eventprocessorhost
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: 9b3030f6com.microsoft.azure.eventprocessorhost._leasea08ddfce
  spec.java:
  - name: Future<
    fullName: Future<
  - uid: com.microsoft.azure.eventprocessorhost._lease
    name: Lease
    fullName: com.microsoft.azure.eventprocessorhost.Lease
    href: com.microsoft.azure.eventprocessorhost._lease.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease*
  name: getLease
  nameWithType: ILeaseManager.getLease
  fullName: Future<Lease> com.microsoft.azure.eventprocessorhost.ILeaseManager.getLease
  package: com.microsoft.azure.eventprocessorhost
- uid: 1f5dfe8ecom.microsoft.azure.eventprocessorhost._leasee7daa122
  spec.java:
  - name: Iterable<Future<
    fullName: Iterable<Future<
  - uid: com.microsoft.azure.eventprocessorhost._lease
    name: Lease
    fullName: com.microsoft.azure.eventprocessorhost.Lease
    href: com.microsoft.azure.eventprocessorhost._lease.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getAllLeases*
  name: getAllLeases
  nameWithType: ILeaseManager.getAllLeases
  fullName: Iterable<Future<Lease>> com.microsoft.azure.eventprocessorhost.ILeaseManager.getAllLeases
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.createLeaseIfNotExists*
  name: createLeaseIfNotExists
  nameWithType: ILeaseManager.createLeaseIfNotExists
  fullName: Future<Lease> com.microsoft.azure.eventprocessorhost.ILeaseManager.createLeaseIfNotExists
  package: com.microsoft.azure.eventprocessorhost
- uid: 075d0a89
  spec.java:
  - name: Future<Void>
    fullName: Future<Void>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.deleteLease*
  name: deleteLease
  nameWithType: ILeaseManager.deleteLease
  fullName: Future<Void> com.microsoft.azure.eventprocessorhost.ILeaseManager.deleteLease
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.acquireLease*
  name: acquireLease
  nameWithType: ILeaseManager.acquireLease
  fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.acquireLease
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.renewLease*
  name: renewLease
  nameWithType: ILeaseManager.renewLease
  fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.renewLease
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.releaseLease*
  name: releaseLease
  nameWithType: ILeaseManager.releaseLease
  fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.releaseLease
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.updateLease*
  name: updateLease
  nameWithType: ILeaseManager.updateLease
  fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.updateLease
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._azure_storage_checkpoint_lease_manager
- uid: com.microsoft.azure.eventprocessorhost._event_processor_host
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._event_processor_host.yml
  name: EventProcessorHost
  nameWithType: EventProcessorHost
  fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost
  type: Class
  syntax:
    content: public class EventProcessorHost
- uid: com.microsoft.azure.eventprocessorhost._lease
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._lease.yml
  name: Lease
  nameWithType: Lease
  fullName: com.microsoft.azure.eventprocessorhost.Lease
  type: Class
  summary: >-
    <p>

      <xref uid="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false">Lease</xref> class is public so that advanced users can implement an <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref>. Unless you are implementing <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref> you should not have to deal with objects of this class or derived classes directly. </p>

    <p>When implementing an <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref> it may be necessary to derive from this class to carry around more information and override isExpired. The data fields have been left private instead of protected because they have a full set of getters and setters (except partitionId, which is immutable) which provide equivalent access. When implementing AzureBlobLease, for example, there was no need for more access than the getters and setters provide. </p>

    <p>Note that a <xref uid="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false">Lease</xref> object just carries information about a partition lease. The functionality to acquire/renew/release a lease is all on the <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref>. </p>
  syntax:
    content: public class Lease
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLease(String)
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  name: getLease(String partitionId)
  nameWithType: ILeaseManager.getLease(String partitionId)
  fullName: Future<Lease> com.microsoft.azure.eventprocessorhost.ILeaseManager.getLease(String partitionId)
  type: Method
  summary: >-
    <p>Return the lease info for the specified partition. Can return null if no lease has been created in the store for the specified partition.</p>

    <p></p>
  syntax: *o1
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.acquireLease(Lease)
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  name: acquireLease(Lease lease)
  nameWithType: ILeaseManager.acquireLease(Lease lease)
  fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.acquireLease(Lease lease)
  type: Method
  summary: >-
    <p>Acquire the lease on the desired partition for this <xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref>.</p>

    <p>Note that it is legal to acquire a lease that is already owned by another host. Lease-stealing is how partitions are redistributed when additional hosts are started.</p>

    <p></p>
  syntax: *o2
