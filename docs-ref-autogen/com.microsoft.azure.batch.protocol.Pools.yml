### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.batch.protocol.Pools.add(PoolAddParameter pool)
  name: add(PoolAddParameter pool)
  nameWithType: Pools.add(PoolAddParameter pool)
  parameters:
  - description: <p>The pool to be added. </p>
    name: pool
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolAddParameter?alt=com.microsoft.azure.batch.protocol.models.PoolAddParameter&text=PoolAddParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Adds a pool to the specified account. When naming pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.</p>

    <p></p>
  syntax: public void add(PoolAddParameter pool)
  uid: com.microsoft.azure.batch.protocol.Pools.add(PoolAddParameter)
- fullName: com.microsoft.azure.batch.protocol.Pools.add(PoolAddParameter pool, PoolAddOptions poolAddOptions)
  name: add(PoolAddParameter pool, PoolAddOptions poolAddOptions)
  nameWithType: Pools.add(PoolAddParameter pool, PoolAddOptions poolAddOptions)
  parameters:
  - description: <p>The pool to be added. </p>
    name: pool
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolAddParameter?alt=com.microsoft.azure.batch.protocol.models.PoolAddParameter&text=PoolAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolAddOptions?alt=com.microsoft.azure.batch.protocol.models.PoolAddOptions&text=PoolAddOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Adds a pool to the specified account. When naming pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.</p>

    <p></p>
  syntax: public void add(PoolAddParameter pool, PoolAddOptions poolAddOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.add(PoolAddParameter,PoolAddOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.addAsync(PoolAddParameter pool)
  name: addAsync(PoolAddParameter pool)
  nameWithType: Pools.addAsync(PoolAddParameter pool)
  parameters:
  - description: <p>The pool to be added. </p>
    name: pool
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolAddParameter?alt=com.microsoft.azure.batch.protocol.models.PoolAddParameter&text=PoolAddParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a pool to the specified account. When naming pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.</p>

    <p></p>
  syntax: public Observable<Void> addAsync(PoolAddParameter pool)
  uid: com.microsoft.azure.batch.protocol.Pools.addAsync(PoolAddParameter)
- fullName: com.microsoft.azure.batch.protocol.Pools.addAsync(PoolAddParameter pool, final ServiceCallback<Void> serviceCallback)
  name: addAsync(PoolAddParameter pool, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.addAsync(PoolAddParameter pool, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The pool to be added. </p>
    name: pool
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolAddParameter?alt=com.microsoft.azure.batch.protocol.models.PoolAddParameter&text=PoolAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a pool to the specified account. When naming pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.</p>

    <p></p>
  syntax: public ServiceFuture<Void> addAsync(PoolAddParameter pool, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.addAsync(PoolAddParameter,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Pools.addAsync(PoolAddParameter pool, PoolAddOptions poolAddOptions)
  name: addAsync(PoolAddParameter pool, PoolAddOptions poolAddOptions)
  nameWithType: Pools.addAsync(PoolAddParameter pool, PoolAddOptions poolAddOptions)
  parameters:
  - description: <p>The pool to be added. </p>
    name: pool
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolAddParameter?alt=com.microsoft.azure.batch.protocol.models.PoolAddParameter&text=PoolAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolAddOptions?alt=com.microsoft.azure.batch.protocol.models.PoolAddOptions&text=PoolAddOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a pool to the specified account. When naming pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.</p>

    <p></p>
  syntax: public Observable<Void> addAsync(PoolAddParameter pool, PoolAddOptions poolAddOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.addAsync(PoolAddParameter,PoolAddOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.addAsync(PoolAddParameter pool, PoolAddOptions poolAddOptions, final ServiceCallback<Void> serviceCallback)
  name: addAsync(PoolAddParameter pool, PoolAddOptions poolAddOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.addAsync(PoolAddParameter pool, PoolAddOptions poolAddOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The pool to be added. </p>
    name: pool
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolAddParameter?alt=com.microsoft.azure.batch.protocol.models.PoolAddParameter&text=PoolAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolAddOptions?alt=com.microsoft.azure.batch.protocol.models.PoolAddOptions&text=PoolAddOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a pool to the specified account. When naming pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.</p>

    <p></p>
  syntax: public ServiceFuture<Void> addAsync(PoolAddParameter pool, PoolAddOptions poolAddOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.addAsync(PoolAddParameter,PoolAddOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Pools.addWithServiceResponseAsync(PoolAddParameter pool)
  name: addWithServiceResponseAsync(PoolAddParameter pool)
  nameWithType: Pools.addWithServiceResponseAsync(PoolAddParameter pool)
  parameters:
  - description: <p>The pool to be added. </p>
    name: pool
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolAddParameter?alt=com.microsoft.azure.batch.protocol.models.PoolAddParameter&text=PoolAddParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.PoolAddHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolAddHeaders&text=PoolAddHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Adds a pool to the specified account. When naming pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolAddHeaders>> addWithServiceResponseAsync(PoolAddParameter pool)
  uid: com.microsoft.azure.batch.protocol.Pools.addWithServiceResponseAsync(PoolAddParameter)
- fullName: com.microsoft.azure.batch.protocol.Pools.addWithServiceResponseAsync(PoolAddParameter pool, PoolAddOptions poolAddOptions)
  name: addWithServiceResponseAsync(PoolAddParameter pool, PoolAddOptions poolAddOptions)
  nameWithType: Pools.addWithServiceResponseAsync(PoolAddParameter pool, PoolAddOptions poolAddOptions)
  parameters:
  - description: <p>The pool to be added. </p>
    name: pool
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolAddParameter?alt=com.microsoft.azure.batch.protocol.models.PoolAddParameter&text=PoolAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolAddOptions?alt=com.microsoft.azure.batch.protocol.models.PoolAddOptions&text=PoolAddOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.PoolAddHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolAddHeaders&text=PoolAddHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Adds a pool to the specified account. When naming pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolAddHeaders>> addWithServiceResponseAsync(PoolAddParameter pool, PoolAddOptions poolAddOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.addWithServiceResponseAsync(PoolAddParameter,PoolAddOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.delete(String poolId)
  name: delete(String poolId)
  nameWithType: Pools.delete(String poolId)
  parameters:
  - description: <p>The ID of the pool to delete. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes a pool from the specified account. When you request that a pool be deleted, the following actions occur: the pool state is set to deleting; any ongoing resize operation on the pool are stopped; the Batch service starts resizing the pool to zero nodes; any tasks running on existing nodes are terminated and requeued (as if a resize pool operation had been requested with the default requeue option); finally, the pool is removed from the system. Because running tasks are requeued, the user can rerun these tasks by updating their job to target a different pool. The tasks can then run on the new pool. If you want to override the requeue behavior, then you should call resize pool explicitly to shrink the pool to zero size before deleting the pool. If you call an Update, Patch or Delete API on a pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted.</p>

    <p></p>
  syntax: public void delete(String poolId)
  uid: com.microsoft.azure.batch.protocol.Pools.delete(String)
- fullName: com.microsoft.azure.batch.protocol.Pools.delete(String poolId, PoolDeleteOptions poolDeleteOptions)
  name: delete(String poolId, PoolDeleteOptions poolDeleteOptions)
  nameWithType: Pools.delete(String poolId, PoolDeleteOptions poolDeleteOptions)
  parameters:
  - description: <p>The ID of the pool to delete. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.PoolDeleteOptions&text=PoolDeleteOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes a pool from the specified account. When you request that a pool be deleted, the following actions occur: the pool state is set to deleting; any ongoing resize operation on the pool are stopped; the Batch service starts resizing the pool to zero nodes; any tasks running on existing nodes are terminated and requeued (as if a resize pool operation had been requested with the default requeue option); finally, the pool is removed from the system. Because running tasks are requeued, the user can rerun these tasks by updating their job to target a different pool. The tasks can then run on the new pool. If you want to override the requeue behavior, then you should call resize pool explicitly to shrink the pool to zero size before deleting the pool. If you call an Update, Patch or Delete API on a pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted.</p>

    <p></p>
  syntax: public void delete(String poolId, PoolDeleteOptions poolDeleteOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.delete(String,PoolDeleteOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.deleteAsync(String poolId)
  name: deleteAsync(String poolId)
  nameWithType: Pools.deleteAsync(String poolId)
  parameters:
  - description: <p>The ID of the pool to delete. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a pool from the specified account. When you request that a pool be deleted, the following actions occur: the pool state is set to deleting; any ongoing resize operation on the pool are stopped; the Batch service starts resizing the pool to zero nodes; any tasks running on existing nodes are terminated and requeued (as if a resize pool operation had been requested with the default requeue option); finally, the pool is removed from the system. Because running tasks are requeued, the user can rerun these tasks by updating their job to target a different pool. The tasks can then run on the new pool. If you want to override the requeue behavior, then you should call resize pool explicitly to shrink the pool to zero size before deleting the pool. If you call an Update, Patch or Delete API on a pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String poolId)
  uid: com.microsoft.azure.batch.protocol.Pools.deleteAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Pools.deleteAsync(String poolId, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String poolId, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.deleteAsync(String poolId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool to delete. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a pool from the specified account. When you request that a pool be deleted, the following actions occur: the pool state is set to deleting; any ongoing resize operation on the pool are stopped; the Batch service starts resizing the pool to zero nodes; any tasks running on existing nodes are terminated and requeued (as if a resize pool operation had been requested with the default requeue option); finally, the pool is removed from the system. Because running tasks are requeued, the user can rerun these tasks by updating their job to target a different pool. The tasks can then run on the new pool. If you want to override the requeue behavior, then you should call resize pool explicitly to shrink the pool to zero size before deleting the pool. If you call an Update, Patch or Delete API on a pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String poolId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.deleteAsync(String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Pools.deleteAsync(String poolId, PoolDeleteOptions poolDeleteOptions)
  name: deleteAsync(String poolId, PoolDeleteOptions poolDeleteOptions)
  nameWithType: Pools.deleteAsync(String poolId, PoolDeleteOptions poolDeleteOptions)
  parameters:
  - description: <p>The ID of the pool to delete. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.PoolDeleteOptions&text=PoolDeleteOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a pool from the specified account. When you request that a pool be deleted, the following actions occur: the pool state is set to deleting; any ongoing resize operation on the pool are stopped; the Batch service starts resizing the pool to zero nodes; any tasks running on existing nodes are terminated and requeued (as if a resize pool operation had been requested with the default requeue option); finally, the pool is removed from the system. Because running tasks are requeued, the user can rerun these tasks by updating their job to target a different pool. The tasks can then run on the new pool. If you want to override the requeue behavior, then you should call resize pool explicitly to shrink the pool to zero size before deleting the pool. If you call an Update, Patch or Delete API on a pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String poolId, PoolDeleteOptions poolDeleteOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.deleteAsync(String,PoolDeleteOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.deleteAsync(String poolId, PoolDeleteOptions poolDeleteOptions, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String poolId, PoolDeleteOptions poolDeleteOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.deleteAsync(String poolId, PoolDeleteOptions poolDeleteOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool to delete. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.PoolDeleteOptions&text=PoolDeleteOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a pool from the specified account. When you request that a pool be deleted, the following actions occur: the pool state is set to deleting; any ongoing resize operation on the pool are stopped; the Batch service starts resizing the pool to zero nodes; any tasks running on existing nodes are terminated and requeued (as if a resize pool operation had been requested with the default requeue option); finally, the pool is removed from the system. Because running tasks are requeued, the user can rerun these tasks by updating their job to target a different pool. The tasks can then run on the new pool. If you want to override the requeue behavior, then you should call resize pool explicitly to shrink the pool to zero size before deleting the pool. If you call an Update, Patch or Delete API on a pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String poolId, PoolDeleteOptions poolDeleteOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.deleteAsync(String,PoolDeleteOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Pools.deleteWithServiceResponseAsync(String poolId)
  name: deleteWithServiceResponseAsync(String poolId)
  nameWithType: Pools.deleteWithServiceResponseAsync(String poolId)
  parameters:
  - description: <p>The ID of the pool to delete. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.PoolDeleteHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolDeleteHeaders&text=PoolDeleteHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Deletes a pool from the specified account. When you request that a pool be deleted, the following actions occur: the pool state is set to deleting; any ongoing resize operation on the pool are stopped; the Batch service starts resizing the pool to zero nodes; any tasks running on existing nodes are terminated and requeued (as if a resize pool operation had been requested with the default requeue option); finally, the pool is removed from the system. Because running tasks are requeued, the user can rerun these tasks by updating their job to target a different pool. The tasks can then run on the new pool. If you want to override the requeue behavior, then you should call resize pool explicitly to shrink the pool to zero size before deleting the pool. If you call an Update, Patch or Delete API on a pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolDeleteHeaders>> deleteWithServiceResponseAsync(String poolId)
  uid: com.microsoft.azure.batch.protocol.Pools.deleteWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Pools.deleteWithServiceResponseAsync(String poolId, PoolDeleteOptions poolDeleteOptions)
  name: deleteWithServiceResponseAsync(String poolId, PoolDeleteOptions poolDeleteOptions)
  nameWithType: Pools.deleteWithServiceResponseAsync(String poolId, PoolDeleteOptions poolDeleteOptions)
  parameters:
  - description: <p>The ID of the pool to delete. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.PoolDeleteOptions&text=PoolDeleteOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.PoolDeleteHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolDeleteHeaders&text=PoolDeleteHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Deletes a pool from the specified account. When you request that a pool be deleted, the following actions occur: the pool state is set to deleting; any ongoing resize operation on the pool are stopped; the Batch service starts resizing the pool to zero nodes; any tasks running on existing nodes are terminated and requeued (as if a resize pool operation had been requested with the default requeue option); finally, the pool is removed from the system. Because running tasks are requeued, the user can rerun these tasks by updating their job to target a different pool. The tasks can then run on the new pool. If you want to override the requeue behavior, then you should call resize pool explicitly to shrink the pool to zero size before deleting the pool. If you call an Update, Patch or Delete API on a pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolDeleteHeaders>> deleteWithServiceResponseAsync(String poolId, PoolDeleteOptions poolDeleteOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.deleteWithServiceResponseAsync(String,PoolDeleteOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.disableAutoScale(String poolId)
  name: disableAutoScale(String poolId)
  nameWithType: Pools.disableAutoScale(String poolId)
  parameters:
  - description: <p>The ID of the pool on which to disable automatic scaling. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Disables automatic scaling for a pool.</p>

    <p></p>
  syntax: public void disableAutoScale(String poolId)
  uid: com.microsoft.azure.batch.protocol.Pools.disableAutoScale(String)
- fullName: com.microsoft.azure.batch.protocol.Pools.disableAutoScale(String poolId, PoolDisableAutoScaleOptions poolDisableAutoScaleOptions)
  name: disableAutoScale(String poolId, PoolDisableAutoScaleOptions poolDisableAutoScaleOptions)
  nameWithType: Pools.disableAutoScale(String poolId, PoolDisableAutoScaleOptions poolDisableAutoScaleOptions)
  parameters:
  - description: <p>The ID of the pool on which to disable automatic scaling. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolDisableAutoScaleOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolDisableAutoScaleOptions?alt=com.microsoft.azure.batch.protocol.models.PoolDisableAutoScaleOptions&text=PoolDisableAutoScaleOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Disables automatic scaling for a pool.</p>

    <p></p>
  syntax: public void disableAutoScale(String poolId, PoolDisableAutoScaleOptions poolDisableAutoScaleOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.disableAutoScale(String,PoolDisableAutoScaleOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.disableAutoScaleAsync(String poolId)
  name: disableAutoScaleAsync(String poolId)
  nameWithType: Pools.disableAutoScaleAsync(String poolId)
  parameters:
  - description: <p>The ID of the pool on which to disable automatic scaling. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Disables automatic scaling for a pool.</p>

    <p></p>
  syntax: public Observable<Void> disableAutoScaleAsync(String poolId)
  uid: com.microsoft.azure.batch.protocol.Pools.disableAutoScaleAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Pools.disableAutoScaleAsync(String poolId, final ServiceCallback<Void> serviceCallback)
  name: disableAutoScaleAsync(String poolId, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.disableAutoScaleAsync(String poolId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool on which to disable automatic scaling. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Disables automatic scaling for a pool.</p>

    <p></p>
  syntax: public ServiceFuture<Void> disableAutoScaleAsync(String poolId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.disableAutoScaleAsync(String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Pools.disableAutoScaleAsync(String poolId, PoolDisableAutoScaleOptions poolDisableAutoScaleOptions)
  name: disableAutoScaleAsync(String poolId, PoolDisableAutoScaleOptions poolDisableAutoScaleOptions)
  nameWithType: Pools.disableAutoScaleAsync(String poolId, PoolDisableAutoScaleOptions poolDisableAutoScaleOptions)
  parameters:
  - description: <p>The ID of the pool on which to disable automatic scaling. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolDisableAutoScaleOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolDisableAutoScaleOptions?alt=com.microsoft.azure.batch.protocol.models.PoolDisableAutoScaleOptions&text=PoolDisableAutoScaleOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Disables automatic scaling for a pool.</p>

    <p></p>
  syntax: public Observable<Void> disableAutoScaleAsync(String poolId, PoolDisableAutoScaleOptions poolDisableAutoScaleOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.disableAutoScaleAsync(String,PoolDisableAutoScaleOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.disableAutoScaleAsync(String poolId, PoolDisableAutoScaleOptions poolDisableAutoScaleOptions, final ServiceCallback<Void> serviceCallback)
  name: disableAutoScaleAsync(String poolId, PoolDisableAutoScaleOptions poolDisableAutoScaleOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.disableAutoScaleAsync(String poolId, PoolDisableAutoScaleOptions poolDisableAutoScaleOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool on which to disable automatic scaling. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolDisableAutoScaleOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolDisableAutoScaleOptions?alt=com.microsoft.azure.batch.protocol.models.PoolDisableAutoScaleOptions&text=PoolDisableAutoScaleOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Disables automatic scaling for a pool.</p>

    <p></p>
  syntax: public ServiceFuture<Void> disableAutoScaleAsync(String poolId, PoolDisableAutoScaleOptions poolDisableAutoScaleOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.disableAutoScaleAsync(String,PoolDisableAutoScaleOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Pools.disableAutoScaleWithServiceResponseAsync(String poolId)
  name: disableAutoScaleWithServiceResponseAsync(String poolId)
  nameWithType: Pools.disableAutoScaleWithServiceResponseAsync(String poolId)
  parameters:
  - description: <p>The ID of the pool on which to disable automatic scaling. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.PoolDisableAutoScaleHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolDisableAutoScaleHeaders&text=PoolDisableAutoScaleHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Disables automatic scaling for a pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolDisableAutoScaleHeaders>> disableAutoScaleWithServiceResponseAsync(String poolId)
  uid: com.microsoft.azure.batch.protocol.Pools.disableAutoScaleWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Pools.disableAutoScaleWithServiceResponseAsync(String poolId, PoolDisableAutoScaleOptions poolDisableAutoScaleOptions)
  name: disableAutoScaleWithServiceResponseAsync(String poolId, PoolDisableAutoScaleOptions poolDisableAutoScaleOptions)
  nameWithType: Pools.disableAutoScaleWithServiceResponseAsync(String poolId, PoolDisableAutoScaleOptions poolDisableAutoScaleOptions)
  parameters:
  - description: <p>The ID of the pool on which to disable automatic scaling. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolDisableAutoScaleOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolDisableAutoScaleOptions?alt=com.microsoft.azure.batch.protocol.models.PoolDisableAutoScaleOptions&text=PoolDisableAutoScaleOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.PoolDisableAutoScaleHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolDisableAutoScaleHeaders&text=PoolDisableAutoScaleHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Disables automatic scaling for a pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolDisableAutoScaleHeaders>> disableAutoScaleWithServiceResponseAsync(String poolId, PoolDisableAutoScaleOptions poolDisableAutoScaleOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.disableAutoScaleWithServiceResponseAsync(String,PoolDisableAutoScaleOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.enableAutoScale(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter)
  name: enableAutoScale(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter)
  nameWithType: Pools.enableAutoScale(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter)
  parameters:
  - description: <p>The ID of the pool on which to enable automatic scaling. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolEnableAutoScaleParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleParameter?alt=com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleParameter&text=PoolEnableAutoScaleParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Enables automatic scaling for a pool. You cannot enable automatic scaling on a pool if a resize operation is in progress on the pool. If automatic scaling of the pool is currently disabled, you must specify a valid autoscale formula as part of the request. If automatic scaling of the pool is already enabled, you may specify a new autoscale formula and/or a new evaluation interval. You cannot call this API for the same pool more than once every 30 seconds.</p>

    <p></p>
  syntax: public void enableAutoScale(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter)
  uid: com.microsoft.azure.batch.protocol.Pools.enableAutoScale(String,PoolEnableAutoScaleParameter)
- fullName: com.microsoft.azure.batch.protocol.Pools.enableAutoScale(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, PoolEnableAutoScaleOptions poolEnableAutoScaleOptions)
  name: enableAutoScale(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, PoolEnableAutoScaleOptions poolEnableAutoScaleOptions)
  nameWithType: Pools.enableAutoScale(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, PoolEnableAutoScaleOptions poolEnableAutoScaleOptions)
  parameters:
  - description: <p>The ID of the pool on which to enable automatic scaling. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolEnableAutoScaleParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleParameter?alt=com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleParameter&text=PoolEnableAutoScaleParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolEnableAutoScaleOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleOptions?alt=com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleOptions&text=PoolEnableAutoScaleOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Enables automatic scaling for a pool. You cannot enable automatic scaling on a pool if a resize operation is in progress on the pool. If automatic scaling of the pool is currently disabled, you must specify a valid autoscale formula as part of the request. If automatic scaling of the pool is already enabled, you may specify a new autoscale formula and/or a new evaluation interval. You cannot call this API for the same pool more than once every 30 seconds.</p>

    <p></p>
  syntax: public void enableAutoScale(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, PoolEnableAutoScaleOptions poolEnableAutoScaleOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.enableAutoScale(String,PoolEnableAutoScaleParameter,PoolEnableAutoScaleOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.enableAutoScaleAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter)
  name: enableAutoScaleAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter)
  nameWithType: Pools.enableAutoScaleAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter)
  parameters:
  - description: <p>The ID of the pool on which to enable automatic scaling. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolEnableAutoScaleParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleParameter?alt=com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleParameter&text=PoolEnableAutoScaleParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enables automatic scaling for a pool. You cannot enable automatic scaling on a pool if a resize operation is in progress on the pool. If automatic scaling of the pool is currently disabled, you must specify a valid autoscale formula as part of the request. If automatic scaling of the pool is already enabled, you may specify a new autoscale formula and/or a new evaluation interval. You cannot call this API for the same pool more than once every 30 seconds.</p>

    <p></p>
  syntax: public Observable<Void> enableAutoScaleAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter)
  uid: com.microsoft.azure.batch.protocol.Pools.enableAutoScaleAsync(String,PoolEnableAutoScaleParameter)
- fullName: com.microsoft.azure.batch.protocol.Pools.enableAutoScaleAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, final ServiceCallback<Void> serviceCallback)
  name: enableAutoScaleAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.enableAutoScaleAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool on which to enable automatic scaling. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolEnableAutoScaleParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleParameter?alt=com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleParameter&text=PoolEnableAutoScaleParameter" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enables automatic scaling for a pool. You cannot enable automatic scaling on a pool if a resize operation is in progress on the pool. If automatic scaling of the pool is currently disabled, you must specify a valid autoscale formula as part of the request. If automatic scaling of the pool is already enabled, you may specify a new autoscale formula and/or a new evaluation interval. You cannot call this API for the same pool more than once every 30 seconds.</p>

    <p></p>
  syntax: public ServiceFuture<Void> enableAutoScaleAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.enableAutoScaleAsync(String,PoolEnableAutoScaleParameter,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Pools.enableAutoScaleAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, PoolEnableAutoScaleOptions poolEnableAutoScaleOptions)
  name: enableAutoScaleAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, PoolEnableAutoScaleOptions poolEnableAutoScaleOptions)
  nameWithType: Pools.enableAutoScaleAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, PoolEnableAutoScaleOptions poolEnableAutoScaleOptions)
  parameters:
  - description: <p>The ID of the pool on which to enable automatic scaling. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolEnableAutoScaleParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleParameter?alt=com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleParameter&text=PoolEnableAutoScaleParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolEnableAutoScaleOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleOptions?alt=com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleOptions&text=PoolEnableAutoScaleOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enables automatic scaling for a pool. You cannot enable automatic scaling on a pool if a resize operation is in progress on the pool. If automatic scaling of the pool is currently disabled, you must specify a valid autoscale formula as part of the request. If automatic scaling of the pool is already enabled, you may specify a new autoscale formula and/or a new evaluation interval. You cannot call this API for the same pool more than once every 30 seconds.</p>

    <p></p>
  syntax: public Observable<Void> enableAutoScaleAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, PoolEnableAutoScaleOptions poolEnableAutoScaleOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.enableAutoScaleAsync(String,PoolEnableAutoScaleParameter,PoolEnableAutoScaleOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.enableAutoScaleAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, PoolEnableAutoScaleOptions poolEnableAutoScaleOptions, final ServiceCallback<Void> serviceCallback)
  name: enableAutoScaleAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, PoolEnableAutoScaleOptions poolEnableAutoScaleOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.enableAutoScaleAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, PoolEnableAutoScaleOptions poolEnableAutoScaleOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool on which to enable automatic scaling. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolEnableAutoScaleParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleParameter?alt=com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleParameter&text=PoolEnableAutoScaleParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolEnableAutoScaleOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleOptions?alt=com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleOptions&text=PoolEnableAutoScaleOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enables automatic scaling for a pool. You cannot enable automatic scaling on a pool if a resize operation is in progress on the pool. If automatic scaling of the pool is currently disabled, you must specify a valid autoscale formula as part of the request. If automatic scaling of the pool is already enabled, you may specify a new autoscale formula and/or a new evaluation interval. You cannot call this API for the same pool more than once every 30 seconds.</p>

    <p></p>
  syntax: public ServiceFuture<Void> enableAutoScaleAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, PoolEnableAutoScaleOptions poolEnableAutoScaleOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.enableAutoScaleAsync(String,PoolEnableAutoScaleParameter,PoolEnableAutoScaleOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Pools.enableAutoScaleWithServiceResponseAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter)
  name: enableAutoScaleWithServiceResponseAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter)
  nameWithType: Pools.enableAutoScaleWithServiceResponseAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter)
  parameters:
  - description: <p>The ID of the pool on which to enable automatic scaling. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolEnableAutoScaleParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleParameter?alt=com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleParameter&text=PoolEnableAutoScaleParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleHeaders&text=PoolEnableAutoScaleHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Enables automatic scaling for a pool. You cannot enable automatic scaling on a pool if a resize operation is in progress on the pool. If automatic scaling of the pool is currently disabled, you must specify a valid autoscale formula as part of the request. If automatic scaling of the pool is already enabled, you may specify a new autoscale formula and/or a new evaluation interval. You cannot call this API for the same pool more than once every 30 seconds.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolEnableAutoScaleHeaders>> enableAutoScaleWithServiceResponseAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter)
  uid: com.microsoft.azure.batch.protocol.Pools.enableAutoScaleWithServiceResponseAsync(String,PoolEnableAutoScaleParameter)
- fullName: com.microsoft.azure.batch.protocol.Pools.enableAutoScaleWithServiceResponseAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, PoolEnableAutoScaleOptions poolEnableAutoScaleOptions)
  name: enableAutoScaleWithServiceResponseAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, PoolEnableAutoScaleOptions poolEnableAutoScaleOptions)
  nameWithType: Pools.enableAutoScaleWithServiceResponseAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, PoolEnableAutoScaleOptions poolEnableAutoScaleOptions)
  parameters:
  - description: <p>The ID of the pool on which to enable automatic scaling. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolEnableAutoScaleParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleParameter?alt=com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleParameter&text=PoolEnableAutoScaleParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolEnableAutoScaleOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleOptions?alt=com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleOptions&text=PoolEnableAutoScaleOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolEnableAutoScaleHeaders&text=PoolEnableAutoScaleHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Enables automatic scaling for a pool. You cannot enable automatic scaling on a pool if a resize operation is in progress on the pool. If automatic scaling of the pool is currently disabled, you must specify a valid autoscale formula as part of the request. If automatic scaling of the pool is already enabled, you may specify a new autoscale formula and/or a new evaluation interval. You cannot call this API for the same pool more than once every 30 seconds.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolEnableAutoScaleHeaders>> enableAutoScaleWithServiceResponseAsync(String poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, PoolEnableAutoScaleOptions poolEnableAutoScaleOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.enableAutoScaleWithServiceResponseAsync(String,PoolEnableAutoScaleParameter,PoolEnableAutoScaleOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.evaluateAutoScale(String poolId, String autoScaleFormula)
  name: evaluateAutoScale(String poolId, String autoScaleFormula)
  nameWithType: Pools.evaluateAutoScale(String poolId, String autoScaleFormula)
  parameters:
  - description: <p>The ID of the pool on which to evaluate the automatic scaling formula. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The formula for the desired number of compute nodes in the pool. The formula is validated and its results calculated, but it is not applied to the pool. To apply the formula to the pool, 'Enable automatic scaling on a pool'. For more information about specifying this formula, see Automatically scale compute nodes in an Azure Batch pool (<a href="https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling">https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling</a>). </p>
    name: autoScaleFormula
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the AutoScaleRun object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.AutoScaleRun?alt=com.microsoft.azure.batch.protocol.models.AutoScaleRun&text=AutoScaleRun" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the result of evaluating an automatic scaling formula on the pool. This API is primarily for validating an autoscale formula, as it simply returns the result without applying the formula to the pool. The pool must have auto scaling enabled in order to evaluate a formula.</p>

    <p></p>
  syntax: public AutoScaleRun evaluateAutoScale(String poolId, String autoScaleFormula)
  uid: com.microsoft.azure.batch.protocol.Pools.evaluateAutoScale(String,String)
- fullName: com.microsoft.azure.batch.protocol.Pools.evaluateAutoScale(String poolId, String autoScaleFormula, PoolEvaluateAutoScaleOptions poolEvaluateAutoScaleOptions)
  name: evaluateAutoScale(String poolId, String autoScaleFormula, PoolEvaluateAutoScaleOptions poolEvaluateAutoScaleOptions)
  nameWithType: Pools.evaluateAutoScale(String poolId, String autoScaleFormula, PoolEvaluateAutoScaleOptions poolEvaluateAutoScaleOptions)
  parameters:
  - description: <p>The ID of the pool on which to evaluate the automatic scaling formula. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The formula for the desired number of compute nodes in the pool. The formula is validated and its results calculated, but it is not applied to the pool. To apply the formula to the pool, 'Enable automatic scaling on a pool'. For more information about specifying this formula, see Automatically scale compute nodes in an Azure Batch pool (<a href="https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling">https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling</a>). </p>
    name: autoScaleFormula
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolEvaluateAutoScaleOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolEvaluateAutoScaleOptions?alt=com.microsoft.azure.batch.protocol.models.PoolEvaluateAutoScaleOptions&text=PoolEvaluateAutoScaleOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the AutoScaleRun object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.AutoScaleRun?alt=com.microsoft.azure.batch.protocol.models.AutoScaleRun&text=AutoScaleRun" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the result of evaluating an automatic scaling formula on the pool. This API is primarily for validating an autoscale formula, as it simply returns the result without applying the formula to the pool. The pool must have auto scaling enabled in order to evaluate a formula.</p>

    <p></p>
  syntax: public AutoScaleRun evaluateAutoScale(String poolId, String autoScaleFormula, PoolEvaluateAutoScaleOptions poolEvaluateAutoScaleOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.evaluateAutoScale(String,String,PoolEvaluateAutoScaleOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.evaluateAutoScaleAsync(String poolId, String autoScaleFormula)
  name: evaluateAutoScaleAsync(String poolId, String autoScaleFormula)
  nameWithType: Pools.evaluateAutoScaleAsync(String poolId, String autoScaleFormula)
  parameters:
  - description: <p>The ID of the pool on which to evaluate the automatic scaling formula. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The formula for the desired number of compute nodes in the pool. The formula is validated and its results calculated, but it is not applied to the pool. To apply the formula to the pool, 'Enable automatic scaling on a pool'. For more information about specifying this formula, see Automatically scale compute nodes in an Azure Batch pool (<a href="https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling">https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling</a>). </p>
    name: autoScaleFormula
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the AutoScaleRun object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.AutoScaleRun?alt=com.microsoft.azure.batch.protocol.models.AutoScaleRun&text=AutoScaleRun" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the result of evaluating an automatic scaling formula on the pool. This API is primarily for validating an autoscale formula, as it simply returns the result without applying the formula to the pool. The pool must have auto scaling enabled in order to evaluate a formula.</p>

    <p></p>
  syntax: public Observable<AutoScaleRun> evaluateAutoScaleAsync(String poolId, String autoScaleFormula)
  uid: com.microsoft.azure.batch.protocol.Pools.evaluateAutoScaleAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.Pools.evaluateAutoScaleAsync(String poolId, String autoScaleFormula, final ServiceCallback<AutoScaleRun> serviceCallback)
  name: evaluateAutoScaleAsync(String poolId, String autoScaleFormula, final ServiceCallback<AutoScaleRun> serviceCallback)
  nameWithType: Pools.evaluateAutoScaleAsync(String poolId, String autoScaleFormula, final ServiceCallback<AutoScaleRun> serviceCallback)
  parameters:
  - description: <p>The ID of the pool on which to evaluate the automatic scaling formula. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The formula for the desired number of compute nodes in the pool. The formula is validated and its results calculated, but it is not applied to the pool. To apply the formula to the pool, 'Enable automatic scaling on a pool'. For more information about specifying this formula, see Automatically scale compute nodes in an Azure Batch pool (<a href="https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling">https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling</a>). </p>
    name: autoScaleFormula
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.AutoScaleRun?alt=com.microsoft.azure.batch.protocol.models.AutoScaleRun&text=AutoScaleRun" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.AutoScaleRun?alt=com.microsoft.azure.batch.protocol.models.AutoScaleRun&text=AutoScaleRun" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the result of evaluating an automatic scaling formula on the pool. This API is primarily for validating an autoscale formula, as it simply returns the result without applying the formula to the pool. The pool must have auto scaling enabled in order to evaluate a formula.</p>

    <p></p>
  syntax: public ServiceFuture<AutoScaleRun> evaluateAutoScaleAsync(String poolId, String autoScaleFormula, final ServiceCallback<AutoScaleRun> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.evaluateAutoScaleAsync(String,String,final ServiceCallback<AutoScaleRun>)
- fullName: com.microsoft.azure.batch.protocol.Pools.evaluateAutoScaleAsync(String poolId, String autoScaleFormula, PoolEvaluateAutoScaleOptions poolEvaluateAutoScaleOptions)
  name: evaluateAutoScaleAsync(String poolId, String autoScaleFormula, PoolEvaluateAutoScaleOptions poolEvaluateAutoScaleOptions)
  nameWithType: Pools.evaluateAutoScaleAsync(String poolId, String autoScaleFormula, PoolEvaluateAutoScaleOptions poolEvaluateAutoScaleOptions)
  parameters:
  - description: <p>The ID of the pool on which to evaluate the automatic scaling formula. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The formula for the desired number of compute nodes in the pool. The formula is validated and its results calculated, but it is not applied to the pool. To apply the formula to the pool, 'Enable automatic scaling on a pool'. For more information about specifying this formula, see Automatically scale compute nodes in an Azure Batch pool (<a href="https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling">https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling</a>). </p>
    name: autoScaleFormula
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolEvaluateAutoScaleOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolEvaluateAutoScaleOptions?alt=com.microsoft.azure.batch.protocol.models.PoolEvaluateAutoScaleOptions&text=PoolEvaluateAutoScaleOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the AutoScaleRun object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.AutoScaleRun?alt=com.microsoft.azure.batch.protocol.models.AutoScaleRun&text=AutoScaleRun" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the result of evaluating an automatic scaling formula on the pool. This API is primarily for validating an autoscale formula, as it simply returns the result without applying the formula to the pool. The pool must have auto scaling enabled in order to evaluate a formula.</p>

    <p></p>
  syntax: public Observable<AutoScaleRun> evaluateAutoScaleAsync(String poolId, String autoScaleFormula, PoolEvaluateAutoScaleOptions poolEvaluateAutoScaleOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.evaluateAutoScaleAsync(String,String,PoolEvaluateAutoScaleOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.evaluateAutoScaleAsync(String poolId, String autoScaleFormula, PoolEvaluateAutoScaleOptions poolEvaluateAutoScaleOptions, final ServiceCallback<AutoScaleRun> serviceCallback)
  name: evaluateAutoScaleAsync(String poolId, String autoScaleFormula, PoolEvaluateAutoScaleOptions poolEvaluateAutoScaleOptions, final ServiceCallback<AutoScaleRun> serviceCallback)
  nameWithType: Pools.evaluateAutoScaleAsync(String poolId, String autoScaleFormula, PoolEvaluateAutoScaleOptions poolEvaluateAutoScaleOptions, final ServiceCallback<AutoScaleRun> serviceCallback)
  parameters:
  - description: <p>The ID of the pool on which to evaluate the automatic scaling formula. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The formula for the desired number of compute nodes in the pool. The formula is validated and its results calculated, but it is not applied to the pool. To apply the formula to the pool, 'Enable automatic scaling on a pool'. For more information about specifying this formula, see Automatically scale compute nodes in an Azure Batch pool (<a href="https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling">https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling</a>). </p>
    name: autoScaleFormula
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolEvaluateAutoScaleOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolEvaluateAutoScaleOptions?alt=com.microsoft.azure.batch.protocol.models.PoolEvaluateAutoScaleOptions&text=PoolEvaluateAutoScaleOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.AutoScaleRun?alt=com.microsoft.azure.batch.protocol.models.AutoScaleRun&text=AutoScaleRun" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.AutoScaleRun?alt=com.microsoft.azure.batch.protocol.models.AutoScaleRun&text=AutoScaleRun" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the result of evaluating an automatic scaling formula on the pool. This API is primarily for validating an autoscale formula, as it simply returns the result without applying the formula to the pool. The pool must have auto scaling enabled in order to evaluate a formula.</p>

    <p></p>
  syntax: public ServiceFuture<AutoScaleRun> evaluateAutoScaleAsync(String poolId, String autoScaleFormula, PoolEvaluateAutoScaleOptions poolEvaluateAutoScaleOptions, final ServiceCallback<AutoScaleRun> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.evaluateAutoScaleAsync(String,String,PoolEvaluateAutoScaleOptions,final ServiceCallback<AutoScaleRun>)
- fullName: com.microsoft.azure.batch.protocol.Pools.evaluateAutoScaleWithServiceResponseAsync(String poolId, String autoScaleFormula)
  name: evaluateAutoScaleWithServiceResponseAsync(String poolId, String autoScaleFormula)
  nameWithType: Pools.evaluateAutoScaleWithServiceResponseAsync(String poolId, String autoScaleFormula)
  parameters:
  - description: <p>The ID of the pool on which to evaluate the automatic scaling formula. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The formula for the desired number of compute nodes in the pool. The formula is validated and its results calculated, but it is not applied to the pool. To apply the formula to the pool, 'Enable automatic scaling on a pool'. For more information about specifying this formula, see Automatically scale compute nodes in an Azure Batch pool (<a href="https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling">https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling</a>). </p>
    name: autoScaleFormula
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the AutoScaleRun object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.AutoScaleRun?alt=com.microsoft.azure.batch.protocol.models.AutoScaleRun&text=AutoScaleRun" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.PoolEvaluateAutoScaleHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolEvaluateAutoScaleHeaders&text=PoolEvaluateAutoScaleHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the result of evaluating an automatic scaling formula on the pool. This API is primarily for validating an autoscale formula, as it simply returns the result without applying the formula to the pool. The pool must have auto scaling enabled in order to evaluate a formula.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<AutoScaleRun, PoolEvaluateAutoScaleHeaders>> evaluateAutoScaleWithServiceResponseAsync(String poolId, String autoScaleFormula)
  uid: com.microsoft.azure.batch.protocol.Pools.evaluateAutoScaleWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.Pools.evaluateAutoScaleWithServiceResponseAsync(String poolId, String autoScaleFormula, PoolEvaluateAutoScaleOptions poolEvaluateAutoScaleOptions)
  name: evaluateAutoScaleWithServiceResponseAsync(String poolId, String autoScaleFormula, PoolEvaluateAutoScaleOptions poolEvaluateAutoScaleOptions)
  nameWithType: Pools.evaluateAutoScaleWithServiceResponseAsync(String poolId, String autoScaleFormula, PoolEvaluateAutoScaleOptions poolEvaluateAutoScaleOptions)
  parameters:
  - description: <p>The ID of the pool on which to evaluate the automatic scaling formula. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The formula for the desired number of compute nodes in the pool. The formula is validated and its results calculated, but it is not applied to the pool. To apply the formula to the pool, 'Enable automatic scaling on a pool'. For more information about specifying this formula, see Automatically scale compute nodes in an Azure Batch pool (<a href="https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling">https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling</a>). </p>
    name: autoScaleFormula
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolEvaluateAutoScaleOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolEvaluateAutoScaleOptions?alt=com.microsoft.azure.batch.protocol.models.PoolEvaluateAutoScaleOptions&text=PoolEvaluateAutoScaleOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the AutoScaleRun object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.AutoScaleRun?alt=com.microsoft.azure.batch.protocol.models.AutoScaleRun&text=AutoScaleRun" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.PoolEvaluateAutoScaleHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolEvaluateAutoScaleHeaders&text=PoolEvaluateAutoScaleHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the result of evaluating an automatic scaling formula on the pool. This API is primarily for validating an autoscale formula, as it simply returns the result without applying the formula to the pool. The pool must have auto scaling enabled in order to evaluate a formula.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<AutoScaleRun, PoolEvaluateAutoScaleHeaders>> evaluateAutoScaleWithServiceResponseAsync(String poolId, String autoScaleFormula, PoolEvaluateAutoScaleOptions poolEvaluateAutoScaleOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.evaluateAutoScaleWithServiceResponseAsync(String,String,PoolEvaluateAutoScaleOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.exists(String poolId)
  name: exists(String poolId)
  nameWithType: Pools.exists(String poolId)
  parameters:
  - description: <p>The ID of the pool to get. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the boolean object if successful. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets basic properties of a pool.</p>

    <p></p>
  syntax: public boolean exists(String poolId)
  uid: com.microsoft.azure.batch.protocol.Pools.exists(String)
- fullName: com.microsoft.azure.batch.protocol.Pools.exists(String poolId, PoolExistsOptions poolExistsOptions)
  name: exists(String poolId, PoolExistsOptions poolExistsOptions)
  nameWithType: Pools.exists(String poolId, PoolExistsOptions poolExistsOptions)
  parameters:
  - description: <p>The ID of the pool to get. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolExistsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolExistsOptions?alt=com.microsoft.azure.batch.protocol.models.PoolExistsOptions&text=PoolExistsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the boolean object if successful. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets basic properties of a pool.</p>

    <p></p>
  syntax: public boolean exists(String poolId, PoolExistsOptions poolExistsOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.exists(String,PoolExistsOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.existsAsync(String poolId)
  name: existsAsync(String poolId)
  nameWithType: Pools.existsAsync(String poolId)
  parameters:
  - description: <p>The ID of the pool to get. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the boolean object </p>
    type: <xref href="Observable%3CBoolean%3E?alt=Observable%3CBoolean%3E&text=Observable%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets basic properties of a pool.</p>

    <p></p>
  syntax: public Observable<Boolean> existsAsync(String poolId)
  uid: com.microsoft.azure.batch.protocol.Pools.existsAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Pools.existsAsync(String poolId, final ServiceCallback<Boolean> serviceCallback)
  name: existsAsync(String poolId, final ServiceCallback<Boolean> serviceCallback)
  nameWithType: Pools.existsAsync(String poolId, final ServiceCallback<Boolean> serviceCallback)
  parameters:
  - description: <p>The ID of the pool to get. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CBoolean%3E?alt=final+ServiceCallback%3CBoolean%3E&text=final+ServiceCallback%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CBoolean%3E?alt=ServiceFuture%3CBoolean%3E&text=ServiceFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets basic properties of a pool.</p>

    <p></p>
  syntax: public ServiceFuture<Boolean> existsAsync(String poolId, final ServiceCallback<Boolean> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.existsAsync(String,final ServiceCallback<Boolean>)
- fullName: com.microsoft.azure.batch.protocol.Pools.existsAsync(String poolId, PoolExistsOptions poolExistsOptions)
  name: existsAsync(String poolId, PoolExistsOptions poolExistsOptions)
  nameWithType: Pools.existsAsync(String poolId, PoolExistsOptions poolExistsOptions)
  parameters:
  - description: <p>The ID of the pool to get. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolExistsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolExistsOptions?alt=com.microsoft.azure.batch.protocol.models.PoolExistsOptions&text=PoolExistsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the boolean object </p>
    type: <xref href="Observable%3CBoolean%3E?alt=Observable%3CBoolean%3E&text=Observable%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets basic properties of a pool.</p>

    <p></p>
  syntax: public Observable<Boolean> existsAsync(String poolId, PoolExistsOptions poolExistsOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.existsAsync(String,PoolExistsOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.existsAsync(String poolId, PoolExistsOptions poolExistsOptions, final ServiceCallback<Boolean> serviceCallback)
  name: existsAsync(String poolId, PoolExistsOptions poolExistsOptions, final ServiceCallback<Boolean> serviceCallback)
  nameWithType: Pools.existsAsync(String poolId, PoolExistsOptions poolExistsOptions, final ServiceCallback<Boolean> serviceCallback)
  parameters:
  - description: <p>The ID of the pool to get. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolExistsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolExistsOptions?alt=com.microsoft.azure.batch.protocol.models.PoolExistsOptions&text=PoolExistsOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CBoolean%3E?alt=final+ServiceCallback%3CBoolean%3E&text=final+ServiceCallback%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CBoolean%3E?alt=ServiceFuture%3CBoolean%3E&text=ServiceFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets basic properties of a pool.</p>

    <p></p>
  syntax: public ServiceFuture<Boolean> existsAsync(String poolId, PoolExistsOptions poolExistsOptions, final ServiceCallback<Boolean> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.existsAsync(String,PoolExistsOptions,final ServiceCallback<Boolean>)
- fullName: com.microsoft.azure.batch.protocol.Pools.existsWithServiceResponseAsync(String poolId)
  name: existsWithServiceResponseAsync(String poolId)
  nameWithType: Pools.existsWithServiceResponseAsync(String poolId)
  parameters:
  - description: <p>The ID of the pool to get. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the boolean object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Boolean, <xref href="com.microsoft.azure.batch.protocol.models.PoolExistsHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolExistsHeaders&text=PoolExistsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets basic properties of a pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Boolean, PoolExistsHeaders>> existsWithServiceResponseAsync(String poolId)
  uid: com.microsoft.azure.batch.protocol.Pools.existsWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Pools.existsWithServiceResponseAsync(String poolId, PoolExistsOptions poolExistsOptions)
  name: existsWithServiceResponseAsync(String poolId, PoolExistsOptions poolExistsOptions)
  nameWithType: Pools.existsWithServiceResponseAsync(String poolId, PoolExistsOptions poolExistsOptions)
  parameters:
  - description: <p>The ID of the pool to get. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolExistsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolExistsOptions?alt=com.microsoft.azure.batch.protocol.models.PoolExistsOptions&text=PoolExistsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the boolean object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Boolean, <xref href="com.microsoft.azure.batch.protocol.models.PoolExistsHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolExistsHeaders&text=PoolExistsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets basic properties of a pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Boolean, PoolExistsHeaders>> existsWithServiceResponseAsync(String poolId, PoolExistsOptions poolExistsOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.existsWithServiceResponseAsync(String,PoolExistsOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.get(String poolId)
  name: get(String poolId)
  nameWithType: Pools.get(String poolId)
  parameters:
  - description: <p>The ID of the pool to get. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the CloudPool object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the specified pool.</p>

    <p></p>
  syntax: public CloudPool get(String poolId)
  uid: com.microsoft.azure.batch.protocol.Pools.get(String)
- fullName: com.microsoft.azure.batch.protocol.Pools.get(String poolId, PoolGetOptions poolGetOptions)
  name: get(String poolId, PoolGetOptions poolGetOptions)
  nameWithType: Pools.get(String poolId, PoolGetOptions poolGetOptions)
  parameters:
  - description: <p>The ID of the pool to get. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolGetOptions?alt=com.microsoft.azure.batch.protocol.models.PoolGetOptions&text=PoolGetOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the CloudPool object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the specified pool.</p>

    <p></p>
  syntax: public CloudPool get(String poolId, PoolGetOptions poolGetOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.get(String,PoolGetOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.getAllLifetimeStatistics()
  name: getAllLifetimeStatistics()
  nameWithType: Pools.getAllLifetimeStatistics()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PoolStatistics object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolStatistics?alt=com.microsoft.azure.batch.protocol.models.PoolStatistics&text=PoolStatistics" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets lifetime summary statistics for all of the pools in the specified account. Statistics are aggregated across all pools that have ever existed in the account, from account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.</p>

    <p></p>
  syntax: public PoolStatistics getAllLifetimeStatistics()
  uid: com.microsoft.azure.batch.protocol.Pools.getAllLifetimeStatistics()
- fullName: com.microsoft.azure.batch.protocol.Pools.getAllLifetimeStatistics(PoolGetAllLifetimeStatisticsOptions poolGetAllLifetimeStatisticsOptions)
  name: getAllLifetimeStatistics(PoolGetAllLifetimeStatisticsOptions poolGetAllLifetimeStatisticsOptions)
  nameWithType: Pools.getAllLifetimeStatistics(PoolGetAllLifetimeStatisticsOptions poolGetAllLifetimeStatisticsOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: poolGetAllLifetimeStatisticsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolGetAllLifetimeStatisticsOptions?alt=com.microsoft.azure.batch.protocol.models.PoolGetAllLifetimeStatisticsOptions&text=PoolGetAllLifetimeStatisticsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PoolStatistics object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolStatistics?alt=com.microsoft.azure.batch.protocol.models.PoolStatistics&text=PoolStatistics" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets lifetime summary statistics for all of the pools in the specified account. Statistics are aggregated across all pools that have ever existed in the account, from account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.</p>

    <p></p>
  syntax: public PoolStatistics getAllLifetimeStatistics(PoolGetAllLifetimeStatisticsOptions poolGetAllLifetimeStatisticsOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.getAllLifetimeStatistics(PoolGetAllLifetimeStatisticsOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.getAllLifetimeStatisticsAsync()
  name: getAllLifetimeStatisticsAsync()
  nameWithType: Pools.getAllLifetimeStatisticsAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PoolStatistics object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolStatistics?alt=com.microsoft.azure.batch.protocol.models.PoolStatistics&text=PoolStatistics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets lifetime summary statistics for all of the pools in the specified account. Statistics are aggregated across all pools that have ever existed in the account, from account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.</p>

    <p></p>
  syntax: public Observable<PoolStatistics> getAllLifetimeStatisticsAsync()
  uid: com.microsoft.azure.batch.protocol.Pools.getAllLifetimeStatisticsAsync()
- fullName: com.microsoft.azure.batch.protocol.Pools.getAllLifetimeStatisticsAsync(final ServiceCallback<PoolStatistics> serviceCallback)
  name: getAllLifetimeStatisticsAsync(final ServiceCallback<PoolStatistics> serviceCallback)
  nameWithType: Pools.getAllLifetimeStatisticsAsync(final ServiceCallback<PoolStatistics> serviceCallback)
  parameters:
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolStatistics?alt=com.microsoft.azure.batch.protocol.models.PoolStatistics&text=PoolStatistics" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolStatistics?alt=com.microsoft.azure.batch.protocol.models.PoolStatistics&text=PoolStatistics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets lifetime summary statistics for all of the pools in the specified account. Statistics are aggregated across all pools that have ever existed in the account, from account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.</p>

    <p></p>
  syntax: public ServiceFuture<PoolStatistics> getAllLifetimeStatisticsAsync(final ServiceCallback<PoolStatistics> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.getAllLifetimeStatisticsAsync(final ServiceCallback<PoolStatistics>)
- fullName: com.microsoft.azure.batch.protocol.Pools.getAllLifetimeStatisticsAsync(PoolGetAllLifetimeStatisticsOptions poolGetAllLifetimeStatisticsOptions)
  name: getAllLifetimeStatisticsAsync(PoolGetAllLifetimeStatisticsOptions poolGetAllLifetimeStatisticsOptions)
  nameWithType: Pools.getAllLifetimeStatisticsAsync(PoolGetAllLifetimeStatisticsOptions poolGetAllLifetimeStatisticsOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: poolGetAllLifetimeStatisticsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolGetAllLifetimeStatisticsOptions?alt=com.microsoft.azure.batch.protocol.models.PoolGetAllLifetimeStatisticsOptions&text=PoolGetAllLifetimeStatisticsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PoolStatistics object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolStatistics?alt=com.microsoft.azure.batch.protocol.models.PoolStatistics&text=PoolStatistics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets lifetime summary statistics for all of the pools in the specified account. Statistics are aggregated across all pools that have ever existed in the account, from account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.</p>

    <p></p>
  syntax: public Observable<PoolStatistics> getAllLifetimeStatisticsAsync(PoolGetAllLifetimeStatisticsOptions poolGetAllLifetimeStatisticsOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.getAllLifetimeStatisticsAsync(PoolGetAllLifetimeStatisticsOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.getAllLifetimeStatisticsAsync(PoolGetAllLifetimeStatisticsOptions poolGetAllLifetimeStatisticsOptions, final ServiceCallback<PoolStatistics> serviceCallback)
  name: getAllLifetimeStatisticsAsync(PoolGetAllLifetimeStatisticsOptions poolGetAllLifetimeStatisticsOptions, final ServiceCallback<PoolStatistics> serviceCallback)
  nameWithType: Pools.getAllLifetimeStatisticsAsync(PoolGetAllLifetimeStatisticsOptions poolGetAllLifetimeStatisticsOptions, final ServiceCallback<PoolStatistics> serviceCallback)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: poolGetAllLifetimeStatisticsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolGetAllLifetimeStatisticsOptions?alt=com.microsoft.azure.batch.protocol.models.PoolGetAllLifetimeStatisticsOptions&text=PoolGetAllLifetimeStatisticsOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolStatistics?alt=com.microsoft.azure.batch.protocol.models.PoolStatistics&text=PoolStatistics" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolStatistics?alt=com.microsoft.azure.batch.protocol.models.PoolStatistics&text=PoolStatistics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets lifetime summary statistics for all of the pools in the specified account. Statistics are aggregated across all pools that have ever existed in the account, from account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.</p>

    <p></p>
  syntax: public ServiceFuture<PoolStatistics> getAllLifetimeStatisticsAsync(PoolGetAllLifetimeStatisticsOptions poolGetAllLifetimeStatisticsOptions, final ServiceCallback<PoolStatistics> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.getAllLifetimeStatisticsAsync(PoolGetAllLifetimeStatisticsOptions,final ServiceCallback<PoolStatistics>)
- fullName: com.microsoft.azure.batch.protocol.Pools.getAllLifetimeStatisticsWithServiceResponseAsync()
  name: getAllLifetimeStatisticsWithServiceResponseAsync()
  nameWithType: Pools.getAllLifetimeStatisticsWithServiceResponseAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PoolStatistics object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolStatistics?alt=com.microsoft.azure.batch.protocol.models.PoolStatistics&text=PoolStatistics" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.PoolGetAllLifetimeStatisticsHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolGetAllLifetimeStatisticsHeaders&text=PoolGetAllLifetimeStatisticsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets lifetime summary statistics for all of the pools in the specified account. Statistics are aggregated across all pools that have ever existed in the account, from account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<PoolStatistics, PoolGetAllLifetimeStatisticsHeaders>> getAllLifetimeStatisticsWithServiceResponseAsync()
  uid: com.microsoft.azure.batch.protocol.Pools.getAllLifetimeStatisticsWithServiceResponseAsync()
- fullName: com.microsoft.azure.batch.protocol.Pools.getAllLifetimeStatisticsWithServiceResponseAsync(PoolGetAllLifetimeStatisticsOptions poolGetAllLifetimeStatisticsOptions)
  name: getAllLifetimeStatisticsWithServiceResponseAsync(PoolGetAllLifetimeStatisticsOptions poolGetAllLifetimeStatisticsOptions)
  nameWithType: Pools.getAllLifetimeStatisticsWithServiceResponseAsync(PoolGetAllLifetimeStatisticsOptions poolGetAllLifetimeStatisticsOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: poolGetAllLifetimeStatisticsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolGetAllLifetimeStatisticsOptions?alt=com.microsoft.azure.batch.protocol.models.PoolGetAllLifetimeStatisticsOptions&text=PoolGetAllLifetimeStatisticsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PoolStatistics object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolStatistics?alt=com.microsoft.azure.batch.protocol.models.PoolStatistics&text=PoolStatistics" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.PoolGetAllLifetimeStatisticsHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolGetAllLifetimeStatisticsHeaders&text=PoolGetAllLifetimeStatisticsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets lifetime summary statistics for all of the pools in the specified account. Statistics are aggregated across all pools that have ever existed in the account, from account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<PoolStatistics, PoolGetAllLifetimeStatisticsHeaders>> getAllLifetimeStatisticsWithServiceResponseAsync(PoolGetAllLifetimeStatisticsOptions poolGetAllLifetimeStatisticsOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.getAllLifetimeStatisticsWithServiceResponseAsync(PoolGetAllLifetimeStatisticsOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.getAsync(String poolId)
  name: getAsync(String poolId)
  nameWithType: Pools.getAsync(String poolId)
  parameters:
  - description: <p>The ID of the pool to get. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CloudPool object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified pool.</p>

    <p></p>
  syntax: public Observable<CloudPool> getAsync(String poolId)
  uid: com.microsoft.azure.batch.protocol.Pools.getAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Pools.getAsync(String poolId, final ServiceCallback<CloudPool> serviceCallback)
  name: getAsync(String poolId, final ServiceCallback<CloudPool> serviceCallback)
  nameWithType: Pools.getAsync(String poolId, final ServiceCallback<CloudPool> serviceCallback)
  parameters:
  - description: <p>The ID of the pool to get. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified pool.</p>

    <p></p>
  syntax: public ServiceFuture<CloudPool> getAsync(String poolId, final ServiceCallback<CloudPool> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.getAsync(String,final ServiceCallback<CloudPool>)
- fullName: com.microsoft.azure.batch.protocol.Pools.getAsync(String poolId, PoolGetOptions poolGetOptions)
  name: getAsync(String poolId, PoolGetOptions poolGetOptions)
  nameWithType: Pools.getAsync(String poolId, PoolGetOptions poolGetOptions)
  parameters:
  - description: <p>The ID of the pool to get. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolGetOptions?alt=com.microsoft.azure.batch.protocol.models.PoolGetOptions&text=PoolGetOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CloudPool object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified pool.</p>

    <p></p>
  syntax: public Observable<CloudPool> getAsync(String poolId, PoolGetOptions poolGetOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.getAsync(String,PoolGetOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.getAsync(String poolId, PoolGetOptions poolGetOptions, final ServiceCallback<CloudPool> serviceCallback)
  name: getAsync(String poolId, PoolGetOptions poolGetOptions, final ServiceCallback<CloudPool> serviceCallback)
  nameWithType: Pools.getAsync(String poolId, PoolGetOptions poolGetOptions, final ServiceCallback<CloudPool> serviceCallback)
  parameters:
  - description: <p>The ID of the pool to get. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolGetOptions?alt=com.microsoft.azure.batch.protocol.models.PoolGetOptions&text=PoolGetOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified pool.</p>

    <p></p>
  syntax: public ServiceFuture<CloudPool> getAsync(String poolId, PoolGetOptions poolGetOptions, final ServiceCallback<CloudPool> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.getAsync(String,PoolGetOptions,final ServiceCallback<CloudPool>)
- fullName: com.microsoft.azure.batch.protocol.Pools.getWithServiceResponseAsync(String poolId)
  name: getWithServiceResponseAsync(String poolId)
  nameWithType: Pools.getWithServiceResponseAsync(String poolId)
  parameters:
  - description: <p>The ID of the pool to get. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CloudPool object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.PoolGetHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolGetHeaders&text=PoolGetHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about the specified pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<CloudPool, PoolGetHeaders>> getWithServiceResponseAsync(String poolId)
  uid: com.microsoft.azure.batch.protocol.Pools.getWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Pools.getWithServiceResponseAsync(String poolId, PoolGetOptions poolGetOptions)
  name: getWithServiceResponseAsync(String poolId, PoolGetOptions poolGetOptions)
  nameWithType: Pools.getWithServiceResponseAsync(String poolId, PoolGetOptions poolGetOptions)
  parameters:
  - description: <p>The ID of the pool to get. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolGetOptions?alt=com.microsoft.azure.batch.protocol.models.PoolGetOptions&text=PoolGetOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CloudPool object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.PoolGetHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolGetHeaders&text=PoolGetHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about the specified pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<CloudPool, PoolGetHeaders>> getWithServiceResponseAsync(String poolId, PoolGetOptions poolGetOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.getWithServiceResponseAsync(String,PoolGetOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.list()
  name: list()
  nameWithType: Pools.list()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CloudPool&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public PagedList<CloudPool> list()
  uid: com.microsoft.azure.batch.protocol.Pools.list()
- fullName: com.microsoft.azure.batch.protocol.Pools.list(final PoolListOptions poolListOptions)
  name: list(final PoolListOptions poolListOptions)
  nameWithType: Pools.list(final PoolListOptions poolListOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: poolListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.PoolListOptions?alt=com.microsoft.azure.batch.protocol.models.PoolListOptions&text=PoolListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CloudPool&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public PagedList<CloudPool> list(final PoolListOptions poolListOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.list(final PoolListOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.listAsync()
  name: listAsync()
  nameWithType: Pools.listAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudPool&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public Observable<Page<CloudPool>> listAsync()
  uid: com.microsoft.azure.batch.protocol.Pools.listAsync()
- fullName: com.microsoft.azure.batch.protocol.Pools.listAsync(final ListOperationCallback<CloudPool> serviceCallback)
  name: listAsync(final ListOperationCallback<CloudPool> serviceCallback)
  nameWithType: Pools.listAsync(final ListOperationCallback<CloudPool> serviceCallback)
  parameters:
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudPool>> listAsync(final ListOperationCallback<CloudPool> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.listAsync(final ListOperationCallback<CloudPool>)
- fullName: com.microsoft.azure.batch.protocol.Pools.listAsync(final PoolListOptions poolListOptions)
  name: listAsync(final PoolListOptions poolListOptions)
  nameWithType: Pools.listAsync(final PoolListOptions poolListOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: poolListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.PoolListOptions?alt=com.microsoft.azure.batch.protocol.models.PoolListOptions&text=PoolListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudPool&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public Observable<Page<CloudPool>> listAsync(final PoolListOptions poolListOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.listAsync(final PoolListOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.listAsync(final PoolListOptions poolListOptions, final ListOperationCallback<CloudPool> serviceCallback)
  name: listAsync(final PoolListOptions poolListOptions, final ListOperationCallback<CloudPool> serviceCallback)
  nameWithType: Pools.listAsync(final PoolListOptions poolListOptions, final ListOperationCallback<CloudPool> serviceCallback)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: poolListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.PoolListOptions?alt=com.microsoft.azure.batch.protocol.models.PoolListOptions&text=PoolListOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudPool>> listAsync(final PoolListOptions poolListOptions, final ListOperationCallback<CloudPool> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.listAsync(final PoolListOptions,final ListOperationCallback<CloudPool>)
- fullName: com.microsoft.azure.batch.protocol.Pools.listNext(final String nextPageLink)
  name: listNext(final String nextPageLink)
  nameWithType: Pools.listNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CloudPool&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public PagedList<CloudPool> listNext(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Pools.listNext(final String)
- fullName: com.microsoft.azure.batch.protocol.Pools.listNext(final String nextPageLink, final PoolListNextOptions poolListNextOptions)
  name: listNext(final String nextPageLink, final PoolListNextOptions poolListNextOptions)
  nameWithType: Pools.listNext(final String nextPageLink, final PoolListNextOptions poolListNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.PoolListNextOptions?alt=com.microsoft.azure.batch.protocol.models.PoolListNextOptions&text=PoolListNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CloudPool&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public PagedList<CloudPool> listNext(final String nextPageLink, final PoolListNextOptions poolListNextOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.listNext(final String,final PoolListNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.listNextAsync(final String nextPageLink)
  name: listNextAsync(final String nextPageLink)
  nameWithType: Pools.listNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudPool&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public Observable<Page<CloudPool>> listNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Pools.listNextAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Pools.listNextAsync(final String nextPageLink, final PoolListNextOptions poolListNextOptions)
  name: listNextAsync(final String nextPageLink, final PoolListNextOptions poolListNextOptions)
  nameWithType: Pools.listNextAsync(final String nextPageLink, final PoolListNextOptions poolListNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.PoolListNextOptions?alt=com.microsoft.azure.batch.protocol.models.PoolListNextOptions&text=PoolListNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudPool&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public Observable<Page<CloudPool>> listNextAsync(final String nextPageLink, final PoolListNextOptions poolListNextOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.listNextAsync(final String,final PoolListNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.listNextAsync(final String nextPageLink, final PoolListNextOptions poolListNextOptions, final ServiceFuture<List<CloudPool>> serviceFuture, final ListOperationCallback<CloudPool> serviceCallback)
  name: listNextAsync(final String nextPageLink, final PoolListNextOptions poolListNextOptions, final ServiceFuture<List<CloudPool>> serviceFuture, final ListOperationCallback<CloudPool> serviceCallback)
  nameWithType: Pools.listNextAsync(final String nextPageLink, final PoolListNextOptions poolListNextOptions, final ServiceFuture<List<CloudPool>> serviceFuture, final ListOperationCallback<CloudPool> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.PoolListNextOptions?alt=com.microsoft.azure.batch.protocol.models.PoolListNextOptions&text=PoolListNextOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudPool>> listNextAsync(final String nextPageLink, final PoolListNextOptions poolListNextOptions, final ServiceFuture<List<CloudPool>> serviceFuture, final ListOperationCallback<CloudPool> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.listNextAsync(final String,final PoolListNextOptions,final ServiceFuture<List<CloudPool>>,final ListOperationCallback<CloudPool>)
- fullName: com.microsoft.azure.batch.protocol.Pools.listNextAsync(final String nextPageLink, final ServiceFuture<List<CloudPool>> serviceFuture, final ListOperationCallback<CloudPool> serviceCallback)
  name: listNextAsync(final String nextPageLink, final ServiceFuture<List<CloudPool>> serviceFuture, final ListOperationCallback<CloudPool> serviceCallback)
  nameWithType: Pools.listNextAsync(final String nextPageLink, final ServiceFuture<List<CloudPool>> serviceFuture, final ListOperationCallback<CloudPool> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudPool>> listNextAsync(final String nextPageLink, final ServiceFuture<List<CloudPool>> serviceFuture, final ListOperationCallback<CloudPool> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.listNextAsync(final String,final ServiceFuture<List<CloudPool>>,final ListOperationCallback<CloudPool>)
- fullName: com.microsoft.azure.batch.protocol.Pools.listNextWithServiceResponseAsync(final String nextPageLink)
  name: listNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Pools.listNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudPool&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.PoolListHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolListHeaders&text=PoolListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<CloudPool>, PoolListHeaders>> listNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Pools.listNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Pools.listNextWithServiceResponseAsync(final String nextPageLink, final PoolListNextOptions poolListNextOptions)
  name: listNextWithServiceResponseAsync(final String nextPageLink, final PoolListNextOptions poolListNextOptions)
  nameWithType: Pools.listNextWithServiceResponseAsync(final String nextPageLink, final PoolListNextOptions poolListNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.PoolListNextOptions?alt=com.microsoft.azure.batch.protocol.models.PoolListNextOptions&text=PoolListNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudPool&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.PoolListHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolListHeaders&text=PoolListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<CloudPool>, PoolListHeaders>> listNextWithServiceResponseAsync(final String nextPageLink, final PoolListNextOptions poolListNextOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.listNextWithServiceResponseAsync(final String,final PoolListNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.listUsageMetrics()
  name: listUsageMetrics()
  nameWithType: Pools.listUsageMetrics()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;PoolUsageMetrics&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account. If you do not specify a $filter clause including a poolId, the response includes all pools that existed in the account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned.</p>

    <p></p>
  syntax: public PagedList<PoolUsageMetrics> listUsageMetrics()
  uid: com.microsoft.azure.batch.protocol.Pools.listUsageMetrics()
- fullName: com.microsoft.azure.batch.protocol.Pools.listUsageMetrics(final PoolListUsageMetricsOptions poolListUsageMetricsOptions)
  name: listUsageMetrics(final PoolListUsageMetricsOptions poolListUsageMetricsOptions)
  nameWithType: Pools.listUsageMetrics(final PoolListUsageMetricsOptions poolListUsageMetricsOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: poolListUsageMetricsOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsOptions?alt=com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsOptions&text=PoolListUsageMetricsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;PoolUsageMetrics&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account. If you do not specify a $filter clause including a poolId, the response includes all pools that existed in the account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned.</p>

    <p></p>
  syntax: public PagedList<PoolUsageMetrics> listUsageMetrics(final PoolListUsageMetricsOptions poolListUsageMetricsOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.listUsageMetrics(final PoolListUsageMetricsOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsAsync()
  name: listUsageMetricsAsync()
  nameWithType: Pools.listUsageMetricsAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolUsageMetrics&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account. If you do not specify a $filter clause including a poolId, the response includes all pools that existed in the account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned.</p>

    <p></p>
  syntax: public Observable<Page<PoolUsageMetrics>> listUsageMetricsAsync()
  uid: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsAsync()
- fullName: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsAsync(final ListOperationCallback<PoolUsageMetrics> serviceCallback)
  name: listUsageMetricsAsync(final ListOperationCallback<PoolUsageMetrics> serviceCallback)
  nameWithType: Pools.listUsageMetricsAsync(final ListOperationCallback<PoolUsageMetrics> serviceCallback)
  parameters:
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account. If you do not specify a $filter clause including a poolId, the response includes all pools that existed in the account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned.</p>

    <p></p>
  syntax: public ServiceFuture<List<PoolUsageMetrics>> listUsageMetricsAsync(final ListOperationCallback<PoolUsageMetrics> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsAsync(final ListOperationCallback<PoolUsageMetrics>)
- fullName: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsAsync(final PoolListUsageMetricsOptions poolListUsageMetricsOptions)
  name: listUsageMetricsAsync(final PoolListUsageMetricsOptions poolListUsageMetricsOptions)
  nameWithType: Pools.listUsageMetricsAsync(final PoolListUsageMetricsOptions poolListUsageMetricsOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: poolListUsageMetricsOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsOptions?alt=com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsOptions&text=PoolListUsageMetricsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolUsageMetrics&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account. If you do not specify a $filter clause including a poolId, the response includes all pools that existed in the account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned.</p>

    <p></p>
  syntax: public Observable<Page<PoolUsageMetrics>> listUsageMetricsAsync(final PoolListUsageMetricsOptions poolListUsageMetricsOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsAsync(final PoolListUsageMetricsOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsAsync(final PoolListUsageMetricsOptions poolListUsageMetricsOptions, final ListOperationCallback<PoolUsageMetrics> serviceCallback)
  name: listUsageMetricsAsync(final PoolListUsageMetricsOptions poolListUsageMetricsOptions, final ListOperationCallback<PoolUsageMetrics> serviceCallback)
  nameWithType: Pools.listUsageMetricsAsync(final PoolListUsageMetricsOptions poolListUsageMetricsOptions, final ListOperationCallback<PoolUsageMetrics> serviceCallback)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: poolListUsageMetricsOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsOptions?alt=com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsOptions&text=PoolListUsageMetricsOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account. If you do not specify a $filter clause including a poolId, the response includes all pools that existed in the account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned.</p>

    <p></p>
  syntax: public ServiceFuture<List<PoolUsageMetrics>> listUsageMetricsAsync(final PoolListUsageMetricsOptions poolListUsageMetricsOptions, final ListOperationCallback<PoolUsageMetrics> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsAsync(final PoolListUsageMetricsOptions,final ListOperationCallback<PoolUsageMetrics>)
- fullName: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsNext(final String nextPageLink)
  name: listUsageMetricsNext(final String nextPageLink)
  nameWithType: Pools.listUsageMetricsNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;PoolUsageMetrics&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account. If you do not specify a $filter clause including a poolId, the response includes all pools that existed in the account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned.</p>

    <p></p>
  syntax: public PagedList<PoolUsageMetrics> listUsageMetricsNext(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsNext(final String)
- fullName: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsNext(final String nextPageLink, final PoolListUsageMetricsNextOptions poolListUsageMetricsNextOptions)
  name: listUsageMetricsNext(final String nextPageLink, final PoolListUsageMetricsNextOptions poolListUsageMetricsNextOptions)
  nameWithType: Pools.listUsageMetricsNext(final String nextPageLink, final PoolListUsageMetricsNextOptions poolListUsageMetricsNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolListUsageMetricsNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsNextOptions?alt=com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsNextOptions&text=PoolListUsageMetricsNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;PoolUsageMetrics&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account. If you do not specify a $filter clause including a poolId, the response includes all pools that existed in the account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned.</p>

    <p></p>
  syntax: public PagedList<PoolUsageMetrics> listUsageMetricsNext(final String nextPageLink, final PoolListUsageMetricsNextOptions poolListUsageMetricsNextOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsNext(final String,final PoolListUsageMetricsNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsNextAsync(final String nextPageLink)
  name: listUsageMetricsNextAsync(final String nextPageLink)
  nameWithType: Pools.listUsageMetricsNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolUsageMetrics&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account. If you do not specify a $filter clause including a poolId, the response includes all pools that existed in the account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned.</p>

    <p></p>
  syntax: public Observable<Page<PoolUsageMetrics>> listUsageMetricsNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsNextAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsNextAsync(final String nextPageLink, final PoolListUsageMetricsNextOptions poolListUsageMetricsNextOptions)
  name: listUsageMetricsNextAsync(final String nextPageLink, final PoolListUsageMetricsNextOptions poolListUsageMetricsNextOptions)
  nameWithType: Pools.listUsageMetricsNextAsync(final String nextPageLink, final PoolListUsageMetricsNextOptions poolListUsageMetricsNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolListUsageMetricsNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsNextOptions?alt=com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsNextOptions&text=PoolListUsageMetricsNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolUsageMetrics&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account. If you do not specify a $filter clause including a poolId, the response includes all pools that existed in the account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned.</p>

    <p></p>
  syntax: public Observable<Page<PoolUsageMetrics>> listUsageMetricsNextAsync(final String nextPageLink, final PoolListUsageMetricsNextOptions poolListUsageMetricsNextOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsNextAsync(final String,final PoolListUsageMetricsNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsNextAsync(final String nextPageLink, final PoolListUsageMetricsNextOptions poolListUsageMetricsNextOptions, final ServiceFuture<List<PoolUsageMetrics>> serviceFuture, final ListOperationCallback<PoolUsageMetrics> serviceCallback)
  name: listUsageMetricsNextAsync(final String nextPageLink, final PoolListUsageMetricsNextOptions poolListUsageMetricsNextOptions, final ServiceFuture<List<PoolUsageMetrics>> serviceFuture, final ListOperationCallback<PoolUsageMetrics> serviceCallback)
  nameWithType: Pools.listUsageMetricsNextAsync(final String nextPageLink, final PoolListUsageMetricsNextOptions poolListUsageMetricsNextOptions, final ServiceFuture<List<PoolUsageMetrics>> serviceFuture, final ListOperationCallback<PoolUsageMetrics> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolListUsageMetricsNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsNextOptions?alt=com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsNextOptions&text=PoolListUsageMetricsNextOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account. If you do not specify a $filter clause including a poolId, the response includes all pools that existed in the account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned.</p>

    <p></p>
  syntax: public ServiceFuture<List<PoolUsageMetrics>> listUsageMetricsNextAsync(final String nextPageLink, final PoolListUsageMetricsNextOptions poolListUsageMetricsNextOptions, final ServiceFuture<List<PoolUsageMetrics>> serviceFuture, final ListOperationCallback<PoolUsageMetrics> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsNextAsync(final String,final PoolListUsageMetricsNextOptions,final ServiceFuture<List<PoolUsageMetrics>>,final ListOperationCallback<PoolUsageMetrics>)
- fullName: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsNextAsync(final String nextPageLink, final ServiceFuture<List<PoolUsageMetrics>> serviceFuture, final ListOperationCallback<PoolUsageMetrics> serviceCallback)
  name: listUsageMetricsNextAsync(final String nextPageLink, final ServiceFuture<List<PoolUsageMetrics>> serviceFuture, final ListOperationCallback<PoolUsageMetrics> serviceCallback)
  nameWithType: Pools.listUsageMetricsNextAsync(final String nextPageLink, final ServiceFuture<List<PoolUsageMetrics>> serviceFuture, final ListOperationCallback<PoolUsageMetrics> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account. If you do not specify a $filter clause including a poolId, the response includes all pools that existed in the account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned.</p>

    <p></p>
  syntax: public ServiceFuture<List<PoolUsageMetrics>> listUsageMetricsNextAsync(final String nextPageLink, final ServiceFuture<List<PoolUsageMetrics>> serviceFuture, final ListOperationCallback<PoolUsageMetrics> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsNextAsync(final String,final ServiceFuture<List<PoolUsageMetrics>>,final ListOperationCallback<PoolUsageMetrics>)
- fullName: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsNextWithServiceResponseAsync(final String nextPageLink)
  name: listUsageMetricsNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Pools.listUsageMetricsNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolUsageMetrics&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsHeaders&text=PoolListUsageMetricsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account. If you do not specify a $filter clause including a poolId, the response includes all pools that existed in the account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<PoolUsageMetrics>, PoolListUsageMetricsHeaders>> listUsageMetricsNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsNextWithServiceResponseAsync(final String nextPageLink, final PoolListUsageMetricsNextOptions poolListUsageMetricsNextOptions)
  name: listUsageMetricsNextWithServiceResponseAsync(final String nextPageLink, final PoolListUsageMetricsNextOptions poolListUsageMetricsNextOptions)
  nameWithType: Pools.listUsageMetricsNextWithServiceResponseAsync(final String nextPageLink, final PoolListUsageMetricsNextOptions poolListUsageMetricsNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolListUsageMetricsNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsNextOptions?alt=com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsNextOptions&text=PoolListUsageMetricsNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolUsageMetrics&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsHeaders&text=PoolListUsageMetricsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account. If you do not specify a $filter clause including a poolId, the response includes all pools that existed in the account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<PoolUsageMetrics>, PoolListUsageMetricsHeaders>> listUsageMetricsNextWithServiceResponseAsync(final String nextPageLink, final PoolListUsageMetricsNextOptions poolListUsageMetricsNextOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsNextWithServiceResponseAsync(final String,final PoolListUsageMetricsNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsWithServiceResponseAsync()
  name: listUsageMetricsWithServiceResponseAsync()
  nameWithType: Pools.listUsageMetricsWithServiceResponseAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolUsageMetrics&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsHeaders&text=PoolListUsageMetricsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account. If you do not specify a $filter clause including a poolId, the response includes all pools that existed in the account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<PoolUsageMetrics>, PoolListUsageMetricsHeaders>> listUsageMetricsWithServiceResponseAsync()
  uid: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsWithServiceResponseAsync()
- fullName: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsWithServiceResponseAsync(final PoolListUsageMetricsOptions poolListUsageMetricsOptions)
  name: listUsageMetricsWithServiceResponseAsync(final PoolListUsageMetricsOptions poolListUsageMetricsOptions)
  nameWithType: Pools.listUsageMetricsWithServiceResponseAsync(final PoolListUsageMetricsOptions poolListUsageMetricsOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: poolListUsageMetricsOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsOptions?alt=com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsOptions&text=PoolListUsageMetricsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolUsageMetrics&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolUsageMetrics?alt=com.microsoft.azure.batch.protocol.models.PoolUsageMetrics&text=PoolUsageMetrics" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolListUsageMetricsHeaders&text=PoolListUsageMetricsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account. If you do not specify a $filter clause including a poolId, the response includes all pools that existed in the account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<PoolUsageMetrics>, PoolListUsageMetricsHeaders>> listUsageMetricsWithServiceResponseAsync(final PoolListUsageMetricsOptions poolListUsageMetricsOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.listUsageMetricsWithServiceResponseAsync(final PoolListUsageMetricsOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.listWithServiceResponseAsync()
  name: listWithServiceResponseAsync()
  nameWithType: Pools.listWithServiceResponseAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudPool&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.PoolListHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolListHeaders&text=PoolListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<CloudPool>, PoolListHeaders>> listWithServiceResponseAsync()
  uid: com.microsoft.azure.batch.protocol.Pools.listWithServiceResponseAsync()
- fullName: com.microsoft.azure.batch.protocol.Pools.listWithServiceResponseAsync(final PoolListOptions poolListOptions)
  name: listWithServiceResponseAsync(final PoolListOptions poolListOptions)
  nameWithType: Pools.listWithServiceResponseAsync(final PoolListOptions poolListOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: poolListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.PoolListOptions?alt=com.microsoft.azure.batch.protocol.models.PoolListOptions&text=PoolListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudPool&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudPool?alt=com.microsoft.azure.batch.protocol.models.CloudPool&text=CloudPool" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.PoolListHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolListHeaders&text=PoolListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<CloudPool>, PoolListHeaders>> listWithServiceResponseAsync(final PoolListOptions poolListOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.listWithServiceResponseAsync(final PoolListOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.patch(String poolId, PoolPatchParameter poolPatchParameter)
  name: patch(String poolId, PoolPatchParameter poolPatchParameter)
  nameWithType: Pools.patch(String poolId, PoolPatchParameter poolPatchParameter)
  parameters:
  - description: <p>The ID of the pool to update. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolPatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolPatchParameter?alt=com.microsoft.azure.batch.protocol.models.PoolPatchParameter&text=PoolPatchParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the properties of the specified pool. This only replaces the pool properties specified in the request. For example, if the pool has a start task associated with it, and a request does not specify a start task element, then the pool keeps the existing start task.</p>

    <p></p>
  syntax: public void patch(String poolId, PoolPatchParameter poolPatchParameter)
  uid: com.microsoft.azure.batch.protocol.Pools.patch(String,PoolPatchParameter)
- fullName: com.microsoft.azure.batch.protocol.Pools.patch(String poolId, PoolPatchParameter poolPatchParameter, PoolPatchOptions poolPatchOptions)
  name: patch(String poolId, PoolPatchParameter poolPatchParameter, PoolPatchOptions poolPatchOptions)
  nameWithType: Pools.patch(String poolId, PoolPatchParameter poolPatchParameter, PoolPatchOptions poolPatchOptions)
  parameters:
  - description: <p>The ID of the pool to update. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolPatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolPatchParameter?alt=com.microsoft.azure.batch.protocol.models.PoolPatchParameter&text=PoolPatchParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolPatchOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolPatchOptions?alt=com.microsoft.azure.batch.protocol.models.PoolPatchOptions&text=PoolPatchOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the properties of the specified pool. This only replaces the pool properties specified in the request. For example, if the pool has a start task associated with it, and a request does not specify a start task element, then the pool keeps the existing start task.</p>

    <p></p>
  syntax: public void patch(String poolId, PoolPatchParameter poolPatchParameter, PoolPatchOptions poolPatchOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.patch(String,PoolPatchParameter,PoolPatchOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.patchAsync(String poolId, PoolPatchParameter poolPatchParameter)
  name: patchAsync(String poolId, PoolPatchParameter poolPatchParameter)
  nameWithType: Pools.patchAsync(String poolId, PoolPatchParameter poolPatchParameter)
  parameters:
  - description: <p>The ID of the pool to update. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolPatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolPatchParameter?alt=com.microsoft.azure.batch.protocol.models.PoolPatchParameter&text=PoolPatchParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified pool. This only replaces the pool properties specified in the request. For example, if the pool has a start task associated with it, and a request does not specify a start task element, then the pool keeps the existing start task.</p>

    <p></p>
  syntax: public Observable<Void> patchAsync(String poolId, PoolPatchParameter poolPatchParameter)
  uid: com.microsoft.azure.batch.protocol.Pools.patchAsync(String,PoolPatchParameter)
- fullName: com.microsoft.azure.batch.protocol.Pools.patchAsync(String poolId, PoolPatchParameter poolPatchParameter, final ServiceCallback<Void> serviceCallback)
  name: patchAsync(String poolId, PoolPatchParameter poolPatchParameter, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.patchAsync(String poolId, PoolPatchParameter poolPatchParameter, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool to update. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolPatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolPatchParameter?alt=com.microsoft.azure.batch.protocol.models.PoolPatchParameter&text=PoolPatchParameter" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified pool. This only replaces the pool properties specified in the request. For example, if the pool has a start task associated with it, and a request does not specify a start task element, then the pool keeps the existing start task.</p>

    <p></p>
  syntax: public ServiceFuture<Void> patchAsync(String poolId, PoolPatchParameter poolPatchParameter, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.patchAsync(String,PoolPatchParameter,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Pools.patchAsync(String poolId, PoolPatchParameter poolPatchParameter, PoolPatchOptions poolPatchOptions)
  name: patchAsync(String poolId, PoolPatchParameter poolPatchParameter, PoolPatchOptions poolPatchOptions)
  nameWithType: Pools.patchAsync(String poolId, PoolPatchParameter poolPatchParameter, PoolPatchOptions poolPatchOptions)
  parameters:
  - description: <p>The ID of the pool to update. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolPatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolPatchParameter?alt=com.microsoft.azure.batch.protocol.models.PoolPatchParameter&text=PoolPatchParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolPatchOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolPatchOptions?alt=com.microsoft.azure.batch.protocol.models.PoolPatchOptions&text=PoolPatchOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified pool. This only replaces the pool properties specified in the request. For example, if the pool has a start task associated with it, and a request does not specify a start task element, then the pool keeps the existing start task.</p>

    <p></p>
  syntax: public Observable<Void> patchAsync(String poolId, PoolPatchParameter poolPatchParameter, PoolPatchOptions poolPatchOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.patchAsync(String,PoolPatchParameter,PoolPatchOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.patchAsync(String poolId, PoolPatchParameter poolPatchParameter, PoolPatchOptions poolPatchOptions, final ServiceCallback<Void> serviceCallback)
  name: patchAsync(String poolId, PoolPatchParameter poolPatchParameter, PoolPatchOptions poolPatchOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.patchAsync(String poolId, PoolPatchParameter poolPatchParameter, PoolPatchOptions poolPatchOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool to update. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolPatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolPatchParameter?alt=com.microsoft.azure.batch.protocol.models.PoolPatchParameter&text=PoolPatchParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolPatchOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolPatchOptions?alt=com.microsoft.azure.batch.protocol.models.PoolPatchOptions&text=PoolPatchOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified pool. This only replaces the pool properties specified in the request. For example, if the pool has a start task associated with it, and a request does not specify a start task element, then the pool keeps the existing start task.</p>

    <p></p>
  syntax: public ServiceFuture<Void> patchAsync(String poolId, PoolPatchParameter poolPatchParameter, PoolPatchOptions poolPatchOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.patchAsync(String,PoolPatchParameter,PoolPatchOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Pools.patchWithServiceResponseAsync(String poolId, PoolPatchParameter poolPatchParameter)
  name: patchWithServiceResponseAsync(String poolId, PoolPatchParameter poolPatchParameter)
  nameWithType: Pools.patchWithServiceResponseAsync(String poolId, PoolPatchParameter poolPatchParameter)
  parameters:
  - description: <p>The ID of the pool to update. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolPatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolPatchParameter?alt=com.microsoft.azure.batch.protocol.models.PoolPatchParameter&text=PoolPatchParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.PoolPatchHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolPatchHeaders&text=PoolPatchHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of the specified pool. This only replaces the pool properties specified in the request. For example, if the pool has a start task associated with it, and a request does not specify a start task element, then the pool keeps the existing start task.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolPatchHeaders>> patchWithServiceResponseAsync(String poolId, PoolPatchParameter poolPatchParameter)
  uid: com.microsoft.azure.batch.protocol.Pools.patchWithServiceResponseAsync(String,PoolPatchParameter)
- fullName: com.microsoft.azure.batch.protocol.Pools.patchWithServiceResponseAsync(String poolId, PoolPatchParameter poolPatchParameter, PoolPatchOptions poolPatchOptions)
  name: patchWithServiceResponseAsync(String poolId, PoolPatchParameter poolPatchParameter, PoolPatchOptions poolPatchOptions)
  nameWithType: Pools.patchWithServiceResponseAsync(String poolId, PoolPatchParameter poolPatchParameter, PoolPatchOptions poolPatchOptions)
  parameters:
  - description: <p>The ID of the pool to update. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolPatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolPatchParameter?alt=com.microsoft.azure.batch.protocol.models.PoolPatchParameter&text=PoolPatchParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolPatchOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolPatchOptions?alt=com.microsoft.azure.batch.protocol.models.PoolPatchOptions&text=PoolPatchOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.PoolPatchHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolPatchHeaders&text=PoolPatchHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of the specified pool. This only replaces the pool properties specified in the request. For example, if the pool has a start task associated with it, and a request does not specify a start task element, then the pool keeps the existing start task.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolPatchHeaders>> patchWithServiceResponseAsync(String poolId, PoolPatchParameter poolPatchParameter, PoolPatchOptions poolPatchOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.patchWithServiceResponseAsync(String,PoolPatchParameter,PoolPatchOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.removeNodes(String poolId, NodeRemoveParameter nodeRemoveParameter)
  name: removeNodes(String poolId, NodeRemoveParameter nodeRemoveParameter)
  nameWithType: Pools.removeNodes(String poolId, NodeRemoveParameter nodeRemoveParameter)
  parameters:
  - description: <p>The ID of the pool from which you want to remove nodes. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: nodeRemoveParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeRemoveParameter?alt=com.microsoft.azure.batch.protocol.models.NodeRemoveParameter&text=NodeRemoveParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Removes compute nodes from the specified pool. This operation can only run when the allocation state of the pool is steady. When this operation runs, the allocation state changes from steady to resizing.</p>

    <p></p>
  syntax: public void removeNodes(String poolId, NodeRemoveParameter nodeRemoveParameter)
  uid: com.microsoft.azure.batch.protocol.Pools.removeNodes(String,NodeRemoveParameter)
- fullName: com.microsoft.azure.batch.protocol.Pools.removeNodes(String poolId, NodeRemoveParameter nodeRemoveParameter, PoolRemoveNodesOptions poolRemoveNodesOptions)
  name: removeNodes(String poolId, NodeRemoveParameter nodeRemoveParameter, PoolRemoveNodesOptions poolRemoveNodesOptions)
  nameWithType: Pools.removeNodes(String poolId, NodeRemoveParameter nodeRemoveParameter, PoolRemoveNodesOptions poolRemoveNodesOptions)
  parameters:
  - description: <p>The ID of the pool from which you want to remove nodes. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: nodeRemoveParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeRemoveParameter?alt=com.microsoft.azure.batch.protocol.models.NodeRemoveParameter&text=NodeRemoveParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolRemoveNodesOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolRemoveNodesOptions?alt=com.microsoft.azure.batch.protocol.models.PoolRemoveNodesOptions&text=PoolRemoveNodesOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Removes compute nodes from the specified pool. This operation can only run when the allocation state of the pool is steady. When this operation runs, the allocation state changes from steady to resizing.</p>

    <p></p>
  syntax: public void removeNodes(String poolId, NodeRemoveParameter nodeRemoveParameter, PoolRemoveNodesOptions poolRemoveNodesOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.removeNodes(String,NodeRemoveParameter,PoolRemoveNodesOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.removeNodesAsync(String poolId, NodeRemoveParameter nodeRemoveParameter)
  name: removeNodesAsync(String poolId, NodeRemoveParameter nodeRemoveParameter)
  nameWithType: Pools.removeNodesAsync(String poolId, NodeRemoveParameter nodeRemoveParameter)
  parameters:
  - description: <p>The ID of the pool from which you want to remove nodes. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: nodeRemoveParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeRemoveParameter?alt=com.microsoft.azure.batch.protocol.models.NodeRemoveParameter&text=NodeRemoveParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes compute nodes from the specified pool. This operation can only run when the allocation state of the pool is steady. When this operation runs, the allocation state changes from steady to resizing.</p>

    <p></p>
  syntax: public Observable<Void> removeNodesAsync(String poolId, NodeRemoveParameter nodeRemoveParameter)
  uid: com.microsoft.azure.batch.protocol.Pools.removeNodesAsync(String,NodeRemoveParameter)
- fullName: com.microsoft.azure.batch.protocol.Pools.removeNodesAsync(String poolId, NodeRemoveParameter nodeRemoveParameter, final ServiceCallback<Void> serviceCallback)
  name: removeNodesAsync(String poolId, NodeRemoveParameter nodeRemoveParameter, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.removeNodesAsync(String poolId, NodeRemoveParameter nodeRemoveParameter, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool from which you want to remove nodes. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: nodeRemoveParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeRemoveParameter?alt=com.microsoft.azure.batch.protocol.models.NodeRemoveParameter&text=NodeRemoveParameter" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes compute nodes from the specified pool. This operation can only run when the allocation state of the pool is steady. When this operation runs, the allocation state changes from steady to resizing.</p>

    <p></p>
  syntax: public ServiceFuture<Void> removeNodesAsync(String poolId, NodeRemoveParameter nodeRemoveParameter, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.removeNodesAsync(String,NodeRemoveParameter,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Pools.removeNodesAsync(String poolId, NodeRemoveParameter nodeRemoveParameter, PoolRemoveNodesOptions poolRemoveNodesOptions)
  name: removeNodesAsync(String poolId, NodeRemoveParameter nodeRemoveParameter, PoolRemoveNodesOptions poolRemoveNodesOptions)
  nameWithType: Pools.removeNodesAsync(String poolId, NodeRemoveParameter nodeRemoveParameter, PoolRemoveNodesOptions poolRemoveNodesOptions)
  parameters:
  - description: <p>The ID of the pool from which you want to remove nodes. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: nodeRemoveParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeRemoveParameter?alt=com.microsoft.azure.batch.protocol.models.NodeRemoveParameter&text=NodeRemoveParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolRemoveNodesOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolRemoveNodesOptions?alt=com.microsoft.azure.batch.protocol.models.PoolRemoveNodesOptions&text=PoolRemoveNodesOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes compute nodes from the specified pool. This operation can only run when the allocation state of the pool is steady. When this operation runs, the allocation state changes from steady to resizing.</p>

    <p></p>
  syntax: public Observable<Void> removeNodesAsync(String poolId, NodeRemoveParameter nodeRemoveParameter, PoolRemoveNodesOptions poolRemoveNodesOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.removeNodesAsync(String,NodeRemoveParameter,PoolRemoveNodesOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.removeNodesAsync(String poolId, NodeRemoveParameter nodeRemoveParameter, PoolRemoveNodesOptions poolRemoveNodesOptions, final ServiceCallback<Void> serviceCallback)
  name: removeNodesAsync(String poolId, NodeRemoveParameter nodeRemoveParameter, PoolRemoveNodesOptions poolRemoveNodesOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.removeNodesAsync(String poolId, NodeRemoveParameter nodeRemoveParameter, PoolRemoveNodesOptions poolRemoveNodesOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool from which you want to remove nodes. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: nodeRemoveParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeRemoveParameter?alt=com.microsoft.azure.batch.protocol.models.NodeRemoveParameter&text=NodeRemoveParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolRemoveNodesOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolRemoveNodesOptions?alt=com.microsoft.azure.batch.protocol.models.PoolRemoveNodesOptions&text=PoolRemoveNodesOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes compute nodes from the specified pool. This operation can only run when the allocation state of the pool is steady. When this operation runs, the allocation state changes from steady to resizing.</p>

    <p></p>
  syntax: public ServiceFuture<Void> removeNodesAsync(String poolId, NodeRemoveParameter nodeRemoveParameter, PoolRemoveNodesOptions poolRemoveNodesOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.removeNodesAsync(String,NodeRemoveParameter,PoolRemoveNodesOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Pools.removeNodesWithServiceResponseAsync(String poolId, NodeRemoveParameter nodeRemoveParameter)
  name: removeNodesWithServiceResponseAsync(String poolId, NodeRemoveParameter nodeRemoveParameter)
  nameWithType: Pools.removeNodesWithServiceResponseAsync(String poolId, NodeRemoveParameter nodeRemoveParameter)
  parameters:
  - description: <p>The ID of the pool from which you want to remove nodes. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: nodeRemoveParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeRemoveParameter?alt=com.microsoft.azure.batch.protocol.models.NodeRemoveParameter&text=NodeRemoveParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.PoolRemoveNodesHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolRemoveNodesHeaders&text=PoolRemoveNodesHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Removes compute nodes from the specified pool. This operation can only run when the allocation state of the pool is steady. When this operation runs, the allocation state changes from steady to resizing.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolRemoveNodesHeaders>> removeNodesWithServiceResponseAsync(String poolId, NodeRemoveParameter nodeRemoveParameter)
  uid: com.microsoft.azure.batch.protocol.Pools.removeNodesWithServiceResponseAsync(String,NodeRemoveParameter)
- fullName: com.microsoft.azure.batch.protocol.Pools.removeNodesWithServiceResponseAsync(String poolId, NodeRemoveParameter nodeRemoveParameter, PoolRemoveNodesOptions poolRemoveNodesOptions)
  name: removeNodesWithServiceResponseAsync(String poolId, NodeRemoveParameter nodeRemoveParameter, PoolRemoveNodesOptions poolRemoveNodesOptions)
  nameWithType: Pools.removeNodesWithServiceResponseAsync(String poolId, NodeRemoveParameter nodeRemoveParameter, PoolRemoveNodesOptions poolRemoveNodesOptions)
  parameters:
  - description: <p>The ID of the pool from which you want to remove nodes. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: nodeRemoveParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeRemoveParameter?alt=com.microsoft.azure.batch.protocol.models.NodeRemoveParameter&text=NodeRemoveParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolRemoveNodesOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolRemoveNodesOptions?alt=com.microsoft.azure.batch.protocol.models.PoolRemoveNodesOptions&text=PoolRemoveNodesOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.PoolRemoveNodesHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolRemoveNodesHeaders&text=PoolRemoveNodesHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Removes compute nodes from the specified pool. This operation can only run when the allocation state of the pool is steady. When this operation runs, the allocation state changes from steady to resizing.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolRemoveNodesHeaders>> removeNodesWithServiceResponseAsync(String poolId, NodeRemoveParameter nodeRemoveParameter, PoolRemoveNodesOptions poolRemoveNodesOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.removeNodesWithServiceResponseAsync(String,NodeRemoveParameter,PoolRemoveNodesOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.resize(String poolId, PoolResizeParameter poolResizeParameter)
  name: resize(String poolId, PoolResizeParameter poolResizeParameter)
  nameWithType: Pools.resize(String poolId, PoolResizeParameter poolResizeParameter)
  parameters:
  - description: <p>The ID of the pool to resize. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolResizeParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolResizeParameter?alt=com.microsoft.azure.batch.protocol.models.PoolResizeParameter&text=PoolResizeParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Changes the number of compute nodes that are assigned to a pool. You can only resize a pool when its allocation state is steady. If the pool is already resizing, the request fails with status code 409. When you resize a pool, the pool's allocation state changes from steady to resizing. You cannot resize pools which are configured for automatic scaling. If you try to do this, the Batch service returns an error 409. If you resize a pool downwards, the Batch service chooses which nodes to remove. To remove specific nodes, use the pool remove nodes API instead.</p>

    <p></p>
  syntax: public void resize(String poolId, PoolResizeParameter poolResizeParameter)
  uid: com.microsoft.azure.batch.protocol.Pools.resize(String,PoolResizeParameter)
- fullName: com.microsoft.azure.batch.protocol.Pools.resize(String poolId, PoolResizeParameter poolResizeParameter, PoolResizeOptions poolResizeOptions)
  name: resize(String poolId, PoolResizeParameter poolResizeParameter, PoolResizeOptions poolResizeOptions)
  nameWithType: Pools.resize(String poolId, PoolResizeParameter poolResizeParameter, PoolResizeOptions poolResizeOptions)
  parameters:
  - description: <p>The ID of the pool to resize. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolResizeParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolResizeParameter?alt=com.microsoft.azure.batch.protocol.models.PoolResizeParameter&text=PoolResizeParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolResizeOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolResizeOptions?alt=com.microsoft.azure.batch.protocol.models.PoolResizeOptions&text=PoolResizeOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Changes the number of compute nodes that are assigned to a pool. You can only resize a pool when its allocation state is steady. If the pool is already resizing, the request fails with status code 409. When you resize a pool, the pool's allocation state changes from steady to resizing. You cannot resize pools which are configured for automatic scaling. If you try to do this, the Batch service returns an error 409. If you resize a pool downwards, the Batch service chooses which nodes to remove. To remove specific nodes, use the pool remove nodes API instead.</p>

    <p></p>
  syntax: public void resize(String poolId, PoolResizeParameter poolResizeParameter, PoolResizeOptions poolResizeOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.resize(String,PoolResizeParameter,PoolResizeOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.resizeAsync(String poolId, PoolResizeParameter poolResizeParameter)
  name: resizeAsync(String poolId, PoolResizeParameter poolResizeParameter)
  nameWithType: Pools.resizeAsync(String poolId, PoolResizeParameter poolResizeParameter)
  parameters:
  - description: <p>The ID of the pool to resize. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolResizeParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolResizeParameter?alt=com.microsoft.azure.batch.protocol.models.PoolResizeParameter&text=PoolResizeParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Changes the number of compute nodes that are assigned to a pool. You can only resize a pool when its allocation state is steady. If the pool is already resizing, the request fails with status code 409. When you resize a pool, the pool's allocation state changes from steady to resizing. You cannot resize pools which are configured for automatic scaling. If you try to do this, the Batch service returns an error 409. If you resize a pool downwards, the Batch service chooses which nodes to remove. To remove specific nodes, use the pool remove nodes API instead.</p>

    <p></p>
  syntax: public Observable<Void> resizeAsync(String poolId, PoolResizeParameter poolResizeParameter)
  uid: com.microsoft.azure.batch.protocol.Pools.resizeAsync(String,PoolResizeParameter)
- fullName: com.microsoft.azure.batch.protocol.Pools.resizeAsync(String poolId, PoolResizeParameter poolResizeParameter, final ServiceCallback<Void> serviceCallback)
  name: resizeAsync(String poolId, PoolResizeParameter poolResizeParameter, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.resizeAsync(String poolId, PoolResizeParameter poolResizeParameter, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool to resize. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolResizeParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolResizeParameter?alt=com.microsoft.azure.batch.protocol.models.PoolResizeParameter&text=PoolResizeParameter" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Changes the number of compute nodes that are assigned to a pool. You can only resize a pool when its allocation state is steady. If the pool is already resizing, the request fails with status code 409. When you resize a pool, the pool's allocation state changes from steady to resizing. You cannot resize pools which are configured for automatic scaling. If you try to do this, the Batch service returns an error 409. If you resize a pool downwards, the Batch service chooses which nodes to remove. To remove specific nodes, use the pool remove nodes API instead.</p>

    <p></p>
  syntax: public ServiceFuture<Void> resizeAsync(String poolId, PoolResizeParameter poolResizeParameter, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.resizeAsync(String,PoolResizeParameter,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Pools.resizeAsync(String poolId, PoolResizeParameter poolResizeParameter, PoolResizeOptions poolResizeOptions)
  name: resizeAsync(String poolId, PoolResizeParameter poolResizeParameter, PoolResizeOptions poolResizeOptions)
  nameWithType: Pools.resizeAsync(String poolId, PoolResizeParameter poolResizeParameter, PoolResizeOptions poolResizeOptions)
  parameters:
  - description: <p>The ID of the pool to resize. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolResizeParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolResizeParameter?alt=com.microsoft.azure.batch.protocol.models.PoolResizeParameter&text=PoolResizeParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolResizeOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolResizeOptions?alt=com.microsoft.azure.batch.protocol.models.PoolResizeOptions&text=PoolResizeOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Changes the number of compute nodes that are assigned to a pool. You can only resize a pool when its allocation state is steady. If the pool is already resizing, the request fails with status code 409. When you resize a pool, the pool's allocation state changes from steady to resizing. You cannot resize pools which are configured for automatic scaling. If you try to do this, the Batch service returns an error 409. If you resize a pool downwards, the Batch service chooses which nodes to remove. To remove specific nodes, use the pool remove nodes API instead.</p>

    <p></p>
  syntax: public Observable<Void> resizeAsync(String poolId, PoolResizeParameter poolResizeParameter, PoolResizeOptions poolResizeOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.resizeAsync(String,PoolResizeParameter,PoolResizeOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.resizeAsync(String poolId, PoolResizeParameter poolResizeParameter, PoolResizeOptions poolResizeOptions, final ServiceCallback<Void> serviceCallback)
  name: resizeAsync(String poolId, PoolResizeParameter poolResizeParameter, PoolResizeOptions poolResizeOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.resizeAsync(String poolId, PoolResizeParameter poolResizeParameter, PoolResizeOptions poolResizeOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool to resize. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolResizeParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolResizeParameter?alt=com.microsoft.azure.batch.protocol.models.PoolResizeParameter&text=PoolResizeParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolResizeOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolResizeOptions?alt=com.microsoft.azure.batch.protocol.models.PoolResizeOptions&text=PoolResizeOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Changes the number of compute nodes that are assigned to a pool. You can only resize a pool when its allocation state is steady. If the pool is already resizing, the request fails with status code 409. When you resize a pool, the pool's allocation state changes from steady to resizing. You cannot resize pools which are configured for automatic scaling. If you try to do this, the Batch service returns an error 409. If you resize a pool downwards, the Batch service chooses which nodes to remove. To remove specific nodes, use the pool remove nodes API instead.</p>

    <p></p>
  syntax: public ServiceFuture<Void> resizeAsync(String poolId, PoolResizeParameter poolResizeParameter, PoolResizeOptions poolResizeOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.resizeAsync(String,PoolResizeParameter,PoolResizeOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Pools.resizeWithServiceResponseAsync(String poolId, PoolResizeParameter poolResizeParameter)
  name: resizeWithServiceResponseAsync(String poolId, PoolResizeParameter poolResizeParameter)
  nameWithType: Pools.resizeWithServiceResponseAsync(String poolId, PoolResizeParameter poolResizeParameter)
  parameters:
  - description: <p>The ID of the pool to resize. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolResizeParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolResizeParameter?alt=com.microsoft.azure.batch.protocol.models.PoolResizeParameter&text=PoolResizeParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.PoolResizeHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolResizeHeaders&text=PoolResizeHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Changes the number of compute nodes that are assigned to a pool. You can only resize a pool when its allocation state is steady. If the pool is already resizing, the request fails with status code 409. When you resize a pool, the pool's allocation state changes from steady to resizing. You cannot resize pools which are configured for automatic scaling. If you try to do this, the Batch service returns an error 409. If you resize a pool downwards, the Batch service chooses which nodes to remove. To remove specific nodes, use the pool remove nodes API instead.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolResizeHeaders>> resizeWithServiceResponseAsync(String poolId, PoolResizeParameter poolResizeParameter)
  uid: com.microsoft.azure.batch.protocol.Pools.resizeWithServiceResponseAsync(String,PoolResizeParameter)
- fullName: com.microsoft.azure.batch.protocol.Pools.resizeWithServiceResponseAsync(String poolId, PoolResizeParameter poolResizeParameter, PoolResizeOptions poolResizeOptions)
  name: resizeWithServiceResponseAsync(String poolId, PoolResizeParameter poolResizeParameter, PoolResizeOptions poolResizeOptions)
  nameWithType: Pools.resizeWithServiceResponseAsync(String poolId, PoolResizeParameter poolResizeParameter, PoolResizeOptions poolResizeOptions)
  parameters:
  - description: <p>The ID of the pool to resize. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolResizeParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolResizeParameter?alt=com.microsoft.azure.batch.protocol.models.PoolResizeParameter&text=PoolResizeParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolResizeOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolResizeOptions?alt=com.microsoft.azure.batch.protocol.models.PoolResizeOptions&text=PoolResizeOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.PoolResizeHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolResizeHeaders&text=PoolResizeHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Changes the number of compute nodes that are assigned to a pool. You can only resize a pool when its allocation state is steady. If the pool is already resizing, the request fails with status code 409. When you resize a pool, the pool's allocation state changes from steady to resizing. You cannot resize pools which are configured for automatic scaling. If you try to do this, the Batch service returns an error 409. If you resize a pool downwards, the Batch service chooses which nodes to remove. To remove specific nodes, use the pool remove nodes API instead.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolResizeHeaders>> resizeWithServiceResponseAsync(String poolId, PoolResizeParameter poolResizeParameter, PoolResizeOptions poolResizeOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.resizeWithServiceResponseAsync(String,PoolResizeParameter,PoolResizeOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.stopResize(String poolId)
  name: stopResize(String poolId)
  nameWithType: Pools.stopResize(String poolId)
  parameters:
  - description: <p>The ID of the pool whose resizing you want to stop. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Stops an ongoing resize operation on the pool. This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state. After stopping, the pool stabilizes at the number of nodes it was at when the stop operation was done. During the stop operation, the pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize pool request; this API can also be used to halt the initial sizing of the pool when it is created.</p>

    <p></p>
  syntax: public void stopResize(String poolId)
  uid: com.microsoft.azure.batch.protocol.Pools.stopResize(String)
- fullName: com.microsoft.azure.batch.protocol.Pools.stopResize(String poolId, PoolStopResizeOptions poolStopResizeOptions)
  name: stopResize(String poolId, PoolStopResizeOptions poolStopResizeOptions)
  nameWithType: Pools.stopResize(String poolId, PoolStopResizeOptions poolStopResizeOptions)
  parameters:
  - description: <p>The ID of the pool whose resizing you want to stop. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolStopResizeOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolStopResizeOptions?alt=com.microsoft.azure.batch.protocol.models.PoolStopResizeOptions&text=PoolStopResizeOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Stops an ongoing resize operation on the pool. This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state. After stopping, the pool stabilizes at the number of nodes it was at when the stop operation was done. During the stop operation, the pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize pool request; this API can also be used to halt the initial sizing of the pool when it is created.</p>

    <p></p>
  syntax: public void stopResize(String poolId, PoolStopResizeOptions poolStopResizeOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.stopResize(String,PoolStopResizeOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.stopResizeAsync(String poolId)
  name: stopResizeAsync(String poolId)
  nameWithType: Pools.stopResizeAsync(String poolId)
  parameters:
  - description: <p>The ID of the pool whose resizing you want to stop. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Stops an ongoing resize operation on the pool. This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state. After stopping, the pool stabilizes at the number of nodes it was at when the stop operation was done. During the stop operation, the pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize pool request; this API can also be used to halt the initial sizing of the pool when it is created.</p>

    <p></p>
  syntax: public Observable<Void> stopResizeAsync(String poolId)
  uid: com.microsoft.azure.batch.protocol.Pools.stopResizeAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Pools.stopResizeAsync(String poolId, final ServiceCallback<Void> serviceCallback)
  name: stopResizeAsync(String poolId, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.stopResizeAsync(String poolId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool whose resizing you want to stop. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Stops an ongoing resize operation on the pool. This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state. After stopping, the pool stabilizes at the number of nodes it was at when the stop operation was done. During the stop operation, the pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize pool request; this API can also be used to halt the initial sizing of the pool when it is created.</p>

    <p></p>
  syntax: public ServiceFuture<Void> stopResizeAsync(String poolId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.stopResizeAsync(String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Pools.stopResizeAsync(String poolId, PoolStopResizeOptions poolStopResizeOptions)
  name: stopResizeAsync(String poolId, PoolStopResizeOptions poolStopResizeOptions)
  nameWithType: Pools.stopResizeAsync(String poolId, PoolStopResizeOptions poolStopResizeOptions)
  parameters:
  - description: <p>The ID of the pool whose resizing you want to stop. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolStopResizeOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolStopResizeOptions?alt=com.microsoft.azure.batch.protocol.models.PoolStopResizeOptions&text=PoolStopResizeOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Stops an ongoing resize operation on the pool. This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state. After stopping, the pool stabilizes at the number of nodes it was at when the stop operation was done. During the stop operation, the pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize pool request; this API can also be used to halt the initial sizing of the pool when it is created.</p>

    <p></p>
  syntax: public Observable<Void> stopResizeAsync(String poolId, PoolStopResizeOptions poolStopResizeOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.stopResizeAsync(String,PoolStopResizeOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.stopResizeAsync(String poolId, PoolStopResizeOptions poolStopResizeOptions, final ServiceCallback<Void> serviceCallback)
  name: stopResizeAsync(String poolId, PoolStopResizeOptions poolStopResizeOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.stopResizeAsync(String poolId, PoolStopResizeOptions poolStopResizeOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool whose resizing you want to stop. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolStopResizeOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolStopResizeOptions?alt=com.microsoft.azure.batch.protocol.models.PoolStopResizeOptions&text=PoolStopResizeOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Stops an ongoing resize operation on the pool. This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state. After stopping, the pool stabilizes at the number of nodes it was at when the stop operation was done. During the stop operation, the pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize pool request; this API can also be used to halt the initial sizing of the pool when it is created.</p>

    <p></p>
  syntax: public ServiceFuture<Void> stopResizeAsync(String poolId, PoolStopResizeOptions poolStopResizeOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.stopResizeAsync(String,PoolStopResizeOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Pools.stopResizeWithServiceResponseAsync(String poolId)
  name: stopResizeWithServiceResponseAsync(String poolId)
  nameWithType: Pools.stopResizeWithServiceResponseAsync(String poolId)
  parameters:
  - description: <p>The ID of the pool whose resizing you want to stop. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.PoolStopResizeHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolStopResizeHeaders&text=PoolStopResizeHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Stops an ongoing resize operation on the pool. This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state. After stopping, the pool stabilizes at the number of nodes it was at when the stop operation was done. During the stop operation, the pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize pool request; this API can also be used to halt the initial sizing of the pool when it is created.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolStopResizeHeaders>> stopResizeWithServiceResponseAsync(String poolId)
  uid: com.microsoft.azure.batch.protocol.Pools.stopResizeWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Pools.stopResizeWithServiceResponseAsync(String poolId, PoolStopResizeOptions poolStopResizeOptions)
  name: stopResizeWithServiceResponseAsync(String poolId, PoolStopResizeOptions poolStopResizeOptions)
  nameWithType: Pools.stopResizeWithServiceResponseAsync(String poolId, PoolStopResizeOptions poolStopResizeOptions)
  parameters:
  - description: <p>The ID of the pool whose resizing you want to stop. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolStopResizeOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolStopResizeOptions?alt=com.microsoft.azure.batch.protocol.models.PoolStopResizeOptions&text=PoolStopResizeOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.PoolStopResizeHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolStopResizeHeaders&text=PoolStopResizeHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Stops an ongoing resize operation on the pool. This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state. After stopping, the pool stabilizes at the number of nodes it was at when the stop operation was done. During the stop operation, the pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize pool request; this API can also be used to halt the initial sizing of the pool when it is created.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolStopResizeHeaders>> stopResizeWithServiceResponseAsync(String poolId, PoolStopResizeOptions poolStopResizeOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.stopResizeWithServiceResponseAsync(String,PoolStopResizeOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.updateProperties(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter)
  name: updateProperties(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter)
  nameWithType: Pools.updateProperties(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter)
  parameters:
  - description: <p>The ID of the pool to update. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolUpdatePropertiesParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter&text=PoolUpdatePropertiesParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the properties of the specified pool. This fully replaces all the updatable properties of the pool. For example, if the pool has a start task associated with it and if start task is not specified with this request, then the Batch service will remove the existing start task.</p>

    <p></p>
  syntax: public void updateProperties(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter)
  uid: com.microsoft.azure.batch.protocol.Pools.updateProperties(String,PoolUpdatePropertiesParameter)
- fullName: com.microsoft.azure.batch.protocol.Pools.updateProperties(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, PoolUpdatePropertiesOptions poolUpdatePropertiesOptions)
  name: updateProperties(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, PoolUpdatePropertiesOptions poolUpdatePropertiesOptions)
  nameWithType: Pools.updateProperties(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, PoolUpdatePropertiesOptions poolUpdatePropertiesOptions)
  parameters:
  - description: <p>The ID of the pool to update. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolUpdatePropertiesParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter&text=PoolUpdatePropertiesParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolUpdatePropertiesOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesOptions?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesOptions&text=PoolUpdatePropertiesOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the properties of the specified pool. This fully replaces all the updatable properties of the pool. For example, if the pool has a start task associated with it and if start task is not specified with this request, then the Batch service will remove the existing start task.</p>

    <p></p>
  syntax: public void updateProperties(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, PoolUpdatePropertiesOptions poolUpdatePropertiesOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.updateProperties(String,PoolUpdatePropertiesParameter,PoolUpdatePropertiesOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.updatePropertiesAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter)
  name: updatePropertiesAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter)
  nameWithType: Pools.updatePropertiesAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter)
  parameters:
  - description: <p>The ID of the pool to update. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolUpdatePropertiesParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter&text=PoolUpdatePropertiesParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified pool. This fully replaces all the updatable properties of the pool. For example, if the pool has a start task associated with it and if start task is not specified with this request, then the Batch service will remove the existing start task.</p>

    <p></p>
  syntax: public Observable<Void> updatePropertiesAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter)
  uid: com.microsoft.azure.batch.protocol.Pools.updatePropertiesAsync(String,PoolUpdatePropertiesParameter)
- fullName: com.microsoft.azure.batch.protocol.Pools.updatePropertiesAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, final ServiceCallback<Void> serviceCallback)
  name: updatePropertiesAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.updatePropertiesAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool to update. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolUpdatePropertiesParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter&text=PoolUpdatePropertiesParameter" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified pool. This fully replaces all the updatable properties of the pool. For example, if the pool has a start task associated with it and if start task is not specified with this request, then the Batch service will remove the existing start task.</p>

    <p></p>
  syntax: public ServiceFuture<Void> updatePropertiesAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.updatePropertiesAsync(String,PoolUpdatePropertiesParameter,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Pools.updatePropertiesAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, PoolUpdatePropertiesOptions poolUpdatePropertiesOptions)
  name: updatePropertiesAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, PoolUpdatePropertiesOptions poolUpdatePropertiesOptions)
  nameWithType: Pools.updatePropertiesAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, PoolUpdatePropertiesOptions poolUpdatePropertiesOptions)
  parameters:
  - description: <p>The ID of the pool to update. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolUpdatePropertiesParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter&text=PoolUpdatePropertiesParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolUpdatePropertiesOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesOptions?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesOptions&text=PoolUpdatePropertiesOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified pool. This fully replaces all the updatable properties of the pool. For example, if the pool has a start task associated with it and if start task is not specified with this request, then the Batch service will remove the existing start task.</p>

    <p></p>
  syntax: public Observable<Void> updatePropertiesAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, PoolUpdatePropertiesOptions poolUpdatePropertiesOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.updatePropertiesAsync(String,PoolUpdatePropertiesParameter,PoolUpdatePropertiesOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.updatePropertiesAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, PoolUpdatePropertiesOptions poolUpdatePropertiesOptions, final ServiceCallback<Void> serviceCallback)
  name: updatePropertiesAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, PoolUpdatePropertiesOptions poolUpdatePropertiesOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.updatePropertiesAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, PoolUpdatePropertiesOptions poolUpdatePropertiesOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool to update. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolUpdatePropertiesParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter&text=PoolUpdatePropertiesParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolUpdatePropertiesOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesOptions?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesOptions&text=PoolUpdatePropertiesOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified pool. This fully replaces all the updatable properties of the pool. For example, if the pool has a start task associated with it and if start task is not specified with this request, then the Batch service will remove the existing start task.</p>

    <p></p>
  syntax: public ServiceFuture<Void> updatePropertiesAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, PoolUpdatePropertiesOptions poolUpdatePropertiesOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.updatePropertiesAsync(String,PoolUpdatePropertiesParameter,PoolUpdatePropertiesOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Pools.updatePropertiesWithServiceResponseAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter)
  name: updatePropertiesWithServiceResponseAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter)
  nameWithType: Pools.updatePropertiesWithServiceResponseAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter)
  parameters:
  - description: <p>The ID of the pool to update. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolUpdatePropertiesParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter&text=PoolUpdatePropertiesParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesHeaders&text=PoolUpdatePropertiesHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of the specified pool. This fully replaces all the updatable properties of the pool. For example, if the pool has a start task associated with it and if start task is not specified with this request, then the Batch service will remove the existing start task.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolUpdatePropertiesHeaders>> updatePropertiesWithServiceResponseAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter)
  uid: com.microsoft.azure.batch.protocol.Pools.updatePropertiesWithServiceResponseAsync(String,PoolUpdatePropertiesParameter)
- fullName: com.microsoft.azure.batch.protocol.Pools.updatePropertiesWithServiceResponseAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, PoolUpdatePropertiesOptions poolUpdatePropertiesOptions)
  name: updatePropertiesWithServiceResponseAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, PoolUpdatePropertiesOptions poolUpdatePropertiesOptions)
  nameWithType: Pools.updatePropertiesWithServiceResponseAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, PoolUpdatePropertiesOptions poolUpdatePropertiesOptions)
  parameters:
  - description: <p>The ID of the pool to update. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: poolUpdatePropertiesParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter&text=PoolUpdatePropertiesParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolUpdatePropertiesOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesOptions?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesOptions&text=PoolUpdatePropertiesOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesHeaders?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesHeaders&text=PoolUpdatePropertiesHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of the specified pool. This fully replaces all the updatable properties of the pool. For example, if the pool has a start task associated with it and if start task is not specified with this request, then the Batch service will remove the existing start task.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolUpdatePropertiesHeaders>> updatePropertiesWithServiceResponseAsync(String poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, PoolUpdatePropertiesOptions poolUpdatePropertiesOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.updatePropertiesWithServiceResponseAsync(String,PoolUpdatePropertiesParameter,PoolUpdatePropertiesOptions)
nameWithType: Pools
syntax: public interface Pools
type: interface
uid: com.microsoft.azure.batch.protocol.Pools
fullName: com.microsoft.azure.batch.protocol.Pools
name: Pools
package: com.microsoft.azure.batch.protocol
summary: <p>An instance of this class provides access to all the operations defined in Pools. </p>
metadata: {}
