### YamlMime:ManagedReference
items:
- uid: "com.azure.messaging.eventhubs.implementation.PartitionProcessor"
  id: "PartitionProcessor"
  parent: "com.azure.messaging.eventhubs.implementation"
  children:
  - "com.azure.messaging.eventhubs.implementation.PartitionProcessor.PartitionProcessor()"
  - "com.azure.messaging.eventhubs.implementation.PartitionProcessor.close(com.azure.messaging.eventhubs.models.CloseContext)"
  - "com.azure.messaging.eventhubs.implementation.PartitionProcessor.initialize(com.azure.messaging.eventhubs.models.InitializationContext)"
  - "com.azure.messaging.eventhubs.implementation.PartitionProcessor.processError(com.azure.messaging.eventhubs.models.ErrorContext)"
  - "com.azure.messaging.eventhubs.implementation.PartitionProcessor.processEvent(com.azure.messaging.eventhubs.models.EventContext)"
  langs:
  - "java"
  name: "PartitionProcessor"
  nameWithType: "PartitionProcessor"
  fullName: "com.azure.messaging.eventhubs.implementation.PartitionProcessor"
  type: "Class"
  package: "com.azure.messaging.eventhubs.implementation"
  summary: "An abstract class defining all the operations that a partition processor can perform. Users of <xref uid=\"com.azure.messaging.eventhubs.EventProcessorClient\" data-throw-if-not-resolved=\"false\">EventProcessorClient</xref> should extend from this class and implement <xref uid=\"com.azure.messaging.eventhubs.implementation.PartitionProcessor.processEvent(com.azure.messaging.eventhubs.models.EventContext)\" data-throw-if-not-resolved=\"false\">#processEvent(EventContext)</xref> for processing events. Additionally, users can override:\n\n *  <xref uid=\"com.azure.messaging.eventhubs.implementation.PartitionProcessor.initialize(com.azure.messaging.eventhubs.models.InitializationContext)\" data-throw-if-not-resolved=\"false\">#initialize(InitializationContext)</xref> \\- This method is called before at the beginning of processing a partition.\n *  <xref uid=\"com.azure.messaging.eventhubs.implementation.PartitionProcessor.processError(com.azure.messaging.eventhubs.models.ErrorContext)\" data-throw-if-not-resolved=\"false\">#processError(ErrorContext)</xref> \\- This method is called if there is an error while processing events\n *  <xref uid=\"com.azure.messaging.eventhubs.implementation.PartitionProcessor.close(com.azure.messaging.eventhubs.models.CloseContext)\" data-throw-if-not-resolved=\"false\">#close(CloseContext)</xref> \\- This method is called at the end of processing a partition. The <xref uid=\"com.azure.messaging.eventhubs.models.CloseReason\" data-throw-if-not-resolved=\"false\">CloseReason</xref> specifies why the processing of a partition stopped.\n\nAn instance of partition processor will process events from a single partition only.\n\nImplementations of this abstract class also have the responsibility of updating checkpoints when appropriate."
  syntax:
    content: "public abstract class PartitionProcessor"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.PartitionProcessor()"
  id: "PartitionProcessor()"
  parent: "com.azure.messaging.eventhubs.implementation.PartitionProcessor"
  langs:
  - "java"
  name: "PartitionProcessor()"
  nameWithType: "PartitionProcessor.PartitionProcessor()"
  fullName: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.PartitionProcessor()"
  overload: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.PartitionProcessor*"
  type: "Constructor"
  package: "com.azure.messaging.eventhubs.implementation"
  syntax:
    content: "public PartitionProcessor()"
- uid: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.close(com.azure.messaging.eventhubs.models.CloseContext)"
  id: "close(com.azure.messaging.eventhubs.models.CloseContext)"
  parent: "com.azure.messaging.eventhubs.implementation.PartitionProcessor"
  langs:
  - "java"
  name: "close(CloseContext closeContext)"
  nameWithType: "PartitionProcessor.close(CloseContext closeContext)"
  fullName: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.close(CloseContext closeContext)"
  overload: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.close*"
  type: "Method"
  package: "com.azure.messaging.eventhubs.implementation"
  summary: "This method is called before the partition processor is closed. A partition processor could be closed for various reasons and the reasons and implementations of this interface can take appropriate actions to cleanup before the partition processor is shutdown."
  syntax:
    content: "public void close(CloseContext closeContext)"
    parameters:
    - id: "closeContext"
      type: "com.azure.messaging.eventhubs.models.CloseContext"
      description: "Contains the reason for closing and the partition information for which the processing of\n events is closed."
- uid: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.initialize(com.azure.messaging.eventhubs.models.InitializationContext)"
  id: "initialize(com.azure.messaging.eventhubs.models.InitializationContext)"
  parent: "com.azure.messaging.eventhubs.implementation.PartitionProcessor"
  langs:
  - "java"
  name: "initialize(InitializationContext initializationContext)"
  nameWithType: "PartitionProcessor.initialize(InitializationContext initializationContext)"
  fullName: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.initialize(InitializationContext initializationContext)"
  overload: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.initialize*"
  type: "Method"
  package: "com.azure.messaging.eventhubs.implementation"
  summary: "This method is called when this <xref uid=\"com.azure.messaging.eventhubs.EventProcessorClient\" data-throw-if-not-resolved=\"false\">EventProcessorClient</xref> takes ownership of a new partition and before any events from this partition are received. By default, each partition is processed from <xref uid=\"com.azure.messaging.eventhubs.models.EventPosition.earliest()\" data-throw-if-not-resolved=\"false\">EventPosition#earliest()</xref>. To start processing from a different position, use <xref uid=\"\" data-throw-if-not-resolved=\"false\">InitializationContext#setInitialPosition(EventPosition)</xref> to"
  syntax:
    content: "public void initialize(InitializationContext initializationContext)"
    parameters:
    - id: "initializationContext"
      type: "com.azure.messaging.eventhubs.models.InitializationContext"
      description: "The initialization context before events from the partition are processed."
- uid: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.processError(com.azure.messaging.eventhubs.models.ErrorContext)"
  id: "processError(com.azure.messaging.eventhubs.models.ErrorContext)"
  parent: "com.azure.messaging.eventhubs.implementation.PartitionProcessor"
  langs:
  - "java"
  name: "processError(ErrorContext errorContext)"
  nameWithType: "PartitionProcessor.processError(ErrorContext errorContext)"
  fullName: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.processError(ErrorContext errorContext)"
  overload: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.processError*"
  type: "Method"
  package: "com.azure.messaging.eventhubs.implementation"
  summary: "This method is called when an error occurs while receiving events from Event Hub. An error also marks the end of event data stream."
  syntax:
    content: "public abstract void processError(ErrorContext errorContext)"
    parameters:
    - id: "errorContext"
      type: "com.azure.messaging.eventhubs.models.ErrorContext"
      description: "The error details and partition information where the error occurred."
- uid: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.processEvent(com.azure.messaging.eventhubs.models.EventContext)"
  id: "processEvent(com.azure.messaging.eventhubs.models.EventContext)"
  parent: "com.azure.messaging.eventhubs.implementation.PartitionProcessor"
  langs:
  - "java"
  name: "processEvent(EventContext eventContext)"
  nameWithType: "PartitionProcessor.processEvent(EventContext eventContext)"
  fullName: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.processEvent(EventContext eventContext)"
  overload: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.processEvent*"
  type: "Method"
  package: "com.azure.messaging.eventhubs.implementation"
  summary: "This method is called when a new event is received for this partition. Processing of this event can happen asynchronously."
  syntax:
    content: "public abstract void processEvent(EventContext eventContext)"
    parameters:
    - id: "eventContext"
      type: "com.azure.messaging.eventhubs.models.EventContext"
      description: "The partition information and the next event data from this partition."
references:
- uid: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.PartitionProcessor*"
  name: "PartitionProcessor"
  nameWithType: "PartitionProcessor.PartitionProcessor"
  fullName: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.PartitionProcessor"
  package: "com.azure.messaging.eventhubs.implementation"
- uid: "com.azure.messaging.eventhubs.models.InitializationContext"
  name: "InitializationContext"
  nameWithType: "InitializationContext"
  fullName: "com.azure.messaging.eventhubs.models.InitializationContext"
- uid: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.initialize*"
  name: "initialize"
  nameWithType: "PartitionProcessor.initialize"
  fullName: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.initialize"
  package: "com.azure.messaging.eventhubs.implementation"
- uid: "com.azure.messaging.eventhubs.models.EventContext"
  name: "EventContext"
  nameWithType: "EventContext"
  fullName: "com.azure.messaging.eventhubs.models.EventContext"
- uid: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.processEvent*"
  name: "processEvent"
  nameWithType: "PartitionProcessor.processEvent"
  fullName: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.processEvent"
  package: "com.azure.messaging.eventhubs.implementation"
- uid: "com.azure.messaging.eventhubs.models.ErrorContext"
  name: "ErrorContext"
  nameWithType: "ErrorContext"
  fullName: "com.azure.messaging.eventhubs.models.ErrorContext"
- uid: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.processError*"
  name: "processError"
  nameWithType: "PartitionProcessor.processError"
  fullName: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.processError"
  package: "com.azure.messaging.eventhubs.implementation"
- uid: "com.azure.messaging.eventhubs.models.CloseContext"
  name: "CloseContext"
  nameWithType: "CloseContext"
  fullName: "com.azure.messaging.eventhubs.models.CloseContext"
- uid: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.close*"
  name: "close"
  nameWithType: "PartitionProcessor.close"
  fullName: "com.azure.messaging.eventhubs.implementation.PartitionProcessor.close"
  package: "com.azure.messaging.eventhubs.implementation"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
