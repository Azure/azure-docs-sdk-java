### YamlMime:JavaType
uid: "com.azure.resourcemanager.batch.models.StartTask"
fullName: "com.azure.resourcemanager.batch.models.StartTask"
name: "StartTask"
nameWithType: "StartTask"
summary: "A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class StartTask"
constructors:
- uid: "com.azure.resourcemanager.batch.models.StartTask.StartTask()"
  fullName: "com.azure.resourcemanager.batch.models.StartTask.StartTask()"
  name: "StartTask()"
  nameWithType: "StartTask.StartTask()"
  syntax: "public StartTask()"
methods:
- uid: "com.azure.resourcemanager.batch.models.StartTask.commandLine()"
  fullName: "com.azure.resourcemanager.batch.models.StartTask.commandLine()"
  name: "commandLine()"
  nameWithType: "StartTask.commandLine()"
  summary: "Get the command<wbr>Line property: The command line of the start task."
  syntax: "public String commandLine()"
  desc: "Get the commandLine property: The command line of the start task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. Required if any other properties of the startTask are specified."
  returns:
    description: "the commandLine value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.batch.models.StartTask.containerSettings()"
  fullName: "com.azure.resourcemanager.batch.models.StartTask.containerSettings()"
  name: "containerSettings()"
  nameWithType: "StartTask.containerSettings()"
  summary: "Get the container<wbr>Settings property: The container settings for a task."
  syntax: "public TaskContainerSettings containerSettings()"
  desc: "Get the containerSettings property: The container settings for a task. When this is specified, all directories recursively below the AZ\\_BATCH\\_NODE\\_ROOT\\_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container."
  returns:
    description: "the containerSettings value."
    type: "<xref href=\"com.azure.resourcemanager.batch.models.TaskContainerSettings?alt=com.azure.resourcemanager.batch.models.TaskContainerSettings&text=TaskContainerSettings\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.batch.models.StartTask.environmentSettings()"
  fullName: "com.azure.resourcemanager.batch.models.StartTask.environmentSettings()"
  name: "environmentSettings()"
  nameWithType: "StartTask.environmentSettings()"
  summary: "Get the environment<wbr>Settings property: A list of environment variable settings for the start task."
  syntax: "public List<EnvironmentSetting> environmentSettings()"
  desc: "Get the environmentSettings property: A list of environment variable settings for the start task."
  returns:
    description: "the environmentSettings value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.batch.models.EnvironmentSetting?alt=com.azure.resourcemanager.batch.models.EnvironmentSetting&text=EnvironmentSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.batch.models.StartTask.maxTaskRetryCount()"
  fullName: "com.azure.resourcemanager.batch.models.StartTask.maxTaskRetryCount()"
  name: "maxTaskRetryCount()"
  nameWithType: "StartTask.maxTaskRetryCount()"
  summary: "Get the max<wbr>Task<wbr>Retry<wbr>Count property: The maximum number of times the task may be retried."
  syntax: "public Integer maxTaskRetryCount()"
  desc: "Get the maxTaskRetryCount property: The maximum number of times the task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries)."
  returns:
    description: "the maxTaskRetryCount value."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.batch.models.StartTask.resourceFiles()"
  fullName: "com.azure.resourcemanager.batch.models.StartTask.resourceFiles()"
  name: "resourceFiles()"
  nameWithType: "StartTask.resourceFiles()"
  summary: "Get the resource<wbr>Files property: A list of files that the Batch service will download to the compute node before running the command line."
  syntax: "public List<ResourceFile> resourceFiles()"
  desc: "Get the resourceFiles property: A list of files that the Batch service will download to the compute node before running the command line."
  returns:
    description: "the resourceFiles value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.batch.models.ResourceFile?alt=com.azure.resourcemanager.batch.models.ResourceFile&text=ResourceFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.batch.models.StartTask.userIdentity()"
  fullName: "com.azure.resourcemanager.batch.models.StartTask.userIdentity()"
  name: "userIdentity()"
  nameWithType: "StartTask.userIdentity()"
  summary: "Get the user<wbr>Identity property: The definition of the user identity under which the task is run."
  syntax: "public UserIdentity userIdentity()"
  desc: "Get the userIdentity property: The definition of the user identity under which the task is run. If omitted, the task runs as a non-administrative user unique to the task."
  returns:
    description: "the userIdentity value."
    type: "<xref href=\"com.azure.resourcemanager.batch.models.UserIdentity?alt=com.azure.resourcemanager.batch.models.UserIdentity&text=UserIdentity\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.batch.models.StartTask.validate()"
  fullName: "com.azure.resourcemanager.batch.models.StartTask.validate()"
  name: "validate()"
  nameWithType: "StartTask.validate()"
  summary: "Validates the instance."
  syntax: "public void validate()"
  desc: "Validates the instance."
- uid: "com.azure.resourcemanager.batch.models.StartTask.waitForSuccess()"
  fullName: "com.azure.resourcemanager.batch.models.StartTask.waitForSuccess()"
  name: "waitForSuccess()"
  nameWithType: "StartTask.waitForSuccess()"
  summary: "Get the wait<wbr>For<wbr>Success property: Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node."
  syntax: "public Boolean waitForSuccess()"
  desc: "Get the waitForSuccess property: Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node. If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is true."
  returns:
    description: "the waitForSuccess value."
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.batch.models.StartTask.withCommandLine(java.lang.String)"
  fullName: "com.azure.resourcemanager.batch.models.StartTask.withCommandLine(String commandLine)"
  name: "withCommandLine(String commandLine)"
  nameWithType: "StartTask.withCommandLine(String commandLine)"
  summary: "Set the command<wbr>Line property: The command line of the start task."
  parameters:
  - description: "the commandLine value to set."
    name: "commandLine"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public StartTask withCommandLine(String commandLine)"
  desc: "Set the commandLine property: The command line of the start task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. Required if any other properties of the startTask are specified."
  returns:
    description: "the StartTask object itself."
    type: "<xref href=\"com.azure.resourcemanager.batch.models.StartTask?alt=com.azure.resourcemanager.batch.models.StartTask&text=StartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.batch.models.StartTask.withContainerSettings(com.azure.resourcemanager.batch.models.TaskContainerSettings)"
  fullName: "com.azure.resourcemanager.batch.models.StartTask.withContainerSettings(TaskContainerSettings containerSettings)"
  name: "withContainerSettings(TaskContainerSettings containerSettings)"
  nameWithType: "StartTask.withContainerSettings(TaskContainerSettings containerSettings)"
  summary: "Set the container<wbr>Settings property: The container settings for a task."
  parameters:
  - description: "the containerSettings value to set."
    name: "containerSettings"
    type: "<xref href=\"com.azure.resourcemanager.batch.models.TaskContainerSettings?alt=com.azure.resourcemanager.batch.models.TaskContainerSettings&text=TaskContainerSettings\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public StartTask withContainerSettings(TaskContainerSettings containerSettings)"
  desc: "Set the containerSettings property: The container settings for a task. When this is specified, all directories recursively below the AZ\\_BATCH\\_NODE\\_ROOT\\_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container."
  returns:
    description: "the StartTask object itself."
    type: "<xref href=\"com.azure.resourcemanager.batch.models.StartTask?alt=com.azure.resourcemanager.batch.models.StartTask&text=StartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.batch.models.StartTask.withEnvironmentSettings(java.util.List<com.azure.resourcemanager.batch.models.EnvironmentSetting>)"
  fullName: "com.azure.resourcemanager.batch.models.StartTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)"
  name: "withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)"
  nameWithType: "StartTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)"
  summary: "Set the environment<wbr>Settings property: A list of environment variable settings for the start task."
  parameters:
  - description: "the environmentSettings value to set."
    name: "environmentSettings"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.batch.models.EnvironmentSetting?alt=com.azure.resourcemanager.batch.models.EnvironmentSetting&text=EnvironmentSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public StartTask withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)"
  desc: "Set the environmentSettings property: A list of environment variable settings for the start task."
  returns:
    description: "the StartTask object itself."
    type: "<xref href=\"com.azure.resourcemanager.batch.models.StartTask?alt=com.azure.resourcemanager.batch.models.StartTask&text=StartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.batch.models.StartTask.withMaxTaskRetryCount(java.lang.Integer)"
  fullName: "com.azure.resourcemanager.batch.models.StartTask.withMaxTaskRetryCount(Integer maxTaskRetryCount)"
  name: "withMaxTaskRetryCount(Integer maxTaskRetryCount)"
  nameWithType: "StartTask.withMaxTaskRetryCount(Integer maxTaskRetryCount)"
  summary: "Set the max<wbr>Task<wbr>Retry<wbr>Count property: The maximum number of times the task may be retried."
  parameters:
  - description: "the maxTaskRetryCount value to set."
    name: "maxTaskRetryCount"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public StartTask withMaxTaskRetryCount(Integer maxTaskRetryCount)"
  desc: "Set the maxTaskRetryCount property: The maximum number of times the task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries)."
  returns:
    description: "the StartTask object itself."
    type: "<xref href=\"com.azure.resourcemanager.batch.models.StartTask?alt=com.azure.resourcemanager.batch.models.StartTask&text=StartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.batch.models.StartTask.withResourceFiles(java.util.List<com.azure.resourcemanager.batch.models.ResourceFile>)"
  fullName: "com.azure.resourcemanager.batch.models.StartTask.withResourceFiles(List<ResourceFile> resourceFiles)"
  name: "withResourceFiles(List<ResourceFile> resourceFiles)"
  nameWithType: "StartTask.withResourceFiles(List<ResourceFile> resourceFiles)"
  summary: "Set the resource<wbr>Files property: A list of files that the Batch service will download to the compute node before running the command line."
  parameters:
  - description: "the resourceFiles value to set."
    name: "resourceFiles"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.batch.models.ResourceFile?alt=com.azure.resourcemanager.batch.models.ResourceFile&text=ResourceFile\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public StartTask withResourceFiles(List<ResourceFile> resourceFiles)"
  desc: "Set the resourceFiles property: A list of files that the Batch service will download to the compute node before running the command line."
  returns:
    description: "the StartTask object itself."
    type: "<xref href=\"com.azure.resourcemanager.batch.models.StartTask?alt=com.azure.resourcemanager.batch.models.StartTask&text=StartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.batch.models.StartTask.withUserIdentity(com.azure.resourcemanager.batch.models.UserIdentity)"
  fullName: "com.azure.resourcemanager.batch.models.StartTask.withUserIdentity(UserIdentity userIdentity)"
  name: "withUserIdentity(UserIdentity userIdentity)"
  nameWithType: "StartTask.withUserIdentity(UserIdentity userIdentity)"
  summary: "Set the user<wbr>Identity property: The definition of the user identity under which the task is run."
  parameters:
  - description: "the userIdentity value to set."
    name: "userIdentity"
    type: "<xref href=\"com.azure.resourcemanager.batch.models.UserIdentity?alt=com.azure.resourcemanager.batch.models.UserIdentity&text=UserIdentity\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public StartTask withUserIdentity(UserIdentity userIdentity)"
  desc: "Set the userIdentity property: The definition of the user identity under which the task is run. If omitted, the task runs as a non-administrative user unique to the task."
  returns:
    description: "the StartTask object itself."
    type: "<xref href=\"com.azure.resourcemanager.batch.models.StartTask?alt=com.azure.resourcemanager.batch.models.StartTask&text=StartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.batch.models.StartTask.withWaitForSuccess(java.lang.Boolean)"
  fullName: "com.azure.resourcemanager.batch.models.StartTask.withWaitForSuccess(Boolean waitForSuccess)"
  name: "withWaitForSuccess(Boolean waitForSuccess)"
  nameWithType: "StartTask.withWaitForSuccess(Boolean waitForSuccess)"
  summary: "Set the wait<wbr>For<wbr>Success property: Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node."
  parameters:
  - description: "the waitForSuccess value to set."
    name: "waitForSuccess"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public StartTask withWaitForSuccess(Boolean waitForSuccess)"
  desc: "Set the waitForSuccess property: Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node. If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is true."
  returns:
    description: "the StartTask object itself."
    type: "<xref href=\"com.azure.resourcemanager.batch.models.StartTask?alt=com.azure.resourcemanager.batch.models.StartTask&text=StartTask\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged. In some cases the start task may be re-run even though the node was not rebooted. Due to this, start tasks should be idempotent and exit gracefully if the setup they're performing has already been done. Special care should be taken to avoid start tasks which create breakaway process or install/launch services from the start task working directory, as this will block Batch from being able to re-run the start task."
metadata: {}
package: "com.azure.resourcemanager.batch.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-batch:1.0.0
