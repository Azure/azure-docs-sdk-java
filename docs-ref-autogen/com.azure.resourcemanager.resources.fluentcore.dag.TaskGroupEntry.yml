### YamlMime:JavaType
uid: "com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry"
fullName: "com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry<TaskT>"
name: "TaskGroupEntry<TaskT>"
nameWithType: "TaskGroupEntry<TaskT>"
summary: "Type representing an entry in <xref uid=\"com.azure.resourcemanager.resources.fluentcore.dag.TaskGroup\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TaskGroup\"></xref> that holds one <xref uid=\"com.azure.resourcemanager.resources.fluentcore.dag.TaskItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TaskItem\"></xref> and associated information which includes: 1."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.dag.Node?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.dag.DAGNode?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.addDependency(java.lang.String)"
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.addDependent(java.lang.String)"
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.dependencyKeys()"
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.hasDependencies()"
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.initialize()"
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.isPreparer()"
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.lock()"
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.onFaultedResolution(java.lang.String,java.lang.Throwable)"
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.onSuccessfulResolution(java.lang.String)"
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.removeDependency(java.lang.String)"
- "com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.setPreparer(boolean)"
- "com.azure.resourcemanager.resources.fluentcore.dag.Node.addChild(java.lang.String)"
- "com.azure.resourcemanager.resources.fluentcore.dag.Node.children()"
- "com.azure.resourcemanager.resources.fluentcore.dag.Node.data()"
- "com.azure.resourcemanager.resources.fluentcore.dag.Node.hasChildren()"
- "com.azure.resourcemanager.resources.fluentcore.dag.Node.key()"
- "com.azure.resourcemanager.resources.fluentcore.dag.Node.owner()"
- "com.azure.resourcemanager.resources.fluentcore.dag.Node.removeChild(java.lang.String)"
- "com.azure.resourcemanager.resources.fluentcore.dag.Node.setOwner(com.azure.resourcemanager.resources.fluentcore.dag.Graph<DataT,NodeT>)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class TaskGroupEntry<TaskT> extends DAGNode<TaskT,TaskGroupEntry<TaskT>>"
methods:
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry.hasFaultedDescentDependencyTasks()"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry<TaskT>.hasFaultedDescentDependencyTasks()"
  name: "hasFaultedDescentDependencyTasks()"
  nameWithType: "TaskGroupEntry<TaskT>.hasFaultedDescentDependencyTasks()"
  syntax: "public boolean hasFaultedDescentDependencyTasks()"
  returns:
    description: "true if one or more decedent dependency tasks are in faulted\n state, false otherwise."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry.initialize()"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry<TaskT>.initialize()"
  name: "initialize()"
  nameWithType: "TaskGroupEntry<TaskT>.initialize()"
  summary: "Initialize the node so that traversal can be performed on the parent DAG."
  overridden: "com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.initialize()"
  syntax: "public void initialize()"
  desc: "Initialize the node so that traversal can be performed on the parent DAG."
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry.invokeTaskAsync(boolean,com.azure.resourcemanager.resources.fluentcore.dag.TaskGroup.InvocationContext)"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry<TaskT>.invokeTaskAsync(boolean ignoreCachedResult, TaskGroup.InvocationContext context)"
  name: "invokeTaskAsync(boolean ignoreCachedResult, TaskGroup.InvocationContext context)"
  nameWithType: "TaskGroupEntry<TaskT>.invokeTaskAsync(boolean ignoreCachedResult, TaskGroup.InvocationContext context)"
  summary: "Invokes the task this entry holds."
  parameters:
  - description: "if the task is already invoked and has result cached then a value false for this\n                           parameter indicates the cached result can be returned without invoking task again,\n                           if true then cached result will be ignored and task will be invoked"
    name: "ignoreCachedResult"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "the context object shared across all the entries in the group that this entry belongs to,\n                           this will be passed to <xref uid=\"com.azure.resourcemanager.resources.fluentcore.dag.TaskItem.invokeAsync(com.azure.resourcemanager.resources.fluentcore.dag.TaskGroup.InvocationContext)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TaskItem#invokeAsync(TaskGroup.InvocationContext)\"></xref>\n                           method of the task item"
    name: "context"
    type: "<xref href=\"com.azure.resourcemanager.resources.fluentcore.dag.TaskGroup.InvocationContext?alt=com.azure.resourcemanager.resources.fluentcore.dag.TaskGroup.InvocationContext&text=InvocationContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Indexable> invokeTaskAsync(boolean ignoreCachedResult, TaskGroup.InvocationContext context)"
  desc: "Invokes the task this entry holds. if the task cannot be invoked due to faulted dependencies then an observable that emit <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ErroredDependencyTaskException\"></xref> will be returned."
  returns:
    description: "a cold Observable upon subscription invokes the task this entry hold, which produces a result of\n type <xref uid=\"com.azure.resourcemanager.resources.fluentcore.model.Indexable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Indexable\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluentcore.model.Indexable?alt=com.azure.resourcemanager.resources.fluentcore.model.Indexable&text=Indexable\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry.onFaultedResolution(java.lang.String,java.lang.Throwable)"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry<TaskT>.onFaultedResolution(String dependencyKey, Throwable throwable)"
  name: "onFaultedResolution(String dependencyKey, Throwable throwable)"
  nameWithType: "TaskGroupEntry<TaskT>.onFaultedResolution(String dependencyKey, Throwable throwable)"
  summary: "Reports a dependency of this node has been faulted."
  modifiers:
  - "protected"
  overridden: "com.azure.resourcemanager.resources.fluentcore.dag.DAGNode.onFaultedResolution(java.lang.String,java.lang.Throwable)"
  parameters:
  - name: "dependencyKey"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "throwable"
    type: "<xref href=\"java.lang.Throwable?alt=java.lang.Throwable&text=Throwable\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected void onFaultedResolution(String dependencyKey, Throwable throwable)"
  desc: "Reports a dependency of this node has been faulted."
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry.proxy()"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry<TaskT>.proxy()"
  name: "proxy()"
  nameWithType: "TaskGroupEntry<TaskT>.proxy()"
  syntax: "public TaskGroupEntry<TaskT> proxy()"
  returns:
    description: "the proxy entry if it is set, null if not set."
    type: "<xref href=\"com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry?alt=com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry&text=TaskGroupEntry\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"TaskT?alt=TaskT&text=TaskT\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry.setProxy(com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry<TaskT>)"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry<TaskT>.setProxy(TaskGroupEntry<TaskT> proxy)"
  name: "setProxy(TaskGroupEntry<TaskT> proxy)"
  nameWithType: "TaskGroupEntry<TaskT>.setProxy(TaskGroupEntry<TaskT> proxy)"
  summary: "Set the proxy entry for this entry."
  parameters:
  - description: "the proxy entry"
    name: "proxy"
    type: "<xref href=\"com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry?alt=com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry&text=TaskGroupEntry\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"TaskT?alt=TaskT&text=TaskT\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void setProxy(TaskGroupEntry<TaskT> proxy)"
  desc: "Set the proxy entry for this entry."
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry.taskResult()"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry<TaskT>.taskResult()"
  name: "taskResult()"
  nameWithType: "TaskGroupEntry<TaskT>.taskResult()"
  syntax: "public Indexable taskResult()"
  returns:
    description: "the result produced by the task."
    type: "<xref href=\"com.azure.resourcemanager.resources.fluentcore.model.Indexable?alt=com.azure.resourcemanager.resources.fluentcore.model.Indexable&text=Indexable\" data-throw-if-not-resolved=\"False\" />"
type: "class"
typeParameters:
- description: "the task type that can return a value"
  name: "TaskT"
desc: "Type representing an entry in <xref uid=\"com.azure.resourcemanager.resources.fluentcore.dag.TaskGroup\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TaskGroup\"></xref> that holds one <xref uid=\"com.azure.resourcemanager.resources.fluentcore.dag.TaskItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TaskItem\"></xref> and associated information which includes: 1. references to other <xref uid=\"com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TaskGroupEntry\"></xref> dependencies 2. references to the other <xref uid=\"com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TaskGroupEntry\"></xref> dependents"
metadata: {}
package: "com.azure.resourcemanager.resources.fluentcore.dag"
artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.16.0
