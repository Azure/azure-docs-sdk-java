items:
- uid: com.microsoft.azure.eventhubs._partition_sender
  id: _partition_sender
  parent: com.microsoft.azure.eventhubs
  children:
  - com.microsoft.azure.eventhubs._partition_sender.onClose()
  - com.microsoft.azure.eventhubs._partition_sender.send(EventData)
  - com.microsoft.azure.eventhubs._partition_sender.send(Iterable<EventData>)
  - com.microsoft.azure.eventhubs._partition_sender.sendSync(final EventData)
  - com.microsoft.azure.eventhubs._partition_sender.sendSync(final Iterable<EventData>)
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  langs:
  - java
  name: PartitionSender
  nameWithType: PartitionSender
  fullName: com.microsoft.azure.eventhubs.PartitionSender
  type: Class
  source:
    remote: &o0
      path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionSender.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-java
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionSender.java
    startLine: 18
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>This sender class is a logical representation of sending events to a specific EventHub partition. Do not use this class if you do not care about sending events to specific partitions. Instead, use <xref href="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false"></xref> method.</p>

    <p></p>
  syntax: &o1
    content: public class PartitionSender extends ClientEntity
  see:
  - type: com.microsoft.azure.eventhubs._event_hub_client.createPartitionSender(final String)
    description: ''
  - type: com.microsoft.azure.eventhubs._event_hub_client.createFromConnectionString(final String)
    description: ''
  inheritance:
  - java.lang.Object
  - com.microsoft.azure.servicebus._client_entity
  inheritedMembers:
  - com.microsoft.azure.servicebus._client_entity.ClientEntity(final String,final ClientEntity)
  - com.microsoft.azure.servicebus._client_entity.close()
  - com.microsoft.azure.servicebus._client_entity.closeSync()
  - com.microsoft.azure.eventhubs._partition_sender.Create(MessagingFactory,String,String)
  - com.microsoft.azure.servicebus._client_entity.getClientId()
  - com.microsoft.azure.servicebus._client_entity.getIsClosed()
  - com.microsoft.azure.servicebus._client_entity.getIsClosingOrClosed()
  - com.microsoft.azure.servicebus._client_entity.getLastKnownError()
  - com.microsoft.azure.servicebus._client_entity.setClosed()
  - com.microsoft.azure.servicebus._client_entity.throwIfClosed()
- uid: com.microsoft.azure.eventhubs._partition_sender.onClose()
  id: onClose()
  parent: com.microsoft.azure.eventhubs._partition_sender
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  langs:
  - java
  name: onClose()
  nameWithType: PartitionSender.onClose()
  fullName: CompletableFuture<Void> com.microsoft.azure.eventhubs.PartitionSender.onClose()
  overload: com.microsoft.azure.eventhubs._partition_sender.onClose*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionSender.java
    startLine: 194
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public CompletableFuture<Void> onClose()
    return:
      type: db03ee24
- uid: com.microsoft.azure.eventhubs._partition_sender.send(EventData)
  id: send(EventData)
  parent: com.microsoft.azure.eventhubs._partition_sender
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  langs:
  - java
  name: send(EventData data)
  nameWithType: PartitionSender.send(EventData data)
  fullName: final CompletableFuture<Void> com.microsoft.azure.eventhubs.PartitionSender.send(EventData data)
  overload: com.microsoft.azure.eventhubs._partition_sender.send*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionSender.java
    startLine: 108
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Send <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> to a specific EventHub partition. The target partition is pre-determined when this <xref href="com.microsoft.azure.eventhubs._partition_sender" data-throw-if-not-resolved="false"></xref> was created. This send pattern emphasize data correlation over general availability and latency. </p>

    <p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload): <preformatted>

    i.   <xref href="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false"></xref> or <ref refid="" kindref="compound">EventHubClient#send(Iterable)</ref>

    ii.  <xref href="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData,final String)" data-throw-if-not-resolved="false"></xref> or <ref refid="" kindref="compound">EventHubClient#send(Iterable, String)</ref>

    iii. <xref href="com.microsoft.azure.eventhubs._partition_sender.send(EventData)" data-throw-if-not-resolved="false"></xref> or <ref refid="" kindref="compound">PartitionSender#send(Iterable)</ref></preformatted></p>

    <p>Use this type of Send, if: <preformatted>

    i. The client wants to take direct control of distribution of data across partitions. In this case client is responsible for making sure there is at least one sender per event hub partition.

    ii. User cannot use partition key as a mean to direct events to specific partition, yet there is a need for data correlation with partitioning scheme.

    </preformatted></p>

    <p></p>
  syntax: &o2
    content: public final CompletableFuture<Void> send(EventData data)
    parameters:
    - id: data
      type: com.microsoft.azure.eventhubs._event_data
      description: <p>the <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> to be sent. </p>
    return:
      type: fc984e6f
      description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
- uid: com.microsoft.azure.eventhubs._partition_sender.send(Iterable<EventData>)
  id: send(Iterable<EventData>)
  parent: com.microsoft.azure.eventhubs._partition_sender
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  langs:
  - java
  name: send(Iterable<EventData> eventDatas)
  nameWithType: PartitionSender.send(Iterable<EventData> eventDatas)
  fullName: final CompletableFuture<Void> com.microsoft.azure.eventhubs.PartitionSender.send(Iterable<EventData> eventDatas)
  overload: com.microsoft.azure.eventhubs._partition_sender.send*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionSender.java
    startLine: 184
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Send <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> to a specific EventHub partition. The targeted partition is pre-determined when this <xref href="com.microsoft.azure.eventhubs._partition_sender" data-throw-if-not-resolved="false"></xref> was created. </p>

    <p>There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref href="com.microsoft.azure.eventhubs._partition_sender.send(EventData)" data-throw-if-not-resolved="false"></xref>, which is the same type of Send and is used to send single <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. </p>

    <p>Sending a batch of <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>'s is useful in the following cases: <preformatted>

    i.  Efficient send - sending a batch of <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> maximizes the overall throughput by optimally using the number of sessions created to EventHubs' service.

    ii. Send multiple <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>'s in a Transaction. To achieve ACID properties, the Gateway Service will forward all <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>'s in the batch to a single EventHubs' partition.

    </preformatted></p>

    <p>Sample code (sample uses sync version of the api but concept are identical): <preformatted>

    Gson gson = new GsonBuilder().create();

    <xref href="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false"></xref> client = <xref href="com.microsoft.azure.eventhubs._event_hub_client.createFromConnectionStringSync(final String)" data-throw-if-not-resolved="false"></xref>("__connection__");

    <xref href="com.microsoft.azure.eventhubs._partition_sender" data-throw-if-not-resolved="false"></xref> senderToPartitionOne = client.createPartitionSenderSync("1");</preformatted></p>

    <p>

      <preformatted>while (true)

    {

        LinkedList{&lt;}<xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>{&gt;} events = new LinkedList{&lt;}<xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>{&gt;}();

        for (int count = 1; count {&lt;} 11; count++)

        {

            PayloadEvent payload = new PayloadEvent(count);

            byte[] payloadBytes = gson.toJson(payload).getBytes(Charset.defaultCharset());

            <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> sendEvent = new EventData(payloadBytes);

            Map{&lt;}String, String{&gt;} applicationProperties = new HashMap{&lt;}String, String{&gt;}();

            applicationProperties.put("from", "javaClient");

            sendEvent.setProperties(applicationProperties);

            events.add(sendEvent);

        }</preformatted>

    </p>

    <p>

      <preformatted>    senderToPartitionOne.sendSync(events);

        System.out.println(String.format("Sent Batch... Size: %s", events.size()));

    }

    </preformatted>

    </p>

    <p></p>
  syntax:
    content: public final CompletableFuture<Void> send(Iterable<EventData> eventDatas)
    parameters:
    - id: eventDatas
      type: 2a13b5a5com.microsoft.azure.eventhubs._event_dataa08ddfce
      description: <p>batch of events to send to EventHub </p>
    return:
      type: fc984e6f
      description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
  exceptions:
  - type: 22fa3d6f
    description: <p>if the total size of the <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> exceeds a pre-defined limit set by the service. Default is 256k bytes. </p>
  - type: 73fec9fb
    description: <p>if Service Bus service encountered problems during the operation. </p>
- uid: com.microsoft.azure.eventhubs._partition_sender.sendSync(final EventData)
  id: sendSync(final EventData)
  parent: com.microsoft.azure.eventhubs._partition_sender
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  langs:
  - java
  name: sendSync(final EventData data)
  nameWithType: PartitionSender.sendSync(final EventData data)
  fullName: final void com.microsoft.azure.eventhubs.PartitionSender.sendSync(final EventData data)
  overload: com.microsoft.azure.eventhubs._partition_sender.sendSync*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionSender.java
    startLine: 63
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Synchronous version of <xref href="com.microsoft.azure.eventhubs._partition_sender.send(EventData)" data-throw-if-not-resolved="false"></xref> Api.</p>

    <p></p>
  syntax:
    content: public final void sendSync(final EventData data)
    parameters:
    - id: data
      type: 93de0ef9com.microsoft.azure.eventhubs._event_data
      description: <p>the <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> to be sent. </p>
    return:
      type: 3f6357ce
  exceptions:
  - type: 22fa3d6f
    description: <p>if the total size of the <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> exceeds a pre-defined limit set by the service. Default is 256k bytes. </p>
  - type: 73fec9fb
    description: <p>if Service Bus service encountered problems during the operation. </p>
- uid: com.microsoft.azure.eventhubs._partition_sender.sendSync(final Iterable<EventData>)
  id: sendSync(final Iterable<EventData>)
  parent: com.microsoft.azure.eventhubs._partition_sender
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  langs:
  - java
  name: sendSync(final Iterable<EventData> eventDatas)
  nameWithType: PartitionSender.sendSync(final Iterable<EventData> eventDatas)
  fullName: final void com.microsoft.azure.eventhubs.PartitionSender.sendSync(final Iterable<EventData> eventDatas)
  overload: com.microsoft.azure.eventhubs._partition_sender.sendSync*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionSender.java
    startLine: 118
  package: com.microsoft.azure.eventhubs
  summary: >-
    <p>Synchronous version of <ref refid="" kindref="compound">send(Iterable)</ref> .</p>

    <p></p>
  syntax:
    content: public final void sendSync(final Iterable<EventData> eventDatas)
    parameters:
    - id: eventDatas
      type: f42d2527com.microsoft.azure.eventhubs._event_dataa08ddfce
      description: <p>batch of events to send to EventHub </p>
    return:
      type: 3f6357ce
  exceptions:
  - type: 73fec9fb
    description: <p>if Service Bus service encountered problems during the operation. </p>
references:
- uid: 22fa3d6f
  spec.java:
  - name: PayloadSizeExceededException
    fullName: PayloadSizeExceededException
- uid: 73fec9fb
  spec.java:
  - name: ServiceBusException
    fullName: ServiceBusException
- uid: 93de0ef9com.microsoft.azure.eventhubs._event_data
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.eventhubs._event_data
    name: EventData
    fullName: com.microsoft.azure.eventhubs.EventData
    href: com.microsoft.azure.eventhubs._event_data.yml
- uid: 3f6357ce
  spec.java:
  - name: final void
    fullName: final void
- uid: com.microsoft.azure.eventhubs._partition_sender.sendSync*
  name: sendSync
  nameWithType: PartitionSender.sendSync
  fullName: final void com.microsoft.azure.eventhubs.PartitionSender.sendSync
  package: com.microsoft.azure.eventhubs
- uid: fc984e6f
  spec.java:
  - name: final CompletableFuture<Void>
    fullName: final CompletableFuture<Void>
- uid: com.microsoft.azure.eventhubs._partition_sender.send*
  name: send
  nameWithType: PartitionSender.send
  fullName: final CompletableFuture<Void> com.microsoft.azure.eventhubs.PartitionSender.send
  package: com.microsoft.azure.eventhubs
- uid: f42d2527com.microsoft.azure.eventhubs._event_dataa08ddfce
  spec.java:
  - name: final Iterable<
    fullName: final Iterable<
  - uid: com.microsoft.azure.eventhubs._event_data
    name: EventData
    fullName: com.microsoft.azure.eventhubs.EventData
    href: com.microsoft.azure.eventhubs._event_data.yml
  - name: '>'
    fullName: '>'
- uid: 2a13b5a5com.microsoft.azure.eventhubs._event_dataa08ddfce
  spec.java:
  - name: Iterable<
    fullName: Iterable<
  - uid: com.microsoft.azure.eventhubs._event_data
    name: EventData
    fullName: com.microsoft.azure.eventhubs.EventData
    href: com.microsoft.azure.eventhubs._event_data.yml
  - name: '>'
    fullName: '>'
- uid: db03ee24
  spec.java:
  - name: CompletableFuture<Void>
    fullName: CompletableFuture<Void>
- uid: com.microsoft.azure.eventhubs._partition_sender.onClose*
  name: onClose
  nameWithType: PartitionSender.onClose
  fullName: CompletableFuture<Void> com.microsoft.azure.eventhubs.PartitionSender.onClose
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.servicebus._client_entity.ClientEntity(final String,final ClientEntity)
  parent: com.microsoft.azure.servicebus._client_entity
  href: com.microsoft.azure.servicebus._client_entity.yml
  name: ClientEntity(final String clientId, final ClientEntity parent)
  nameWithType: ClientEntity.ClientEntity(final String clientId, final ClientEntity parent)
  fullName: com.microsoft.azure.servicebus.ClientEntity.ClientEntity(final String clientId, final ClientEntity parent)
  type: Constructor
  syntax:
    content: protected ClientEntity(final String clientId, final ClientEntity parent)
    parameters:
    - id: clientId
      type: 3d93591e
    - id: parent
      type: 93de0ef9com.microsoft.azure.servicebus._client_entity
- uid: com.microsoft.azure.servicebus._client_entity.close()
  parent: com.microsoft.azure.servicebus._client_entity
  href: com.microsoft.azure.servicebus._client_entity.yml
  name: close()
  nameWithType: ClientEntity.close()
  fullName: final CompletableFuture<Void> com.microsoft.azure.servicebus.ClientEntity.close()
  type: Method
  syntax:
    content: public final CompletableFuture<Void> close()
    return:
      type: fc984e6f
- uid: com.microsoft.azure.servicebus._client_entity.closeSync()
  parent: com.microsoft.azure.servicebus._client_entity
  href: com.microsoft.azure.servicebus._client_entity.yml
  name: closeSync()
  nameWithType: ClientEntity.closeSync()
  fullName: final void com.microsoft.azure.servicebus.ClientEntity.closeSync()
  type: Method
  syntax:
    content: public final void closeSync()
    return:
      type: 3f6357ce
- uid: com.microsoft.azure.eventhubs._partition_sender.Create(MessagingFactory,String,String)
- uid: com.microsoft.azure.servicebus._client_entity.getClientId()
  parent: com.microsoft.azure.servicebus._client_entity
  href: com.microsoft.azure.servicebus._client_entity.yml
  name: getClientId()
  nameWithType: ClientEntity.getClientId()
  fullName: String com.microsoft.azure.servicebus.ClientEntity.getClientId()
  type: Method
  syntax:
    content: public String getClientId()
    return:
      type: "26831127"
- uid: com.microsoft.azure.servicebus._client_entity.getIsClosed()
- uid: com.microsoft.azure.servicebus._client_entity.getIsClosingOrClosed()
- uid: com.microsoft.azure.servicebus._client_entity.getLastKnownError()
  parent: com.microsoft.azure.servicebus._client_entity
  href: com.microsoft.azure.servicebus._client_entity.yml
  name: getLastKnownError()
  nameWithType: ClientEntity.getLastKnownError()
  fullName: Exception com.microsoft.azure.servicebus.ClientEntity.getLastKnownError()
  type: Method
  syntax:
    content: protected Exception getLastKnownError()
    return:
      type: 8a99d4b0
- uid: com.microsoft.azure.servicebus._client_entity.setClosed()
  parent: com.microsoft.azure.servicebus._client_entity
  href: com.microsoft.azure.servicebus._client_entity.yml
  name: setClosed()
  nameWithType: ClientEntity.setClosed()
  fullName: final void com.microsoft.azure.servicebus.ClientEntity.setClosed()
  type: Method
  syntax:
    content: protected final void setClosed()
    return:
      type: 3f6357ce
- uid: com.microsoft.azure.servicebus._client_entity.throwIfClosed()
  parent: com.microsoft.azure.servicebus._client_entity
  href: com.microsoft.azure.servicebus._client_entity.yml
  name: throwIfClosed()
  nameWithType: ClientEntity.throwIfClosed()
  fullName: final void com.microsoft.azure.servicebus.ClientEntity.throwIfClosed()
  type: Method
  syntax:
    content: protected final void throwIfClosed()
    return:
      type: 3f6357ce
- uid: com.microsoft.azure.servicebus._client_entity
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus._client_entity.yml
  name: ClientEntity
  nameWithType: ClientEntity
  fullName: com.microsoft.azure.servicebus.ClientEntity
  type: Class
  summary: '<p>Contract for all client entities with Open-Close/Abort state m/c main-purpose: closeAll related entities Internal-class </p>'
  syntax:
    content: public class ClientEntity
- uid: com.microsoft.azure.servicebus._messaging_factory
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus._messaging_factory.yml
  name: MessagingFactory
  nameWithType: MessagingFactory
  fullName: com.microsoft.azure.servicebus.MessagingFactory
  type: Class
  summary: <p>Abstracts all amqp related details and exposes AmqpConnection object Manages connection life-cycle </p>
  syntax:
    content: public class MessagingFactory extends ClientEntity implements IAmqpConnection
- uid: com.microsoft.azure.servicebus._message_sender
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus._message_sender.yml
  name: MessageSender
  nameWithType: MessageSender
  fullName: com.microsoft.azure.servicebus.MessageSender
  type: Class
  summary: <p>Abstracts all amqp related details translates event-driven reactor model into async send Api </p>
  syntax:
    content: public class MessageSender extends ClientEntity implements IAmqpSender
- uid: com.microsoft.azure.servicebus._service_bus_exception
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus._service_bus_exception.yml
  name: ServiceBusException
  nameWithType: ServiceBusException
  fullName: com.microsoft.azure.servicebus.ServiceBusException
  type: Class
  summary: <p>This is the base exception that service bus will produce for all error cases. </p>
  syntax:
    content: public class ServiceBusException
- uid: com.microsoft.azure.eventhubs._partition_sender
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  name: PartitionSender
  nameWithType: PartitionSender
  fullName: com.microsoft.azure.eventhubs.PartitionSender
  type: Class
  summary: >-
    <p>This sender class is a logical representation of sending events to a specific EventHub partition. Do not use this class if you do not care about sending events to specific partitions. Instead, use <xref href="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false"></xref> method.</p>

    <p></p>
  syntax: *o1
- uid: com.microsoft.azure.eventhubs._event_data
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: EventData
  nameWithType: EventData
  fullName: com.microsoft.azure.eventhubs.EventData
  type: Class
  summary: >-
    <p>The data structure encapsulating the Event being sent-to and received-from EventHubs. Each EventHubs partition can be visualized as a Stream of <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. </p>

    <p>Serializing a received <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> with AMQP sections other than ApplicationProperties (with primitive java types) and Data section is not supported. </p>

    <p>Here's how AMQP message sections map to <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. Here's the reference used for AMQP 1.0 specification: <ulink url="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf">http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf</ulink><preformatted>

    i.   <xref href="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false"></xref> - AMQPMessage.ApplicationProperties section

    ii.  <xref href="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false"></xref> - if AMQPMessage.Body has Data section

    iii. <xref href="com.microsoft.azure.eventhubs._event_data.getObject()" data-throw-if-not-resolved="false"></xref> - if AMQPMessage.Body has AMQPValue or AMQPSequence sections

    </preformatted> While using client libraries released by Microsoft Azure EventHubs, sections (i) and (ii) alone are sufficient. Section (iii) is used for advanced scenarios, where the sending application uses third-party AMQP library to send the message to EventHubs and the receiving application uses this client library to receive <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public class EventData
- uid: com.microsoft.azure.eventhubs._partition_sender.send(EventData)
  parent: com.microsoft.azure.eventhubs._partition_sender
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  name: send(EventData data)
  nameWithType: PartitionSender.send(EventData data)
  fullName: final CompletableFuture<Void> com.microsoft.azure.eventhubs.PartitionSender.send(EventData data)
  type: Method
  summary: >-
    <p>Send <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> to a specific EventHub partition. The target partition is pre-determined when this <xref href="com.microsoft.azure.eventhubs._partition_sender" data-throw-if-not-resolved="false"></xref> was created. This send pattern emphasize data correlation over general availability and latency. </p>

    <p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload): <preformatted>

    i.   <xref href="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false"></xref> or <ref refid="" kindref="compound">EventHubClient#send(Iterable)</ref>

    ii.  <xref href="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData,final String)" data-throw-if-not-resolved="false"></xref> or <ref refid="" kindref="compound">EventHubClient#send(Iterable, String)</ref>

    iii. <xref href="com.microsoft.azure.eventhubs._partition_sender.send(EventData)" data-throw-if-not-resolved="false"></xref> or <ref refid="" kindref="compound">PartitionSender#send(Iterable)</ref></preformatted></p>

    <p>Use this type of Send, if: <preformatted>

    i. The client wants to take direct control of distribution of data across partitions. In this case client is responsible for making sure there is at least one sender per event hub partition.

    ii. User cannot use partition key as a mean to direct events to specific partition, yet there is a need for data correlation with partitioning scheme.

    </preformatted></p>

    <p></p>
  syntax: *o2
- uid: com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: send(final EventData data)
  nameWithType: EventHubClient.send(final EventData data)
  fullName: final CompletableFuture<Void> com.microsoft.azure.eventhubs.EventHubClient.send(final EventData data)
  type: Method
  summary: >-
    <p>Send <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> to EventHub. The sent <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> will land on any arbitrarily chosen EventHubs partition. </p>

    <p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload): <itemizedlist><listitem><p><xref href="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false"></xref> or <ref refid="" kindref="compound">send(Iterable)</ref></p></listitem><listitem><p><xref href="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData,final String)" data-throw-if-not-resolved="false"></xref> or <ref refid="" kindref="compound">send(Iterable, String)</ref></p></listitem><listitem><p><xref href="com.microsoft.azure.eventhubs._partition_sender.send(EventData)" data-throw-if-not-resolved="false"></xref> or <ref refid="" kindref="compound">PartitionSender#send(Iterable)</ref></p></listitem></itemizedlist></p>

    <p>Use this method to Send, if: <preformatted>

    a)  the send(<xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>) operation should be highly available and

    b)  the data needs to be evenly distributed among all partitions; exception being, when a subset of partitions are unavailable

    </preformatted></p>

    <p>

      <xref href="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false"></xref> send's the <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> to a Service Gateway, which in-turn will forward the <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> to one of the EventHubs' partitions. Here's the message forwarding algorithm: <preformatted>

    i.  Forward the <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>'s to EventHub partitions, by equally distributing the data among all partitions (ex: Round-robin the <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>'s to all EventHubs' partitions)

    ii. If one of the EventHub partitions is unavailable for a moment, the Service Gateway will automatically detect it and forward the message to another available partition - making the Send operation highly-available.

    </preformatted></p>

    <p></p>
  syntax:
    content: public final CompletableFuture<Void> send(final EventData data)
    parameters:
    - id: data
      type: 93de0ef9com.microsoft.azure.eventhubs._event_data
      description: <p>the <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> to be sent. </p>
    return:
      type: fc984e6f
      description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
- uid: com.microsoft.azure.eventhubs._event_hub_client.send(final EventData,final String)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: send(final EventData eventData, final String partitionKey)
  nameWithType: EventHubClient.send(final EventData eventData, final String partitionKey)
  fullName: final CompletableFuture<Void> com.microsoft.azure.eventhubs.EventHubClient.send(final EventData eventData, final String partitionKey)
  type: Method
  summary: >-
    <p>Send an '<xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> with a partitionKey' to EventHub. All <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>'s with a partitionKey are guaranteed to land on the same partition. This send pattern emphasize data correlation over general availability and latency. </p>

    <p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload): <preformatted>

    i.   <xref href="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false"></xref> or <ref refid="" kindref="compound">send(Iterable)</ref>

    ii.  <xref href="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData,final String)" data-throw-if-not-resolved="false"></xref> or <ref refid="" kindref="compound">send(Iterable, String)</ref>

    iii. <xref href="com.microsoft.azure.eventhubs._partition_sender.send(EventData)" data-throw-if-not-resolved="false"></xref> or <ref refid="" kindref="compound">PartitionSender#send(Iterable)</ref></preformatted></p>

    <p>Use this type of Send, if: <preformatted>

    i.  There is a need for correlation of events based on Sender instance; The sender can generate a UniqueId and set it as partitionKey - which on the received Message can be used for correlation

    ii. The client wants to take control of distribution of data across partitions.

    </preformatted></p>

    <p>Multiple PartitionKey's could be mapped to one Partition. EventHubs service uses a proprietary Hash algorithm to map the PartitionKey to a PartitionId. Using this type of Send (Sending using a specific partitionKey), could sometimes result in partitions which are not evenly distributed.</p>

    <p></p>
  syntax:
    content: public final CompletableFuture<Void> send(final EventData eventData, final String partitionKey)
    parameters:
    - id: eventData
      type: 93de0ef9com.microsoft.azure.eventhubs._event_data
      description: <p>the <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> to be sent. </p>
    - id: partitionKey
      type: 3d93591e
      description: <p>the partitionKey will be hash'ed to determine the partitionId to send the eventData to. On the Received message this can be accessed at <ref refid="" kindref="compound">EventData.SystemProperties#getPartitionKey()</ref></p>
    return:
      type: fc984e6f
      description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
- uid: com.microsoft.azure.eventhubs._event_hub_client
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: EventHubClient
  nameWithType: EventHubClient
  fullName: com.microsoft.azure.eventhubs.EventHubClient
  type: Class
  summary: >-
    <p>Anchor class - all EventHub client operations STARTS here.</p>

    <p></p>
  syntax:
    content: public class EventHubClient extends ClientEntity
- uid: com.microsoft.azure.eventhubs._event_hub_client.createFromConnectionStringSync(final String)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createFromConnectionStringSync(final String connectionString)
  nameWithType: EventHubClient.createFromConnectionStringSync(final String connectionString)
  fullName: static EventHubClient com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionStringSync(final String connectionString)
  type: Method
  summary: >-
    <p>Synchronous version of <xref href="com.microsoft.azure.eventhubs._event_hub_client.createFromConnectionString(final String)" data-throw-if-not-resolved="false"></xref>.</p>

    <p></p>
  syntax:
    content: public static EventHubClient createFromConnectionStringSync(final String connectionString)
    parameters:
    - id: connectionString
      type: 3d93591e
      description: <p>The connection string to be used. See <ref refid="" kindref="compound">ConnectionStringBuilder</ref> to construct a connectionString. </p>
    return:
      type: com.microsoft.azure.eventhubs._event_hub_client
      description: >-
        <p>

          <xref href="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false"></xref> which can be used to create Senders and Receivers to EventHub </p>
- uid: com.microsoft.azure.eventhubs._event_hub_client.createPartitionSender(final String)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createPartitionSender(final String partitionId)
  nameWithType: EventHubClient.createPartitionSender(final String partitionId)
  fullName: final CompletableFuture<PartitionSender> com.microsoft.azure.eventhubs.EventHubClient.createPartitionSender(final String partitionId)
  type: Method
  summary: >-
    <p>Create a <xref href="com.microsoft.azure.eventhubs._partition_sender" data-throw-if-not-resolved="false"></xref> which can publish <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>'s directly to a specific EventHub partition (sender type iii. in the below list). </p>

    <p>There are 3 patterns/ways to send to EventHubs: <preformatted>

    i.   <xref href="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false"></xref> or <ref refid="" kindref="compound">send(Iterable)</ref>

    ii.  <xref href="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData,final String)" data-throw-if-not-resolved="false"></xref> or <ref refid="" kindref="compound">send(Iterable, String)</ref>

    iii. <xref href="com.microsoft.azure.eventhubs._partition_sender.send(EventData)" data-throw-if-not-resolved="false"></xref> or <ref refid="" kindref="compound">PartitionSender#send(Iterable)</ref></preformatted></p>

    <p></p>
  syntax:
    content: public final CompletableFuture<PartitionSender> createPartitionSender(final String partitionId)
    parameters:
    - id: partitionId
      type: 3d93591e
      description: <p>partitionId of EventHub to send the <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>'s to </p>
    return:
      type: 9971d449com.microsoft.azure.eventhubs._partition_sendera08ddfce
      description: <p>a CompletableFuture that would result in a <xref href="com.microsoft.azure.eventhubs._partition_sender" data-throw-if-not-resolved="false"></xref> when it is completed. </p>
- uid: com.microsoft.azure.eventhubs._event_hub_client.createFromConnectionString(final String)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createFromConnectionString(final String connectionString)
  nameWithType: EventHubClient.createFromConnectionString(final String connectionString)
  fullName: static CompletableFuture<EventHubClient> com.microsoft.azure.eventhubs.EventHubClient.createFromConnectionString(final String connectionString)
  type: Method
  summary: >-
    <p>Factory method to create an instance of <xref href="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false"></xref> using the supplied connectionString. In a normal scenario (when re-direct is not enabled) - one <xref href="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false"></xref> instance maps to one Connection to the Azure ServiceBus EventHubs service. </p>

    <p>The <xref href="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false"></xref> created from this method creates a Sender instance internally, which is used by the <xref href="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false"></xref> methods.</p>

    <p></p>
  syntax:
    content: public static CompletableFuture<EventHubClient> createFromConnectionString(final String connectionString)
    parameters:
    - id: connectionString
      type: 3d93591e
      description: <p>The connection string to be used. See <ref refid="" kindref="compound">ConnectionStringBuilder</ref> to construct a connectionString. </p>
    return:
      type: 9cdf14d0com.microsoft.azure.eventhubs._event_hub_clienta08ddfce
      description: >-
        <p>

          <xref href="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false"></xref> which can be used to create Senders and Receivers to EventHub </p>
