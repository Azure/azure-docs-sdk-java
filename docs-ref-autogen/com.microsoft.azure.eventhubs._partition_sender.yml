### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.eventhubs._partition_sender
  id: _partition_sender
  parent: com.microsoft.azure.eventhubs
  children:
  - com.microsoft.azure.eventhubs._partition_sender.close()
  - com.microsoft.azure.eventhubs._partition_sender.closeSync()
  - com.microsoft.azure.eventhubs._partition_sender.createBatch()
  - com.microsoft.azure.eventhubs._partition_sender.createBatch(BatchOptions)
  - com.microsoft.azure.eventhubs._partition_sender.getPartitionId()
  - com.microsoft.azure.eventhubs._partition_sender.send(EventData)
  - com.microsoft.azure.eventhubs._partition_sender.send(EventDataBatch)
  - com.microsoft.azure.eventhubs._partition_sender.send(Iterable<EventData>)
  - com.microsoft.azure.eventhubs._partition_sender.sendSync(final EventData)
  - com.microsoft.azure.eventhubs._partition_sender.sendSync(final EventDataBatch)
  - com.microsoft.azure.eventhubs._partition_sender.sendSync(final Iterable<EventData>)
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  langs:
  - java
  name: PartitionSender
  nameWithType: PartitionSender
  fullName: com.microsoft.azure.eventhubs.PartitionSender
  type: Interface
  source:
    remote: &o0
      path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionSender.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-java
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionSender.java
    startLine: 18
  package: com.microsoft.azure.eventhubs
  summary: "<p>This sender class is a logical representation of sending events to a specific EventHub partition. Do not use this class if you do not care about sending events to specific partitions. Instead, use <xref uid=\"com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)\" data-throw-if-not-resolved=\"false\">EventHubClient#send</xref> method.</p>\r\n<p></p>"
  syntax:
    content: public interface PartitionSender
- uid: com.microsoft.azure.eventhubs._partition_sender.close()
  id: close()
  parent: com.microsoft.azure.eventhubs._partition_sender
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  langs:
  - java
  name: close()
  nameWithType: PartitionSender.close()
  fullName: com.microsoft.azure.eventhubs.PartitionSender.close()
  overload: com.microsoft.azure.eventhubs._partition_sender.close*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionSender.java
    startLine: 157
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public CompletableFuture<Void> close()
    return:
      type: db03ee24
- uid: com.microsoft.azure.eventhubs._partition_sender.closeSync()
  id: closeSync()
  parent: com.microsoft.azure.eventhubs._partition_sender
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  langs:
  - java
  name: closeSync()
  nameWithType: PartitionSender.closeSync()
  fullName: com.microsoft.azure.eventhubs.PartitionSender.closeSync()
  overload: com.microsoft.azure.eventhubs._partition_sender.closeSync*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionSender.java
    startLine: 159
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public void closeSync()
- uid: com.microsoft.azure.eventhubs._partition_sender.createBatch()
  id: createBatch()
  parent: com.microsoft.azure.eventhubs._partition_sender
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  langs:
  - java
  name: createBatch()
  nameWithType: PartitionSender.createBatch()
  fullName: com.microsoft.azure.eventhubs.PartitionSender.createBatch()
  overload: com.microsoft.azure.eventhubs._partition_sender.createBatch*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionSender.java
    startLine: 42
  package: com.microsoft.azure.eventhubs
  summary: "<p>Creates an Empty Collection of <xref uid=\"com.microsoft.azure.eventhubs._event_data\" data-throw-if-not-resolved=\"false\">EventData</xref>. The same partitionKey must be used while sending these events using <xref uid=\"com.microsoft.azure.eventhubs._partition_sender.send(EventDataBatch)\" data-throw-if-not-resolved=\"false\">PartitionSender#send(EventDataBatch)</xref>.</p>\r\n<p></p>"
  syntax:
    content: public default EventDataBatch createBatch()
    return:
      type: c0f98273com.microsoft.azure.eventhubs._event_data_batch
      description: <p>the empty <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref>, after negotiating maximum message size with EventHubs service </p>
- uid: com.microsoft.azure.eventhubs._partition_sender.createBatch(BatchOptions)
  id: createBatch(BatchOptions)
  parent: com.microsoft.azure.eventhubs._partition_sender
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  langs:
  - java
  name: createBatch(BatchOptions options)
  nameWithType: PartitionSender.createBatch(BatchOptions options)
  fullName: com.microsoft.azure.eventhubs.PartitionSender.createBatch(BatchOptions options)
  overload: com.microsoft.azure.eventhubs._partition_sender.createBatch*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionSender.java
    startLine: 34
  package: com.microsoft.azure.eventhubs
  summary: "<p>Creates an Empty Collection of <xref uid=\"com.microsoft.azure.eventhubs._event_data\" data-throw-if-not-resolved=\"false\">EventData</xref>. The same partitionKey must be used while sending these events using <xref uid=\"com.microsoft.azure.eventhubs._partition_sender.send(EventDataBatch)\" data-throw-if-not-resolved=\"false\">PartitionSender#send(EventDataBatch)</xref>.</p>\r\n<p></p>"
  syntax:
    content: public EventDataBatch createBatch(BatchOptions options)
    parameters:
    - id: options
      type: com.microsoft.azure.eventhubs._batch_options
      description: <p>see <xref uid="com.microsoft.azure.eventhubs._batch_options" data-throw-if-not-resolved="false">BatchOptions</xref> for more usage details </p>
    return:
      type: com.microsoft.azure.eventhubs._event_data_batch
      description: <p>the empty <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref>, after negotiating maximum message size with EventHubs service </p>
- uid: com.microsoft.azure.eventhubs._partition_sender.getPartitionId()
  id: getPartitionId()
  parent: com.microsoft.azure.eventhubs._partition_sender
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  langs:
  - java
  name: getPartitionId()
  nameWithType: PartitionSender.getPartitionId()
  fullName: com.microsoft.azure.eventhubs.PartitionSender.getPartitionId()
  overload: com.microsoft.azure.eventhubs._partition_sender.getPartitionId*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionSender.java
    startLine: 25
  package: com.microsoft.azure.eventhubs
  summary: "<p>The partition id that will receive events from this sender.</p>\r\n<p></p>"
  syntax:
    content: public String getPartitionId()
    return:
      type: "26831127"
      description: <p>the partition id the PartitionSender is connected to. </p>
- uid: com.microsoft.azure.eventhubs._partition_sender.send(EventData)
  id: send(EventData)
  parent: com.microsoft.azure.eventhubs._partition_sender
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  langs:
  - java
  name: send(EventData data)
  nameWithType: PartitionSender.send(EventData data)
  fullName: com.microsoft.azure.eventhubs.PartitionSender.send(EventData data)
  overload: com.microsoft.azure.eventhubs._partition_sender.send*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionSender.java
    startLine: 77
  package: com.microsoft.azure.eventhubs
  summary: "<p>Send <xref uid=\"com.microsoft.azure.eventhubs._event_data\" data-throw-if-not-resolved=\"false\">EventData</xref> to a specific EventHub partition. The target partition is pre-determined when this PartitionSender was created. This send pattern emphasize data correlation over general availability and latency. </p>\r\n<p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload): <pre>\r\ni.   <xref uid=\"com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)\" data-throw-if-not-resolved=\"false\">EventHubClient#send(EventData)</xref>, <xref uid=\"\" data-throw-if-not-resolved=\"false\">EventHubClient#send(Iterable)</xref>, <xref uid=\"com.microsoft.azure.eventhubs._event_hub_client.send(final EventDataBatch)\" data-throw-if-not-resolved=\"false\">EventHubClient#send(EventDataBatch)</xref>\r\nii.  <xref uid=\"com.microsoft.azure.eventhubs._event_hub_client.send(final EventData,final String)\" data-throw-if-not-resolved=\"false\">EventHubClient#send(EventData, String)</xref> or <xref uid=\"\" data-throw-if-not-resolved=\"false\">EventHubClient#send(Iterable, String)</xref>\r\niii. <xref uid=\"com.microsoft.azure.eventhubs._partition_sender.send(EventData)\" data-throw-if-not-resolved=\"false\">PartitionSender#send(EventData)</xref>, <xref uid=\"\" data-throw-if-not-resolved=\"false\">PartitionSender#send(Iterable)</xref>, or <xref uid=\"com.microsoft.azure.eventhubs._partition_sender.send(EventDataBatch)\" data-throw-if-not-resolved=\"false\">PartitionSender#send(EventDataBatch)</xref></pre></p>\r\n<p>Use this type of Send, if: <pre>\r\ni. The client wants to take direct control of distribution of data across partitions. In this case client is responsible for making sure there is at least one sender per event hub partition.\r\nii. User cannot use partition key as a mean to direct events to specific partition, yet there is a need for data correlation with partitioning scheme.\r\n</pre></p>\r\n<p></p>"
  syntax: &o2
    content: public CompletableFuture<Void> send(EventData data)
    parameters:
    - id: data
      type: com.microsoft.azure.eventhubs._event_data
      description: <p>the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to be sent. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
- uid: com.microsoft.azure.eventhubs._partition_sender.send(EventDataBatch)
  id: send(EventDataBatch)
  parent: com.microsoft.azure.eventhubs._partition_sender
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  langs:
  - java
  name: send(EventDataBatch eventDatas)
  nameWithType: PartitionSender.send(EventDataBatch eventDatas)
  fullName: com.microsoft.azure.eventhubs.PartitionSender.send(EventDataBatch eventDatas)
  overload: com.microsoft.azure.eventhubs._partition_sender.send*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionSender.java
    startLine: 155
  package: com.microsoft.azure.eventhubs
  summary: "<p>Send <xref uid=\"com.microsoft.azure.eventhubs._event_data_batch\" data-throw-if-not-resolved=\"false\">EventDataBatch</xref> to a specific EventHub partition. The targeted partition is pre-determined when this PartitionSender was created. A partitionKey cannot be set when using EventDataBatch with a PartitionSender. </p>\r\n<p>There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid=\"com.microsoft.azure.eventhubs._partition_sender.send(EventData)\" data-throw-if-not-resolved=\"false\">send(EventData)</xref>, which is the same type of Send and is used to send single <xref uid=\"com.microsoft.azure.eventhubs._event_data\" data-throw-if-not-resolved=\"false\">EventData</xref>. </p>\r\n<p>Sending a batch of <xref uid=\"com.microsoft.azure.eventhubs._event_data\" data-throw-if-not-resolved=\"false\">EventData</xref>'s is useful in the following cases: <pre>\r\ni.	Efficient send - sending a batch of <xref uid=\"com.microsoft.azure.eventhubs._event_data\" data-throw-if-not-resolved=\"false\">EventData</xref> maximizes the overall throughput by optimally using the number of sessions created to EventHubs' service.\r\nii.	Send multiple <xref uid=\"com.microsoft.azure.eventhubs._event_data\" data-throw-if-not-resolved=\"false\">EventData</xref>'s in a Transaction. To achieve ACID properties, the Gateway Service will forward all <xref uid=\"com.microsoft.azure.eventhubs._event_data\" data-throw-if-not-resolved=\"false\">EventData</xref>'s in the batch to a single EventHubs' partition.\r\n</pre></p>\r\n<p></p>"
  syntax: &o1
    content: public CompletableFuture<Void> send(EventDataBatch eventDatas)
    parameters:
    - id: eventDatas
      type: com.microsoft.azure.eventhubs._event_data_batch
      description: <p>EventDataBatch to send to EventHub </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture that can be completed when the send operation is done.. </p>
- uid: com.microsoft.azure.eventhubs._partition_sender.send(Iterable<EventData>)
  id: send(Iterable<EventData>)
  parent: com.microsoft.azure.eventhubs._partition_sender
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  langs:
  - java
  name: send(Iterable<EventData> eventDatas)
  nameWithType: PartitionSender.send(Iterable<EventData> eventDatas)
  fullName: com.microsoft.azure.eventhubs.PartitionSender.send(Iterable<EventData> eventDatas)
  overload: com.microsoft.azure.eventhubs._partition_sender.send*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionSender.java
    startLine: 126
  package: com.microsoft.azure.eventhubs
  summary: "<p>Send <xref uid=\"com.microsoft.azure.eventhubs._event_data\" data-throw-if-not-resolved=\"false\">EventData</xref> to a specific EventHub partition. The targeted partition is pre-determined when this PartitionSender was created. </p>\r\n<p>There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid=\"com.microsoft.azure.eventhubs._partition_sender.send(EventData)\" data-throw-if-not-resolved=\"false\">send(EventData)</xref>, which is the same type of Send and is used to send single <xref uid=\"com.microsoft.azure.eventhubs._event_data\" data-throw-if-not-resolved=\"false\">EventData</xref>. </p>\r\n<p>Sending a batch of <xref uid=\"com.microsoft.azure.eventhubs._event_data\" data-throw-if-not-resolved=\"false\">EventData</xref>'s is useful in the following cases: <pre>\r\ni.	Efficient send - sending a batch of <xref uid=\"com.microsoft.azure.eventhubs._event_data\" data-throw-if-not-resolved=\"false\">EventData</xref> maximizes the overall throughput by optimally using the number of sessions created to EventHubs' service.\r\nii.	Send multiple <xref uid=\"com.microsoft.azure.eventhubs._event_data\" data-throw-if-not-resolved=\"false\">EventData</xref>'s in a Transaction. To achieve ACID properties, the Gateway Service will forward all <xref uid=\"com.microsoft.azure.eventhubs._event_data\" data-throw-if-not-resolved=\"false\">EventData</xref>'s in the batch to a single EventHubs' partition.\r\n</pre></p>\r\n<p>Sample code (sample uses sync version of the api but concept are identical): <pre>\r\nGson gson = new GsonBuilder().create();\r\nEventHubClient client = EventHubClient.createSync(\"__connection__\");\r\nPartitionSender senderToPartitionOne = client.createPartitionSenderSync(\"1\");</pre></p>\r\n<p>\r\n  <pre>while (true)\r\n{\r\n    LinkedList{&lt;}EventData{&gt;} events = new LinkedList{&lt;}EventData{&gt;}();\r\n    for (int count = 1; count {&lt;} 11; count++)\r\n    {\r\n        PayloadEvent payload = new PayloadEvent(count);\r\n        byte[] payloadBytes = gson.toJson(payload).getBytes(Charset.defaultCharset());\r\n        EventData sendEvent = EventData.create(payloadBytes);\r\n        sendEvent.getProperties().put(\"from\", \"javaClient\");\r\n        events.add(sendEvent);\r\n    }</pre>\r\n</p>\r\n<p>\r\n  <pre>    senderToPartitionOne.sendSync(events);\r\n    System.out.println(String.format(\"Sent Batch... Size: %s\", events.size()));\r\n}\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> send(Iterable<EventData> eventDatas)
    parameters:
    - id: eventDatas
      type: 2a13b5a5com.microsoft.azure.eventhubs._event_dataa08ddfce
      description: <p>batch of events to send to EventHub </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
- uid: com.microsoft.azure.eventhubs._partition_sender.sendSync(final EventData)
  id: sendSync(final EventData)
  parent: com.microsoft.azure.eventhubs._partition_sender
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  langs:
  - java
  name: sendSync(final EventData data)
  nameWithType: PartitionSender.sendSync(final EventData data)
  fullName: com.microsoft.azure.eventhubs.PartitionSender.sendSync(final EventData data)
  overload: com.microsoft.azure.eventhubs._partition_sender.sendSync*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionSender.java
    startLine: 53
  package: com.microsoft.azure.eventhubs
  summary: "<p>Synchronous version of <xref uid=\"com.microsoft.azure.eventhubs._partition_sender.send(EventData)\" data-throw-if-not-resolved=\"false\">send(EventData)</xref> Api.</p>\r\n<p></p>"
  syntax:
    content: public default void sendSync(final EventData data)
    parameters:
    - id: data
      type: 93de0ef9com.microsoft.azure.eventhubs._event_data
      description: <p>the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to be sent. </p>
    return:
      type: d3846f97
  exceptions:
  - type: 22fa3d6f
    description: <p>if the total size of the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> exceeds a pre-defined limit set by the service. Default is 256k bytes. </p>
  - type: ca207911
    description: <p>if Service Bus service encountered problems during the operation. </p>
- uid: com.microsoft.azure.eventhubs._partition_sender.sendSync(final EventDataBatch)
  id: sendSync(final EventDataBatch)
  parent: com.microsoft.azure.eventhubs._partition_sender
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  langs:
  - java
  name: sendSync(final EventDataBatch eventDatas)
  nameWithType: PartitionSender.sendSync(final EventDataBatch eventDatas)
  fullName: com.microsoft.azure.eventhubs.PartitionSender.sendSync(final EventDataBatch eventDatas)
  overload: com.microsoft.azure.eventhubs._partition_sender.sendSync*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionSender.java
    startLine: 134
  package: com.microsoft.azure.eventhubs
  summary: "<p>Synchronous version of <xref uid=\"com.microsoft.azure.eventhubs._partition_sender.send(EventDataBatch)\" data-throw-if-not-resolved=\"false\">send(EventDataBatch)</xref></p>\r\n<p></p>"
  syntax:
    content: public default void sendSync(final EventDataBatch eventDatas)
    parameters:
    - id: eventDatas
      type: 93de0ef9com.microsoft.azure.eventhubs._event_data_batch
      description: <p>EventDataBatch to send to EventHub </p>
    return:
      type: d3846f97
  exceptions:
  - type: ca207911
    description: <p>if Service Bus service encountered problems during the operation. </p>
- uid: com.microsoft.azure.eventhubs._partition_sender.sendSync(final Iterable<EventData>)
  id: sendSync(final Iterable<EventData>)
  parent: com.microsoft.azure.eventhubs._partition_sender
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  langs:
  - java
  name: sendSync(final Iterable<EventData> eventDatas)
  nameWithType: PartitionSender.sendSync(final Iterable<EventData> eventDatas)
  fullName: com.microsoft.azure.eventhubs.PartitionSender.sendSync(final Iterable<EventData> eventDatas)
  overload: com.microsoft.azure.eventhubs._partition_sender.sendSync*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionSender.java
    startLine: 85
  package: com.microsoft.azure.eventhubs
  summary: "<p>Synchronous version of <xref uid=\"\" data-throw-if-not-resolved=\"false\">send(Iterable)</xref> .</p>\r\n<p></p>"
  syntax:
    content: public default void sendSync(final Iterable<EventData> eventDatas)
    parameters:
    - id: eventDatas
      type: f42d2527com.microsoft.azure.eventhubs._event_dataa08ddfce
      description: <p>batch of events to send to EventHub </p>
    return:
      type: d3846f97
  exceptions:
  - type: ca207911
    description: <p>if Service Bus service encountered problems during the operation. </p>
references:
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.eventhubs._partition_sender.getPartitionId*
  name: getPartitionId
  nameWithType: PartitionSender.getPartitionId
  fullName: com.microsoft.azure.eventhubs.PartitionSender.getPartitionId
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs._partition_sender.createBatch*
  name: createBatch
  nameWithType: PartitionSender.createBatch
  fullName: com.microsoft.azure.eventhubs.PartitionSender.createBatch
  package: com.microsoft.azure.eventhubs
- uid: c0f98273com.microsoft.azure.eventhubs._event_data_batch
  spec.java:
  - name: 'default '
    fullName: 'default '
  - uid: com.microsoft.azure.eventhubs._event_data_batch
    name: EventDataBatch
    fullName: com.microsoft.azure.eventhubs.EventDataBatch
    href: com.microsoft.azure.eventhubs._event_data_batch.yml
- uid: 22fa3d6f
  spec.java:
  - name: PayloadSizeExceededException
    fullName: PayloadSizeExceededException
- uid: ca207911
  spec.java:
  - name: EventHubException
    fullName: EventHubException
- uid: 93de0ef9com.microsoft.azure.eventhubs._event_data
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.eventhubs._event_data
    name: EventData
    fullName: com.microsoft.azure.eventhubs.EventData
    href: com.microsoft.azure.eventhubs._event_data.yml
- uid: d3846f97
  spec.java:
  - name: default void
    fullName: default void
- uid: com.microsoft.azure.eventhubs._partition_sender.sendSync*
  name: sendSync
  nameWithType: PartitionSender.sendSync
  fullName: com.microsoft.azure.eventhubs.PartitionSender.sendSync
  package: com.microsoft.azure.eventhubs
- uid: db03ee24
  spec.java:
  - name: CompletableFuture<Void>
    fullName: CompletableFuture<Void>
- uid: com.microsoft.azure.eventhubs._partition_sender.send*
  name: send
  nameWithType: PartitionSender.send
  fullName: com.microsoft.azure.eventhubs.PartitionSender.send
  package: com.microsoft.azure.eventhubs
- uid: f42d2527com.microsoft.azure.eventhubs._event_dataa08ddfce
  spec.java:
  - name: final Iterable<
    fullName: final Iterable<
  - uid: com.microsoft.azure.eventhubs._event_data
    name: EventData
    fullName: com.microsoft.azure.eventhubs.EventData
    href: com.microsoft.azure.eventhubs._event_data.yml
  - name: '>'
    fullName: '>'
- uid: 2a13b5a5com.microsoft.azure.eventhubs._event_dataa08ddfce
  spec.java:
  - name: Iterable<
    fullName: Iterable<
  - uid: com.microsoft.azure.eventhubs._event_data
    name: EventData
    fullName: com.microsoft.azure.eventhubs.EventData
    href: com.microsoft.azure.eventhubs._event_data.yml
  - name: '>'
    fullName: '>'
- uid: 93de0ef9com.microsoft.azure.eventhubs._event_data_batch
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.eventhubs._event_data_batch
    name: EventDataBatch
    fullName: com.microsoft.azure.eventhubs.EventDataBatch
    href: com.microsoft.azure.eventhubs._event_data_batch.yml
- uid: com.microsoft.azure.eventhubs._partition_sender.close*
  name: close
  nameWithType: PartitionSender.close
  fullName: com.microsoft.azure.eventhubs.PartitionSender.close
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs._partition_sender.closeSync*
  name: closeSync
  nameWithType: PartitionSender.closeSync
  fullName: com.microsoft.azure.eventhubs.PartitionSender.closeSync
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs._event_data_batch
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_data_batch.yml
  name: EventDataBatch
  nameWithType: EventDataBatch
  fullName: com.microsoft.azure.eventhubs.EventDataBatch
  type: Interface
  summary: <p>Helper for creating a batch/collection of EventData objects to be used while Sending to EventHubs </p>
  syntax:
    content: public interface EventDataBatch
- uid: com.microsoft.azure.eventhubs._batch_options
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._batch_options.yml
  name: BatchOptions
  nameWithType: BatchOptions
  fullName: com.microsoft.azure.eventhubs.BatchOptions
  type: Class
  summary: "<p>BatchOptions is used to create <xref uid=\"com.microsoft.azure.eventhubs._event_data_batch\" data-throw-if-not-resolved=\"false\">EventDataBatch</xref>es. </p>\r\n<p>If you're creating <xref uid=\"com.microsoft.azure.eventhubs._event_data_batch\" data-throw-if-not-resolved=\"false\">EventDataBatch</xref>es with <xref uid=\"com.microsoft.azure.eventhubs._event_hub_client\" data-throw-if-not-resolved=\"false\">EventHubClient</xref>, then you can set a partitionKey and maxMessageSize using the .with() method. Alternatively, if you'd like the default settings, simply construct BatchOptions with the void constructor. Default settings:<ul><li><p>partitionKey is null</p></li><li><p>maxMessageSize is the maximum allowed size </p></li></ul></p>\r\n<p>If you're creating <xref uid=\"com.microsoft.azure.eventhubs._event_data_batch\" data-throw-if-not-resolved=\"false\">EventDataBatch</xref>es with <xref uid=\"com.microsoft.azure.eventhubs._partition_sender\" data-throw-if-not-resolved=\"false\">PartitionSender</xref>, then you can only set a maxMessageSize using the .with() method. Alternatively, if you'd like the default settings, simply construct BatchOptions with the void constructor. Default settings:<ul><li><p>maxMessageSize is the maximum allowed size</p></li><li><p>Note: if you set a partition key, an <xref uid=\"\" data-throw-if-not-resolved=\"false\">IllegalArgumentException</xref> will be thrown. </p></li></ul></p>\r\n<p>To construct either type of batch, create a <xref uid=\"com.microsoft.azure.eventhubs._batch_options\" data-throw-if-not-resolved=\"false\">BatchOptions</xref> object and pass it into the appropriate createBatch method. If using <xref uid=\"com.microsoft.azure.eventhubs._partition_sender\" data-throw-if-not-resolved=\"false\">PartitionSender</xref>, then use (<xref uid=\"com.microsoft.azure.eventhubs._partition_sender.createBatch(BatchOptions)\" data-throw-if-not-resolved=\"false\">PartitionSender#createBatch(BatchOptions)</xref>. If using <xref uid=\"com.microsoft.azure.eventhubs._event_hub_client\" data-throw-if-not-resolved=\"false\">EventHubClient</xref>, then use <xref uid=\"com.microsoft.azure.eventhubs._event_hub_client.createBatch(BatchOptions)\" data-throw-if-not-resolved=\"false\">EventHubClient#createBatch(BatchOptions)</xref>. <pre><code>// Note: For all examples, 'client' is an instance of EventHubClient. The usage is the same for PartitionSender,\r\n    however, you can NOT set a partition key when using PartitionSender\r\n    \r\n    // Create EventDataBatch with defaults\r\n    EventDataBatch edb1 = client.createBatch();\r\n    \r\n    // Create EventDataBatch with custom partitionKey\r\n    BatchOptions options = new BatchOptions().with( options -&gt; options.partitionKey = \"foo\");\r\n    EventDataBatch edb2 = client.createBatch(options);\r\n    \r\n    // Create EventDataBatch with custom partitionKey and maxMessageSize\r\n    BatchOptions options = new BatchOptions().with ( options -&gt; {\r\n        options.partitionKey = \"foo\";\r\n        options.maxMessageSize = 100 * 1024;\r\n    };\r\n    EventDataBatch edb3 = client.createBatch(options);\r\n    </code></pre></p>"
  syntax:
    content: public class BatchOptions
- uid: com.microsoft.azure.eventhubs._event_data
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: EventData
  nameWithType: EventData
  fullName: com.microsoft.azure.eventhubs.EventData
  type: Interface
  summary: >-
    <p>The data structure encapsulating the Event being sent-to and received-from EventHubs. Each EventHubs partition can be visualized as a Stream of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>

    <p>Serializing a received <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> with AMQP sections other than ApplicationProperties (with primitive java types) and Data section is not supported. </p>

    <p>Here's how AMQP message sections map to <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. Here's the reference used for AMQP 1.0 specification: <a href="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf">http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf</a><pre>

    i.   <xref uid="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false">getProperties()</xref> - AMQPMessage.ApplicationProperties section

    ii.  <xref uid="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false">getBytes()</xref> - if AMQPMessage.Body has Data section

    iii. <xref uid="com.microsoft.azure.eventhubs._event_data.getObject()" data-throw-if-not-resolved="false">getObject()</xref> - if AMQPMessage.Body has AMQPValue or AMQPSequence sections

    </pre> While using client libraries released by Microsoft Azure EventHubs, sections (i) and (ii) alone are sufficient. Section (iii) is used for advanced scenarios, where the sending application uses third-party AMQP library to send the message to EventHubs and the receiving application uses this client library to receive <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>
  syntax:
    content: public interface EventData
- uid: com.microsoft.azure.eventhubs._partition_sender.send(EventDataBatch)
  parent: com.microsoft.azure.eventhubs._partition_sender
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  name: send(EventDataBatch eventDatas)
  nameWithType: PartitionSender.send(EventDataBatch eventDatas)
  fullName: com.microsoft.azure.eventhubs.PartitionSender.send(EventDataBatch eventDatas)
  type: Method
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref> to a specific EventHub partition. The targeted partition is pre-determined when this PartitionSender was created. A partitionKey cannot be set when using EventDataBatch with a PartitionSender. </p>

    <p>There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid="com.microsoft.azure.eventhubs._partition_sender.send(EventData)" data-throw-if-not-resolved="false">send(EventData)</xref>, which is the same type of Send and is used to send single <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>

    <p>Sending a batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s is useful in the following cases: <pre>

    i.	Efficient send - sending a batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> maximizes the overall throughput by optimally using the number of sessions created to EventHubs' service.

    ii.	Send multiple <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s in a Transaction. To achieve ACID properties, the Gateway Service will forward all <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s in the batch to a single EventHubs' partition.

    </pre></p>

    <p></p>
  syntax: *o1
- uid: com.microsoft.azure.eventhubs._event_hub_exception
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_hub_exception.yml
  name: EventHubException
  nameWithType: EventHubException
  fullName: com.microsoft.azure.eventhubs.EventHubException
  type: Class
  summary: <p>This is the base exception that service bus will produce for all error cases. </p>
  syntax:
    content: public class EventHubException
- uid: com.microsoft.azure.eventhubs._partition_sender.send(EventData)
  parent: com.microsoft.azure.eventhubs._partition_sender
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  name: send(EventData data)
  nameWithType: PartitionSender.send(EventData data)
  fullName: com.microsoft.azure.eventhubs.PartitionSender.send(EventData data)
  type: Method
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to a specific EventHub partition. The target partition is pre-determined when this PartitionSender was created. This send pattern emphasize data correlation over general availability and latency. </p>

    <p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload): <pre>

    i.   <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false">EventHubClient#send(EventData)</xref>, <xref uid="" data-throw-if-not-resolved="false">EventHubClient#send(Iterable)</xref>, <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventDataBatch)" data-throw-if-not-resolved="false">EventHubClient#send(EventDataBatch)</xref>

    ii.  <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData,final String)" data-throw-if-not-resolved="false">EventHubClient#send(EventData, String)</xref> or <xref uid="" data-throw-if-not-resolved="false">EventHubClient#send(Iterable, String)</xref>

    iii. <xref uid="com.microsoft.azure.eventhubs._partition_sender.send(EventData)" data-throw-if-not-resolved="false">PartitionSender#send(EventData)</xref>, <xref uid="" data-throw-if-not-resolved="false">PartitionSender#send(Iterable)</xref>, or <xref uid="com.microsoft.azure.eventhubs._partition_sender.send(EventDataBatch)" data-throw-if-not-resolved="false">PartitionSender#send(EventDataBatch)</xref></pre></p>

    <p>Use this type of Send, if: <pre>

    i. The client wants to take direct control of distribution of data across partitions. In this case client is responsible for making sure there is at least one sender per event hub partition.

    ii. User cannot use partition key as a mean to direct events to specific partition, yet there is a need for data correlation with partitioning scheme.

    </pre></p>

    <p></p>
  syntax: *o2
- uid: com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: send(final EventData data)
  nameWithType: EventHubClient.send(final EventData data)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.send(final EventData data)
  type: Method
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> will land on any arbitrarily chosen EventHubs partition. </p>

    <p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload): <ul><li><p><xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref>, <xref uid="" data-throw-if-not-resolved="false">send(Iterable)</xref>, or <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventDataBatch)" data-throw-if-not-resolved="false">send(EventDataBatch)</xref></p></li><li><p><xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData,final String)" data-throw-if-not-resolved="false">send(EventData, String)</xref> or <xref uid="" data-throw-if-not-resolved="false">send(Iterable, String)</xref></p></li><li><p><xref uid="com.microsoft.azure.eventhubs._partition_sender.send(EventData)" data-throw-if-not-resolved="false">PartitionSender#send(EventData)</xref>, <xref uid="" data-throw-if-not-resolved="false">PartitionSender#send(Iterable)</xref>, or <xref uid="com.microsoft.azure.eventhubs._partition_sender.send(EventDataBatch)" data-throw-if-not-resolved="false">PartitionSender#send(EventDataBatch)</xref></p></li></ul></p>

    <p>Use this method to Send, if: <pre>

    a)  the send(<xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>) operation should be highly available and

    b)  the data needs to be evenly distributed among all partitions; exception being, when a subset of partitions are unavailable

    </pre></p>

    <p>

      <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref> send's the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to a Service Gateway, which in-turn will forward the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to one of the EventHubs' partitions. Here's the message forwarding algorithm: <pre>

    i.  Forward the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s to EventHub partitions, by equally distributing the data among all partitions (ex: Round-robin the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s to all EventHubs' partitions)

    ii. If one of the EventHub partitions is unavailable for a moment, the Service Gateway will automatically detect it and forward the message to another available partition - making the Send operation highly-available.

    </pre></p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> send(final EventData data)
    parameters:
    - id: data
      type: 93de0ef9com.microsoft.azure.eventhubs._event_data
      description: <p>the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to be sent. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
- uid: com.microsoft.azure.eventhubs._event_hub_client.send(final EventDataBatch)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: send(final EventDataBatch eventDatas)
  nameWithType: EventHubClient.send(final EventDataBatch eventDatas)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.send(final EventDataBatch eventDatas)
  type: Method
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref> will land according the partition key set in the <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref>. If a partition key is not set, then we will Round-robin the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s to all EventHubs' partitions.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> send(final EventDataBatch eventDatas)
    parameters:
    - id: eventDatas
      type: 93de0ef9com.microsoft.azure.eventhubs._event_data_batch
      description: <p>EventDataBatch to send to EventHub </p>
    return:
      type: db03ee24
      description: <p>a CompleteableFuture that can be completed when the send operations are done </p>
- uid: com.microsoft.azure.eventhubs._event_hub_client.send(final EventData,final String)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: send(final EventData eventData, final String partitionKey)
  nameWithType: EventHubClient.send(final EventData eventData, final String partitionKey)
  fullName: com.microsoft.azure.eventhubs.EventHubClient.send(final EventData eventData, final String partitionKey)
  type: Method
  summary: >-
    <p>Send an '<xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> with a partitionKey' to EventHub. All <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s with a partitionKey are guaranteed to land on the same partition. This send pattern emphasize data correlation over general availability and latency. </p>

    <p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload): <pre>

    i.   <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref> or <xref uid="" data-throw-if-not-resolved="false">send(Iterable)</xref>

    ii.  <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData,final String)" data-throw-if-not-resolved="false">send(EventData, String)</xref> or <xref uid="" data-throw-if-not-resolved="false">send(Iterable, String)</xref>

    iii. <xref uid="com.microsoft.azure.eventhubs._partition_sender.send(EventData)" data-throw-if-not-resolved="false">PartitionSender#send(EventData)</xref> or <xref uid="" data-throw-if-not-resolved="false">PartitionSender#send(Iterable)</xref></pre></p>

    <p>Use this type of Send, if: <pre>

    i.  There is a need for correlation of events based on Sender instance; The sender can generate a UniqueId and set it as partitionKey - which on the received Message can be used for correlation

    ii. The client wants to take control of distribution of data across partitions.

    </pre></p>

    <p>Multiple PartitionKey's could be mapped to one Partition. EventHubs service uses a proprietary Hash algorithm to map the PartitionKey to a PartitionId. Using this type of Send (Sending using a specific partitionKey), could sometimes result in partitions which are not evenly distributed.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> send(final EventData eventData, final String partitionKey)
    parameters:
    - id: eventData
      type: 93de0ef9com.microsoft.azure.eventhubs._event_data
      description: <p>the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to be sent. </p>
    - id: partitionKey
      type: 3d93591e
      description: <p>the partitionKey will be hash'ed to determine the partitionId to send the eventData to. On the Received message this can be accessed at <xref uid="" data-throw-if-not-resolved="false">EventData.SystemProperties#getPartitionKey()</xref></p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
