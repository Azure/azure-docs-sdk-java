### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy"
  id: "BlobDecryptionPolicy"
  parent: "com.azure.storage.blob.specialized.cryptography"
  children:
  - "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy.BlobDecryptionPolicy(com.azure.core.cryptography.AsyncKeyEncryptionKey,com.azure.core.cryptography.AsyncKeyEncryptionKeyResolver)"
  - "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy.DecryptedResponse"
  - "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy.decryptBlob(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.blob.specialized.cryptography.EncryptedBlobRange,boolean)"
  - "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy.process(com.azure.core.http.HttpPipelineCallContext,com.azure.core.http.HttpPipelineNextPolicy)"
  langs:
  - "java"
  name: "BlobDecryptionPolicy"
  nameWithType: "BlobDecryptionPolicy"
  fullName: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy"
  type: "Class"
  package: "com.azure.storage.blob.specialized.cryptography"
  summary: "This is a decryption policy in an <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\">com.azure.core.http.HttpPipeline</xref> to decrypt data in an <xref uid=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobAsyncClient\" data-throw-if-not-resolved=\"false\">EncryptedBlobAsyncClient</xref> or <xref uid=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient\" data-throw-if-not-resolved=\"false\">EncryptedBlobClient</xref> download request. The range will be expanded for decryption purposes and then decrypt the body when the response comes in."
  syntax:
    content: "public class BlobDecryptionPolicy implements HttpPipelinePolicy"
  inheritance:
  - "java.lang.Object"
  implements:
  - "com.azure.core.http.policy.HttpPipelinePolicy"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy.BlobDecryptionPolicy(com.azure.core.cryptography.AsyncKeyEncryptionKey,com.azure.core.cryptography.AsyncKeyEncryptionKeyResolver)"
  id: "BlobDecryptionPolicy(com.azure.core.cryptography.AsyncKeyEncryptionKey,com.azure.core.cryptography.AsyncKeyEncryptionKeyResolver)"
  parent: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy"
  langs:
  - "java"
  name: "BlobDecryptionPolicy(AsyncKeyEncryptionKey key, AsyncKeyEncryptionKeyResolver keyResolver)"
  nameWithType: "BlobDecryptionPolicy.BlobDecryptionPolicy(AsyncKeyEncryptionKey key, AsyncKeyEncryptionKeyResolver keyResolver)"
  fullName: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy.BlobDecryptionPolicy(AsyncKeyEncryptionKey key, AsyncKeyEncryptionKeyResolver keyResolver)"
  overload: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy.BlobDecryptionPolicy*"
  type: "Constructor"
  package: "com.azure.storage.blob.specialized.cryptography"
  summary: "Initializes a new instance of the <xref uid=\"com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy\" data-throw-if-not-resolved=\"false\">BlobDecryptionPolicy</xref> class with the specified key and resolver.\n\nIf the generated policy is intended to be used for encryption, users are expected to provide a key at the minimum. The absence of key will cause an exception to be thrown during encryption. If the generated policy is intended to be used for decryption, users can provide a keyResolver. The client library will - 1. Invoke the key resolver if specified to get the key. 2. If resolver is not specified but a key is specified, match the key id on the key and use it."
  syntax:
    content: " BlobDecryptionPolicy(AsyncKeyEncryptionKey key, AsyncKeyEncryptionKeyResolver keyResolver)"
    parameters:
    - id: "key"
      type: "com.azure.core.cryptography.AsyncKeyEncryptionKey"
      description: "An object of type <xref uid=\"\" data-throw-if-not-resolved=\"false\">AsyncKeyEncryptionKey</xref> that is used to wrap/unwrap the content encryption\n key"
    - id: "keyResolver"
      type: "com.azure.core.cryptography.AsyncKeyEncryptionKeyResolver"
      description: "The key resolver used to select the correct key for decrypting existing blobs."
- uid: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy.decryptBlob(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.blob.specialized.cryptography.EncryptedBlobRange,boolean)"
  id: "decryptBlob(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.blob.specialized.cryptography.EncryptedBlobRange,boolean)"
  parent: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy"
  langs:
  - "java"
  name: "decryptBlob(String encryptedDataString, Flux<ByteBuffer> encryptedFlux, EncryptedBlobRange encryptedBlobRange, boolean padding)"
  nameWithType: "BlobDecryptionPolicy.decryptBlob(String encryptedDataString, Flux<ByteBuffer> encryptedFlux, EncryptedBlobRange encryptedBlobRange, boolean padding)"
  fullName: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy.decryptBlob(String encryptedDataString, Flux<ByteBuffer> encryptedFlux, EncryptedBlobRange encryptedBlobRange, boolean padding)"
  overload: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy.decryptBlob*"
  type: "Method"
  package: "com.azure.storage.blob.specialized.cryptography"
  summary: "Decrypted all or part of an encrypted Block-, Page- or AppendBlob."
  syntax:
    content: " Flux<ByteBuffer> decryptBlob(String encryptedDataString, Flux<ByteBuffer> encryptedFlux, EncryptedBlobRange encryptedBlobRange, boolean padding)"
    parameters:
    - id: "encryptedDataString"
      type: "java.lang.String"
      description: "The Blob's encrypted data in the metadata"
    - id: "encryptedFlux"
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "The encrypted Flux of ByteBuffer to decrypt"
    - id: "encryptedBlobRange"
      type: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobRange"
      description: "A <xref uid=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobRange\" data-throw-if-not-resolved=\"false\">EncryptedBlobRange</xref> indicating the range to decrypt"
    - id: "padding"
      type: "boolean"
      description: "Boolean indicating if the padding mode should be set or not."
    return:
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "A Flux ByteBuffer that has been decrypted"
- uid: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy.process(com.azure.core.http.HttpPipelineCallContext,com.azure.core.http.HttpPipelineNextPolicy)"
  id: "process(com.azure.core.http.HttpPipelineCallContext,com.azure.core.http.HttpPipelineNextPolicy)"
  parent: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy"
  langs:
  - "java"
  name: "process(HttpPipelineCallContext context, HttpPipelineNextPolicy next)"
  nameWithType: "BlobDecryptionPolicy.process(HttpPipelineCallContext context, HttpPipelineNextPolicy next)"
  fullName: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy.process(HttpPipelineCallContext context, HttpPipelineNextPolicy next)"
  overload: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy.process*"
  type: "Method"
  package: "com.azure.storage.blob.specialized.cryptography"
  syntax:
    content: "public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next)"
    parameters:
    - id: "context"
      type: "com.azure.core.http.HttpPipelineCallContext"
    - id: "next"
      type: "com.azure.core.http.HttpPipelineNextPolicy"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.HttpResponse>"
references:
- uid: "com.azure.core.cryptography.AsyncKeyEncryptionKey"
  spec.java:
  - uid: "com.azure.core.cryptography.AsyncKeyEncryptionKey"
    name: "AsyncKeyEncryptionKey"
    fullName: "com.azure.core.cryptography.AsyncKeyEncryptionKey"
- uid: "com.azure.core.cryptography.AsyncKeyEncryptionKeyResolver"
  spec.java:
  - uid: "com.azure.core.cryptography.AsyncKeyEncryptionKeyResolver"
    name: "AsyncKeyEncryptionKeyResolver"
    fullName: "com.azure.core.cryptography.AsyncKeyEncryptionKeyResolver"
- uid: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy.BlobDecryptionPolicy*"
  name: "BlobDecryptionPolicy"
  nameWithType: "BlobDecryptionPolicy.BlobDecryptionPolicy"
  fullName: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy.BlobDecryptionPolicy"
  package: "com.azure.storage.blob.specialized.cryptography"
- uid: "com.azure.core.http.HttpPipelineCallContext"
  spec.java:
  - uid: "com.azure.core.http.HttpPipelineCallContext"
    name: "HttpPipelineCallContext"
    fullName: "com.azure.core.http.HttpPipelineCallContext"
- uid: "com.azure.core.http.HttpPipelineNextPolicy"
  spec.java:
  - uid: "com.azure.core.http.HttpPipelineNextPolicy"
    name: "HttpPipelineNextPolicy"
    fullName: "com.azure.core.http.HttpPipelineNextPolicy"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.HttpResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.HttpResponse"
    name: "HttpResponse"
    fullName: "com.azure.core.http.HttpResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy.process*"
  name: "process"
  nameWithType: "BlobDecryptionPolicy.process"
  fullName: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy.process"
  package: "com.azure.storage.blob.specialized.cryptography"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "java.nio.ByteBuffer"
    name: "ByteBuffer"
    fullName: "java.nio.ByteBuffer"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobRange"
  name: "EncryptedBlobRange"
  nameWithType: "EncryptedBlobRange"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobRange"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy.decryptBlob*"
  name: "decryptBlob"
  nameWithType: "BlobDecryptionPolicy.decryptBlob"
  fullName: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy.decryptBlob"
  package: "com.azure.storage.blob.specialized.cryptography"
- uid: "com.azure.core.http.policy.HttpPipelinePolicy"
  name: "HttpPipelinePolicy"
  nameWithType: "HttpPipelinePolicy"
  fullName: "com.azure.core.http.policy.HttpPipelinePolicy"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy.DecryptedResponse"
  name: "BlobDecryptionPolicy.DecryptedResponse"
  nameWithType: "BlobDecryptionPolicy.DecryptedResponse"
  fullName: "com.azure.storage.blob.specialized.cryptography.BlobDecryptionPolicy.DecryptedResponse"
- uid: "com.azure.core.http.HttpResponse"
  name: "HttpResponse"
  nameWithType: "HttpResponse"
  fullName: "com.azure.core.http.HttpResponse"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"
- uid: "java.nio.ByteBuffer"
  name: "ByteBuffer"
  nameWithType: "ByteBuffer"
  fullName: "java.nio.ByteBuffer"
