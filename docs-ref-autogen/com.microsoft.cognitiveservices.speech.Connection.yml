### YamlMime:JavaType
fields:
- field:
    type: final EventHandlerImpl&lt;<xref href="com.microsoft.cognitiveservices.speech.ConnectionEventArgs?alt=com.microsoft.cognitiveservices.speech.ConnectionEventArgs&text=ConnectionEventArgs" data-throw-if-not-resolved="False"/>&gt;
  fullName: com.microsoft.cognitiveservices.speech.Connection.connected
  name: connected
  nameWithType: Connection.connected
  summary: <p>The Connected event to indicate that the recognizer is connected to service. In order to receive the connected event after subscribing to it, the Connection object itself needs to be alive. If the Connection object owning this event is out of its life time, all subscribed events won't be delivered. </p>
  syntax: public final EventHandlerImpl<ConnectionEventArgs> connected= new EventHandlerImpl<ConnectionEventArgs>(eventCounter)
  uid: com.microsoft.cognitiveservices.speech.Connection.connected
- field:
    type: final EventHandlerImpl&lt;<xref href="com.microsoft.cognitiveservices.speech.ConnectionEventArgs?alt=com.microsoft.cognitiveservices.speech.ConnectionEventArgs&text=ConnectionEventArgs" data-throw-if-not-resolved="False"/>&gt;
  fullName: com.microsoft.cognitiveservices.speech.Connection.disconnected
  name: disconnected
  nameWithType: Connection.disconnected
  summary: <p>The Disconnected event to indicate that the recognizer is disconnected from service. In order to receive the disconnected event after subscribing to it, the Connection object itself needs to be alive. If the Connection object owning this event is out of its life time, all subscribed events won't be delivered. </p>
  syntax: public final EventHandlerImpl<ConnectionEventArgs> disconnected= new EventHandlerImpl<ConnectionEventArgs>(eventCounter)
  uid: com.microsoft.cognitiveservices.speech.Connection.disconnected
- field:
    type: final EventHandlerImpl&lt;<xref href="com.microsoft.cognitiveservices.speech.ConnectionMessageEventArgs?alt=com.microsoft.cognitiveservices.speech.ConnectionMessageEventArgs&text=ConnectionMessageEventArgs" data-throw-if-not-resolved="False"/>&gt;
  fullName: com.microsoft.cognitiveservices.speech.Connection.messageReceived
  name: messageReceived
  nameWithType: Connection.messageReceived
  summary: <p>The MessageReceived event indicates that the service has sent a network message to the client. Added in version 1.15.0. </p>
  syntax: public final EventHandlerImpl<ConnectionMessageEventArgs> messageReceived= new EventHandlerImpl<ConnectionMessageEventArgs>(eventCounter)
  uid: com.microsoft.cognitiveservices.speech.Connection.messageReceived
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="AutoCloseable" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.cognitiveservices.speech.Connection.close()
  name: close()
  nameWithType: Connection.close()
  summary: <p>Dispose of associated resources. close() must be called to relinquish underlying resources correctly. </p>
  syntax: public void close()
  uid: com.microsoft.cognitiveservices.speech.Connection.close()
- fullName: com.microsoft.cognitiveservices.speech.Connection.closeConnection()
  name: closeConnection()
  nameWithType: Connection.closeConnection()
  summary: <p>Closes the connection the service. Users can optionally call closeConnection() to manually shutdown the connection of the associated Recognizer. The call might fail, depending on the process state of the Recognizer. But the failure does not affect the state of the associated Recognizer. </p>
  syntax: public void closeConnection()
  uid: com.microsoft.cognitiveservices.speech.Connection.closeConnection()
- fullName: com.microsoft.cognitiveservices.speech.Connection.fromConversationTranslator(ConversationTranslator conversationTranslator)
  name: fromConversationTranslator(ConversationTranslator conversationTranslator)
  nameWithType: Connection.fromConversationTranslator(ConversationTranslator conversationTranslator)
  parameters:
  - description: <p>The conversationTranslator associated with the connection. </p>
    name: conversationTranslator
    type: <xref href="com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator?alt=com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator&text=ConversationTranslator" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The Connection instance of the recognizer. </p>
    type: <xref href="com.microsoft.cognitiveservices.speech.Connection?alt=com.microsoft.cognitiveservices.speech.Connection&text=Connection" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the Connection instance from the conversation translator. </p>
  syntax: public static Connection fromConversationTranslator(ConversationTranslator conversationTranslator)
  uid: com.microsoft.cognitiveservices.speech.Connection.fromConversationTranslator(ConversationTranslator)
- fullName: com.microsoft.cognitiveservices.speech.Connection.fromDialogServiceConnector(DialogServiceConnector dialogServiceConnector)
  name: fromDialogServiceConnector(DialogServiceConnector dialogServiceConnector)
  nameWithType: Connection.fromDialogServiceConnector(DialogServiceConnector dialogServiceConnector)
  parameters:
  - description: <p>The dialog service connector associated with the connection, used for observing and managing connection state with the speech service. </p>
    name: dialogServiceConnector
    type: <xref href="com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector?alt=com.microsoft.cognitiveservices.speech.dialog.DialogServiceConnector&text=DialogServiceConnector" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The Connection instance of the dialog service connector. </p>
    type: <xref href="com.microsoft.cognitiveservices.speech.Connection?alt=com.microsoft.cognitiveservices.speech.Connection&text=Connection" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the Connection instance from the dialog service connector. </p>
  syntax: public static Connection fromDialogServiceConnector(DialogServiceConnector dialogServiceConnector)
  uid: com.microsoft.cognitiveservices.speech.Connection.fromDialogServiceConnector(DialogServiceConnector)
- fullName: com.microsoft.cognitiveservices.speech.Connection.fromRecognizer(Recognizer recognizer)
  name: fromRecognizer(Recognizer recognizer)
  nameWithType: Connection.fromRecognizer(Recognizer recognizer)
  parameters:
  - description: <p>The recognizer associated with the connection. </p>
    name: recognizer
    type: <xref href="com.microsoft.cognitiveservices.speech.Recognizer?alt=com.microsoft.cognitiveservices.speech.Recognizer&text=Recognizer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The Connection instance of the recognizer. </p>
    type: <xref href="com.microsoft.cognitiveservices.speech.Connection?alt=com.microsoft.cognitiveservices.speech.Connection&text=Connection" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the Connection instance from the specified recognizer. </p>
  syntax: public static Connection fromRecognizer(Recognizer recognizer)
  uid: com.microsoft.cognitiveservices.speech.Connection.fromRecognizer(Recognizer)
- fullName: com.microsoft.cognitiveservices.speech.Connection.fromSpeechSynthesizer(SpeechSynthesizer speechSynthesizer)
  name: fromSpeechSynthesizer(SpeechSynthesizer speechSynthesizer)
  nameWithType: Connection.fromSpeechSynthesizer(SpeechSynthesizer speechSynthesizer)
  parameters:
  - description: <p>The speech synthesizer associated with the connection, used for observing and managing connection state with the speech service. </p>
    name: speechSynthesizer
    type: <xref href="com.microsoft.cognitiveservices.speech.SpeechSynthesizer?alt=com.microsoft.cognitiveservices.speech.SpeechSynthesizer&text=SpeechSynthesizer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The Connection instance of the speech synthesizer. </p>
    type: <xref href="com.microsoft.cognitiveservices.speech.Connection?alt=com.microsoft.cognitiveservices.speech.Connection&text=Connection" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the Connection instance from the speech synthesizer. Added in version 1.17.0 </p>
  syntax: public static Connection fromSpeechSynthesizer(SpeechSynthesizer speechSynthesizer)
  uid: com.microsoft.cognitiveservices.speech.Connection.fromSpeechSynthesizer(SpeechSynthesizer)
- fullName: com.microsoft.cognitiveservices.speech.Connection.openConnection(boolean forContinuousRecognition)
  name: openConnection(boolean forContinuousRecognition)
  nameWithType: Connection.openConnection(boolean forContinuousRecognition)
  parameters:
  - description: <p>indicates whether the connection is used for continuous recognition or single-shot recognition. It takes no effect if the connection is from SpeechSynthsizer. </p>
    name: forContinuousRecognition
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: '<p>Starts to set up connection to the service. Users can optionally call openConnection() to manually set up a connection in advance before starting recognition on the Recognizer associated with this Connection. After starting recognition, calling OpenConnection() might fail, depending on the process state of the Recognizer. But the failure does not affect the state of the associated Recognizer. Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to be notified when the connection is established. </p>'
  syntax: public void openConnection(boolean forContinuousRecognition)
  uid: com.microsoft.cognitiveservices.speech.Connection.openConnection(boolean)
- fullName: com.microsoft.cognitiveservices.speech.Connection.sendMessageAsync(String path, String payload)
  name: sendMessageAsync(String path, String payload)
  nameWithType: Connection.sendMessageAsync(String path, String payload)
  parameters:
  - description: <p>The message path. </p>
    name: path
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The message payload. </p>
    name: payload
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a future representing the asynchronous operation that sends the message. </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: "<p>Sends a message to service. Added in version 1.7.0 Note: This method doesn't work for the connection of SpeechSynthesizer. </p>"
  syntax: public Future<Void> sendMessageAsync(String path, String payload)
  uid: com.microsoft.cognitiveservices.speech.Connection.sendMessageAsync(String,String)
- fullName: com.microsoft.cognitiveservices.speech.Connection.setMessageProperty(String path, String propertyName, String propertyValue)
  name: setMessageProperty(String path, String propertyName, String propertyValue)
  nameWithType: Connection.setMessageProperty(String path, String propertyName, String propertyValue)
  parameters:
  - description: <p>The message path. </p>
    name: path
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The property name that you want to set. </p>
    name: propertyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The value of the property that you want to set. </p>
    name: propertyValue
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: "<p>Appends a parameter in a message to service. Added in version 1.7.0 Note: This method doesn't work for the connection of SpeechSynthesizer. </p>"
  syntax: public void setMessageProperty(String path, String propertyName, String propertyValue)
  uid: com.microsoft.cognitiveservices.speech.Connection.setMessageProperty(String,String,String)
nameWithType: Connection
syntax: public class Connection
type: class
uid: com.microsoft.cognitiveservices.speech.Connection
fullName: com.microsoft.cognitiveservices.speech.Connection
name: Connection
package: com.microsoft.cognitiveservices.speech
summary: '<p>Connection is a proxy class for managing connection to the speech service of the specified Recognizer. By default, a Recognizer autonomously manages connection to service when needed. The Connection class provides additional methods for users to explicitly open or close a connection and to subscribe to connection status changes. The use of Connection is optional. It is intended for scenarios where fine tuning of application behavior based on connection status is needed. Users can optionally call openConnection() to manually initiate a service connection before starting recognition on the Recognizer associated with this Connection. After starting a recognition, calling openConnection() or closeConnection() might fail. This will not impact the Recognizer or the ongoing recognition. Connection might drop for various reasons, the Recognizer will always try to reinstitute the connection as required to guarantee ongoing operations. In all these cases Connected/Disconnected events will indicate the change of the connection status. Note: close() must be called in order to release underlying resources held by the object. Updated in version 1.17.0. </p>'
metadata: {}
