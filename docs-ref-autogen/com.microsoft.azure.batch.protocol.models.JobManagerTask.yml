### YamlMime:JavaType
uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask"
fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask"
name: "JobManagerTask"
nameWithType: "JobManagerTask"
summary: "Specifies details of a Job Manager Task."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class JobManagerTask"
constructors:
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.JobManagerTask()"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.JobManagerTask()"
  name: "JobManagerTask()"
  nameWithType: "JobManagerTask.JobManagerTask()"
  syntax: "public JobManagerTask()"
methods:
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.allowLowPriorityNode()"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.allowLowPriorityNode()"
  name: "allowLowPriorityNode()"
  nameWithType: "JobManagerTask.allowLowPriorityNode()"
  summary: "Get the default value is true."
  syntax: "public Boolean allowLowPriorityNode()"
  desc: "Get the default value is true."
  returns:
    description: "the allowLowPriorityNode value"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.applicationPackageReferences()"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.applicationPackageReferences()"
  name: "applicationPackageReferences()"
  nameWithType: "JobManagerTask.applicationPackageReferences()"
  summary: "Get application Packages are downloaded and deployed to a shared directory, not the Task working directory."
  syntax: "public List<ApplicationPackageReference> applicationPackageReferences()"
  desc: "Get application Packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced Application Package is already on the Compute Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node is used. If a referenced Application Package cannot be installed, for example because the package has been deleted or because download failed, the Task fails."
  returns:
    description: "the applicationPackageReferences value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ApplicationPackageReference?alt=com.microsoft.azure.batch.protocol.models.ApplicationPackageReference&text=ApplicationPackageReference\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.authenticationTokenSettings()"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.authenticationTokenSettings()"
  name: "authenticationTokenSettings()"
  nameWithType: "JobManagerTask.authenticationTokenSettings()"
  summary: "Get if this property is set, the Batch service provides the Task with an authentication token which can be used to authenticate Batch service operations without requiring an Account access key."
  syntax: "public AuthenticationTokenSettings authenticationTokenSettings()"
  desc: "Get if this property is set, the Batch service provides the Task with an authentication token which can be used to authenticate Batch service operations without requiring an Account access key. The token is provided via the AZ\\_BATCH\\_AUTHENTICATION\\_TOKEN environment variable. The operations that the Task can carry out using the token depend on the settings. For example, a Task can request Job permissions in order to add other Tasks to the Job, or check the status of the Job or of other Tasks under the Job."
  returns:
    description: "the authenticationTokenSettings value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings?alt=com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings&text=AuthenticationTokenSettings\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.commandLine()"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.commandLine()"
  name: "commandLine()"
  nameWithType: "JobManagerTask.commandLine()"
  summary: "Get the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion."
  syntax: "public String commandLine()"
  desc: "Get the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables)."
  returns:
    description: "the commandLine value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.constraints()"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.constraints()"
  name: "constraints()"
  nameWithType: "JobManagerTask.constraints()"
  summary: "Get the constraints value."
  syntax: "public TaskConstraints constraints()"
  desc: "Get the constraints value."
  returns:
    description: "the constraints value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.containerSettings()"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.containerSettings()"
  name: "containerSettings()"
  nameWithType: "JobManagerTask.containerSettings()"
  summary: "Get if the Pool that will run this Task has container<wbr>Configuration set, this must be set as well."
  syntax: "public TaskContainerSettings containerSettings()"
  desc: "Get if the Pool that will run this Task has containerConfiguration set, this must be set as well. If the Pool that will run this Task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ\\_BATCH\\_NODE\\_ROOT\\_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ\\_BATCH\\_NODE\\_ROOT\\_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files."
  returns:
    description: "the containerSettings value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskContainerSettings?alt=com.microsoft.azure.batch.protocol.models.TaskContainerSettings&text=TaskContainerSettings\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.displayName()"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.displayName()"
  name: "displayName()"
  nameWithType: "JobManagerTask.displayName()"
  summary: "Get it need not be unique and can contain any Unicode characters up to a maximum length of 1024."
  syntax: "public String displayName()"
  desc: "Get it need not be unique and can contain any Unicode characters up to a maximum length of 1024."
  returns:
    description: "the displayName value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.environmentSettings()"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.environmentSettings()"
  name: "environmentSettings()"
  nameWithType: "JobManagerTask.environmentSettings()"
  summary: "Get the environment<wbr>Settings value."
  syntax: "public List<EnvironmentSetting> environmentSettings()"
  desc: "Get the environmentSettings value."
  returns:
    description: "the environmentSettings value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.EnvironmentSetting?alt=com.microsoft.azure.batch.protocol.models.EnvironmentSetting&text=EnvironmentSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.id()"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.id()"
  name: "id()"
  nameWithType: "JobManagerTask.id()"
  summary: "Get the ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters."
  syntax: "public String id()"
  desc: "Get the ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters."
  returns:
    description: "the id value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.killJobOnCompletion()"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.killJobOnCompletion()"
  name: "killJobOnCompletion()"
  nameWithType: "JobManagerTask.killJobOnCompletion()"
  summary: "Get if true, when the Job Manager Task completes, the Batch service marks the Job as complete."
  syntax: "public Boolean killJobOnCompletion()"
  desc: "Get if true, when the Job Manager Task completes, the Batch service marks the Job as complete. If any Tasks are still running at this time (other than Job Release), those Tasks are terminated. If false, the completion of the Job Manager Task does not affect the Job status. In this case, you should either use the onAllTasksComplete attribute to terminate the Job, or have a client or user terminate the Job explicitly. An example of this is if the Job Manager creates a set of Tasks but then takes no further role in their execution. The default value is true. If you are using the onAllTasksComplete and onTaskFailure attributes to control Job lifetime, and using the Job Manager Task only to create the Tasks for the Job (not to monitor progress), then it is important to set killJobOnCompletion to false."
  returns:
    description: "the killJobOnCompletion value"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.outputFiles()"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.outputFiles()"
  name: "outputFiles()"
  nameWithType: "JobManagerTask.outputFiles()"
  summary: "Get for multi-instance Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed."
  syntax: "public List<OutputFile> outputFiles()"
  desc: "Get for multi-instance Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed."
  returns:
    description: "the outputFiles value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.OutputFile?alt=com.microsoft.azure.batch.protocol.models.OutputFile&text=OutputFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.requiredSlots()"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.requiredSlots()"
  name: "requiredSlots()"
  nameWithType: "JobManagerTask.requiredSlots()"
  summary: "Get the default is 1."
  syntax: "public Integer requiredSlots()"
  desc: "Get the default is 1. A Task can only be scheduled to run on a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this must be 1."
  returns:
    description: "the requiredSlots value"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.resourceFiles()"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.resourceFiles()"
  name: "resourceFiles()"
  nameWithType: "JobManagerTask.resourceFiles()"
  summary: "Get files listed under this element are located in the Task's working directory."
  syntax: "public List<ResourceFile> resourceFiles()"
  desc: "Get files listed under this element are located in the Task's working directory. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers."
  returns:
    description: "the resourceFiles value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ResourceFile?alt=com.microsoft.azure.batch.protocol.models.ResourceFile&text=ResourceFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.runExclusive()"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.runExclusive()"
  name: "runExclusive()"
  nameWithType: "JobManagerTask.runExclusive()"
  summary: "Get if true, no other Tasks will run on the same Node for as long as the Job Manager is running."
  syntax: "public Boolean runExclusive()"
  desc: "Get if true, no other Tasks will run on the same Node for as long as the Job Manager is running. If false, other Tasks can run simultaneously with the Job Manager on a Compute Node. The Job Manager Task counts normally against the Compute Node's concurrent Task limit, so this is only relevant if the Compute Node allows multiple concurrent Tasks. The default value is true."
  returns:
    description: "the runExclusive value"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.userIdentity()"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.userIdentity()"
  name: "userIdentity()"
  nameWithType: "JobManagerTask.userIdentity()"
  summary: "Get if omitted, the Task runs as a non-administrative user unique to the Task."
  syntax: "public UserIdentity userIdentity()"
  desc: "Get if omitted, the Task runs as a non-administrative user unique to the Task."
  returns:
    description: "the userIdentity value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.UserIdentity?alt=com.microsoft.azure.batch.protocol.models.UserIdentity&text=UserIdentity\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withAllowLowPriorityNode(java.lang.Boolean)"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withAllowLowPriorityNode(Boolean allowLowPriorityNode)"
  name: "withAllowLowPriorityNode(Boolean allowLowPriorityNode)"
  nameWithType: "JobManagerTask.withAllowLowPriorityNode(Boolean allowLowPriorityNode)"
  summary: "Set the default value is true."
  parameters:
  - description: "the allowLowPriorityNode value to set"
    name: "allowLowPriorityNode"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JobManagerTask withAllowLowPriorityNode(Boolean allowLowPriorityNode)"
  desc: "Set the default value is true."
  returns:
    description: "the JobManagerTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withApplicationPackageReferences(java.util.List<com.microsoft.azure.batch.protocol.models.ApplicationPackageReference>)"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)"
  name: "withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)"
  nameWithType: "JobManagerTask.withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)"
  summary: "Set application Packages are downloaded and deployed to a shared directory, not the Task working directory."
  parameters:
  - description: "the applicationPackageReferences value to set"
    name: "applicationPackageReferences"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ApplicationPackageReference?alt=com.microsoft.azure.batch.protocol.models.ApplicationPackageReference&text=ApplicationPackageReference\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public JobManagerTask withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)"
  desc: "Set application Packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced Application Package is already on the Compute Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node is used. If a referenced Application Package cannot be installed, for example because the package has been deleted or because download failed, the Task fails."
  returns:
    description: "the JobManagerTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withAuthenticationTokenSettings(com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings)"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings)"
  name: "withAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings)"
  nameWithType: "JobManagerTask.withAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings)"
  summary: "Set if this property is set, the Batch service provides the Task with an authentication token which can be used to authenticate Batch service operations without requiring an Account access key."
  parameters:
  - description: "the authenticationTokenSettings value to set"
    name: "authenticationTokenSettings"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings?alt=com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings&text=AuthenticationTokenSettings\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JobManagerTask withAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings)"
  desc: "Set if this property is set, the Batch service provides the Task with an authentication token which can be used to authenticate Batch service operations without requiring an Account access key. The token is provided via the AZ\\_BATCH\\_AUTHENTICATION\\_TOKEN environment variable. The operations that the Task can carry out using the token depend on the settings. For example, a Task can request Job permissions in order to add other Tasks to the Job, or check the status of the Job or of other Tasks under the Job."
  returns:
    description: "the JobManagerTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withCommandLine(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withCommandLine(String commandLine)"
  name: "withCommandLine(String commandLine)"
  nameWithType: "JobManagerTask.withCommandLine(String commandLine)"
  summary: "Set the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion."
  parameters:
  - description: "the commandLine value to set"
    name: "commandLine"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JobManagerTask withCommandLine(String commandLine)"
  desc: "Set the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables)."
  returns:
    description: "the JobManagerTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withConstraints(com.microsoft.azure.batch.protocol.models.TaskConstraints)"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withConstraints(TaskConstraints constraints)"
  name: "withConstraints(TaskConstraints constraints)"
  nameWithType: "JobManagerTask.withConstraints(TaskConstraints constraints)"
  summary: "Set the constraints value."
  parameters:
  - description: "the constraints value to set"
    name: "constraints"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JobManagerTask withConstraints(TaskConstraints constraints)"
  desc: "Set the constraints value."
  returns:
    description: "the JobManagerTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withContainerSettings(com.microsoft.azure.batch.protocol.models.TaskContainerSettings)"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withContainerSettings(TaskContainerSettings containerSettings)"
  name: "withContainerSettings(TaskContainerSettings containerSettings)"
  nameWithType: "JobManagerTask.withContainerSettings(TaskContainerSettings containerSettings)"
  summary: "Set if the Pool that will run this Task has container<wbr>Configuration set, this must be set as well."
  parameters:
  - description: "the containerSettings value to set"
    name: "containerSettings"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskContainerSettings?alt=com.microsoft.azure.batch.protocol.models.TaskContainerSettings&text=TaskContainerSettings\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JobManagerTask withContainerSettings(TaskContainerSettings containerSettings)"
  desc: "Set if the Pool that will run this Task has containerConfiguration set, this must be set as well. If the Pool that will run this Task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ\\_BATCH\\_NODE\\_ROOT\\_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ\\_BATCH\\_NODE\\_ROOT\\_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files."
  returns:
    description: "the JobManagerTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withDisplayName(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withDisplayName(String displayName)"
  name: "withDisplayName(String displayName)"
  nameWithType: "JobManagerTask.withDisplayName(String displayName)"
  summary: "Set it need not be unique and can contain any Unicode characters up to a maximum length of 1024."
  parameters:
  - description: "the displayName value to set"
    name: "displayName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JobManagerTask withDisplayName(String displayName)"
  desc: "Set it need not be unique and can contain any Unicode characters up to a maximum length of 1024."
  returns:
    description: "the JobManagerTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withEnvironmentSettings(java.util.List<com.microsoft.azure.batch.protocol.models.EnvironmentSetting>)"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)"
  name: "withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)"
  nameWithType: "JobManagerTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)"
  summary: "Set the environment<wbr>Settings value."
  parameters:
  - description: "the environmentSettings value to set"
    name: "environmentSettings"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.EnvironmentSetting?alt=com.microsoft.azure.batch.protocol.models.EnvironmentSetting&text=EnvironmentSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public JobManagerTask withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)"
  desc: "Set the environmentSettings value."
  returns:
    description: "the JobManagerTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withId(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withId(String id)"
  name: "withId(String id)"
  nameWithType: "JobManagerTask.withId(String id)"
  summary: "Set the ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters."
  parameters:
  - description: "the id value to set"
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JobManagerTask withId(String id)"
  desc: "Set the ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters."
  returns:
    description: "the JobManagerTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withKillJobOnCompletion(java.lang.Boolean)"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withKillJobOnCompletion(Boolean killJobOnCompletion)"
  name: "withKillJobOnCompletion(Boolean killJobOnCompletion)"
  nameWithType: "JobManagerTask.withKillJobOnCompletion(Boolean killJobOnCompletion)"
  summary: "Set if true, when the Job Manager Task completes, the Batch service marks the Job as complete."
  parameters:
  - description: "the killJobOnCompletion value to set"
    name: "killJobOnCompletion"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JobManagerTask withKillJobOnCompletion(Boolean killJobOnCompletion)"
  desc: "Set if true, when the Job Manager Task completes, the Batch service marks the Job as complete. If any Tasks are still running at this time (other than Job Release), those Tasks are terminated. If false, the completion of the Job Manager Task does not affect the Job status. In this case, you should either use the onAllTasksComplete attribute to terminate the Job, or have a client or user terminate the Job explicitly. An example of this is if the Job Manager creates a set of Tasks but then takes no further role in their execution. The default value is true. If you are using the onAllTasksComplete and onTaskFailure attributes to control Job lifetime, and using the Job Manager Task only to create the Tasks for the Job (not to monitor progress), then it is important to set killJobOnCompletion to false."
  returns:
    description: "the JobManagerTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withOutputFiles(java.util.List<com.microsoft.azure.batch.protocol.models.OutputFile>)"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withOutputFiles(List<OutputFile> outputFiles)"
  name: "withOutputFiles(List<OutputFile> outputFiles)"
  nameWithType: "JobManagerTask.withOutputFiles(List<OutputFile> outputFiles)"
  summary: "Set for multi-instance Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed."
  parameters:
  - description: "the outputFiles value to set"
    name: "outputFiles"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.OutputFile?alt=com.microsoft.azure.batch.protocol.models.OutputFile&text=OutputFile\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public JobManagerTask withOutputFiles(List<OutputFile> outputFiles)"
  desc: "Set for multi-instance Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed."
  returns:
    description: "the JobManagerTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withRequiredSlots(java.lang.Integer)"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withRequiredSlots(Integer requiredSlots)"
  name: "withRequiredSlots(Integer requiredSlots)"
  nameWithType: "JobManagerTask.withRequiredSlots(Integer requiredSlots)"
  summary: "Set the default is 1."
  parameters:
  - description: "the requiredSlots value to set"
    name: "requiredSlots"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JobManagerTask withRequiredSlots(Integer requiredSlots)"
  desc: "Set the default is 1. A Task can only be scheduled to run on a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this must be 1."
  returns:
    description: "the JobManagerTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withResourceFiles(java.util.List<com.microsoft.azure.batch.protocol.models.ResourceFile>)"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withResourceFiles(List<ResourceFile> resourceFiles)"
  name: "withResourceFiles(List<ResourceFile> resourceFiles)"
  nameWithType: "JobManagerTask.withResourceFiles(List<ResourceFile> resourceFiles)"
  summary: "Set files listed under this element are located in the Task's working directory."
  parameters:
  - description: "the resourceFiles value to set"
    name: "resourceFiles"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ResourceFile?alt=com.microsoft.azure.batch.protocol.models.ResourceFile&text=ResourceFile\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public JobManagerTask withResourceFiles(List<ResourceFile> resourceFiles)"
  desc: "Set files listed under this element are located in the Task's working directory. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers."
  returns:
    description: "the JobManagerTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withRunExclusive(java.lang.Boolean)"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withRunExclusive(Boolean runExclusive)"
  name: "withRunExclusive(Boolean runExclusive)"
  nameWithType: "JobManagerTask.withRunExclusive(Boolean runExclusive)"
  summary: "Set if true, no other Tasks will run on the same Node for as long as the Job Manager is running."
  parameters:
  - description: "the runExclusive value to set"
    name: "runExclusive"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JobManagerTask withRunExclusive(Boolean runExclusive)"
  desc: "Set if true, no other Tasks will run on the same Node for as long as the Job Manager is running. If false, other Tasks can run simultaneously with the Job Manager on a Compute Node. The Job Manager Task counts normally against the Compute Node's concurrent Task limit, so this is only relevant if the Compute Node allows multiple concurrent Tasks. The default value is true."
  returns:
    description: "the JobManagerTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withUserIdentity(com.microsoft.azure.batch.protocol.models.UserIdentity)"
  fullName: "com.microsoft.azure.batch.protocol.models.JobManagerTask.withUserIdentity(UserIdentity userIdentity)"
  name: "withUserIdentity(UserIdentity userIdentity)"
  nameWithType: "JobManagerTask.withUserIdentity(UserIdentity userIdentity)"
  summary: "Set if omitted, the Task runs as a non-administrative user unique to the Task."
  parameters:
  - description: "the userIdentity value to set"
    name: "userIdentity"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.UserIdentity?alt=com.microsoft.azure.batch.protocol.models.UserIdentity&text=UserIdentity\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JobManagerTask withUserIdentity(UserIdentity userIdentity)"
  desc: "Set if omitted, the Task runs as a non-administrative user unique to the Task."
  returns:
    description: "the JobManagerTask object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Specifies details of a Job Manager Task. The Job Manager Task is automatically started when the Job is created. The Batch service tries to schedule the Job Manager Task before any other Tasks in the Job. When shrinking a Pool, the Batch service tries to preserve Nodes where Job Manager Tasks are running for as long as possible (that is, Compute Nodes running 'normal' Tasks are removed before Compute Nodes running Job Manager Tasks). When a Job Manager Task fails and needs to be restarted, the system tries to schedule it at the highest priority. If there are no idle Compute Nodes available, the system may terminate one of the running Tasks in the Pool and return it to the queue in order to make room for the Job Manager Task to restart. Note that a Job Manager Task in one Job does not have priority over Tasks in other Jobs. Across Jobs, only Job level priorities are observed. For example, if a Job Manager in a priority 0 Job needs to be restarted, it will not displace Tasks of a priority 1 Job. Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing."
metadata: {}
package: "com.microsoft.azure.batch.protocol.models"
artifact: com.microsoft.azure:azure-batch:9.0.0
