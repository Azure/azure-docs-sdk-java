### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- com.microsoft.azure.batch.protocol.models.JobManagerTask.allowLowPriorityNode()
- com.microsoft.azure.batch.protocol.models.JobManagerTask.applicationPackageReferences()
- com.microsoft.azure.batch.protocol.models.JobManagerTask.authenticationTokenSettings()
- com.microsoft.azure.batch.protocol.models.JobManagerTask.commandLine()
- com.microsoft.azure.batch.protocol.models.JobManagerTask.constraints()
- com.microsoft.azure.batch.protocol.models.JobManagerTask.containerSettings()
- com.microsoft.azure.batch.protocol.models.JobManagerTask.displayName()
- com.microsoft.azure.batch.protocol.models.JobManagerTask.environmentSettings()
- com.microsoft.azure.batch.protocol.models.JobManagerTask.id()
- com.microsoft.azure.batch.protocol.models.JobManagerTask.killJobOnCompletion()
- com.microsoft.azure.batch.protocol.models.JobManagerTask.outputFiles()
- com.microsoft.azure.batch.protocol.models.JobManagerTask.resourceFiles()
- com.microsoft.azure.batch.protocol.models.JobManagerTask.runExclusive()
- com.microsoft.azure.batch.protocol.models.JobManagerTask.userIdentity()
- com.microsoft.azure.batch.protocol.models.JobManagerTask.withAllowLowPriorityNode(Boolean)
- com.microsoft.azure.batch.protocol.models.JobManagerTask.withApplicationPackageReferences(List<ApplicationPackageReference>)
- com.microsoft.azure.batch.protocol.models.JobManagerTask.withAuthenticationTokenSettings(AuthenticationTokenSettings)
- com.microsoft.azure.batch.protocol.models.JobManagerTask.withCommandLine(String)
- com.microsoft.azure.batch.protocol.models.JobManagerTask.withConstraints(TaskConstraints)
- com.microsoft.azure.batch.protocol.models.JobManagerTask.withContainerSettings(TaskContainerSettings)
- com.microsoft.azure.batch.protocol.models.JobManagerTask.withDisplayName(String)
- com.microsoft.azure.batch.protocol.models.JobManagerTask.withEnvironmentSettings(List<EnvironmentSetting>)
- com.microsoft.azure.batch.protocol.models.JobManagerTask.withId(String)
- com.microsoft.azure.batch.protocol.models.JobManagerTask.withKillJobOnCompletion(Boolean)
- com.microsoft.azure.batch.protocol.models.JobManagerTask.withOutputFiles(List<OutputFile>)
- com.microsoft.azure.batch.protocol.models.JobManagerTask.withResourceFiles(List<ResourceFile>)
- com.microsoft.azure.batch.protocol.models.JobManagerTask.withRunExclusive(Boolean)
- com.microsoft.azure.batch.protocol.models.JobManagerTask.withUserIdentity(UserIdentity)
nameWithType: JobManagerTask
syntax: public class JobManagerTask
type: class
uid: com.microsoft.azure.batch.protocol.models.JobManagerTask
fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask
name: JobManagerTask
package: com.microsoft.azure.batch.protocol.models
summary: <p>Specifies details of a Job Manager task. The Job Manager task is automatically started when the job is created. The Batch service tries to schedule the Job Manager task before any other tasks in the job. When shrinking a pool, the Batch service tries to preserve compute nodes where Job Manager tasks are running for as long as possible (that is, nodes running 'normal' tasks are removed before nodes running Job Manager tasks). When a Job Manager task fails and needs to be restarted, the system tries to schedule it at the highest priority. If there are no idle nodes available, the system may terminate one of the running tasks in the pool and return it to the queue in order to make room for the Job Manager task to restart. Note that a Job Manager task in one job does not have priority over tasks in other jobs. Across jobs, only job level priorities are observed. For example, if a Job Manager in a priority 0 job needs to be restarted, it will not displace tasks of a priority 1 job. Batch will retry tasks when a recovery operation is triggered on a compute node. Examples of recovery operations include (but are not limited to) when an unhealthy compute node is rebooted or a compute node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all tasks should be idempotent. This means tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running tasks is to use some form of checkpointing. </p>
metadata: {}
