### YamlMime:JavaType
uid: "com.microsoft.azure.batch.protocol.models.Schedule"
fullName: "com.microsoft.azure.batch.protocol.models.Schedule"
name: "Schedule"
nameWithType: "Schedule"
summary: "The schedule according to which Jobs will be created."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class Schedule"
constructors:
- uid: "com.microsoft.azure.batch.protocol.models.Schedule.Schedule()"
  fullName: "com.microsoft.azure.batch.protocol.models.Schedule.Schedule()"
  name: "Schedule()"
  nameWithType: "Schedule.Schedule()"
  syntax: "public Schedule()"
methods:
- uid: "com.microsoft.azure.batch.protocol.models.Schedule.doNotRunAfter()"
  fullName: "com.microsoft.azure.batch.protocol.models.Schedule.doNotRunAfter()"
  name: "doNotRunAfter()"
  nameWithType: "Schedule.doNotRunAfter()"
  summary: "Get if you do not specify a do<wbr>Not<wbr>Run<wbr>After time, and you are creating a recurring Job Schedule, the Job Schedule will remain active until you explicitly terminate it."
  syntax: "public DateTime doNotRunAfter()"
  desc: "Get if you do not specify a doNotRunAfter time, and you are creating a recurring Job Schedule, the Job Schedule will remain active until you explicitly terminate it."
  returns:
    description: "the doNotRunAfter value"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Schedule.doNotRunUntil()"
  fullName: "com.microsoft.azure.batch.protocol.models.Schedule.doNotRunUntil()"
  name: "doNotRunUntil()"
  nameWithType: "Schedule.doNotRunUntil()"
  summary: "Get if you do not specify a do<wbr>Not<wbr>Run<wbr>Until time, the schedule becomes ready to create Jobs immediately."
  syntax: "public DateTime doNotRunUntil()"
  desc: "Get if you do not specify a doNotRunUntil time, the schedule becomes ready to create Jobs immediately."
  returns:
    description: "the doNotRunUntil value"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Schedule.recurrenceInterval()"
  fullName: "com.microsoft.azure.batch.protocol.models.Schedule.recurrenceInterval()"
  name: "recurrenceInterval()"
  nameWithType: "Schedule.recurrenceInterval()"
  summary: "Get because a Job Schedule can have at most one active Job under it at any given time, if it is time to create a new Job under a Job Schedule, but the previous Job is still running, the Batch service will not create the new Job until the previous Job finishes."
  syntax: "public Period recurrenceInterval()"
  desc: "Get because a Job Schedule can have at most one active Job under it at any given time, if it is time to create a new Job under a Job Schedule, but the previous Job is still running, the Batch service will not create the new Job until the previous Job finishes. If the previous Job does not finish within the startWindow period of the new recurrenceInterval, then no new Job will be scheduled for that interval. For recurring Jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when Jobs are created, add Tasks to the Jobs and terminate the Jobs ready for the next recurrence. The default is that the schedule does not recur: one Job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that Job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request)."
  returns:
    description: "the recurrenceInterval value"
    type: "<xref href=\"org.joda.time.Period?alt=org.joda.time.Period&text=Period\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Schedule.startWindow()"
  fullName: "com.microsoft.azure.batch.protocol.models.Schedule.startWindow()"
  name: "startWindow()"
  nameWithType: "Schedule.startWindow()"
  summary: "Get if a Job is not created within the start<wbr>Window interval, then the 'opportunity' is lost; no Job will be created until the next recurrence of the schedule."
  syntax: "public Period startWindow()"
  desc: "Get if a Job is not created within the startWindow interval, then the 'opportunity' is lost; no Job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the Job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request)."
  returns:
    description: "the startWindow value"
    type: "<xref href=\"org.joda.time.Period?alt=org.joda.time.Period&text=Period\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Schedule.withDoNotRunAfter(org.joda.time.DateTime)"
  fullName: "com.microsoft.azure.batch.protocol.models.Schedule.withDoNotRunAfter(DateTime doNotRunAfter)"
  name: "withDoNotRunAfter(DateTime doNotRunAfter)"
  nameWithType: "Schedule.withDoNotRunAfter(DateTime doNotRunAfter)"
  summary: "Set if you do not specify a do<wbr>Not<wbr>Run<wbr>After time, and you are creating a recurring Job Schedule, the Job Schedule will remain active until you explicitly terminate it."
  parameters:
  - description: "the doNotRunAfter value to set"
    name: "doNotRunAfter"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Schedule withDoNotRunAfter(DateTime doNotRunAfter)"
  desc: "Set if you do not specify a doNotRunAfter time, and you are creating a recurring Job Schedule, the Job Schedule will remain active until you explicitly terminate it."
  returns:
    description: "the Schedule object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.Schedule?alt=com.microsoft.azure.batch.protocol.models.Schedule&text=Schedule\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Schedule.withDoNotRunUntil(org.joda.time.DateTime)"
  fullName: "com.microsoft.azure.batch.protocol.models.Schedule.withDoNotRunUntil(DateTime doNotRunUntil)"
  name: "withDoNotRunUntil(DateTime doNotRunUntil)"
  nameWithType: "Schedule.withDoNotRunUntil(DateTime doNotRunUntil)"
  summary: "Set if you do not specify a do<wbr>Not<wbr>Run<wbr>Until time, the schedule becomes ready to create Jobs immediately."
  parameters:
  - description: "the doNotRunUntil value to set"
    name: "doNotRunUntil"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Schedule withDoNotRunUntil(DateTime doNotRunUntil)"
  desc: "Set if you do not specify a doNotRunUntil time, the schedule becomes ready to create Jobs immediately."
  returns:
    description: "the Schedule object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.Schedule?alt=com.microsoft.azure.batch.protocol.models.Schedule&text=Schedule\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Schedule.withRecurrenceInterval(org.joda.time.Period)"
  fullName: "com.microsoft.azure.batch.protocol.models.Schedule.withRecurrenceInterval(Period recurrenceInterval)"
  name: "withRecurrenceInterval(Period recurrenceInterval)"
  nameWithType: "Schedule.withRecurrenceInterval(Period recurrenceInterval)"
  summary: "Set because a Job Schedule can have at most one active Job under it at any given time, if it is time to create a new Job under a Job Schedule, but the previous Job is still running, the Batch service will not create the new Job until the previous Job finishes."
  parameters:
  - description: "the recurrenceInterval value to set"
    name: "recurrenceInterval"
    type: "<xref href=\"org.joda.time.Period?alt=org.joda.time.Period&text=Period\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Schedule withRecurrenceInterval(Period recurrenceInterval)"
  desc: "Set because a Job Schedule can have at most one active Job under it at any given time, if it is time to create a new Job under a Job Schedule, but the previous Job is still running, the Batch service will not create the new Job until the previous Job finishes. If the previous Job does not finish within the startWindow period of the new recurrenceInterval, then no new Job will be scheduled for that interval. For recurring Jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when Jobs are created, add Tasks to the Jobs and terminate the Jobs ready for the next recurrence. The default is that the schedule does not recur: one Job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that Job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request)."
  returns:
    description: "the Schedule object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.Schedule?alt=com.microsoft.azure.batch.protocol.models.Schedule&text=Schedule\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Schedule.withStartWindow(org.joda.time.Period)"
  fullName: "com.microsoft.azure.batch.protocol.models.Schedule.withStartWindow(Period startWindow)"
  name: "withStartWindow(Period startWindow)"
  nameWithType: "Schedule.withStartWindow(Period startWindow)"
  summary: "Set if a Job is not created within the start<wbr>Window interval, then the 'opportunity' is lost; no Job will be created until the next recurrence of the schedule."
  parameters:
  - description: "the startWindow value to set"
    name: "startWindow"
    type: "<xref href=\"org.joda.time.Period?alt=org.joda.time.Period&text=Period\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Schedule withStartWindow(Period startWindow)"
  desc: "Set if a Job is not created within the startWindow interval, then the 'opportunity' is lost; no Job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the Job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request)."
  returns:
    description: "the Schedule object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.Schedule?alt=com.microsoft.azure.batch.protocol.models.Schedule&text=Schedule\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "The schedule according to which Jobs will be created."
metadata: {}
package: "com.microsoft.azure.batch.protocol.models"
artifact: com.microsoft.azure:azure-batch:9.0.0
