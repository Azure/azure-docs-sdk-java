### YamlMime:JavaType
uid: "com.azure.cosmos.CosmosDiagnosticsHandler"
fullName: "com.azure.cosmos.CosmosDiagnosticsHandler"
name: "CosmosDiagnosticsHandler"
nameWithType: "CosmosDiagnosticsHandler"
summary: "And interface that can be implemented to add custom diagnostic processors"
syntax: "public interface **CosmosDiagnosticsHandler**"
fields:
- uid: "com.azure.cosmos.CosmosDiagnosticsHandler.DEFAULT_LOGGING_HANDLER"
  fullName: "com.azure.cosmos.CosmosDiagnosticsHandler.DEFAULT_LOGGING_HANDLER"
  name: "DEFAULT_LOGGING_HANDLER"
  nameWithType: "CosmosDiagnosticsHandler.DEFAULT_LOGGING_HANDLER"
  summary: "A Cosmos diagnostics handler which will log operations to log4j - Failures (contains diagnostics string) --> Error - Threshold violations (contains diagnostics string) --> Info - Successful operations --> Debug If Trace level is enabled also, the diagnostics string will be logged for successful operations."
  modifiers:
  - "static"
  - "final"
  field:
    type: "<xref href=\"com.azure.cosmos.CosmosDiagnosticsHandler?alt=com.azure.cosmos.CosmosDiagnosticsHandler&text=CosmosDiagnosticsHandler\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final CosmosDiagnosticsHandler DEFAULT_LOGGING_HANDLER"
  desc: "A Cosmos diagnostics handler which will log operations to log4j - Failures (contains diagnostics string) --> Error - Threshold violations (contains diagnostics string) --> Info - Successful operations --> Debug If Trace level is enabled also, the diagnostics string will be logged for successful operations."
methods:
- uid: "com.azure.cosmos.CosmosDiagnosticsHandler.handleDiagnostics(com.azure.cosmos.CosmosDiagnosticsContext,com.azure.core.util.Context)"
  fullName: "com.azure.cosmos.CosmosDiagnosticsHandler.handleDiagnostics(CosmosDiagnosticsContext diagnosticsContext, Context traceContext)"
  name: "handleDiagnostics(CosmosDiagnosticsContext diagnosticsContext, Context traceContext)"
  nameWithType: "CosmosDiagnosticsHandler.handleDiagnostics(CosmosDiagnosticsContext diagnosticsContext, Context traceContext)"
  summary: "This method will be invoked when an operation completed (successfully or failed) to allow diagnostic handlers to emit the diagnostics NOTE: Any code in handle<wbr>Diagnostics should not execute any I/O operations, do thread switches or execute CPU intense work - if needed a diagnostics handler should queue this work asynchronously."
  modifiers:
  - "abstract"
  parameters:
  - description: "the Cosmos DB diagnostic context with metadata for the operation"
    name: "diagnosticsContext"
    type: "<xref href=\"com.azure.cosmos.CosmosDiagnosticsContext?alt=com.azure.cosmos.CosmosDiagnosticsContext&text=CosmosDiagnosticsContext\" data-throw-if-not-resolved=\"False\" />"
  - description: "the Azure trace context"
    name: "traceContext"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void handleDiagnostics(CosmosDiagnosticsContext diagnosticsContext, Context traceContext)"
  desc: "This method will be invoked when an operation completed (successfully or failed) to allow diagnostic handlers to emit the diagnostics NOTE: Any code in handleDiagnostics should not execute any I/O operations, do thread switches or execute CPU intense work - if needed a diagnostics handler should queue this work asynchronously. The method handleDiagnostics will be invoked on the hot path - so, any inefficient diagnostics handler will increase end-to-end latency perceived by the application"
type: "interface"
desc: "And interface that can be implemented to add custom diagnostic processors"
metadata: {}
package: "com.azure.cosmos"
artifact: com.azure:azure-cosmos:4.44.0
