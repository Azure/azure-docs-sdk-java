### YamlMime:JavaType
methods:
- fullName: microsoft.servicefabric.data.StateProviderReplica.abort()
  name: abort()
  nameWithType: StateProviderReplica.abort()
  summary: >-
    <p>Forcefully abort the state provider replica. </p>

    <p>

      <b>Remarks:</b>This generally occurs when a permanent fault is detected on the node, or when Service Fabric cannot reliably manage the replica's lifecycle due to internal failures. </p>
  syntax: public void abort()
  uid: microsoft.servicefabric.data.StateProviderReplica.abort()
- fullName: microsoft.servicefabric.data.StateProviderReplica.backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  name: backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  nameWithType: StateProviderReplica.backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  parameters:
  - description: <p>The type of backup to perform. </p>
    name: option
    type: <xref href="microsoft.servicefabric.data.BackupOption?alt=microsoft.servicefabric.data.BackupOption&text=BackupOption" data-throw-if-not-resolved="False"/>
  - description: <p>The timeout for this operation. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: <p>The token to monitor for cancellation requests. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  - description: <p>Callback to be called when the backup folder has been created locally and is ready to be moved out of the node </p>
    name: backupCallback
    type: BiFunction&lt;<xref href="microsoft.servicefabric.data.BackupInfo?alt=microsoft.servicefabric.data.BackupInfo&text=BackupInfo" data-throw-if-not-resolved="False"/>, <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>, CompletableFuture&lt;Boolean&gt;&gt;
  returns:
    description: <p>Task that represents the asynchronous backup operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Performs a full backup of all reliable state managed by this ReliableStateManager.</p>

    <p>

      <b>Remarks:</b> A FULL backup will be performed with a one-hour timeout. Boolean returned by the backupCallback indicate whether the service was able to successfully move the backup folder to an external location. If false is returned, BackupAsync throws UnsupportedOperationException with the relevant message indicating backupCallback returned false. Also, backup will be marked as unsuccessful. </p>
  syntax: public CompletableFuture<?> backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  uid: microsoft.servicefabric.data.StateProviderReplica.backupAsync(BackupOption,Duration,CancellationToken,BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
- fullName: microsoft.servicefabric.data.StateProviderReplica.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  name: backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  nameWithType: StateProviderReplica.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  parameters:
  - description: <p>Callback to be called when the backup folder has been created locally and is ready to be moved out of the node </p>
    name: backupCallback
    type: BiFunction&lt;<xref href="microsoft.servicefabric.data.BackupInfo?alt=microsoft.servicefabric.data.BackupInfo&text=BackupInfo" data-throw-if-not-resolved="False"/>, <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>, CompletableFuture&lt;Boolean&gt;&gt;
  returns:
    description: <p>Task that represents the asynchronous backup operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Performs a full backup of all reliable state managed by this ReliableStateManager.</p>

    <p>

      <b>Remarks:</b> A FULL backup will be performed with a one-hour timeout. Boolean returned by the backupCallback indicate whether the service was able to successfully move the backup folder to an external location. If false is returned, BackupAsync throws UnsupportedOperationException with the relevant message indicating backupCallback returned false. Also, backup will be marked as unsuccessful. </p>
  syntax: public CompletableFuture<?> backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  uid: microsoft.servicefabric.data.StateProviderReplica.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
- fullName: microsoft.servicefabric.data.StateProviderReplica.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  name: changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  nameWithType: StateProviderReplica.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  parameters:
  - description: <p>The new replica role, such as primary or secondary. </p>
    name: newRole
    type: <xref href="system.fabric.ReplicaRole?alt=system.fabric.ReplicaRole&text=ReplicaRole" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task that represents the asynchronous change role operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Notify the state provider replica that its role is changing, for example to Primary or Secondary.</p>

    <p></p>
  syntax: public CompletableFuture<?> changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.data.StateProviderReplica.changeRoleAsync(ReplicaRole,CancellationToken)
- fullName: microsoft.servicefabric.data.StateProviderReplica.closeAsync(CancellationToken cancellationToken)
  name: closeAsync(CancellationToken cancellationToken)
  nameWithType: StateProviderReplica.closeAsync(CancellationToken cancellationToken)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task that represents the asynchronous close operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gracefully close the state provider replica.</p>

    <p>

      <b>Remarks:</b>This generally occurs when the replica's code is being upgrade, the replica is being moved due to load balancing, or a transient fault is detected. </p>
  syntax: public CompletableFuture<?> closeAsync(CancellationToken cancellationToken)
  uid: microsoft.servicefabric.data.StateProviderReplica.closeAsync(CancellationToken)
- fullName: microsoft.servicefabric.data.StateProviderReplica.initialize(StatefulServiceInitializationParameters initializationParameters)
  name: initialize(StatefulServiceInitializationParameters initializationParameters)
  nameWithType: StateProviderReplica.initialize(StatefulServiceInitializationParameters initializationParameters)
  parameters:
  - description: <p>Service initialization information such as service name, partition id, replica id, and code package information. </p>
    name: initializationParameters
    type: <xref href="system.fabric.StatefulServiceInitializationParameters?alt=system.fabric.StatefulServiceInitializationParameters&text=StatefulServiceInitializationParameters" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initialize the state provider replica using the service initialization information.</p>

    <p>

      <b>Remarks:</b>No complex processing should be done during Initialize. Expensive or long-running initialization should be done in OpenAsync. </p>
  syntax: public void initialize(StatefulServiceInitializationParameters initializationParameters)
  uid: microsoft.servicefabric.data.StateProviderReplica.initialize(StatefulServiceInitializationParameters)
- fullName: microsoft.servicefabric.data.StateProviderReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)
  name: openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)
  nameWithType: StateProviderReplica.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)
  parameters:
  - description: <p>Indicates whether this is a new or existing replica. </p>
    name: openMode
    type: <xref href="system.fabric.ReplicaOpenMode?alt=system.fabric.ReplicaOpenMode&text=ReplicaOpenMode" data-throw-if-not-resolved="False"/>
  - description: <p>The partition this replica belongs to. </p>
    name: partition
    type: <xref href="system.fabric.StatefulServicePartition?alt=system.fabric.StatefulServicePartition&text=StatefulServicePartition" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task that represents the asynchronous open operation. The result contains the replicator responsible for replicating state between other state provider replicas in the partition. </p>
    type: CompletableFuture&lt;<xref href="system.fabric.Replicator?alt=system.fabric.Replicator&text=Replicator" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Open the state provider replica for use.</p>

    <p>

      <b>Remarks:</b>Extended state provider initialization tasks can be started at this time. </p>
  syntax: public CompletableFuture<Replicator> openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.data.StateProviderReplica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)
- fullName: microsoft.servicefabric.data.StateProviderReplica.restoreAsync(String backupFolderPath)
  name: restoreAsync(String backupFolderPath)
  nameWithType: StateProviderReplica.restoreAsync(String backupFolderPath)
  parameters:
  - description: <p>The directory where the replica is to be restored from. This parameter cannot be null, empty or contain just whitespace. UNC paths may also be provided. </p>
    name: backupFolderPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task that represents the asynchronous restore operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Restore a backup taken.</p>

    <p>

      <b>Remarks:</b>A safe restore will be performed, meaning the restore will only be completed if the data to restore is ahead of state of the current replica. </p>
  syntax: public CompletableFuture<?> restoreAsync(String backupFolderPath)
  uid: microsoft.servicefabric.data.StateProviderReplica.restoreAsync(String)
- fullName: microsoft.servicefabric.data.StateProviderReplica.restoreAsync(String backupFolderPath, RestorePolicy restorePolicy, Duration timeout, CancellationToken cancellationToken)
  name: restoreAsync(String backupFolderPath, RestorePolicy restorePolicy, Duration timeout, CancellationToken cancellationToken)
  nameWithType: StateProviderReplica.restoreAsync(String backupFolderPath, RestorePolicy restorePolicy, Duration timeout, CancellationToken cancellationToken)
  parameters:
  - description: <p>The directory where the replica is to be restored from. This parameter cannot be null, empty or contain just whitespace. UNC paths may also be provided. </p>
    name: backupFolderPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The restore policy. </p>
    name: restorePolicy
    type: <xref href="microsoft.servicefabric.data.RestorePolicy?alt=microsoft.servicefabric.data.RestorePolicy&text=RestorePolicy" data-throw-if-not-resolved="False"/>
  - description: <p>The timeout for this operation. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: <p>The token to monitor for cancellation requests. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task that represents the asynchronous restore operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Restore a backup taken</p>

    <p></p>
  syntax: public CompletableFuture<?> restoreAsync(String backupFolderPath, RestorePolicy restorePolicy, Duration timeout, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.data.StateProviderReplica.restoreAsync(String,RestorePolicy,Duration,CancellationToken)
- fullName: microsoft.servicefabric.data.StateProviderReplica.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)
  name: setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)
  nameWithType: StateProviderReplica.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)
  parameters:
  - description: <p>TODO. Function called as part of suspected data loss processing. Function takes in CancellationToken and returns a CompletableFuture that represents the asynchronous processing of the event. Returning true, indicates that the replica's state has been restored. False indicates that the replica's state has not been changed. </p>
    name: onDataLossAsync
    type: Function&lt;<xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>, CompletableFuture&lt;Boolean&gt;&gt;
  summary: >-
    <p>Function called during suspected data-loss</p>

    <p></p>
  syntax: public void setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)
  uid: microsoft.servicefabric.data.StateProviderReplica.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>>)
nameWithType: StateProviderReplica
syntax: public interface StateProviderReplica
type: interface
uid: microsoft.servicefabric.data.StateProviderReplica
fullName: microsoft.servicefabric.data.StateProviderReplica
name: StateProviderReplica
package: microsoft.servicefabric.data
summary: <p>Defines methods a reliable state provider replica must implement for Service Fabric to interact with it. </p>
metadata: {}
