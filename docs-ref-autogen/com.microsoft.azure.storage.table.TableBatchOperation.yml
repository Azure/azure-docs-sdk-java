### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="java.util.ArrayList&lt;TableOperation&gt;" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.storage.table.TableBatchOperation.add(final int index, final TableOperation element)
  name: add(final int index, final TableOperation element)
  nameWithType: TableBatchOperation.add(final int index, final TableOperation element)
  parameters:
  - description: <p>An <code>int</code> which represents the index in the batch operation <code>ArrayList</code> to add the table operation at. </p>
    name: index
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="com.microsoft.azure.storage.table.TableOperation" data-throw-if-not-resolved="false" data-raw-source="TableOperation"></xref> to add to the batch operation. </p>
    name: element
    type: final <xref href="com.microsoft.azure.storage.table.TableOperation?alt=com.microsoft.azure.storage.table.TableOperation&text=TableOperation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds the table operation at the specified index in the batch operation .</p>

    <p></p>
  syntax: public void add(final int index, final TableOperation element)
  uid: com.microsoft.azure.storage.table.TableBatchOperation.add(final int,final TableOperation)
- fullName: com.microsoft.azure.storage.table.TableBatchOperation.add(final TableOperation element)
  name: add(final TableOperation element)
  nameWithType: TableBatchOperation.add(final TableOperation element)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.storage.table.TableOperation" data-throw-if-not-resolved="false" data-raw-source="TableOperation"></xref> to add to the batch operation. </p>
    name: element
    type: final <xref href="com.microsoft.azure.storage.table.TableOperation?alt=com.microsoft.azure.storage.table.TableOperation&text=TableOperation" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <code>true</code> if the operation was added successfully. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds the table operation to the batch operation .</p>

    <p></p>
  syntax: public boolean add(final TableOperation element)
  uid: com.microsoft.azure.storage.table.TableBatchOperation.add(final TableOperation)
- fullName: com.microsoft.azure.storage.table.TableBatchOperation.addAll(final int index, final java.util.Collection<? extends TableOperation> c)
  name: addAll(final int index, final java.util.Collection<? extends TableOperation> c)
  nameWithType: TableBatchOperation.addAll(final int index, final java.util.Collection<? extends TableOperation> c)
  parameters:
  - description: <p>An <code>int</code> which represents the index in the batch operation <code>ArrayList</code> to add the table operation at. </p>
    name: index
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>java.util.Collection</code> of <xref uid="com.microsoft.azure.storage.table.TableOperation" data-throw-if-not-resolved="false" data-raw-source="TableOperation"></xref> objects to add to the batch operation. </p>
    name: c
    type: final java.util.Collection&lt;? extends <xref href="com.microsoft.azure.storage.table.TableOperation?alt=com.microsoft.azure.storage.table.TableOperation&text=TableOperation" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: >-
      <p>

        <code>true</code> if the operations were added successfully. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds the collection of table operations to the batch operation  starting at the specified index.</p>

    <p></p>
  syntax: public boolean addAll(final int index, final java.util.Collection<? extends TableOperation> c)
  uid: com.microsoft.azure.storage.table.TableBatchOperation.addAll(final int,final java.util.Collection<? extends TableOperation>)
- fullName: com.microsoft.azure.storage.table.TableBatchOperation.addAll(final java.util.Collection<? extends TableOperation> c)
  name: addAll(final java.util.Collection<? extends TableOperation> c)
  nameWithType: TableBatchOperation.addAll(final java.util.Collection<? extends TableOperation> c)
  parameters:
  - description: <p>A <code>java.util.Collection</code> of <xref uid="com.microsoft.azure.storage.table.TableOperation" data-throw-if-not-resolved="false" data-raw-source="TableOperation"></xref> objects to add to the batch operation. </p>
    name: c
    type: final java.util.Collection&lt;? extends <xref href="com.microsoft.azure.storage.table.TableOperation?alt=com.microsoft.azure.storage.table.TableOperation&text=TableOperation" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: >-
      <p>

        <code>true</code> if the operations were added successfully. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds the collection of table operations to the batch operation .</p>

    <p></p>
  syntax: public boolean addAll(final java.util.Collection<? extends TableOperation> c)
  uid: com.microsoft.azure.storage.table.TableBatchOperation.addAll(final java.util.Collection<? extends TableOperation>)
- fullName: com.microsoft.azure.storage.table.TableBatchOperation.clear()
  name: clear()
  nameWithType: TableBatchOperation.clear()
  summary: <p>Clears all table operations from the batch operation. </p>
  syntax: public void clear()
  uid: com.microsoft.azure.storage.table.TableBatchOperation.clear()
- fullName: com.microsoft.azure.storage.table.TableBatchOperation.delete(final TableEntity entity)
  name: delete(final TableEntity entity)
  nameWithType: TableBatchOperation.delete(final TableEntity entity)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> to delete. </p>
    name: entity
    type: final <xref href="com.microsoft.azure.storage.table.TableEntity?alt=com.microsoft.azure.storage.table.TableEntity&text=TableEntity" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a table operation to delete the specified entity to the batch operation.</p>

    <p></p>
  syntax: public void delete(final TableEntity entity)
  uid: com.microsoft.azure.storage.table.TableBatchOperation.delete(final TableEntity)
- fullName: com.microsoft.azure.storage.table.TableBatchOperation.execute(final CloudTableClient client, final String tableName, final TableRequestOptions options, final OperationContext opContext)
  name: execute(final CloudTableClient client, final String tableName, final TableRequestOptions options, final OperationContext opContext)
  nameWithType: TableBatchOperation.execute(final CloudTableClient client, final String tableName, final TableRequestOptions options, final OperationContext opContext)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.table.CloudTableClient" data-throw-if-not-resolved="false" data-raw-source="CloudTableClient"></xref> instance specifying the Table service endpoint and storage account credentials to use. </p>
    name: client
    type: final <xref href="com.microsoft.azure.storage.table.CloudTableClient?alt=com.microsoft.azure.storage.table.CloudTableClient&text=CloudTableClient" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> containing the name of the table. </p>
    name: tableName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.table.TableRequestOptions" data-throw-if-not-resolved="false" data-raw-source="TableRequestOptions"></xref> object that specifies execution options such as retry policy and timeout settings for the operation. </p>
    name: options
    type: final <xref href="com.microsoft.azure.storage.table.TableRequestOptions?alt=com.microsoft.azure.storage.table.TableRequestOptions&text=TableRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object for tracking the current operation.</p>
    name: opContext
    type: final <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>if an error occurs in the storage operation. </p>
  returns:
    description: <p>An <code>ArrayList</code> of <xref uid="com.microsoft.azure.storage.table.TableResult" data-throw-if-not-resolved="false" data-raw-source="TableResult"></xref> containing the results of executing the operation.</p>
    type: ArrayList&lt;<xref href="com.microsoft.azure.storage.table.TableResult?alt=com.microsoft.azure.storage.table.TableResult&text=TableResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Reserved for internal use. Executes this batch operation on the specified table, using the specified <xref uid="com.microsoft.azure.storage.table.TableRequestOptions" data-throw-if-not-resolved="false" data-raw-source="TableRequestOptions"></xref> and <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref>. </p>

    <p>This method will invoke the Storage Service REST API to execute this batch operation, using the Table service endpoint and storage account credentials in the <xref uid="com.microsoft.azure.storage.table.CloudTableClient" data-throw-if-not-resolved="false" data-raw-source="CloudTableClient"></xref> object.</p>

    <p></p>
  syntax: protected ArrayList<TableResult> execute(final CloudTableClient client, final String tableName, final TableRequestOptions options, final OperationContext opContext)
  uid: com.microsoft.azure.storage.table.TableBatchOperation.execute(final CloudTableClient,final String,final TableRequestOptions,final OperationContext)
- fullName: com.microsoft.azure.storage.table.TableBatchOperation.insert(final TableEntity entity)
  name: insert(final TableEntity entity)
  nameWithType: TableBatchOperation.insert(final TableEntity entity)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> to insert. </p>
    name: entity
    type: final <xref href="com.microsoft.azure.storage.table.TableEntity?alt=com.microsoft.azure.storage.table.TableEntity&text=TableEntity" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a table operation to insert the specified entity to the batch operation.</p>

    <p></p>
  syntax: public void insert(final TableEntity entity)
  uid: com.microsoft.azure.storage.table.TableBatchOperation.insert(final TableEntity)
- fullName: com.microsoft.azure.storage.table.TableBatchOperation.insert(final TableEntity entity, boolean echoContent)
  name: insert(final TableEntity entity, boolean echoContent)
  nameWithType: TableBatchOperation.insert(final TableEntity entity, boolean echoContent)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> to insert. </p>
    name: entity
    type: final <xref href="com.microsoft.azure.storage.table.TableEntity?alt=com.microsoft.azure.storage.table.TableEntity&text=TableEntity" data-throw-if-not-resolved="False"/>
  - description: <p>The boolean representing whether the message payload should be returned in the response. </p>
    name: echoContent
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a table operation to insert the specified entity to the batch operation.</p>

    <p></p>
  syntax: public void insert(final TableEntity entity, boolean echoContent)
  uid: com.microsoft.azure.storage.table.TableBatchOperation.insert(final TableEntity,boolean)
- fullName: com.microsoft.azure.storage.table.TableBatchOperation.insertOrMerge(final TableEntity entity)
  name: insertOrMerge(final TableEntity entity)
  nameWithType: TableBatchOperation.insertOrMerge(final TableEntity entity)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> to insert if not found or to merge if it exists. </p>
    name: entity
    type: final <xref href="com.microsoft.azure.storage.table.TableEntity?alt=com.microsoft.azure.storage.table.TableEntity&text=TableEntity" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a table operation to insert or merge the specified entity to the batch operation.</p>

    <p></p>
  syntax: public void insertOrMerge(final TableEntity entity)
  uid: com.microsoft.azure.storage.table.TableBatchOperation.insertOrMerge(final TableEntity)
- fullName: com.microsoft.azure.storage.table.TableBatchOperation.insertOrReplace(final TableEntity entity)
  name: insertOrReplace(final TableEntity entity)
  nameWithType: TableBatchOperation.insertOrReplace(final TableEntity entity)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> to insert if not found or to replace if it exists. </p>
    name: entity
    type: final <xref href="com.microsoft.azure.storage.table.TableEntity?alt=com.microsoft.azure.storage.table.TableEntity&text=TableEntity" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a table operation to insert or replace the specified entity to the batch operation.</p>

    <p></p>
  syntax: public void insertOrReplace(final TableEntity entity)
  uid: com.microsoft.azure.storage.table.TableBatchOperation.insertOrReplace(final TableEntity)
- fullName: com.microsoft.azure.storage.table.TableBatchOperation.merge(final TableEntity entity)
  name: merge(final TableEntity entity)
  nameWithType: TableBatchOperation.merge(final TableEntity entity)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> to merge. </p>
    name: entity
    type: final <xref href="com.microsoft.azure.storage.table.TableEntity?alt=com.microsoft.azure.storage.table.TableEntity&text=TableEntity" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a table operation to merge the specified entity to the batch operation.</p>

    <p></p>
  syntax: public void merge(final TableEntity entity)
  uid: com.microsoft.azure.storage.table.TableBatchOperation.merge(final TableEntity)
- fullName: com.microsoft.azure.storage.table.TableBatchOperation.remove(int index)
  name: remove(int index)
  nameWithType: TableBatchOperation.remove(int index)
  parameters:
  - description: <p>An <code>int</code> which represents the index in the <code>ArrayList</code> of the table operation to remove from the batch operation. </p>
    name: index
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.storage.table.TableOperation?alt=com.microsoft.azure.storage.table.TableOperation&text=TableOperation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes the table operation at the specified index from the batch operation.</p>

    <p></p>
  syntax: public TableOperation remove(int index)
  uid: com.microsoft.azure.storage.table.TableBatchOperation.remove(int)
- fullName: com.microsoft.azure.storage.table.TableBatchOperation.remove(Object o)
  name: remove(Object o)
  nameWithType: TableBatchOperation.remove(Object o)
  parameters:
  - description: <p>The <code>Object</code> to remove from the batch operation. </p>
    name: o
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <code>true</code> if the object was removed successfully. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes the specified  from the batch operation.</p>

    <p></p>
  syntax: public boolean remove(Object o)
  uid: com.microsoft.azure.storage.table.TableBatchOperation.remove(Object)
- fullName: com.microsoft.azure.storage.table.TableBatchOperation.removeAll(java.util.Collection<?> c)
  name: removeAll(java.util.Collection<?> c)
  nameWithType: TableBatchOperation.removeAll(java.util.Collection<?> c)
  parameters:
  - description: <p>The collection of elements to remove from the batch operation. </p>
    name: c
    type: <xref href="java.util.Collection%3C%3F%3E?alt=java.util.Collection%3C%3F%3E&text=java.util.Collection%3C%3F%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <code>true</code> if the objects in the collection were removed successfully. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes all elements of the specified collection from the batch operation.</p>

    <p></p>
  syntax: public boolean removeAll(java.util.Collection<?> c)
  uid: com.microsoft.azure.storage.table.TableBatchOperation.removeAll(java.util.Collection<?>)
- fullName: com.microsoft.azure.storage.table.TableBatchOperation.removeRange(int fromIndex, int toIndex)
  name: removeRange(int fromIndex, int toIndex)
  nameWithType: TableBatchOperation.removeRange(int fromIndex, int toIndex)
  parameters:
  - description: <p>An <code>int</code> which represents the inclusive lower bound of the range of <xref uid="com.microsoft.azure.storage.table.TableOperation" data-throw-if-not-resolved="false" data-raw-source="TableOperation"></xref> objects to remove from the batch operation <code>ArrayList</code>. </p>
    name: fromIndex
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>An <code>int</code> which represents the exclusive upper bound of the range of <xref uid="com.microsoft.azure.storage.table.TableOperation" data-throw-if-not-resolved="false" data-raw-source="TableOperation"></xref> objects to remove from the batch operation <code>ArrayList</code>. </p>
    name: toIndex
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reserved for internal use. Removes all the table operations at indexes in the specified range from the batch operation .</p>

    <p></p>
  syntax: protected void removeRange(int fromIndex, int toIndex)
  uid: com.microsoft.azure.storage.table.TableBatchOperation.removeRange(int,int)
- fullName: com.microsoft.azure.storage.table.TableBatchOperation.replace(final TableEntity entity)
  name: replace(final TableEntity entity)
  nameWithType: TableBatchOperation.replace(final TableEntity entity)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> to replace. </p>
    name: entity
    type: final <xref href="com.microsoft.azure.storage.table.TableEntity?alt=com.microsoft.azure.storage.table.TableEntity&text=TableEntity" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a table operation to replace the specified entity to the batch operation.</p>

    <p></p>
  syntax: public void replace(final TableEntity entity)
  uid: com.microsoft.azure.storage.table.TableBatchOperation.replace(final TableEntity)
- fullName: com.microsoft.azure.storage.table.TableBatchOperation.retrieve(final String partitionKey, final String rowKey, final Class<? extends TableEntity> clazzType)
  name: retrieve(final String partitionKey, final String rowKey, final Class<? extends TableEntity> clazzType)
  nameWithType: TableBatchOperation.retrieve(final String partitionKey, final String rowKey, final Class<? extends TableEntity> clazzType)
  parameters:
  - description: <p>A <code>String</code> containing the PartitionKey of the entity to retrieve. </p>
    name: partitionKey
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> containing the RowKey of the entity to retrieve. </p>
    name: rowKey
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The class of the <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> type for the entity to retrieve. </p>
    name: clazzType
    type: final Class&lt;? extends <xref href="com.microsoft.azure.storage.table.TableEntity?alt=com.microsoft.azure.storage.table.TableEntity&text=TableEntity" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Adds a table operation to retrieve an entity of the specified class type with the specified PartitionKey and RowKey to the batch operation.</p>

    <p></p>
  syntax: public void retrieve(final String partitionKey, final String rowKey, final Class<? extends TableEntity> clazzType)
  uid: com.microsoft.azure.storage.table.TableBatchOperation.retrieve(final String,final String,final Class<? extends TableEntity>)
- fullName: com.microsoft.azure.storage.table.TableBatchOperation.retrieve(final String partitionKey, final String rowKey, final EntityResolver<?> resolver)
  name: retrieve(final String partitionKey, final String rowKey, final EntityResolver<?> resolver)
  nameWithType: TableBatchOperation.retrieve(final String partitionKey, final String rowKey, final EntityResolver<?> resolver)
  parameters:
  - description: <p>A <code>String</code> containing the PartitionKey of the entity to retrieve. </p>
    name: partitionKey
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> containing the RowKey of the entity to retrieve. </p>
    name: rowKey
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="com.microsoft.azure.storage.table.EntityResolver" data-throw-if-not-resolved="false" data-raw-source="EntityResolver"></xref> implementation to project the entity to retrieve as a particular type in the result. </p>
    name: resolver
    type: final <xref href="com.microsoft.azure.storage.table.EntityResolver?alt=com.microsoft.azure.storage.table.EntityResolver&text=EntityResolver" data-throw-if-not-resolved="False"/>&lt;?&gt;
  summary: >-
    <p>Adds a table operation to retrieve an entity of the specified class type with the specified PartitionKey and RowKey to the batch operation.</p>

    <p></p>
  syntax: public void retrieve(final String partitionKey, final String rowKey, final EntityResolver<?> resolver)
  uid: com.microsoft.azure.storage.table.TableBatchOperation.retrieve(final String,final String,final EntityResolver<?>)
nameWithType: TableBatchOperation
syntax: public class TableBatchOperation
type: class
uid: com.microsoft.azure.storage.table.TableBatchOperation
fullName: com.microsoft.azure.storage.table.TableBatchOperation
name: TableBatchOperation
package: com.microsoft.azure.storage.table
summary: >-
  <p>A class which represents a batch operation. A batch operation is a collection of table operations which are executed by the Storage Service REST API as a single atomic operation, by invoking an <a href="http://msdn.microsoft.com/en-us/library/azure/dd894038.aspx">Entity Group Transaction</a>. </p>

  <p>A batch operation may contain up to 100 individual table operations, with the requirement that each operation entity must have same partition key. A batch with a retrieve operation cannot contain any other operations. Note that the total payload of a batch operation is limited to 4MB. </p>
metadata: {}
