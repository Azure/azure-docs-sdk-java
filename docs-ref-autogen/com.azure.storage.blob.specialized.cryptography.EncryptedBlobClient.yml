### YamlMime:JavaType
uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient"
fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient"
name: "EncryptedBlobClient"
nameWithType: "EncryptedBlobClient"
summary: "This class provides a client side encryption client that contains generic blob operations for Azure Storage Blobs. Operations allowed by the client are uploading, downloading and copying a blob, retrieving and setting metadata, retrieving and setting HTTP headers, and deleting and un-deleting a blob. The upload and download operation allow for encryption and decryption of the data client side. Note: setting metadata in particular is unsafe and should only be done so with caution.\n\nPlease refer to the [Azure Docs For Client-Side Encryption][] for more information.\n\nThis client is instantiated through <xref uid=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobClientBuilder\" data-throw-if-not-resolved=\"false\">EncryptedBlobClientBuilder</xref>\n\nFor operations on a specific blob type (i.e append, block, or page) use <xref uid=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getAppendBlobClient()\" data-throw-if-not-resolved=\"false\">getAppendBlobClient</xref>, <xref uid=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlockBlobClient()\" data-throw-if-not-resolved=\"false\">getBlockBlobClient</xref>, or <xref uid=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getPageBlobClient()\" data-throw-if-not-resolved=\"false\">getPageBlobAsyncClient</xref> to construct a client that allows blob specific operations. Note, these types do not support client-side encryption, though decryption is possible in case the associated block/page/append blob contains encrypted data.\n\nPlease refer to the [Azure Docs][] for more information.\n\n\n[Azure Docs For Client-Side Encryption]: https://docs.microsoft.com/en-us/azure/storage/common/storage-client-side-encryption-java\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.storage.blob.specialized.BlobClientBase\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.storage.blob.BlobClient\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.storage.blob.BlobClient.getAppendBlobClient()"
- "com.azure.storage.blob.BlobClient.getBlockBlobClient()"
- "com.azure.storage.blob.BlobClient.getPageBlobClient()"
- "com.azure.storage.blob.BlobClient.getSnapshotClient(java.lang.String)"
- "com.azure.storage.blob.BlobClient.upload(java.io.InputStream,long)"
- "com.azure.storage.blob.BlobClient.upload(java.io.InputStream,long,boolean)"
- "com.azure.storage.blob.BlobClient.uploadFromFile(java.lang.String)"
- "com.azure.storage.blob.BlobClient.uploadFromFile(java.lang.String,boolean)"
- "com.azure.storage.blob.BlobClient.uploadFromFile(java.lang.String,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)"
- "com.azure.storage.blob.BlobClient.uploadWithResponse(com.azure.storage.blob.options.BlobParallelUploadOptions,com.azure.core.util.Context)"
- "com.azure.storage.blob.BlobClient.uploadWithResponse(java.io.InputStream,long,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.abortCopyFromUrl(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.abortCopyFromUrlWithResponse(java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.time.Duration)"
- "com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)"
- "com.azure.storage.blob.specialized.BlobClientBase.copyFromUrl(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.createSnapshot()"
- "com.azure.storage.blob.specialized.BlobClientBase.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.delete()"
- "com.azure.storage.blob.specialized.BlobClientBase.deleteWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.download(java.io.OutputStream)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String,boolean)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadWithResponse(java.io.OutputStream,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.exists()"
- "com.azure.storage.blob.specialized.BlobClientBase.existsWithResponse(java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)"
- "com.azure.storage.blob.specialized.BlobClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)"
- "com.azure.storage.blob.specialized.BlobClientBase.getAccountInfo()"
- "com.azure.storage.blob.specialized.BlobClientBase.getAccountInfoWithResponse(java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.getAccountName()"
- "com.azure.storage.blob.specialized.BlobClientBase.getBlobName()"
- "com.azure.storage.blob.specialized.BlobClientBase.getBlobUrl()"
- "com.azure.storage.blob.specialized.BlobClientBase.getContainerName()"
- "com.azure.storage.blob.specialized.BlobClientBase.getCustomerProvidedKey()"
- "com.azure.storage.blob.specialized.BlobClientBase.getHttpPipeline()"
- "com.azure.storage.blob.specialized.BlobClientBase.getProperties()"
- "com.azure.storage.blob.specialized.BlobClientBase.getPropertiesWithResponse(com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.getServiceVersion()"
- "com.azure.storage.blob.specialized.BlobClientBase.getSnapshotId()"
- "com.azure.storage.blob.specialized.BlobClientBase.isSnapshot()"
- "com.azure.storage.blob.specialized.BlobClientBase.openInputStream()"
- "com.azure.storage.blob.specialized.BlobClientBase.openInputStream(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.BlobClientBase.setAccessTier(com.azure.storage.blob.models.AccessTier)"
- "com.azure.storage.blob.specialized.BlobClientBase.setAccessTierWithResponse(com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.lang.String,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setHttpHeaders(com.azure.storage.blob.models.BlobHttpHeaders)"
- "com.azure.storage.blob.specialized.BlobClientBase.setHttpHeadersWithResponse(com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
- "com.azure.storage.blob.specialized.BlobClientBase.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.undelete()"
- "com.azure.storage.blob.specialized.BlobClientBase.undeleteWithResponse(java.time.Duration,com.azure.core.util.Context)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class EncryptedBlobClient extends BlobClient"
methods:
- "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getAppendBlobClient()"
- "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream()"
- "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream(boolean)"
- "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream(com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlockBlobClient()"
- "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getPageBlobClient()"
- "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile(java.lang.String)"
- "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile(java.lang.String,boolean)"
- "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile(java.lang.String,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)"
type: "class"
metadata: {}
package: "com.azure.storage.blob.specialized.cryptography"
artifact: com.azure:azure-storage-blob-cryptography:12.7.0
