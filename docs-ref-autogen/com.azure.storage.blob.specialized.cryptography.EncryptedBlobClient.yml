### YamlMime:JavaType
uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient"
fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient"
name: "EncryptedBlobClient"
nameWithType: "EncryptedBlobClient"
summary: "This class provides a client side encryption client that contains generic blob operations for Azure Storage Blobs."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.storage.blob.specialized.BlobClientBase?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.storage.blob.BlobClient?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.storage.blob.BlobClient.getAppendBlobClient()"
- "com.azure.storage.blob.BlobClient.getBlockBlobClient()"
- "com.azure.storage.blob.BlobClient.getCustomerProvidedKeyClient(com.azure.storage.blob.models.CustomerProvidedKey)"
- "com.azure.storage.blob.BlobClient.getEncryptionScopeClient(java.lang.String)"
- "com.azure.storage.blob.BlobClient.getPageBlobClient()"
- "com.azure.storage.blob.BlobClient.getSnapshotClient(java.lang.String)"
- "com.azure.storage.blob.BlobClient.getVersionClient(java.lang.String)"
- "com.azure.storage.blob.BlobClient.upload(com.azure.core.util.BinaryData)"
- "com.azure.storage.blob.BlobClient.upload(com.azure.core.util.BinaryData,boolean)"
- "com.azure.storage.blob.BlobClient.upload(java.io.InputStream,long)"
- "com.azure.storage.blob.BlobClient.upload(java.io.InputStream,long,boolean)"
- "com.azure.storage.blob.BlobClient.uploadFromFile(java.lang.String)"
- "com.azure.storage.blob.BlobClient.uploadFromFile(java.lang.String,boolean)"
- "com.azure.storage.blob.BlobClient.uploadFromFile(java.lang.String,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)"
- "com.azure.storage.blob.BlobClient.uploadFromFileWithResponse(com.azure.storage.blob.options.BlobUploadFromFileOptions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.BlobClient.uploadWithResponse(com.azure.storage.blob.options.BlobParallelUploadOptions,com.azure.core.util.Context)"
- "com.azure.storage.blob.BlobClient.uploadWithResponse(com.azure.storage.blob.options.BlobParallelUploadOptions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.BlobClient.uploadWithResponse(java.io.InputStream,long,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.abortCopyFromUrl(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.abortCopyFromUrlWithResponse(java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.beginCopy(com.azure.storage.blob.options.BlobBeginCopyOptions)"
- "com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.time.Duration)"
- "com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)"
- "com.azure.storage.blob.specialized.BlobClientBase.copyFromUrl(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.copyFromUrlWithResponse(com.azure.storage.blob.options.BlobCopyFromUrlOptions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.createSnapshot()"
- "com.azure.storage.blob.specialized.BlobClientBase.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.delete()"
- "com.azure.storage.blob.specialized.BlobClientBase.deleteIfExists()"
- "com.azure.storage.blob.specialized.BlobClientBase.deleteIfExistsWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.deleteImmutabilityPolicy()"
- "com.azure.storage.blob.specialized.BlobClientBase.deleteImmutabilityPolicyWithResponse(java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.deleteWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.download(java.io.OutputStream)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadContent()"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadContentWithResponse(com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadStream(java.io.OutputStream)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadStreamWithResponse(java.io.OutputStream,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String,boolean)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(com.azure.storage.blob.options.BlobDownloadToFileOptions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadWithResponse(java.io.OutputStream,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.exists()"
- "com.azure.storage.blob.specialized.BlobClientBase.existsWithResponse(java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)"
- "com.azure.storage.blob.specialized.BlobClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)"
- "com.azure.storage.blob.specialized.BlobClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey,java.lang.String,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.getAccountInfo()"
- "com.azure.storage.blob.specialized.BlobClientBase.getAccountInfoWithResponse(java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.getAccountName()"
- "com.azure.storage.blob.specialized.BlobClientBase.getAccountUrl()"
- "com.azure.storage.blob.specialized.BlobClientBase.getBlobName()"
- "com.azure.storage.blob.specialized.BlobClientBase.getBlobUrl()"
- "com.azure.storage.blob.specialized.BlobClientBase.getContainerClient()"
- "com.azure.storage.blob.specialized.BlobClientBase.getContainerName()"
- "com.azure.storage.blob.specialized.BlobClientBase.getCustomerProvidedKey()"
- "com.azure.storage.blob.specialized.BlobClientBase.getHttpPipeline()"
- "com.azure.storage.blob.specialized.BlobClientBase.getProperties()"
- "com.azure.storage.blob.specialized.BlobClientBase.getPropertiesWithResponse(com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.getServiceVersion()"
- "com.azure.storage.blob.specialized.BlobClientBase.getSnapshotId()"
- "com.azure.storage.blob.specialized.BlobClientBase.getTags()"
- "com.azure.storage.blob.specialized.BlobClientBase.getTagsWithResponse(com.azure.storage.blob.options.BlobGetTagsOptions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.getVersionId()"
- "com.azure.storage.blob.specialized.BlobClientBase.isSnapshot()"
- "com.azure.storage.blob.specialized.BlobClientBase.openInputStream()"
- "com.azure.storage.blob.specialized.BlobClientBase.openInputStream(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.BlobClientBase.openInputStream(com.azure.storage.blob.options.BlobInputStreamOptions)"
- "com.azure.storage.blob.specialized.BlobClientBase.openInputStream(com.azure.storage.blob.options.BlobInputStreamOptions,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.openQueryInputStream(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.openQueryInputStreamWithResponse(com.azure.storage.blob.options.BlobQueryOptions)"
- "com.azure.storage.blob.specialized.BlobClientBase.query(java.io.OutputStream,java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.queryWithResponse(com.azure.storage.blob.options.BlobQueryOptions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setAccessTier(com.azure.storage.blob.models.AccessTier)"
- "com.azure.storage.blob.specialized.BlobClientBase.setAccessTierWithResponse(com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.lang.String,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setAccessTierWithResponse(com.azure.storage.blob.options.BlobSetAccessTierOptions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setHttpHeaders(com.azure.storage.blob.models.BlobHttpHeaders)"
- "com.azure.storage.blob.specialized.BlobClientBase.setHttpHeadersWithResponse(com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setImmutabilityPolicy(com.azure.storage.blob.models.BlobImmutabilityPolicy)"
- "com.azure.storage.blob.specialized.BlobClientBase.setImmutabilityPolicyWithResponse(com.azure.storage.blob.models.BlobImmutabilityPolicy,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setLegalHold(boolean)"
- "com.azure.storage.blob.specialized.BlobClientBase.setLegalHoldWithResponse(boolean,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
- "com.azure.storage.blob.specialized.BlobClientBase.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setTags(java.util.Map<java.lang.String,java.lang.String>)"
- "com.azure.storage.blob.specialized.BlobClientBase.setTagsWithResponse(com.azure.storage.blob.options.BlobSetTagsOptions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.undelete()"
- "com.azure.storage.blob.specialized.BlobClientBase.undeleteWithResponse(java.time.Duration,com.azure.core.util.Context)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class EncryptedBlobClient extends BlobClient"
methods:
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.download(java.io.OutputStream)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.download(OutputStream stream)"
  name: "download(OutputStream stream)"
  nameWithType: "EncryptedBlobClient.download(OutputStream stream)"
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.download(java.io.OutputStream)"
  parameters:
  - name: "stream"
    type: "<xref href=\"java.io.OutputStream?alt=java.io.OutputStream&text=OutputStream\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic void download(OutputStream stream)"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.downloadContent()"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.downloadContent()"
  name: "downloadContent()"
  nameWithType: "EncryptedBlobClient.downloadContent()"
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.downloadContent()"
  syntax: "public BinaryData downloadContent()"
  returns:
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.downloadContentWithResponse(com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.downloadContentWithResponse(DownloadRetryOptions options, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  name: "downloadContentWithResponse(DownloadRetryOptions options, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "EncryptedBlobClient.downloadContentWithResponse(DownloadRetryOptions options, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.downloadContentWithResponse(com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  parameters:
  - name: "options"
    type: "<xref href=\"com.azure.storage.blob.models.DownloadRetryOptions?alt=com.azure.storage.blob.models.DownloadRetryOptions&text=DownloadRetryOptions\" data-throw-if-not-resolved=\"False\" />"
  - name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobDownloadContentResponse downloadContentWithResponse(DownloadRetryOptions options, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  returns:
    type: "<xref href=\"com.azure.storage.blob.models.BlobDownloadContentResponse?alt=com.azure.storage.blob.models.BlobDownloadContentResponse&text=BlobDownloadContentResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.downloadStream(java.io.OutputStream)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.downloadStream(OutputStream stream)"
  name: "downloadStream(OutputStream stream)"
  nameWithType: "EncryptedBlobClient.downloadStream(OutputStream stream)"
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.downloadStream(java.io.OutputStream)"
  parameters:
  - name: "stream"
    type: "<xref href=\"java.io.OutputStream?alt=java.io.OutputStream&text=OutputStream\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void downloadStream(OutputStream stream)"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.downloadStreamWithResponse(java.io.OutputStream,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.downloadStreamWithResponse(OutputStream stream, BlobRange range, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean getRangeContentMd5, Duration timeout, Context context)"
  name: "downloadStreamWithResponse(OutputStream stream, BlobRange range, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean getRangeContentMd5, Duration timeout, Context context)"
  nameWithType: "EncryptedBlobClient.downloadStreamWithResponse(OutputStream stream, BlobRange range, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean getRangeContentMd5, Duration timeout, Context context)"
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.downloadStreamWithResponse(java.io.OutputStream,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)"
  parameters:
  - name: "stream"
    type: "<xref href=\"java.io.OutputStream?alt=java.io.OutputStream&text=OutputStream\" data-throw-if-not-resolved=\"False\" />"
  - name: "range"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - name: "options"
    type: "<xref href=\"com.azure.storage.blob.models.DownloadRetryOptions?alt=com.azure.storage.blob.models.DownloadRetryOptions&text=DownloadRetryOptions\" data-throw-if-not-resolved=\"False\" />"
  - name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - name: "getRangeContentMd5"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobDownloadResponse downloadStreamWithResponse(OutputStream stream, BlobRange range, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean getRangeContentMd5, Duration timeout, Context context)"
  returns:
    type: "<xref href=\"com.azure.storage.blob.models.BlobDownloadResponse?alt=com.azure.storage.blob.models.BlobDownloadResponse&text=BlobDownloadResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.downloadToFile(java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.downloadToFile(String filePath)"
  name: "downloadToFile(String filePath)"
  nameWithType: "EncryptedBlobClient.downloadToFile(String filePath)"
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String)"
  parameters:
  - name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobProperties downloadToFile(String filePath)"
  returns:
    type: "<xref href=\"com.azure.storage.blob.models.BlobProperties?alt=com.azure.storage.blob.models.BlobProperties&text=BlobProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.downloadToFile(java.lang.String,boolean)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.downloadToFile(String filePath, boolean overwrite)"
  name: "downloadToFile(String filePath, boolean overwrite)"
  nameWithType: "EncryptedBlobClient.downloadToFile(String filePath, boolean overwrite)"
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String,boolean)"
  parameters:
  - name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "overwrite"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobProperties downloadToFile(String filePath, boolean overwrite)"
  returns:
    type: "<xref href=\"com.azure.storage.blob.models.BlobProperties?alt=com.azure.storage.blob.models.BlobProperties&text=BlobProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.downloadToFileWithResponse(com.azure.storage.blob.options.BlobDownloadToFileOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.downloadToFileWithResponse(BlobDownloadToFileOptions options, Duration timeout, Context context)"
  name: "downloadToFileWithResponse(BlobDownloadToFileOptions options, Duration timeout, Context context)"
  nameWithType: "EncryptedBlobClient.downloadToFileWithResponse(BlobDownloadToFileOptions options, Duration timeout, Context context)"
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(com.azure.storage.blob.options.BlobDownloadToFileOptions,java.time.Duration,com.azure.core.util.Context)"
  parameters:
  - name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.BlobDownloadToFileOptions?alt=com.azure.storage.blob.options.BlobDownloadToFileOptions&text=BlobDownloadToFileOptions\" data-throw-if-not-resolved=\"False\" />"
  - name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BlobProperties> downloadToFileWithResponse(BlobDownloadToFileOptions options, Duration timeout, Context context)"
  returns:
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobProperties?alt=com.azure.storage.blob.models.BlobProperties&text=BlobProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.downloadToFileWithResponse(String filePath, BlobRange range, ParallelTransferOptions parallelTransferOptions, DownloadRetryOptions downloadRetryOptions, BlobRequestConditions requestConditions, boolean rangeGetContentMd5, Duration timeout, Context context)"
  name: "downloadToFileWithResponse(String filePath, BlobRange range, ParallelTransferOptions parallelTransferOptions, DownloadRetryOptions downloadRetryOptions, BlobRequestConditions requestConditions, boolean rangeGetContentMd5, Duration timeout, Context context)"
  nameWithType: "EncryptedBlobClient.downloadToFileWithResponse(String filePath, BlobRange range, ParallelTransferOptions parallelTransferOptions, DownloadRetryOptions downloadRetryOptions, BlobRequestConditions requestConditions, boolean rangeGetContentMd5, Duration timeout, Context context)"
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)"
  parameters:
  - name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "range"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - name: "parallelTransferOptions"
    type: "<xref href=\"com.azure.storage.blob.models.ParallelTransferOptions?alt=com.azure.storage.blob.models.ParallelTransferOptions&text=ParallelTransferOptions\" data-throw-if-not-resolved=\"False\" />"
  - name: "downloadRetryOptions"
    type: "<xref href=\"com.azure.storage.blob.models.DownloadRetryOptions?alt=com.azure.storage.blob.models.DownloadRetryOptions&text=DownloadRetryOptions\" data-throw-if-not-resolved=\"False\" />"
  - name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - name: "rangeGetContentMd5"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BlobProperties> downloadToFileWithResponse(String filePath, BlobRange range, ParallelTransferOptions parallelTransferOptions, DownloadRetryOptions downloadRetryOptions, BlobRequestConditions requestConditions, boolean rangeGetContentMd5, Duration timeout, Context context)"
  returns:
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobProperties?alt=com.azure.storage.blob.models.BlobProperties&text=BlobProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.downloadToFileWithResponse(String filePath, BlobRange range, ParallelTransferOptions parallelTransferOptions, DownloadRetryOptions downloadRetryOptions, BlobRequestConditions requestConditions, boolean rangeGetContentMd5, Set<OpenOption> openOptions, Duration timeout, Context context)"
  name: "downloadToFileWithResponse(String filePath, BlobRange range, ParallelTransferOptions parallelTransferOptions, DownloadRetryOptions downloadRetryOptions, BlobRequestConditions requestConditions, boolean rangeGetContentMd5, Set<OpenOption> openOptions, Duration timeout, Context context)"
  nameWithType: "EncryptedBlobClient.downloadToFileWithResponse(String filePath, BlobRange range, ParallelTransferOptions parallelTransferOptions, DownloadRetryOptions downloadRetryOptions, BlobRequestConditions requestConditions, boolean rangeGetContentMd5, Set<OpenOption> openOptions, Duration timeout, Context context)"
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>,java.time.Duration,com.azure.core.util.Context)"
  parameters:
  - name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "range"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - name: "parallelTransferOptions"
    type: "<xref href=\"com.azure.storage.blob.models.ParallelTransferOptions?alt=com.azure.storage.blob.models.ParallelTransferOptions&text=ParallelTransferOptions\" data-throw-if-not-resolved=\"False\" />"
  - name: "downloadRetryOptions"
    type: "<xref href=\"com.azure.storage.blob.models.DownloadRetryOptions?alt=com.azure.storage.blob.models.DownloadRetryOptions&text=DownloadRetryOptions\" data-throw-if-not-resolved=\"False\" />"
  - name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - name: "rangeGetContentMd5"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - name: "openOptions"
    type: "<xref href=\"java.util.Set?alt=java.util.Set&text=Set\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.file.OpenOption?alt=java.nio.file.OpenOption&text=OpenOption\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BlobProperties> downloadToFileWithResponse(String filePath, BlobRange range, ParallelTransferOptions parallelTransferOptions, DownloadRetryOptions downloadRetryOptions, BlobRequestConditions requestConditions, boolean rangeGetContentMd5, Set<OpenOption> openOptions, Duration timeout, Context context)"
  returns:
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobProperties?alt=com.azure.storage.blob.models.BlobProperties&text=BlobProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.downloadWithResponse(java.io.OutputStream,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.downloadWithResponse(OutputStream stream, BlobRange range, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean getRangeContentMd5, Duration timeout, Context context)"
  name: "downloadWithResponse(OutputStream stream, BlobRange range, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean getRangeContentMd5, Duration timeout, Context context)"
  nameWithType: "EncryptedBlobClient.downloadWithResponse(OutputStream stream, BlobRange range, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean getRangeContentMd5, Duration timeout, Context context)"
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.downloadWithResponse(java.io.OutputStream,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)"
  parameters:
  - name: "stream"
    type: "<xref href=\"java.io.OutputStream?alt=java.io.OutputStream&text=OutputStream\" data-throw-if-not-resolved=\"False\" />"
  - name: "range"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - name: "options"
    type: "<xref href=\"com.azure.storage.blob.models.DownloadRetryOptions?alt=com.azure.storage.blob.models.DownloadRetryOptions&text=DownloadRetryOptions\" data-throw-if-not-resolved=\"False\" />"
  - name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - name: "getRangeContentMd5"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic BlobDownloadResponse downloadWithResponse(OutputStream stream, BlobRange range, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean getRangeContentMd5, Duration timeout, Context context)"
  returns:
    type: "<xref href=\"com.azure.storage.blob.models.BlobDownloadResponse?alt=com.azure.storage.blob.models.BlobDownloadResponse&text=BlobDownloadResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getAppendBlobClient()"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getAppendBlobClient()"
  name: "getAppendBlobClient()"
  nameWithType: "EncryptedBlobClient.getAppendBlobClient()"
  summary: "Unsupported."
  overridden: "com.azure.storage.blob.BlobClient.getAppendBlobClient()"
  syntax: "public AppendBlobClient getAppendBlobClient()"
  desc: "Unsupported."
  returns:
    type: "<xref href=\"com.azure.storage.blob.specialized.AppendBlobClient?alt=com.azure.storage.blob.specialized.AppendBlobClient&text=AppendBlobClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream()"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream()"
  name: "getBlobOutputStream()"
  nameWithType: "EncryptedBlobClient.getBlobOutputStream()"
  summary: "Creates and opens an output stream to write data to the block blob."
  syntax: "public BlobOutputStream getBlobOutputStream()"
  desc: "Creates and opens an output stream to write data to the block blob.\n\nNote: We recommend you call write with reasonably sized buffers, you can do so by wrapping the BlobOutputStream obtained below with a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.BufferedOutputStream\"></xref>."
  returns:
    description: "A <xref uid=\"com.azure.storage.blob.specialized.BlobOutputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobOutputStream\"></xref> object used to write data to the blob."
    type: "<xref href=\"com.azure.storage.blob.specialized.BlobOutputStream?alt=com.azure.storage.blob.specialized.BlobOutputStream&text=BlobOutputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream(boolean)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream(boolean overwrite)"
  name: "getBlobOutputStream(boolean overwrite)"
  nameWithType: "EncryptedBlobClient.getBlobOutputStream(boolean overwrite)"
  summary: "Creates and opens an output stream to write data to the block blob."
  parameters:
  - description: "Whether to overwrite, should data exist on the blob."
    name: "overwrite"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobOutputStream getBlobOutputStream(boolean overwrite)"
  desc: "Creates and opens an output stream to write data to the block blob.\n\nNote: We recommend you call write with reasonably sized buffers, you can do so by wrapping the BlobOutputStream obtained below with a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.BufferedOutputStream\"></xref>."
  returns:
    description: "A <xref uid=\"com.azure.storage.blob.specialized.BlobOutputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobOutputStream\"></xref> object used to write data to the blob."
    type: "<xref href=\"com.azure.storage.blob.specialized.BlobOutputStream?alt=com.azure.storage.blob.specialized.BlobOutputStream&text=BlobOutputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream(com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream(ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)"
  name: "getBlobOutputStream(ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)"
  nameWithType: "EncryptedBlobClient.getBlobOutputStream(ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)"
  summary: "Creates and opens an output stream to write data to the block blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.ParallelTransferOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParallelTransferOptions\"></xref> used to configure buffered uploading."
    name: "parallelTransferOptions"
    type: "<xref href=\"com.azure.storage.blob.models.ParallelTransferOptions?alt=com.azure.storage.blob.models.ParallelTransferOptions&text=ParallelTransferOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobHttpHeaders\"></xref>"
    name: "headers"
    type: "<xref href=\"com.azure.storage.blob.models.BlobHttpHeaders?alt=com.azure.storage.blob.models.BlobHttpHeaders&text=BlobHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "Metadata to associate with the blob. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.blob.models.AccessTier\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccessTier\"></xref> for the destination blob."
    name: "tier"
    type: "<xref href=\"com.azure.storage.blob.models.AccessTier?alt=com.azure.storage.blob.models.AccessTier&text=AccessTier\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobOutputStream getBlobOutputStream(ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)"
  desc: "Creates and opens an output stream to write data to the block blob. If the blob already exists on the service, it will be overwritten.\n\nTo avoid overwriting, pass \"\\*\" to <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions#setIfNoneMatch(String)\"></xref>.\n\nNote: We recommend you call write with reasonably sized buffers, you can do so by wrapping the BlobOutputStream obtained below with a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.BufferedOutputStream\"></xref>."
  returns:
    description: "A <xref uid=\"com.azure.storage.blob.specialized.BlobOutputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobOutputStream\"></xref> object used to write data to the blob."
    type: "<xref href=\"com.azure.storage.blob.specialized.BlobOutputStream?alt=com.azure.storage.blob.specialized.BlobOutputStream&text=BlobOutputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream(com.azure.storage.blob.options.BlockBlobOutputStreamOptions)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream(BlockBlobOutputStreamOptions options)"
  name: "getBlobOutputStream(BlockBlobOutputStreamOptions options)"
  nameWithType: "EncryptedBlobClient.getBlobOutputStream(BlockBlobOutputStreamOptions options)"
  summary: "Creates and opens an output stream to write data to the block blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.BlockBlobOutputStreamOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlockBlobOutputStreamOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.BlockBlobOutputStreamOptions?alt=com.azure.storage.blob.options.BlockBlobOutputStreamOptions&text=BlockBlobOutputStreamOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobOutputStream getBlobOutputStream(BlockBlobOutputStreamOptions options)"
  desc: "Creates and opens an output stream to write data to the block blob. If the blob already exists on the service, it will be overwritten.\n\nTo avoid overwriting, pass \"\\*\" to <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions#setIfNoneMatch(String)\"></xref>.\n\nNote: We recommend you call write with reasonably sized buffers, you can do so by wrapping the BlobOutputStream obtained below with a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.BufferedOutputStream\"></xref>."
  returns:
    description: "A <xref uid=\"com.azure.storage.blob.specialized.BlobOutputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobOutputStream\"></xref> object used to write data to the blob."
    type: "<xref href=\"com.azure.storage.blob.specialized.BlobOutputStream?alt=com.azure.storage.blob.specialized.BlobOutputStream&text=BlobOutputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlockBlobClient()"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlockBlobClient()"
  name: "getBlockBlobClient()"
  nameWithType: "EncryptedBlobClient.getBlockBlobClient()"
  summary: "Unsupported."
  overridden: "com.azure.storage.blob.BlobClient.getBlockBlobClient()"
  syntax: "public BlockBlobClient getBlockBlobClient()"
  desc: "Unsupported."
  returns:
    type: "<xref href=\"com.azure.storage.blob.specialized.BlockBlobClient?alt=com.azure.storage.blob.specialized.BlockBlobClient&text=BlockBlobClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getCustomerProvidedKeyClient(com.azure.storage.blob.models.CustomerProvidedKey)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getCustomerProvidedKeyClient(CustomerProvidedKey customerProvidedKey)"
  name: "getCustomerProvidedKeyClient(CustomerProvidedKey customerProvidedKey)"
  nameWithType: "EncryptedBlobClient.getCustomerProvidedKeyClient(CustomerProvidedKey customerProvidedKey)"
  summary: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EncryptedBlobClient\"></xref> with the specified `customerProvidedKey`."
  overridden: "com.azure.storage.blob.BlobClient.getCustomerProvidedKeyClient(com.azure.storage.blob.models.CustomerProvidedKey)"
  parameters:
  - description: "the <xref uid=\"com.azure.storage.blob.models.CustomerProvidedKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CustomerProvidedKey\"></xref> for the blob,\n pass <code>null</code> to use no customer provided key."
    name: "customerProvidedKey"
    type: "<xref href=\"com.azure.storage.blob.models.CustomerProvidedKey?alt=com.azure.storage.blob.models.CustomerProvidedKey&text=CustomerProvidedKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public EncryptedBlobClient getCustomerProvidedKeyClient(CustomerProvidedKey customerProvidedKey)"
  desc: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EncryptedBlobClient\"></xref> with the specified `customerProvidedKey`."
  returns:
    description: "a <xref uid=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EncryptedBlobClient\"></xref> with the specified <code>customerProvidedKey</code>."
    type: "<xref href=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient?alt=com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient&text=EncryptedBlobClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getEncryptionScopeClient(java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getEncryptionScopeClient(String encryptionScope)"
  name: "getEncryptionScopeClient(String encryptionScope)"
  nameWithType: "EncryptedBlobClient.getEncryptionScopeClient(String encryptionScope)"
  summary: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EncryptedBlobClient\"></xref> with the specified `encryptionScope`."
  overridden: "com.azure.storage.blob.BlobClient.getEncryptionScopeClient(java.lang.String)"
  parameters:
  - description: "the encryption scope for the blob, pass <code>null</code> to use no encryption scope."
    name: "encryptionScope"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public EncryptedBlobClient getEncryptionScopeClient(String encryptionScope)"
  desc: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EncryptedBlobClient\"></xref> with the specified `encryptionScope`."
  returns:
    description: "a <xref uid=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EncryptedBlobClient\"></xref> with the specified <code>encryptionScope</code>."
    type: "<xref href=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient?alt=com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient&text=EncryptedBlobClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getPageBlobClient()"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getPageBlobClient()"
  name: "getPageBlobClient()"
  nameWithType: "EncryptedBlobClient.getPageBlobClient()"
  summary: "Unsupported."
  overridden: "com.azure.storage.blob.BlobClient.getPageBlobClient()"
  syntax: "public PageBlobClient getPageBlobClient()"
  desc: "Unsupported."
  returns:
    type: "<xref href=\"com.azure.storage.blob.specialized.PageBlobClient?alt=com.azure.storage.blob.specialized.PageBlobClient&text=PageBlobClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.openInputStream()"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.openInputStream()"
  name: "openInputStream()"
  nameWithType: "EncryptedBlobClient.openInputStream()"
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.openInputStream()"
  syntax: "public BlobInputStream openInputStream()"
  returns:
    type: "<xref href=\"com.azure.storage.blob.specialized.BlobInputStream?alt=com.azure.storage.blob.specialized.BlobInputStream&text=BlobInputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.openInputStream(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.openInputStream(BlobRange range, BlobRequestConditions requestConditions)"
  name: "openInputStream(BlobRange range, BlobRequestConditions requestConditions)"
  nameWithType: "EncryptedBlobClient.openInputStream(BlobRange range, BlobRequestConditions requestConditions)"
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.openInputStream(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.BlobRequestConditions)"
  parameters:
  - name: "range"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobInputStream openInputStream(BlobRange range, BlobRequestConditions requestConditions)"
  returns:
    type: "<xref href=\"com.azure.storage.blob.specialized.BlobInputStream?alt=com.azure.storage.blob.specialized.BlobInputStream&text=BlobInputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.openInputStream(com.azure.storage.blob.options.BlobInputStreamOptions)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.openInputStream(BlobInputStreamOptions options)"
  name: "openInputStream(BlobInputStreamOptions options)"
  nameWithType: "EncryptedBlobClient.openInputStream(BlobInputStreamOptions options)"
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.openInputStream(com.azure.storage.blob.options.BlobInputStreamOptions)"
  parameters:
  - name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.BlobInputStreamOptions?alt=com.azure.storage.blob.options.BlobInputStreamOptions&text=BlobInputStreamOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobInputStream openInputStream(BlobInputStreamOptions options)"
  returns:
    type: "<xref href=\"com.azure.storage.blob.specialized.BlobInputStream?alt=com.azure.storage.blob.specialized.BlobInputStream&text=BlobInputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.openInputStream(com.azure.storage.blob.options.BlobInputStreamOptions,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.openInputStream(BlobInputStreamOptions options, Context context)"
  name: "openInputStream(BlobInputStreamOptions options, Context context)"
  nameWithType: "EncryptedBlobClient.openInputStream(BlobInputStreamOptions options, Context context)"
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.openInputStream(com.azure.storage.blob.options.BlobInputStreamOptions,com.azure.core.util.Context)"
  parameters:
  - name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.BlobInputStreamOptions?alt=com.azure.storage.blob.options.BlobInputStreamOptions&text=BlobInputStreamOptions\" data-throw-if-not-resolved=\"False\" />"
  - name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobInputStream openInputStream(BlobInputStreamOptions options, Context context)"
  returns:
    type: "<xref href=\"com.azure.storage.blob.specialized.BlobInputStream?alt=com.azure.storage.blob.specialized.BlobInputStream&text=BlobInputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.openQueryInputStream(java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.openQueryInputStream(String expression)"
  name: "openQueryInputStream(String expression)"
  nameWithType: "EncryptedBlobClient.openQueryInputStream(String expression)"
  summary: "Unsupported."
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.openQueryInputStream(java.lang.String)"
  parameters:
  - name: "expression"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public InputStream openQueryInputStream(String expression)"
  desc: "Unsupported. Cannot query data encrypted on client side."
  returns:
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.openQueryInputStreamWithResponse(com.azure.storage.blob.options.BlobQueryOptions)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.openQueryInputStreamWithResponse(BlobQueryOptions queryOptions)"
  name: "openQueryInputStreamWithResponse(BlobQueryOptions queryOptions)"
  nameWithType: "EncryptedBlobClient.openQueryInputStreamWithResponse(BlobQueryOptions queryOptions)"
  summary: "Unsupported."
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.openQueryInputStreamWithResponse(com.azure.storage.blob.options.BlobQueryOptions)"
  parameters:
  - name: "queryOptions"
    type: "<xref href=\"com.azure.storage.blob.options.BlobQueryOptions?alt=com.azure.storage.blob.options.BlobQueryOptions&text=BlobQueryOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<InputStream> openQueryInputStreamWithResponse(BlobQueryOptions queryOptions)"
  desc: "Unsupported. Cannot query data encrypted on client side."
  returns:
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.query(java.io.OutputStream,java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.query(OutputStream stream, String expression)"
  name: "query(OutputStream stream, String expression)"
  nameWithType: "EncryptedBlobClient.query(OutputStream stream, String expression)"
  summary: "Unsupported."
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.query(java.io.OutputStream,java.lang.String)"
  parameters:
  - name: "stream"
    type: "<xref href=\"java.io.OutputStream?alt=java.io.OutputStream&text=OutputStream\" data-throw-if-not-resolved=\"False\" />"
  - name: "expression"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void query(OutputStream stream, String expression)"
  desc: "Unsupported. Cannot query data encrypted on client side."
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.queryWithResponse(com.azure.storage.blob.options.BlobQueryOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.queryWithResponse(BlobQueryOptions queryOptions, Duration timeout, Context context)"
  name: "queryWithResponse(BlobQueryOptions queryOptions, Duration timeout, Context context)"
  nameWithType: "EncryptedBlobClient.queryWithResponse(BlobQueryOptions queryOptions, Duration timeout, Context context)"
  summary: "Unsupported."
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.queryWithResponse(com.azure.storage.blob.options.BlobQueryOptions,java.time.Duration,com.azure.core.util.Context)"
  parameters:
  - name: "queryOptions"
    type: "<xref href=\"com.azure.storage.blob.options.BlobQueryOptions?alt=com.azure.storage.blob.options.BlobQueryOptions&text=BlobQueryOptions\" data-throw-if-not-resolved=\"False\" />"
  - name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobQueryResponse queryWithResponse(BlobQueryOptions queryOptions, Duration timeout, Context context)"
  desc: "Unsupported. Cannot query data encrypted on client side."
  returns:
    type: "<xref href=\"com.azure.storage.blob.models.BlobQueryResponse?alt=com.azure.storage.blob.models.BlobQueryResponse&text=BlobQueryResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile(java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile(String filePath)"
  name: "uploadFromFile(String filePath)"
  nameWithType: "EncryptedBlobClient.uploadFromFile(String filePath)"
  summary: "Creates a new block blob, or updates the content of an existing block blob."
  overridden: "com.azure.storage.blob.BlobClient.uploadFromFile(java.lang.String)"
  parameters:
  - description: "Path of the file to upload"
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void uploadFromFile(String filePath)"
  desc: "Creates a new block blob, or updates the content of an existing block blob.\n\n**Code Samples**\n\n```java\ntry {\n     client.uploadFromFile(filePath);\n     System.out.println(\"Upload from file succeeded\");\n } catch (UncheckedIOException ex) {\n     System.err.printf(\"Failed to upload from file %s%n\", ex.getMessage());\n }\n```"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile(java.lang.String,boolean)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile(String filePath, boolean overwrite)"
  name: "uploadFromFile(String filePath, boolean overwrite)"
  nameWithType: "EncryptedBlobClient.uploadFromFile(String filePath, boolean overwrite)"
  summary: "Creates a new block blob, or updates the content of an existing block blob."
  overridden: "com.azure.storage.blob.BlobClient.uploadFromFile(java.lang.String,boolean)"
  parameters:
  - description: "Path of the file to upload"
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to overwrite should data already exist on the blob"
    name: "overwrite"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void uploadFromFile(String filePath, boolean overwrite)"
  desc: "Creates a new block blob, or updates the content of an existing block blob.\n\n**Code Samples**\n\n```java\ntry {\n     boolean overwrite = false; // Default value\n     client.uploadFromFile(filePath, overwrite);\n     System.out.println(\"Upload from file succeeded\");\n } catch (UncheckedIOException ex) {\n     System.err.printf(\"Failed to upload from file %s%n\", ex.getMessage());\n }\n```"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile(java.lang.String,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile(String filePath, ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions, Duration timeout)"
  name: "uploadFromFile(String filePath, ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions, Duration timeout)"
  nameWithType: "EncryptedBlobClient.uploadFromFile(String filePath, ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions, Duration timeout)"
  summary: "Creates a new block blob, or updates the content of an existing block blob."
  overridden: "com.azure.storage.blob.BlobClient.uploadFromFile(java.lang.String,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)"
  parameters:
  - description: "Path of the file to upload"
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.ParallelTransferOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParallelTransferOptions\"></xref> to use to upload from file. Number of parallel\n        transfers parameter is ignored."
    name: "parallelTransferOptions"
    type: "<xref href=\"com.azure.storage.blob.models.ParallelTransferOptions?alt=com.azure.storage.blob.models.ParallelTransferOptions&text=ParallelTransferOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobHttpHeaders\"></xref>"
    name: "headers"
    type: "<xref href=\"com.azure.storage.blob.models.BlobHttpHeaders?alt=com.azure.storage.blob.models.BlobHttpHeaders&text=BlobHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "Metadata to associate with the blob. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.blob.models.AccessTier\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccessTier\"></xref> for the uploaded blob"
    name: "tier"
    type: "<xref href=\"com.azure.storage.blob.models.AccessTier?alt=com.azure.storage.blob.models.AccessTier&text=AccessTier\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void uploadFromFile(String filePath, ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions, Duration timeout)"
  exceptions:
  - description: "If an I/O error occurs"
    type: "<xref href=\"java.io.UncheckedIOException?alt=java.io.UncheckedIOException&text=UncheckedIOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Creates a new block blob, or updates the content of an existing block blob.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentMd5(\"data\".getBytes(StandardCharsets.UTF_8))\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n\n Map<String, String> metadata = new HashMap<>(Collections.singletonMap(\"metadata\", \"value\"));\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n long blockSize = 100 * 1024 * 1024; // 100 MB;\n ParallelTransferOptions parallelTransferOptions = new ParallelTransferOptions().setBlockSizeLong(blockSize);\n\n try {\n     client.uploadFromFile(filePath, parallelTransferOptions, headers, metadata, AccessTier.HOT,\n         requestConditions, timeout);\n     System.out.println(\"Upload from file succeeded\");\n } catch (UncheckedIOException ex) {\n     System.err.printf(\"Failed to upload from file %s%n\", ex.getMessage());\n }\n```"
- uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFileWithResponse(com.azure.storage.blob.options.BlobUploadFromFileOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFileWithResponse(BlobUploadFromFileOptions options, Duration timeout, Context context)"
  name: "uploadFromFileWithResponse(BlobUploadFromFileOptions options, Duration timeout, Context context)"
  nameWithType: "EncryptedBlobClient.uploadFromFileWithResponse(BlobUploadFromFileOptions options, Duration timeout, Context context)"
  summary: "Creates a new block blob, or updates the content of an existing block blob."
  overridden: "com.azure.storage.blob.BlobClient.uploadFromFileWithResponse(com.azure.storage.blob.options.BlobUploadFromFileOptions,java.time.Duration,com.azure.core.util.Context)"
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.BlobUploadFromFileOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobUploadFromFileOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.BlobUploadFromFileOptions?alt=com.azure.storage.blob.options.BlobUploadFromFileOptions&text=BlobUploadFromFileOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BlockBlobItem> uploadFromFileWithResponse(BlobUploadFromFileOptions options, Duration timeout, Context context)"
  exceptions:
  - description: "If an I/O error occurs"
    type: "<xref href=\"java.io.UncheckedIOException?alt=java.io.UncheckedIOException&text=UncheckedIOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Creates a new block blob, or updates the content of an existing block blob.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentMd5(\"data\".getBytes(StandardCharsets.UTF_8))\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n\n Map<String, String> metadata = new HashMap<>(Collections.singletonMap(\"metadata\", \"value\"));\n Map<String, String> tags = new HashMap<>(Collections.singletonMap(\"tag\", \"value\"));\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n long blockSize = 100 * 1024 * 1024; // 100 MB;\n ParallelTransferOptions parallelTransferOptions = new ParallelTransferOptions().setBlockSizeLong(blockSize);\n\n try {\n     client.uploadFromFileWithResponse(new BlobUploadFromFileOptions(filePath)\n         .setParallelTransferOptions(parallelTransferOptions).setHeaders(headers).setMetadata(metadata)\n         .setTags(tags).setTier(AccessTier.HOT).setRequestConditions(requestConditions), timeout,\n         Context.NONE);\n     System.out.println(\"Upload from file succeeded\");\n } catch (UncheckedIOException ex) {\n     System.err.printf(\"Failed to upload from file %s%n\", ex.getMessage());\n }\n```"
  returns:
    description: "Information about the uploaded block blob."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlockBlobItem?alt=com.azure.storage.blob.models.BlockBlobItem&text=BlockBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "This class provides a client side encryption client that contains generic blob operations for Azure Storage Blobs. Operations allowed by the client are uploading, downloading and copying a blob, retrieving and setting metadata, retrieving and setting HTTP headers, and deleting and un-deleting a blob. The upload and download operation allow for encryption and decryption of the data client side. Note: setting metadata in particular is unsafe and should only be done so with caution.\n\nPlease refer to the [Azure Docs For Client-Side Encryption][] for more information.\n\nThis client is instantiated through <xref uid=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EncryptedBlobClientBuilder\"></xref>\n\nFor operations on a specific blob type (i.e. append, block, or page) use <xref uid=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getAppendBlobClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getAppendBlobClient\"></xref>, <xref uid=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlockBlobClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getBlockBlobClient\"></xref>, or <xref uid=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getPageBlobClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getPageBlobAsyncClient\"></xref> to construct a client that allows blob specific operations. Note, these types do not support client-side encryption, though decryption is possible in case the associated block/page/append blob contains encrypted data.\n\nPlease refer to the [Azure Docs][] for more information.\n\n\n[Azure Docs For Client-Side Encryption]: https://docs.microsoft.com/azure/storage/common/storage-client-side-encryption-java\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs"
metadata: {}
package: "com.azure.storage.blob.specialized.cryptography"
artifact: com.azure:azure-storage-blob-cryptography:12.18.0
