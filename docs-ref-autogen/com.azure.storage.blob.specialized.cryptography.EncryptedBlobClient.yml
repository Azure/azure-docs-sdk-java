### YamlMime:ManagedReference
items:
- uid: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient
  id: EncryptedBlobClient
  artifact: com.azure:azure-storage-blob-cryptography:12.7.0
  parent: com.azure.storage.blob.specialized.cryptography
  children:
  - com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getAppendBlobClient()
  - com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream()
  - com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream(boolean)
  - com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream(com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlockBlobClient()
  - com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getPageBlobClient()
  - com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile(java.lang.String)
  - com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile(java.lang.String,boolean)
  - com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile(java.lang.String,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
  langs:
  - java
  name: EncryptedBlobClient
  nameWithType: EncryptedBlobClient
  fullName: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient
  type: Class
  package: com.azure.storage.blob.specialized.cryptography
  summary: >-
    This class provides a client side encryption client that contains generic blob operations for Azure Storage Blobs. Operations allowed by the client are uploading, downloading and copying a blob, retrieving and setting metadata, retrieving and setting HTTP headers, and deleting and un-deleting a blob. The upload and download operation allow for encryption and decryption of the data client side. Note: setting metadata in particular is unsafe and should only be done so with caution.


    Please refer to the [Azure Docs For Client-Side Encryption][] for more information.


    This client is instantiated through <xref uid="com.azure.storage.blob.specialized.cryptography.EncryptedBlobClientBuilder" data-throw-if-not-resolved="false">EncryptedBlobClientBuilder</xref>


    For operations on a specific blob type (i.e append, block, or page) use <xref uid="com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getAppendBlobClient()" data-throw-if-not-resolved="false">getAppendBlobClient</xref>, <xref uid="com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlockBlobClient()" data-throw-if-not-resolved="false">getBlockBlobClient</xref>, or <xref uid="com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getPageBlobClient()" data-throw-if-not-resolved="false">getPageBlobAsyncClient</xref> to construct a client that allows blob specific operations. Note, these types do not support client-side encryption, though decryption is possible in case the associated block/page/append blob contains encrypted data.


    Please refer to the [Azure Docs][] for more information.



    [Azure Docs For Client-Side Encryption]: https://docs.microsoft.com/en-us/azure/storage/common/storage-client-side-encryption-java

    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs
  syntax:
    content: public class EncryptedBlobClient extends BlobClient
  inheritance:
  - java.lang.Object
  - com.azure.storage.blob.specialized.BlobClientBase
  - com.azure.storage.blob.BlobClient
  inheritedMembers:
  - com.azure.storage.blob.BlobClient.getAppendBlobClient()
  - com.azure.storage.blob.BlobClient.getBlockBlobClient()
  - com.azure.storage.blob.BlobClient.getPageBlobClient()
  - com.azure.storage.blob.BlobClient.getSnapshotClient(java.lang.String)
  - com.azure.storage.blob.BlobClient.upload(java.io.InputStream,long)
  - com.azure.storage.blob.BlobClient.upload(java.io.InputStream,long,boolean)
  - com.azure.storage.blob.BlobClient.uploadFromFile(java.lang.String)
  - com.azure.storage.blob.BlobClient.uploadFromFile(java.lang.String,boolean)
  - com.azure.storage.blob.BlobClient.uploadFromFile(java.lang.String,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
  - com.azure.storage.blob.BlobClient.uploadWithResponse(com.azure.storage.blob.options.BlobParallelUploadOptions,com.azure.core.util.Context)
  - com.azure.storage.blob.BlobClient.uploadWithResponse(java.io.InputStream,long,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.abortCopyFromUrl(java.lang.String)
  - com.azure.storage.blob.specialized.BlobClientBase.abortCopyFromUrlWithResponse(java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.time.Duration)
  - com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
  - com.azure.storage.blob.specialized.BlobClientBase.copyFromUrl(java.lang.String)
  - com.azure.storage.blob.specialized.BlobClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.createSnapshot()
  - com.azure.storage.blob.specialized.BlobClientBase.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.delete()
  - com.azure.storage.blob.specialized.BlobClientBase.deleteWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.download(java.io.OutputStream)
  - com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String)
  - com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String,boolean)
  - com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.downloadWithResponse(java.io.OutputStream,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.exists()
  - com.azure.storage.blob.specialized.BlobClientBase.existsWithResponse(java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)
  - com.azure.storage.blob.specialized.BlobClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)
  - com.azure.storage.blob.specialized.BlobClientBase.getAccountInfo()
  - com.azure.storage.blob.specialized.BlobClientBase.getAccountInfoWithResponse(java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.getAccountName()
  - com.azure.storage.blob.specialized.BlobClientBase.getBlobName()
  - com.azure.storage.blob.specialized.BlobClientBase.getBlobUrl()
  - com.azure.storage.blob.specialized.BlobClientBase.getContainerName()
  - com.azure.storage.blob.specialized.BlobClientBase.getCustomerProvidedKey()
  - com.azure.storage.blob.specialized.BlobClientBase.getHttpPipeline()
  - com.azure.storage.blob.specialized.BlobClientBase.getProperties()
  - com.azure.storage.blob.specialized.BlobClientBase.getPropertiesWithResponse(com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.getServiceVersion()
  - com.azure.storage.blob.specialized.BlobClientBase.getSnapshotId()
  - com.azure.storage.blob.specialized.BlobClientBase.isSnapshot()
  - com.azure.storage.blob.specialized.BlobClientBase.openInputStream()
  - com.azure.storage.blob.specialized.BlobClientBase.openInputStream(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.BlobClientBase.setAccessTier(com.azure.storage.blob.models.AccessTier)
  - com.azure.storage.blob.specialized.BlobClientBase.setAccessTierWithResponse(com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.setHttpHeaders(com.azure.storage.blob.models.BlobHttpHeaders)
  - com.azure.storage.blob.specialized.BlobClientBase.setHttpHeadersWithResponse(com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.blob.specialized.BlobClientBase.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.undelete()
  - com.azure.storage.blob.specialized.BlobClientBase.undeleteWithResponse(java.time.Duration,com.azure.core.util.Context)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.EncryptedBlobClient(com.azure.storage.blob.specialized.cryptography.EncryptedBlobAsyncClient)
  id: EncryptedBlobClient(com.azure.storage.blob.specialized.cryptography.EncryptedBlobAsyncClient)
  artifact: com.azure:azure-storage-blob-cryptography:12.7.0
  parent: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient
  langs:
  - java
  name: EncryptedBlobClient(EncryptedBlobAsyncClient encryptedBlobAsyncClient)
  nameWithType: EncryptedBlobClient.EncryptedBlobClient(EncryptedBlobAsyncClient encryptedBlobAsyncClient)
  fullName: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.EncryptedBlobClient(EncryptedBlobAsyncClient encryptedBlobAsyncClient)
  overload: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.EncryptedBlobClient*
  type: Constructor
  package: com.azure.storage.blob.specialized.cryptography
  summary: Package-private constructor for use by <xref uid="" data-throw-if-not-resolved="false">BlobClientBuilder</xref>.
  syntax:
    content: " EncryptedBlobClient(EncryptedBlobAsyncClient encryptedBlobAsyncClient)"
    parameters:
    - id: encryptedBlobAsyncClient
      type: com.azure.storage.blob.specialized.cryptography.EncryptedBlobAsyncClient
- uid: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getAppendBlobClient()
  id: getAppendBlobClient()
  artifact: com.azure:azure-storage-blob-cryptography:12.7.0
  parent: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient
  langs:
  - java
  name: getAppendBlobClient()
  nameWithType: EncryptedBlobClient.getAppendBlobClient()
  fullName: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getAppendBlobClient()
  overload: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getAppendBlobClient*
  type: Method
  package: com.azure.storage.blob.specialized.cryptography
  summary: Unsupported.
  syntax:
    content: public AppendBlobClient getAppendBlobClient()
    return:
      type: com.azure.storage.blob.specialized.AppendBlobClient
- uid: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream()
  id: getBlobOutputStream()
  artifact: com.azure:azure-storage-blob-cryptography:12.7.0
  parent: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient
  langs:
  - java
  name: getBlobOutputStream()
  nameWithType: EncryptedBlobClient.getBlobOutputStream()
  fullName: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream()
  overload: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream*
  type: Method
  package: com.azure.storage.blob.specialized.cryptography
  summary: Creates and opens an output stream to write data to the block blob.
  syntax:
    content: public BlobOutputStream getBlobOutputStream()
    return:
      type: com.azure.storage.blob.specialized.BlobOutputStream
      description: A <xref uid="com.azure.storage.blob.specialized.BlobOutputStream" data-throw-if-not-resolved="false">BlobOutputStream</xref> object used to write data to the blob.
- uid: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream(boolean)
  id: getBlobOutputStream(boolean)
  artifact: com.azure:azure-storage-blob-cryptography:12.7.0
  parent: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient
  langs:
  - java
  name: getBlobOutputStream(boolean overwrite)
  nameWithType: EncryptedBlobClient.getBlobOutputStream(boolean overwrite)
  fullName: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream(boolean overwrite)
  overload: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream*
  type: Method
  package: com.azure.storage.blob.specialized.cryptography
  summary: Creates and opens an output stream to write data to the block blob.
  syntax:
    content: public BlobOutputStream getBlobOutputStream(boolean overwrite)
    parameters:
    - id: overwrite
      type: boolean
      description: Whether or not to overwrite, should data exist on the blob.
    return:
      type: com.azure.storage.blob.specialized.BlobOutputStream
      description: A <xref uid="com.azure.storage.blob.specialized.BlobOutputStream" data-throw-if-not-resolved="false">BlobOutputStream</xref> object used to write data to the blob.
- uid: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream(com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions)
  id: getBlobOutputStream(com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions)
  artifact: com.azure:azure-storage-blob-cryptography:12.7.0
  parent: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient
  langs:
  - java
  name: getBlobOutputStream(ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)
  nameWithType: EncryptedBlobClient.getBlobOutputStream(ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)
  fullName: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream(ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)
  overload: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream*
  type: Method
  package: com.azure.storage.blob.specialized.cryptography
  summary: >-
    Creates and opens an output stream to write data to the block blob. If the blob already exists on the service, it will be overwritten.


    To avoid overwriting, pass "\*" to <xref uid="com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch*" data-throw-if-not-resolved="false">BlobRequestConditions#setIfNoneMatch(String)</xref>.
  syntax:
    content: public BlobOutputStream getBlobOutputStream(ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)
    parameters:
    - id: parallelTransferOptions
      type: com.azure.storage.blob.models.ParallelTransferOptions
      description: <xref uid="com.azure.storage.blob.models.ParallelTransferOptions" data-throw-if-not-resolved="false">ParallelTransferOptions</xref> used to configure buffered uploading.
    - id: headers
      type: com.azure.storage.blob.models.BlobHttpHeaders
      description: <xref uid="com.azure.storage.blob.models.BlobHttpHeaders" data-throw-if-not-resolved="false">BlobHttpHeaders</xref>
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the blob.
    - id: tier
      type: com.azure.storage.blob.models.AccessTier
      description: <xref uid="com.azure.storage.blob.models.AccessTier" data-throw-if-not-resolved="false">AccessTier</xref> for the destination blob.
    - id: requestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref>
    return:
      type: com.azure.storage.blob.specialized.BlobOutputStream
      description: A <xref uid="com.azure.storage.blob.specialized.BlobOutputStream" data-throw-if-not-resolved="false">BlobOutputStream</xref> object used to write data to the blob.
- uid: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlockBlobClient()
  id: getBlockBlobClient()
  artifact: com.azure:azure-storage-blob-cryptography:12.7.0
  parent: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient
  langs:
  - java
  name: getBlockBlobClient()
  nameWithType: EncryptedBlobClient.getBlockBlobClient()
  fullName: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlockBlobClient()
  overload: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlockBlobClient*
  type: Method
  package: com.azure.storage.blob.specialized.cryptography
  summary: Unsupported.
  syntax:
    content: public BlockBlobClient getBlockBlobClient()
    return:
      type: com.azure.storage.blob.specialized.BlockBlobClient
- uid: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getPageBlobClient()
  id: getPageBlobClient()
  artifact: com.azure:azure-storage-blob-cryptography:12.7.0
  parent: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient
  langs:
  - java
  name: getPageBlobClient()
  nameWithType: EncryptedBlobClient.getPageBlobClient()
  fullName: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getPageBlobClient()
  overload: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getPageBlobClient*
  type: Method
  package: com.azure.storage.blob.specialized.cryptography
  summary: Unsupported.
  syntax:
    content: public PageBlobClient getPageBlobClient()
    return:
      type: com.azure.storage.blob.specialized.PageBlobClient
- uid: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile(java.lang.String)
  id: uploadFromFile(java.lang.String)
  artifact: com.azure:azure-storage-blob-cryptography:12.7.0
  parent: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient
  langs:
  - java
  name: uploadFromFile(String filePath)
  nameWithType: EncryptedBlobClient.uploadFromFile(String filePath)
  fullName: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile(String filePath)
  overload: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile*
  type: Method
  package: com.azure.storage.blob.specialized.cryptography
  summary: >-
    Creates a new block blob, or updates the content of an existing block blob.


    **Code Samples**


    ```java

    try {
         client.uploadFromFile(filePath);
         System.out.println("Upload from file succeeded");
     } catch (UncheckedIOException ex) {
         System.err.printf("Failed to upload from file %s%n", ex.getMessage());
     }
    ```
  syntax:
    content: public void uploadFromFile(String filePath)
    parameters:
    - id: filePath
      type: java.lang.String
      description: Path of the file to upload
- uid: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile(java.lang.String,boolean)
  id: uploadFromFile(java.lang.String,boolean)
  artifact: com.azure:azure-storage-blob-cryptography:12.7.0
  parent: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient
  langs:
  - java
  name: uploadFromFile(String filePath, boolean overwrite)
  nameWithType: EncryptedBlobClient.uploadFromFile(String filePath, boolean overwrite)
  fullName: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile(String filePath, boolean overwrite)
  overload: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile*
  type: Method
  package: com.azure.storage.blob.specialized.cryptography
  summary: >-
    Creates a new block blob, or updates the content of an existing block blob.


    **Code Samples**


    ```java

    try {
         boolean overwrite = false; // Default value
         client.uploadFromFile(filePath, overwrite);
         System.out.println("Upload from file succeeded");
     } catch (UncheckedIOException ex) {
         System.err.printf("Failed to upload from file %s%n", ex.getMessage());
     }
    ```
  syntax:
    content: public void uploadFromFile(String filePath, boolean overwrite)
    parameters:
    - id: filePath
      type: java.lang.String
      description: Path of the file to upload
    - id: overwrite
      type: boolean
      description: Whether or not to overwrite should data already exist on the blob
- uid: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile(java.lang.String,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
  id: uploadFromFile(java.lang.String,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
  artifact: com.azure:azure-storage-blob-cryptography:12.7.0
  parent: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient
  langs:
  - java
  name: uploadFromFile(String filePath, ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions, Duration timeout)
  nameWithType: EncryptedBlobClient.uploadFromFile(String filePath, ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions, Duration timeout)
  fullName: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile(String filePath, ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions, Duration timeout)
  overload: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile*
  type: Method
  package: com.azure.storage.blob.specialized.cryptography
  summary: "Creates a new block blob, or updates the content of an existing block blob.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentMd5(\"data\".getBytes(StandardCharsets.UTF_8))\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n \n Map<String, String> metadata = new HashMap<>(Collections.singletonMap(\"metadata\", \"value\"));\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n int blockSize = 100 * 1024 * 1024; // 100 MB;\n ParallelTransferOptions parallelTransferOptions = new ParallelTransferOptions(blockSize, null, null);\n \n try {\n     client.uploadFromFile(filePath, parallelTransferOptions, headers, metadata, AccessTier.HOT,\n         requestConditions, timeout);\n     System.out.println(\"Upload from file succeeded\");\n } catch (UncheckedIOException ex) {\n     System.err.printf(\"Failed to upload from file %s%n\", ex.getMessage());\n }\n```"
  syntax:
    content: public void uploadFromFile(String filePath, ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions, Duration timeout)
    parameters:
    - id: filePath
      type: java.lang.String
      description: Path of the file to upload
    - id: parallelTransferOptions
      type: com.azure.storage.blob.models.ParallelTransferOptions
      description: >-
        <xref uid="com.azure.storage.blob.models.ParallelTransferOptions" data-throw-if-not-resolved="false">ParallelTransferOptions</xref> to use to upload from file. Number of parallel
                transfers parameter is ignored.
    - id: headers
      type: com.azure.storage.blob.models.BlobHttpHeaders
      description: <xref uid="com.azure.storage.blob.models.BlobHttpHeaders" data-throw-if-not-resolved="false">BlobHttpHeaders</xref>
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the blob.
    - id: tier
      type: com.azure.storage.blob.models.AccessTier
      description: <xref uid="com.azure.storage.blob.models.AccessTier" data-throw-if-not-resolved="false">AccessTier</xref> for the uploaded blob
    - id: requestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref>
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
  exceptions:
  - type: java.io.UncheckedIOException
    description: If an I/O error occurs
references:
- uid: com.azure.storage.blob.specialized.cryptography.EncryptedBlobAsyncClient
  name: EncryptedBlobAsyncClient
  nameWithType: EncryptedBlobAsyncClient
  fullName: com.azure.storage.blob.specialized.cryptography.EncryptedBlobAsyncClient
- uid: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.EncryptedBlobClient*
  name: EncryptedBlobClient
  nameWithType: EncryptedBlobClient.EncryptedBlobClient
  fullName: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.EncryptedBlobClient
  package: com.azure.storage.blob.specialized.cryptography
- uid: com.azure.storage.blob.specialized.BlobOutputStream
  spec.java:
  - uid: com.azure.storage.blob.specialized.BlobOutputStream
    name: BlobOutputStream
    fullName: com.azure.storage.blob.specialized.BlobOutputStream
- uid: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream*
  name: getBlobOutputStream
  nameWithType: EncryptedBlobClient.getBlobOutputStream
  fullName: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlobOutputStream
  package: com.azure.storage.blob.specialized.cryptography
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.storage.blob.models.ParallelTransferOptions
  spec.java:
  - uid: com.azure.storage.blob.models.ParallelTransferOptions
    name: ParallelTransferOptions
    fullName: com.azure.storage.blob.models.ParallelTransferOptions
- uid: com.azure.storage.blob.models.BlobHttpHeaders
  spec.java:
  - uid: com.azure.storage.blob.models.BlobHttpHeaders
    name: BlobHttpHeaders
    fullName: com.azure.storage.blob.models.BlobHttpHeaders
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.models.AccessTier
  spec.java:
  - uid: com.azure.storage.blob.models.AccessTier
    name: AccessTier
    fullName: com.azure.storage.blob.models.AccessTier
- uid: com.azure.storage.blob.models.BlobRequestConditions
  spec.java:
  - uid: com.azure.storage.blob.models.BlobRequestConditions
    name: BlobRequestConditions
    fullName: com.azure.storage.blob.models.BlobRequestConditions
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile*
  name: uploadFromFile
  nameWithType: EncryptedBlobClient.uploadFromFile
  fullName: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.uploadFromFile
  package: com.azure.storage.blob.specialized.cryptography
- uid: java.io.UncheckedIOException
  spec.java:
  - uid: java.io.UncheckedIOException
    name: UncheckedIOException
    fullName: java.io.UncheckedIOException
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: com.azure.storage.blob.specialized.AppendBlobClient
  spec.java:
  - uid: com.azure.storage.blob.specialized.AppendBlobClient
    name: AppendBlobClient
    fullName: com.azure.storage.blob.specialized.AppendBlobClient
- uid: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getAppendBlobClient*
  name: getAppendBlobClient
  nameWithType: EncryptedBlobClient.getAppendBlobClient
  fullName: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getAppendBlobClient
  package: com.azure.storage.blob.specialized.cryptography
- uid: com.azure.storage.blob.specialized.BlockBlobClient
  spec.java:
  - uid: com.azure.storage.blob.specialized.BlockBlobClient
    name: BlockBlobClient
    fullName: com.azure.storage.blob.specialized.BlockBlobClient
- uid: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlockBlobClient*
  name: getBlockBlobClient
  nameWithType: EncryptedBlobClient.getBlockBlobClient
  fullName: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getBlockBlobClient
  package: com.azure.storage.blob.specialized.cryptography
- uid: com.azure.storage.blob.specialized.PageBlobClient
  spec.java:
  - uid: com.azure.storage.blob.specialized.PageBlobClient
    name: PageBlobClient
    fullName: com.azure.storage.blob.specialized.PageBlobClient
- uid: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getPageBlobClient*
  name: getPageBlobClient
  nameWithType: EncryptedBlobClient.getPageBlobClient
  fullName: com.azure.storage.blob.specialized.cryptography.EncryptedBlobClient.getPageBlobClient
  package: com.azure.storage.blob.specialized.cryptography
- uid: com.azure.storage.blob.BlobClient
  name: BlobClient
  nameWithType: BlobClient
  fullName: com.azure.storage.blob.BlobClient
- uid: com.azure.storage.blob.specialized.BlobClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)
  name: BlobClientBase.generateSas(BlobServiceSasSignatureValues)
  nameWithType: BlobClientBase.generateSas(BlobServiceSasSignatureValues)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.storage.blob.BlobClient.getAppendBlobClient()
  name: BlobClient.getAppendBlobClient()
  nameWithType: BlobClient.getAppendBlobClient()
  fullName: com.azure.storage.blob.BlobClient.getAppendBlobClient()
- uid: com.azure.storage.blob.specialized.BlobClientBase.exists()
  name: BlobClientBase.exists()
  nameWithType: BlobClientBase.exists()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.exists()
- uid: com.azure.storage.blob.specialized.BlobClientBase.setAccessTier(com.azure.storage.blob.models.AccessTier)
  name: BlobClientBase.setAccessTier(AccessTier)
  nameWithType: BlobClientBase.setAccessTier(AccessTier)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.setAccessTier(com.azure.storage.blob.models.AccessTier)
- uid: com.azure.storage.blob.specialized.BlobClientBase.setHttpHeaders(com.azure.storage.blob.models.BlobHttpHeaders)
  name: BlobClientBase.setHttpHeaders(BlobHttpHeaders)
  nameWithType: BlobClientBase.setHttpHeaders(BlobHttpHeaders)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.setHttpHeaders(com.azure.storage.blob.models.BlobHttpHeaders)
- uid: com.azure.storage.blob.BlobClient.uploadFromFile(java.lang.String,boolean)
  name: BlobClient.uploadFromFile(String,boolean)
  nameWithType: BlobClient.uploadFromFile(String,boolean)
  fullName: com.azure.storage.blob.BlobClient.uploadFromFile(java.lang.String,boolean)
- uid: com.azure.storage.blob.specialized.BlobClientBase.abortCopyFromUrlWithResponse(java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.abortCopyFromUrlWithResponse(String,String,Duration,Context)
  nameWithType: BlobClientBase.abortCopyFromUrlWithResponse(String,String,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.abortCopyFromUrlWithResponse(java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.download(java.io.OutputStream)
  name: BlobClientBase.download(OutputStream)
  nameWithType: BlobClientBase.download(OutputStream)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.download(java.io.OutputStream)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.azure.storage.blob.specialized.BlobClientBase.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.createSnapshotWithResponse(Map<String,String>,BlobRequestConditions,Duration,Context)
  nameWithType: BlobClientBase.createSnapshotWithResponse(Map<String,String>,BlobRequestConditions,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.storage.blob.specialized.BlobClientBase.undeleteWithResponse(java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.undeleteWithResponse(Duration,Context)
  nameWithType: BlobClientBase.undeleteWithResponse(Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.undeleteWithResponse(java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.getBlobUrl()
  name: BlobClientBase.getBlobUrl()
  nameWithType: BlobClientBase.getBlobUrl()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getBlobUrl()
- uid: com.azure.storage.blob.specialized.BlobClientBase.downloadWithResponse(java.io.OutputStream,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.downloadWithResponse(OutputStream,BlobRange,DownloadRetryOptions,BlobRequestConditions,boolean,Duration,Context)
  nameWithType: BlobClientBase.downloadWithResponse(OutputStream,BlobRange,DownloadRetryOptions,BlobRequestConditions,boolean,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.downloadWithResponse(java.io.OutputStream,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.azure.storage.blob.specialized.BlobClientBase.getBlobName()
  name: BlobClientBase.getBlobName()
  nameWithType: BlobClientBase.getBlobName()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getBlobName()
- uid: com.azure.storage.blob.specialized.BlobClientBase.getAccountInfoWithResponse(java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.getAccountInfoWithResponse(Duration,Context)
  nameWithType: BlobClientBase.getAccountInfoWithResponse(Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getAccountInfoWithResponse(java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.copyFromUrl(java.lang.String)
  name: BlobClientBase.copyFromUrl(String)
  nameWithType: BlobClientBase.copyFromUrl(String)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.copyFromUrl(java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobClientBase.getHttpPipeline()
  name: BlobClientBase.getHttpPipeline()
  nameWithType: BlobClientBase.getHttpPipeline()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getHttpPipeline()
- uid: com.azure.storage.blob.specialized.BlobClientBase.openInputStream()
  name: BlobClientBase.openInputStream()
  nameWithType: BlobClientBase.openInputStream()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.openInputStream()
- uid: com.azure.storage.blob.specialized.BlobClientBase.getSnapshotId()
  name: BlobClientBase.getSnapshotId()
  nameWithType: BlobClientBase.getSnapshotId()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getSnapshotId()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.azure.storage.blob.specialized.BlobClientBase.setAccessTierWithResponse(com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.setAccessTierWithResponse(AccessTier,RehydratePriority,String,Duration,Context)
  nameWithType: BlobClientBase.setAccessTierWithResponse(AccessTier,RehydratePriority,String,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.setAccessTierWithResponse(com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.lang.String,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean,Set<OpenOption>,Duration,Context)
  nameWithType: BlobClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean,Set<OpenOption>,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.getProperties()
  name: BlobClientBase.getProperties()
  nameWithType: BlobClientBase.getProperties()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getProperties()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.storage.blob.specialized.BlobClientBase.abortCopyFromUrl(java.lang.String)
  name: BlobClientBase.abortCopyFromUrl(String)
  nameWithType: BlobClientBase.abortCopyFromUrl(String)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.abortCopyFromUrl(java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobClientBase.getCustomerProvidedKey()
  name: BlobClientBase.getCustomerProvidedKey()
  nameWithType: BlobClientBase.getCustomerProvidedKey()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getCustomerProvidedKey()
- uid: com.azure.storage.blob.specialized.BlobClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)
  name: BlobClientBase.generateUserDelegationSas(BlobServiceSasSignatureValues,UserDelegationKey)
  nameWithType: BlobClientBase.generateUserDelegationSas(BlobServiceSasSignatureValues,UserDelegationKey)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)
- uid: com.azure.storage.blob.specialized.BlobClientBase.setHttpHeadersWithResponse(com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.setHttpHeadersWithResponse(BlobHttpHeaders,BlobRequestConditions,Duration,Context)
  nameWithType: BlobClientBase.setHttpHeadersWithResponse(BlobHttpHeaders,BlobRequestConditions,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.setHttpHeadersWithResponse(com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  name: BlobClientBase.setMetadata(Map<String,String>)
  nameWithType: BlobClientBase.setMetadata(Map<String,String>)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
- uid: com.azure.storage.blob.specialized.BlobClientBase.deleteWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.deleteWithResponse(DeleteSnapshotsOptionType,BlobRequestConditions,Duration,Context)
  nameWithType: BlobClientBase.deleteWithResponse(DeleteSnapshotsOptionType,BlobRequestConditions,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.deleteWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.BlobClient.getBlockBlobClient()
  name: BlobClient.getBlockBlobClient()
  nameWithType: BlobClient.getBlockBlobClient()
  fullName: com.azure.storage.blob.BlobClient.getBlockBlobClient()
- uid: com.azure.storage.blob.specialized.BlobClientBase.undelete()
  name: BlobClientBase.undelete()
  nameWithType: BlobClientBase.undelete()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.undelete()
- uid: com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
  name: BlobClientBase.beginCopy(String,Map<String,String>,AccessTier,RehydratePriority,RequestConditions,BlobRequestConditions,Duration)
  nameWithType: BlobClientBase.beginCopy(String,Map<String,String>,AccessTier,RehydratePriority,RequestConditions,BlobRequestConditions,Duration)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
- uid: com.azure.storage.blob.specialized.BlobClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.copyFromUrlWithResponse(String,Map<String,String>,AccessTier,RequestConditions,BlobRequestConditions,Duration,Context)
  nameWithType: BlobClientBase.copyFromUrlWithResponse(String,Map<String,String>,AccessTier,RequestConditions,BlobRequestConditions,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.getPropertiesWithResponse(com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.getPropertiesWithResponse(BlobRequestConditions,Duration,Context)
  nameWithType: BlobClientBase.getPropertiesWithResponse(BlobRequestConditions,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getPropertiesWithResponse(com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.BlobClient.uploadFromFile(java.lang.String)
  name: BlobClient.uploadFromFile(String)
  nameWithType: BlobClient.uploadFromFile(String)
  fullName: com.azure.storage.blob.BlobClient.uploadFromFile(java.lang.String)
- uid: com.azure.storage.blob.BlobClient.upload(java.io.InputStream,long)
  name: BlobClient.upload(InputStream,long)
  nameWithType: BlobClient.upload(InputStream,long)
  fullName: com.azure.storage.blob.BlobClient.upload(java.io.InputStream,long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String,boolean)
  name: BlobClientBase.downloadToFile(String,boolean)
  nameWithType: BlobClientBase.downloadToFile(String,boolean)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String,boolean)
- uid: com.azure.storage.blob.specialized.BlobClientBase.delete()
  name: BlobClientBase.delete()
  nameWithType: BlobClientBase.delete()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.delete()
- uid: com.azure.storage.blob.specialized.BlobClientBase.getAccountName()
  name: BlobClientBase.getAccountName()
  nameWithType: BlobClientBase.getAccountName()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getAccountName()
- uid: com.azure.storage.blob.BlobClient.getSnapshotClient(java.lang.String)
  name: BlobClient.getSnapshotClient(String)
  nameWithType: BlobClient.getSnapshotClient(String)
  fullName: com.azure.storage.blob.BlobClient.getSnapshotClient(java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobClientBase.getServiceVersion()
  name: BlobClientBase.getServiceVersion()
  nameWithType: BlobClientBase.getServiceVersion()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getServiceVersion()
- uid: com.azure.storage.blob.BlobClient.upload(java.io.InputStream,long,boolean)
  name: BlobClient.upload(InputStream,long,boolean)
  nameWithType: BlobClient.upload(InputStream,long,boolean)
  fullName: com.azure.storage.blob.BlobClient.upload(java.io.InputStream,long,boolean)
- uid: com.azure.storage.blob.specialized.BlobClientBase.createSnapshot()
  name: BlobClientBase.createSnapshot()
  nameWithType: BlobClientBase.createSnapshot()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.createSnapshot()
- uid: com.azure.storage.blob.BlobClient.uploadFromFile(java.lang.String,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
  name: BlobClient.uploadFromFile(String,ParallelTransferOptions,BlobHttpHeaders,Map<String,String>,AccessTier,BlobRequestConditions,Duration)
  nameWithType: BlobClient.uploadFromFile(String,ParallelTransferOptions,BlobHttpHeaders,Map<String,String>,AccessTier,BlobRequestConditions,Duration)
  fullName: com.azure.storage.blob.BlobClient.uploadFromFile(java.lang.String,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
- uid: com.azure.storage.blob.specialized.BlobClientBase.getContainerName()
  name: BlobClientBase.getContainerName()
  nameWithType: BlobClientBase.getContainerName()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getContainerName()
- uid: com.azure.storage.blob.specialized.BlobClientBase.getAccountInfo()
  name: BlobClientBase.getAccountInfo()
  nameWithType: BlobClientBase.getAccountInfo()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getAccountInfo()
- uid: com.azure.storage.blob.BlobClient.getPageBlobClient()
  name: BlobClient.getPageBlobClient()
  nameWithType: BlobClient.getPageBlobClient()
  fullName: com.azure.storage.blob.BlobClient.getPageBlobClient()
- uid: com.azure.storage.blob.specialized.BlobClientBase.isSnapshot()
  name: BlobClientBase.isSnapshot()
  nameWithType: BlobClientBase.isSnapshot()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.isSnapshot()
- uid: com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.time.Duration)
  name: BlobClientBase.beginCopy(String,Duration)
  nameWithType: BlobClientBase.beginCopy(String,Duration)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.time.Duration)
- uid: com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean,Duration,Context)
  nameWithType: BlobClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.BlobClient.uploadWithResponse(java.io.InputStream,long,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  name: BlobClient.uploadWithResponse(InputStream,long,ParallelTransferOptions,BlobHttpHeaders,Map<String,String>,AccessTier,BlobRequestConditions,Duration,Context)
  nameWithType: BlobClient.uploadWithResponse(InputStream,long,ParallelTransferOptions,BlobHttpHeaders,Map<String,String>,AccessTier,BlobRequestConditions,Duration,Context)
  fullName: com.azure.storage.blob.BlobClient.uploadWithResponse(java.io.InputStream,long,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.BlobClient.uploadWithResponse(com.azure.storage.blob.options.BlobParallelUploadOptions,com.azure.core.util.Context)
  name: BlobClient.uploadWithResponse(BlobParallelUploadOptions,Context)
  nameWithType: BlobClient.uploadWithResponse(BlobParallelUploadOptions,Context)
  fullName: com.azure.storage.blob.BlobClient.uploadWithResponse(com.azure.storage.blob.options.BlobParallelUploadOptions,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.setMetadataWithResponse(Map<String,String>,BlobRequestConditions,Duration,Context)
  nameWithType: BlobClientBase.setMetadataWithResponse(Map<String,String>,BlobRequestConditions,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.openInputStream(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.BlobRequestConditions)
  name: BlobClientBase.openInputStream(BlobRange,BlobRequestConditions)
  nameWithType: BlobClientBase.openInputStream(BlobRange,BlobRequestConditions)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.openInputStream(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.BlobRequestConditions)
- uid: com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String)
  name: BlobClientBase.downloadToFile(String)
  nameWithType: BlobClientBase.downloadToFile(String)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobClientBase.existsWithResponse(java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.existsWithResponse(Duration,Context)
  nameWithType: BlobClientBase.existsWithResponse(Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.existsWithResponse(java.time.Duration,com.azure.core.util.Context)
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  name: String,String>,BlobRequestConditions,Duration,Context)
  nameWithType: String,String>,BlobRequestConditions,Duration,Context)
  fullName: java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.createSnapshotWithResponse(java.util.Map
  name: BlobClientBase.createSnapshotWithResponse(Map
  nameWithType: BlobClientBase.createSnapshotWithResponse(Map
  fullName: com.azure.storage.blob.specialized.BlobClientBase.createSnapshotWithResponse(java.util.Map
- uid: com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set
  name: BlobClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean,Set
  nameWithType: BlobClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean,Set
  fullName: com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set
- uid: java.nio.file.OpenOption>,java.time.Duration,com.azure.core.util.Context)
  name: OpenOption>,Duration,Context)
  nameWithType: OpenOption>,Duration,Context)
  fullName: java.nio.file.OpenOption>,java.time.Duration,com.azure.core.util.Context)
- uid: java.lang.String,java.lang.String>)
  name: String,String>)
  nameWithType: String,String>)
  fullName: java.lang.String,java.lang.String>)
- uid: com.azure.storage.blob.specialized.BlobClientBase.setMetadata(java.util.Map
  name: BlobClientBase.setMetadata(Map
  nameWithType: BlobClientBase.setMetadata(Map
  fullName: com.azure.storage.blob.specialized.BlobClientBase.setMetadata(java.util.Map
- uid: com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.util.Map
  name: BlobClientBase.beginCopy(String,Map
  nameWithType: BlobClientBase.beginCopy(String,Map
  fullName: com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.util.Map
- uid: java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
  name: String,String>,AccessTier,RehydratePriority,RequestConditions,BlobRequestConditions,Duration)
  nameWithType: String,String>,AccessTier,RehydratePriority,RequestConditions,BlobRequestConditions,Duration)
  fullName: java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
- uid: java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  name: String,String>,AccessTier,RequestConditions,BlobRequestConditions,Duration,Context)
  nameWithType: String,String>,AccessTier,RequestConditions,BlobRequestConditions,Duration,Context)
  fullName: java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map
  name: BlobClientBase.copyFromUrlWithResponse(String,Map
  nameWithType: BlobClientBase.copyFromUrlWithResponse(String,Map
  fullName: com.azure.storage.blob.specialized.BlobClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map
- uid: com.azure.storage.blob.BlobClient.uploadFromFile(java.lang.String,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map
  name: BlobClient.uploadFromFile(String,ParallelTransferOptions,BlobHttpHeaders,Map
  nameWithType: BlobClient.uploadFromFile(String,ParallelTransferOptions,BlobHttpHeaders,Map
  fullName: com.azure.storage.blob.BlobClient.uploadFromFile(java.lang.String,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map
- uid: java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
  name: String,String>,AccessTier,BlobRequestConditions,Duration)
  nameWithType: String,String>,AccessTier,BlobRequestConditions,Duration)
  fullName: java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
- uid: java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  name: String,String>,AccessTier,BlobRequestConditions,Duration,Context)
  nameWithType: String,String>,AccessTier,BlobRequestConditions,Duration,Context)
  fullName: java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.BlobClient.uploadWithResponse(java.io.InputStream,long,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map
  name: BlobClient.uploadWithResponse(InputStream,long,ParallelTransferOptions,BlobHttpHeaders,Map
  nameWithType: BlobClient.uploadWithResponse(InputStream,long,ParallelTransferOptions,BlobHttpHeaders,Map
  fullName: com.azure.storage.blob.BlobClient.uploadWithResponse(java.io.InputStream,long,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map
- uid: com.azure.storage.blob.specialized.BlobClientBase.setMetadataWithResponse(java.util.Map
  name: BlobClientBase.setMetadataWithResponse(Map
  nameWithType: BlobClientBase.setMetadataWithResponse(Map
  fullName: com.azure.storage.blob.specialized.BlobClientBase.setMetadataWithResponse(java.util.Map
