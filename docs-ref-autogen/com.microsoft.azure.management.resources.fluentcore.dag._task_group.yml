### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.management.resources.fluentcore.dag._task_group
  id: _task_group
  parent: com.microsoft.azure.management.resources.fluentcore.dag
  children:
  - com.microsoft.azure.management.resources.fluentcore.dag._task_group.executeAsync()
  - com.microsoft.azure.management.resources.fluentcore.dag._task_group.merge(TaskGroup<ResultT, TaskT>)
  - com.microsoft.azure.management.resources.fluentcore.dag._task_group.TaskGroup(String,TaskT,TaskGroupTerminateOnErrorStrategy)
  - com.microsoft.azure.management.resources.fluentcore.dag._task_group.taskResult(String)
  href: com.microsoft.azure.management.resources.fluentcore.dag._task_group.yml
  langs:
  - java
  name: TaskGroup<ResultT,TaskT>
  nameWithType: TaskGroup<ResultT,TaskT>
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup<ResultT,TaskT>
  type: Class
  source:
    remote: &o0
      path: azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/dag/TaskGroup.java
      branch: 880e2022bf46b71f481107effb7c878a9ae065dd
      repo: https://github.com/Azure/azure-sdk-for-java
    path: azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/dag/TaskGroup.java
    startLine: 23
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: >-
    <p>Type representing a group of task entries, each entry holds a <xref uid="com.microsoft.azure.management.resources.fluentcore.dag._task_item" data-throw-if-not-resolved="false">TaskItem</xref> and associated dependency information.</p>

    <p></p>
  syntax: &o1
    content: public class TaskGroup<ResultT,TaskT extends TaskItem<ResultT>> extends DAGraph<TaskT, TaskGroupEntry<ResultT, TaskT>>
    typeParameters:
    - type: 3741954b
      description: <p>type of the result returned by the tasks in the group </p>
    - type: 4be234a0
      description: <p>type of the tasks in the group that can return a value </p>
  inheritance:
  - java.lang.Object
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  inheritedMembers:
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.DAGraph(NodeT)
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.getNext()
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.getNode(String)
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.hasParent()
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.isPreparer()
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.isRootNode(NodeT)
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.merge(DAGraph<DataT, NodeT>)
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.mergeChildToParent(String,NodeT)
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.prepare()
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.reportCompletion(NodeT)
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.reportError(NodeT,Throwable)
- uid: com.microsoft.azure.management.resources.fluentcore.dag._task_group.executeAsync()
  id: executeAsync()
  parent: com.microsoft.azure.management.resources.fluentcore.dag._task_group
  href: com.microsoft.azure.management.resources.fluentcore.dag._task_group.yml
  langs:
  - java
  name: executeAsync()
  nameWithType: TaskGroup<ResultT,TaskT>.executeAsync()
  fullName: Observable<ResultT> com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup<ResultT, TaskT extends TaskItem<ResultT>.executeAsync()
  overload: com.microsoft.azure.management.resources.fluentcore.dag._task_group.executeAsync*
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/dag/TaskGroup.java
    startLine: 96
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: >-
    <p>Executes tasks in the group.</p>

    <p></p>
  syntax:
    content: public Observable<ResultT> executeAsync()
    return:
      type: 6d580de8
      description: <p>an observable that emits the result of tasks in the order they finishes. </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._task_group.merge(TaskGroup<ResultT, TaskT>)
  id: merge(TaskGroup<ResultT, TaskT>)
  parent: com.microsoft.azure.management.resources.fluentcore.dag._task_group
  href: com.microsoft.azure.management.resources.fluentcore.dag._task_group.yml
  langs:
  - java
  name: merge(TaskGroup<ResultT, TaskT> parentTaskGroup)
  nameWithType: TaskGroup<ResultT,TaskT>.merge(TaskGroup<ResultT, TaskT> parentTaskGroup)
  fullName: void com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup<ResultT, TaskT extends TaskItem<ResultT>.merge(TaskGroup<ResultT, TaskT> parentTaskGroup)
  overload: com.microsoft.azure.management.resources.fluentcore.dag._task_group.merge*
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/dag/TaskGroup.java
    startLine: 87
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: >-
    <p>Merge this group with the given group containing root task depends on this group.</p>

    <p></p>
  syntax:
    content: public void merge(TaskGroup<ResultT, TaskT> parentTaskGroup)
    parameters:
    - id: parentTaskGroup
      type: com.microsoft.azure.management.resources.fluentcore.dag._task_group3e9783fd
      description: <p>the parent task group </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._task_group.TaskGroup(String,TaskT,TaskGroupTerminateOnErrorStrategy)
  id: TaskGroup(String,TaskT,TaskGroupTerminateOnErrorStrategy)
  parent: com.microsoft.azure.management.resources.fluentcore.dag._task_group
  href: com.microsoft.azure.management.resources.fluentcore.dag._task_group.yml
  langs:
  - java
  name: TaskGroup(String rootTaskItemId, TaskT rootTaskItem, TaskGroupTerminateOnErrorStrategy taskGroupTerminateOnErrorStrategy)
  nameWithType: TaskGroup<ResultT,TaskT>.TaskGroup(String rootTaskItemId, TaskT rootTaskItem, TaskGroupTerminateOnErrorStrategy taskGroupTerminateOnErrorStrategy)
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup<ResultT, TaskT extends TaskItem<ResultT>.TaskGroup(String rootTaskItemId, TaskT rootTaskItem, TaskGroupTerminateOnErrorStrategy taskGroupTerminateOnErrorStrategy)
  overload: com.microsoft.azure.management.resources.fluentcore.dag._task_group.TaskGroup*
  type: Constructor
  source:
    remote: *o0
    path: azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/dag/TaskGroup.java
    startLine: 62
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: >-
    <p>Creates <xref uid="com.microsoft.azure.management.resources.fluentcore.dag._task_group" data-throw-if-not-resolved="false">TaskGroup</xref>.</p>

    <p></p>
  syntax:
    content: public TaskGroup(String rootTaskItemId, TaskT rootTaskItem, TaskGroupTerminateOnErrorStrategy taskGroupTerminateOnErrorStrategy)
    parameters:
    - id: rootTaskItemId
      type: "26831127"
      description: <p>the id of the root task in the group </p>
    - id: rootTaskItem
      type: 4be234a0
      description: <p>the root task </p>
    - id: taskGroupTerminateOnErrorStrategy
      type: com.microsoft.azure.management.resources.fluentcore.dag._task_group_terminate_on_error_strategy
      description: <p>group termination strategy to be used on error </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._task_group.taskResult(String)
  id: taskResult(String)
  parent: com.microsoft.azure.management.resources.fluentcore.dag._task_group
  href: com.microsoft.azure.management.resources.fluentcore.dag._task_group.yml
  langs:
  - java
  name: taskResult(String taskId)
  nameWithType: TaskGroup<ResultT,TaskT>.taskResult(String taskId)
  fullName: ResultT com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup<ResultT, TaskT extends TaskItem<ResultT>.taskResult(String taskId)
  overload: com.microsoft.azure.management.resources.fluentcore.dag._task_group.taskResult*
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/dag/TaskGroup.java
    startLine: 74
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: >-
    <p>Gets the result produced by a task in the group.</p>

    <p></p>
  syntax:
    content: public ResultT taskResult(String taskId)
    parameters:
    - id: taskId
      type: "26831127"
      description: <p>the task item id </p>
    return:
      type: 3741954b
      description: <p>the task result, null will be returned if task has not yet been executed </p>
references:
- uid: 3741954b
  spec.java:
  - name: ResultT
    fullName: ResultT
- uid: 4be234a0
  spec.java:
  - name: TaskT
    fullName: TaskT
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.management.resources.fluentcore.dag._task_group.TaskGroup*
  name: TaskGroup
  nameWithType: TaskGroup<ResultT,TaskT>.TaskGroup
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup<ResultT, TaskT extends TaskItem<ResultT>.TaskGroup
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: com.microsoft.azure.management.resources.fluentcore.dag._task_group.taskResult*
  name: taskResult
  nameWithType: TaskGroup<ResultT,TaskT>.taskResult
  fullName: ResultT com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup<ResultT, TaskT extends TaskItem<ResultT>.taskResult
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: com.microsoft.azure.management.resources.fluentcore.dag._task_group3e9783fd
  spec.java:
  - uid: com.microsoft.azure.management.resources.fluentcore.dag._task_group
    name: TaskGroup
    fullName: com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup
    href: com.microsoft.azure.management.resources.fluentcore.dag._task_group.yml
  - name: <ResultT, TaskT>
    fullName: <ResultT, TaskT>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._task_group.merge*
  name: merge
  nameWithType: TaskGroup<ResultT,TaskT>.merge
  fullName: void com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup<ResultT, TaskT extends TaskItem<ResultT>.merge
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: 6d580de8
  spec.java:
  - name: Observable<ResultT>
    fullName: Observable<ResultT>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._task_group.executeAsync*
  name: executeAsync
  nameWithType: TaskGroup<ResultT,TaskT>.executeAsync
  fullName: Observable<ResultT> com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup<ResultT, TaskT extends TaskItem<ResultT>.executeAsync
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.DAGraph(NodeT)
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  name: DAGraph(NodeT rootNode)
  nameWithType: DAGraph<DataT,NodeT,NodeT>.DAGraph(NodeT rootNode)
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.DAGraph(NodeT rootNode)
  type: Constructor
  summary: >-
    <p>Creates a new DAG.</p>

    <p></p>
  syntax:
    content: public DAGraph(NodeT rootNode)
    parameters:
    - id: rootNode
      type: 3166dcd3
      description: <p>the root node of this DAG </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.getNext()
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  name: getNext()
  nameWithType: DAGraph<DataT,NodeT,NodeT>.getNext()
  fullName: NodeT com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.getNext()
  type: Method
  summary: >-
    <p>Gets next node in the DAG which has no dependency or all of it's dependencies are resolved and ready to be consumed.</p>

    <p></p>
  syntax:
    content: public NodeT getNext()
    return:
      type: 3166dcd3
      description: <p>next node or null if all the nodes have been explored or no node is available at this moment. </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.getNode(String)
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  name: getNode(String key)
  nameWithType: DAGraph<DataT,NodeT,NodeT>.getNode(String key)
  fullName: NodeT com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.getNode(String key)
  type: Method
  summary: <p>Gets a node from the graph with the given key. </p>
  syntax:
    content: public NodeT getNode(String key)
    parameters:
    - id: key
      type: "26831127"
      description: <p>the key of the node </p>
    return:
      type: 3166dcd3
      description: <p>the node </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.hasParent()
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  name: hasParent()
  nameWithType: DAGraph<DataT,NodeT,NodeT>.hasParent()
  fullName: boolean com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.hasParent()
  type: Method
  syntax:
    content: public boolean hasParent()
    return:
      type: 4fc6e284
      description: >-
        <p>

          <code>true</code> if this DAG is merged with another DAG and hence has a parent </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.isPreparer()
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  name: isPreparer()
  nameWithType: DAGraph<DataT,NodeT,NodeT>.isPreparer()
  fullName: boolean com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.isPreparer()
  type: Method
  syntax:
    content: public boolean isPreparer()
    return:
      type: 4fc6e284
      description: >-
        <p>

          <code>true</code> if this dag is the preparer responsible for preparing the DAG for traversal. </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.isRootNode(NodeT)
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  name: isRootNode(NodeT node)
  nameWithType: DAGraph<DataT,NodeT,NodeT>.isRootNode(NodeT node)
  fullName: boolean com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.isRootNode(NodeT node)
  type: Method
  summary: >-
    <p>Checks whether the given node is root node of this DAG.</p>

    <p></p>
  syntax:
    content: public boolean isRootNode(NodeT node)
    parameters:
    - id: node
      type: 3166dcd3
      description: <p>the node <xref uid="com.microsoft.azure.management.resources.fluentcore.dag._d_a_g_node" data-throw-if-not-resolved="false">DAGNode</xref> to be checked </p>
    return:
      type: 4fc6e284
      description: >-
        <p>

          <code>true</code> if the given node is root node </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.merge(DAGraph<DataT, NodeT>)
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  name: merge(DAGraph<DataT, NodeT> parent)
  nameWithType: DAGraph<DataT,NodeT,NodeT>.merge(DAGraph<DataT, NodeT> parent)
  fullName: void com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.merge(DAGraph<DataT, NodeT> parent)
  type: Method
  summary: >-
    <p>Merge this DAG with another DAG. </p>

    <p>This will mark this DAG as a child DAG, the dependencies of nodes in this DAG will be merged with (copied to) the parent DAG</p>

    <p></p>
  syntax:
    content: public void merge(DAGraph<DataT, NodeT> parent)
    parameters:
    - id: parent
      type: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph513491d4
      description: <p>the parent DAG </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.mergeChildToParent(String,NodeT)
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  name: mergeChildToParent(String parentKey, NodeT childNode)
  nameWithType: DAGraph<DataT,NodeT,NodeT>.mergeChildToParent(String parentKey, NodeT childNode)
  fullName: void com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.mergeChildToParent(String parentKey, NodeT childNode)
  type: Method
  summary: >-
    <p>Merges DAG associated with childNode to DAG associated with a parent node of given key.</p>

    <p></p>
  syntax:
    content: public void mergeChildToParent(String parentKey, NodeT childNode)
    parameters:
    - id: parentKey
      type: "26831127"
      description: <p>the key of the parent node </p>
    - id: childNode
      type: 3166dcd3
      description: <p>the child node </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.prepare()
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  name: prepare()
  nameWithType: DAGraph<DataT,NodeT,NodeT>.prepare()
  fullName: void com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.prepare()
  type: Method
  summary: <p>Prepares this DAG for traversal using getNext method, each call to getNext returns next node in the DAG with no dependencies. </p>
  syntax:
    content: public void prepare()
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.reportCompletion(NodeT)
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  name: reportCompletion(NodeT completed)
  nameWithType: DAGraph<DataT,NodeT,NodeT>.reportCompletion(NodeT completed)
  fullName: void com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.reportCompletion(NodeT completed)
  type: Method
  summary: >-
    <p>Reports that a node is resolved hence other nodes depends on it can consume it.</p>

    <p></p>
  syntax:
    content: public void reportCompletion(NodeT completed)
    parameters:
    - id: completed
      type: 3166dcd3
      description: <p>the node ready to be consumed </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.reportError(NodeT,Throwable)
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  name: reportError(NodeT faulted, Throwable throwable)
  nameWithType: DAGraph<DataT,NodeT,NodeT>.reportError(NodeT faulted, Throwable throwable)
  fullName: void com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.reportError(NodeT faulted, Throwable throwable)
  type: Method
  summary: >-
    <p>Reports that a node is faulted.</p>

    <p></p>
  syntax:
    content: public void reportError(NodeT faulted, Throwable throwable)
    parameters:
    - id: faulted
      type: 3166dcd3
      description: <p>the node faulted </p>
    - id: throwable
      type: a04fafd7
      description: <p>the reason for fault </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  parent: com.microsoft.azure.management.resources.fluentcore.dag
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  name: DAGraph<DataT,NodeT,NodeT>
  nameWithType: DAGraph<DataT,NodeT,NodeT>
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT,NodeT,NodeT>
  type: Class
  summary: >-
    <p>Type representing a DAG (directed acyclic graph). </p>

    <p>each node in a DAG is represented by <xref uid="com.microsoft.azure.management.resources.fluentcore.dag._d_a_g_node" data-throw-if-not-resolved="false">DAGNode</xref></p>

    <p></p>
  syntax:
    content: public class DAGraph<DataT,NodeT extends DAGNode<DataT,NodeT>> extends Graph<DataT, NodeT>
    typeParameters:
    - type: 7aacc8e4
      description: <p>the type of the data stored in the graph nodes </p>
    - type: 3166dcd3
      description: <p>the type of the nodes in the graph </p>
    - type: 3166dcd3
      description: <p>the type of the nodes in the graph </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._task_item
  parent: com.microsoft.azure.management.resources.fluentcore.dag
  href: com.microsoft.azure.management.resources.fluentcore.dag._task_item.yml
  name: TaskItem<T>
  nameWithType: TaskItem<T>
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.TaskItem<T>
  type: Interface
  summary: >-
    <p>Type representing a task in a task group <xref uid="com.microsoft.azure.management.resources.fluentcore.dag._task_group" data-throw-if-not-resolved="false">TaskGroup</xref>.</p>

    <p></p>
  syntax:
    content: public interface TaskItem<T>
    typeParameters:
    - type: 8ce1ecb9
      description: <p>the task result type </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._task_group_terminate_on_error_strategy
  parent: com.microsoft.azure.management.resources.fluentcore.dag
  href: com.microsoft.azure.management.resources.fluentcore.dag._task_group_terminate_on_error_strategy.yml
  name: TaskGroupTerminateOnErrorStrategy
  nameWithType: TaskGroupTerminateOnErrorStrategy
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupTerminateOnErrorStrategy
  type: Enum
  summary: <p>Defines task group termination strategies to be used once a task error-ed. </p>
  syntax:
    content: public enum TaskGroupTerminateOnErrorStrategy
- uid: com.microsoft.azure.management.resources.fluentcore.dag._task_group_terminate_on_error_strategy.TERMINATE_ON_INPROGRESS_TASKS_COMPLETION
  parent: com.microsoft.azure.management.resources.fluentcore.dag._task_group_terminate_on_error_strategy
  href: com.microsoft.azure.management.resources.fluentcore.dag._task_group_terminate_on_error_strategy.yml
  name: TERMINATE_ON_INPROGRESS_TASKS_COMPLETION
  nameWithType: TaskGroupTerminateOnErrorStrategy.TERMINATE_ON_INPROGRESS_TASKS_COMPLETION
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupTerminateOnErrorStrategy.TERMINATE_ON_INPROGRESS_TASKS_COMPLETION
  type: Field
  summary: <p>Indicate that on task error, allows for any currently executing tasks to finish and emit onError terminal event with <xref uid="" data-throw-if-not-resolved="false">rx.exceptions.CompositeException</xref>. </p>
  syntax:
    content: public TERMINATE_ON_INPROGRESS_TASKS_COMPLETION
- uid: com.microsoft.azure.management.resources.fluentcore.dag._task_group
  parent: com.microsoft.azure.management.resources.fluentcore.dag
  href: com.microsoft.azure.management.resources.fluentcore.dag._task_group.yml
  name: TaskGroup<ResultT,TaskT>
  nameWithType: TaskGroup<ResultT,TaskT>
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup<ResultT,TaskT>
  type: Class
  summary: >-
    <p>Type representing a group of task entries, each entry holds a <xref uid="com.microsoft.azure.management.resources.fluentcore.dag._task_item" data-throw-if-not-resolved="false">TaskItem</xref> and associated dependency information.</p>

    <p></p>
  syntax: *o1
