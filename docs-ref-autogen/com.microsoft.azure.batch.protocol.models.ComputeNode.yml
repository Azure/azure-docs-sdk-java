### YamlMime:JavaType
uid: "com.microsoft.azure.batch.protocol.models.ComputeNode"
fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode"
name: "ComputeNode"
nameWithType: "ComputeNode"
summary: "A Compute Node in the Batch service."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class ComputeNode"
constructors:
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.ComputeNode()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.ComputeNode()"
  name: "ComputeNode()"
  nameWithType: "ComputeNode.ComputeNode()"
  syntax: "public ComputeNode()"
methods:
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.affinityId()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.affinityId()"
  name: "affinityId()"
  nameWithType: "ComputeNode.affinityId()"
  summary: "Get note that this is just a soft affinity."
  syntax: "public String affinityId()"
  desc: "Get note that this is just a soft affinity. If the target Compute Node is busy or unavailable at the time the Task is scheduled, then the Task will be scheduled elsewhere."
  returns:
    description: "the affinityId value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.allocationTime()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.allocationTime()"
  name: "allocationTime()"
  nameWithType: "ComputeNode.allocationTime()"
  summary: "Get this is the time when the Compute Node was initially allocated and doesn't change once set."
  syntax: "public DateTime allocationTime()"
  desc: "Get this is the time when the Compute Node was initially allocated and doesn't change once set. It is not updated when the Compute Node is service healed or preempted."
  returns:
    description: "the allocationTime value"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.certificateReferences()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.certificateReferences()"
  name: "certificateReferences()"
  nameWithType: "ComputeNode.certificateReferences()"
  summary: "Get for Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location."
  syntax: "public List<CertificateReference> certificateReferences()"
  desc: "Get for Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ\\_BATCH\\_CERTIFICATES\\_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/\\{user-name\\}/certs) and Certificates are placed in that directory."
  returns:
    description: "the certificateReferences value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CertificateReference?alt=com.microsoft.azure.batch.protocol.models.CertificateReference&text=CertificateReference\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.endpointConfiguration()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.endpointConfiguration()"
  name: "endpointConfiguration()"
  nameWithType: "ComputeNode.endpointConfiguration()"
  summary: "Get the endpoint<wbr>Configuration value."
  syntax: "public ComputeNodeEndpointConfiguration endpointConfiguration()"
  desc: "Get the endpointConfiguration value."
  returns:
    description: "the endpointConfiguration value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeEndpointConfiguration?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeEndpointConfiguration&text=ComputeNodeEndpointConfiguration\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.errors()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.errors()"
  name: "errors()"
  nameWithType: "ComputeNode.errors()"
  summary: "Get the errors value."
  syntax: "public List<ComputeNodeError> errors()"
  desc: "Get the errors value."
  returns:
    description: "the errors value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeError?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeError&text=ComputeNodeError\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.id()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.id()"
  name: "id()"
  nameWithType: "ComputeNode.id()"
  summary: "Get every Compute Node that is added to a Pool is assigned a unique ID."
  syntax: "public String id()"
  desc: "Get every Compute Node that is added to a Pool is assigned a unique ID. Whenever a Compute Node is removed from a Pool, all of its local files are deleted, and the ID is reclaimed and could be reused for new Compute Nodes."
  returns:
    description: "the id value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.ipAddress()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.ipAddress()"
  name: "ipAddress()"
  nameWithType: "ComputeNode.ipAddress()"
  summary: "Get every Compute Node that is added to a Pool is assigned a unique IP address."
  syntax: "public String ipAddress()"
  desc: "Get every Compute Node that is added to a Pool is assigned a unique IP address. Whenever a Compute Node is removed from a Pool, all of its local files are deleted, and the IP address is reclaimed and could be reused for new Compute Nodes."
  returns:
    description: "the ipAddress value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.isDedicated()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.isDedicated()"
  name: "isDedicated()"
  nameWithType: "ComputeNode.isDedicated()"
  summary: "Get the is<wbr>Dedicated value."
  syntax: "public Boolean isDedicated()"
  desc: "Get the isDedicated value."
  returns:
    description: "the isDedicated value"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.lastBootTime()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.lastBootTime()"
  name: "lastBootTime()"
  nameWithType: "ComputeNode.lastBootTime()"
  summary: "Get this property may not be present if the Compute Node state is unusable."
  syntax: "public DateTime lastBootTime()"
  desc: "Get this property may not be present if the Compute Node state is unusable."
  returns:
    description: "the lastBootTime value"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.nodeAgentInfo()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.nodeAgentInfo()"
  name: "nodeAgentInfo()"
  nameWithType: "ComputeNode.nodeAgentInfo()"
  summary: "Get the node<wbr>Agent<wbr>Info value."
  syntax: "public NodeAgentInformation nodeAgentInfo()"
  desc: "Get the nodeAgentInfo value."
  returns:
    description: "the nodeAgentInfo value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.NodeAgentInformation?alt=com.microsoft.azure.batch.protocol.models.NodeAgentInformation&text=NodeAgentInformation\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.recentTasks()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.recentTasks()"
  name: "recentTasks()"
  nameWithType: "ComputeNode.recentTasks()"
  summary: "Get this property is present only if at least one Task has run on this Compute Node since it was assigned to the Pool."
  syntax: "public List<TaskInformation> recentTasks()"
  desc: "Get this property is present only if at least one Task has run on this Compute Node since it was assigned to the Pool."
  returns:
    description: "the recentTasks value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskInformation?alt=com.microsoft.azure.batch.protocol.models.TaskInformation&text=TaskInformation\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.runningTaskSlotsCount()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.runningTaskSlotsCount()"
  name: "runningTaskSlotsCount()"
  nameWithType: "ComputeNode.runningTaskSlotsCount()"
  summary: "Get the running<wbr>Task<wbr>Slots<wbr>Count value."
  syntax: "public Integer runningTaskSlotsCount()"
  desc: "Get the runningTaskSlotsCount value."
  returns:
    description: "the runningTaskSlotsCount value"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.runningTasksCount()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.runningTasksCount()"
  name: "runningTasksCount()"
  nameWithType: "ComputeNode.runningTasksCount()"
  summary: "Get the running<wbr>Tasks<wbr>Count value."
  syntax: "public Integer runningTasksCount()"
  desc: "Get the runningTasksCount value."
  returns:
    description: "the runningTasksCount value"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.schedulingState()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.schedulingState()"
  name: "schedulingState()"
  nameWithType: "ComputeNode.schedulingState()"
  summary: "Get possible values include: 'enabled', 'disabled'."
  syntax: "public SchedulingState schedulingState()"
  desc: "Get possible values include: 'enabled', 'disabled'."
  returns:
    description: "the schedulingState value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.SchedulingState?alt=com.microsoft.azure.batch.protocol.models.SchedulingState&text=SchedulingState\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.startTask()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.startTask()"
  name: "startTask()"
  nameWithType: "ComputeNode.startTask()"
  summary: "Get the start<wbr>Task value."
  syntax: "public StartTask startTask()"
  desc: "Get the startTask value."
  returns:
    description: "the startTask value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.StartTask?alt=com.microsoft.azure.batch.protocol.models.StartTask&text=StartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.startTaskInfo()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.startTaskInfo()"
  name: "startTaskInfo()"
  nameWithType: "ComputeNode.startTaskInfo()"
  summary: "Get the start<wbr>Task<wbr>Info value."
  syntax: "public StartTaskInformation startTaskInfo()"
  desc: "Get the startTaskInfo value."
  returns:
    description: "the startTaskInfo value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.StartTaskInformation?alt=com.microsoft.azure.batch.protocol.models.StartTaskInformation&text=StartTaskInformation\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.state()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.state()"
  name: "state()"
  nameWithType: "ComputeNode.state()"
  summary: "Get the low-priority Compute Node has been preempted."
  syntax: "public ComputeNodeState state()"
  desc: "Get the low-priority Compute Node has been preempted. Tasks which were running on the Compute Node when it was preempted will be rescheduled when another Compute Node becomes available. Possible values include: 'idle', 'rebooting', 'reimaging', 'running', 'unusable', 'creating', 'starting', 'waitingForStartTask', 'startTaskFailed', 'unknown', 'leavingPool', 'offline', 'preempted'."
  returns:
    description: "the state value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeState?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeState&text=ComputeNodeState\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.stateTransitionTime()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.stateTransitionTime()"
  name: "stateTransitionTime()"
  nameWithType: "ComputeNode.stateTransitionTime()"
  summary: "Get the state<wbr>Transition<wbr>Time value."
  syntax: "public DateTime stateTransitionTime()"
  desc: "Get the stateTransitionTime value."
  returns:
    description: "the stateTransitionTime value"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.totalTasksRun()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.totalTasksRun()"
  name: "totalTasksRun()"
  nameWithType: "ComputeNode.totalTasksRun()"
  summary: "Get the total<wbr>Tasks<wbr>Run value."
  syntax: "public Integer totalTasksRun()"
  desc: "Get the totalTasksRun value."
  returns:
    description: "the totalTasksRun value"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.totalTasksSucceeded()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.totalTasksSucceeded()"
  name: "totalTasksSucceeded()"
  nameWithType: "ComputeNode.totalTasksSucceeded()"
  summary: "Get the total<wbr>Tasks<wbr>Succeeded value."
  syntax: "public Integer totalTasksSucceeded()"
  desc: "Get the totalTasksSucceeded value."
  returns:
    description: "the totalTasksSucceeded value"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.url()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.url()"
  name: "url()"
  nameWithType: "ComputeNode.url()"
  summary: "Get the url value."
  syntax: "public String url()"
  desc: "Get the url value."
  returns:
    description: "the url value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.vmSize()"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.vmSize()"
  name: "vmSize()"
  nameWithType: "ComputeNode.vmSize()"
  summary: "Get for information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.<wbr>microsoft.<wbr>com/azure/batch/batch-pool-vm-sizes)."
  syntax: "public String vmSize()"
  desc: "Get for information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes)."
  returns:
    description: "the vmSize value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withAffinityId(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withAffinityId(String affinityId)"
  name: "withAffinityId(String affinityId)"
  nameWithType: "ComputeNode.withAffinityId(String affinityId)"
  summary: "Set note that this is just a soft affinity."
  parameters:
  - description: "the affinityId value to set"
    name: "affinityId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ComputeNode withAffinityId(String affinityId)"
  desc: "Set note that this is just a soft affinity. If the target Compute Node is busy or unavailable at the time the Task is scheduled, then the Task will be scheduled elsewhere."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withAllocationTime(org.joda.time.DateTime)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withAllocationTime(DateTime allocationTime)"
  name: "withAllocationTime(DateTime allocationTime)"
  nameWithType: "ComputeNode.withAllocationTime(DateTime allocationTime)"
  summary: "Set this is the time when the Compute Node was initially allocated and doesn't change once set."
  parameters:
  - description: "the allocationTime value to set"
    name: "allocationTime"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ComputeNode withAllocationTime(DateTime allocationTime)"
  desc: "Set this is the time when the Compute Node was initially allocated and doesn't change once set. It is not updated when the Compute Node is service healed or preempted."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withCertificateReferences(java.util.List<com.microsoft.azure.batch.protocol.models.CertificateReference>)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withCertificateReferences(List<CertificateReference> certificateReferences)"
  name: "withCertificateReferences(List<CertificateReference> certificateReferences)"
  nameWithType: "ComputeNode.withCertificateReferences(List<CertificateReference> certificateReferences)"
  summary: "Set for Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location."
  parameters:
  - description: "the certificateReferences value to set"
    name: "certificateReferences"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CertificateReference?alt=com.microsoft.azure.batch.protocol.models.CertificateReference&text=CertificateReference\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ComputeNode withCertificateReferences(List<CertificateReference> certificateReferences)"
  desc: "Set for Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ\\_BATCH\\_CERTIFICATES\\_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/\\{user-name\\}/certs) and Certificates are placed in that directory."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withEndpointConfiguration(com.microsoft.azure.batch.protocol.models.ComputeNodeEndpointConfiguration)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withEndpointConfiguration(ComputeNodeEndpointConfiguration endpointConfiguration)"
  name: "withEndpointConfiguration(ComputeNodeEndpointConfiguration endpointConfiguration)"
  nameWithType: "ComputeNode.withEndpointConfiguration(ComputeNodeEndpointConfiguration endpointConfiguration)"
  summary: "Set the endpoint<wbr>Configuration value."
  parameters:
  - description: "the endpointConfiguration value to set"
    name: "endpointConfiguration"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeEndpointConfiguration?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeEndpointConfiguration&text=ComputeNodeEndpointConfiguration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ComputeNode withEndpointConfiguration(ComputeNodeEndpointConfiguration endpointConfiguration)"
  desc: "Set the endpointConfiguration value."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withErrors(java.util.List<com.microsoft.azure.batch.protocol.models.ComputeNodeError>)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withErrors(List<ComputeNodeError> errors)"
  name: "withErrors(List<ComputeNodeError> errors)"
  nameWithType: "ComputeNode.withErrors(List<ComputeNodeError> errors)"
  summary: "Set the errors value."
  parameters:
  - description: "the errors value to set"
    name: "errors"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeError?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeError&text=ComputeNodeError\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ComputeNode withErrors(List<ComputeNodeError> errors)"
  desc: "Set the errors value."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withId(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withId(String id)"
  name: "withId(String id)"
  nameWithType: "ComputeNode.withId(String id)"
  summary: "Set every Compute Node that is added to a Pool is assigned a unique ID."
  parameters:
  - description: "the id value to set"
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ComputeNode withId(String id)"
  desc: "Set every Compute Node that is added to a Pool is assigned a unique ID. Whenever a Compute Node is removed from a Pool, all of its local files are deleted, and the ID is reclaimed and could be reused for new Compute Nodes."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withIpAddress(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withIpAddress(String ipAddress)"
  name: "withIpAddress(String ipAddress)"
  nameWithType: "ComputeNode.withIpAddress(String ipAddress)"
  summary: "Set every Compute Node that is added to a Pool is assigned a unique IP address."
  parameters:
  - description: "the ipAddress value to set"
    name: "ipAddress"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ComputeNode withIpAddress(String ipAddress)"
  desc: "Set every Compute Node that is added to a Pool is assigned a unique IP address. Whenever a Compute Node is removed from a Pool, all of its local files are deleted, and the IP address is reclaimed and could be reused for new Compute Nodes."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withIsDedicated(java.lang.Boolean)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withIsDedicated(Boolean isDedicated)"
  name: "withIsDedicated(Boolean isDedicated)"
  nameWithType: "ComputeNode.withIsDedicated(Boolean isDedicated)"
  summary: "Set the is<wbr>Dedicated value."
  parameters:
  - description: "the isDedicated value to set"
    name: "isDedicated"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ComputeNode withIsDedicated(Boolean isDedicated)"
  desc: "Set the isDedicated value."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withLastBootTime(org.joda.time.DateTime)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withLastBootTime(DateTime lastBootTime)"
  name: "withLastBootTime(DateTime lastBootTime)"
  nameWithType: "ComputeNode.withLastBootTime(DateTime lastBootTime)"
  summary: "Set this property may not be present if the Compute Node state is unusable."
  parameters:
  - description: "the lastBootTime value to set"
    name: "lastBootTime"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ComputeNode withLastBootTime(DateTime lastBootTime)"
  desc: "Set this property may not be present if the Compute Node state is unusable."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withNodeAgentInfo(com.microsoft.azure.batch.protocol.models.NodeAgentInformation)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withNodeAgentInfo(NodeAgentInformation nodeAgentInfo)"
  name: "withNodeAgentInfo(NodeAgentInformation nodeAgentInfo)"
  nameWithType: "ComputeNode.withNodeAgentInfo(NodeAgentInformation nodeAgentInfo)"
  summary: "Set the node<wbr>Agent<wbr>Info value."
  parameters:
  - description: "the nodeAgentInfo value to set"
    name: "nodeAgentInfo"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.NodeAgentInformation?alt=com.microsoft.azure.batch.protocol.models.NodeAgentInformation&text=NodeAgentInformation\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ComputeNode withNodeAgentInfo(NodeAgentInformation nodeAgentInfo)"
  desc: "Set the nodeAgentInfo value."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withRecentTasks(java.util.List<com.microsoft.azure.batch.protocol.models.TaskInformation>)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withRecentTasks(List<TaskInformation> recentTasks)"
  name: "withRecentTasks(List<TaskInformation> recentTasks)"
  nameWithType: "ComputeNode.withRecentTasks(List<TaskInformation> recentTasks)"
  summary: "Set this property is present only if at least one Task has run on this Compute Node since it was assigned to the Pool."
  parameters:
  - description: "the recentTasks value to set"
    name: "recentTasks"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskInformation?alt=com.microsoft.azure.batch.protocol.models.TaskInformation&text=TaskInformation\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ComputeNode withRecentTasks(List<TaskInformation> recentTasks)"
  desc: "Set this property is present only if at least one Task has run on this Compute Node since it was assigned to the Pool."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withRunningTaskSlotsCount(java.lang.Integer)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withRunningTaskSlotsCount(Integer runningTaskSlotsCount)"
  name: "withRunningTaskSlotsCount(Integer runningTaskSlotsCount)"
  nameWithType: "ComputeNode.withRunningTaskSlotsCount(Integer runningTaskSlotsCount)"
  summary: "Set the running<wbr>Task<wbr>Slots<wbr>Count value."
  parameters:
  - description: "the runningTaskSlotsCount value to set"
    name: "runningTaskSlotsCount"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ComputeNode withRunningTaskSlotsCount(Integer runningTaskSlotsCount)"
  desc: "Set the runningTaskSlotsCount value."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withRunningTasksCount(java.lang.Integer)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withRunningTasksCount(Integer runningTasksCount)"
  name: "withRunningTasksCount(Integer runningTasksCount)"
  nameWithType: "ComputeNode.withRunningTasksCount(Integer runningTasksCount)"
  summary: "Set the running<wbr>Tasks<wbr>Count value."
  parameters:
  - description: "the runningTasksCount value to set"
    name: "runningTasksCount"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ComputeNode withRunningTasksCount(Integer runningTasksCount)"
  desc: "Set the runningTasksCount value."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withSchedulingState(com.microsoft.azure.batch.protocol.models.SchedulingState)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withSchedulingState(SchedulingState schedulingState)"
  name: "withSchedulingState(SchedulingState schedulingState)"
  nameWithType: "ComputeNode.withSchedulingState(SchedulingState schedulingState)"
  summary: "Set possible values include: 'enabled', 'disabled'."
  parameters:
  - description: "the schedulingState value to set"
    name: "schedulingState"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.SchedulingState?alt=com.microsoft.azure.batch.protocol.models.SchedulingState&text=SchedulingState\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ComputeNode withSchedulingState(SchedulingState schedulingState)"
  desc: "Set possible values include: 'enabled', 'disabled'."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withStartTask(com.microsoft.azure.batch.protocol.models.StartTask)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withStartTask(StartTask startTask)"
  name: "withStartTask(StartTask startTask)"
  nameWithType: "ComputeNode.withStartTask(StartTask startTask)"
  summary: "Set the start<wbr>Task value."
  parameters:
  - description: "the startTask value to set"
    name: "startTask"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.StartTask?alt=com.microsoft.azure.batch.protocol.models.StartTask&text=StartTask\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ComputeNode withStartTask(StartTask startTask)"
  desc: "Set the startTask value."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withStartTaskInfo(com.microsoft.azure.batch.protocol.models.StartTaskInformation)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withStartTaskInfo(StartTaskInformation startTaskInfo)"
  name: "withStartTaskInfo(StartTaskInformation startTaskInfo)"
  nameWithType: "ComputeNode.withStartTaskInfo(StartTaskInformation startTaskInfo)"
  summary: "Set the start<wbr>Task<wbr>Info value."
  parameters:
  - description: "the startTaskInfo value to set"
    name: "startTaskInfo"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.StartTaskInformation?alt=com.microsoft.azure.batch.protocol.models.StartTaskInformation&text=StartTaskInformation\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ComputeNode withStartTaskInfo(StartTaskInformation startTaskInfo)"
  desc: "Set the startTaskInfo value."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withState(com.microsoft.azure.batch.protocol.models.ComputeNodeState)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withState(ComputeNodeState state)"
  name: "withState(ComputeNodeState state)"
  nameWithType: "ComputeNode.withState(ComputeNodeState state)"
  summary: "Set the low-priority Compute Node has been preempted."
  parameters:
  - description: "the state value to set"
    name: "state"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeState?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeState&text=ComputeNodeState\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ComputeNode withState(ComputeNodeState state)"
  desc: "Set the low-priority Compute Node has been preempted. Tasks which were running on the Compute Node when it was preempted will be rescheduled when another Compute Node becomes available. Possible values include: 'idle', 'rebooting', 'reimaging', 'running', 'unusable', 'creating', 'starting', 'waitingForStartTask', 'startTaskFailed', 'unknown', 'leavingPool', 'offline', 'preempted'."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withStateTransitionTime(org.joda.time.DateTime)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withStateTransitionTime(DateTime stateTransitionTime)"
  name: "withStateTransitionTime(DateTime stateTransitionTime)"
  nameWithType: "ComputeNode.withStateTransitionTime(DateTime stateTransitionTime)"
  summary: "Set the state<wbr>Transition<wbr>Time value."
  parameters:
  - description: "the stateTransitionTime value to set"
    name: "stateTransitionTime"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ComputeNode withStateTransitionTime(DateTime stateTransitionTime)"
  desc: "Set the stateTransitionTime value."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withTotalTasksRun(java.lang.Integer)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withTotalTasksRun(Integer totalTasksRun)"
  name: "withTotalTasksRun(Integer totalTasksRun)"
  nameWithType: "ComputeNode.withTotalTasksRun(Integer totalTasksRun)"
  summary: "Set the total<wbr>Tasks<wbr>Run value."
  parameters:
  - description: "the totalTasksRun value to set"
    name: "totalTasksRun"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ComputeNode withTotalTasksRun(Integer totalTasksRun)"
  desc: "Set the totalTasksRun value."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withTotalTasksSucceeded(java.lang.Integer)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withTotalTasksSucceeded(Integer totalTasksSucceeded)"
  name: "withTotalTasksSucceeded(Integer totalTasksSucceeded)"
  nameWithType: "ComputeNode.withTotalTasksSucceeded(Integer totalTasksSucceeded)"
  summary: "Set the total<wbr>Tasks<wbr>Succeeded value."
  parameters:
  - description: "the totalTasksSucceeded value to set"
    name: "totalTasksSucceeded"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ComputeNode withTotalTasksSucceeded(Integer totalTasksSucceeded)"
  desc: "Set the totalTasksSucceeded value."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withUrl(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withUrl(String url)"
  name: "withUrl(String url)"
  nameWithType: "ComputeNode.withUrl(String url)"
  summary: "Set the url value."
  parameters:
  - description: "the url value to set"
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ComputeNode withUrl(String url)"
  desc: "Set the url value."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.ComputeNode.withVmSize(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.models.ComputeNode.withVmSize(String vmSize)"
  name: "withVmSize(String vmSize)"
  nameWithType: "ComputeNode.withVmSize(String vmSize)"
  summary: "Set for information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.<wbr>microsoft.<wbr>com/azure/batch/batch-pool-vm-sizes)."
  parameters:
  - description: "the vmSize value to set"
    name: "vmSize"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ComputeNode withVmSize(String vmSize)"
  desc: "Set for information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes)."
  returns:
    description: "the ComputeNode object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "A Compute Node in the Batch service."
metadata: {}
package: "com.microsoft.azure.batch.protocol.models"
artifact: com.microsoft.azure:azure-batch:9.0.0
