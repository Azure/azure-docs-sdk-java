### YamlMime:ManagedReference
items:
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  id: TextAnalyticsAsyncClient
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics
  children:
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment(java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment(java.lang.String,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage(java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage(java.lang.String,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.DetectLanguageInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases(java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases(java.lang.String,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultCountryHint()
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultLanguage()
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities(java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities(java.lang.String,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntities(java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntities(java.lang.String,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  langs:
  - java
  name: TextAnalyticsAsyncClient
  nameWithType: TextAnalyticsAsyncClient
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  type: Class
  package: com.azure.ai.textanalytics
  summary: >-
    This class provides an asynchronous client that contains all the operations that apply to Azure Text Analytics. Operations allowed by the client are language detection, entities recognition, linked entities recognition, key phrases extraction, and sentiment analysis of a document or a list of documents.


    **Instantiating an asynchronous Text Analytics Client**


    ```java

    TextAnalyticsAsyncClient textAnalyticsAsyncClient = new TextAnalyticsClientBuilder()
         .credential(new AzureKeyCredential("{key}"))
         .endpoint("{endpoint}")
         .buildAsyncClient();
    ```


    View <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder" data-throw-if-not-resolved="false">TextAnalyticsClientBuilder</xref> for additional ways to construct the client.
  syntax:
    content: public final class TextAnalyticsAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.TextAnalyticsAsyncClient(com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl,com.azure.ai.textanalytics.TextAnalyticsServiceVersion,java.lang.String,java.lang.String)
  id: TextAnalyticsAsyncClient(com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl,com.azure.ai.textanalytics.TextAnalyticsServiceVersion,java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: TextAnalyticsAsyncClient(TextAnalyticsClientImpl service, TextAnalyticsServiceVersion serviceVersion, String defaultCountryHint, String defaultLanguage)
  nameWithType: TextAnalyticsAsyncClient.TextAnalyticsAsyncClient(TextAnalyticsClientImpl service, TextAnalyticsServiceVersion serviceVersion, String defaultCountryHint, String defaultLanguage)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.TextAnalyticsAsyncClient(TextAnalyticsClientImpl service, TextAnalyticsServiceVersion serviceVersion, String defaultCountryHint, String defaultLanguage)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.TextAnalyticsAsyncClient*
  type: Constructor
  package: com.azure.ai.textanalytics
  summary: Create a <xref uid="com.azure.ai.textanalytics.TextAnalyticsAsyncClient" data-throw-if-not-resolved="false">TextAnalyticsAsyncClient</xref> that sends requests to the Text Analytics services's endpoint. Each service call goes through the <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder.pipeline*" data-throw-if-not-resolved="false">http pipeline</xref>.
  syntax:
    content: " TextAnalyticsAsyncClient(TextAnalyticsClientImpl service, TextAnalyticsServiceVersion serviceVersion, String defaultCountryHint, String defaultLanguage)"
    parameters:
    - id: service
      type: com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl
      description: The proxy service used to perform REST calls.
    - id: serviceVersion
      type: com.azure.ai.textanalytics.TextAnalyticsServiceVersion
      description: The versions of Azure Text Analytics supported by this client library.
    - id: defaultCountryHint
      type: java.lang.String
      description: The default country hint.
    - id: defaultLanguage
      type: java.lang.String
      description: The default language.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment(java.lang.String)
  id: analyzeSentiment(java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: analyzeSentiment(String document)
  nameWithType: TextAnalyticsAsyncClient.analyzeSentiment(String document)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment(String document)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within it. This method will use the default language that sets up in <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)\" data-throw-if-not-resolved=\"false\">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.\n\nAnalyze sentiment in a list of documents. Subscribes to the call asynchronously and prints out the sentiment details when a response is received.\n\n```java\nString document = \"The hotel was dark and unclean.\";\n textAnalyticsAsyncClient.analyzeSentiment(document).subscribe(documentSentiment -> {\n     System.out.printf(\"Recognized document sentiment: %s.%n\", documentSentiment.getSentiment());\n \n     for (SentenceSentiment sentenceSentiment : documentSentiment.getSentences()) {\n         System.out.printf(\n             \"Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f, \"\n                 + \"negative score: %.2f.%n\",\n             sentenceSentiment.getSentiment(),\n             sentenceSentiment.getConfidenceScores().getPositive(),\n             sentenceSentiment.getConfidenceScores().getNeutral(),\n             sentenceSentiment.getConfidenceScores().getNegative());\n     }\n });\n```"
  syntax:
    content: public Mono<DocumentSentiment> analyzeSentiment(String document)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.textanalytics.models.DocumentSentiment>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains the <xref uid="com.azure.ai.textanalytics.models.DocumentSentiment" data-throw-if-not-resolved="false">analyzed document sentiment</xref> of the document.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment(java.lang.String,java.lang.String)
  id: analyzeSentiment(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: analyzeSentiment(String document, String language)
  nameWithType: TextAnalyticsAsyncClient.analyzeSentiment(String document, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment(String document, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within it.\n\nAnalyze sentiment in a list of documents. Subscribes to the call asynchronously and prints out the sentiment details when a response is received.\n\n```java\nString document = \"The hotel was dark and unclean.\";\n textAnalyticsAsyncClient.analyzeSentiment(document, \"en\")\n     .subscribe(documentSentiment -> {\n         System.out.printf(\"Recognized sentiment label: %s.%n\", documentSentiment.getSentiment());\n \n         for (SentenceSentiment sentenceSentiment : documentSentiment.getSentences()) {\n             System.out.printf(\"Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f, \"\n                     + \"negative score: %.2f.%n\",\n                 sentenceSentiment.getSentiment(),\n                 sentenceSentiment.getConfidenceScores().getPositive(),\n                 sentenceSentiment.getConfidenceScores().getNeutral(),\n                 sentenceSentiment.getConfidenceScores().getNegative());\n         }\n     });\n```"
  syntax:
    content: public Mono<DocumentSentiment> analyzeSentiment(String document, String language)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the text. If not set, uses "en" for
         English as default.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.textanalytics.models.DocumentSentiment>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains the <xref uid="com.azure.ai.textanalytics.models.DocumentSentiment" data-throw-if-not-resolved="false">analyzed document sentiment</xref> of the document.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsAsyncClient.analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within it.\n\nAnalyze sentiment in a list of documents with provided language code and request options. Subscribes to the call asynchronously and prints out the sentiment details when a response is received.\n\n```java\nList<String> documents = Arrays.asList(\n     \"The hotel was dark and unclean.\",\n     \"The restaurant had amazing gnocchi.\"\n );\n \n textAnalyticsAsyncClient.analyzeSentimentBatch(documents, \"en\", null).subscribe(\n     response -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         response.forEach(analyzeSentimentResult -> {\n             System.out.printf(\"Document ID: %s%n\", analyzeSentimentResult.getId());\n             DocumentSentiment documentSentiment = analyzeSentimentResult.getDocumentSentiment();\n             System.out.printf(\"Recognized document sentiment: %s.%n\", documentSentiment.getSentiment());\n             documentSentiment.getSentences().forEach(sentenceSentiment ->\n                 System.out.printf(\"Recognized sentence sentiment: %s, positive score: %.2f, \"\n                         + \"neutral score: %.2f, negative score: %.2f.%n\",\n                     sentenceSentiment.getSentiment(),\n                     sentenceSentiment.getConfidenceScores().getPositive(),\n                     sentenceSentiment.getConfidenceScores().getNeutral(),\n                     sentenceSentiment.getConfidenceScores().getNegative()));\n         });\n     });\n```"
  syntax:
    content: public Mono<AnalyzeSentimentResultCollection> analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the document. If not set, uses "en" for
         English as default.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains a <xref uid="com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection" data-throw-if-not-resolved="false">AnalyzeSentimentResultCollection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: analyzeSentimentBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: analyzeSentimentBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsAsyncClient.analyzeSentimentBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatchWithResponse*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within it.\n\nAnalyze sentiment in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">document</xref> with provided request options. Subscribes to the call asynchronously and prints out the sentiment details when a response is received.\n\n```java\nList<TextDocumentInput> textDocumentInputs1 = Arrays.asList(\n     new TextDocumentInput(\"0\", \"The hotel was dark and unclean.\").setLanguage(\"en\"),\n     new TextDocumentInput(\"1\", \"The restaurant had amazing gnocchi.\").setLanguage(\"en\"));\n \n // Request options: show statistics and model version\n TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setIncludeStatistics(true);\n \n textAnalyticsAsyncClient.analyzeSentimentBatchWithResponse(textDocumentInputs1, requestOptions)\n     .subscribe(response -> {\n         // Response's status code\n         System.out.printf(\"Status code of request response: %d%n\", response.getStatusCode());\n         AnalyzeSentimentResultCollection resultCollection = response.getValue();\n \n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = resultCollection.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(),\n             batchStatistics.getValidDocumentCount());\n \n         resultCollection.forEach(analyzeSentimentResult -> {\n             System.out.printf(\"Document ID: %s%n\", analyzeSentimentResult.getId());\n             DocumentSentiment documentSentiment = analyzeSentimentResult.getDocumentSentiment();\n             System.out.printf(\"Recognized document sentiment: %s.%n\", documentSentiment.getSentiment());\n             documentSentiment.getSentences().forEach(sentenceSentiment ->\n                 System.out.printf(\"Recognized sentence sentiment: %s, positive score: %.2f, \"\n                         + \"neutral score: %.2f, negative score: %.2f.%n\",\n                     sentenceSentiment.getSentiment(),\n                     sentenceSentiment.getConfidenceScores().getPositive(),\n                     sentenceSentiment.getConfidenceScores().getNeutral(),\n                     sentenceSentiment.getConfidenceScores().getNegative()));\n         });\n     });\n```"
  syntax:
    content: public Mono<Response<AnalyzeSentimentResultCollection>> analyzeSentimentBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>
      description: >-
        A list of <xref uid="com.azure.ai.textanalytics.models.TextDocumentInput" data-throw-if-not-resolved="false">documents</xref>  to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> that contains a <xref uid="com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection" data-throw-if-not-resolved="false">AnalyzeSentimentResultCollection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage(java.lang.String)
  id: detectLanguage(java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: detectLanguage(String document)
  nameWithType: TextAnalyticsAsyncClient.detectLanguage(String document)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage(String document)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns the detected language and a confidence score between zero and one. Scores close to one indicate 100% certainty that the identified language is true. This method will use the default country hint that sets up in <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultCountryHint(java.lang.String)" data-throw-if-not-resolved="false">TextAnalyticsClientBuilder#defaultCountryHint(String)</xref>. If none is specified, service will use 'US' as the country hint.


    **Code sample**


    Detects language in a document. Subscribes to the call asynchronously and prints out the detected language details when a response is received.


    ```java

    String document = "Bonjour tout le monde";
     textAnalyticsAsyncClient.detectLanguage(document).subscribe(detectedLanguage ->
         System.out.printf("Detected language name: %s, ISO 6391 Name: %s, confidence score: %f.%n",
             detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getConfidenceScore()));
    ```
  syntax:
    content: public Mono<DetectedLanguage> detectLanguage(String document)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.textanalytics.models.DetectedLanguage>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.ai.textanalytics.models.DetectedLanguage" data-throw-if-not-resolved="false">detected language</xref> of the document.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage(java.lang.String,java.lang.String)
  id: detectLanguage(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: detectLanguage(String document, String countryHint)
  nameWithType: TextAnalyticsAsyncClient.detectLanguage(String document, String countryHint)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage(String document, String countryHint)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> contains the detected language and a confidence score between zero and one. Scores close to one indicate 100% certainty that the identified language is true.


    **Code sample**


    Detects language with http response in a document with a provided country hint. Subscribes to the call asynchronously and prints out the detected language details when a response is received.


    ```java

    String document = "This text is in English";
     String countryHint = "US";
     textAnalyticsAsyncClient.detectLanguage(document, countryHint).subscribe(detectedLanguage ->
         System.out.printf("Detected language name: %s, ISO 6391 Name: %s, confidence score: %f.%n",
             detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getConfidenceScore()));
    ```
  syntax:
    content: public Mono<DetectedLanguage> detectLanguage(String document, String countryHint)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: countryHint
      type: java.lang.String
      description: >-
        Accepts two letter country codes specified by ISO 3166-1 alpha-2. Defaults to "US" if not
         specified. To remove this behavior you can reset this parameter by setting this value to empty string
         <code>countryHint</code> = "" or "none".
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.textanalytics.models.DetectedLanguage>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains a <xref uid="com.azure.ai.textanalytics.models.DetectedLanguage" data-throw-if-not-resolved="false">detected language</xref> of the document.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: detectLanguageBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: detectLanguageBatch(Iterable<String> documents, String countryHint, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsAsyncClient.detectLanguageBatch(Iterable<String> documents, String countryHint, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch(Iterable<String> documents, String countryHint, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns the detected language for each of documents with the provided country hint and request option.


    **Code sample**


    Detects language in a list of documents with a provided country hint and request option for the batch. Subscribes to the call asynchronously and prints out the detected language details when a response is received.


    ```java

    List<String> documents = Arrays.asList(
         "This is written in English",
         "Este es un documento  escrito en Espa�ol."
     );
     textAnalyticsAsyncClient.detectLanguageBatch(documents, "US", null).subscribe(
         batchResult -> {
             // Batch statistics
             TextDocumentBatchStatistics batchStatistics = batchResult.getStatistics();
             System.out.printf("Batch statistics, transaction count: %s, valid document count: %s.%n",
                 batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());
             // Batch result of languages
             for (DetectLanguageResult detectLanguageResult : batchResult) {
                 DetectedLanguage detectedLanguage = detectLanguageResult.getPrimaryLanguage();
                 System.out.printf("Detected language name: %s, ISO 6391 Name: %s, confidence score: %f.%n",
                     detectedLanguage.getName(), detectedLanguage.getIso6391Name(),
                     detectedLanguage.getConfidenceScore());
             }
         });
    ```
  syntax:
    content: public Mono<DetectLanguageResultCollection> detectLanguageBatch(Iterable<String> documents, String countryHint, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        The list of documents to detect languages for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: countryHint
      type: java.lang.String
      description: >-
        Accepts two letter country codes specified by ISO 3166-1 alpha-2. Defaults to "US" if not
         specified. To remove this behavior you can reset this parameter by setting this value to empty string
         <code>countryHint</code> = "" or "none".
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.textanalytics.util.DetectLanguageResultCollection>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains a <xref uid="com.azure.ai.textanalytics.util.DetectLanguageResultCollection" data-throw-if-not-resolved="false">DetectLanguageResultCollection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.DetectLanguageInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: detectLanguageBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.DetectLanguageInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: detectLanguageBatchWithResponse(Iterable<DetectLanguageInput> documents, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsAsyncClient.detectLanguageBatchWithResponse(Iterable<DetectLanguageInput> documents, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatchWithResponse(Iterable<DetectLanguageInput> documents, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatchWithResponse*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns the detected language for a batch of <xref uid=\"com.azure.ai.textanalytics.models.DetectLanguageInput\" data-throw-if-not-resolved=\"false\">document</xref> with provided request options.\n\n**Code sample**\n\nDetects language in a batch of <xref uid=\"com.azure.ai.textanalytics.models.DetectLanguageInput\" data-throw-if-not-resolved=\"false\">document</xref> with provided request options. Subscribes to the call asynchronously and prints out the detected language details when a response is received.\n\n```java\nList<DetectLanguageInput> detectLanguageInputs1 = Arrays.asList(\n     new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n     new DetectLanguageInput(\"2\", \"Este es un documento  escrito en Espa�ol.\", \"ES\")\n );\n \n // Request options: show statistics and model version\n TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setIncludeStatistics(true);\n \n textAnalyticsAsyncClient.detectLanguageBatchWithResponse(detectLanguageInputs1, requestOptions)\n     .subscribe(response -> {\n         // Response's status code\n         System.out.printf(\"Status code of request response: %d%n\", response.getStatusCode());\n \n         DetectLanguageResultCollection resultCollection = response.getValue();\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = resultCollection.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n         // Batch result of languages\n         for (DetectLanguageResult detectLanguageResult : resultCollection) {\n             DetectedLanguage detectedLanguage = detectLanguageResult.getPrimaryLanguage();\n             System.out.printf(\"Detected language name: %s, ISO 6391 Name: %s, confidence score: %f.%n\",\n                 detectedLanguage.getName(), detectedLanguage.getIso6391Name(),\n                 detectedLanguage.getConfidenceScore());\n         }\n     });\n```"
  syntax:
    content: public Mono<Response<DetectLanguageResultCollection>> detectLanguageBatchWithResponse(Iterable<DetectLanguageInput> documents, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<com.azure.ai.textanalytics.models.DetectLanguageInput>
      description: >-
        The list of <xref uid="com.azure.ai.textanalytics.models.DetectLanguageInput" data-throw-if-not-resolved="false">documents</xref> to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.textanalytics.util.DetectLanguageResultCollection>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> which contains a <xref uid="com.azure.ai.textanalytics.util.DetectLanguageResultCollection" data-throw-if-not-resolved="false">DetectLanguageResultCollection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases(java.lang.String)
  id: extractKeyPhrases(java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: extractKeyPhrases(String document)
  nameWithType: TextAnalyticsAsyncClient.extractKeyPhrases(String document)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases(String document)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of strings denoting the key phrases in the document. This method will use the default language that sets up in <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)" data-throw-if-not-resolved="false">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.


    Extract key phrases in a document. Subscribes to the call asynchronously and prints out the key phrases when a response is received.


    ```java

    System.out.println("Extracted phrases:");
     textAnalyticsAsyncClient.extractKeyPhrases("Bonjour tout le monde").subscribe(keyPhrase ->
         System.out.printf("%s.%n", keyPhrase));
    ```
  syntax:
    content: public Mono<KeyPhrasesCollection> extractKeyPhrases(String document)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.textanalytics.models.KeyPhrasesCollection>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains a <xref uid="com.azure.ai.textanalytics.models.KeyPhrasesCollection" data-throw-if-not-resolved="false">KeyPhrasesCollection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases(java.lang.String,java.lang.String)
  id: extractKeyPhrases(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: extractKeyPhrases(String document, String language)
  nameWithType: TextAnalyticsAsyncClient.extractKeyPhrases(String document, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases(String document, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of strings denoting the key phrases in the document. See [this][] for the list of enabled languages.


    Extract key phrases in a document with a provided language code. Subscribes to the call asynchronously and prints out the key phrases when a response is received.


    ```java

    System.out.println("Extracted phrases:");
     textAnalyticsAsyncClient.extractKeyPhrases("Bonjour tout le monde", "fr")
         .subscribe(keyPhrase -> System.out.printf("%s.%n", keyPhrase));
    ```



    [this]: https://aka.ms/talangs
  syntax:
    content: public Mono<KeyPhrasesCollection> extractKeyPhrases(String document, String language)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed. For text length limits, maximum batch size, and supported text
         encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the text. If not set, uses "en" for
         English as default.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.textanalytics.models.KeyPhrasesCollection>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains a <xref uid="com.azure.ai.textanalytics.models.KeyPhrasesCollection" data-throw-if-not-resolved="false">KeyPhrasesCollection</xref>
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: extractKeyPhrasesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsAsyncClient.extractKeyPhrasesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of strings denoting the key phrases in the document with provided language code and request options. See [this][] for the list of enabled languages.\n\nExtract key phrases in a list of documents with a provided language and request options. Subscribes to the call asynchronously and prints out the key phrases when a response is received.\n\n```java\nList<String> documents = Arrays.asList(\n     \"Hello world. This is some input text that I love.\",\n     \"Bonjour tout le monde\");\n \n textAnalyticsAsyncClient.extractKeyPhrasesBatch(documents, \"en\", null).subscribe(\n     extractKeyPhraseResults -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = extractKeyPhraseResults.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         extractKeyPhraseResults.forEach(extractKeyPhraseResult -> {\n             System.out.println(\"Extracted phrases:\");\n             extractKeyPhraseResult.getKeyPhrases().forEach(keyPhrase -> System.out.printf(\"%s.%n\", keyPhrase));\n         });\n     });\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public Mono<ExtractKeyPhrasesResultCollection> extractKeyPhrasesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the text. If not set, uses "en" for
         English as default.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.textanalytics.util.ExtractKeyPhrasesResultCollection>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains a <xref uid="com.azure.ai.textanalytics.util.ExtractKeyPhrasesResultCollection" data-throw-if-not-resolved="false">ExtractKeyPhrasesResultCollection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: extractKeyPhrasesBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: extractKeyPhrasesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsAsyncClient.extractKeyPhrasesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatchWithResponse*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of strings denoting the key phrases in the document with provided request options. See [this][] for the list of enabled languages.\n\nExtract key phrases in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">document</xref> with provided request options. Subscribes to the call asynchronously and prints out the key phrases when a response is received.\n\n```java\nList<TextDocumentInput> textDocumentInputs1 = Arrays.asList(\n     new TextDocumentInput(\"0\", \"I had a wonderful trip to Seattle last week.\").setLanguage(\"en\"),\n     new TextDocumentInput(\"1\", \"I work at Microsoft.\").setLanguage(\"en\"));\n \n // Request options: show statistics and model version\n TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setIncludeStatistics(true);\n \n textAnalyticsAsyncClient.extractKeyPhrasesBatchWithResponse(textDocumentInputs1, requestOptions)\n     .subscribe(response -> {\n         // Response's status code\n         System.out.printf(\"Status code of request response: %d%n\", response.getStatusCode());\n         ExtractKeyPhrasesResultCollection resultCollection = response.getValue();\n \n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = resultCollection.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         for (ExtractKeyPhraseResult extractKeyPhraseResult : resultCollection) {\n             System.out.println(\"Extracted phrases:\");\n             for (String keyPhrase : extractKeyPhraseResult.getKeyPhrases()) {\n                 System.out.printf(\"%s.%n\", keyPhrase);\n             }\n         }\n     });\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public Mono<Response<ExtractKeyPhrasesResultCollection>> extractKeyPhrasesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>
      description: >-
        A list of <xref uid="com.azure.ai.textanalytics.models.TextDocumentInput" data-throw-if-not-resolved="false">documents</xref>  to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.textanalytics.util.ExtractKeyPhrasesResultCollection>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> that contains a <xref uid="com.azure.ai.textanalytics.util.ExtractKeyPhrasesResultCollection" data-throw-if-not-resolved="false">ExtractKeyPhrasesResultCollection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultCountryHint()
  id: getDefaultCountryHint()
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: getDefaultCountryHint()
  nameWithType: TextAnalyticsAsyncClient.getDefaultCountryHint()
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultCountryHint()
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultCountryHint*
  type: Method
  package: com.azure.ai.textanalytics
  summary: Get default country hint code.
  syntax:
    content: public String getDefaultCountryHint()
    return:
      type: java.lang.String
      description: the default country hint code
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultLanguage()
  id: getDefaultLanguage()
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: getDefaultLanguage()
  nameWithType: TextAnalyticsAsyncClient.getDefaultLanguage()
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultLanguage()
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultLanguage*
  type: Method
  package: com.azure.ai.textanalytics
  summary: Get default language when the builder is setup.
  syntax:
    content: public String getDefaultLanguage()
    return:
      type: java.lang.String
      description: the default language
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities(java.lang.String)
  id: recognizeEntities(java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: recognizeEntities(String document)
  nameWithType: TextAnalyticsAsyncClient.recognizeEntities(String document)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities(String document)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of general categorized entities in the provided document. For a list of supported entity types, check: [this][]. For a list of enabled languages, check: [this][this 1]. This method will use the default language that sets up in <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)" data-throw-if-not-resolved="false">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.


    **Code sample**


    Recognize entities in a document. Subscribes to the call asynchronously and prints out the recognized entity details when a response is received.


    ```java

    String document = "Satya Nadella is the CEO of Microsoft";
     textAnalyticsAsyncClient.recognizeEntities(document)
         .subscribe(entityCollection -> entityCollection.forEach(entity ->
             System.out.printf("Recognized categorized entity: %s, category: %s, confidence score: %f.%n",
             entity.getText(),
             entity.getCategory(),
             entity.getConfidenceScore())));
    ```



    [this]: https://aka.ms/taner

    [this 1]: https://aka.ms/talangs
  syntax:
    content: public Mono<CategorizedEntityCollection> recognizeEntities(String document)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to recognize entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.textanalytics.models.CategorizedEntityCollection>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains a <xref uid="com.azure.ai.textanalytics.models.CategorizedEntityCollection" data-throw-if-not-resolved="false">recognized categorized entities collection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities(java.lang.String,java.lang.String)
  id: recognizeEntities(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: recognizeEntities(String document, String language)
  nameWithType: TextAnalyticsAsyncClient.recognizeEntities(String document, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities(String document, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of general categorized entities in the provided document. For a list of supported entity types, check: [this][]. For a list of enabled languages, check: [this][this 1].


    **Code sample**


    Recognize entities in a document with provided language code. Subscribes to the call asynchronously and prints out the entity details when a response is received.


    ```java

    String document = "Satya Nadella is the CEO of Microsoft";
     textAnalyticsAsyncClient.recognizeEntities(document, "en")
         .subscribe(entityCollection -> entityCollection.forEach(entity ->
             System.out.printf("Recognized categorized entity: %s, category: %s, confidence score: %f.%n",
             entity.getText(),
             entity.getCategory(),
             entity.getConfidenceScore())));
    ```



    [this]: https://aka.ms/taner

    [this 1]: https://aka.ms/talangs
  syntax:
    content: public Mono<CategorizedEntityCollection> recognizeEntities(String document, String language)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        the text to recognize entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language. If not set, uses "en" for English as
         default.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.textanalytics.models.CategorizedEntityCollection>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains a <xref uid="com.azure.ai.textanalytics.models.CategorizedEntityCollection" data-throw-if-not-resolved="false">recognized categorized entities collection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: recognizeEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsAsyncClient.recognizeEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of general categorized entities for the provided list of documents with the provided language code and request options.\n\n**Code sample**\n\nRecognize entities in a document with the provided language code. Subscribes to the call asynchronously and prints out the entity details when a response is received.\n\n```java\nList<String> documents = Arrays.asList(\n     \"I had a wonderful trip to Seattle last week.\", \"I work at Microsoft.\");\n \n textAnalyticsAsyncClient.recognizeEntitiesBatch(documents, \"en\", null)\n     .subscribe(batchResult -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = batchResult.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n         // Batch Result of entities\n         batchResult.forEach(recognizeEntitiesResult ->\n             recognizeEntitiesResult.getEntities().forEach(entity -> System.out.printf(\n                 \"Recognized categorized entity: %s, category: %s, confidence score: %f.%n\",\n                     entity.getText(), entity.getCategory(), entity.getConfidenceScore())));\n     });\n```"
  syntax:
    content: public Mono<RecognizeEntitiesResultCollection> recognizeEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to recognize entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language. If not set, uses "en" for English as
         default.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.textanalytics.util.RecognizeEntitiesResultCollection>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains a <xref uid="com.azure.ai.textanalytics.util.RecognizeEntitiesResultCollection" data-throw-if-not-resolved="false">RecognizeEntitiesResultCollection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: recognizeEntitiesBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: recognizeEntitiesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsAsyncClient.recognizeEntitiesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatchWithResponse*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of general categorized entities for the provided list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">document</xref> with provided request options.\n\n**Code sample**\n\nRecognize entities in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">document</xref>. Subscribes to the call asynchronously and prints out the entity details when a response is received.\n\n```java\nList<TextDocumentInput> textDocumentInputs1 = Arrays.asList(\n     new TextDocumentInput(\"0\", \"I had a wonderful trip to Seattle last week.\").setLanguage(\"en\"),\n     new TextDocumentInput(\"1\", \"I work at Microsoft.\").setLanguage(\"en\"));\n \n // Request options: show statistics and model version\n TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setIncludeStatistics(true);\n \n textAnalyticsAsyncClient.recognizeEntitiesBatchWithResponse(textDocumentInputs1, requestOptions)\n     .subscribe(response -> {\n         // Response's status code\n         System.out.printf(\"Status code of request response: %d%n\", response.getStatusCode());\n         RecognizeEntitiesResultCollection resultCollection = response.getValue();\n \n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = resultCollection.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         resultCollection.forEach(recognizeEntitiesResult ->\n             recognizeEntitiesResult.getEntities().forEach(entity -> System.out.printf(\n                 \"Recognized categorized entity: %s, category: %s, confidence score: %f.%n\",\n                 entity.getText(),\n                 entity.getCategory(),\n                 entity.getConfidenceScore())));\n     });\n```"
  syntax:
    content: public Mono<Response<RecognizeEntitiesResultCollection>> recognizeEntitiesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>
      description: >-
        A list of <xref uid="com.azure.ai.textanalytics.models.TextDocumentInput" data-throw-if-not-resolved="false">documents</xref> to recognize entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.textanalytics.util.RecognizeEntitiesResultCollection>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> which contains a <xref uid="com.azure.ai.textanalytics.util.RecognizeEntitiesResultCollection" data-throw-if-not-resolved="false">RecognizeEntitiesResultCollection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntities(java.lang.String)
  id: recognizeLinkedEntities(java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: recognizeLinkedEntities(String document)
  nameWithType: TextAnalyticsAsyncClient.recognizeLinkedEntities(String document)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntities(String document)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntities*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of recognized entities with links to a well-known knowledge base for the provided document. See [this][] for supported languages in Text Analytics API. This method will use the default language that sets up in <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)" data-throw-if-not-resolved="false">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.


    Recognize linked entities in a document. Subscribes to the call asynchronously and prints out the entity details when a response is received.


    ```java

    String document = "Old Faithful is a geyser at Yellowstone Park.";
     textAnalyticsAsyncClient.recognizeLinkedEntities(document).subscribe(
         linkedEntityCollection -> linkedEntityCollection.forEach(linkedEntity -> {
             System.out.println("Linked Entities:");
             System.out.printf("Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n",
                 linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(),
                 linkedEntity.getDataSource());
             linkedEntity.getMatches().forEach(entityMatch -> System.out.printf(
                 "Matched entity: %s, confidence score: %f.%n",
                 entityMatch.getText(), entityMatch.getConfidenceScore()));
         }));
    ```



    [this]: https://aka.ms/talangs
  syntax:
    content: public Mono<LinkedEntityCollection> recognizeLinkedEntities(String document)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to recognize linked entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.textanalytics.models.LinkedEntityCollection>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains a <xref uid="com.azure.ai.textanalytics.models.LinkedEntityCollection" data-throw-if-not-resolved="false">recognized linked entities collection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntities(java.lang.String,java.lang.String)
  id: recognizeLinkedEntities(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: recognizeLinkedEntities(String document, String language)
  nameWithType: TextAnalyticsAsyncClient.recognizeLinkedEntities(String document, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntities(String document, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntities*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of recognized entities with links to a well-known knowledge base for the provided document. See [this][] for supported languages in Text Analytics API.


    Recognize linked entities in a text with provided language code. Subscribes to the call asynchronously and prints out the entity details when a response is received.


    ```java

    String document = "Old Faithful is a geyser at Yellowstone Park.";
     textAnalyticsAsyncClient.recognizeLinkedEntities(document, "en").subscribe(
         linkedEntityCollection -> linkedEntityCollection.forEach(linkedEntity -> {
             System.out.println("Linked Entities:");
             System.out.printf("Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n",
                 linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(),
                 linkedEntity.getDataSource());
             linkedEntity.getMatches().forEach(entityMatch -> System.out.printf(
                 "Matched entity: %s, confidence score: %f.%n",
                 entityMatch.getText(), entityMatch.getConfidenceScore()));
         }));
    ```



    [this]: https://aka.ms/talangs
  syntax:
    content: public Mono<LinkedEntityCollection> recognizeLinkedEntities(String document, String language)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to recognize linked entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the document. If not set, uses "en" for
         English as default.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.textanalytics.models.LinkedEntityCollection>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains a <xref uid="com.azure.ai.textanalytics.models.LinkedEntityCollection" data-throw-if-not-resolved="false">recognized linked entities collection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: recognizeLinkedEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of recognized entities with links to a well-known knowledge base for the list of documents with provided language code and request options. See [this][] for supported languages in Text Analytics API.\n\nRecognize linked entities in a list of documents with provided language code. Subscribes to the call asynchronously and prints out the entity details when a response is received.\n\n```java\nList<String> documents = Arrays.asList(\n     \"Old Faithful is a geyser at Yellowstone Park.\",\n     \"Mount Shasta has lenticular clouds.\"\n );\n \n textAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(documents, \"en\", null)\n     .subscribe(batchResult -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = batchResult.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         batchResult.forEach(recognizeLinkedEntitiesResult ->\n             recognizeLinkedEntitiesResult.getEntities().forEach(linkedEntity -> {\n                 System.out.println(\"Linked Entities:\");\n                 System.out.printf(\"Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n\",\n                     linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(),\n                     linkedEntity.getDataSource());\n                 linkedEntity.getMatches().forEach(entityMatch -> System.out.printf(\n                     \"Matched entity: %s, confidence score: %f.%n\",\n                     entityMatch.getText(), entityMatch.getConfidenceScore()));\n             }));\n     });\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public Mono<RecognizeLinkedEntitiesResultCollection> recognizeLinkedEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to recognize linked entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the text. If not set, uses "en" for
         English as default.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.textanalytics.util.RecognizeLinkedEntitiesResultCollection>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains a <xref uid="com.azure.ai.textanalytics.util.RecognizeLinkedEntitiesResultCollection" data-throw-if-not-resolved="false">RecognizeLinkedEntitiesResultCollection</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: recognizeLinkedEntitiesBatchWithResponse(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.1
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: recognizeLinkedEntitiesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatchWithResponse*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of recognized entities with links to a well-known knowledge base for the list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">document</xref> with provided request options. See [this][] supported languages in Text Analytics API.\n\nRecognize linked entities in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">document</xref> and provided request options to show statistics. Subscribes to the call asynchronously and prints out the entity details when a response is received.\n\n```java\nList<TextDocumentInput> textDocumentInputs1 = Arrays.asList(\n     new TextDocumentInput(\"0\", \"Old Faithful is a geyser at Yellowstone Park.\").setLanguage(\"en\"),\n     new TextDocumentInput(\"1\", \"Mount Shasta has lenticular clouds.\").setLanguage(\"en\"));\n \n // Request options: show statistics and model version\n TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setIncludeStatistics(true);\n \n textAnalyticsAsyncClient.recognizeLinkedEntitiesBatchWithResponse(textDocumentInputs1, requestOptions)\n     .subscribe(response -> {\n         // Response's status code\n         System.out.printf(\"Status code of request response: %d%n\", response.getStatusCode());\n         RecognizeLinkedEntitiesResultCollection resultCollection = response.getValue();\n \n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = resultCollection.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         resultCollection.forEach(recognizeLinkedEntitiesResult ->\n             recognizeLinkedEntitiesResult.getEntities().forEach(linkedEntity -> {\n                 System.out.println(\"Linked Entities:\");\n                 System.out.printf(\"Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n\",\n                     linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(),\n                     linkedEntity.getDataSource());\n                 linkedEntity.getMatches().forEach(entityMatch -> System.out.printf(\n                     \"Matched entity: %s, confidence score: %.2f.%n\",\n                     entityMatch.getText(), entityMatch.getConfidenceScore()));\n             }));\n     });\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public Mono<Response<RecognizeLinkedEntitiesResultCollection>> recognizeLinkedEntitiesBatchWithResponse(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>
      description: >-
        A list of <xref uid="com.azure.ai.textanalytics.models.TextDocumentInput" data-throw-if-not-resolved="false">documents</xref> to recognize linked entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.textanalytics.util.RecognizeLinkedEntitiesResultCollection>>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> which contains a
         <xref uid="com.azure.ai.textanalytics.util.RecognizeLinkedEntitiesResultCollection" data-throw-if-not-resolved="false">RecognizeLinkedEntitiesResultCollection</xref>.
references:
- uid: com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl
  name: TextAnalyticsClientImpl
  nameWithType: TextAnalyticsClientImpl
  fullName: com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl
- uid: com.azure.ai.textanalytics.TextAnalyticsServiceVersion
  name: TextAnalyticsServiceVersion
  nameWithType: TextAnalyticsServiceVersion
  fullName: com.azure.ai.textanalytics.TextAnalyticsServiceVersion
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.TextAnalyticsAsyncClient*
  name: TextAnalyticsAsyncClient
  nameWithType: TextAnalyticsAsyncClient.TextAnalyticsAsyncClient
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.TextAnalyticsAsyncClient
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultCountryHint*
  name: getDefaultCountryHint
  nameWithType: TextAnalyticsAsyncClient.getDefaultCountryHint
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultCountryHint
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultLanguage*
  name: getDefaultLanguage
  nameWithType: TextAnalyticsAsyncClient.getDefaultLanguage
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultLanguage
  package: com.azure.ai.textanalytics
- uid: reactor.core.publisher.Mono<com.azure.ai.textanalytics.models.DetectedLanguage>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.DetectedLanguage
    name: DetectedLanguage
    fullName: com.azure.ai.textanalytics.models.DetectedLanguage
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage*
  name: detectLanguage
  nameWithType: TextAnalyticsAsyncClient.detectLanguage
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage
  package: com.azure.ai.textanalytics
- uid: java.lang.Iterable<java.lang.String>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
  name: TextAnalyticsRequestOptions
  nameWithType: TextAnalyticsRequestOptions
  fullName: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
- uid: reactor.core.publisher.Mono<com.azure.ai.textanalytics.util.DetectLanguageResultCollection>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.util.DetectLanguageResultCollection
    name: DetectLanguageResultCollection
    fullName: com.azure.ai.textanalytics.util.DetectLanguageResultCollection
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch*
  name: detectLanguageBatch
  nameWithType: TextAnalyticsAsyncClient.detectLanguageBatch
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch
  package: com.azure.ai.textanalytics
- uid: java.lang.Iterable<com.azure.ai.textanalytics.models.DetectLanguageInput>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.DetectLanguageInput
    name: DetectLanguageInput
    fullName: com.azure.ai.textanalytics.models.DetectLanguageInput
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.textanalytics.util.DetectLanguageResultCollection>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.util.DetectLanguageResultCollection
    name: DetectLanguageResultCollection
    fullName: com.azure.ai.textanalytics.util.DetectLanguageResultCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatchWithResponse*
  name: detectLanguageBatchWithResponse
  nameWithType: TextAnalyticsAsyncClient.detectLanguageBatchWithResponse
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatchWithResponse
  package: com.azure.ai.textanalytics
- uid: reactor.core.publisher.Mono<com.azure.ai.textanalytics.models.CategorizedEntityCollection>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.CategorizedEntityCollection
    name: CategorizedEntityCollection
    fullName: com.azure.ai.textanalytics.models.CategorizedEntityCollection
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities*
  name: recognizeEntities
  nameWithType: TextAnalyticsAsyncClient.recognizeEntities
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities
  package: com.azure.ai.textanalytics
- uid: reactor.core.publisher.Mono<com.azure.ai.textanalytics.util.RecognizeEntitiesResultCollection>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.util.RecognizeEntitiesResultCollection
    name: RecognizeEntitiesResultCollection
    fullName: com.azure.ai.textanalytics.util.RecognizeEntitiesResultCollection
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch*
  name: recognizeEntitiesBatch
  nameWithType: TextAnalyticsAsyncClient.recognizeEntitiesBatch
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch
  package: com.azure.ai.textanalytics
- uid: java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.TextDocumentInput
    name: TextDocumentInput
    fullName: com.azure.ai.textanalytics.models.TextDocumentInput
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.textanalytics.util.RecognizeEntitiesResultCollection>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.util.RecognizeEntitiesResultCollection
    name: RecognizeEntitiesResultCollection
    fullName: com.azure.ai.textanalytics.util.RecognizeEntitiesResultCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatchWithResponse*
  name: recognizeEntitiesBatchWithResponse
  nameWithType: TextAnalyticsAsyncClient.recognizeEntitiesBatchWithResponse
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatchWithResponse
  package: com.azure.ai.textanalytics
- uid: reactor.core.publisher.Mono<com.azure.ai.textanalytics.models.LinkedEntityCollection>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.LinkedEntityCollection
    name: LinkedEntityCollection
    fullName: com.azure.ai.textanalytics.models.LinkedEntityCollection
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntities*
  name: recognizeLinkedEntities
  nameWithType: TextAnalyticsAsyncClient.recognizeLinkedEntities
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntities
  package: com.azure.ai.textanalytics
- uid: reactor.core.publisher.Mono<com.azure.ai.textanalytics.util.RecognizeLinkedEntitiesResultCollection>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.util.RecognizeLinkedEntitiesResultCollection
    name: RecognizeLinkedEntitiesResultCollection
    fullName: com.azure.ai.textanalytics.util.RecognizeLinkedEntitiesResultCollection
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch*
  name: recognizeLinkedEntitiesBatch
  nameWithType: TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch
  package: com.azure.ai.textanalytics
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.textanalytics.util.RecognizeLinkedEntitiesResultCollection>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.util.RecognizeLinkedEntitiesResultCollection
    name: RecognizeLinkedEntitiesResultCollection
    fullName: com.azure.ai.textanalytics.util.RecognizeLinkedEntitiesResultCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatchWithResponse*
  name: recognizeLinkedEntitiesBatchWithResponse
  nameWithType: TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatchWithResponse
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatchWithResponse
  package: com.azure.ai.textanalytics
- uid: reactor.core.publisher.Mono<com.azure.ai.textanalytics.models.KeyPhrasesCollection>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.KeyPhrasesCollection
    name: KeyPhrasesCollection
    fullName: com.azure.ai.textanalytics.models.KeyPhrasesCollection
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases*
  name: extractKeyPhrases
  nameWithType: TextAnalyticsAsyncClient.extractKeyPhrases
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases
  package: com.azure.ai.textanalytics
- uid: reactor.core.publisher.Mono<com.azure.ai.textanalytics.util.ExtractKeyPhrasesResultCollection>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.util.ExtractKeyPhrasesResultCollection
    name: ExtractKeyPhrasesResultCollection
    fullName: com.azure.ai.textanalytics.util.ExtractKeyPhrasesResultCollection
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch*
  name: extractKeyPhrasesBatch
  nameWithType: TextAnalyticsAsyncClient.extractKeyPhrasesBatch
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch
  package: com.azure.ai.textanalytics
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.textanalytics.util.ExtractKeyPhrasesResultCollection>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.util.ExtractKeyPhrasesResultCollection
    name: ExtractKeyPhrasesResultCollection
    fullName: com.azure.ai.textanalytics.util.ExtractKeyPhrasesResultCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatchWithResponse*
  name: extractKeyPhrasesBatchWithResponse
  nameWithType: TextAnalyticsAsyncClient.extractKeyPhrasesBatchWithResponse
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatchWithResponse
  package: com.azure.ai.textanalytics
- uid: reactor.core.publisher.Mono<com.azure.ai.textanalytics.models.DocumentSentiment>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.DocumentSentiment
    name: DocumentSentiment
    fullName: com.azure.ai.textanalytics.models.DocumentSentiment
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment*
  name: analyzeSentiment
  nameWithType: TextAnalyticsAsyncClient.analyzeSentiment
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment
  package: com.azure.ai.textanalytics
- uid: reactor.core.publisher.Mono<com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection
    name: AnalyzeSentimentResultCollection
    fullName: com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch*
  name: analyzeSentimentBatch
  nameWithType: TextAnalyticsAsyncClient.analyzeSentimentBatch
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch
  package: com.azure.ai.textanalytics
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection
    name: AnalyzeSentimentResultCollection
    fullName: com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatchWithResponse*
  name: analyzeSentimentBatchWithResponse
  nameWithType: TextAnalyticsAsyncClient.analyzeSentimentBatchWithResponse
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatchWithResponse
  package: com.azure.ai.textanalytics
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.ai.textanalytics.models.DetectedLanguage
  name: DetectedLanguage
  nameWithType: DetectedLanguage
  fullName: com.azure.ai.textanalytics.models.DetectedLanguage
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: com.azure.ai.textanalytics.util.DetectLanguageResultCollection
  name: DetectLanguageResultCollection
  nameWithType: DetectLanguageResultCollection
  fullName: com.azure.ai.textanalytics.util.DetectLanguageResultCollection
- uid: com.azure.ai.textanalytics.models.DetectLanguageInput
  name: DetectLanguageInput
  nameWithType: DetectLanguageInput
  fullName: com.azure.ai.textanalytics.models.DetectLanguageInput
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.ai.textanalytics.models.CategorizedEntityCollection
  name: CategorizedEntityCollection
  nameWithType: CategorizedEntityCollection
  fullName: com.azure.ai.textanalytics.models.CategorizedEntityCollection
- uid: com.azure.ai.textanalytics.util.RecognizeEntitiesResultCollection
  name: RecognizeEntitiesResultCollection
  nameWithType: RecognizeEntitiesResultCollection
  fullName: com.azure.ai.textanalytics.util.RecognizeEntitiesResultCollection
- uid: com.azure.ai.textanalytics.models.TextDocumentInput
  name: TextDocumentInput
  nameWithType: TextDocumentInput
  fullName: com.azure.ai.textanalytics.models.TextDocumentInput
- uid: com.azure.ai.textanalytics.models.LinkedEntityCollection
  name: LinkedEntityCollection
  nameWithType: LinkedEntityCollection
  fullName: com.azure.ai.textanalytics.models.LinkedEntityCollection
- uid: com.azure.ai.textanalytics.util.RecognizeLinkedEntitiesResultCollection
  name: RecognizeLinkedEntitiesResultCollection
  nameWithType: RecognizeLinkedEntitiesResultCollection
  fullName: com.azure.ai.textanalytics.util.RecognizeLinkedEntitiesResultCollection
- uid: com.azure.ai.textanalytics.models.KeyPhrasesCollection
  name: KeyPhrasesCollection
  nameWithType: KeyPhrasesCollection
  fullName: com.azure.ai.textanalytics.models.KeyPhrasesCollection
- uid: com.azure.ai.textanalytics.util.ExtractKeyPhrasesResultCollection
  name: ExtractKeyPhrasesResultCollection
  nameWithType: ExtractKeyPhrasesResultCollection
  fullName: com.azure.ai.textanalytics.util.ExtractKeyPhrasesResultCollection
- uid: com.azure.ai.textanalytics.models.DocumentSentiment
  name: DocumentSentiment
  nameWithType: DocumentSentiment
  fullName: com.azure.ai.textanalytics.models.DocumentSentiment
- uid: com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection
  name: AnalyzeSentimentResultCollection
  nameWithType: AnalyzeSentimentResultCollection
  fullName: com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection
