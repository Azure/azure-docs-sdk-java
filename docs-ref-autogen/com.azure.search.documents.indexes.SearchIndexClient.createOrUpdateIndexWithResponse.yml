### YamlMime:JavaMember
uid: "com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateIndexWithResponse*"
fullName: "com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateIndexWithResponse"
name: "createOrUpdateIndexWithResponse"
nameWithType: "SearchIndexClient.createOrUpdateIndexWithResponse"
members:
- uid: "com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex,boolean,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateIndexWithResponse(SearchIndex index, boolean allowIndexDowntime, boolean onlyIfUnchanged, Context context)"
  name: "createOrUpdateIndexWithResponse(SearchIndex index, boolean allowIndexDowntime, boolean onlyIfUnchanged, Context context)"
  nameWithType: "SearchIndexClient.createOrUpdateIndexWithResponse(SearchIndex index, boolean allowIndexDowntime, boolean onlyIfUnchanged, Context context)"
  summary: "Creates a new Azure Cognitive Search index or updates an index if it already exists.\n\n**Code Sample**\n\nCreate or update search index named \"searchIndex\".\n\n```java\nSearchIndex indexFromService = searchIndexClient.getIndex(\"searchIndex\");\n indexFromService.setSuggesters(Collections.singletonList(new SearchSuggester(\"sg\",\n     Collections.singletonList(\"hotelName\"))));\n Response<SearchIndex> updatedIndexResponse = searchIndexClient.createOrUpdateIndexWithResponse(indexFromService, true,\n     false, new Context(key1, value1));\n System.out.printf(\"The status code of the normal response is %s.%n\"\n         + \"The index name is %s. The etag of index is %s.%n\", updatedIndexResponse.getStatusCode(),\n     updatedIndexResponse.getValue().getName(), updatedIndexResponse.getValue().getETag());\n```"
  parameters:
  - description: "the <xref uid=\"com.azure.search.documents.indexes.models.SearchIndex\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndex\"></xref> to create or update"
    name: "index"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />"
  - description: "allows new analyzers, tokenizers, token filters, or char filters to be added to an\n index by taking the index offline for at least a few seconds. This temporarily causes indexing and query requests\n to fail. Performance and write availability of the index can be impaired for several minutes after the index is\n updated, or longer for very large indexes."
    name: "allowIndexDowntime"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to update if the <code>index</code> is the same as the current service value.\n <code>false</code> to always update existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SearchIndex> createOrUpdateIndexWithResponse(SearchIndex index, boolean allowIndexDowntime, boolean onlyIfUnchanged, Context context)"
  returns:
    description: "a response containing the Index that was created or updated."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.search.documents.indexes"
artifact: com.azure:azure-search-documents:11.1.3
