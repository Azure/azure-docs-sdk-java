### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.DataLakePathClient"
fullName: "com.azure.storage.file.datalake.DataLakePathClient"
name: "DataLakePathClient"
nameWithType: "DataLakePathClient"
summary: "This class provides a client that contains all operations that apply to any path object."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class DataLakePathClient"
methods:
- uid: "com.azure.storage.file.datalake.DataLakePathClient.create()"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.create()"
  name: "create()"
  nameWithType: "DataLakePathClient.create()"
  summary: "Creates a resource."
  syntax: "public PathInfo create()"
  desc: "Creates a resource. By default, this method will not overwrite an existing path.\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"Last Modified Time:%s\", client.create().getLastModified());\n```\n\nFor more information see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "Information about the created resource."
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathInfo?alt=com.azure.storage.file.datalake.models.PathInfo&text=PathInfo\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.create(boolean)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.create(boolean overwrite)"
  name: "create(boolean overwrite)"
  nameWithType: "DataLakePathClient.create(boolean overwrite)"
  summary: "Creates a resource."
  parameters:
  - description: "Whether to overwrite, should data exist on the path."
    name: "overwrite"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PathInfo create(boolean overwrite)"
  desc: "Creates a resource.\n\n**Code Samples**\n\n```java\nboolean overwrite = true;\n System.out.printf(\"Last Modified Time:%s\", client.create(true).getLastModified());\n```\n\nFor more information see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "Information about the created resource."
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathInfo?alt=com.azure.storage.file.datalake.models.PathInfo&text=PathInfo\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.createIfNotExists()"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.createIfNotExists()"
  name: "createIfNotExists()"
  nameWithType: "DataLakePathClient.createIfNotExists()"
  summary: "Creates a resource if a path does not exist."
  syntax: "public PathInfo createIfNotExists()"
  desc: "Creates a resource if a path does not exist.\n\n**Code Samples**\n\n```java\nPathInfo pathInfo = client.createIfNotExists();\n System.out.printf(\"Last Modified Time:%s\", pathInfo.getLastModified());\n```\n\nFor more information see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "<xref uid=\"com.azure.storage.file.datalake.models.PathInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathInfo\"></xref> that contains information about the created resource."
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathInfo?alt=com.azure.storage.file.datalake.models.PathInfo&text=PathInfo\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.createIfNotExistsWithResponse(com.azure.storage.file.datalake.options.DataLakePathCreateOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.createIfNotExistsWithResponse(DataLakePathCreateOptions options, Duration timeout, Context context)"
  name: "createIfNotExistsWithResponse(DataLakePathCreateOptions options, Duration timeout, Context context)"
  nameWithType: "DataLakePathClient.createIfNotExistsWithResponse(DataLakePathCreateOptions options, Duration timeout, Context context)"
  summary: "Creates a resource if a path does not exist."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathCreateOptions\"></xref>\n metadata key or value, it must be removed or encoded."
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<PathInfo> createIfNotExistsWithResponse(DataLakePathCreateOptions options, Duration timeout, Context context)"
  desc: "Creates a resource if a path does not exist.\n\n**Code Samples**\n\n```java\nPathHttpHeaders headers = new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n String permissions = \"permissions\";\n String umask = \"umask\";\n Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n DataLakePathCreateOptions options = new DataLakePathCreateOptions()\n     .setPermissions(permissions)\n     .setUmask(umask)\n     .setPathHttpHeaders(headers)\n     .setMetadata(metadata);\n\n Response<PathInfo> response = client.createIfNotExistsWithResponse(options, timeout, new Context(key1, value1));\n if (response.getStatusCode() == 409) {\n     System.out.println(\"Already existed.\");\n } else {\n     System.out.printf(\"Create completed with status %d%n\", response.getStatusCode());\n }\n```\n\nFor more information see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A reactive <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> signaling completion, whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a\n <xref uid=\"com.azure.storage.file.datalake.models.PathInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathInfo\"></xref> containing information about the resource. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 201, a new\n resource was successfully created. If status code is 409, a resource already existed at this location."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathInfo?alt=com.azure.storage.file.datalake.models.PathInfo&text=PathInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.createWithResponse(com.azure.storage.file.datalake.options.DataLakePathCreateOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.createWithResponse(DataLakePathCreateOptions options, Duration timeout, Context context)"
  name: "createWithResponse(DataLakePathCreateOptions options, Duration timeout, Context context)"
  nameWithType: "DataLakePathClient.createWithResponse(DataLakePathCreateOptions options, Duration timeout, Context context)"
  summary: "Creates a resource."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<PathInfo> createWithResponse(DataLakePathCreateOptions options, Duration timeout, Context context)"
  desc: "Creates a resource.\n\n**Code Samples**\n\n```java\nPathHttpHeaders httpHeaders = new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n String permissions = \"permissions\";\n String umask = \"umask\";\n String owner = \"rwx\";\n String group = \"r--\";\n String leaseId = UUID.randomUUID().toString();\n Integer duration = 15;\n DataLakePathCreateOptions options = new DataLakePathCreateOptions()\n     .setPermissions(permissions)\n     .setUmask(umask)\n     .setOwner(owner)\n     .setGroup(group)\n     .setPathHttpHeaders(httpHeaders)\n     .setRequestConditions(requestConditions)\n     .setMetadata(metadata)\n     .setProposedLeaseId(leaseId)\n     .setLeaseDuration(duration);\n\n Response<PathInfo> response = client.createWithResponse(options, timeout, new Context(key1, value1));\n System.out.printf(\"Last Modified Time:%s\", response.getValue().getLastModified());\n```\n\nFor more information see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A response containing information about the created resource"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathInfo?alt=com.azure.storage.file.datalake.models.PathInfo&text=PathInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.createWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.createWithResponse(String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  name: "createWithResponse(String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "DataLakePathClient.createWithResponse(String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "Creates a resource."
  parameters:
  - description: "POSIX access permissions for the resource owner, the resource owning group, and others."
    name: "permissions"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Restricts permissions of the resource to be created."
    name: "umask"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.PathHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathHttpHeaders\"></xref>"
    name: "headers"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathHttpHeaders?alt=com.azure.storage.file.datalake.models.PathHttpHeaders&text=PathHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "Metadata to associate with the resource. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<PathInfo> createWithResponse(String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "Creates a resource.\n\n**Code Samples**\n\n```java\nPathHttpHeaders httpHeaders = new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n String permissions = \"permissions\";\n String umask = \"umask\";\n\n Response<PathInfo> response = client.createWithResponse(permissions, umask, httpHeaders,\n     Collections.singletonMap(\"metadata\", \"value\"), requestConditions, timeout,\n     new Context(key1, value1));\n System.out.printf(\"Last Modified Time:%s\", response.getValue().getLastModified());\n```\n\nFor more information see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A response containing information about the created resource"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathInfo?alt=com.azure.storage.file.datalake.models.PathInfo&text=PathInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.deleteIfExists()"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.deleteIfExists()"
  name: "deleteIfExists()"
  nameWithType: "DataLakePathClient.deleteIfExists()"
  summary: "Deletes paths under the resource if it exists."
  syntax: "public boolean deleteIfExists()"
  desc: "Deletes paths under the resource if it exists.\n\n**Code Samples**\n\n```java\nclient.create();\n boolean result = client.deleteIfExists();\n System.out.println(\"Delete complete: \" + result);\n```\n\nFor more information see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "<code>true</code> if the resource is successfully deleted, <code>false</code> if resource does not exist."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.deleteIfExistsWithResponse(com.azure.storage.file.datalake.options.DataLakePathDeleteOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.deleteIfExistsWithResponse(DataLakePathDeleteOptions options, Duration timeout, Context context)"
  name: "deleteIfExistsWithResponse(DataLakePathDeleteOptions options, Duration timeout, Context context)"
  nameWithType: "DataLakePathClient.deleteIfExistsWithResponse(DataLakePathDeleteOptions options, Duration timeout, Context context)"
  summary: "Deletes all paths under the specified resource if exists."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.DataLakePathDeleteOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathDeleteOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathDeleteOptions?alt=com.azure.storage.file.datalake.options.DataLakePathDeleteOptions&text=DataLakePathDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Boolean> deleteIfExistsWithResponse(DataLakePathDeleteOptions options, Duration timeout, Context context)"
  desc: "Deletes all paths under the specified resource if exists.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n\n DataLakePathDeleteOptions options = new DataLakePathDeleteOptions().setIsRecursive(false)\n     .setRequestConditions(requestConditions);\n\n Response<Boolean> response = client.deleteIfExistsWithResponse(options, timeout, new Context(key1, value1));\n\n if (response.getStatusCode() == 404) {\n     System.out.println(\"Does not exist.\");\n } else {\n     System.out.printf(\"Delete completed with status %d%n\", response.getStatusCode());\n }\n```\n\nFor more information see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A response containing status code and HTTP headers. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 200, the resource\n was successfully deleted. If status code is 404, the resource does not exist."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.exists()"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.exists()"
  name: "exists()"
  nameWithType: "DataLakePathClient.exists()"
  summary: "Gets if the path this client represents exists in the cloud."
  syntax: "public Boolean exists()"
  desc: "Gets if the path this client represents exists in the cloud.\n\nNote that this method does not guarantee that the path type (file/directory) matches expectations.\n\nFor example, a DataLakeFileClient representing a path to a datalake directory will return true, and vice versa.\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"Exists? %b%n\", client.exists());\n```"
  returns:
    description: "true if the path exists, false if it doesn't"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.existsWithResponse(java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.existsWithResponse(Duration timeout, Context context)"
  name: "existsWithResponse(Duration timeout, Context context)"
  nameWithType: "DataLakePathClient.existsWithResponse(Duration timeout, Context context)"
  summary: "Gets if the path this client represents exists in the cloud."
  parameters:
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Boolean> existsWithResponse(Duration timeout, Context context)"
  desc: "Gets if the path this client represents exists in the cloud.\n\nNote that this method does not guarantee that the path type (file/directory) matches expectations.\n\nFor example, a DataLakeFileClient representing a path to a datalake directory will return true, and vice versa.\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"Exists? %b%n\", client.existsWithResponse(timeout, new Context(key2, value2)).getValue());\n```"
  returns:
    description: "true if the path exists, false if it doesn't"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)"
  name: "generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)"
  nameWithType: "DataLakePathClient.generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)"
  summary: "Generates a service SAS for the path using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>"
    name: "dataLakeServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues?alt=com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues&text=DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)"
  desc: "Generates a service SAS for the path using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n PathSasPermission permission = new PathSasPermission().setReadPermission(true);\n\n DataLakeServiceSasSignatureValues values = new DataLakeServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n client.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, Context context)"
  name: "generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, Context context)"
  nameWithType: "DataLakePathClient.generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, Context context)"
  summary: "Generates a service SAS for the path using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>"
    name: "dataLakeServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues?alt=com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues&text=DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the code when generating a SAS."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, Context context)"
  desc: "Generates a service SAS for the path using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n PathSasPermission permission = new PathSasPermission().setReadPermission(true);\n\n DataLakeServiceSasSignatureValues values = new DataLakeServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n // Client must be authenticated via StorageSharedKeyCredential\n client.generateSas(values, new Context(\"key\", \"value\"));\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  name: "generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  nameWithType: "DataLakePathClient.generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  summary: "Generates a user delegation SAS for the path using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>"
    name: "dataLakeServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues?alt=com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues&text=DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "A <xref uid=\"com.azure.storage.file.datalake.models.UserDelegationKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UserDelegationKey\"></xref> object used to sign the SAS values.\n See <xref uid=\"com.azure.storage.file.datalake.DataLakeServiceClient.getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceClient#getUserDelegationKey(OffsetDateTime, OffsetDateTime)\"></xref> for more information\n on how to get a user delegation key."
    name: "userDelegationKey"
    type: "<xref href=\"com.azure.storage.file.datalake.models.UserDelegationKey?alt=com.azure.storage.file.datalake.models.UserDelegationKey&text=UserDelegationKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  desc: "Generates a user delegation SAS for the path using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>.\n\nSee <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref> for more information on how to construct a user delegation SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime myExpiryTime = OffsetDateTime.now().plusDays(1);\n PathSasPermission myPermission = new PathSasPermission().setReadPermission(true);\n\n DataLakeServiceSasSignatureValues myValues = new DataLakeServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n client.generateUserDelegationSas(values, userDelegationKey);\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey, String accountName, Context context)"
  name: "generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey, String accountName, Context context)"
  nameWithType: "DataLakePathClient.generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey, String accountName, Context context)"
  summary: "Generates a user delegation SAS for the path using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>"
    name: "dataLakeServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues?alt=com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues&text=DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "A <xref uid=\"com.azure.storage.file.datalake.models.UserDelegationKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UserDelegationKey\"></xref> object used to sign the SAS values.\n See <xref uid=\"com.azure.storage.file.datalake.DataLakeServiceClient.getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceClient#getUserDelegationKey(OffsetDateTime, OffsetDateTime)\"></xref> for more information\n on how to get a user delegation key."
    name: "userDelegationKey"
    type: "<xref href=\"com.azure.storage.file.datalake.models.UserDelegationKey?alt=com.azure.storage.file.datalake.models.UserDelegationKey&text=UserDelegationKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "The account name."
    name: "accountName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the code when generating a SAS."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey, String accountName, Context context)"
  desc: "Generates a user delegation SAS for the path using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref>.\n\nSee <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceSasSignatureValues\"></xref> for more information on how to construct a user delegation SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime myExpiryTime = OffsetDateTime.now().plusDays(1);\n PathSasPermission myPermission = new PathSasPermission().setReadPermission(true);\n\n DataLakeServiceSasSignatureValues myValues = new DataLakeServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n client.generateUserDelegationSas(values, userDelegationKey, accountName, new Context(\"key\", \"value\"));\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.getAccessControl()"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.getAccessControl()"
  name: "getAccessControl()"
  nameWithType: "DataLakePathClient.getAccessControl()"
  summary: "Returns the access control for a resource."
  syntax: "public PathAccessControl getAccessControl()"
  desc: "Returns the access control for a resource.\n\n**Code Samples**\n\n```java\nPathAccessControl response = client.getAccessControl();\n System.out.printf(\"Access Control List: %s, Group: %s, Owner: %s, Permissions: %s\",\n     PathAccessControlEntry.serializeList(response.getAccessControlList()), response.getGroup(),\n     response.getOwner(), response.getPermissions());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/getproperties"
  returns:
    description: "The resource access control."
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathAccessControl?alt=com.azure.storage.file.datalake.models.PathAccessControl&text=PathAccessControl\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.getAccessControlWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  name: "getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "DataLakePathClient.getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "Returns the access control for a resource."
  parameters:
  - description: "When true, user identity values returned as User Principal Names. When false,\n user identity values returned as Azure Active Directory Object IDs. Default value is false."
    name: "userPrincipalNameReturned"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<PathAccessControl> getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "Returns the access control for a resource.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n boolean userPrincipalNameReturned = false;\n\n Response<PathAccessControl> response = client.getAccessControlWithResponse(userPrincipalNameReturned,\n     requestConditions, timeout, new Context(key1, value1));\n\n PathAccessControl pac = response.getValue();\n\n System.out.printf(\"Access Control List: %s, Group: %s, Owner: %s, Permissions: %s\",\n     PathAccessControlEntry.serializeList(pac.getAccessControlList()), pac.getGroup(), pac.getOwner(),\n     pac.getPermissions());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/getproperties"
  returns:
    description: "A response containing the resource access control."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathAccessControl?alt=com.azure.storage.file.datalake.models.PathAccessControl&text=PathAccessControl\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.getAccountName()"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.getAccountName()"
  name: "getAccountName()"
  nameWithType: "DataLakePathClient.getAccountName()"
  summary: "Gets the associated account name."
  syntax: "public String getAccountName()"
  desc: "Gets the associated account name."
  returns:
    description: "Account name associated with this storage resource."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.getCustomerProvidedKey()"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.getCustomerProvidedKey()"
  name: "getCustomerProvidedKey()"
  nameWithType: "DataLakePathClient.getCustomerProvidedKey()"
  summary: "Gets the <xref uid=\"com.azure.storage.file.datalake.implementation.models.CpkInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CpkInfo\"></xref> used to encrypt this path's content on the server."
  syntax: "public CustomerProvidedKey getCustomerProvidedKey()"
  desc: "Gets the <xref uid=\"com.azure.storage.file.datalake.implementation.models.CpkInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CpkInfo\"></xref> used to encrypt this path's content on the server."
  returns:
    description: "the customer provided key used for encryption."
    type: "<xref href=\"com.azure.storage.file.datalake.models.CustomerProvidedKey?alt=com.azure.storage.file.datalake.models.CustomerProvidedKey&text=CustomerProvidedKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.getCustomerProvidedKeyClient(com.azure.storage.file.datalake.models.CustomerProvidedKey)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.getCustomerProvidedKeyClient(CustomerProvidedKey customerProvidedKey)"
  name: "getCustomerProvidedKeyClient(CustomerProvidedKey customerProvidedKey)"
  nameWithType: "DataLakePathClient.getCustomerProvidedKeyClient(CustomerProvidedKey customerProvidedKey)"
  summary: "Creates a new <xref uid=\"com.azure.storage.file.datalake.DataLakePathClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathClient\"></xref> with the specified `customerProvidedKey`."
  parameters:
  - description: "the <xref uid=\"com.azure.storage.file.datalake.models.CustomerProvidedKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CustomerProvidedKey\"></xref> for the path,\n pass <code>null</code> to use no customer provided key."
    name: "customerProvidedKey"
    type: "<xref href=\"com.azure.storage.file.datalake.models.CustomerProvidedKey?alt=com.azure.storage.file.datalake.models.CustomerProvidedKey&text=CustomerProvidedKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathClient getCustomerProvidedKeyClient(CustomerProvidedKey customerProvidedKey)"
  desc: "Creates a new <xref uid=\"com.azure.storage.file.datalake.DataLakePathClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathClient\"></xref> with the specified `customerProvidedKey`."
  returns:
    description: "a <xref uid=\"com.azure.storage.file.datalake.DataLakePathClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathClient\"></xref> with the specified <code>customerProvidedKey</code>."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient?alt=com.azure.storage.file.datalake.DataLakePathClient&text=DataLakePathClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.getFileSystemName()"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.getFileSystemName()"
  name: "getFileSystemName()"
  nameWithType: "DataLakePathClient.getFileSystemName()"
  summary: "Gets the name of the File System in which this object lives."
  syntax: "public String getFileSystemName()"
  desc: "Gets the name of the File System in which this object lives."
  returns:
    description: "The name of the File System."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.getHttpPipeline()"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.getHttpPipeline()"
  name: "getHttpPipeline()"
  nameWithType: "DataLakePathClient.getHttpPipeline()"
  summary: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  syntax: "public HttpPipeline getHttpPipeline()"
  desc: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  returns:
    description: "The pipeline."
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.getProperties()"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.getProperties()"
  name: "getProperties()"
  nameWithType: "DataLakePathClient.getProperties()"
  summary: "Returns the resource's metadata and properties."
  syntax: "public PathProperties getProperties()"
  desc: "Returns the resource's metadata and properties.\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"Creation Time: %s, Size: %d%n\", client.getProperties().getCreationTime(),\n     client.getProperties().getFileSize());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob-properties"
  returns:
    description: "The resource properties and metadata."
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathProperties?alt=com.azure.storage.file.datalake.models.PathProperties&text=PathProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.getPropertiesWithResponse(com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.getPropertiesWithResponse(DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  name: "getPropertiesWithResponse(DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "DataLakePathClient.getPropertiesWithResponse(DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "Returns the resource's metadata and properties."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<PathProperties> getPropertiesWithResponse(DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "Returns the resource's metadata and properties.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n\n Response<PathProperties> response = client.getPropertiesWithResponse(requestConditions, timeout,\n     new Context(key2, value2));\n\n System.out.printf(\"Creation Time: %s, Size: %d%n\", response.getValue().getCreationTime(),\n     response.getValue().getFileSize());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob-properties"
  returns:
    description: "A response containing the resource properties and metadata."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathProperties?alt=com.azure.storage.file.datalake.models.PathProperties&text=PathProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.getServiceVersion()"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.getServiceVersion()"
  name: "getServiceVersion()"
  nameWithType: "DataLakePathClient.getServiceVersion()"
  summary: "Gets the service version the client is using."
  syntax: "public DataLakeServiceVersion getServiceVersion()"
  desc: "Gets the service version the client is using."
  returns:
    description: "the service version the client is using."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeServiceVersion?alt=com.azure.storage.file.datalake.DataLakeServiceVersion&text=DataLakeServiceVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.removeAccessControlRecursive(java.util.List<com.azure.storage.file.datalake.models.PathRemoveAccessControlEntry>)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.removeAccessControlRecursive(List<PathRemoveAccessControlEntry> accessControlList)"
  name: "removeAccessControlRecursive(List<PathRemoveAccessControlEntry> accessControlList)"
  nameWithType: "DataLakePathClient.removeAccessControlRecursive(List<PathRemoveAccessControlEntry> accessControlList)"
  summary: "Recursively removes the access control on a path and all subpaths."
  parameters:
  - description: "The POSIX access control list for the file or directory."
    name: "accessControlList"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathRemoveAccessControlEntry?alt=com.azure.storage.file.datalake.models.PathRemoveAccessControlEntry&text=PathRemoveAccessControlEntry\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public AccessControlChangeResult removeAccessControlRecursive(List<PathRemoveAccessControlEntry> accessControlList)"
  desc: "Recursively removes the access control on a path and all subpaths.\n\n**Code Samples**\n\n```java\nPathRemoveAccessControlEntry pathAccessControlEntry = new PathRemoveAccessControlEntry()\n     .setEntityId(\"entityId\");\n List<PathRemoveAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n pathAccessControlEntries.add(pathAccessControlEntry);\n\n AccessControlChangeResult response = client.removeAccessControlRecursive(pathAccessControlEntries);\n\n System.out.printf(\"Successful changed file operations: %d\",\n     response.getCounters().getChangedFilesCount());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/update"
  returns:
    description: "The result of the operation."
    type: "<xref href=\"com.azure.storage.file.datalake.models.AccessControlChangeResult?alt=com.azure.storage.file.datalake.models.AccessControlChangeResult&text=AccessControlChangeResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.removeAccessControlRecursiveWithResponse(com.azure.storage.file.datalake.options.PathRemoveAccessControlRecursiveOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.removeAccessControlRecursiveWithResponse(PathRemoveAccessControlRecursiveOptions options, Duration timeout, Context context)"
  name: "removeAccessControlRecursiveWithResponse(PathRemoveAccessControlRecursiveOptions options, Duration timeout, Context context)"
  nameWithType: "DataLakePathClient.removeAccessControlRecursiveWithResponse(PathRemoveAccessControlRecursiveOptions options, Duration timeout, Context context)"
  summary: "Recursively removes the access control on a path and all subpaths."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.PathRemoveAccessControlRecursiveOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathRemoveAccessControlRecursiveOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.PathRemoveAccessControlRecursiveOptions?alt=com.azure.storage.file.datalake.options.PathRemoveAccessControlRecursiveOptions&text=PathRemoveAccessControlRecursiveOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<AccessControlChangeResult> removeAccessControlRecursiveWithResponse(PathRemoveAccessControlRecursiveOptions options, Duration timeout, Context context)"
  desc: "Recursively removes the access control on a path and all subpaths.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n PathRemoveAccessControlEntry pathAccessControlEntry = new PathRemoveAccessControlEntry()\n     .setEntityId(\"entityId\");\n List<PathRemoveAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n pathAccessControlEntries.add(pathAccessControlEntry);\n\n Integer batchSize = 2;\n Integer maxBatches = 10;\n boolean continueOnFailure = false;\n String continuationToken = null;\n Consumer<Response<AccessControlChanges>> progressHandler =\n     response -> System.out.println(\"Received response\");\n\n PathRemoveAccessControlRecursiveOptions options =\n     new PathRemoveAccessControlRecursiveOptions(pathAccessControlEntries)\n         .setBatchSize(batchSize)\n         .setMaxBatches(maxBatches)\n         .setContinueOnFailure(continueOnFailure)\n         .setContinuationToken(continuationToken)\n         .setProgressHandler(progressHandler);\n\n Response<AccessControlChangeResult> response = client.removeAccessControlRecursiveWithResponse(options, timeout,\n     new Context(key2, value2));\n System.out.printf(\"Successful changed file operations: %d\",\n     response.getValue().getCounters().getChangedFilesCount());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/update"
  returns:
    description: "A  response containing the result of the operation."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.AccessControlChangeResult?alt=com.azure.storage.file.datalake.models.AccessControlChangeResult&text=AccessControlChangeResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.setAccessControlList(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.setAccessControlList(List<PathAccessControlEntry> accessControlList, String group, String owner)"
  name: "setAccessControlList(List<PathAccessControlEntry> accessControlList, String group, String owner)"
  nameWithType: "DataLakePathClient.setAccessControlList(List<PathAccessControlEntry> accessControlList, String group, String owner)"
  summary: "Changes the access control list, group and/or owner for a resource."
  parameters:
  - description: "A list of <xref uid=\"com.azure.storage.file.datalake.models.PathAccessControlEntry\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathAccessControlEntry\"></xref> objects."
    name: "accessControlList"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathAccessControlEntry?alt=com.azure.storage.file.datalake.models.PathAccessControlEntry&text=PathAccessControlEntry\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The group of the resource."
    name: "group"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The owner of the resource."
    name: "owner"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PathInfo setAccessControlList(List<PathAccessControlEntry> accessControlList, String group, String owner)"
  desc: "Changes the access control list, group and/or owner for a resource.\n\n**Code Samples**\n\n```java\nPathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n     .setEntityId(\"entityId\")\n     .setPermissions(new RolePermissions().setReadPermission(true));\n List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n pathAccessControlEntries.add(pathAccessControlEntry);\n String group = \"group\";\n String owner = \"owner\";\n\n System.out.printf(\"Last Modified Time: %s\", client.setAccessControlList(pathAccessControlEntries, group, owner)\n     .getLastModified());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/update"
  returns:
    description: "The resource info."
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathInfo?alt=com.azure.storage.file.datalake.models.PathInfo&text=PathInfo\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.setAccessControlListWithResponse(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.setAccessControlListWithResponse(List<PathAccessControlEntry> accessControlList, String group, String owner, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  name: "setAccessControlListWithResponse(List<PathAccessControlEntry> accessControlList, String group, String owner, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "DataLakePathClient.setAccessControlListWithResponse(List<PathAccessControlEntry> accessControlList, String group, String owner, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "Changes the access control list, group and/or owner for a resource."
  parameters:
  - description: "A list of <xref uid=\"com.azure.storage.file.datalake.models.PathAccessControlEntry\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathAccessControlEntry\"></xref> objects."
    name: "accessControlList"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathAccessControlEntry?alt=com.azure.storage.file.datalake.models.PathAccessControlEntry&text=PathAccessControlEntry\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The group of the resource."
    name: "group"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The owner of the resource."
    name: "owner"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<PathInfo> setAccessControlListWithResponse(List<PathAccessControlEntry> accessControlList, String group, String owner, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "Changes the access control list, group and/or owner for a resource.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n PathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n     .setEntityId(\"entityId\")\n     .setPermissions(new RolePermissions().setReadPermission(true));\n List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n pathAccessControlEntries.add(pathAccessControlEntry);\n String group = \"group\";\n String owner = \"owner\";\n\n Response<PathInfo> response = client.setAccessControlListWithResponse(pathAccessControlEntries, group, owner,\n     requestConditions, timeout, new Context(key2, value2));\n System.out.printf(\"Last Modified Time: %s\", response.getValue().getLastModified());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/update"
  returns:
    description: "A response containing the resource info."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathInfo?alt=com.azure.storage.file.datalake.models.PathInfo&text=PathInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.setAccessControlRecursive(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.setAccessControlRecursive(List<PathAccessControlEntry> accessControlList)"
  name: "setAccessControlRecursive(List<PathAccessControlEntry> accessControlList)"
  nameWithType: "DataLakePathClient.setAccessControlRecursive(List<PathAccessControlEntry> accessControlList)"
  summary: "Recursively sets the access control on a path and all subpaths."
  parameters:
  - description: "The POSIX access control list for the file or directory."
    name: "accessControlList"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathAccessControlEntry?alt=com.azure.storage.file.datalake.models.PathAccessControlEntry&text=PathAccessControlEntry\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public AccessControlChangeResult setAccessControlRecursive(List<PathAccessControlEntry> accessControlList)"
  desc: "Recursively sets the access control on a path and all subpaths.\n\n**Code Samples**\n\n```java\nPathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n     .setEntityId(\"entityId\")\n     .setPermissions(new RolePermissions().setReadPermission(true));\n List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n pathAccessControlEntries.add(pathAccessControlEntry);\n\n AccessControlChangeResult response = client.setAccessControlRecursive(pathAccessControlEntries);\n\n System.out.printf(\"Successful changed file operations: %d\",\n     response.getCounters().getChangedFilesCount());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/update"
  returns:
    description: "The result of the operation."
    type: "<xref href=\"com.azure.storage.file.datalake.models.AccessControlChangeResult?alt=com.azure.storage.file.datalake.models.AccessControlChangeResult&text=AccessControlChangeResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.setAccessControlRecursiveWithResponse(com.azure.storage.file.datalake.options.PathSetAccessControlRecursiveOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.setAccessControlRecursiveWithResponse(PathSetAccessControlRecursiveOptions options, Duration timeout, Context context)"
  name: "setAccessControlRecursiveWithResponse(PathSetAccessControlRecursiveOptions options, Duration timeout, Context context)"
  nameWithType: "DataLakePathClient.setAccessControlRecursiveWithResponse(PathSetAccessControlRecursiveOptions options, Duration timeout, Context context)"
  summary: "Recursively sets the access control on a path and all subpaths."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.PathSetAccessControlRecursiveOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathSetAccessControlRecursiveOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.PathSetAccessControlRecursiveOptions?alt=com.azure.storage.file.datalake.options.PathSetAccessControlRecursiveOptions&text=PathSetAccessControlRecursiveOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<AccessControlChangeResult> setAccessControlRecursiveWithResponse(PathSetAccessControlRecursiveOptions options, Duration timeout, Context context)"
  desc: "Recursively sets the access control on a path and all subpaths.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n PathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n     .setEntityId(\"entityId\")\n     .setPermissions(new RolePermissions().setReadPermission(true));\n List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n pathAccessControlEntries.add(pathAccessControlEntry);\n\n Integer batchSize = 2;\n Integer maxBatches = 10;\n boolean continueOnFailure = false;\n String continuationToken = null;\n Consumer<Response<AccessControlChanges>> progressHandler =\n     response -> System.out.println(\"Received response\");\n\n PathSetAccessControlRecursiveOptions options =\n     new PathSetAccessControlRecursiveOptions(pathAccessControlEntries)\n         .setBatchSize(batchSize)\n         .setMaxBatches(maxBatches)\n         .setContinueOnFailure(continueOnFailure)\n         .setContinuationToken(continuationToken)\n         .setProgressHandler(progressHandler);\n\n Response<AccessControlChangeResult> response = client.setAccessControlRecursiveWithResponse(options, timeout,\n     new Context(key2, value2));\n System.out.printf(\"Successful changed file operations: %d\",\n     response.getValue().getCounters().getChangedFilesCount());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/update"
  returns:
    description: "A response containing the result of the operation."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.AccessControlChangeResult?alt=com.azure.storage.file.datalake.models.AccessControlChangeResult&text=AccessControlChangeResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.setHttpHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.setHttpHeaders(PathHttpHeaders headers)"
  name: "setHttpHeaders(PathHttpHeaders headers)"
  nameWithType: "DataLakePathClient.setHttpHeaders(PathHttpHeaders headers)"
  summary: "Changes a resource's HTTP header properties."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.PathHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathHttpHeaders\"></xref>"
    name: "headers"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathHttpHeaders?alt=com.azure.storage.file.datalake.models.PathHttpHeaders&text=PathHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setHttpHeaders(PathHttpHeaders headers)"
  desc: "Changes a resource's HTTP header properties. If only one HTTP header is updated, the others will all be erased. In order to preserve existing values, they must be passed alongside the header being changed.\n\n**Code Samples**\n\n```java\nclient.setHttpHeaders(new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\"));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-file-properties"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.setHttpHeadersWithResponse(com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.setHttpHeadersWithResponse(PathHttpHeaders headers, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  name: "setHttpHeadersWithResponse(PathHttpHeaders headers, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "DataLakePathClient.setHttpHeadersWithResponse(PathHttpHeaders headers, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "Changes a resource's HTTP header properties."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.PathHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathHttpHeaders\"></xref>"
    name: "headers"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathHttpHeaders?alt=com.azure.storage.file.datalake.models.PathHttpHeaders&text=PathHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> setHttpHeadersWithResponse(PathHttpHeaders headers, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "Changes a resource's HTTP header properties. If only one HTTP header is updated, the others will all be erased. In order to preserve existing values, they must be passed alongside the header being changed.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n\n Response<Void> response = client.setHttpHeadersWithResponse(new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\"), requestConditions, timeout, new Context(key2, value2));\n System.out.printf(\"Set HTTP headers completed with status %d%n\",\n             response.getStatusCode());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-file-properties"
  returns:
    description: "A response containing status code and HTTP headers."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.setMetadata(Map<String,String> metadata)"
  name: "setMetadata(Map<String,String> metadata)"
  nameWithType: "DataLakePathClient.setMetadata(Map<String,String> metadata)"
  summary: "Changes a resource's metadata."
  parameters:
  - description: "Metadata to associate with the resource. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void setMetadata(Map<String,String> metadata)"
  desc: "Changes a resource's metadata. The specified metadata in this method will replace existing metadata. If old values must be preserved, they must be downloaded and included in the call to this method.\n\n**Code Samples**\n\n```java\nclient.setMetadata(Collections.singletonMap(\"metadata\", \"value\"));\n System.out.println(\"Set metadata completed\");\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-file-metadata"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  name: "setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "DataLakePathClient.setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "Changes a resource's metadata."
  parameters:
  - description: "Metadata to associate with the resource. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "Changes a resource's metadata. The specified metadata in this method will replace existing metadata. If old values must be preserved, they must be downloaded and included in the call to this method.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n\n client.setMetadataWithResponse(Collections.singletonMap(\"metadata\", \"value\"), requestConditions, timeout,\n     new Context(key2, value2));\n System.out.println(\"Set metadata completed\");\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-file-metadata"
  returns:
    description: "A response containing status code and HTTP headers."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.setPermissions(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.setPermissions(PathPermissions permissions, String group, String owner)"
  name: "setPermissions(PathPermissions permissions, String group, String owner)"
  nameWithType: "DataLakePathClient.setPermissions(PathPermissions permissions, String group, String owner)"
  summary: "Changes the permissions, group and/or owner for a resource."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.PathPermissions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathPermissions\"></xref>"
    name: "permissions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathPermissions?alt=com.azure.storage.file.datalake.models.PathPermissions&text=PathPermissions\" data-throw-if-not-resolved=\"False\" />"
  - description: "The group of the resource."
    name: "group"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The owner of the resource."
    name: "owner"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PathInfo setPermissions(PathPermissions permissions, String group, String owner)"
  desc: "Changes the permissions, group and/or owner for a resource.\n\n**Code Samples**\n\n```java\nPathPermissions permissions = new PathPermissions()\n     .setGroup(new RolePermissions().setExecutePermission(true).setReadPermission(true))\n     .setOwner(new RolePermissions().setExecutePermission(true).setReadPermission(true).setWritePermission(true))\n     .setOther(new RolePermissions().setReadPermission(true));\n String group = \"group\";\n String owner = \"owner\";\n\n System.out.printf(\"Last Modified Time: %s\", client.setPermissions(permissions, group, owner)\n     .getLastModified());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/update"
  returns:
    description: "The resource info."
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathInfo?alt=com.azure.storage.file.datalake.models.PathInfo&text=PathInfo\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.setPermissionsWithResponse(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.setPermissionsWithResponse(PathPermissions permissions, String group, String owner, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  name: "setPermissionsWithResponse(PathPermissions permissions, String group, String owner, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "DataLakePathClient.setPermissionsWithResponse(PathPermissions permissions, String group, String owner, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "Changes the permissions, group and/or owner for a resource."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.PathPermissions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathPermissions\"></xref>"
    name: "permissions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathPermissions?alt=com.azure.storage.file.datalake.models.PathPermissions&text=PathPermissions\" data-throw-if-not-resolved=\"False\" />"
  - description: "The group of the resource."
    name: "group"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The owner of the resource."
    name: "owner"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<PathInfo> setPermissionsWithResponse(PathPermissions permissions, String group, String owner, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "Changes the permissions, group and/or owner for a resource.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n PathPermissions permissions = new PathPermissions()\n     .setGroup(new RolePermissions().setExecutePermission(true).setReadPermission(true))\n     .setOwner(new RolePermissions().setExecutePermission(true).setReadPermission(true).setWritePermission(true))\n     .setOther(new RolePermissions().setReadPermission(true));\n String group = \"group\";\n String owner = \"owner\";\n\n Response<PathInfo> response = client.setPermissionsWithResponse(permissions, group, owner, requestConditions,\n     timeout, new Context(key2, value2));\n System.out.printf(\"Last Modified Time: %s\", response.getValue().getLastModified());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/update"
  returns:
    description: "A response containing the resource info."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathInfo?alt=com.azure.storage.file.datalake.models.PathInfo&text=PathInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.updateAccessControlRecursive(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.updateAccessControlRecursive(List<PathAccessControlEntry> accessControlList)"
  name: "updateAccessControlRecursive(List<PathAccessControlEntry> accessControlList)"
  nameWithType: "DataLakePathClient.updateAccessControlRecursive(List<PathAccessControlEntry> accessControlList)"
  summary: "Recursively updates the access control on a path and all subpaths."
  parameters:
  - description: "The POSIX access control list for the file or directory."
    name: "accessControlList"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathAccessControlEntry?alt=com.azure.storage.file.datalake.models.PathAccessControlEntry&text=PathAccessControlEntry\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public AccessControlChangeResult updateAccessControlRecursive(List<PathAccessControlEntry> accessControlList)"
  desc: "Recursively updates the access control on a path and all subpaths.\n\n**Code Samples**\n\n```java\nPathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n     .setEntityId(\"entityId\")\n     .setPermissions(new RolePermissions().setReadPermission(true));\n List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n pathAccessControlEntries.add(pathAccessControlEntry);\n\n AccessControlChangeResult response = client.updateAccessControlRecursive(pathAccessControlEntries);\n\n System.out.printf(\"Successful changed file operations: %d\",\n     response.getCounters().getChangedFilesCount());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/update"
  returns:
    description: "The result of the operation."
    type: "<xref href=\"com.azure.storage.file.datalake.models.AccessControlChangeResult?alt=com.azure.storage.file.datalake.models.AccessControlChangeResult&text=AccessControlChangeResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClient.updateAccessControlRecursiveWithResponse(com.azure.storage.file.datalake.options.PathUpdateAccessControlRecursiveOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClient.updateAccessControlRecursiveWithResponse(PathUpdateAccessControlRecursiveOptions options, Duration timeout, Context context)"
  name: "updateAccessControlRecursiveWithResponse(PathUpdateAccessControlRecursiveOptions options, Duration timeout, Context context)"
  nameWithType: "DataLakePathClient.updateAccessControlRecursiveWithResponse(PathUpdateAccessControlRecursiveOptions options, Duration timeout, Context context)"
  summary: "Recursively updates the access control on a path and all subpaths."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.PathUpdateAccessControlRecursiveOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathUpdateAccessControlRecursiveOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.PathUpdateAccessControlRecursiveOptions?alt=com.azure.storage.file.datalake.options.PathUpdateAccessControlRecursiveOptions&text=PathUpdateAccessControlRecursiveOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<AccessControlChangeResult> updateAccessControlRecursiveWithResponse(PathUpdateAccessControlRecursiveOptions options, Duration timeout, Context context)"
  desc: "Recursively updates the access control on a path and all subpaths.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n PathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n     .setEntityId(\"entityId\")\n     .setPermissions(new RolePermissions().setReadPermission(true));\n List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n pathAccessControlEntries.add(pathAccessControlEntry);\n\n Integer batchSize = 2;\n Integer maxBatches = 10;\n boolean continueOnFailure = false;\n String continuationToken = null;\n Consumer<Response<AccessControlChanges>> progressHandler =\n     response -> System.out.println(\"Received response\");\n\n PathUpdateAccessControlRecursiveOptions options =\n     new PathUpdateAccessControlRecursiveOptions(pathAccessControlEntries)\n         .setBatchSize(batchSize)\n         .setMaxBatches(maxBatches)\n         .setContinueOnFailure(continueOnFailure)\n         .setContinuationToken(continuationToken)\n         .setProgressHandler(progressHandler);\n\n Response<AccessControlChangeResult> response = client.updateAccessControlRecursiveWithResponse(options, timeout,\n     new Context(key2, value2));\n System.out.printf(\"Successful changed file operations: %d\",\n     response.getValue().getCounters().getChangedFilesCount());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/update"
  returns:
    description: "A response containing the result of the operation."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.AccessControlChangeResult?alt=com.azure.storage.file.datalake.models.AccessControlChangeResult&text=AccessControlChangeResult\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "This class provides a client that contains all operations that apply to any path object."
metadata: {}
package: "com.azure.storage.file.datalake"
artifact: com.azure:azure-storage-file-datalake:12.12.0
