### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.client.FabricTransportServiceRemotingClientFactory.FabricTransportServiceRemotingClientFactory(FabricTransportRemotingSettings fabricTransportSettings, ServiceRemotingCallbackClient callbackClient, ServicePartitionResolver servicePartitionResolver, List<ExceptionHandler> exceptionHandlers, String traceId)
  name: FabricTransportServiceRemotingClientFactory(FabricTransportRemotingSettings fabricTransportSettings, ServiceRemotingCallbackClient callbackClient, ServicePartitionResolver servicePartitionResolver, List<ExceptionHandler> exceptionHandlers, String traceId)
  nameWithType: FabricTransportServiceRemotingClientFactory.FabricTransportServiceRemotingClientFactory(FabricTransportRemotingSettings fabricTransportSettings, ServiceRemotingCallbackClient callbackClient, ServicePartitionResolver servicePartitionResolver, List<ExceptionHandler> exceptionHandlers, String traceId)
  parameters:
  - description: <p>The settings for the fabric transport. If the settings are not provided or null, default settings with no security. </p>
    name: fabricTransportSettings
    type: <xref href="microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings?alt=microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings&text=FabricTransportRemotingSettings" data-throw-if-not-resolved="False"/>
  - description: <p>The callback client that receives the callbacks from the service. </p>
    name: callbackClient
    type: <xref href="microsoft.servicefabric.services.remoting.runtime.ServiceRemotingCallbackClient?alt=microsoft.servicefabric.services.remoting.runtime.ServiceRemotingCallbackClient&text=ServiceRemotingCallbackClient" data-throw-if-not-resolved="False"/>
  - description: <p>Service partition resolver to resolve the service endpoints. If not specified, a default service partition resolver returned by <xref uid="microsoft.servicefabric.services.client.FabricServicePartitionResolver.getDefault()" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.services.client.FabricServicePartitionResolver#getDefault()"></xref> is used. </p>
    name: servicePartitionResolver
    type: <xref href="microsoft.servicefabric.services.client.ServicePartitionResolver?alt=microsoft.servicefabric.services.client.ServicePartitionResolver&text=ServicePartitionResolver" data-throw-if-not-resolved="False"/>
  - description: <p>Exception handlers to handle the exceptions encountered in communicating with the service. </p>
    name: exceptionHandlers
    type: List&lt;<xref href="microsoft.servicefabric.services.communication.client.ExceptionHandler?alt=microsoft.servicefabric.services.communication.client.ExceptionHandler&text=ExceptionHandler" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>Id to use in diagnostics traces from this component. </p>
    name: traceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Constructs a fabric transport based service remoting client factory.</p>

    <p>

      <b>Remarks:</b>This factory uses an internal fabric transport exception handler to handle exceptions at the fabric TCP transport level and a <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceRemotingExceptionHandler"></xref>, in addition to the exception handlers supplied to the constructor. </p>
  syntax: public FabricTransportServiceRemotingClientFactory(FabricTransportRemotingSettings fabricTransportSettings, ServiceRemotingCallbackClient callbackClient, ServicePartitionResolver servicePartitionResolver, List<ExceptionHandler> exceptionHandlers, String traceId)
  uid: microsoft.servicefabric.services.remoting.fabrictransport.client.FabricTransportServiceRemotingClientFactory.FabricTransportServiceRemotingClientFactory(FabricTransportRemotingSettings,ServiceRemotingCallbackClient,ServicePartitionResolver,List<ExceptionHandler>,String)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.services.communication.client.CommunicationClientFactory" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.services.remoting.client.ServiceRemotingClientFactory?alt=microsoft.servicefabric.services.remoting.client.ServiceRemotingClientFactory&text=ServiceRemotingClientFactory" data-throw-if-not-resolved="False"/>
inheritedMembers:
- microsoft.servicefabric.services.communication.client.CommunicationClientFactory.reportOperationExceptionAsync(TCommunicationClient,ExceptionInformation,OperationRetrySettings)
methods:
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.client.FabricTransportServiceRemotingClientFactory.getClientAsync(ResolvedServicePartition previousRsp, TargetReplicaSelector targetReplicaSelector, String listenerName, OperationRetrySettings retrySettings)
  name: getClientAsync(ResolvedServicePartition previousRsp, TargetReplicaSelector targetReplicaSelector, String listenerName, OperationRetrySettings retrySettings)
  nameWithType: FabricTransportServiceRemotingClientFactory.getClientAsync(ResolvedServicePartition previousRsp, TargetReplicaSelector targetReplicaSelector, String listenerName, OperationRetrySettings retrySettings)
  overridden: microsoft.servicefabric.services.communication.client.CommunicationClientFactory.getClientAsync(ResolvedServicePartition,TargetReplicaSelector,String,OperationRetrySettings)
  parameters:
  - description: <p>Previous ResolvedServicePartition value </p>
    name: previousRsp
    type: <xref href="system.fabric.ResolvedServicePartition?alt=system.fabric.ResolvedServicePartition&text=ResolvedServicePartition" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies which replica in the partition identified by the partition key, the client should connect to </p>
    name: targetReplicaSelector
    type: <xref href="microsoft.servicefabric.services.communication.client.TargetReplicaSelector?alt=microsoft.servicefabric.services.communication.client.TargetReplicaSelector&text=TargetReplicaSelector" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies which listener in the endpoint of the chosen replica, to which the client should connect to </p>
    name: listenerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the retry policy that should be used for exceptions that occur when creating the client.</p>
    name: retrySettings
    type: <xref href="microsoft.servicefabric.services.communication.client.OperationRetrySettings?alt=microsoft.servicefabric.services.communication.client.OperationRetrySettings&text=OperationRetrySettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> that represents outstanding operation. The result of the Task is the CommunicationClient( <xref uid="microsoft.servicefabric.services.communication.client.CommunicationClient" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.services.communication.client.CommunicationClient"></xref>) object. </p>
    type: CompletableFuture&lt;<xref href="microsoft.servicefabric.services.remoting.client.ServiceRemotingClient?alt=microsoft.servicefabric.services.remoting.client.ServiceRemotingClient&text=ServiceRemotingClient" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Re-resolves a partition of the specified service containing one or more communication listeners and returns a client to communicate to the endpoint corresponding to the given listenerName. The endpoint of the service is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}</p>

    <p></p>
  syntax: public CompletableFuture<ServiceRemotingClient> getClientAsync(ResolvedServicePartition previousRsp, TargetReplicaSelector targetReplicaSelector, String listenerName, OperationRetrySettings retrySettings)
  uid: microsoft.servicefabric.services.remoting.fabrictransport.client.FabricTransportServiceRemotingClientFactory.getClientAsync(ResolvedServicePartition,TargetReplicaSelector,String,OperationRetrySettings)
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.client.FabricTransportServiceRemotingClientFactory.getClientAsync(URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName, OperationRetrySettings retrySettings)
  name: getClientAsync(URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName, OperationRetrySettings retrySettings)
  nameWithType: FabricTransportServiceRemotingClientFactory.getClientAsync(URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName, OperationRetrySettings retrySettings)
  overridden: microsoft.servicefabric.services.communication.client.CommunicationClientFactory.getClientAsync(URI,ServicePartitionKey,TargetReplicaSelector,String,OperationRetrySettings)
  parameters:
  - description: <p>Uri of the service to resolve </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>Key that identifies the partition to resolve </p>
    name: partitionKey
    type: <xref href="microsoft.servicefabric.services.client.ServicePartitionKey?alt=microsoft.servicefabric.services.client.ServicePartitionKey&text=ServicePartitionKey" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies which replica in the partition identified by the partition key, the client should connect to </p>
    name: targetReplicaSelector
    type: <xref href="microsoft.servicefabric.services.communication.client.TargetReplicaSelector?alt=microsoft.servicefabric.services.communication.client.TargetReplicaSelector&text=TargetReplicaSelector" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies which listener in the endpoint of the chosen replica, to which the client should connect to </p>
    name: listenerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the retry policy that should be used for exceptions that occur when creating the client.</p>
    name: retrySettings
    type: <xref href="microsoft.servicefabric.services.communication.client.OperationRetrySettings?alt=microsoft.servicefabric.services.communication.client.OperationRetrySettings&text=OperationRetrySettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> that represents outstanding operation. The result of the Task is the CommunicationClient( <xref uid="microsoft.servicefabric.services.communication.client.CommunicationClient" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.services.communication.client.CommunicationClient"></xref>) object. </p>
    type: CompletableFuture&lt;<xref href="microsoft.servicefabric.services.remoting.client.ServiceRemotingClient?alt=microsoft.servicefabric.services.remoting.client.ServiceRemotingClient&text=ServiceRemotingClient" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Resolves a partition of the specified service containing one or more communication listeners and returns a client to communicate to the endpoint corresponding to the given listenerName. The endpoint of the service is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}</p>

    <p></p>
  syntax: public CompletableFuture<ServiceRemotingClient> getClientAsync(URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName, OperationRetrySettings retrySettings)
  uid: microsoft.servicefabric.services.remoting.fabrictransport.client.FabricTransportServiceRemotingClientFactory.getClientAsync(URI,ServicePartitionKey,TargetReplicaSelector,String,OperationRetrySettings)
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.client.FabricTransportServiceRemotingClientFactory.reportOperationExceptionAsync(ServiceRemotingClient client, ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings)
  name: reportOperationExceptionAsync(ServiceRemotingClient client, ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings)
  nameWithType: FabricTransportServiceRemotingClientFactory.reportOperationExceptionAsync(ServiceRemotingClient client, ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings)
  parameters:
  - description: <p>Communication client </p>
    name: client
    type: <xref href="microsoft.servicefabric.services.remoting.client.ServiceRemotingClient?alt=microsoft.servicefabric.services.remoting.client.ServiceRemotingClient&text=ServiceRemotingClient" data-throw-if-not-resolved="False"/>
  - description: <p>Information about exception that happened while communicating with the service. </p>
    name: exceptionInformation
    type: <xref href="microsoft.servicefabric.services.communication.client.ExceptionInformation?alt=microsoft.servicefabric.services.communication.client.ExceptionInformation&text=ExceptionInformation" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the retry policy that should be used for handling the reported exception.</p>
    name: retrySettings
    type: <xref href="microsoft.servicefabric.services.communication.client.OperationRetrySettings?alt=microsoft.servicefabric.services.communication.client.OperationRetrySettings&text=OperationRetrySettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> that represents outstanding operation. The result of the Task is a <xref uid="" data-throw-if-not-resolved="false" data-raw-source="OperationRetryControl"></xref> object that provides information on retry policy for this exception. </p>
    type: CompletableFuture&lt;<xref href="microsoft.servicefabric.services.communication.client.OperationRetryControl?alt=microsoft.servicefabric.services.communication.client.OperationRetryControl&text=OperationRetryControl" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Handles the exceptions that occur in the CommunicationClient when sending a message to the Service</p>

    <p></p>
  syntax: public CompletableFuture<OperationRetryControl> reportOperationExceptionAsync(ServiceRemotingClient client, ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings)
  uid: microsoft.servicefabric.services.remoting.fabrictransport.client.FabricTransportServiceRemotingClientFactory.reportOperationExceptionAsync(ServiceRemotingClient,ExceptionInformation,OperationRetrySettings)
nameWithType: FabricTransportServiceRemotingClientFactory
syntax: public class FabricTransportServiceRemotingClientFactory implements ServiceRemotingClientFactory
type: class
uid: microsoft.servicefabric.services.remoting.fabrictransport.client.FabricTransportServiceRemotingClientFactory
fullName: microsoft.servicefabric.services.remoting.fabrictransport.client.FabricTransportServiceRemotingClientFactory
name: FabricTransportServiceRemotingClientFactory
package: microsoft.servicefabric.services.remoting.fabrictransport.client
summary: <p>An <xref uid="microsoft.servicefabric.services.remoting.client.ServiceRemotingClientFactory" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.services.remoting.client.ServiceRemotingClientFactory"></xref> that uses Fabric TCP transport to create <xref uid="microsoft.servicefabric.services.remoting.client.ServiceRemotingClient" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.services.remoting.client.ServiceRemotingClient"></xref> that communicate with stateless and stateful services over interfaces that are remoted via <xref uid="microsoft.servicefabric.services.remoting.fabrictransport.runtime.FabricTransportServiceRemotingListener" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.services.remoting.fabrictransport.runtime.FabricTransportServiceRemotingListener"></xref>. </p>
metadata: {}
