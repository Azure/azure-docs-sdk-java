### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.services.remoting.builder.BuildResult" data-throw-if-not-resolved="False"/>
methods:
- fullName: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuildResult.getProxyActivatorType()
  name: getProxyActivatorType()
  nameWithType: ProxyGeneratorBuildResult.getProxyActivatorType()
  returns:
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  syntax: public Class<?> getProxyActivatorType()
  uid: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuildResult.getProxyActivatorType()
- fullName: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuildResult.getProxyGenerator()
  name: getProxyGenerator()
  nameWithType: ProxyGeneratorBuildResult.getProxyGenerator()
  returns:
    type: <xref href="microsoft.servicefabric.services.remoting.builder.ProxyGenerator?alt=microsoft.servicefabric.services.remoting.builder.ProxyGenerator&text=ProxyGenerator" data-throw-if-not-resolved="False"/>
  syntax: public ProxyGenerator getProxyGenerator()
  uid: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuildResult.getProxyGenerator()
- fullName: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuildResult.getProxyType()
  name: getProxyType()
  nameWithType: ProxyGeneratorBuildResult.getProxyType()
  returns:
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  syntax: public Class<?> getProxyType()
  uid: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuildResult.getProxyType()
- fullName: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuildResult.setProxyActivatorType(Class<?> type)
  name: setProxyActivatorType(Class<?> type)
  nameWithType: ProxyGeneratorBuildResult.setProxyActivatorType(Class<?> type)
  parameters:
  - name: type
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  syntax: public void setProxyActivatorType(Class<?> type)
  uid: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuildResult.setProxyActivatorType(Class<?>)
- fullName: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuildResult.setProxyGenerator(ProxyGenerator factory)
  name: setProxyGenerator(ProxyGenerator factory)
  nameWithType: ProxyGeneratorBuildResult.setProxyGenerator(ProxyGenerator factory)
  parameters:
  - name: factory
    type: <xref href="microsoft.servicefabric.services.remoting.builder.ProxyGenerator?alt=microsoft.servicefabric.services.remoting.builder.ProxyGenerator&text=ProxyGenerator" data-throw-if-not-resolved="False"/>
  syntax: public void setProxyGenerator(ProxyGenerator factory)
  uid: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuildResult.setProxyGenerator(ProxyGenerator)
- fullName: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuildResult.setProxyType(Class<?> type)
  name: setProxyType(Class<?> type)
  nameWithType: ProxyGeneratorBuildResult.setProxyType(Class<?> type)
  parameters:
  - name: type
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  syntax: public void setProxyType(Class<?> type)
  uid: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuildResult.setProxyType(Class<?>)
nameWithType: ProxyGeneratorBuildResult
syntax: public class ProxyGeneratorBuildResult
type: class
uid: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuildResult
fullName: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuildResult
name: ProxyGeneratorBuildResult
package: microsoft.servicefabric.services.remoting.builder
summary: <p>Used in Actor and Services Code builder. For internal use only. </p>
metadata: {}
