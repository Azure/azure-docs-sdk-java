### YamlMime:ManagedReference
items:
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  id: "ConfigurationAsyncClient"
  parent: "com.azure.data.appconfiguration"
  children:
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.ConfigurationAsyncClient(java.lang.String,com.azure.core.http.HttpPipeline,com.azure.data.appconfiguration.ConfigurationServiceVersion)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSetting(java.lang.String,java.lang.String,java.lang.String)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSetting(java.lang.String,java.lang.String)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,java.time.OffsetDateTime,boolean,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting(java.lang.String,java.lang.String)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting(java.lang.String,java.lang.String,java.time.OffsetDateTime)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,java.time.OffsetDateTime,boolean)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.listConfigurationSettings(com.azure.data.appconfiguration.models.SettingSelector)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.listConfigurationSettings(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisions(com.azure.data.appconfiguration.models.SettingSelector)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisions(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisionsFirstPage(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisionsNextPage(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSetting(java.lang.String,java.lang.String,java.lang.String)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly(java.lang.String,java.lang.String,boolean)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnlyWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  langs:
  - "java"
  name: "ConfigurationAsyncClient"
  nameWithType: "ConfigurationAsyncClient"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  type: "Class"
  package: "com.azure.data.appconfiguration"
  summary: "This class provides a client that contains all the operations for <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSettings</xref> in Azure App Configuration Store. Operations allowed by the client are adding, retrieving, deleting, set read-only status ConfigurationSettings, and listing settings or revision of a setting based on a <xref uid=\"com.azure.data.appconfiguration.models.SettingSelector\" data-throw-if-not-resolved=\"false\">filter</xref>.\n\n**Instantiating an asynchronous Configuration Client**\n\n\\{@codesnippet com.azure.data.applicationconfig.async.configurationclient.instantiation\\}\n\nView <xref uid=\"com.azure.data.appconfiguration.ConfigurationClientBuilder\" data-throw-if-not-resolved=\"false\">this</xref> for additional ways to construct the client."
  syntax:
    content: "public final class ConfigurationAsyncClient"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.ConfigurationAsyncClient(java.lang.String,com.azure.core.http.HttpPipeline,com.azure.data.appconfiguration.ConfigurationServiceVersion)"
  id: "ConfigurationAsyncClient(java.lang.String,com.azure.core.http.HttpPipeline,com.azure.data.appconfiguration.ConfigurationServiceVersion)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "ConfigurationAsyncClient(String serviceEndpoint, HttpPipeline pipeline, ConfigurationServiceVersion version)"
  nameWithType: "ConfigurationAsyncClient.ConfigurationAsyncClient(String serviceEndpoint, HttpPipeline pipeline, ConfigurationServiceVersion version)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.ConfigurationAsyncClient(String serviceEndpoint, HttpPipeline pipeline, ConfigurationServiceVersion version)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.ConfigurationAsyncClient*"
  type: "Constructor"
  package: "com.azure.data.appconfiguration"
  summary: "Creates a ConfigurationAsyncClient that sends requests to the configuration service at `serviceEndpoint`. Each service call goes through the `pipeline`."
  syntax:
    content: " ConfigurationAsyncClient(String serviceEndpoint, HttpPipeline pipeline, ConfigurationServiceVersion version)"
    parameters:
    - id: "serviceEndpoint"
      type: "java.lang.String"
      description: "The URL string for the App Configuration service."
    - id: "pipeline"
      type: "com.azure.core.http.HttpPipeline"
      description: "HttpPipeline that the HTTP requests and responses flow through."
    - id: "version"
      type: "com.azure.data.appconfiguration.ConfigurationServiceVersion"
      description: "<xref uid=\"com.azure.data.appconfiguration.ConfigurationServiceVersion\" data-throw-if-not-resolved=\"false\">ConfigurationServiceVersion</xref> of the service to be used when making requests."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  id: "addConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "addConfigurationSetting(ConfigurationSetting setting, Context context)"
  nameWithType: "ConfigurationAsyncClient.addConfigurationSetting(ConfigurationSetting setting, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSetting(ConfigurationSetting setting, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  syntax:
    content: " Mono<Response<ConfigurationSetting>> addConfigurationSetting(ConfigurationSetting setting, Context context)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSetting(java.lang.String,java.lang.String,java.lang.String)"
  id: "addConfigurationSetting(java.lang.String,java.lang.String,java.lang.String)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "addConfigurationSetting(String key, String label, String value)"
  nameWithType: "ConfigurationAsyncClient.addConfigurationSetting(String key, String label, String value)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSetting(String key, String label, String value)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Adds a configuration value in the service if that key does not exist. The `label` is optional.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", label \"westUS\" and value \"db\\_connection\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.addConfigurationSetting\\#string-string-string\\}"
  syntax:
    content: "public Mono<ConfigurationSetting> addConfigurationSetting(String key, String label, String value)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of the configuration setting to add."
    - id: "label"
      type: "java.lang.String"
      description: "The label of the configuration setting to add. If <code>null</code> no label will be used."
    - id: "value"
      type: "java.lang.String"
      description: "The value associated with this configuration setting key."
    return:
      type: "reactor.core.publisher.Mono<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> that was created, or <code>null</code> if a key collision occurs or the key\n is an invalid value (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  id: "addConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "addConfigurationSettingWithResponse(ConfigurationSetting setting)"
  nameWithType: "ConfigurationAsyncClient.addConfigurationSettingWithResponse(ConfigurationSetting setting)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSettingWithResponse(ConfigurationSetting setting)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSettingWithResponse*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Adds a configuration value in the service if that key and label does not exist. The label value of the ConfigurationSetting is optional.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", label \"westUS\", and value \"db\\_connection\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.addConfigurationSettingWithResponse\\#ConfigurationSetting\\}"
  syntax:
    content: "public Mono<Response<ConfigurationSetting>> addConfigurationSettingWithResponse(ConfigurationSetting setting)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The setting to add based on its key and optional label combination."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
      description: "A REST response containing the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> that was created, if a key collision occurs\n or the key is an invalid value (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  id: "deleteConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "deleteConfigurationSetting(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  nameWithType: "ConfigurationAsyncClient.deleteConfigurationSetting(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSetting(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  syntax:
    content: " Mono<Response<ConfigurationSetting>> deleteConfigurationSetting(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
    - id: "ifUnchanged"
      type: "boolean"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSetting(java.lang.String,java.lang.String)"
  id: "deleteConfigurationSetting(java.lang.String,java.lang.String)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "deleteConfigurationSetting(String key, String label)"
  nameWithType: "ConfigurationAsyncClient.deleteConfigurationSetting(String key, String label)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSetting(String key, String label)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Deletes the ConfigurationSetting with a matching `key` and optional `label` combination.\n\n**Code Samples**\n\nDelete the setting with the key \"prodDBConnection\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.deleteConfigurationSetting\\#string-string\\}"
  syntax:
    content: "public Mono<ConfigurationSetting> deleteConfigurationSetting(String key, String label)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of configuration setting to delete."
    - id: "label"
      type: "java.lang.String"
      description: "The label of configuration setting to delete. If <code>null</code> no label will be used."
    return:
      type: "reactor.core.publisher.Mono<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "The deleted ConfigurationSetting or an empty Mono is also returned if the <code>key</code> is an invalid value\n (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  id: "deleteConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "deleteConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
  nameWithType: "ConfigurationAsyncClient.deleteConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSettingWithResponse*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Deletes the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\">key</xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\">label</xref> and optional ETag combination from the service. If <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag()\" data-throw-if-not-resolved=\"false\">ETag</xref> is specified and is not the wildcard character (`\"*\"`), then the setting is **only** deleted if the ETag matches the current ETag; this means that no one has updated the ConfigurationSetting yet.\n\n**Code Samples**\n\nDelete the setting with the key-label \"prodDBConnection\"-\"westUS\"\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.deleteConfigurationSettingWithResponse\\#ConfigurationSetting-boolean\\}"
  syntax:
    content: "public Mono<Response<ConfigurationSetting>> deleteConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The setting to delete based on its key, optional label and optional ETag combination."
    - id: "ifUnchanged"
      type: "boolean"
      description: "Flag indicating if the <code>setting</code> <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag*\" data-throw-if-not-resolved=\"false\">ETag</xref> is used as a\n IF-MATCH header."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
      description: "A REST response containing the deleted ConfigurationSetting or <code>null</code> if didn't exist. <code>null</code>\n is also returned if the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\">key</xref> is an invalid value or\n <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag()\" data-throw-if-not-resolved=\"false\">ETag</xref> is set but does not match the current ETag\n (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,java.time.OffsetDateTime,boolean,com.azure.core.util.Context)"
  id: "getConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,java.time.OffsetDateTime,boolean,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "getConfigurationSetting(ConfigurationSetting setting, OffsetDateTime acceptDateTime, boolean onlyIfChanged, Context context)"
  nameWithType: "ConfigurationAsyncClient.getConfigurationSetting(ConfigurationSetting setting, OffsetDateTime acceptDateTime, boolean onlyIfChanged, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting(ConfigurationSetting setting, OffsetDateTime acceptDateTime, boolean onlyIfChanged, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  syntax:
    content: " Mono<Response<ConfigurationSetting>> getConfigurationSetting(ConfigurationSetting setting, OffsetDateTime acceptDateTime, boolean onlyIfChanged, Context context)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
    - id: "acceptDateTime"
      type: "java.time.OffsetDateTime"
    - id: "onlyIfChanged"
      type: "boolean"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting(java.lang.String,java.lang.String)"
  id: "getConfigurationSetting(java.lang.String,java.lang.String)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "getConfigurationSetting(String key, String label)"
  nameWithType: "ConfigurationAsyncClient.getConfigurationSetting(String key, String label)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting(String key, String label)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Attempts to get a ConfigurationSetting that matches the `key`, and the optional `label` combination.\n\n**Code Samples**\n\nRetrieve the setting with the key \"prodDBConnection\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.getConfigurationSetting\\#string-string\\}"
  syntax:
    content: "public Mono<ConfigurationSetting> getConfigurationSetting(String key, String label)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of the setting to retrieve."
    - id: "label"
      type: "java.lang.String"
      description: "The label of the configuration setting to retrieve. If <code>null</code> no label will be used."
    return:
      type: "reactor.core.publisher.Mono<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> stored in the service, or an empty Mono if the configuration value does\n not exist or the key is an invalid value (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting(java.lang.String,java.lang.String,java.time.OffsetDateTime)"
  id: "getConfigurationSetting(java.lang.String,java.lang.String,java.time.OffsetDateTime)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "getConfigurationSetting(String key, String label, OffsetDateTime acceptDateTime)"
  nameWithType: "ConfigurationAsyncClient.getConfigurationSetting(String key, String label, OffsetDateTime acceptDateTime)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting(String key, String label, OffsetDateTime acceptDateTime)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Attempts to get a ConfigurationSetting that matches the `key`, the optional `label`, and the optional `acceptDateTime` combination.\n\n**Code Samples**\n\nRetrieve the setting with the key \"prodDBConnection\" and a time that one minute before now at UTC-Zone\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.getConfigurationSetting\\#string-string-OffsetDateTime\\}"
  syntax:
    content: "public Mono<ConfigurationSetting> getConfigurationSetting(String key, String label, OffsetDateTime acceptDateTime)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of the setting to retrieve."
    - id: "label"
      type: "java.lang.String"
      description: "The label of the configuration setting to retrieve. If <code>null</code> no label will be used."
    - id: "acceptDateTime"
      type: "java.time.OffsetDateTime"
      description: "Datetime to access a past state of the configuration setting. If <code>null</code>\n then the current state of the configuration setting will be returned."
    return:
      type: "reactor.core.publisher.Mono<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> stored in the service, or an empty Mono if the configuration value does\n not exist or the key is an invalid value (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,java.time.OffsetDateTime,boolean)"
  id: "getConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,java.time.OffsetDateTime,boolean)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "getConfigurationSettingWithResponse(ConfigurationSetting setting, OffsetDateTime acceptDateTime, boolean ifChanged)"
  nameWithType: "ConfigurationAsyncClient.getConfigurationSettingWithResponse(ConfigurationSetting setting, OffsetDateTime acceptDateTime, boolean ifChanged)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSettingWithResponse(ConfigurationSetting setting, OffsetDateTime acceptDateTime, boolean ifChanged)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSettingWithResponse*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Attempts to get the ConfigurationSetting with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\">key</xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\">label</xref>, optional `acceptDateTime` and optional ETag combination.\n\n**Code Samples**\n\nRetrieve the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.getConfigurationSettingWithResponse\\#ConfigurationSetting-OffsetDateTime-boolean\\}"
  syntax:
    content: "public Mono<Response<ConfigurationSetting>> getConfigurationSettingWithResponse(ConfigurationSetting setting, OffsetDateTime acceptDateTime, boolean ifChanged)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The setting to retrieve."
    - id: "acceptDateTime"
      type: "java.time.OffsetDateTime"
      description: "Datetime to access a past state of the configuration setting. If <code>null</code>\n then the current state of the configuration setting will be returned."
    - id: "ifChanged"
      type: "boolean"
      description: "Flag indicating if the <code>setting</code> <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag*\" data-throw-if-not-resolved=\"false\">ETag</xref> is used as a\n If-None-Match header."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
      description: "A REST response containing the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> stored in the service, or <code>null</code> if\n didn't exist. <code>null</code> is also returned if the configuration value does not exist or the key is an invalid\n value (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listConfigurationSettings(com.azure.data.appconfiguration.models.SettingSelector)"
  id: "listConfigurationSettings(com.azure.data.appconfiguration.models.SettingSelector)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "listConfigurationSettings(SettingSelector selector)"
  nameWithType: "ConfigurationAsyncClient.listConfigurationSettings(SettingSelector selector)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listConfigurationSettings(SettingSelector selector)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listConfigurationSettings*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Fetches the configuration settings that match the `selector`. If `selector` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">configuration settings</xref> are fetched with their current values.\n\n**Code Samples**\n\nRetrieve all settings that use the key \"prodDBConnection\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.listsettings\\}"
  syntax:
    content: "public PagedFlux<ConfigurationSetting> listConfigurationSettings(SettingSelector selector)"
    parameters:
    - id: "selector"
      type: "com.azure.data.appconfiguration.models.SettingSelector"
      description: "Optional. Selector to filter configuration setting results from the service."
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "A Flux of ConfigurationSettings that matches the <code>selector</code>. If no options were provided, the Flux\n contains all of the current settings in the service."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listConfigurationSettings(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  id: "listConfigurationSettings(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "listConfigurationSettings(SettingSelector selector, Context context)"
  nameWithType: "ConfigurationAsyncClient.listConfigurationSettings(SettingSelector selector, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listConfigurationSettings(SettingSelector selector, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listConfigurationSettings*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  syntax:
    content: " PagedFlux<ConfigurationSetting> listConfigurationSettings(SettingSelector selector, Context context)"
    parameters:
    - id: "selector"
      type: "com.azure.data.appconfiguration.models.SettingSelector"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.data.appconfiguration.models.ConfigurationSetting>"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisions(com.azure.data.appconfiguration.models.SettingSelector)"
  id: "listRevisions(com.azure.data.appconfiguration.models.SettingSelector)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "listRevisions(SettingSelector selector)"
  nameWithType: "ConfigurationAsyncClient.listRevisions(SettingSelector selector)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisions(SettingSelector selector)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisions*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Lists chronological/historical representation of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> resource(s). Revisions are provided in descending order from their <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLastModified()\" data-throw-if-not-resolved=\"false\">lastModified</xref> date. Revisions expire after a period of time. The service maintains change history for up to 7 days. If `selector` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSettings</xref> are fetched in their current state. Otherwise, the results returned match the parameters given in `selector`.\n\n**Code Samples**\n\nRetrieve all revisions of the setting that has the key \"prodDBConnection\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.listsettingrevisions\\}"
  syntax:
    content: "public PagedFlux<ConfigurationSetting> listRevisions(SettingSelector selector)"
    parameters:
    - id: "selector"
      type: "com.azure.data.appconfiguration.models.SettingSelector"
      description: "Optional. Used to filter configuration setting revisions from the service."
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "Revisions of the ConfigurationSetting"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisions(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  id: "listRevisions(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "listRevisions(SettingSelector selector, Context context)"
  nameWithType: "ConfigurationAsyncClient.listRevisions(SettingSelector selector, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisions(SettingSelector selector, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisions*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  syntax:
    content: " PagedFlux<ConfigurationSetting> listRevisions(SettingSelector selector, Context context)"
    parameters:
    - id: "selector"
      type: "com.azure.data.appconfiguration.models.SettingSelector"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.data.appconfiguration.models.ConfigurationSetting>"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisionsFirstPage(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  id: "listRevisionsFirstPage(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "listRevisionsFirstPage(SettingSelector selector, Context context)"
  nameWithType: "ConfigurationAsyncClient.listRevisionsFirstPage(SettingSelector selector, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisionsFirstPage(SettingSelector selector, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisionsFirstPage*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  syntax:
    content: " Mono<PagedResponse<ConfigurationSetting>> listRevisionsFirstPage(SettingSelector selector, Context context)"
    parameters:
    - id: "selector"
      type: "com.azure.data.appconfiguration.models.SettingSelector"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.PagedResponse<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisionsNextPage(java.lang.String,com.azure.core.util.Context)"
  id: "listRevisionsNextPage(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "listRevisionsNextPage(String nextPageLink, Context context)"
  nameWithType: "ConfigurationAsyncClient.listRevisionsNextPage(String nextPageLink, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisionsNextPage(String nextPageLink, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisionsNextPage*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  syntax:
    content: " Mono<PagedResponse<ConfigurationSetting>> listRevisionsNextPage(String nextPageLink, Context context)"
    parameters:
    - id: "nextPageLink"
      type: "java.lang.String"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.PagedResponse<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  id: "setConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "setConfigurationSetting(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  nameWithType: "ConfigurationAsyncClient.setConfigurationSetting(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSetting(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  syntax:
    content: " Mono<Response<ConfigurationSetting>> setConfigurationSetting(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
    - id: "ifUnchanged"
      type: "boolean"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSetting(java.lang.String,java.lang.String,java.lang.String)"
  id: "setConfigurationSetting(java.lang.String,java.lang.String,java.lang.String)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "setConfigurationSetting(String key, String label, String value)"
  nameWithType: "ConfigurationAsyncClient.setConfigurationSetting(String key, String label, String value)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSetting(String key, String label, String value)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Creates or updates a configuration value in the service with the given key. the `label` is optional.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", \"westUS\" and value \"db\\_connection\"\n\nUpdate setting's value \"db\\_connection\" to \"updated\\_db\\_connection\"\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setConfigurationSetting\\#string-string-string\\}"
  syntax:
    content: "public Mono<ConfigurationSetting> setConfigurationSetting(String key, String label, String value)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of the configuration setting to create or update."
    - id: "label"
      type: "java.lang.String"
      description: "The label of the configuration setting to create or update, If <code>null</code> no label will be used."
    - id: "value"
      type: "java.lang.String"
      description: "The value of this configuration setting."
    return:
      type: "reactor.core.publisher.Mono<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> that was created or updated, or an empty Mono if the key is an invalid\n value (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  id: "setConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "setConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
  nameWithType: "ConfigurationAsyncClient.setConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSettingWithResponse*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Creates or updates a configuration value in the service. Partial updates are not supported and the entire configuration setting is updated. If <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag()\" data-throw-if-not-resolved=\"false\">ETag</xref> is specified, the configuration value is updated if the current setting's ETag matches. If the ETag's value is equal to the wildcard character (`\"*\"`), the setting will always be updated.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", label \"westUS\", and value \"db\\_connection\".\n\nUpdate setting's value \"db\\_connection\" to \"updated\\_db\\_connection\"\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setConfigurationSettingWithResponse\\#ConfigurationSetting-boolean\\}"
  syntax:
    content: "public Mono<Response<ConfigurationSetting>> setConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The setting to create or update based on its key, optional label and optional ETag combination."
    - id: "ifUnchanged"
      type: "boolean"
      description: "Flag indicating if the <code>setting</code> <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag*\" data-throw-if-not-resolved=\"false\">ETag</xref> is used as a\n IF-MATCH header."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
      description: "A REST response containing the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> that was created or updated, if the key is an\n invalid value, the setting is read-only, or an ETag was provided but does not match the service's current ETag\n value (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  id: "setReadOnly(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "setReadOnly(ConfigurationSetting setting, boolean isReadOnly, Context context)"
  nameWithType: "ConfigurationAsyncClient.setReadOnly(ConfigurationSetting setting, boolean isReadOnly, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly(ConfigurationSetting setting, boolean isReadOnly, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  syntax:
    content: " Mono<Response<ConfigurationSetting>> setReadOnly(ConfigurationSetting setting, boolean isReadOnly, Context context)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
    - id: "isReadOnly"
      type: "boolean"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly(java.lang.String,java.lang.String,boolean)"
  id: "setReadOnly(java.lang.String,java.lang.String,boolean)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "setReadOnly(String key, String label, boolean isReadOnly)"
  nameWithType: "ConfigurationAsyncClient.setReadOnly(String key, String label, boolean isReadOnly)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly(String key, String label, boolean isReadOnly)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Sets the read-only status for the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> that matches the `key`, the optional `label`.\n\n**Code Samples**\n\nSet the setting to read-only with the key-label \"prodDBConnection\"-\"westUS\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setReadOnly\\#string-string-boolean\\}\n\nClear read-only of the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setReadOnly\\#string-string-boolean-clearReadOnly\\}"
  syntax:
    content: "public Mono<ConfigurationSetting> setReadOnly(String key, String label, boolean isReadOnly)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of configuration setting to set to be read-only."
    - id: "label"
      type: "java.lang.String"
      description: "The label of configuration setting to read-only. If <code>null</code> no label will be used."
    - id: "isReadOnly"
      type: "boolean"
      description: "Flag used to set the read-only status of the configuration. <code>true</code> will put the\n configuration into a read-only state, <code>false</code> will clear the state."
    return:
      type: "reactor.core.publisher.Mono<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> that is read-only, or an empty Mono if a key collision occurs or the\n key is an invalid value (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnlyWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  id: "setReadOnlyWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "setReadOnlyWithResponse(ConfigurationSetting setting, boolean isReadOnly)"
  nameWithType: "ConfigurationAsyncClient.setReadOnlyWithResponse(ConfigurationSetting setting, boolean isReadOnly)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnlyWithResponse(ConfigurationSetting setting, boolean isReadOnly)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnlyWithResponse*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Sets the read-only status for the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref>.\n\n**Code Samples**\n\nSet the setting to read-only with the key-label \"prodDBConnection\"-\"westUS\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setReadOnlyWithResponse\\#ConfigurationSetting-boolean\\}\n\nClear read-only of the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setReadOnlyWithResponse\\#ConfigurationSetting-boolean-clearReadOnly\\}"
  syntax:
    content: "public Mono<Response<ConfigurationSetting>> setReadOnlyWithResponse(ConfigurationSetting setting, boolean isReadOnly)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The configuration setting to set to read-only or not read-only based on the <code>isReadOnly</code>."
    - id: "isReadOnly"
      type: "boolean"
      description: "Flag used to set the read-only status of the configuration. <code>true</code> will put the\n configuration into a read-only state, <code>false</code> will clear the state."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
      description: "A REST response containing the read-only or not read-only ConfigurationSetting if <code>isReadOnly</code>\n is true or null, or false respectively. Or return <code>null</code> if the setting didn't exist.\n <code>null</code> is also returned if the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\">key</xref> is an invalid value.\n (which will also throw HttpResponseException described below)."
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.core.http.HttpPipeline"
  spec.java:
  - uid: "com.azure.core.http.HttpPipeline"
    name: "HttpPipeline"
    fullName: "com.azure.core.http.HttpPipeline"
- uid: "com.azure.data.appconfiguration.ConfigurationServiceVersion"
  name: "ConfigurationServiceVersion"
  nameWithType: "ConfigurationServiceVersion"
  fullName: "com.azure.data.appconfiguration.ConfigurationServiceVersion"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.ConfigurationAsyncClient*"
  name: "ConfigurationAsyncClient"
  nameWithType: "ConfigurationAsyncClient.ConfigurationAsyncClient"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.ConfigurationAsyncClient"
  package: "com.azure.data.appconfiguration"
- uid: "reactor.core.publisher.Mono<com.azure.data.appconfiguration.models.ConfigurationSetting>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.data.appconfiguration.models.ConfigurationSetting"
    name: "ConfigurationSetting"
    fullName: "com.azure.data.appconfiguration.models.ConfigurationSetting"
  - name: ">"
    fullName: ">"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSetting*"
  name: "addConfigurationSetting"
  nameWithType: "ConfigurationAsyncClient.addConfigurationSetting"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSetting"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.models.ConfigurationSetting"
  name: "ConfigurationSetting"
  nameWithType: "ConfigurationSetting"
  fullName: "com.azure.data.appconfiguration.models.ConfigurationSetting"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.data.appconfiguration.models.ConfigurationSetting"
    name: "ConfigurationSetting"
    fullName: "com.azure.data.appconfiguration.models.ConfigurationSetting"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSettingWithResponse*"
  name: "addConfigurationSettingWithResponse"
  nameWithType: "ConfigurationAsyncClient.addConfigurationSettingWithResponse"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSettingWithResponse"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSetting*"
  name: "setConfigurationSetting"
  nameWithType: "ConfigurationAsyncClient.setConfigurationSetting"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSetting"
  package: "com.azure.data.appconfiguration"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSettingWithResponse*"
  name: "setConfigurationSettingWithResponse"
  nameWithType: "ConfigurationAsyncClient.setConfigurationSettingWithResponse"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSettingWithResponse"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting*"
  name: "getConfigurationSetting"
  nameWithType: "ConfigurationAsyncClient.getConfigurationSetting"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting"
  package: "com.azure.data.appconfiguration"
- uid: "java.time.OffsetDateTime"
  spec.java:
  - uid: "java.time.OffsetDateTime"
    name: "OffsetDateTime"
    fullName: "java.time.OffsetDateTime"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSettingWithResponse*"
  name: "getConfigurationSettingWithResponse"
  nameWithType: "ConfigurationAsyncClient.getConfigurationSettingWithResponse"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSettingWithResponse"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSetting*"
  name: "deleteConfigurationSetting"
  nameWithType: "ConfigurationAsyncClient.deleteConfigurationSetting"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSetting"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSettingWithResponse*"
  name: "deleteConfigurationSettingWithResponse"
  nameWithType: "ConfigurationAsyncClient.deleteConfigurationSettingWithResponse"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSettingWithResponse"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly*"
  name: "setReadOnly"
  nameWithType: "ConfigurationAsyncClient.setReadOnly"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnlyWithResponse*"
  name: "setReadOnlyWithResponse"
  nameWithType: "ConfigurationAsyncClient.setReadOnlyWithResponse"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnlyWithResponse"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.models.SettingSelector"
  name: "SettingSelector"
  nameWithType: "SettingSelector"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector"
- uid: "com.azure.core.http.rest.PagedFlux<com.azure.data.appconfiguration.models.ConfigurationSetting>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.data.appconfiguration.models.ConfigurationSetting"
    name: "ConfigurationSetting"
    fullName: "com.azure.data.appconfiguration.models.ConfigurationSetting"
  - name: ">"
    fullName: ">"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listConfigurationSettings*"
  name: "listConfigurationSettings"
  nameWithType: "ConfigurationAsyncClient.listConfigurationSettings"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listConfigurationSettings"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisions*"
  name: "listRevisions"
  nameWithType: "ConfigurationAsyncClient.listRevisions"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisions"
  package: "com.azure.data.appconfiguration"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.PagedResponse<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.PagedResponse"
    name: "PagedResponse"
    fullName: "com.azure.core.http.rest.PagedResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.data.appconfiguration.models.ConfigurationSetting"
    name: "ConfigurationSetting"
    fullName: "com.azure.data.appconfiguration.models.ConfigurationSetting"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisionsFirstPage*"
  name: "listRevisionsFirstPage"
  nameWithType: "ConfigurationAsyncClient.listRevisionsFirstPage"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisionsFirstPage"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisionsNextPage*"
  name: "listRevisionsNextPage"
  nameWithType: "ConfigurationAsyncClient.listRevisionsNextPage"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisionsNextPage"
  package: "com.azure.data.appconfiguration"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.core.http.rest.Response"
  name: "Response"
  nameWithType: "Response"
  fullName: "com.azure.core.http.rest.Response"
- uid: "com.azure.core.http.rest.PagedFlux"
  name: "PagedFlux"
  nameWithType: "PagedFlux"
  fullName: "com.azure.core.http.rest.PagedFlux"
- uid: "com.azure.core.http.rest.PagedResponse"
  name: "PagedResponse"
  nameWithType: "PagedResponse"
  fullName: "com.azure.core.http.rest.PagedResponse"
