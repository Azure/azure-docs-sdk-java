### YamlMime:JavaType
uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
name: "ConfigurationAsyncClient"
nameWithType: "ConfigurationAsyncClient"
summary: "This class provides a client that contains all the operations for <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSettings\"></xref> in Azure App Configuration Store."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ConfigurationAsyncClient"
methods:
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSetting(ConfigurationSetting setting)"
  name: "addConfigurationSetting(ConfigurationSetting setting)"
  nameWithType: "ConfigurationAsyncClient.addConfigurationSetting(ConfigurationSetting setting)"
  summary: "Adds a configuration value in the service if that key and label does not exist."
  parameters:
  - description: "The setting to add based on its key and optional label combination."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ConfigurationSetting> addConfigurationSetting(ConfigurationSetting setting)"
  desc: "Adds a configuration value in the service if that key and label does not exist. The label value of the ConfigurationSetting is optional. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", label \"westUS\", and value \"db\\_connection\".\n\n```java\nclient.addConfigurationSetting(\n     new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\").setValue(\"db_connection\"))\n     .subscribe(response -> System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n         response.getKey(), response.getLabel(), response.getValue()));\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that was created, or <code>null</code> if a key collision occurs or the key\n is an invalid value (which will also throw HttpResponseException described below)."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSetting(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSetting(String key, String label, String value)"
  name: "addConfigurationSetting(String key, String label, String value)"
  nameWithType: "ConfigurationAsyncClient.addConfigurationSetting(String key, String label, String value)"
  summary: "Adds a configuration value in the service if that key does not exist."
  parameters:
  - description: "The key of the configuration setting to add."
    name: "key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The label of the configuration setting to add. If <code>null</code> no label will be used."
    name: "label"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The value associated with this configuration setting key."
    name: "value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ConfigurationSetting> addConfigurationSetting(String key, String label, String value)"
  desc: "Adds a configuration value in the service if that key does not exist. The `label` is optional.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", label \"westUS\" and value \"db\\_connection\".\n\n```java\nclient.addConfigurationSetting(\"prodDBConnection\", \"westUS\", \"db_connection\")\n     .subscribe(response -> System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n         response.getKey(), response.getLabel(), response.getValue()));\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that was created, or <code>null</code> if a key collision occurs or the key\n is an invalid value (which will also throw HttpResponseException described below)."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSettingWithResponse(ConfigurationSetting setting)"
  name: "addConfigurationSettingWithResponse(ConfigurationSetting setting)"
  nameWithType: "ConfigurationAsyncClient.addConfigurationSettingWithResponse(ConfigurationSetting setting)"
  summary: "Adds a configuration value in the service if that key and label does not exist."
  parameters:
  - description: "The setting to add based on its key and optional label combination."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ConfigurationSetting>> addConfigurationSettingWithResponse(ConfigurationSetting setting)"
  desc: "Adds a configuration value in the service if that key and label does not exist. The label value of the ConfigurationSetting is optional. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", label \"westUS\", and value \"db\\_connection\".\n\n```java\nclient.addConfigurationSettingWithResponse(\n     new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\").setValue(\"db_connection\"))\n     .subscribe(response -> {\n         ConfigurationSetting responseSetting = response.getValue();\n         System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n             responseSetting.getKey(), responseSetting.getLabel(), responseSetting.getValue());\n     });\n```"
  returns:
    description: "A REST response containing the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that was created, if a key collision occurs\n or the key is an invalid value (which will also throw HttpResponseException described below)."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSetting(ConfigurationSetting setting)"
  name: "deleteConfigurationSetting(ConfigurationSetting setting)"
  nameWithType: "ConfigurationAsyncClient.deleteConfigurationSetting(ConfigurationSetting setting)"
  summary: "Deletes the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref> and optional ETag combination from the service."
  parameters:
  - description: "The setting to delete based on its key, optional label and optional ETag combination."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ConfigurationSetting> deleteConfigurationSetting(ConfigurationSetting setting)"
  desc: "Deletes the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref> and optional ETag combination from the service. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>. If <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ETag\"></xref> is specified and is not the wildcard character (`\"*\"`), then the setting is **only** deleted if the ETag matches the current ETag; this means that no one has updated the ConfigurationSetting yet.\n\n**Code Samples**\n\nDelete the setting with the key \"prodDBConnection\".\n\n```java\nclient.deleteConfigurationSetting(new ConfigurationSetting().setKey(\"prodDBConnection\"))\n     .subscribe(response -> System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n         response.getKey(), response.getValue()));\n```"
  returns:
    description: "The deleted ConfigurationSetting or an empty Mono is also returned if the <code>key</code> is an invalid value\n (which will also throw HttpResponseException described below)."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSetting(java.lang.String,java.lang.String)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSetting(String key, String label)"
  name: "deleteConfigurationSetting(String key, String label)"
  nameWithType: "ConfigurationAsyncClient.deleteConfigurationSetting(String key, String label)"
  summary: "Deletes the Configuration<wbr>Setting with a matching `key` and optional `label` combination."
  parameters:
  - description: "The key of configuration setting to delete."
    name: "key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The label of configuration setting to delete. If <code>null</code> no label will be used."
    name: "label"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ConfigurationSetting> deleteConfigurationSetting(String key, String label)"
  desc: "Deletes the ConfigurationSetting with a matching `key` and optional `label` combination.\n\n**Code Samples**\n\nDelete the setting with the key \"prodDBConnection\".\n\n```java\nclient.deleteConfigurationSetting(\"prodDBConnection\", null)\n     .subscribe(response -> System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n         response.getKey(), response.getLabel(), response.getValue()));\n```"
  returns:
    description: "The deleted ConfigurationSetting or an empty Mono is also returned if the <code>key</code> is an invalid value\n (which will also throw HttpResponseException described below)."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
  name: "deleteConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
  nameWithType: "ConfigurationAsyncClient.deleteConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
  summary: "Deletes the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref> and optional ETag combination from the service."
  parameters:
  - description: "The setting to delete based on its key, optional label and optional ETag combination."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  - description: "Flag indicating if the <code>setting</code> <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ETag\"></xref> is used as a\n IF-MATCH header."
    name: "ifUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ConfigurationSetting>> deleteConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
  desc: "Deletes the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref> and optional ETag combination from the service. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>. If <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ETag\"></xref> is specified and is not the wildcard character (`\"*\"`), then the setting is **only** deleted if the ETag matches the current ETag; this means that no one has updated the ConfigurationSetting yet.\n\n**Code Samples**\n\nDelete the setting with the key-label \"prodDBConnection\"-\"westUS\"\n\n```java\nclient.deleteConfigurationSettingWithResponse(\n     new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\"), false)\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(response -> {\n         final ConfigurationSetting responseSetting = response.getValue();\n         System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n             responseSetting.getKey(), responseSetting.getLabel(), responseSetting.getValue());\n     });\n```"
  returns:
    description: "A REST response containing the deleted ConfigurationSetting or <code>null</code> if didn't exist. <code>null</code>\n is also returned if the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref> is an invalid value or\n <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ETag\"></xref> is set but does not match the current ETag\n (which will also throw HttpResponseException described below)."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting(ConfigurationSetting setting)"
  name: "getConfigurationSetting(ConfigurationSetting setting)"
  nameWithType: "ConfigurationAsyncClient.getConfigurationSetting(ConfigurationSetting setting)"
  summary: "Attempts to get the Configuration<wbr>Setting with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref>, optional `acceptDateTime` and optional ETag combination."
  parameters:
  - description: "The setting to retrieve."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ConfigurationSetting> getConfigurationSetting(ConfigurationSetting setting)"
  desc: "Attempts to get the ConfigurationSetting with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref>, optional `acceptDateTime` and optional ETag combination. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nRetrieve the setting with the key \"prodDBConnection\" and a time that one minute before now at UTC-Zone\n\n```java\nclient.getConfigurationSetting(new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\"))\n     .subscribe(response -> System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n         response.getKey(), response.getLabel(), response.getValue()));\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> stored in the service, or an empty Mono if the configuration value does\n not exist or the key is an invalid value (which will also throw HttpResponseException described below)."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting(java.lang.String,java.lang.String)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting(String key, String label)"
  name: "getConfigurationSetting(String key, String label)"
  nameWithType: "ConfigurationAsyncClient.getConfigurationSetting(String key, String label)"
  summary: "Attempts to get a Configuration<wbr>Setting that matches the `key`, and the optional `label` combination."
  parameters:
  - description: "The key of the setting to retrieve."
    name: "key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The label of the configuration setting to retrieve. If <code>null</code> no label will be used."
    name: "label"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ConfigurationSetting> getConfigurationSetting(String key, String label)"
  desc: "Attempts to get a ConfigurationSetting that matches the `key`, and the optional `label` combination.\n\n**Code Samples**\n\nRetrieve the setting with the key \"prodDBConnection\".\n\n```java\nclient.getConfigurationSetting(\"prodDBConnection\", null)\n     .subscribe(response -> System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n         response.getKey(), response.getLabel(), response.getValue()));\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> stored in the service, or an empty Mono if the configuration value does\n not exist or the key is an invalid value (which will also throw HttpResponseException described below)."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting(java.lang.String,java.lang.String,java.time.OffsetDateTime)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting(String key, String label, OffsetDateTime acceptDateTime)"
  name: "getConfigurationSetting(String key, String label, OffsetDateTime acceptDateTime)"
  nameWithType: "ConfigurationAsyncClient.getConfigurationSetting(String key, String label, OffsetDateTime acceptDateTime)"
  summary: "Attempts to get a Configuration<wbr>Setting that matches the `key`, the optional `label`, and the optional `acceptDateTime` combination."
  parameters:
  - description: "The key of the setting to retrieve."
    name: "key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The label of the configuration setting to retrieve. If <code>null</code> no label will be used."
    name: "label"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Datetime to access a past state of the configuration setting. If <code>null</code>\n then the current state of the configuration setting will be returned."
    name: "acceptDateTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ConfigurationSetting> getConfigurationSetting(String key, String label, OffsetDateTime acceptDateTime)"
  desc: "Attempts to get a ConfigurationSetting that matches the `key`, the optional `label`, and the optional `acceptDateTime` combination.\n\n**Code Samples**\n\nRetrieve the setting with the key \"prodDBConnection\" and a time that one minute before now at UTC-Zone\n\n```java\nclient.getConfigurationSetting(\n     \"prodDBConnection\", null, OffsetDateTime.now(ZoneOffset.UTC).minusMinutes(1))\n     .subscribe(response -> System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n         response.getKey(), response.getLabel(), response.getValue()));\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> stored in the service, or an empty Mono if the configuration value does\n not exist or the key is an invalid value (which will also throw HttpResponseException described below)."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,java.time.OffsetDateTime,boolean)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSettingWithResponse(ConfigurationSetting setting, OffsetDateTime acceptDateTime, boolean ifChanged)"
  name: "getConfigurationSettingWithResponse(ConfigurationSetting setting, OffsetDateTime acceptDateTime, boolean ifChanged)"
  nameWithType: "ConfigurationAsyncClient.getConfigurationSettingWithResponse(ConfigurationSetting setting, OffsetDateTime acceptDateTime, boolean ifChanged)"
  summary: "Attempts to get the Configuration<wbr>Setting with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref>, optional `acceptDateTime` and optional ETag combination."
  parameters:
  - description: "The setting to retrieve."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  - description: "Datetime to access a past state of the configuration setting. If <code>null</code>\n then the current state of the configuration setting will be returned."
    name: "acceptDateTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "Flag indicating if the <code>setting</code> <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ETag\"></xref> is used as a\n If-None-Match header."
    name: "ifChanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ConfigurationSetting>> getConfigurationSettingWithResponse(ConfigurationSetting setting, OffsetDateTime acceptDateTime, boolean ifChanged)"
  desc: "Attempts to get the ConfigurationSetting with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref>, optional `acceptDateTime` and optional ETag combination. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nRetrieve the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n```java\nclient.getConfigurationSettingWithResponse(\n     new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\"), null, false)\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(response -> {\n         final ConfigurationSetting result = response.getValue();\n         System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n             result.getKey(), result.getLabel(), result.getValue());\n     });\n```"
  returns:
    description: "A REST response containing the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> stored in the service, or <code>null</code> if\n didn't exist. <code>null</code> is also returned if the configuration value does not exist or the key is an invalid\n value (which will also throw HttpResponseException described below)."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listConfigurationSettings(com.azure.data.appconfiguration.models.SettingSelector)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listConfigurationSettings(SettingSelector selector)"
  name: "listConfigurationSettings(SettingSelector selector)"
  nameWithType: "ConfigurationAsyncClient.listConfigurationSettings(SettingSelector selector)"
  summary: "Fetches the configuration settings that match the `selector`."
  parameters:
  - description: "Optional. Selector to filter configuration setting results from the service."
    name: "selector"
    type: "<xref href=\"com.azure.data.appconfiguration.models.SettingSelector?alt=com.azure.data.appconfiguration.models.SettingSelector&text=SettingSelector\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<ConfigurationSetting> listConfigurationSettings(SettingSelector selector)"
  desc: "Fetches the configuration settings that match the `selector`. If `selector` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"configuration settings\"></xref> are fetched with their current values.\n\n**Code Samples**\n\nRetrieve all settings that use the key \"prodDBConnection\".\n\n```java\nclient.listConfigurationSettings(new SettingSelector().setKeyFilter(\"prodDBConnection\"))\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(setting ->\n         System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue()));\n```"
  returns:
    description: "A Flux of ConfigurationSettings that matches the <code>selector</code>. If no options were provided, the Flux\n contains all of the current settings in the service."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisions(com.azure.data.appconfiguration.models.SettingSelector)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listRevisions(SettingSelector selector)"
  name: "listRevisions(SettingSelector selector)"
  nameWithType: "ConfigurationAsyncClient.listRevisions(SettingSelector selector)"
  summary: "Lists chronological/historical representation of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> resource(s)."
  parameters:
  - description: "Optional. Used to filter configuration setting revisions from the service."
    name: "selector"
    type: "<xref href=\"com.azure.data.appconfiguration.models.SettingSelector?alt=com.azure.data.appconfiguration.models.SettingSelector&text=SettingSelector\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<ConfigurationSetting> listRevisions(SettingSelector selector)"
  desc: "Lists chronological/historical representation of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> resource(s). Revisions are provided in descending order from their <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLastModified()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"lastModified\"></xref> date. Revisions expire after a period of time, see [Pricing][] for more information. If `selector` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSettings\"></xref> are fetched in their current state. Otherwise, the results returned match the parameters given in `selector`.\n\n**Code Samples**\n\nRetrieve all revisions of the setting that has the key \"prodDBConnection\".\n\n```java\nclient.listRevisions(new SettingSelector().setKeyFilter(\"prodDBConnection\"))\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(setting ->\n         System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue()));\n```\n\n\n[Pricing]: https://azure.microsoft.com/pricing/details/app-configuration/"
  returns:
    description: "Revisions of the ConfigurationSetting"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSetting(ConfigurationSetting setting)"
  name: "setConfigurationSetting(ConfigurationSetting setting)"
  nameWithType: "ConfigurationAsyncClient.setConfigurationSetting(ConfigurationSetting setting)"
  summary: "Creates or updates a configuration value in the service."
  parameters:
  - description: "The setting to add based on its key and optional label combination."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ConfigurationSetting> setConfigurationSetting(ConfigurationSetting setting)"
  desc: "Creates or updates a configuration value in the service. Partial updates are not supported and the entire configuration setting is updated. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", \"westUS\" and value \"db\\_connection\"\n\nUpdate setting's value \"db\\_connection\" to \"updated\\_db\\_connection\"\n\n```java\nclient.setConfigurationSetting(new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\"))\n     .subscribe(response -> System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n         response.getKey(), response.getLabel(), response.getValue()));\n // Update the value of the setting to \"updated_db_connection\"\n client.setConfigurationSetting(\n     new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\").setValue(\"updated_db_connection\"))\n     .subscribe(response -> System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n         response.getKey(), response.getLabel(), response.getValue()));\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that was created or updated, or an empty Mono if the key is an invalid\n value (which will also throw HttpResponseException described below)."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSetting(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSetting(String key, String label, String value)"
  name: "setConfigurationSetting(String key, String label, String value)"
  nameWithType: "ConfigurationAsyncClient.setConfigurationSetting(String key, String label, String value)"
  summary: "Creates or updates a configuration value in the service with the given key."
  parameters:
  - description: "The key of the configuration setting to create or update."
    name: "key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The label of the configuration setting to create or update, If <code>null</code> no label will be used."
    name: "label"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The value of this configuration setting."
    name: "value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ConfigurationSetting> setConfigurationSetting(String key, String label, String value)"
  desc: "Creates or updates a configuration value in the service with the given key. the `label` is optional.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", \"westUS\" and value \"db\\_connection\"\n\nUpdate setting's value \"db\\_connection\" to \"updated\\_db\\_connection\"\n\n```java\nclient.setConfigurationSetting(\"prodDBConnection\", \"westUS\", \"db_connection\")\n     .subscribe(response -> System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n         response.getKey(), response.getLabel(), response.getValue()));\n // Update the value of the setting to \"updated_db_connection\"\n client.setConfigurationSetting(\"prodDBConnection\", \"westUS\", \"updated_db_connection\")\n     .subscribe(response -> System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n         response.getKey(), response.getLabel(), response.getValue()));\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that was created or updated, or an empty Mono if the key is an invalid\n value (which will also throw HttpResponseException described below)."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
  name: "setConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
  nameWithType: "ConfigurationAsyncClient.setConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
  summary: "Creates or updates a configuration value in the service."
  parameters:
  - description: "The setting to create or update based on its key, optional label and optional ETag combination."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  - description: "Flag indicating if the <code>setting</code> <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ETag\"></xref> is used as a\n IF-MATCH header."
    name: "ifUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ConfigurationSetting>> setConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
  desc: "Creates or updates a configuration value in the service. Partial updates are not supported and the entire configuration setting is updated. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>. If <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ETag\"></xref> is specified, the configuration value is updated if the current setting's ETag matches. If the ETag's value is equal to the wildcard character (`\"*\"`), the setting will always be updated.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", label \"westUS\", and value \"db\\_connection\".\n\nUpdate setting's value \"db\\_connection\" to \"updated\\_db\\_connection\"\n\n```java\nclient.setConfigurationSettingWithResponse(new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\")\n     .setValue(\"db_connection\"), false)\n     .subscribe(response -> {\n         final ConfigurationSetting result = response.getValue();\n         System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n             result.getKey(), result.getLabel(), result.getValue());\n     });\n // Update the value of the setting to \"updated_db_connection\"\n client.setConfigurationSettingWithResponse(new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\")\n     .setValue(\"updated_db_connection\"), false)\n     .subscribe(response -> {\n         final ConfigurationSetting responseSetting = response.getValue();\n         System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n             responseSetting.getKey(), responseSetting.getLabel(), responseSetting.getValue());\n     });\n```"
  returns:
    description: "A REST response containing the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that was created or updated, if the key is an\n invalid value, the setting is read-only, or an ETag was provided but does not match the service's current ETag\n value (which will also throw HttpResponseException described below)."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly(ConfigurationSetting setting, boolean isReadOnly)"
  name: "setReadOnly(ConfigurationSetting setting, boolean isReadOnly)"
  nameWithType: "ConfigurationAsyncClient.setReadOnly(ConfigurationSetting setting, boolean isReadOnly)"
  summary: "Sets the read-only status for the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref>."
  parameters:
  - description: "The configuration setting to set to read-only or not read-only based on the <code>isReadOnly</code>."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  - description: "Flag used to set the read-only status of the configuration. <code>true</code> will put the\n configuration into a read-only state, <code>false</code> will clear the state."
    name: "isReadOnly"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ConfigurationSetting> setReadOnly(ConfigurationSetting setting, boolean isReadOnly)"
  desc: "Sets the read-only status for the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref>. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nSet the setting to read-only with the key-label \"prodDBConnection\"-\"westUS\".\n\n```java\nclient.setReadOnly(new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\"), true)\n     .subscribe(response -> System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n         response.getKey(), response.getLabel(), response.getValue()));\n```\n\nClear read-only of the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n```java\nclient.setReadOnly(new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\"), false)\n     .subscribe(response -> System.out.printf(\"Key: %s, Value: %s\", response.getKey(), response.getValue()));\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that is read-only, or an empty Mono if a key collision occurs or the\n key is an invalid value (which will also throw HttpResponseException described below)."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly(java.lang.String,java.lang.String,boolean)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly(String key, String label, boolean isReadOnly)"
  name: "setReadOnly(String key, String label, boolean isReadOnly)"
  nameWithType: "ConfigurationAsyncClient.setReadOnly(String key, String label, boolean isReadOnly)"
  summary: "Sets the read-only status for the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that matches the `key`, the optional `label`."
  parameters:
  - description: "The key of configuration setting to set to be read-only."
    name: "key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The label of configuration setting to read-only. If <code>null</code> no label will be used."
    name: "label"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Flag used to set the read-only status of the configuration. <code>true</code> will put the\n configuration into a read-only state, <code>false</code> will clear the state."
    name: "isReadOnly"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ConfigurationSetting> setReadOnly(String key, String label, boolean isReadOnly)"
  desc: "Sets the read-only status for the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that matches the `key`, the optional `label`.\n\n**Code Samples**\n\nSet the setting to read-only with the key-label \"prodDBConnection\"-\"westUS\".\n\n```java\nclient.setReadOnly(\"prodDBConnection\", \"westUS\", true)\n     .subscribe(response -> System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n         response.getKey(), response.getLabel(), response.getValue()));\n```\n\nClear read-only of the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n```java\nclient.setReadOnly(\"prodDBConnection\", \"westUS\", false)\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(response -> System.out.printf(\"Key: %s, Value: %s\", response.getKey(), response.getValue()));\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that is read-only, or an empty Mono if a key collision occurs or the\n key is an invalid value (which will also throw HttpResponseException described below)."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnlyWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnlyWithResponse(ConfigurationSetting setting, boolean isReadOnly)"
  name: "setReadOnlyWithResponse(ConfigurationSetting setting, boolean isReadOnly)"
  nameWithType: "ConfigurationAsyncClient.setReadOnlyWithResponse(ConfigurationSetting setting, boolean isReadOnly)"
  summary: "Sets the read-only status for the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref>."
  parameters:
  - description: "The configuration setting to set to read-only or not read-only based on the <code>isReadOnly</code>."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  - description: "Flag used to set the read-only status of the configuration. <code>true</code> will put the\n configuration into a read-only state, <code>false</code> will clear the state."
    name: "isReadOnly"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ConfigurationSetting>> setReadOnlyWithResponse(ConfigurationSetting setting, boolean isReadOnly)"
  desc: "Sets the read-only status for the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref>. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nSet the setting to read-only with the key-label \"prodDBConnection\"-\"westUS\".\n\n```java\nclient.setReadOnlyWithResponse(new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\"), true)\n     .subscribe(response -> {\n         final ConfigurationSetting result = response.getValue();\n         System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n             result.getKey(), result.getLabel(), result.getValue());\n     });\n```\n\nClear read-only of the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n```java\nclient.setReadOnlyWithResponse(new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\"), false)\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(response -> {\n         ConfigurationSetting result = response.getValue();\n         System.out.printf(\"Key: %s, Value: %s\", result.getKey(), result.getValue());\n     });\n```"
  returns:
    description: "A REST response containing the read-only or not read-only ConfigurationSetting if <code>isReadOnly</code>\n is true or null, or false respectively. Or return <code>null</code> if the setting didn't exist.\n <code>null</code> is also returned if the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref> is an invalid value.\n (which will also throw HttpResponseException described below)."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.updateSyncToken(java.lang.String)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.updateSyncToken(String token)"
  name: "updateSyncToken(String token)"
  nameWithType: "ConfigurationAsyncClient.updateSyncToken(String token)"
  summary: "Adds an external synchronization token to ensure service requests receive up-to-date values."
  parameters:
  - description: "an external synchronization token to ensure service requests receive up-to-date values."
    name: "token"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void updateSyncToken(String token)"
  desc: "Adds an external synchronization token to ensure service requests receive up-to-date values."
type: "class"
desc: "This class provides a client that contains all the operations for <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSettings\"></xref> in Azure App Configuration Store. Operations allowed by the client are adding, retrieving, deleting, set read-only status ConfigurationSettings, and listing settings or revision of a setting based on a <xref uid=\"com.azure.data.appconfiguration.models.SettingSelector\" data-throw-if-not-resolved=\"false\" data-raw-source=\"filter\"></xref>.\n\n**Instantiating an asynchronous Configuration Client**\n\n```java\nConfigurationAsyncClient configurationAsyncClient = new ConfigurationClientBuilder()\n     .connectionString(connectionString)\n     .buildAsyncClient();\n```\n\nView <xref uid=\"com.azure.data.appconfiguration.ConfigurationClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"this\"></xref> for additional ways to construct the client."
metadata: {}
package: "com.azure.data.appconfiguration"
artifact: com.azure:azure-data-appconfiguration:1.3.6
