### YamlMime:JavaType
uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient"
fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient"
name: "MetricsAdvisorAdministrationClient"
nameWithType: "MetricsAdvisorAdministrationClient"
summary: "This class provides an asynchronous client that contains all the operations that apply to Azure Metrics Advisor."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class MetricsAdvisorAdministrationClient"
methods:
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createAlertConfig(com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createAlertConfig(AnomalyAlertConfiguration alertConfiguration)"
  name: "createAlertConfig(AnomalyAlertConfiguration alertConfiguration)"
  nameWithType: "MetricsAdvisorAdministrationClient.createAlertConfig(AnomalyAlertConfiguration alertConfiguration)"
  summary: "Create a configuration to trigger alert when anomalies are detected."
  parameters:
  - description: "The anomaly alerting configuration."
    name: "alertConfiguration"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AnomalyAlertConfiguration createAlertConfig(AnomalyAlertConfiguration alertConfiguration)"
  desc: "Create a configuration to trigger alert when anomalies are detected.\n\n**Code sample**\n\n```java\nString detectionConfigurationId1 = \"9ol48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String detectionConfigurationId2 = \"3e58er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String hookId1 = \"5f48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String hookId2 = \"8i48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n\n final AnomalyAlertConfiguration anomalyAlertConfiguration\n     = metricsAdvisorAdminClient.createAlertConfig(\n         new AnomalyAlertConfiguration(\"My AnomalyAlert config name\")\n         .setDescription(\"alert config description\")\n         .setMetricAlertConfigurations(Arrays.asList(\n             new MetricAlertConfiguration(detectionConfigurationId1,\n                 MetricAnomalyAlertScope.forWholeSeries()),\n             new MetricAlertConfiguration(detectionConfigurationId2,\n                 MetricAnomalyAlertScope.forWholeSeries())\n                 .setAlertConditions(new MetricAnomalyAlertConditions()\n                     .setSeverityRangeCondition(new SeverityCondition(AnomalySeverity.HIGH,\n                         AnomalySeverity.HIGH)))))\n         .setCrossMetricsOperator(MetricAlertConfigurationsOperator.AND)\n         .setHookIdsToAlert(Arrays.asList(hookId1, hookId2)));\n\n System.out.printf(\"DataPoint Anomaly alert configuration Id: %s%n\",\n     anomalyAlertConfiguration.getId());\n System.out.printf(\"DataPoint Anomaly alert configuration description: %s%n\",\n     anomalyAlertConfiguration.getDescription());\n System.out.printf(\"DataPoint Anomaly alert configuration hook ids: %s%n\",\n     anomalyAlertConfiguration.getHookIdsToAlert());\n System.out.printf(\"DataPoint Anomaly alert configuration cross metrics operator: %s%n\",\n     anomalyAlertConfiguration.getCrossMetricsOperator().toString());\n```"
  returns:
    description: "The <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyAlertConfiguration\"></xref> that was created."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createAlertConfigWithResponse(com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration, Context context)"
  name: "createAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.createAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration, Context context)"
  summary: "Create a configuration to trigger alert when anomalies are detected."
  parameters:
  - description: "The anomaly alerting configuration."
    name: "alertConfiguration"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<AnomalyAlertConfiguration> createAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration, Context context)"
  desc: "Create a configuration to trigger alert when anomalies are detected.\n\n**Code sample**\n\n```java\nString detectionConfigurationId1 = \"9ol48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String detectionConfigurationId2 = \"3e58er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String hookId1 = \"5f48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String hookId2 = \"8i48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n\n final Response<AnomalyAlertConfiguration> alertConfigurationResponse\n     = metricsAdvisorAdminClient.createAlertConfigWithResponse(\n         new AnomalyAlertConfiguration(\"My AnomalyAlert config name\")\n         .setDescription(\"alert config description\")\n         .setMetricAlertConfigurations(Arrays.asList(\n             new MetricAlertConfiguration(detectionConfigurationId1,\n                 MetricAnomalyAlertScope.forWholeSeries()),\n             new MetricAlertConfiguration(detectionConfigurationId2,\n                 MetricAnomalyAlertScope.forWholeSeries())\n                 .setAlertConditions(new MetricAnomalyAlertConditions()\n                     .setSeverityRangeCondition(new SeverityCondition(AnomalySeverity.HIGH,\n                         AnomalySeverity.HIGH)))))\n         .setCrossMetricsOperator(MetricAlertConfigurationsOperator.AND)\n         .setHookIdsToAlert(Arrays.asList(hookId1, hookId2)), Context.NONE);\n\n System.out.printf(\"DataPoint Anomaly alert creation operation status: %s%n\",\n     alertConfigurationResponse.getStatusCode());\n final AnomalyAlertConfiguration anomalyAlertConfiguration = alertConfigurationResponse.getValue();\n System.out.printf(\"DataPoint Anomaly alert configuration Id: %s%n\", anomalyAlertConfiguration.getId());\n System.out.printf(\"DataPoint Anomaly alert configuration description: %s%n\",\n     anomalyAlertConfiguration.getDescription());\n System.out.printf(\"DataPoint Anomaly alert configuration hook ids: %s%n\",\n     anomalyAlertConfiguration.getHookIdsToAlert());\n System.out.printf(\"DataPoint Anomaly alert configuration cross metrics operator: %s%n\",\n     anomalyAlertConfiguration.getCrossMetricsOperator().toString());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing the created <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyAlertConfiguration\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDataFeed(com.azure.ai.metricsadvisor.administration.models.DataFeed)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDataFeed(DataFeed dataFeed)"
  name: "createDataFeed(DataFeed dataFeed)"
  nameWithType: "MetricsAdvisorAdministrationClient.createDataFeed(DataFeed dataFeed)"
  summary: "Create a new data feed."
  parameters:
  - description: "The data feed to be created."
    name: "dataFeed"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataFeed createDataFeed(DataFeed dataFeed)"
  desc: "Create a new data feed.\n\n**Code sample**\n\n```java\nDataFeed dataFeed = new DataFeed()\n     .setName(\"dataFeedName\")\n     .setSource(new MySqlDataFeedSource(\"conn-string\", \"query\"))\n     .setGranularity(new DataFeedGranularity().setGranularityType(DataFeedGranularityType.DAILY))\n     .setSchema(new DataFeedSchema(\n         Arrays.asList(\n             new DataFeedMetric(\"cost\"),\n             new DataFeedMetric(\"revenue\")\n         )).setDimensions(\n         Arrays.asList(\n             new DataFeedDimension(\"city\"),\n             new DataFeedDimension(\"category\")\n         ))\n     )\n     .setIngestionSettings(new DataFeedIngestionSettings(OffsetDateTime.parse(\"2020-01-01T00:00:00Z\")))\n     .setOptions(new DataFeedOptions()\n         .setDescription(\"data feed description\")\n         .setRollupSettings(new DataFeedRollupSettings()\n             .setRollupType(DataFeedRollupType.AUTO_ROLLUP)));\n\n DataFeed createdDataFeed = metricsAdvisorAdminClient.createDataFeed(dataFeed);\n\n System.out.printf(\"Data feed Id: %s%n\", createdDataFeed.getId());\n System.out.printf(\"Data feed description: %s%n\", createdDataFeed.getOptions().getDescription());\n System.out.printf(\"Data feed source type: %s%n\", createdDataFeed.getSourceType());\n System.out.printf(\"Data feed creator: %s%n\", createdDataFeed.getCreator());\n```"
  returns:
    description: "The created data feed."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDataFeedWithResponse(com.azure.ai.metricsadvisor.administration.models.DataFeed,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDataFeedWithResponse(DataFeed dataFeed, Context context)"
  name: "createDataFeedWithResponse(DataFeed dataFeed, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.createDataFeedWithResponse(DataFeed dataFeed, Context context)"
  summary: "Create a new data feed with REST response."
  parameters:
  - description: "The data feed to be created."
    name: "dataFeed"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DataFeed> createDataFeedWithResponse(DataFeed dataFeed, Context context)"
  desc: "Create a new data feed with REST response.\n\n**Code sample**\n\n```java\nDataFeed dataFeed = new DataFeed()\n     .setName(\"dataFeedName\")\n     .setSource(new MySqlDataFeedSource(\"conn-string\", \"query\"))\n     .setGranularity(new DataFeedGranularity().setGranularityType(DataFeedGranularityType.DAILY))\n     .setSchema(new DataFeedSchema(\n         Arrays.asList(\n             new DataFeedMetric(\"cost\"),\n             new DataFeedMetric(\"revenue\")\n         )).setDimensions(\n         Arrays.asList(\n             new DataFeedDimension(\"city\"),\n             new DataFeedDimension(\"category\")\n         ))\n     )\n     .setIngestionSettings(new DataFeedIngestionSettings(OffsetDateTime.parse(\"2020-01-01T00:00:00Z\")))\n     .setOptions(new DataFeedOptions()\n         .setDescription(\"data feed description\")\n         .setRollupSettings(new DataFeedRollupSettings()\n             .setRollupType(DataFeedRollupType.AUTO_ROLLUP)));\n\n final Response<DataFeed> createdDataFeedResponse =\n     metricsAdvisorAdminClient.createDataFeedWithResponse(dataFeed, Context.NONE);\n\n System.out.printf(\"Data feed create operation status: %s%n\", createdDataFeedResponse.getStatusCode());\n DataFeed createdDataFeed = createdDataFeedResponse.getValue();\n System.out.printf(\"Data feed Id: %s%n\", createdDataFeed.getId());\n System.out.printf(\"Data feed description: %s%n\", createdDataFeed.getOptions().getDescription());\n System.out.printf(\"Data feed source type: %s%n\", createdDataFeed.getSourceType());\n System.out.printf(\"Data feed creator: %s%n\", createdDataFeed.getCreator());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing the created data feed."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDataSourceCredential(com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDataSourceCredential(DataSourceCredentialEntity dataSourceCredential)"
  name: "createDataSourceCredential(DataSourceCredentialEntity dataSourceCredential)"
  nameWithType: "MetricsAdvisorAdministrationClient.createDataSourceCredential(DataSourceCredentialEntity dataSourceCredential)"
  summary: "Create a data source credential entity."
  parameters:
  - description: "The credential entity."
    name: "dataSourceCredential"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataSourceCredentialEntity createDataSourceCredential(DataSourceCredentialEntity dataSourceCredential)"
  desc: "Create a data source credential entity.\n\n**Code sample**\n\n```java\nDataSourceCredentialEntity datasourceCredential;\n final String name = \"sample_name\" + UUID.randomUUID();\n final String cId = \"f45668b2-bffa-11eb-8529-0246ac130003\";\n final String tId = \"67890ded-5e07-4e52-b225-4ae8f905afb5\";\n final String mockSecr = \"890hy69-5e07-4e52-b225-4ae8f905afb5\";\n\n datasourceCredential = new DataSourceServicePrincipalInKeyVault()\n     .setName(name)\n     .setKeyVaultForDataSourceSecrets(\"kv\", cId, mockSecr)\n     .setTenantId(tId)\n     .setSecretNameForDataSourceClientId(\"DSClientID_1\")\n     .setSecretNameForDataSourceClientSecret(\"DSClientSer_1\");\n\n DataSourceCredentialEntity credentialEntity =\n     metricsAdvisorAdminClient.createDataSourceCredential(datasourceCredential);\n if (credentialEntity instanceof DataSourceServicePrincipalInKeyVault) {\n     DataSourceServicePrincipalInKeyVault actualCredentialSPInKV\n         = (DataSourceServicePrincipalInKeyVault) credentialEntity;\n     System.out\n         .printf(\"Actual credential entity key vault endpoint: %s%n\",\n             actualCredentialSPInKV.getKeyVaultEndpoint());\n     System.out.printf(\"Actual credential entity key vault client Id: %s%n\",\n         actualCredentialSPInKV.getKeyVaultClientId());\n     System.out.printf(\"Actual credential entity key vault secret name for data source: %s%n\",\n         actualCredentialSPInKV.getSecretNameForDataSourceClientId());\n     System.out.printf(\"Actual credential entity key vault secret for data source: %s%n\",\n         actualCredentialSPInKV.getSecretNameForDataSourceClientSecret());\n }\n```"
  returns:
    description: "The created <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataSourceCredentialEntity\"></xref>."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDataSourceCredentialWithResponse(com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDataSourceCredentialWithResponse(DataSourceCredentialEntity dataSourceCredential, Context context)"
  name: "createDataSourceCredentialWithResponse(DataSourceCredentialEntity dataSourceCredential, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.createDataSourceCredentialWithResponse(DataSourceCredentialEntity dataSourceCredential, Context context)"
  summary: "Create a data source credential entity with REST response."
  parameters:
  - description: "The credential entity."
    name: "dataSourceCredential"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DataSourceCredentialEntity> createDataSourceCredentialWithResponse(DataSourceCredentialEntity dataSourceCredential, Context context)"
  desc: "Create a data source credential entity with REST response.\n\n**Code sample**\n\n```java\nDataSourceCredentialEntity datasourceCredential;\n final String name = \"sample_name\" + UUID.randomUUID();\n final String cId = \"f45668b2-bffa-11eb-8529-0246ac130003\";\n final String tId = \"67890ded-5e07-4e52-b225-4ae8f905afb5\";\n final String mockSecr = \"890hy69-5e07-4e52-b225-4ae8f905afb5\";\n\n datasourceCredential = new DataSourceServicePrincipalInKeyVault()\n     .setName(name)\n     .setKeyVaultForDataSourceSecrets(\"kv\", cId, mockSecr)\n     .setTenantId(tId)\n     .setSecretNameForDataSourceClientId(\"DSClientID_1\")\n     .setSecretNameForDataSourceClientSecret(\"DSClientSer_1\");\n\n Response<DataSourceCredentialEntity> credentialEntityWithResponse =\n     metricsAdvisorAdminClient.createDataSourceCredentialWithResponse(datasourceCredential, Context.NONE);\n\n System.out.printf(\"Credential Entity creation operation status: %s%n\",\n     credentialEntityWithResponse.getStatusCode());\n if (credentialEntityWithResponse.getValue() instanceof DataSourceServicePrincipalInKeyVault) {\n     DataSourceServicePrincipalInKeyVault actualCredentialSPInKV\n         = (DataSourceServicePrincipalInKeyVault) credentialEntityWithResponse.getValue();\n     System.out\n         .printf(\"Actual credential entity key vault endpoint: %s%n\",\n             actualCredentialSPInKV.getKeyVaultEndpoint());\n     System.out.printf(\"Actual credential entity key vault client Id: %s%n\",\n         actualCredentialSPInKV.getKeyVaultClientId());\n     System.out.printf(\"Actual credential entity key vault secret name for data source: %s%n\",\n         actualCredentialSPInKV.getSecretNameForDataSourceClientId());\n     System.out.printf(\"Actual credential entity key vault secret for data source: %s%n\",\n         actualCredentialSPInKV.getSecretNameForDataSourceClientSecret());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing the created <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataSourceCredentialEntity\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDetectionConfig(java.lang.String,com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDetectionConfig(String metricId, AnomalyDetectionConfiguration detectionConfiguration)"
  name: "createDetectionConfig(String metricId, AnomalyDetectionConfiguration detectionConfiguration)"
  nameWithType: "MetricsAdvisorAdministrationClient.createDetectionConfig(String metricId, AnomalyDetectionConfiguration detectionConfiguration)"
  summary: "Create a configuration to detect anomalies in the time series of a metric."
  parameters:
  - description: "The metric id to associate the configuration with."
    name: "metricId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The anomaly detection configuration."
    name: "detectionConfiguration"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AnomalyDetectionConfiguration createDetectionConfig(String metricId, AnomalyDetectionConfiguration detectionConfiguration)"
  desc: "Create a configuration to detect anomalies in the time series of a metric.\n\n**Code sample**\n\n```java\nfinal MetricWholeSeriesDetectionCondition wholeSeriesCondition = new MetricWholeSeriesDetectionCondition()\n     .setConditionOperator(DetectionConditionOperator.OR)\n     .setSmartDetectionCondition(new SmartDetectionCondition(\n         50,\n         AnomalyDetectorDirection.BOTH,\n         new SuppressCondition(50, 50)))\n     .setHardThresholdCondition(new HardThresholdCondition(\n         AnomalyDetectorDirection.BOTH,\n         new SuppressCondition(5, 5))\n         .setLowerBound(0.0)\n         .setUpperBound(100.0))\n     .setChangeThresholdCondition(new ChangeThresholdCondition(\n         50,\n         30,\n         true,\n         AnomalyDetectorDirection.BOTH,\n         new SuppressCondition(2, 2)));\n\n final String detectionConfigName = \"my_detection_config\";\n final String detectionConfigDescription = \"anomaly detection config for metric\";\n final AnomalyDetectionConfiguration detectionConfig\n     = new AnomalyDetectionConfiguration(detectionConfigName)\n     .setDescription(detectionConfigDescription)\n     .setWholeSeriesDetectionCondition(wholeSeriesCondition);\n\n final String metricId = \"0b836da8-10e6-46cd-8f4f-28262e113a62\";\n AnomalyDetectionConfiguration createdDetectionConfig = metricsAdvisorAdminClient\n     .createDetectionConfig(metricId, detectionConfig);\n System.out.printf(\"Detection config Id: %s%n\", createdDetectionConfig.getId());\n System.out.printf(\"Name: %s%n\", createdDetectionConfig.getName());\n System.out.printf(\"Description: %s%n\", createdDetectionConfig.getDescription());\n System.out.printf(\"MetricId: %s%n\", createdDetectionConfig.getMetricId());\n```"
  returns:
    description: "The created <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyDetectionConfiguration\"></xref>."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDetectionConfigWithResponse(java.lang.String,com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createDetectionConfigWithResponse(String metricId, AnomalyDetectionConfiguration detectionConfiguration, Context context)"
  name: "createDetectionConfigWithResponse(String metricId, AnomalyDetectionConfiguration detectionConfiguration, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.createDetectionConfigWithResponse(String metricId, AnomalyDetectionConfiguration detectionConfiguration, Context context)"
  summary: "Create a configuration to detect anomalies in the time series of a metric."
  parameters:
  - description: "The metric id to associate the configuration with."
    name: "metricId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The anomaly detection configuration."
    name: "detectionConfiguration"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<AnomalyDetectionConfiguration> createDetectionConfigWithResponse(String metricId, AnomalyDetectionConfiguration detectionConfiguration, Context context)"
  desc: "Create a configuration to detect anomalies in the time series of a metric.\n\n**Code sample**\n\n```java\nfinal MetricWholeSeriesDetectionCondition wholeSeriesCondition = new MetricWholeSeriesDetectionCondition()\n     .setConditionOperator(DetectionConditionOperator.OR)\n     .setSmartDetectionCondition(new SmartDetectionCondition(\n         50,\n         AnomalyDetectorDirection.BOTH,\n         new SuppressCondition(50, 50)))\n     .setHardThresholdCondition(new HardThresholdCondition(\n         AnomalyDetectorDirection.BOTH,\n         new SuppressCondition(5, 5))\n         .setLowerBound(0.0)\n         .setUpperBound(100.0))\n     .setChangeThresholdCondition(new ChangeThresholdCondition(\n         50,\n         30,\n         true,\n         AnomalyDetectorDirection.BOTH,\n         new SuppressCondition(2, 2)));\n\n final String detectionConfigName = \"my_detection_config\";\n final String detectionConfigDescription = \"anomaly detection config for metric\";\n final AnomalyDetectionConfiguration detectionConfig\n     = new AnomalyDetectionConfiguration(detectionConfigName)\n     .setDescription(detectionConfigDescription)\n     .setWholeSeriesDetectionCondition(wholeSeriesCondition);\n\n final String metricId = \"0b836da8-10e6-46cd-8f4f-28262e113a62\";\n Response<AnomalyDetectionConfiguration> response = metricsAdvisorAdminClient\n     .createDetectionConfigWithResponse(metricId, detectionConfig, Context.NONE);\n System.out.printf(\"Response statusCode: %d%n\", response.getStatusCode());\n AnomalyDetectionConfiguration createdDetectionConfig = response.getValue();\n System.out.printf(\"Detection config Id: %s%n\", createdDetectionConfig.getId());\n System.out.printf(\"Name: %s%n\", createdDetectionConfig.getName());\n System.out.printf(\"Description: %s%n\", createdDetectionConfig.getDescription());\n System.out.printf(\"MetricId: %s%n\", createdDetectionConfig.getMetricId());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing the created <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyDetectionConfiguration\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createHook(com.azure.ai.metricsadvisor.administration.models.NotificationHook)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createHook(NotificationHook notificationHook)"
  name: "createHook(NotificationHook notificationHook)"
  nameWithType: "MetricsAdvisorAdministrationClient.createHook(NotificationHook notificationHook)"
  summary: "Creates a notification<wbr>Hook that receives anomaly incident alerts."
  parameters:
  - description: "The notificationHook."
    name: "notificationHook"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public NotificationHook createHook(NotificationHook notificationHook)"
  desc: "Creates a notificationHook that receives anomaly incident alerts.\n\n**Code sample**\n\n```java\nNotificationHook emailNotificationHook = new EmailNotificationHook(\"email notificationHook\")\n     .setDescription(\"my email notificationHook\")\n     .setEmailsToAlert(new ArrayList<String>() {{\n             add(\"alertme@alertme.com\");\n         }})\n     .setExternalLink(\"https://adwiki.azurewebsites.net/articles/howto/alerts/create-hooks.html\");\n\n NotificationHook notificationHook = metricsAdvisorAdminClient.createHook(emailNotificationHook);\n EmailNotificationHook createdEmailHook = (EmailNotificationHook) notificationHook;\n System.out.printf(\"NotificationHook Id: %s%n\", createdEmailHook.getId());\n System.out.printf(\"NotificationHook Name: %s%n\", createdEmailHook.getName());\n System.out.printf(\"NotificationHook Description: %s%n\", createdEmailHook.getDescription());\n System.out.printf(\"NotificationHook External Link: %s%n\", createdEmailHook.getExternalLink());\n System.out.printf(\"NotificationHook Emails: %s%n\", String.join(\",\",\n     createdEmailHook.getEmailsToAlert()));\n```"
  returns:
    description: "The created <xref uid=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook\" data-throw-if-not-resolved=\"false\" data-raw-source=\"NotificationHook\"></xref>."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createHookWithResponse(com.azure.ai.metricsadvisor.administration.models.NotificationHook,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.createHookWithResponse(NotificationHook notificationHook, Context context)"
  name: "createHookWithResponse(NotificationHook notificationHook, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.createHookWithResponse(NotificationHook notificationHook, Context context)"
  summary: "Creates a notification<wbr>Hook that receives anomaly incident alerts."
  parameters:
  - description: "The notificationHook."
    name: "notificationHook"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<NotificationHook> createHookWithResponse(NotificationHook notificationHook, Context context)"
  desc: "Creates a notificationHook that receives anomaly incident alerts.\n\n**Code sample**\n\n```java\nNotificationHook emailNotificationHook = new EmailNotificationHook(\"email hook\")\n     .setDescription(\"my email hook\")\n     .setEmailsToAlert(new ArrayList<String>() {{\n             add(\"alertme@alertme.com\");\n         }})\n     .setExternalLink(\"https://adwiki.azurewebsites.net/articles/howto/alerts/create-hooks.html\");\n\n Response<NotificationHook> response\n     = metricsAdvisorAdminClient.createHookWithResponse(emailNotificationHook, Context.NONE);\n System.out.printf(\"Response statusCode: %d%n\", response.getStatusCode());\n EmailNotificationHook createdEmailHook = (EmailNotificationHook) response.getValue();\n System.out.printf(\"NotificationHook Id: %s%n\", createdEmailHook.getId());\n System.out.printf(\"NotificationHook Name: %s%n\", createdEmailHook.getName());\n System.out.printf(\"NotificationHook Description: %s%n\", createdEmailHook.getDescription());\n System.out.printf(\"NotificationHook External Link: %s%n\", createdEmailHook.getExternalLink());\n System.out.printf(\"NotificationHook Emails: %s%n\", String.join(\",\",\n     createdEmailHook.getEmailsToAlert()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing the created <xref uid=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook\" data-throw-if-not-resolved=\"false\" data-raw-source=\"NotificationHook\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteAlertConfig(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteAlertConfig(String alertConfigurationId)"
  name: "deleteAlertConfig(String alertConfigurationId)"
  nameWithType: "MetricsAdvisorAdministrationClient.deleteAlertConfig(String alertConfigurationId)"
  summary: "Deletes the anomaly alert configuration identified by `alertConfigurationId`."
  parameters:
  - description: "The anomaly alert configuration id."
    name: "alertConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteAlertConfig(String alertConfigurationId)"
  desc: "Deletes the anomaly alert configuration identified by `alertConfigurationId`.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n metricsAdvisorAdminClient.deleteAlertConfig(alertConfigId);\n```"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteAlertConfigWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteAlertConfigWithResponse(String alertConfigurationId, Context context)"
  name: "deleteAlertConfigWithResponse(String alertConfigurationId, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.deleteAlertConfigWithResponse(String alertConfigurationId, Context context)"
  summary: "Deletes the anomaly alert configuration identified by `alertConfigurationId`."
  parameters:
  - description: "The anomaly alert configuration id."
    name: "alertConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteAlertConfigWithResponse(String alertConfigurationId, Context context)"
  desc: "Deletes the anomaly alert configuration identified by `alertConfigurationId`.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n final Response<Void> response =\n     metricsAdvisorAdminClient.deleteAlertConfigWithResponse(alertConfigId, Context.NONE);\n\n System.out.printf(\"DataPoint Anomaly alert config delete operation status : %s%n\", response.getStatusCode());\n```"
  returns:
    description: "A response containing status code and headers returned after the operation."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDataFeed(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDataFeed(String dataFeedId)"
  name: "deleteDataFeed(String dataFeedId)"
  nameWithType: "MetricsAdvisorAdministrationClient.deleteDataFeed(String dataFeedId)"
  summary: "Delete a data feed."
  parameters:
  - description: "The data feed unique id."
    name: "dataFeedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteDataFeed(String dataFeedId)"
  desc: "Delete a data feed.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"r47053f1-9080-09lo-bacf-8dccf2e86f\";\n metricsAdvisorAdminClient.deleteDataFeed(dataFeedId);\n```"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDataFeedWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDataFeedWithResponse(String dataFeedId, Context context)"
  name: "deleteDataFeedWithResponse(String dataFeedId, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.deleteDataFeedWithResponse(String dataFeedId, Context context)"
  summary: "Delete a data feed with REST response."
  parameters:
  - description: "The data feed unique id."
    name: "dataFeedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteDataFeedWithResponse(String dataFeedId, Context context)"
  desc: "Delete a data feed with REST response.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"r47053f1-9080-09lo-bacf-8dccf2e86f\";\n final Response<Void> response = metricsAdvisorAdminClient\n     .deleteDataFeedWithResponse(dataFeedId, Context.NONE);\n System.out.printf(\"Data feed delete operation status : %s%n\", response.getStatusCode());\n```"
  returns:
    description: "a REST Response."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDataSourceCredential(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDataSourceCredential(String credentialId)"
  name: "deleteDataSourceCredential(String credentialId)"
  nameWithType: "MetricsAdvisorAdministrationClient.deleteDataSourceCredential(String credentialId)"
  summary: "Delete a data source credential entity."
  parameters:
  - description: "The data source credential entity unique id."
    name: "credentialId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteDataSourceCredential(String credentialId)"
  desc: "Delete a data source credential entity.\n\n**Code sample**\n\n```java\nfinal String datasourceCredentialId = \"t00853f1-9080-447f-bacf-8dccf2e86f\";\n metricsAdvisorAdminClient.deleteDataFeed(datasourceCredentialId);\n```"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDataSourceCredentialWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDataSourceCredentialWithResponse(String credentialId, Context context)"
  name: "deleteDataSourceCredentialWithResponse(String credentialId, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.deleteDataSourceCredentialWithResponse(String credentialId, Context context)"
  summary: "Delete a data source credential entity with REST response."
  parameters:
  - description: "The data source credential entity unique id."
    name: "credentialId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteDataSourceCredentialWithResponse(String credentialId, Context context)"
  desc: "Delete a data source credential entity with REST response.\n\n**Code sample**\n\n```java\nfinal String datasourceCredentialId = \"eh0854f1-8927-447f-bacf-8dccf2e86fwe\";\n Response<Void> response =\n     metricsAdvisorAdminClient.deleteDataSourceCredentialWithResponse(datasourceCredentialId, Context.NONE);\n System.out.printf(\"Datasource credential delete operation status : %s%n\", response.getStatusCode());\n```"
  returns:
    description: "a REST Response."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDetectionConfig(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDetectionConfig(String detectionConfigurationId)"
  name: "deleteDetectionConfig(String detectionConfigurationId)"
  nameWithType: "MetricsAdvisorAdministrationClient.deleteDetectionConfig(String detectionConfigurationId)"
  summary: "Delete a metric anomaly detection configuration."
  parameters:
  - description: "The metric anomaly detection configuration unique id."
    name: "detectionConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteDetectionConfig(String detectionConfigurationId)"
  desc: "Delete a metric anomaly detection configuration.\n\n**Code sample**\n\n```java\nfinal String detectionConfigId = \"7b8069a1-1564-46da-9f50-b5d0dd9129ab\";\n metricsAdvisorAdminClient\n     .deleteDetectionConfig(detectionConfigId);\n```"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDetectionConfigWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteDetectionConfigWithResponse(String detectionConfigurationId, Context context)"
  name: "deleteDetectionConfigWithResponse(String detectionConfigurationId, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.deleteDetectionConfigWithResponse(String detectionConfigurationId, Context context)"
  summary: "Delete a metric anomaly detection configuration."
  parameters:
  - description: "The metric anomaly detection configuration unique id."
    name: "detectionConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteDetectionConfigWithResponse(String detectionConfigurationId, Context context)"
  desc: "Delete a metric anomaly detection configuration.\n\n**Code sample**\n\n```java\nfinal String detectionConfigId = \"7b8069a1-1564-46da-9f50-b5d0dd9129ab\";\n Response<Void> response = metricsAdvisorAdminClient\n     .deleteDetectionConfigWithResponse(detectionConfigId, Context.NONE);\n System.out.printf(\"Response Status Code: %s%n\", response.getStatusCode());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> of containing result of delete operation."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteHook(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteHook(String hookId)"
  name: "deleteHook(String hookId)"
  nameWithType: "MetricsAdvisorAdministrationClient.deleteHook(String hookId)"
  summary: "Delete a hook."
  parameters:
  - description: "The hook unique id."
    name: "hookId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteHook(String hookId)"
  desc: "Delete a hook.\n\n**Code sample**\n\n```java\nfinal String emailHookId = \"f00853f1-6627-447f-bacf-8dccf2e86fed\";\n metricsAdvisorAdminClient.deleteHook(emailHookId);\n```"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteHookWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.deleteHookWithResponse(String hookId, Context context)"
  name: "deleteHookWithResponse(String hookId, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.deleteHookWithResponse(String hookId, Context context)"
  summary: "Delete a hook."
  parameters:
  - description: "The hook unique id."
    name: "hookId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteHookWithResponse(String hookId, Context context)"
  desc: "Delete a hook.\n\n**Code sample**\n\n```java\nfinal String emailHookId = \"f00853f1-6627-447f-bacf-8dccf2e86fed\";\n Response<Void> response\n     = metricsAdvisorAdminClient.deleteHookWithResponse(emailHookId, Context.NONE);\n System.out.printf(\"Response status code: %d%n\", response.getStatusCode());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getAlertConfig(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getAlertConfig(String alertConfigurationId)"
  name: "getAlertConfig(String alertConfigurationId)"
  nameWithType: "MetricsAdvisorAdministrationClient.getAlertConfig(String alertConfigurationId)"
  summary: "Get the anomaly alert configuration identified by `alertConfigurationId`."
  parameters:
  - description: "The anomaly alert configuration id."
    name: "alertConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AnomalyAlertConfiguration getAlertConfig(String alertConfigurationId)"
  desc: "Get the anomaly alert configuration identified by `alertConfigurationId`.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n\n AnomalyAlertConfiguration anomalyAlertConfiguration\n     = metricsAdvisorAdminClient.getAlertConfig(alertConfigId);\n System.out.printf(\"DataPoint Anomaly alert configuration Id: %s%n\",\n     anomalyAlertConfiguration.getId());\n System.out.printf(\"DataPoint Anomaly alert configuration description: %s%n\",\n     anomalyAlertConfiguration.getDescription());\n System.out.printf(\"DataPoint Anomaly alert configuration hook ids: %s%n\",\n     anomalyAlertConfiguration.getHookIdsToAlert());\n System.out.printf(\"DataPoint Anomaly alert configuration cross metrics operator: %s%n\",\n     anomalyAlertConfiguration.getCrossMetricsOperator().toString());\n```"
  returns:
    description: "The <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyAlertConfiguration\"></xref> identified by the given id."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getAlertConfigWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getAlertConfigWithResponse(String alertConfigurationId, Context context)"
  name: "getAlertConfigWithResponse(String alertConfigurationId, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.getAlertConfigWithResponse(String alertConfigurationId, Context context)"
  summary: "Get the anomaly alert configuration identified by `alertConfigurationId`."
  parameters:
  - description: "The anomaly alert configuration id."
    name: "alertConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<AnomalyAlertConfiguration> getAlertConfigWithResponse(String alertConfigurationId, Context context)"
  desc: "Get the anomaly alert configuration identified by `alertConfigurationId`.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n\n Response<AnomalyAlertConfiguration> alertConfigurationResponse\n     = metricsAdvisorAdminClient.getAlertConfigWithResponse(alertConfigId, Context.NONE);\n\n System.out.printf(\"DataPoint Anomaly alert creation operation status: %s%n\",\n     alertConfigurationResponse.getStatusCode());\n final AnomalyAlertConfiguration anomalyAlertConfiguration = alertConfigurationResponse.getValue();\n System.out.printf(\"DataPoint Anomaly alert configuration Id: %s%n\", anomalyAlertConfiguration.getId());\n System.out.printf(\"DataPoint Anomaly alert configuration description: %s%n\",\n     anomalyAlertConfiguration.getDescription());\n System.out.printf(\"DataPoint Anomaly alert configuration hook ids: %s%n\",\n     anomalyAlertConfiguration.getHookIdsToAlert());\n System.out.printf(\"DataPoint Anomaly alert configuration cross metrics operator: %s%n\",\n     anomalyAlertConfiguration.getCrossMetricsOperator().toString());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"response\"></xref> containing the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyAlertConfiguration\"></xref> identified by the given id."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeed(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeed(String dataFeedId)"
  name: "getDataFeed(String dataFeedId)"
  nameWithType: "MetricsAdvisorAdministrationClient.getDataFeed(String dataFeedId)"
  summary: "Get a data feed by its id."
  parameters:
  - description: "The data feed unique id."
    name: "dataFeedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataFeed getDataFeed(String dataFeedId)"
  desc: "Get a data feed by its id.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"r47053f1-9080-09lo-bacf-8dccf2e86f\";\n DataFeed dataFeed = metricsAdvisorAdminClient.getDataFeed(dataFeedId);\n System.out.printf(\"Data feed Id: %s%n\", dataFeed.getId());\n System.out.printf(\"Data feed description: %s%n\", dataFeed.getOptions().getDescription());\n System.out.printf(\"Data feed source type: %s%n\", dataFeed.getSourceType());\n System.out.printf(\"Data feed creator: %s%n\", dataFeed.getCreator());\n```"
  returns:
    description: "The data feed for the provided id."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedIngestionProgress(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedIngestionProgress(String dataFeedId)"
  name: "getDataFeedIngestionProgress(String dataFeedId)"
  nameWithType: "MetricsAdvisorAdministrationClient.getDataFeedIngestionProgress(String dataFeedId)"
  summary: "Retrieve the ingestion progress of a data feed."
  parameters:
  - description: "The data feed id."
    name: "dataFeedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataFeedIngestionProgress getDataFeedIngestionProgress(String dataFeedId)"
  desc: "Retrieve the ingestion progress of a data feed.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c\";\n DataFeedIngestionProgress ingestionProgress\n     = metricsAdvisorAdminClient.getDataFeedIngestionProgress(dataFeedId);\n System.out.printf(\"Latest active timestamp: %s%n\", ingestionProgress.getLatestActiveTimestamp());\n System.out.printf(\"Latest successful timestamp: %s%n\", ingestionProgress.getLatestSuccessTimestamp());\n```"
  returns:
    description: "The <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataFeedIngestionProgress\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataFeedIngestionProgress\"></xref> of the data feed."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeedIngestionProgress?alt=com.azure.ai.metricsadvisor.administration.models.DataFeedIngestionProgress&text=DataFeedIngestionProgress\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedIngestionProgressWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedIngestionProgressWithResponse(String dataFeedId, Context context)"
  name: "getDataFeedIngestionProgressWithResponse(String dataFeedId, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.getDataFeedIngestionProgressWithResponse(String dataFeedId, Context context)"
  summary: "Retrieve the ingestion progress of a data feed."
  parameters:
  - description: "The data feed id."
    name: "dataFeedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DataFeedIngestionProgress> getDataFeedIngestionProgressWithResponse(String dataFeedId, Context context)"
  desc: "Retrieve the ingestion progress of a data feed.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c\";\n Response<DataFeedIngestionProgress> response\n     = metricsAdvisorAdminClient.getDataFeedIngestionProgressWithResponse(dataFeedId, Context.NONE);\n System.out.printf(\"Response statusCode: %d%n\", response.getStatusCode());\n DataFeedIngestionProgress ingestionProgress = response.getValue();\n System.out.printf(\"Latest active timestamp: %s%n\", ingestionProgress.getLatestActiveTimestamp());\n System.out.printf(\"Latest successful timestamp: %s%n\", ingestionProgress.getLatestSuccessTimestamp());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataFeedIngestionProgress\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataFeedIngestionProgress\"></xref> of the data feed."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeedIngestionProgress?alt=com.azure.ai.metricsadvisor.administration.models.DataFeedIngestionProgress&text=DataFeedIngestionProgress\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataFeedWithResponse(String dataFeedId, Context context)"
  name: "getDataFeedWithResponse(String dataFeedId, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.getDataFeedWithResponse(String dataFeedId, Context context)"
  summary: "Get a data feed by its id with REST response."
  parameters:
  - description: "The data feed unique id."
    name: "dataFeedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DataFeed> getDataFeedWithResponse(String dataFeedId, Context context)"
  desc: "Get a data feed by its id with REST response.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"r47053f1-9080-09lo-bacf-8dccf2e86f\";\n final Response<DataFeed> dataFeedResponse =\n     metricsAdvisorAdminClient.getDataFeedWithResponse(dataFeedId, Context.NONE);\n\n System.out.printf(\"Data feed get operation status: %s%n\", dataFeedResponse.getStatusCode());\n DataFeed dataFeed = dataFeedResponse.getValue();\n System.out.printf(\"Data feed Id: %s%n\", dataFeed.getId());\n System.out.printf(\"Data feed description: %s%n\", dataFeed.getOptions().getDescription());\n System.out.printf(\"Data feed source type: %s%n\", dataFeed.getSourceType());\n System.out.printf(\"Data feed creator: %s%n\", dataFeed.getCreator());\n```"
  returns:
    description: "The data feed for the provided id."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataSourceCredential(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataSourceCredential(String credentialId)"
  name: "getDataSourceCredential(String credentialId)"
  nameWithType: "MetricsAdvisorAdministrationClient.getDataSourceCredential(String credentialId)"
  summary: "Get a data source credential entity by its id."
  parameters:
  - description: "The data source credential entity unique id."
    name: "credentialId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataSourceCredentialEntity getDataSourceCredential(String credentialId)"
  desc: "Get a data source credential entity by its id.\n\n**Code sample**\n\n```java\nfinal String datasourceCredentialId = \"f45668b2-bffa-11eb-8529-0246ac130003\";\n\n DataSourceCredentialEntity credentialEntity =\n     metricsAdvisorAdminClient.getDataSourceCredential(datasourceCredentialId);\n if (credentialEntity instanceof DataSourceServicePrincipalInKeyVault) {\n     DataSourceServicePrincipalInKeyVault actualCredentialSPInKV\n         = (DataSourceServicePrincipalInKeyVault) credentialEntity;\n     System.out\n         .printf(\"Actual credential entity key vault endpoint: %s%n\",\n             actualCredentialSPInKV.getKeyVaultEndpoint());\n     System.out.printf(\"Actual credential entity key vault client Id: %s%n\",\n         actualCredentialSPInKV.getKeyVaultClientId());\n     System.out.printf(\"Actual credential entity key vault secret name for data source: %s%n\",\n         actualCredentialSPInKV.getSecretNameForDataSourceClientId());\n     System.out.printf(\"Actual credential entity key vault secret for data source: %s%n\",\n         actualCredentialSPInKV.getSecretNameForDataSourceClientSecret());\n }\n```"
  returns:
    description: "The data source credential entity for the provided id."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataSourceCredentialWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDataSourceCredentialWithResponse(String credentialId, Context context)"
  name: "getDataSourceCredentialWithResponse(String credentialId, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.getDataSourceCredentialWithResponse(String credentialId, Context context)"
  summary: "Get a data source credential entity by its id with REST response."
  parameters:
  - description: "The data source credential entity unique id."
    name: "credentialId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DataSourceCredentialEntity> getDataSourceCredentialWithResponse(String credentialId, Context context)"
  desc: "Get a data source credential entity by its id with REST response.\n\n**Code sample**\n\n```java\nfinal String datasourceCredentialId = \"f45668b2-bffa-11eb-8529-0246ac130003\";\n\n Response<DataSourceCredentialEntity> credentialEntityWithResponse =\n     metricsAdvisorAdminClient.getDataSourceCredentialWithResponse(datasourceCredentialId, Context.NONE);\n System.out.printf(\"Credential Entity creation operation status: %s%n\",\n     credentialEntityWithResponse.getStatusCode());\n if (credentialEntityWithResponse.getValue() instanceof DataSourceServicePrincipalInKeyVault) {\n     DataSourceServicePrincipalInKeyVault actualCredentialSPInKV\n         = (DataSourceServicePrincipalInKeyVault) credentialEntityWithResponse.getValue();\n     System.out\n         .printf(\"Actual credential entity key vault endpoint: %s%n\",\n             actualCredentialSPInKV.getKeyVaultEndpoint());\n     System.out.printf(\"Actual credential entity key vault client Id: %s%n\",\n         actualCredentialSPInKV.getKeyVaultClientId());\n     System.out.printf(\"Actual credential entity key vault secret name for data source: %s%n\",\n         actualCredentialSPInKV.getSecretNameForDataSourceClientId());\n     System.out.printf(\"Actual credential entity key vault secret for data source: %s%n\",\n         actualCredentialSPInKV.getSecretNameForDataSourceClientSecret());\n }\n```"
  returns:
    description: "The data feed for the provided id."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDetectionConfig(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDetectionConfig(String detectionConfigurationId)"
  name: "getDetectionConfig(String detectionConfigurationId)"
  nameWithType: "MetricsAdvisorAdministrationClient.getDetectionConfig(String detectionConfigurationId)"
  summary: "Get the anomaly detection configuration by its id."
  parameters:
  - description: "The anomaly detection configuration id."
    name: "detectionConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AnomalyDetectionConfiguration getDetectionConfig(String detectionConfigurationId)"
  desc: "Get the anomaly detection configuration by its id.\n\n**Code sample**\n\n```java\nfinal String detectionConfigId = \"7b8069a1-1564-46da-9f50-b5d0dd9129ab\";\n AnomalyDetectionConfiguration detectionConfig = metricsAdvisorAdminClient\n     .getDetectionConfig(detectionConfigId);\n System.out.printf(\"Detection config Id: %s%n\", detectionConfig.getId());\n System.out.printf(\"Name: %s%n\", detectionConfig.getName());\n System.out.printf(\"Description: %s%n\", detectionConfig.getDescription());\n System.out.printf(\"MetricId: %s%n\", detectionConfig.getMetricId());\n\n System.out.printf(\"Detection conditions specified for configuration...%n\");\n\n System.out.printf(\"Whole Series Detection Conditions:%n\");\n MetricWholeSeriesDetectionCondition wholeSeriesDetectionCondition\n     = detectionConfig.getWholeSeriesDetectionCondition();\n\n System.out.printf(\"- Use %s operator for multiple detection conditions:%n\",\n     wholeSeriesDetectionCondition.getConditionOperator());\n\n System.out.printf(\"- Smart Detection Condition:%n\");\n System.out.printf(\" - Sensitivity: %s%n\",\n     wholeSeriesDetectionCondition.getSmartDetectionCondition()\n         .getSensitivity());\n System.out.printf(\" - Detection direction: %s%n\",\n     wholeSeriesDetectionCondition.getSmartDetectionCondition()\n         .getAnomalyDetectorDirection());\n System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n     wholeSeriesDetectionCondition.getSmartDetectionCondition()\n         .getSuppressCondition().getMinNumber(),\n     wholeSeriesDetectionCondition.getSmartDetectionCondition()\n         .getSuppressCondition().getMinRatio());\n\n System.out.printf(\"- Hard Threshold Condition:%n\");\n System.out.printf(\" - Lower bound: %s%n\",\n     wholeSeriesDetectionCondition.getHardThresholdCondition()\n         .getLowerBound());\n System.out.printf(\" - Upper bound: %s%n\",\n     wholeSeriesDetectionCondition.getHardThresholdCondition()\n         .getUpperBound());\n System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n     wholeSeriesDetectionCondition.getHardThresholdCondition()\n         .getSuppressCondition().getMinNumber(),\n     wholeSeriesDetectionCondition.getHardThresholdCondition()\n         .getSuppressCondition().getMinRatio());\n\n System.out.printf(\"- Change Threshold Condition:%n\");\n System.out.printf(\" - Change percentage: %s%n\",\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .getChangePercentage());\n System.out.printf(\" - Shift point: %s%n\",\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .getShiftPoint());\n System.out.printf(\" - Detect anomaly if within range: %s%n\",\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .isWithinRange());\n System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .getSuppressCondition().getMinNumber(),\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .getSuppressCondition().getMinRatio());\n\n List<MetricSingleSeriesDetectionCondition> seriesDetectionConditions\n     = detectionConfig.getSeriesDetectionConditions();\n System.out.printf(\"Series Detection Conditions:%n\");\n for (MetricSingleSeriesDetectionCondition seriesDetectionCondition : seriesDetectionConditions) {\n     DimensionKey seriesKey = seriesDetectionCondition.getSeriesKey();\n     final String seriesKeyStr\n         = Arrays.toString(seriesKey.asMap().entrySet().toArray());\n     System.out.printf(\"- Series Key:%s%n\", seriesKeyStr);\n     System.out.printf(\" - Use %s operator for multiple detection conditions:%n\",\n         seriesDetectionCondition.getConditionOperator());\n\n     System.out.printf(\" - Smart Detection Condition:%n\");\n     System.out.printf(\"  - Sensitivity: %s%n\",\n         seriesDetectionCondition.getSmartDetectionCondition()\n             .getSensitivity());\n     System.out.printf(\"  - Detection direction: %s%n\",\n         seriesDetectionCondition.getSmartDetectionCondition()\n             .getAnomalyDetectorDirection());\n     System.out.printf(\"  - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesDetectionCondition.getSmartDetectionCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesDetectionCondition.getSmartDetectionCondition()\n             .getSuppressCondition().getMinRatio());\n\n     System.out.printf(\" - Hard Threshold Condition:%n\");\n     System.out.printf(\"  -  Lower bound: %s%n\",\n         seriesDetectionCondition.getHardThresholdCondition()\n             .getLowerBound());\n     System.out.printf(\"  -  Upper bound: %s%n\",\n         seriesDetectionCondition.getHardThresholdCondition()\n             .getUpperBound());\n     System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesDetectionCondition.getHardThresholdCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesDetectionCondition.getHardThresholdCondition()\n             .getSuppressCondition().getMinRatio());\n\n     System.out.printf(\" - Change Threshold Condition:%n\");\n     System.out.printf(\"  -  Change percentage: %s%n\",\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .getChangePercentage());\n     System.out.printf(\"  -  Shift point: %s%n\",\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .getShiftPoint());\n     System.out.printf(\"  -  Detect anomaly if within range: %s%n\",\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .isWithinRange());\n     System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .getSuppressCondition().getMinRatio());\n }\n\n List<MetricSeriesGroupDetectionCondition> seriesGroupDetectionConditions\n     = detectionConfig.getSeriesGroupDetectionConditions();\n System.out.printf(\"Series Group Detection Conditions:%n\");\n for (MetricSeriesGroupDetectionCondition seriesGroupDetectionCondition\n     : seriesGroupDetectionConditions) {\n     DimensionKey seriesGroupKey = seriesGroupDetectionCondition.getSeriesGroupKey();\n     final String seriesGroupKeyStr\n         = Arrays.toString(seriesGroupKey.asMap().entrySet().toArray());\n     System.out.printf(\"- Series Group Key:%s%n\", seriesGroupKeyStr);\n     System.out.printf(\" - Use %s operator for multiple detection conditions:%n\",\n         seriesGroupDetectionCondition.getConditionOperator());\n\n     System.out.printf(\" - Smart Detection Condition:%n\");\n     System.out.printf(\"  - Sensitivity: %s%n\",\n         seriesGroupDetectionCondition.getSmartDetectionCondition()\n             .getSensitivity());\n     System.out.printf(\"  - Detection direction: %s%n\",\n         seriesGroupDetectionCondition.getSmartDetectionCondition()\n             .getAnomalyDetectorDirection());\n     System.out.printf(\"  - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesGroupDetectionCondition.getSmartDetectionCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesGroupDetectionCondition.getSmartDetectionCondition()\n             .getSuppressCondition().getMinRatio());\n\n     System.out.printf(\" - Hard Threshold Condition:%n\");\n     System.out.printf(\"  -  Lower bound: %s%n\",\n         seriesGroupDetectionCondition.getHardThresholdCondition()\n             .getLowerBound());\n     System.out.printf(\"  -  Upper bound: %s%n\",\n         seriesGroupDetectionCondition.getHardThresholdCondition()\n             .getUpperBound());\n     System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesGroupDetectionCondition.getHardThresholdCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesGroupDetectionCondition.getHardThresholdCondition()\n             .getSuppressCondition().getMinRatio());\n\n     System.out.printf(\" - Change Threshold Condition:%n\");\n     System.out.printf(\"  -  Change percentage: %s%n\",\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .getChangePercentage());\n     System.out.printf(\"  -  Shift point: %s%n\",\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .getShiftPoint());\n     System.out.printf(\"  -  Detect anomaly if within range: %s%n\",\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .isWithinRange());\n     System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .getSuppressCondition().getMinRatio());\n }\n```"
  returns:
    description: "The <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyDetectionConfiguration\"></xref> identified by the given id."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDetectionConfigWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getDetectionConfigWithResponse(String detectionConfigurationId, Context context)"
  name: "getDetectionConfigWithResponse(String detectionConfigurationId, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.getDetectionConfigWithResponse(String detectionConfigurationId, Context context)"
  summary: "Get the anomaly detection configuration by its id."
  parameters:
  - description: "The anomaly detection configuration id."
    name: "detectionConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<AnomalyDetectionConfiguration> getDetectionConfigWithResponse(String detectionConfigurationId, Context context)"
  desc: "Get the anomaly detection configuration by its id.\n\n**Code sample**\n\n```java\nfinal String detectionConfigId = \"7b8069a1-1564-46da-9f50-b5d0dd9129ab\";\n Response<AnomalyDetectionConfiguration> response = metricsAdvisorAdminClient\n     .getDetectionConfigWithResponse(detectionConfigId, Context.NONE);\n System.out.printf(\"Response statusCode: %d%n\", response.getStatusCode());\n AnomalyDetectionConfiguration detectionConfig = response.getValue();\n System.out.printf(\"Detection config Id: %s%n\", detectionConfig.getId());\n System.out.printf(\"Name: %s%n\", detectionConfig.getName());\n System.out.printf(\"Description: %s%n\", detectionConfig.getDescription());\n System.out.printf(\"MetricId: %s%n\", detectionConfig.getMetricId());\n\n System.out.printf(\"Detection conditions specified for configuration...%n\");\n\n System.out.printf(\"Whole Series Detection Conditions:%n\");\n MetricWholeSeriesDetectionCondition wholeSeriesDetectionCondition\n     = detectionConfig.getWholeSeriesDetectionCondition();\n\n System.out.printf(\"- Use %s operator for multiple detection conditions:%n\",\n     wholeSeriesDetectionCondition.getConditionOperator());\n\n System.out.printf(\"- Smart Detection Condition:%n\");\n System.out.printf(\" - Sensitivity: %s%n\",\n     wholeSeriesDetectionCondition.getSmartDetectionCondition()\n         .getSensitivity());\n System.out.printf(\" - Detection direction: %s%n\",\n     wholeSeriesDetectionCondition.getSmartDetectionCondition()\n         .getAnomalyDetectorDirection());\n System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n     wholeSeriesDetectionCondition.getSmartDetectionCondition()\n         .getSuppressCondition().getMinNumber(),\n     wholeSeriesDetectionCondition.getSmartDetectionCondition()\n         .getSuppressCondition().getMinRatio());\n\n System.out.printf(\"- Hard Threshold Condition:%n\");\n System.out.printf(\" - Lower bound: %s%n\",\n     wholeSeriesDetectionCondition.getHardThresholdCondition()\n         .getLowerBound());\n System.out.printf(\" - Upper bound: %s%n\",\n     wholeSeriesDetectionCondition.getHardThresholdCondition()\n         .getUpperBound());\n System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n     wholeSeriesDetectionCondition.getHardThresholdCondition()\n         .getSuppressCondition().getMinNumber(),\n     wholeSeriesDetectionCondition.getHardThresholdCondition()\n         .getSuppressCondition().getMinRatio());\n\n System.out.printf(\"- Change Threshold Condition:%n\");\n System.out.printf(\" - Change percentage: %s%n\",\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .getChangePercentage());\n System.out.printf(\" - Shift point: %s%n\",\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .getShiftPoint());\n System.out.printf(\" - Detect anomaly if within range: %s%n\",\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .isWithinRange());\n System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .getSuppressCondition().getMinNumber(),\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .getSuppressCondition().getMinRatio());\n\n List<MetricSingleSeriesDetectionCondition> seriesDetectionConditions\n     = detectionConfig.getSeriesDetectionConditions();\n System.out.printf(\"Series Detection Conditions:%n\");\n for (MetricSingleSeriesDetectionCondition seriesDetectionCondition : seriesDetectionConditions) {\n     DimensionKey seriesKey = seriesDetectionCondition.getSeriesKey();\n     final String seriesKeyStr\n         = Arrays.toString(seriesKey.asMap().entrySet().toArray());\n     System.out.printf(\"- Series Key:%s%n\", seriesKeyStr);\n     System.out.printf(\" - Use %s operator for multiple detection conditions:%n\",\n         seriesDetectionCondition.getConditionOperator());\n\n     System.out.printf(\" - Smart Detection Condition:%n\");\n     System.out.printf(\"  - Sensitivity: %s%n\",\n         seriesDetectionCondition.getSmartDetectionCondition()\n             .getSensitivity());\n     System.out.printf(\"  - Detection direction: %s%n\",\n         seriesDetectionCondition.getSmartDetectionCondition()\n             .getAnomalyDetectorDirection());\n     System.out.printf(\"  - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesDetectionCondition.getSmartDetectionCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesDetectionCondition.getSmartDetectionCondition()\n             .getSuppressCondition().getMinRatio());\n\n     System.out.printf(\" - Hard Threshold Condition:%n\");\n     System.out.printf(\"  -  Lower bound: %s%n\",\n         seriesDetectionCondition.getHardThresholdCondition()\n             .getLowerBound());\n     System.out.printf(\"  -  Upper bound: %s%n\",\n         seriesDetectionCondition.getHardThresholdCondition()\n             .getUpperBound());\n     System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesDetectionCondition.getHardThresholdCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesDetectionCondition.getHardThresholdCondition()\n             .getSuppressCondition().getMinRatio());\n\n     System.out.printf(\" - Change Threshold Condition:%n\");\n     System.out.printf(\"  -  Change percentage: %s%n\",\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .getChangePercentage());\n     System.out.printf(\"  -  Shift point: %s%n\",\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .getShiftPoint());\n     System.out.printf(\"  -  Detect anomaly if within range: %s%n\",\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .isWithinRange());\n     System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .getSuppressCondition().getMinRatio());\n }\n\n List<MetricSeriesGroupDetectionCondition> seriesGroupDetectionConditions\n     = detectionConfig.getSeriesGroupDetectionConditions();\n System.out.printf(\"Series Group Detection Conditions:%n\");\n for (MetricSeriesGroupDetectionCondition seriesGroupDetectionCondition\n     : seriesGroupDetectionConditions) {\n     DimensionKey seriesGroupKey = seriesGroupDetectionCondition.getSeriesGroupKey();\n     final String seriesGroupKeyStr\n         = Arrays.toString(seriesGroupKey.asMap().entrySet().toArray());\n     System.out.printf(\"- Series Group Key:%s%n\", seriesGroupKeyStr);\n     System.out.printf(\" - Use %s operator for multiple detection conditions:%n\",\n         seriesGroupDetectionCondition.getConditionOperator());\n\n     System.out.printf(\" - Smart Detection Condition:%n\");\n     System.out.printf(\"  - Sensitivity: %s%n\",\n         seriesGroupDetectionCondition.getSmartDetectionCondition()\n             .getSensitivity());\n     System.out.printf(\"  - Detection direction: %s%n\",\n         seriesGroupDetectionCondition.getSmartDetectionCondition()\n             .getAnomalyDetectorDirection());\n     System.out.printf(\"  - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesGroupDetectionCondition.getSmartDetectionCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesGroupDetectionCondition.getSmartDetectionCondition()\n             .getSuppressCondition().getMinRatio());\n\n     System.out.printf(\" - Hard Threshold Condition:%n\");\n     System.out.printf(\"  -  Lower bound: %s%n\",\n         seriesGroupDetectionCondition.getHardThresholdCondition()\n             .getLowerBound());\n     System.out.printf(\"  -  Upper bound: %s%n\",\n         seriesGroupDetectionCondition.getHardThresholdCondition()\n             .getUpperBound());\n     System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesGroupDetectionCondition.getHardThresholdCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesGroupDetectionCondition.getHardThresholdCondition()\n             .getSuppressCondition().getMinRatio());\n\n     System.out.printf(\" - Change Threshold Condition:%n\");\n     System.out.printf(\"  -  Change percentage: %s%n\",\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .getChangePercentage());\n     System.out.printf(\"  -  Shift point: %s%n\",\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .getShiftPoint());\n     System.out.printf(\"  -  Detect anomaly if within range: %s%n\",\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .isWithinRange());\n     System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .getSuppressCondition().getMinRatio());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyDetectionConfiguration\"></xref> for the provided id."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getHook(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getHook(String hookId)"
  name: "getHook(String hookId)"
  nameWithType: "MetricsAdvisorAdministrationClient.getHook(String hookId)"
  summary: "Get a hook by its id."
  parameters:
  - description: "The hook unique id."
    name: "hookId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public NotificationHook getHook(String hookId)"
  desc: "Get a hook by its id.\n\n**Code sample**\n\n```java\nfinal String hookId = \"f00853f1-6627-447f-bacf-8dccf2e86fed\";\n NotificationHook notificationHook = metricsAdvisorAdminClient.getHook(hookId);\n if (notificationHook instanceof EmailNotificationHook) {\n     EmailNotificationHook emailHook = (EmailNotificationHook) notificationHook;\n     System.out.printf(\"NotificationHook Id: %s%n\", emailHook.getId());\n     System.out.printf(\"NotificationHook Name: %s%n\", emailHook.getName());\n     System.out.printf(\"NotificationHook Description: %s%n\", emailHook.getDescription());\n     System.out.printf(\"NotificationHook External Link: %s%n\", emailHook.getExternalLink());\n     System.out.printf(\"NotificationHook Emails: %s%n\", String.join(\",\", emailHook.getEmailsToAlert()));\n } else if (notificationHook instanceof WebNotificationHook) {\n     WebNotificationHook webHook = (WebNotificationHook) notificationHook;\n     System.out.printf(\"NotificationHook Id: %s%n\", webHook.getId());\n     System.out.printf(\"NotificationHook Name: %s%n\", webHook.getName());\n     System.out.printf(\"NotificationHook Description: %s%n\", webHook.getDescription());\n     System.out.printf(\"NotificationHook External Link: %s%n\", webHook.getExternalLink());\n     System.out.printf(\"NotificationHook Endpoint: %s%n\", webHook.getEndpoint());\n     System.out.printf(\"NotificationHook Headers: %s%n\", webHook.getHttpHeaders());\n }\n```"
  returns:
    description: "The <xref uid=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook\" data-throw-if-not-resolved=\"false\" data-raw-source=\"NotificationHook\"></xref> for the provided id."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getHookWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getHookWithResponse(String hookId, Context context)"
  name: "getHookWithResponse(String hookId, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.getHookWithResponse(String hookId, Context context)"
  summary: "Get a hook by its id."
  parameters:
  - description: "The hook unique id."
    name: "hookId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<NotificationHook> getHookWithResponse(String hookId, Context context)"
  desc: "Get a hook by its id.\n\n**Code sample**\n\n```java\nfinal String hookId = \"f00853f1-6627-447f-bacf-8dccf2e86fed\";\n Response<NotificationHook> response = metricsAdvisorAdminClient.getHookWithResponse(hookId, Context.NONE);\n System.out.printf(\"Response statusCode: %d%n\", response.getStatusCode());\n NotificationHook notificationHook = response.getValue();\n if (notificationHook instanceof EmailNotificationHook) {\n     EmailNotificationHook emailHook = (EmailNotificationHook) notificationHook;\n     System.out.printf(\"NotificationHook Id: %s%n\", emailHook.getId());\n     System.out.printf(\"NotificationHook Name: %s%n\", emailHook.getName());\n     System.out.printf(\"NotificationHook Description: %s%n\", emailHook.getDescription());\n     System.out.printf(\"NotificationHook External Link: %s%n\", emailHook.getExternalLink());\n     System.out.printf(\"NotificationHook Emails: %s%n\", String.join(\",\", emailHook.getEmailsToAlert()));\n } else if (notificationHook instanceof WebNotificationHook) {\n     WebNotificationHook webHook = (WebNotificationHook) notificationHook;\n     System.out.printf(\"NotificationHook Id: %s%n\", webHook.getId());\n     System.out.printf(\"NotificationHook Name: %s%n\", webHook.getName());\n     System.out.printf(\"NotificationHook Description: %s%n\", webHook.getDescription());\n     System.out.printf(\"NotificationHook External Link: %s%n\", webHook.getExternalLink());\n     System.out.printf(\"NotificationHook Endpoint: %s%n\", webHook.getEndpoint());\n     System.out.printf(\"NotificationHook Headers: %s%n\", webHook.getHttpHeaders());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook\" data-throw-if-not-resolved=\"false\" data-raw-source=\"NotificationHook\"></xref> for the provided id."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listAlertConfigs(java.lang.String,com.azure.ai.metricsadvisor.administration.models.ListAnomalyAlertConfigsOptions)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listAlertConfigs(String detectionConfigurationId, ListAnomalyAlertConfigsOptions options)"
  name: "listAlertConfigs(String detectionConfigurationId, ListAnomalyAlertConfigsOptions options)"
  nameWithType: "MetricsAdvisorAdministrationClient.listAlertConfigs(String detectionConfigurationId, ListAnomalyAlertConfigsOptions options)"
  summary: "Fetch the anomaly alert configurations associated with a detection configuration."
  parameters:
  - description: "The id of the detection configuration."
    name: "detectionConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "th e additional configurable options to specify when querying the result."
    name: "options"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.ListAnomalyAlertConfigsOptions?alt=com.azure.ai.metricsadvisor.administration.models.ListAnomalyAlertConfigsOptions&text=ListAnomalyAlertConfigsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<AnomalyAlertConfiguration> listAlertConfigs(String detectionConfigurationId, ListAnomalyAlertConfigsOptions options)"
  desc: "Fetch the anomaly alert configurations associated with a detection configuration.\n\n**Code sample**\n\n```java\nString detectionConfigId = \"3rt98er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n metricsAdvisorAdminClient.listAlertConfigs(detectionConfigId, new ListAnomalyAlertConfigsOptions())\n     .forEach(anomalyAlertConfiguration -> {\n         System.out.printf(\"DataPoint Anomaly alert configuration Id: %s%n\", anomalyAlertConfiguration.getId());\n         System.out.printf(\"DataPoint Anomaly alert configuration description: %s%n\",\n             anomalyAlertConfiguration.getDescription());\n         System.out.printf(\"DataPoint Anomaly alert configuration hook ids: %s%n\",\n             anomalyAlertConfiguration.getHookIdsToAlert());\n         System.out.printf(\"DataPoint Anomaly alert configuration cross metrics operator: %s%n\",\n             anomalyAlertConfiguration.getCrossMetricsOperator().toString());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing information of all the\n <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"anomaly alert configurations\"></xref> for the specified detection configuration."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listAlertConfigs(java.lang.String,com.azure.ai.metricsadvisor.administration.models.ListAnomalyAlertConfigsOptions,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listAlertConfigs(String detectionConfigurationId, ListAnomalyAlertConfigsOptions options, Context context)"
  name: "listAlertConfigs(String detectionConfigurationId, ListAnomalyAlertConfigsOptions options, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.listAlertConfigs(String detectionConfigurationId, ListAnomalyAlertConfigsOptions options, Context context)"
  summary: "Fetch the anomaly alert configurations associated with a detection configuration."
  parameters:
  - description: "The id of the detection configuration."
    name: "detectionConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "th e additional configurable options to specify when querying the result."
    name: "options"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.ListAnomalyAlertConfigsOptions?alt=com.azure.ai.metricsadvisor.administration.models.ListAnomalyAlertConfigsOptions&text=ListAnomalyAlertConfigsOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<AnomalyAlertConfiguration> listAlertConfigs(String detectionConfigurationId, ListAnomalyAlertConfigsOptions options, Context context)"
  desc: "Fetch the anomaly alert configurations associated with a detection configuration.\n\n**Code sample**\n\n```java\nString detectionConfigId = \"3rt98er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n metricsAdvisorAdminClient.listAlertConfigs(detectionConfigId,\n     new ListAnomalyAlertConfigsOptions(), Context.NONE)\n     .forEach(anomalyAlertConfiguration -> {\n         System.out.printf(\"DataPoint Anomaly alert configuration Id: %s%n\", anomalyAlertConfiguration.getId());\n         System.out.printf(\"DataPoint Anomaly alert configuration description: %s%n\",\n             anomalyAlertConfiguration.getDescription());\n         System.out.printf(\"DataPoint Anomaly alert configuration hook ids: %s%n\",\n             anomalyAlertConfiguration.getHookIdsToAlert());\n         System.out.printf(\"DataPoint Anomaly alert configuration cross metrics operator: %s%n\",\n             anomalyAlertConfiguration.getCrossMetricsOperator().toString());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing information of all the\n <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"anomaly alert configurations\"></xref> for the specified detection configuration."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeedIngestionStatus(java.lang.String,com.azure.ai.metricsadvisor.administration.models.ListDataFeedIngestionOptions)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions options)"
  name: "listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions options)"
  nameWithType: "MetricsAdvisorAdministrationClient.listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions options)"
  summary: "Fetch the ingestion status of a data feed."
  parameters:
  - description: "The data feed id."
    name: "dataFeedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional parameters."
    name: "options"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.ListDataFeedIngestionOptions?alt=com.azure.ai.metricsadvisor.administration.models.ListDataFeedIngestionOptions&text=ListDataFeedIngestionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<DataFeedIngestionStatus> listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions options)"
  desc: "Fetch the ingestion status of a data feed.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-01-01T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\n final ListDataFeedIngestionOptions options = new ListDataFeedIngestionOptions(startTime, endTime);\n PagedIterable<DataFeedIngestionStatus> ingestionStatuses\n     = metricsAdvisorAdminClient.listDataFeedIngestionStatus(dataFeedId, options);\n\n for (DataFeedIngestionStatus ingestionStatus : ingestionStatuses) {\n     System.out.printf(\"Timestamp: %s%n\", ingestionStatus.getTimestamp());\n     System.out.printf(\"Status: %s%n\", ingestionStatus.getStatus());\n     System.out.printf(\"Message: %s%n\", ingestionStatus.getMessage());\n }\n```"
  returns:
    description: "The ingestion statuses."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeedIngestionStatus?alt=com.azure.ai.metricsadvisor.administration.models.DataFeedIngestionStatus&text=DataFeedIngestionStatus\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeedIngestionStatus(java.lang.String,com.azure.ai.metricsadvisor.administration.models.ListDataFeedIngestionOptions,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions options, Context context)"
  name: "listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions options, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions options, Context context)"
  summary: "Fetch the ingestion status of a data feed."
  parameters:
  - description: "The data feed id."
    name: "dataFeedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional parameters."
    name: "options"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.ListDataFeedIngestionOptions?alt=com.azure.ai.metricsadvisor.administration.models.ListDataFeedIngestionOptions&text=ListDataFeedIngestionOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<DataFeedIngestionStatus> listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions options, Context context)"
  desc: "Fetch the ingestion status of a data feed.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-01-01T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\n final ListDataFeedIngestionOptions options = new ListDataFeedIngestionOptions(startTime, endTime);\n PagedIterable<DataFeedIngestionStatus> ingestionStatuses\n     = metricsAdvisorAdminClient.listDataFeedIngestionStatus(dataFeedId, options, Context.NONE);\n Stream<PagedResponse<DataFeedIngestionStatus>> ingestionStatusPageStream = ingestionStatuses.streamByPage();\n int[] pageCount = new int[1];\n ingestionStatusPageStream.forEach(ingestionStatusPage -> {\n     System.out.printf(\"Page: %d%n\", pageCount[0]++);\n     for (DataFeedIngestionStatus ingestionStatus : ingestionStatusPage.getElements()) {\n         System.out.printf(\"Timestamp: %s%n\", ingestionStatus.getTimestamp());\n         System.out.printf(\"Status: %s%n\", ingestionStatus.getStatus());\n         System.out.printf(\"Message: %s%n\", ingestionStatus.getMessage());\n     }\n });\n```"
  returns:
    description: "The ingestion statuses."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeedIngestionStatus?alt=com.azure.ai.metricsadvisor.administration.models.DataFeedIngestionStatus&text=DataFeedIngestionStatus\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeeds()"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeeds()"
  name: "listDataFeeds()"
  nameWithType: "MetricsAdvisorAdministrationClient.listDataFeeds()"
  summary: "List information of all data feeds on the metrics advisor account."
  syntax: "public PagedIterable<DataFeed> listDataFeeds()"
  desc: "List information of all data feeds on the metrics advisor account.\n\n**Code sample**\n\n```java\nmetricsAdvisorAdminClient.listDataFeeds()\n     .forEach(dataFeed -> {\n         System.out.printf(\"Data feed Id: %s%n\", dataFeed.getId());\n         System.out.printf(\"Data feed description: %s%n\", dataFeed.getOptions().getDescription());\n         System.out.printf(\"Data feed source type: %s%n\", dataFeed.getSourceType());\n         System.out.printf(\"Data feed creator: %s%n\", dataFeed.getCreator());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing information of all the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataFeed\" data-throw-if-not-resolved=\"false\" data-raw-source=\"data feeds\"></xref> in the account."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeeds(com.azure.ai.metricsadvisor.administration.models.ListDataFeedOptions,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataFeeds(ListDataFeedOptions options, Context context)"
  name: "listDataFeeds(ListDataFeedOptions options, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.listDataFeeds(ListDataFeedOptions options, Context context)"
  summary: "List information of all data feeds on the metrics advisor account with REST response."
  parameters:
  - description: "The configurable <xref uid=\"com.azure.ai.metricsadvisor.administration.models.ListDataFeedOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> to pass for filtering the output result."
    name: "options"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.ListDataFeedOptions?alt=com.azure.ai.metricsadvisor.administration.models.ListDataFeedOptions&text=ListDataFeedOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<DataFeed> listDataFeeds(ListDataFeedOptions options, Context context)"
  desc: "List information of all data feeds on the metrics advisor account with REST response.\n\n**Code sample**\n\n```java\nmetricsAdvisorAdminClient.listDataFeeds(\n     new ListDataFeedOptions()\n         .setListDataFeedFilter(\n             new ListDataFeedFilter()\n                 .setDataFeedStatus(DataFeedStatus.ACTIVE)\n                 .setDataFeedGranularityType(DataFeedGranularityType.DAILY))\n         .setMaxPageSize(3), Context.NONE)\n     .forEach(dataFeed -> {\n         System.out.printf(\"Data feed Id: %s%n\", dataFeed.getId());\n         System.out.printf(\"Data feed description: %s%n\", dataFeed.getOptions().getDescription());\n         System.out.printf(\"Data feed source type: %s%n\", dataFeed.getSourceType());\n         System.out.printf(\"Data feed creator: %s%n\", dataFeed.getCreator());\n         System.out.printf(\"Data feed status: %s%n\", dataFeed.getStatus());\n         System.out.printf(\"Data feed granularity type: %s%n\", dataFeed.getGranularity().getGranularityType());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing information of all the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataFeed\" data-throw-if-not-resolved=\"false\" data-raw-source=\"data feeds\"></xref> in the account."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataSourceCredentials()"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataSourceCredentials()"
  name: "listDataSourceCredentials()"
  nameWithType: "MetricsAdvisorAdministrationClient.listDataSourceCredentials()"
  summary: "List information of all data source credential entities on the metrics advisor account."
  syntax: "public PagedIterable<DataSourceCredentialEntity> listDataSourceCredentials()"
  desc: "List information of all data source credential entities on the metrics advisor account.\n\n**Code sample**\n\n```java\nmetricsAdvisorAdminClient.listDataSourceCredentials()\n     .forEach(datasourceCredentialEntity -> {\n         if (datasourceCredentialEntity instanceof DataSourceServicePrincipalInKeyVault) {\n             DataSourceServicePrincipalInKeyVault actualCredentialSPInKV\n                 = (DataSourceServicePrincipalInKeyVault) datasourceCredentialEntity;\n             System.out\n                 .printf(\"Actual credential entity key vault endpoint: %s%n\",\n                     actualCredentialSPInKV.getKeyVaultEndpoint());\n             System.out.printf(\"Actual credential entity key vault client Id: %s%n\",\n                 actualCredentialSPInKV.getKeyVaultClientId());\n             System.out.printf(\"Actual credential entity key vault secret name for data source: %s%n\",\n                 actualCredentialSPInKV.getSecretNameForDataSourceClientId());\n             System.out.printf(\"Actual credential entity key vault secret for data source: %s%n\",\n                 actualCredentialSPInKV.getSecretNameForDataSourceClientSecret());\n         }\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing information of all the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataSourceCredentialEntity\"></xref>\n in the account."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataSourceCredentials(com.azure.ai.metricsadvisor.administration.models.ListCredentialEntityOptions,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDataSourceCredentials(ListCredentialEntityOptions options, Context context)"
  name: "listDataSourceCredentials(ListCredentialEntityOptions options, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.listDataSourceCredentials(ListCredentialEntityOptions options, Context context)"
  summary: "List information of all data source credential entities on the metrics advisor account."
  parameters:
  - description: "The configurable <xref uid=\"com.azure.ai.metricsadvisor.administration.models.ListCredentialEntityOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> to pass for filtering the output\n result."
    name: "options"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.ListCredentialEntityOptions?alt=com.azure.ai.metricsadvisor.administration.models.ListCredentialEntityOptions&text=ListCredentialEntityOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<DataSourceCredentialEntity> listDataSourceCredentials(ListCredentialEntityOptions options, Context context)"
  desc: "List information of all data source credential entities on the metrics advisor account.\n\n**Code sample**\n\n```java\nmetricsAdvisorAdminClient.listDataSourceCredentials(\n         new ListCredentialEntityOptions()\n             .setMaxPageSize(3),\n         Context.NONE)\n     .forEach(datasourceCredentialEntity -> {\n         if (datasourceCredentialEntity instanceof DataSourceServicePrincipalInKeyVault) {\n             DataSourceServicePrincipalInKeyVault actualCredentialSPInKV\n                 = (DataSourceServicePrincipalInKeyVault) datasourceCredentialEntity;\n             System.out\n                 .printf(\"Actual credential entity key vault endpoint: %s%n\",\n                     actualCredentialSPInKV.getKeyVaultEndpoint());\n             System.out.printf(\"Actual credential entity key vault client Id: %s%n\",\n                 actualCredentialSPInKV.getKeyVaultClientId());\n             System.out.printf(\"Actual credential entity key vault secret name for data source: %s%n\",\n                 actualCredentialSPInKV.getSecretNameForDataSourceClientId());\n             System.out.printf(\"Actual credential entity key vault secret for data source: %s%n\",\n                 actualCredentialSPInKV.getSecretNameForDataSourceClientSecret());\n         }\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing information of all the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataSourceCredentialEntity\"></xref>\n in the account."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDetectionConfigs(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDetectionConfigs(String metricId)"
  name: "listDetectionConfigs(String metricId)"
  nameWithType: "MetricsAdvisorAdministrationClient.listDetectionConfigs(String metricId)"
  summary: "Given a metric id, retrieve all anomaly detection configurations applied to it."
  parameters:
  - description: "The metric id."
    name: "metricId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<AnomalyDetectionConfiguration> listDetectionConfigs(String metricId)"
  desc: "Given a metric id, retrieve all anomaly detection configurations applied to it.\n\n**Code sample**\n\n```java\nfinal String metricId = \"0b836da8-10e6-46cd-8f4f-28262e113a62\";\n PagedIterable<AnomalyDetectionConfiguration> configsIterable\n     = metricsAdvisorAdminClient.listDetectionConfigs(metricId);\n\n for (AnomalyDetectionConfiguration detectionConfig : configsIterable) {\n     System.out.printf(\"Detection config Id: %s%n\", detectionConfig.getId());\n     System.out.printf(\"Name: %s%n\", detectionConfig.getName());\n     System.out.printf(\"Description: %s%n\", detectionConfig.getDescription());\n     System.out.printf(\"MetricId: %s%n\", detectionConfig.getMetricId());\n }\n```"
  returns:
    description: "The anomaly detection configurations."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDetectionConfigs(java.lang.String,com.azure.ai.metricsadvisor.administration.models.ListDetectionConfigsOptions,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listDetectionConfigs(String metricId, ListDetectionConfigsOptions options, Context context)"
  name: "listDetectionConfigs(String metricId, ListDetectionConfigsOptions options, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.listDetectionConfigs(String metricId, ListDetectionConfigsOptions options, Context context)"
  summary: "Given a metric id, retrieve all anomaly detection configurations applied to it."
  parameters:
  - description: "The metric id."
    name: "metricId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "th e additional configurable options to specify when querying the result."
    name: "options"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.ListDetectionConfigsOptions?alt=com.azure.ai.metricsadvisor.administration.models.ListDetectionConfigsOptions&text=ListDetectionConfigsOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<AnomalyDetectionConfiguration> listDetectionConfigs(String metricId, ListDetectionConfigsOptions options, Context context)"
  desc: "Given a metric id, retrieve all anomaly detection configurations applied to it.\n\n**Code sample**\n\n```java\nfinal String metricId = \"0b836da8-10e6-46cd-8f4f-28262e113a62\";\n PagedIterable<AnomalyDetectionConfiguration> configsIterable\n     = metricsAdvisorAdminClient.listDetectionConfigs(metricId,\n         new ListDetectionConfigsOptions(), Context.NONE);\n\n Stream<PagedResponse<AnomalyDetectionConfiguration>> configByPageStream\n     = configsIterable.streamByPage();\n\n configByPageStream.forEach(configPage -> {\n     IterableStream<AnomalyDetectionConfiguration> pageElements = configPage.getElements();\n     for (AnomalyDetectionConfiguration detectionConfig : pageElements) {\n         System.out.printf(\"Detection config Id: %s%n\", detectionConfig.getId());\n         System.out.printf(\"Name: %s%n\", detectionConfig.getName());\n         System.out.printf(\"Description: %s%n\", detectionConfig.getDescription());\n         System.out.printf(\"MetricId: %s%n\", detectionConfig.getMetricId());\n     }\n });\n```"
  returns:
    description: "The anomaly detection configurations."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listHooks()"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listHooks()"
  name: "listHooks()"
  nameWithType: "MetricsAdvisorAdministrationClient.listHooks()"
  summary: "List information of hooks on the metrics advisor account."
  syntax: "public PagedIterable<NotificationHook> listHooks()"
  desc: "List information of hooks on the metrics advisor account.\n\n**Code sample**\n\n```java\nPagedIterable<NotificationHook> hooks = metricsAdvisorAdminClient.listHooks();\n for (NotificationHook notificationHook : hooks) {\n     if (notificationHook instanceof EmailNotificationHook) {\n         EmailNotificationHook emailHook = (EmailNotificationHook) notificationHook;\n         System.out.printf(\"Email Hook Id: %s%n\", emailHook.getId());\n         System.out.printf(\"Email Hook Name: %s%n\", emailHook.getName());\n         System.out.printf(\"Email Hook Description: %s%n\", emailHook.getDescription());\n         System.out.printf(\"Email Hook External Link: %s%n\", emailHook.getExternalLink());\n         System.out.printf(\"Email Hook Emails: %s%n\", String.join(\",\", emailHook.getEmailsToAlert()));\n     } else if (notificationHook instanceof WebNotificationHook) {\n         WebNotificationHook webHook = (WebNotificationHook) notificationHook;\n         System.out.printf(\"Web Hook Id: %s%n\", webHook.getId());\n         System.out.printf(\"Web Hook Name: %s%n\", webHook.getName());\n         System.out.printf(\"Web Hook Description: %s%n\", webHook.getDescription());\n         System.out.printf(\"Web Hook External Link: %s%n\", webHook.getExternalLink());\n         System.out.printf(\"Web Hook Endpoint: %s%n\", webHook.getEndpoint());\n         System.out.printf(\"Web Hook Headers: %s%n\", webHook.getHttpHeaders());\n     }\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing information of all the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook\" data-throw-if-not-resolved=\"false\" data-raw-source=\"NotificationHook\"></xref> in the account."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listHooks(com.azure.ai.metricsadvisor.administration.models.ListHookOptions,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.listHooks(ListHookOptions options, Context context)"
  name: "listHooks(ListHookOptions options, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.listHooks(ListHookOptions options, Context context)"
  summary: "List information of hooks."
  parameters:
  - description: "The additional parameters."
    name: "options"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.ListHookOptions?alt=com.azure.ai.metricsadvisor.administration.models.ListHookOptions&text=ListHookOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<NotificationHook> listHooks(ListHookOptions options, Context context)"
  desc: "List information of hooks.\n\n**Code sample**\n\n```java\nListHookOptions options = new ListHookOptions()\n     .setSkip(100)\n     .setMaxPageSize(20);\n PagedIterable<NotificationHook> hooks = metricsAdvisorAdminClient.listHooks(options, Context.NONE);\n Stream<PagedResponse<NotificationHook>> hooksPageStream = hooks.streamByPage();\n int[] pageCount = new int[1];\n hooksPageStream.forEach(hookPage -> {\n     System.out.printf(\"Page: %d%n\", pageCount[0]++);\n     for (NotificationHook notificationHook : hookPage.getElements()) {\n         if (notificationHook instanceof EmailNotificationHook) {\n             EmailNotificationHook emailHook = (EmailNotificationHook) notificationHook;\n             System.out.printf(\"Email Hook Id: %s%n\", emailHook.getId());\n             System.out.printf(\"Email Hook Name: %s%n\", emailHook.getName());\n             System.out.printf(\"Email Hook Description: %s%n\", emailHook.getDescription());\n             System.out.printf(\"Email Hook External Link: %s%n\", emailHook.getExternalLink());\n             System.out.printf(\"Email Hook Emails: %s%n\", String.join(\",\",\n                 emailHook.getEmailsToAlert()));\n             System.out.printf(\"Email Hook Admins: %s%n\", String.join(\",\", emailHook.getAdmins()));\n         } else if (notificationHook instanceof WebNotificationHook) {\n             WebNotificationHook webHook = (WebNotificationHook) notificationHook;\n             System.out.printf(\"Web Hook Id: %s%n\", webHook.getId());\n             System.out.printf(\"Web Hook Name: %s%n\", webHook.getName());\n             System.out.printf(\"Web Hook Description: %s%n\", webHook.getDescription());\n             System.out.printf(\"Web Hook External Link: %s%n\", webHook.getExternalLink());\n             System.out.printf(\"Web Hook Endpoint: %s%n\", webHook.getEndpoint());\n             System.out.printf(\"Web Hook Headers: %s%n\", webHook.getHttpHeaders());\n             System.out.printf(\"Web Hook Admins: %s%n\", String.join(\",\", webHook.getAdmins()));\n         }\n     }\n });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing information of the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook\" data-throw-if-not-resolved=\"false\" data-raw-source=\"NotificationHook\"></xref> resources."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.refreshDataFeedIngestion(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.refreshDataFeedIngestion(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)"
  name: "refreshDataFeedIngestion(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)"
  nameWithType: "MetricsAdvisorAdministrationClient.refreshDataFeedIngestion(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)"
  summary: "Refresh data ingestion for a period."
  parameters:
  - description: "The data feed id."
    name: "dataFeedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The start point of the period."
    name: "startTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "The end point of of the period."
    name: "endTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void refreshDataFeedIngestion(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)"
  desc: "Refresh data ingestion for a period.\n\nThe data in the data source for the given period will be reingested and any ingested data for the same period will be overwritten.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-01-01T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-03-03T00:00:00Z\");\n metricsAdvisorAdminClient.refreshDataFeedIngestion(dataFeedId,\n     startTime,\n     endTime);\n```"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.refreshDataFeedIngestionWithResponse(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.refreshDataFeedIngestionWithResponse(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime, Context context)"
  name: "refreshDataFeedIngestionWithResponse(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.refreshDataFeedIngestionWithResponse(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime, Context context)"
  summary: "Refresh data ingestion for a period."
  parameters:
  - description: "The data feed id."
    name: "dataFeedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The start point of the period."
    name: "startTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "The end point of of the period."
    name: "endTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> refreshDataFeedIngestionWithResponse(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime, Context context)"
  desc: "Refresh data ingestion for a period.\n\nThe data in the data source for the given period will be reingested and any ingested data for the same period will be overwritten.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-01-01T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-03-03T00:00:00Z\");\n Response<Void> response = metricsAdvisorAdminClient.refreshDataFeedIngestionWithResponse(dataFeedId,\n     startTime,\n     endTime,\n     Context.NONE);\n System.out.printf(\"Response statusCode: %d%n\", response.getStatusCode());\n```"
  returns:
    description: "The response."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateAlertConfig(com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateAlertConfig(AnomalyAlertConfiguration alertConfiguration)"
  name: "updateAlertConfig(AnomalyAlertConfiguration alertConfiguration)"
  nameWithType: "MetricsAdvisorAdministrationClient.updateAlertConfig(AnomalyAlertConfiguration alertConfiguration)"
  summary: "Update anomaly alert configuration."
  parameters:
  - description: "The anomaly alert configuration to update."
    name: "alertConfiguration"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AnomalyAlertConfiguration updateAlertConfig(AnomalyAlertConfiguration alertConfiguration)"
  desc: "Update anomaly alert configuration.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n String additionalHookId = \"2gh8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n\n AnomalyAlertConfiguration existingAnomalyConfig\n     = metricsAdvisorAdminClient.getAlertConfig(alertConfigId);\n List<String> hookIds = new ArrayList<>(existingAnomalyConfig.getHookIdsToAlert());\n hookIds.add(additionalHookId);\n final AnomalyAlertConfiguration updatAnomalyAlertConfiguration\n     = metricsAdvisorAdminClient.updateAlertConfig(\n     existingAnomalyConfig\n         .setHookIdsToAlert(hookIds)\n         .setDescription(\"updated to add more hook ids\")\n );\n\n System.out.printf(\"Updated anomaly alert configuration Id: %s%n\", updatAnomalyAlertConfiguration.getId());\n System.out.printf(\"Updated anomaly alert configuration description: %s%n\",\n     updatAnomalyAlertConfiguration.getDescription());\n System.out.printf(\"Updated anomaly alert configuration hook ids: %s%n\",\n     updatAnomalyAlertConfiguration.getHookIdsToAlert());\n```"
  returns:
    description: "The <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyAlertConfiguration\"></xref> that was updated."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateAlertConfigWithResponse(com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration, Context context)"
  name: "updateAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.updateAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration, Context context)"
  summary: "Update anomaly alert configuration."
  parameters:
  - description: "The anomaly alert configuration to update."
    name: "alertConfiguration"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<AnomalyAlertConfiguration> updateAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration, Context context)"
  desc: "Update anomaly alert configuration.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n String additionalHookId = \"2gh8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n\n AnomalyAlertConfiguration existingAnomalyConfig\n     = metricsAdvisorAdminClient.getAlertConfig(alertConfigId);\n List<String> hookIds = new ArrayList<>(existingAnomalyConfig.getHookIdsToAlert());\n hookIds.add(additionalHookId);\n final Response<AnomalyAlertConfiguration> alertConfigurationResponse\n     = metricsAdvisorAdminClient.updateAlertConfigWithResponse(\n     existingAnomalyConfig\n         .setHookIdsToAlert(hookIds)\n         .setDescription(\"updated to add more hook ids\"), Context.NONE);\n\n System.out.printf(\"Update anomaly alert operation status: %s%n\", alertConfigurationResponse.getStatusCode());\n final AnomalyAlertConfiguration updatAnomalyAlertConfiguration = alertConfigurationResponse.getValue();\n System.out.printf(\"Updated anomaly alert configuration Id: %s%n\", updatAnomalyAlertConfiguration.getId());\n System.out.printf(\"Updated anomaly alert configuration description: %s%n\",\n     updatAnomalyAlertConfiguration.getDescription());\n System.out.printf(\"Updated anomaly alert configuration hook ids: %sf%n\",\n     updatAnomalyAlertConfiguration.getHookIdsToAlert());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyAlertConfiguration\"></xref> that was updated."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDataFeed(com.azure.ai.metricsadvisor.administration.models.DataFeed)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDataFeed(DataFeed dataFeed)"
  name: "updateDataFeed(DataFeed dataFeed)"
  nameWithType: "MetricsAdvisorAdministrationClient.updateDataFeed(DataFeed dataFeed)"
  summary: "Update a data feed."
  parameters:
  - description: "the data feed that needs to be updated."
    name: "dataFeed"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataFeed updateDataFeed(DataFeed dataFeed)"
  desc: "Update a data feed.\n\n**Code sample**\n\n```java\nDataFeed existingDataFeed = new DataFeed();\n final DataFeed updatedDataFeed = metricsAdvisorAdminClient.updateDataFeed(\n     existingDataFeed.setOptions(new DataFeedOptions().setDescription(\"set updated description\")));\n\n System.out.printf(\"Data feed Id: %s%n\", updatedDataFeed.getId());\n System.out.printf(\"Data feed updated description: %s%n\", updatedDataFeed.getOptions().getDescription());\n```"
  returns:
    description: "the updated data feed."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDataFeedWithResponse(com.azure.ai.metricsadvisor.administration.models.DataFeed,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDataFeedWithResponse(DataFeed dataFeed, Context context)"
  name: "updateDataFeedWithResponse(DataFeed dataFeed, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.updateDataFeedWithResponse(DataFeed dataFeed, Context context)"
  summary: "Update a data feed with REST response."
  parameters:
  - description: "the data feed that needs to be updated."
    name: "dataFeed"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DataFeed> updateDataFeedWithResponse(DataFeed dataFeed, Context context)"
  desc: "Update a data feed with REST response.\n\n**Code sample**\n\n```java\nDataFeed existingDataFeed = new DataFeed();\n final Response<DataFeed> updateDataFeedWithResponse =\n     metricsAdvisorAdminClient.updateDataFeedWithResponse(\n         existingDataFeed.setOptions(new DataFeedOptions().setDescription(\"set updated description\")),\n         Context.NONE);\n\n System.out.printf(\"Data feed update operation status: %s%n\", updateDataFeedWithResponse.getStatusCode());\n DataFeed dataFeed = updateDataFeedWithResponse.getValue();\n System.out.printf(\"Data feed Id: %s%n\", dataFeed.getId());\n System.out.printf(\"Data feed updated description: %s%n\", dataFeed.getOptions().getDescription());\n```"
  returns:
    description: "the updated data feed."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDataSourceCredential(com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDataSourceCredential(DataSourceCredentialEntity dataSourceCredential)"
  name: "updateDataSourceCredential(DataSourceCredentialEntity dataSourceCredential)"
  nameWithType: "MetricsAdvisorAdministrationClient.updateDataSourceCredential(DataSourceCredentialEntity dataSourceCredential)"
  summary: "Update a data source credential entity."
  parameters:
  - description: "The credential entity."
    name: "dataSourceCredential"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataSourceCredentialEntity updateDataSourceCredential(DataSourceCredentialEntity dataSourceCredential)"
  desc: "Update a data source credential entity.\n\n**Code sample**\n\n```java\nfinal String datasourceCredentialId = \"f45668b2-bffa-11eb-8529-0246ac130003\";\n DataSourceCredentialEntity existingDatasourceCredential =\n     metricsAdvisorAdminClient.getDataSourceCredential(datasourceCredentialId);\n DataSourceServicePrincipalInKeyVault actualCredentialSPInKV = null;\n if (existingDatasourceCredential instanceof DataSourceServicePrincipalInKeyVault) {\n     actualCredentialSPInKV  = (DataSourceServicePrincipalInKeyVault) existingDatasourceCredential;\n }\n\n DataSourceCredentialEntity credentialEntity =\n     metricsAdvisorAdminClient.updateDataSourceCredential(\n         actualCredentialSPInKV.setDescription(\"set updated description\"));\n\n if (credentialEntity instanceof DataSourceServicePrincipalInKeyVault) {\n     DataSourceServicePrincipalInKeyVault updatedCredentialSPInKV\n         = (DataSourceServicePrincipalInKeyVault) credentialEntity;\n     System.out.printf(\"Actual credential entity key vault endpoint: %s%n\",\n         updatedCredentialSPInKV.getKeyVaultEndpoint());\n     System.out.printf(\"Actual credential entity key vault updated description: %s%n\",\n         updatedCredentialSPInKV.getDescription());\n }\n```"
  returns:
    description: "The updated <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataSourceCredentialEntity\"></xref>."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDataSourceCredentialWithResponse(com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDataSourceCredentialWithResponse(DataSourceCredentialEntity dataSourceCredential, Context context)"
  name: "updateDataSourceCredentialWithResponse(DataSourceCredentialEntity dataSourceCredential, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.updateDataSourceCredentialWithResponse(DataSourceCredentialEntity dataSourceCredential, Context context)"
  summary: "Update a data source credential entity."
  parameters:
  - description: "The credential entity."
    name: "dataSourceCredential"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DataSourceCredentialEntity> updateDataSourceCredentialWithResponse(DataSourceCredentialEntity dataSourceCredential, Context context)"
  desc: "Update a data source credential entity.\n\n**Code sample**\n\n```java\nfinal String datasourceCredentialId = \"f45668b2-bffa-11eb-8529-0246ac130003\";\n DataSourceCredentialEntity existingDatasourceCredential =\n     metricsAdvisorAdminClient.getDataSourceCredential(datasourceCredentialId);\n DataSourceServicePrincipalInKeyVault actualCredentialSPInKV = null;\n if (existingDatasourceCredential instanceof DataSourceServicePrincipalInKeyVault) {\n     actualCredentialSPInKV  = (DataSourceServicePrincipalInKeyVault) existingDatasourceCredential;\n }\n Response<DataSourceCredentialEntity> credentialEntityWithResponse =\n     metricsAdvisorAdminClient.updateDataSourceCredentialWithResponse(\n         actualCredentialSPInKV.setDescription(\"set updated description\"), Context.NONE);\n\n System.out.printf(\"Credential Entity creation operation status: %s%n\",\n     credentialEntityWithResponse.getStatusCode());\n if (credentialEntityWithResponse.getValue() instanceof DataSourceServicePrincipalInKeyVault) {\n     DataSourceServicePrincipalInKeyVault updatedCredentialSPInKV\n         = (DataSourceServicePrincipalInKeyVault) credentialEntityWithResponse.getValue();\n     System.out.printf(\"Actual credential entity key vault endpoint: %s%n\",\n         updatedCredentialSPInKV.getKeyVaultEndpoint());\n     System.out.printf(\"Actual credential entity key vault updated description: %s%n\",\n         updatedCredentialSPInKV.getDescription());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing the updated <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataSourceCredentialEntity\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDetectionConfig(com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDetectionConfig(AnomalyDetectionConfiguration detectionConfiguration)"
  name: "updateDetectionConfig(AnomalyDetectionConfiguration detectionConfiguration)"
  nameWithType: "MetricsAdvisorAdministrationClient.updateDetectionConfig(AnomalyDetectionConfiguration detectionConfiguration)"
  summary: "Update a configuration to detect anomalies in the time series of a metric."
  parameters:
  - description: "The anomaly detection configuration."
    name: "detectionConfiguration"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AnomalyDetectionConfiguration updateDetectionConfig(AnomalyDetectionConfiguration detectionConfiguration)"
  desc: "Update a configuration to detect anomalies in the time series of a metric.\n\n**Code sample**\n\n```java\nfinal String detectionConfigId = \"7b8069a1-1564-46da-9f50-b5d0dd9129ab\";\n AnomalyDetectionConfiguration detectionConfig = metricsAdvisorAdminClient\n     .getDetectionConfig(detectionConfigId);\n\n detectionConfig.setName(\"updated config name\");\n detectionConfig.setDescription(\"updated with more detection conditions\");\n DimensionKey seriesGroupKey = new DimensionKey()\n     .put(\"city\", \"Seoul\");\n detectionConfig.addSeriesGroupDetectionCondition(\n     new MetricSeriesGroupDetectionCondition(seriesGroupKey)\n         .setSmartDetectionCondition(new SmartDetectionCondition(\n             10.0,\n             AnomalyDetectorDirection.UP,\n             new SuppressCondition(2, 2))));\n\n AnomalyDetectionConfiguration updatedDetectionConfig = metricsAdvisorAdminClient\n     .updateDetectionConfig(detectionConfig);\n\n System.out.printf(\"Detection config Id: %s%n\", updatedDetectionConfig.getId());\n System.out.printf(\"Name: %s%n\", updatedDetectionConfig.getName());\n System.out.printf(\"Description: %s%n\", updatedDetectionConfig.getDescription());\n System.out.printf(\"MetricId: %s%n\", updatedDetectionConfig.getMetricId());\n```"
  returns:
    description: "The updated <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyDetectionConfiguration\"></xref>."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDetectionConfigWithResponse(com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateDetectionConfigWithResponse(AnomalyDetectionConfiguration detectionConfiguration, Context context)"
  name: "updateDetectionConfigWithResponse(AnomalyDetectionConfiguration detectionConfiguration, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.updateDetectionConfigWithResponse(AnomalyDetectionConfiguration detectionConfiguration, Context context)"
  summary: "Update a configuration to detect anomalies in the time series of a metric."
  parameters:
  - description: "The anomaly detection configuration."
    name: "detectionConfiguration"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<AnomalyDetectionConfiguration> updateDetectionConfigWithResponse(AnomalyDetectionConfiguration detectionConfiguration, Context context)"
  desc: "Update a configuration to detect anomalies in the time series of a metric.\n\n**Code sample**\n\n```java\nfinal String detectionConfigId = \"7b8069a1-1564-46da-9f50-b5d0dd9129ab\";\n Response<AnomalyDetectionConfiguration> getResponse = metricsAdvisorAdminClient\n     .getDetectionConfigWithResponse(detectionConfigId, Context.NONE);\n AnomalyDetectionConfiguration detectionConfig = getResponse.getValue();\n detectionConfig.setName(\"updated config name\");\n detectionConfig.setDescription(\"updated with more detection conditions\");\n DimensionKey seriesGroupKey = new DimensionKey()\n     .put(\"city\", \"Seoul\");\n detectionConfig.addSeriesGroupDetectionCondition(\n     new MetricSeriesGroupDetectionCondition(seriesGroupKey)\n         .setSmartDetectionCondition(new SmartDetectionCondition(\n             10.0,\n             AnomalyDetectorDirection.UP,\n             new SuppressCondition(2, 2))));\n\n Response<AnomalyDetectionConfiguration> updateResponse = metricsAdvisorAdminClient\n     .updateDetectionConfigWithResponse(detectionConfig, Context.NONE);\n\n System.out.printf(\"Response StatusCode: %s%n\", updateResponse.getStatusCode());\n AnomalyDetectionConfiguration updatedDetectionConfig = updateResponse.getValue();\n System.out.printf(\"Detection config Id: %s%n\", updatedDetectionConfig.getId());\n System.out.printf(\"Name: %s%n\", updatedDetectionConfig.getName());\n System.out.printf(\"Description: %s%n\", updatedDetectionConfig.getDescription());\n System.out.printf(\"MetricId: %s%n\", updatedDetectionConfig.getMetricId());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing the updated <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyDetectionConfiguration\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateHook(com.azure.ai.metricsadvisor.administration.models.NotificationHook)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateHook(NotificationHook notificationHook)"
  name: "updateHook(NotificationHook notificationHook)"
  nameWithType: "MetricsAdvisorAdministrationClient.updateHook(NotificationHook notificationHook)"
  summary: "Update an existing notification<wbr>Hook."
  parameters:
  - description: "The notificationHook to update."
    name: "notificationHook"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public NotificationHook updateHook(NotificationHook notificationHook)"
  desc: "Update an existing notificationHook.\n\n**Code sample**\n\n```java\nfinal String emailHookId = \"f00853f1-6627-447f-bacf-8dccf2e86fed\";\n NotificationHook notificationHook = metricsAdvisorAdminClient.getHook(emailHookId);\n EmailNotificationHook emailHook = (EmailNotificationHook) notificationHook;\n List<String> emailsToUpdate = new ArrayList<>(emailHook.getEmailsToAlert());\n emailsToUpdate.remove(\"alertme@alertme.com\");\n emailsToUpdate.add(\"alertme2@alertme.com\");\n emailsToUpdate.add(\"alertme3@alertme.com\");\n emailHook.setEmailsToAlert(emailsToUpdate);\n NotificationHook updatedNotificationHook = metricsAdvisorAdminClient.updateHook(emailHook);\n EmailNotificationHook updatedEmailHook = (EmailNotificationHook) updatedNotificationHook;\n System.out.printf(\"NotificationHook Id: %s%n\", updatedEmailHook.getId());\n System.out.printf(\"NotificationHook Name: %s%n\", updatedEmailHook.getName());\n System.out.printf(\"NotificationHook Description: %s%n\", updatedEmailHook.getDescription());\n System.out.printf(\"NotificationHook External Link: %s%n\", updatedEmailHook.getExternalLink());\n System.out.printf(\"NotificationHook Emails: %s%n\", String.join(\",\",\n     updatedEmailHook.getEmailsToAlert()));\n```"
  returns:
    description: "The updated <xref uid=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook\" data-throw-if-not-resolved=\"false\" data-raw-source=\"NotificationHook\"></xref>."
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateHookWithResponse(com.azure.ai.metricsadvisor.administration.models.NotificationHook,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateHookWithResponse(NotificationHook notificationHook, Context context)"
  name: "updateHookWithResponse(NotificationHook notificationHook, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.updateHookWithResponse(NotificationHook notificationHook, Context context)"
  summary: "Update an existing notification<wbr>Hook."
  parameters:
  - description: "The notificationHook to update."
    name: "notificationHook"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<NotificationHook> updateHookWithResponse(NotificationHook notificationHook, Context context)"
  desc: "Update an existing notificationHook.\n\n**Code sample**\n\n```java\nfinal String emailHookId = \"f00853f1-6627-447f-bacf-8dccf2e86fed\";\n Response<NotificationHook> response\n     = metricsAdvisorAdminClient.getHookWithResponse(emailHookId, Context.NONE);\n EmailNotificationHook emailHook = (EmailNotificationHook) response.getValue();\n List<String> emailsToUpdate = new ArrayList<>(emailHook.getEmailsToAlert());\n emailsToUpdate.remove(\"alertme@alertme.com\");\n emailsToUpdate.add(\"alertme2@alertme.com\");\n emailsToUpdate.add(\"alertme3@alertme.com\");\n emailHook.setEmailsToAlert(emailsToUpdate);\n Response<NotificationHook> updateResponse\n     = metricsAdvisorAdminClient.updateHookWithResponse(emailHook, Context.NONE);\n EmailNotificationHook updatedEmailHook = (EmailNotificationHook) updateResponse.getValue();\n System.out.printf(\"Email Hook Id: %s%n\", updatedEmailHook.getId());\n System.out.printf(\"Email Hook Name: %s%n\", updatedEmailHook.getName());\n System.out.printf(\"Email Hook Description: %s%n\", updatedEmailHook.getDescription());\n System.out.printf(\"Email Hook External Link: %s%n\", updatedEmailHook.getExternalLink());\n System.out.printf(\"Email Hook Emails: %s%n\", String.join(\",\",\n     updatedEmailHook.getEmailsToAlert()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing the updated <xref uid=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook\" data-throw-if-not-resolved=\"false\" data-raw-source=\"NotificationHook\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "This class provides an asynchronous client that contains all the operations that apply to Azure Metrics Advisor.\n\n**Instantiating a synchronous Metrics Advisor Administration Client**\n\n```java\nMetricsAdvisorAdministrationClient metricsAdvisorAdminClient =\n     new MetricsAdvisorAdministrationClientBuilder()\n         .credential(new MetricsAdvisorKeyCredential(\"{subscription_key}\", \"{api_key}\"))\n         .endpoint(\"{endpoint}\")\n         .buildClient();\n```"
metadata: {}
package: "com.azure.ai.metricsadvisor.administration"
artifact: com.azure:azure-ai-metricsadvisor:1.1.6
