### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.eventprocessorhost.CompleteLease
  id: CompleteLease
  parent: com.microsoft.azure.eventprocessorhost
  children:
  - com.microsoft.azure.eventprocessorhost.CompleteLease.CompleteLease()
  - com.microsoft.azure.eventprocessorhost.CompleteLease.CompleteLease(CompleteLease)
  - com.microsoft.azure.eventprocessorhost.CompleteLease.CompleteLease(String)
  - com.microsoft.azure.eventprocessorhost.CompleteLease.epoch
  - com.microsoft.azure.eventprocessorhost.CompleteLease.getEpoch()
  - com.microsoft.azure.eventprocessorhost.CompleteLease.incrementEpoch()
  - com.microsoft.azure.eventprocessorhost.CompleteLease.setEpoch(long)
  href: com.microsoft.azure.eventprocessorhost.CompleteLease.yml
  langs:
  - java
  name: CompleteLease
  nameWithType: CompleteLease
  fullName: com.microsoft.azure.eventprocessorhost.CompleteLease
  type: Class
  source:
    remote: &o0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/CompleteLease.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-java
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/CompleteLease.java
    startLine: 19
  package: com.microsoft.azure.eventprocessorhost
  summary: "<p>CompleteLease class is public so that advanced users can implement an ILeaseManager. Unless you are implementing ILeaseManager you should not have to deal with objects of this class or derived classes directly. </p>\r\n<p>CompleteLease carries around complete information about a lease. By itself, it has the epoch. Any lease manager implementation can derive from this class to add data which the lease manager needs to function <ndash></ndash> see AzureBlobLease for an example. Having two distinct classes allows the code to clearly express which variety of lease any variable holds or a method requires, and avoids the problem of accidentally supplying a lightweight BaseLease to a method which needs the lease-manager-specific fields. </p>"
  syntax: &o1
    content: public class CompleteLease extends BaseLease
  inheritance:
  - java.lang.Object
  - Comparable<BaseLease>
  - com.microsoft.azure.eventprocessorhost.BaseLease
  inheritedMembers:
  - com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease()
  - com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease(String)
  - com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease(String,String,boolean)
  - com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease(BaseLease)
  - com.microsoft.azure.eventprocessorhost.BaseLease.compareTo(BaseLease)
  - com.microsoft.azure.eventprocessorhost.BaseLease.getIsOwned()
  - com.microsoft.azure.eventprocessorhost.BaseLease.getOwner()
  - com.microsoft.azure.eventprocessorhost.BaseLease.getPartitionId()
  - com.microsoft.azure.eventprocessorhost.BaseLease.isOwnedBy(String)
  - com.microsoft.azure.eventprocessorhost.BaseLease.setIsOwned(boolean)
  - com.microsoft.azure.eventprocessorhost.BaseLease.setOwner(String)
- uid: com.microsoft.azure.eventprocessorhost.CompleteLease.CompleteLease()
  id: CompleteLease()
  parent: com.microsoft.azure.eventprocessorhost.CompleteLease
  href: com.microsoft.azure.eventprocessorhost.CompleteLease.yml
  langs:
  - java
  name: CompleteLease()
  nameWithType: CompleteLease.CompleteLease()
  fullName: com.microsoft.azure.eventprocessorhost.CompleteLease.CompleteLease()
  overload: com.microsoft.azure.eventprocessorhost.CompleteLease.CompleteLease*
  type: Constructor
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/CompleteLease.java
    startLine: 25
  package: com.microsoft.azure.eventprocessorhost
  summary: "<p>Do not use; added only for GSon deserializer </p>"
  syntax:
    content: protected CompleteLease()
- uid: com.microsoft.azure.eventprocessorhost.CompleteLease.CompleteLease(CompleteLease)
  id: CompleteLease(CompleteLease)
  parent: com.microsoft.azure.eventprocessorhost.CompleteLease
  href: com.microsoft.azure.eventprocessorhost.CompleteLease.yml
  langs:
  - java
  name: CompleteLease(CompleteLease source)
  nameWithType: CompleteLease.CompleteLease(CompleteLease source)
  fullName: com.microsoft.azure.eventprocessorhost.CompleteLease.CompleteLease(CompleteLease source)
  overload: com.microsoft.azure.eventprocessorhost.CompleteLease.CompleteLease*
  type: Constructor
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/CompleteLease.java
    startLine: 43
  package: com.microsoft.azure.eventprocessorhost
  summary: "<p>Create a Lease by duplicating the given Lease.</p>\r\n<p></p>"
  syntax:
    content: public CompleteLease(CompleteLease source)
    parameters:
    - id: source
      type: com.microsoft.azure.eventprocessorhost.CompleteLease
      description: <p>Lease to clone. </p>
- uid: com.microsoft.azure.eventprocessorhost.CompleteLease.CompleteLease(String)
  id: CompleteLease(String)
  parent: com.microsoft.azure.eventprocessorhost.CompleteLease
  href: com.microsoft.azure.eventprocessorhost.CompleteLease.yml
  langs:
  - java
  name: CompleteLease(String partitionId)
  nameWithType: CompleteLease.CompleteLease(String partitionId)
  fullName: com.microsoft.azure.eventprocessorhost.CompleteLease.CompleteLease(String partitionId)
  overload: com.microsoft.azure.eventprocessorhost.CompleteLease.CompleteLease*
  type: Constructor
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/CompleteLease.java
    startLine: 34
  package: com.microsoft.azure.eventprocessorhost
  summary: "<p>Create a CompleteLease for the given partition.</p>\r\n<p></p>"
  syntax:
    content: public CompleteLease(String partitionId)
    parameters:
    - id: partitionId
      type: "26831127"
      description: <p>Partition id for this lease. </p>
- uid: com.microsoft.azure.eventprocessorhost.CompleteLease.epoch
  id: epoch
  parent: com.microsoft.azure.eventprocessorhost.CompleteLease
  href: com.microsoft.azure.eventprocessorhost.CompleteLease.yml
  langs:
  - java
  name: epoch
  nameWithType: CompleteLease.epoch
  fullName: com.microsoft.azure.eventprocessorhost.CompleteLease.epoch
  type: Field
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/CompleteLease.java
    startLine: 20
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: protected long epoch= -1
    return:
      type: 0364520f
- uid: com.microsoft.azure.eventprocessorhost.CompleteLease.getEpoch()
  id: getEpoch()
  parent: com.microsoft.azure.eventprocessorhost.CompleteLease
  href: com.microsoft.azure.eventprocessorhost.CompleteLease.yml
  langs:
  - java
  name: getEpoch()
  nameWithType: CompleteLease.getEpoch()
  fullName: com.microsoft.azure.eventprocessorhost.CompleteLease.getEpoch()
  overload: com.microsoft.azure.eventprocessorhost.CompleteLease.getEpoch*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/CompleteLease.java
    startLine: 56
  package: com.microsoft.azure.eventprocessorhost
  summary: "<p>Epoch is a concept used by Event Hub receivers. If a receiver is created on a partition with a higher epoch than the existing receiver, the previous receiver is forcibly disconnected. Attempting to create a receiver with a lower epoch than the existing receiver will fail. The Lease carries the epoch around so that when a host instance steals a lease, it can create a receiver with a higher epoch.</p>\r\n<p></p>"
  syntax:
    content: public long getEpoch()
    return:
      type: 0364520f
      description: <p>the epoch of the current receiver </p>
- uid: com.microsoft.azure.eventprocessorhost.CompleteLease.incrementEpoch()
  id: incrementEpoch()
  parent: com.microsoft.azure.eventprocessorhost.CompleteLease
  href: com.microsoft.azure.eventprocessorhost.CompleteLease.yml
  langs:
  - java
  name: incrementEpoch()
  nameWithType: CompleteLease.incrementEpoch()
  fullName: com.microsoft.azure.eventprocessorhost.CompleteLease.incrementEpoch()
  overload: com.microsoft.azure.eventprocessorhost.CompleteLease.incrementEpoch*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/CompleteLease.java
    startLine: 75
  package: com.microsoft.azure.eventprocessorhost
  summary: "<p>The most common operation on the epoch value is incrementing it after stealing a lease. This convenience function replaces the get-increment-set that would otherwise be required.</p>\r\n<p></p>"
  syntax:
    content: public long incrementEpoch()
    return:
      type: 0364520f
      description: <p>The new value of the epoch. </p>
- uid: com.microsoft.azure.eventprocessorhost.CompleteLease.setEpoch(long)
  id: setEpoch(long)
  parent: com.microsoft.azure.eventprocessorhost.CompleteLease
  href: com.microsoft.azure.eventprocessorhost.CompleteLease.yml
  langs:
  - java
  name: setEpoch(long epoch)
  nameWithType: CompleteLease.setEpoch(long epoch)
  fullName: com.microsoft.azure.eventprocessorhost.CompleteLease.setEpoch(long epoch)
  overload: com.microsoft.azure.eventprocessorhost.CompleteLease.setEpoch*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/CompleteLease.java
    startLine: 65
  package: com.microsoft.azure.eventprocessorhost
  summary: "<p>Set the epoch value. Used to update the lease after creating a new receiver with a higher epoch.</p>\r\n<p></p>"
  syntax:
    content: public void setEpoch(long epoch)
    parameters:
    - id: epoch
      type: 0364520f
      description: <p>updated epoch value </p>
references:
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: com.microsoft.azure.eventprocessorhost.CompleteLease.CompleteLease*
  name: CompleteLease
  nameWithType: CompleteLease.CompleteLease
  fullName: com.microsoft.azure.eventprocessorhost.CompleteLease.CompleteLease
  package: com.microsoft.azure.eventprocessorhost
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.eventprocessorhost.CompleteLease.getEpoch*
  name: getEpoch
  nameWithType: CompleteLease.getEpoch
  fullName: com.microsoft.azure.eventprocessorhost.CompleteLease.getEpoch
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost.CompleteLease.setEpoch*
  name: setEpoch
  nameWithType: CompleteLease.setEpoch
  fullName: com.microsoft.azure.eventprocessorhost.CompleteLease.setEpoch
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost.CompleteLease.incrementEpoch*
  name: incrementEpoch
  nameWithType: CompleteLease.incrementEpoch
  fullName: com.microsoft.azure.eventprocessorhost.CompleteLease.incrementEpoch
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease()
  parent: com.microsoft.azure.eventprocessorhost.BaseLease
  href: com.microsoft.azure.eventprocessorhost.BaseLease.yml
  name: BaseLease()
  nameWithType: BaseLease.BaseLease()
  fullName: com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease()
  type: Constructor
  summary: "<p>Do not use; added only for GSon deserializer </p>"
  syntax:
    content: protected BaseLease()
- uid: com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease(String)
  parent: com.microsoft.azure.eventprocessorhost.BaseLease
  href: com.microsoft.azure.eventprocessorhost.BaseLease.yml
  name: BaseLease(String partitionId)
  nameWithType: BaseLease.BaseLease(String partitionId)
  fullName: com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease(String partitionId)
  type: Constructor
  summary: "<p>Create a BaseLease for the given partition.</p>\r\n<p></p>"
  syntax:
    content: public BaseLease(String partitionId)
    parameters:
    - id: partitionId
      type: "26831127"
      description: <p>Partition id for this lease. </p>
- uid: com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease(String,String,boolean)
  parent: com.microsoft.azure.eventprocessorhost.BaseLease
  href: com.microsoft.azure.eventprocessorhost.BaseLease.yml
  name: BaseLease(String partitionId, String owner, boolean isOwned)
  nameWithType: BaseLease.BaseLease(String partitionId, String owner, boolean isOwned)
  fullName: com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease(String partitionId, String owner, boolean isOwned)
  type: Constructor
  summary: "<p>Create and populate a BaseLease for the given partition.</p>\r\n<p></p>"
  syntax:
    content: public BaseLease(String partitionId, String owner, boolean isOwned)
    parameters:
    - id: partitionId
      type: "26831127"
      description: <p>Partition id for this lease. </p>
    - id: owner
      type: "26831127"
      description: <p>Current owner of this lease, or empty. </p>
    - id: isOwned
      type: 4fc6e284
      description: <p>True if the lease is owned, false if not. </p>
- uid: com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease(BaseLease)
  parent: com.microsoft.azure.eventprocessorhost.BaseLease
  href: com.microsoft.azure.eventprocessorhost.BaseLease.yml
  name: BaseLease(BaseLease source)
  nameWithType: BaseLease.BaseLease(BaseLease source)
  fullName: com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease(BaseLease source)
  type: Constructor
  summary: "<p>Create a BaseLease by duplicating the given Lease.</p>\r\n<p></p>"
  syntax:
    content: public BaseLease(BaseLease source)
    parameters:
    - id: source
      type: com.microsoft.azure.eventprocessorhost.BaseLease
      description: <p>BaseLease to clone. </p>
- uid: com.microsoft.azure.eventprocessorhost.BaseLease.compareTo(BaseLease)
  parent: com.microsoft.azure.eventprocessorhost.BaseLease
  href: com.microsoft.azure.eventprocessorhost.BaseLease.yml
  name: compareTo(BaseLease other)
  nameWithType: BaseLease.compareTo(BaseLease other)
  fullName: com.microsoft.azure.eventprocessorhost.BaseLease.compareTo(BaseLease other)
  type: Method
  syntax:
    content: public int compareTo(BaseLease other)
    parameters:
    - id: other
      type: com.microsoft.azure.eventprocessorhost.BaseLease
    return:
      type: f75371fa
- uid: com.microsoft.azure.eventprocessorhost.BaseLease.getIsOwned()
  parent: com.microsoft.azure.eventprocessorhost.BaseLease
  href: com.microsoft.azure.eventprocessorhost.BaseLease.yml
  name: getIsOwned()
  nameWithType: BaseLease.getIsOwned()
  fullName: com.microsoft.azure.eventprocessorhost.BaseLease.getIsOwned()
  type: Method
  summary: "<p>Get the owned state of the lease.</p>\r\n<p></p>"
  syntax:
    content: public boolean getIsOwned()
    return:
      type: 4fc6e284
      description: <p>true if the lease is owned, or false if it is not </p>
- uid: com.microsoft.azure.eventprocessorhost.BaseLease.getOwner()
  parent: com.microsoft.azure.eventprocessorhost.BaseLease
  href: com.microsoft.azure.eventprocessorhost.BaseLease.yml
  name: getOwner()
  nameWithType: BaseLease.getOwner()
  fullName: com.microsoft.azure.eventprocessorhost.BaseLease.getOwner()
  type: Method
  summary: "<p>The owner of a lease is the name of the EventProcessorHost instance which currently holds the lease.</p>\r\n<p></p>"
  syntax:
    content: public String getOwner()
    return:
      type: "26831127"
      description: <p>name of the owning instance </p>
- uid: com.microsoft.azure.eventprocessorhost.BaseLease.getPartitionId()
  parent: com.microsoft.azure.eventprocessorhost.BaseLease
  href: com.microsoft.azure.eventprocessorhost.BaseLease.yml
  name: getPartitionId()
  nameWithType: BaseLease.getPartitionId()
  fullName: com.microsoft.azure.eventprocessorhost.BaseLease.getPartitionId()
  type: Method
  summary: "<p>Returns the id of the partition that this Lease is for. Immutable so there is no corresponding setter.</p>\r\n<p></p>"
  syntax:
    content: public String getPartitionId()
    return:
      type: "26831127"
      description: <p>partition id </p>
- uid: com.microsoft.azure.eventprocessorhost.BaseLease.isOwnedBy(String)
  parent: com.microsoft.azure.eventprocessorhost.BaseLease
  href: com.microsoft.azure.eventprocessorhost.BaseLease.yml
  name: isOwnedBy(String possibleOwner)
  nameWithType: BaseLease.isOwnedBy(String possibleOwner)
  fullName: com.microsoft.azure.eventprocessorhost.BaseLease.isOwnedBy(String possibleOwner)
  type: Method
  summary: "<p>Convenience function for comparing possibleOwner against this.owner</p>\r\n<p></p>"
  syntax:
    content: public boolean isOwnedBy(String possibleOwner)
    parameters:
    - id: possibleOwner
      type: "26831127"
      description: <p>name to check </p>
    return:
      type: 4fc6e284
      description: <p>true if possibleOwner is the same as this.owner, false otherwise </p>
- uid: com.microsoft.azure.eventprocessorhost.BaseLease.setIsOwned(boolean)
  parent: com.microsoft.azure.eventprocessorhost.BaseLease
  href: com.microsoft.azure.eventprocessorhost.BaseLease.yml
  name: setIsOwned(boolean newState)
  nameWithType: BaseLease.setIsOwned(boolean newState)
  fullName: com.microsoft.azure.eventprocessorhost.BaseLease.setIsOwned(boolean newState)
  type: Method
  summary: "<p>Set the owned state of the lease.</p>\r\n<p></p>"
  syntax:
    content: public void setIsOwned(boolean newState)
    parameters:
    - id: newState
      type: 4fc6e284
      description: <p>true if the lease is owned, or false if it is not </p>
- uid: com.microsoft.azure.eventprocessorhost.BaseLease.setOwner(String)
  parent: com.microsoft.azure.eventprocessorhost.BaseLease
  href: com.microsoft.azure.eventprocessorhost.BaseLease.yml
  name: setOwner(String owner)
  nameWithType: BaseLease.setOwner(String owner)
  fullName: com.microsoft.azure.eventprocessorhost.BaseLease.setOwner(String owner)
  type: Method
  summary: "<p>Set the owner string. Used when a host steals a lease.</p>\r\n<p></p>"
  syntax:
    content: public void setOwner(String owner)
    parameters:
    - id: owner
      type: "26831127"
      description: <p>name of the new owning instance </p>
- uid: com.microsoft.azure.eventprocessorhost.BaseLease
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost.BaseLease.yml
  name: BaseLease
  nameWithType: BaseLease
  fullName: com.microsoft.azure.eventprocessorhost.BaseLease
  type: Class
  summary: "<p>BaseLease class is public so that advanced users can implement an ILeaseManager. Unless you are implementing ILeaseManager you should not have to deal with objects of this class or derived classes directly. </p>\r\n<p>This lightweight base exists to allow ILeaseManager.getAllLeases to operate as quickly as possible <ndash></ndash> for some lease manager implementations, loading the entire contents of a lease form the store may be expensive. BaseLease contains only the minimum amount of information required to allow PartitionScanner to operate. </p>\r\n<p>Note that a Lease object just carries information about a partition lease. The APIs to acquire/renew/release a lease are all on ILeaseManager. </p>"
  syntax:
    content: public class BaseLease
- uid: com.microsoft.azure.eventprocessorhost.AzureBlobLease
- uid: com.microsoft.azure.eventprocessorhost.CompleteLease
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost.CompleteLease.yml
  name: CompleteLease
  nameWithType: CompleteLease
  fullName: com.microsoft.azure.eventprocessorhost.CompleteLease
  type: Class
  summary: "<p>CompleteLease class is public so that advanced users can implement an ILeaseManager. Unless you are implementing ILeaseManager you should not have to deal with objects of this class or derived classes directly. </p>\r\n<p>CompleteLease carries around complete information about a lease. By itself, it has the epoch. Any lease manager implementation can derive from this class to add data which the lease manager needs to function <ndash></ndash> see AzureBlobLease for an example. Having two distinct classes allows the code to clearly express which variety of lease any variable holds or a method requires, and avoids the problem of accidentally supplying a lightweight BaseLease to a method which needs the lease-manager-specific fields. </p>"
  syntax: *o1
