### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.createOrUpdate(String resourceGroupName, String accountName, String firewallRuleName, FirewallRule parameters)
  name: createOrUpdate(String resourceGroupName, String accountName, String firewallRuleName, FirewallRule parameters)
  nameWithType: FirewallRules.createOrUpdate(String resourceGroupName, String accountName, String firewallRuleName, FirewallRule parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to add or replace the firewall rule. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the firewall rule to create or update. </p>
    name: firewallRuleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to create or update the firewall rule. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the FirewallRule object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates or updates the specified firewall rule. During update, the firewall rule with the specified name will be replaced with this new firewall rule.</p>

    <p></p>
  syntax: public FirewallRule createOrUpdate(String resourceGroupName, String accountName, String firewallRuleName, FirewallRule parameters)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.createOrUpdate(String,String,String,FirewallRule)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.createOrUpdateAsync(String resourceGroupName, String accountName, String firewallRuleName, FirewallRule parameters)
  name: createOrUpdateAsync(String resourceGroupName, String accountName, String firewallRuleName, FirewallRule parameters)
  nameWithType: FirewallRules.createOrUpdateAsync(String resourceGroupName, String accountName, String firewallRuleName, FirewallRule parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to add or replace the firewall rule. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the firewall rule to create or update. </p>
    name: firewallRuleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to create or update the firewall rule. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the FirewallRule object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates or updates the specified firewall rule. During update, the firewall rule with the specified name will be replaced with this new firewall rule.</p>

    <p></p>
  syntax: public Observable<FirewallRule> createOrUpdateAsync(String resourceGroupName, String accountName, String firewallRuleName, FirewallRule parameters)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.createOrUpdateAsync(String,String,String,FirewallRule)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.createOrUpdateAsync(String resourceGroupName, String accountName, String firewallRuleName, FirewallRule parameters, final ServiceCallback<FirewallRule> serviceCallback)
  name: createOrUpdateAsync(String resourceGroupName, String accountName, String firewallRuleName, FirewallRule parameters, final ServiceCallback<FirewallRule> serviceCallback)
  nameWithType: FirewallRules.createOrUpdateAsync(String resourceGroupName, String accountName, String firewallRuleName, FirewallRule parameters, final ServiceCallback<FirewallRule> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to add or replace the firewall rule. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the firewall rule to create or update. </p>
    name: firewallRuleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to create or update the firewall rule. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates or updates the specified firewall rule. During update, the firewall rule with the specified name will be replaced with this new firewall rule.</p>

    <p></p>
  syntax: public ServiceFuture<FirewallRule> createOrUpdateAsync(String resourceGroupName, String accountName, String firewallRuleName, FirewallRule parameters, final ServiceCallback<FirewallRule> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.createOrUpdateAsync(String,String,String,FirewallRule,final ServiceCallback<FirewallRule>)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.createOrUpdateWithServiceResponseAsync(String resourceGroupName, String accountName, String firewallRuleName, FirewallRule parameters)
  name: createOrUpdateWithServiceResponseAsync(String resourceGroupName, String accountName, String firewallRuleName, FirewallRule parameters)
  nameWithType: FirewallRules.createOrUpdateWithServiceResponseAsync(String resourceGroupName, String accountName, String firewallRuleName, FirewallRule parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to add or replace the firewall rule. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the firewall rule to create or update. </p>
    name: firewallRuleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to create or update the firewall rule. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the FirewallRule object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Creates or updates the specified firewall rule. During update, the firewall rule with the specified name will be replaced with this new firewall rule.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<FirewallRule>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String accountName, String firewallRuleName, FirewallRule parameters)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.createOrUpdateWithServiceResponseAsync(String,String,String,FirewallRule)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.delete(String resourceGroupName, String accountName, String firewallRuleName)
  name: delete(String resourceGroupName, String accountName, String firewallRuleName)
  nameWithType: FirewallRules.delete(String resourceGroupName, String accountName, String firewallRuleName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to delete the firewall rule. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the firewall rule to delete. </p>
    name: firewallRuleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes the specified firewall rule from the specified Data Lake Store account.</p>

    <p></p>
  syntax: public void delete(String resourceGroupName, String accountName, String firewallRuleName)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.delete(String,String,String)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.deleteAsync(String resourceGroupName, String accountName, String firewallRuleName)
  name: deleteAsync(String resourceGroupName, String accountName, String firewallRuleName)
  nameWithType: FirewallRules.deleteAsync(String resourceGroupName, String accountName, String firewallRuleName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to delete the firewall rule. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the firewall rule to delete. </p>
    name: firewallRuleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified firewall rule from the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String resourceGroupName, String accountName, String firewallRuleName)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.deleteAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.deleteAsync(String resourceGroupName, String accountName, String firewallRuleName, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String resourceGroupName, String accountName, String firewallRuleName, final ServiceCallback<Void> serviceCallback)
  nameWithType: FirewallRules.deleteAsync(String resourceGroupName, String accountName, String firewallRuleName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to delete the firewall rule. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the firewall rule to delete. </p>
    name: firewallRuleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified firewall rule from the specified Data Lake Store account.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String resourceGroupName, String accountName, String firewallRuleName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.deleteAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String firewallRuleName)
  name: deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String firewallRuleName)
  nameWithType: FirewallRules.deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String firewallRuleName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to delete the firewall rule. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the firewall rule to delete. </p>
    name: firewallRuleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified firewall rule from the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String firewallRuleName)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.deleteWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.get(String resourceGroupName, String accountName, String firewallRuleName)
  name: get(String resourceGroupName, String accountName, String firewallRuleName)
  nameWithType: FirewallRules.get(String resourceGroupName, String accountName, String firewallRuleName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to get the firewall rule. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the firewall rule to retrieve. </p>
    name: firewallRuleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the FirewallRule object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the specified Data Lake Store firewall rule.</p>

    <p></p>
  syntax: public FirewallRule get(String resourceGroupName, String accountName, String firewallRuleName)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.get(String,String,String)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.getAsync(String resourceGroupName, String accountName, String firewallRuleName)
  name: getAsync(String resourceGroupName, String accountName, String firewallRuleName)
  nameWithType: FirewallRules.getAsync(String resourceGroupName, String accountName, String firewallRuleName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to get the firewall rule. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the firewall rule to retrieve. </p>
    name: firewallRuleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the FirewallRule object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the specified Data Lake Store firewall rule.</p>

    <p></p>
  syntax: public Observable<FirewallRule> getAsync(String resourceGroupName, String accountName, String firewallRuleName)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.getAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.getAsync(String resourceGroupName, String accountName, String firewallRuleName, final ServiceCallback<FirewallRule> serviceCallback)
  name: getAsync(String resourceGroupName, String accountName, String firewallRuleName, final ServiceCallback<FirewallRule> serviceCallback)
  nameWithType: FirewallRules.getAsync(String resourceGroupName, String accountName, String firewallRuleName, final ServiceCallback<FirewallRule> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to get the firewall rule. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the firewall rule to retrieve. </p>
    name: firewallRuleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the specified Data Lake Store firewall rule.</p>

    <p></p>
  syntax: public ServiceFuture<FirewallRule> getAsync(String resourceGroupName, String accountName, String firewallRuleName, final ServiceCallback<FirewallRule> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.getAsync(String,String,String,final ServiceCallback<FirewallRule>)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.getWithServiceResponseAsync(String resourceGroupName, String accountName, String firewallRuleName)
  name: getWithServiceResponseAsync(String resourceGroupName, String accountName, String firewallRuleName)
  nameWithType: FirewallRules.getWithServiceResponseAsync(String resourceGroupName, String accountName, String firewallRuleName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to get the firewall rule. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the firewall rule to retrieve. </p>
    name: firewallRuleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the FirewallRule object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the specified Data Lake Store firewall rule.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<FirewallRule>> getWithServiceResponseAsync(String resourceGroupName, String accountName, String firewallRuleName)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.getWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.listByAccount(final String resourceGroupName, final String accountName)
  name: listByAccount(final String resourceGroupName, final String accountName)
  nameWithType: FirewallRules.listByAccount(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to get the firewall rules. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;FirewallRule&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the Data Lake Store firewall rules within the specified Data Lake Store account.</p>

    <p></p>
  syntax: public PagedList<FirewallRule> listByAccount(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.listByAccount(final String,final String)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.listByAccountAsync(final String resourceGroupName, final String accountName)
  name: listByAccountAsync(final String resourceGroupName, final String accountName)
  nameWithType: FirewallRules.listByAccountAsync(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to get the firewall rules. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;FirewallRule&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store firewall rules within the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<Page<FirewallRule>> listByAccountAsync(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.listByAccountAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.listByAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<FirewallRule> serviceCallback)
  name: listByAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<FirewallRule> serviceCallback)
  nameWithType: FirewallRules.listByAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<FirewallRule> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to get the firewall rules. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store firewall rules within the specified Data Lake Store account.</p>

    <p></p>
  syntax: public ServiceFuture<List<FirewallRule>> listByAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<FirewallRule> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.listByAccountAsync(final String,final String,final ListOperationCallback<FirewallRule>)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.listByAccountNext(final String nextPageLink)
  name: listByAccountNext(final String nextPageLink)
  nameWithType: FirewallRules.listByAccountNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;FirewallRule&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the Data Lake Store firewall rules within the specified Data Lake Store account.</p>

    <p></p>
  syntax: public PagedList<FirewallRule> listByAccountNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.listByAccountNext(final String)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.listByAccountNextAsync(final String nextPageLink)
  name: listByAccountNextAsync(final String nextPageLink)
  nameWithType: FirewallRules.listByAccountNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;FirewallRule&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store firewall rules within the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<Page<FirewallRule>> listByAccountNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.listByAccountNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.listByAccountNextAsync(final String nextPageLink, final ServiceFuture<List<FirewallRule>> serviceFuture, final ListOperationCallback<FirewallRule> serviceCallback)
  name: listByAccountNextAsync(final String nextPageLink, final ServiceFuture<List<FirewallRule>> serviceFuture, final ListOperationCallback<FirewallRule> serviceCallback)
  nameWithType: FirewallRules.listByAccountNextAsync(final String nextPageLink, final ServiceFuture<List<FirewallRule>> serviceFuture, final ListOperationCallback<FirewallRule> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store firewall rules within the specified Data Lake Store account.</p>

    <p></p>
  syntax: public ServiceFuture<List<FirewallRule>> listByAccountNextAsync(final String nextPageLink, final ServiceFuture<List<FirewallRule>> serviceFuture, final ListOperationCallback<FirewallRule> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.listByAccountNextAsync(final String,final ServiceFuture<List<FirewallRule>>,final ListOperationCallback<FirewallRule>)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.listByAccountNextWithServiceResponseAsync(final String nextPageLink)
  name: listByAccountNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: FirewallRules.listByAccountNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;FirewallRule&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store firewall rules within the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<FirewallRule>>> listByAccountNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.listByAccountNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  name: listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  nameWithType: FirewallRules.listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to get the firewall rules. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;FirewallRule&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store firewall rules within the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<FirewallRule>>> listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.listByAccountWithServiceResponseAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.update(String resourceGroupName, String accountName, String firewallRuleName)
  name: update(String resourceGroupName, String accountName, String firewallRuleName)
  nameWithType: FirewallRules.update(String resourceGroupName, String accountName, String firewallRuleName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to which to update the firewall rule. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the firewall rule to update. </p>
    name: firewallRuleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the FirewallRule object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the specified firewall rule.</p>

    <p></p>
  syntax: public FirewallRule update(String resourceGroupName, String accountName, String firewallRuleName)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.update(String,String,String)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.update(String resourceGroupName, String accountName, String firewallRuleName, UpdateFirewallRuleParameters parameters)
  name: update(String resourceGroupName, String accountName, String firewallRuleName, UpdateFirewallRuleParameters parameters)
  nameWithType: FirewallRules.update(String resourceGroupName, String accountName, String firewallRuleName, UpdateFirewallRuleParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to which to update the firewall rule. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the firewall rule to update. </p>
    name: firewallRuleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the firewall rule. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.UpdateFirewallRuleParameters?alt=com.microsoft.azure.management.datalake.store.models.UpdateFirewallRuleParameters&text=UpdateFirewallRuleParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the FirewallRule object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the specified firewall rule.</p>

    <p></p>
  syntax: public FirewallRule update(String resourceGroupName, String accountName, String firewallRuleName, UpdateFirewallRuleParameters parameters)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.update(String,String,String,UpdateFirewallRuleParameters)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.updateAsync(String resourceGroupName, String accountName, String firewallRuleName)
  name: updateAsync(String resourceGroupName, String accountName, String firewallRuleName)
  nameWithType: FirewallRules.updateAsync(String resourceGroupName, String accountName, String firewallRuleName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to which to update the firewall rule. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the firewall rule to update. </p>
    name: firewallRuleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the FirewallRule object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the specified firewall rule.</p>

    <p></p>
  syntax: public Observable<FirewallRule> updateAsync(String resourceGroupName, String accountName, String firewallRuleName)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.updateAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.updateAsync(String resourceGroupName, String accountName, String firewallRuleName, final ServiceCallback<FirewallRule> serviceCallback)
  name: updateAsync(String resourceGroupName, String accountName, String firewallRuleName, final ServiceCallback<FirewallRule> serviceCallback)
  nameWithType: FirewallRules.updateAsync(String resourceGroupName, String accountName, String firewallRuleName, final ServiceCallback<FirewallRule> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to which to update the firewall rule. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the firewall rule to update. </p>
    name: firewallRuleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the specified firewall rule.</p>

    <p></p>
  syntax: public ServiceFuture<FirewallRule> updateAsync(String resourceGroupName, String accountName, String firewallRuleName, final ServiceCallback<FirewallRule> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.updateAsync(String,String,String,final ServiceCallback<FirewallRule>)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.updateAsync(String resourceGroupName, String accountName, String firewallRuleName, UpdateFirewallRuleParameters parameters)
  name: updateAsync(String resourceGroupName, String accountName, String firewallRuleName, UpdateFirewallRuleParameters parameters)
  nameWithType: FirewallRules.updateAsync(String resourceGroupName, String accountName, String firewallRuleName, UpdateFirewallRuleParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to which to update the firewall rule. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the firewall rule to update. </p>
    name: firewallRuleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the firewall rule. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.UpdateFirewallRuleParameters?alt=com.microsoft.azure.management.datalake.store.models.UpdateFirewallRuleParameters&text=UpdateFirewallRuleParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the FirewallRule object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the specified firewall rule.</p>

    <p></p>
  syntax: public Observable<FirewallRule> updateAsync(String resourceGroupName, String accountName, String firewallRuleName, UpdateFirewallRuleParameters parameters)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.updateAsync(String,String,String,UpdateFirewallRuleParameters)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.updateAsync(String resourceGroupName, String accountName, String firewallRuleName, UpdateFirewallRuleParameters parameters, final ServiceCallback<FirewallRule> serviceCallback)
  name: updateAsync(String resourceGroupName, String accountName, String firewallRuleName, UpdateFirewallRuleParameters parameters, final ServiceCallback<FirewallRule> serviceCallback)
  nameWithType: FirewallRules.updateAsync(String resourceGroupName, String accountName, String firewallRuleName, UpdateFirewallRuleParameters parameters, final ServiceCallback<FirewallRule> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to which to update the firewall rule. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the firewall rule to update. </p>
    name: firewallRuleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the firewall rule. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.UpdateFirewallRuleParameters?alt=com.microsoft.azure.management.datalake.store.models.UpdateFirewallRuleParameters&text=UpdateFirewallRuleParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the specified firewall rule.</p>

    <p></p>
  syntax: public ServiceFuture<FirewallRule> updateAsync(String resourceGroupName, String accountName, String firewallRuleName, UpdateFirewallRuleParameters parameters, final ServiceCallback<FirewallRule> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.updateAsync(String,String,String,UpdateFirewallRuleParameters,final ServiceCallback<FirewallRule>)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String firewallRuleName)
  name: updateWithServiceResponseAsync(String resourceGroupName, String accountName, String firewallRuleName)
  nameWithType: FirewallRules.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String firewallRuleName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to which to update the firewall rule. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the firewall rule to update. </p>
    name: firewallRuleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the FirewallRule object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the specified firewall rule.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<FirewallRule>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, String firewallRuleName)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.updateWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.store.FirewallRules.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String firewallRuleName, UpdateFirewallRuleParameters parameters)
  name: updateWithServiceResponseAsync(String resourceGroupName, String accountName, String firewallRuleName, UpdateFirewallRuleParameters parameters)
  nameWithType: FirewallRules.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String firewallRuleName, UpdateFirewallRuleParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to which to update the firewall rule. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the firewall rule to update. </p>
    name: firewallRuleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the firewall rule. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.UpdateFirewallRuleParameters?alt=com.microsoft.azure.management.datalake.store.models.UpdateFirewallRuleParameters&text=UpdateFirewallRuleParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the FirewallRule object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.store.models.FirewallRule?alt=com.microsoft.azure.management.datalake.store.models.FirewallRule&text=FirewallRule" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the specified firewall rule.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<FirewallRule>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, String firewallRuleName, UpdateFirewallRuleParameters parameters)
  uid: com.microsoft.azure.management.datalake.store.FirewallRules.updateWithServiceResponseAsync(String,String,String,UpdateFirewallRuleParameters)
nameWithType: FirewallRules
syntax: public interface FirewallRules
type: interface
uid: com.microsoft.azure.management.datalake.store.FirewallRules
fullName: com.microsoft.azure.management.datalake.store.FirewallRules
name: FirewallRules
package: com.microsoft.azure.management.datalake.store
summary: <p>An instance of this class provides access to all the operations defined in FirewallRules. </p>
metadata: {}
