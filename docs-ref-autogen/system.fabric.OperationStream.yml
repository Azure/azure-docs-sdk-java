### YamlMime:ManagedReference
items:
- uid: system.fabric.OperationStream
  id: OperationStream
  parent: system.fabric
  children:
  - system.fabric.OperationStream.getOperationAsync(CancellationToken)
  href: system.fabric.OperationStream.yml
  langs:
  - java
  name: OperationStream
  nameWithType: OperationStream
  fullName: system.fabric.OperationStream
  type: Interface
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/OperationStream.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/OperationStream.java
    startLine: 14
  package: system.fabric
  summary: "<p>Represents a stream of replication or copy operations that are sent from the Primary to the Secondary replica. </p>\r\n<p>\r\n  <b> Remarks:</b> The streams returned from <xref uid=\"system.fabric.StateReplicator.getCopyStream()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateReplicator#getCopyStream()\"></xref> and <xref uid=\"system.fabric.StateReplicator.getReplicationStream()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateReplicator#getReplicationStream()\"></xref> are objects that implement <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.OperationStream\"></xref>. </p>"
  syntax:
    content: public interface OperationStream
- uid: system.fabric.OperationStream.getOperationAsync(CancellationToken)
  id: getOperationAsync(CancellationToken)
  parent: system.fabric.OperationStream
  href: system.fabric.OperationStream.yml
  langs:
  - java
  name: getOperationAsync(CancellationToken cancellationToken)
  nameWithType: OperationStream.getOperationAsync(CancellationToken cancellationToken)
  fullName: system.fabric.OperationStream.getOperationAsync(CancellationToken cancellationToken)
  overload: system.fabric.OperationStream.getOperationAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/OperationStream.java
    startLine: 25
  package: system.fabric
  summary: "<p>Gets the next object that implements <xref uid=\"system.fabric.Operation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref> from the underlying <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.OperationStream\"></xref>. </p>"
  syntax:
    content: public CompletableFuture<Operation> getOperationAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: <p>The <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    return:
      type: 9cdf14d0system.fabric.Operationa08ddfce
      description: <p>Returns <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.util.concurrent.CompletableFuture"></xref> of type <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
references:
- uid: 9cdf14d0system.fabric.Operationa08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: system.fabric.Operation
    name: Operation
    fullName: system.fabric.Operation
    href: system.fabric.Operation.yml
  - name: '>'
    fullName: '>'
- uid: system.fabric.OperationStream.getOperationAsync*
  name: getOperationAsync
  nameWithType: OperationStream.getOperationAsync
  fullName: system.fabric.OperationStream.getOperationAsync
  package: system.fabric
- uid: system.fabric.OperationStream2
  parent: system.fabric
  href: system.fabric.OperationStream2.yml
  name: OperationStream2
  nameWithType: OperationStream2
  fullName: system.fabric.OperationStream2
  type: Interface
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public interface OperationStream2
- uid: system.fabric.Operation
  parent: system.fabric
  href: system.fabric.Operation.yml
  name: Operation
  nameWithType: Operation
  fullName: system.fabric.Operation
  type: Interface
  summary: "<p>\r\n  <b>Remarks:</b>\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref> is the base interface that describes state changes that are delivered to a Secondary replica. They contain the <xref uid=\"system.fabric.StateReplicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateReplicator#replicateAsync(OperationData, SequenceNumber, system.fabric.CancellationToken)\"></xref> and the sequence number and other identifying information. </p>"
  syntax:
    content: public interface Operation
- uid: system.fabric.CancellationToken
  parent: system.fabric
  href: system.fabric.CancellationToken.yml
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: system.fabric.CancellationToken
  type: Class
  summary: "<p>A CancellationToken is used to propagate notification that operations should be canceled. You create a cancellation token by instantiating a <xref uid=\"system.fabric.CancellationTokenSource\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.CancellationTokenSource\"></xref> object, which manages cancellation tokens retrieved from its <xref uid=\"system.fabric.CancellationTokenSource.getToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.CancellationTokenSource#getToken()\"></xref> method. You then pass the cancellation token to any number of operations that should receive notice of cancellation. The token cannot be used to initiate cancellation. When the owning object calls <xref uid=\"system.fabric.CancellationTokenSource.cancel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.CancellationTokenSource#cancel()\"></xref>, the cancelled property on the cancellation token is set to true. The objects that receive the notification can respond in whatever manner is appropriate. </p>"
  syntax:
    content: public class CancellationToken
- uid: system.fabric.StateReplicator.getCopyStream()
  parent: system.fabric.StateReplicator
  href: system.fabric.StateReplicator.yml
  name: getCopyStream()
  nameWithType: StateReplicator.getCopyStream()
  fullName: system.fabric.StateReplicator.getCopyStream()
  type: Method
  summary: "<p>Gets copy stream </p>"
  syntax:
    content: public OperationStream getCopyStream()
    return:
      type: system.fabric.OperationStream
      description: <p>The returned CopyStream contains <xref uid="system.fabric.OperationData" data-throw-if-not-resolved="false" data-raw-source="OperationData"></xref> objects that implement <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="Operation"></xref>. The <xref uid="system.fabric.OperationData" data-throw-if-not-resolved="false" data-raw-source="OperationData"></xref> objects are obtained from the CopyState <xref uid="system.fabric.OperationDataStream" data-throw-if-not-resolved="false" data-raw-source="OperationDataStream"></xref> that the Primary replica returns from <xref uid="system.fabric.StateProvider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false" data-raw-source="StateProvider#getCopyState(SequenceNumber, OperationDataStream)"></xref>. When a replica is created and has to catch up, it should obtain the CopyStream and begin to send, apply, and acknowledge the Copy objects that implement <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="Operation"></xref>. In parallel, the replica responds to the corresponding <xref uid="system.fabric.StateProvider.getCopyContext()" data-throw-if-not-resolved="false" data-raw-source="StateProvider#getCopyContext()"></xref> and <xref uid="system.fabric.OperationDataStream.getNextAsync(CancellationToken)" data-throw-if-not-resolved="false" data-raw-source="OperationDataStream#getNextAsync(CancellationToken)"></xref>calls. The stream is empty when the returned <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="Operation"></xref> method is null. </p>
- uid: system.fabric.StateReplicator.getReplicationStream()
  parent: system.fabric.StateReplicator
  href: system.fabric.StateReplicator.yml
  name: getReplicationStream()
  nameWithType: StateReplicator.getReplicationStream()
  fullName: system.fabric.StateReplicator.getReplicationStream()
  type: Method
  summary: "<p>Gets replication stream. </p>"
  syntax:
    content: public OperationStream getReplicationStream()
    return:
      type: system.fabric.OperationStream
      description: <p>The ReplicationStream implements <xref uid="system.fabric.OperationStream" data-throw-if-not-resolved="false" data-raw-source="OperationStream"></xref>. The ReplicationStream contains <xref uid="system.fabric.OperationData" data-throw-if-not-resolved="false" data-raw-source="OperationData"></xref> objects that implement <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="Operation"></xref>. The objects are provided by the Primary replica via <xref uid="system.fabric.StateReplicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false" data-raw-source="StateReplicator#replicateAsync(OperationData, SequenceNumber, CancellationToken)"></xref>. Generally a Secondary replica should send <xref uid="system.fabric.OperationStream.getOperationAsync(CancellationToken)" data-throw-if-not-resolved="false" data-raw-source="OperationStream#getOperationAsync(CancellationToken)"></xref>. Although Service Fabric does not require services to do so, generally services should transfer all <xref uid="system.fabric.OperationData" data-throw-if-not-resolved="false" data-raw-source="OperationData"></xref> objects out of the copy stream first, and then transfer operations out of the replication stream. The transfer from both copies in parallel is supported but increases the complexity of applying state updates correctly and is recommended only for advanced services. The stream is empty when the returned <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="Operation"></xref> method is null. </p>
