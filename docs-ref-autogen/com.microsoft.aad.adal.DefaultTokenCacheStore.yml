### YamlMime:JavaType
constructors:
- fullName: com.microsoft.aad.adal.DefaultTokenCacheStore.DefaultTokenCacheStore(Context context)
  name: DefaultTokenCacheStore(Context context)
  nameWithType: DefaultTokenCacheStore.DefaultTokenCacheStore(Context context)
  parameters:
  - description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref>

      </p>
    name: context
    type: <xref href="Context?alt=Context&text=Context" data-throw-if-not-resolved="False"/>
  syntax: public DefaultTokenCacheStore(Context context)
  uid: com.microsoft.aad.adal.DefaultTokenCacheStore.DefaultTokenCacheStore(Context)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="Serializable" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.aad.adal.ITokenCacheStore?alt=com.microsoft.aad.adal.ITokenCacheStore&text=ITokenCacheStore" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.aad.adal.DefaultTokenCacheStore.clearTokensForUser(String userId)
  name: clearTokensForUser(String userId)
  nameWithType: DefaultTokenCacheStore.clearTokensForUser(String userId)
  overridden: com.microsoft.aad.adal.ITokenStoreQuery.clearTokensForUser(String)
  parameters:
  - description: <p>UserId </p>
    name: userId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Clear tokens for user without additional retry.</p>

    <p></p>
  syntax: public void clearTokensForUser(String userId)
  uid: com.microsoft.aad.adal.DefaultTokenCacheStore.clearTokensForUser(String)
- fullName: com.microsoft.aad.adal.DefaultTokenCacheStore.contains(String key)
  name: contains(String key)
  nameWithType: DefaultTokenCacheStore.contains(String key)
  overridden: com.microsoft.aad.adal.ITokenCacheStore.contains(String)
  parameters:
  - description: >-
      <p>

        <xref uid="com.microsoft.aad.adal.CacheKey" data-throw-if-not-resolved="false" data-raw-source="CacheKey"></xref>

      </p>
    name: key
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>true if it exists </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks if cache key exists.</p>

    <p></p>
  syntax: public boolean contains(String key)
  uid: com.microsoft.aad.adal.DefaultTokenCacheStore.contains(String)
- fullName: com.microsoft.aad.adal.DefaultTokenCacheStore.getAll()
  name: getAll()
  nameWithType: DefaultTokenCacheStore.getAll()
  overridden: com.microsoft.aad.adal.ITokenCacheStore.getAll()
  returns:
    description: <p>TokenCacheItem list iterator </p>
    type: Iterator&lt;<xref href="com.microsoft.aad.adal.TokenCacheItem?alt=com.microsoft.aad.adal.TokenCacheItem&text=TokenCacheItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>User can query over iterator values.</p>

    <p></p>
  syntax: public Iterator<TokenCacheItem> getAll()
  uid: com.microsoft.aad.adal.DefaultTokenCacheStore.getAll()
- fullName: com.microsoft.aad.adal.DefaultTokenCacheStore.getItem(String key)
  name: getItem(String key)
  nameWithType: DefaultTokenCacheStore.getItem(String key)
  overridden: com.microsoft.aad.adal.ITokenCacheStore.getItem(String)
  parameters:
  - description: >-
      <p>

        <xref uid="com.microsoft.aad.adal.CacheKey" data-throw-if-not-resolved="false" data-raw-source="CacheKey"></xref>

      </p>
    name: key
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Token cache item </p>
    type: <xref href="com.microsoft.aad.adal.TokenCacheItem?alt=com.microsoft.aad.adal.TokenCacheItem&text=TokenCacheItem" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get cache item.</p>

    <p></p>
  syntax: public TokenCacheItem getItem(String key)
  uid: com.microsoft.aad.adal.DefaultTokenCacheStore.getItem(String)
- fullName: com.microsoft.aad.adal.DefaultTokenCacheStore.getStorageHelper()
  name: getStorageHelper()
  nameWithType: DefaultTokenCacheStore.getStorageHelper()
  returns:
    type: <xref href="com.microsoft.aad.adal.StorageHelper?alt=com.microsoft.aad.adal.StorageHelper&text=StorageHelper" data-throw-if-not-resolved="False"/>
  summary: <p>Method that allows to mock StorageHelper class and use custom encryption in UTs. </p>
  syntax: protected StorageHelper getStorageHelper()
  uid: com.microsoft.aad.adal.DefaultTokenCacheStore.getStorageHelper()
- fullName: com.microsoft.aad.adal.DefaultTokenCacheStore.getTokensAboutToExpire()
  name: getTokensAboutToExpire()
  nameWithType: DefaultTokenCacheStore.getTokensAboutToExpire()
  overridden: com.microsoft.aad.adal.ITokenStoreQuery.getTokensAboutToExpire()
  returns:
    description: <p>list of <xref uid="com.microsoft.aad.adal.TokenCacheItem" data-throw-if-not-resolved="false" data-raw-source="TokenCacheItem"></xref></p>
    type: List&lt;<xref href="com.microsoft.aad.adal.TokenCacheItem?alt=com.microsoft.aad.adal.TokenCacheItem&text=TokenCacheItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get tokens about to expire.</p>

    <p></p>
  syntax: public List<TokenCacheItem> getTokensAboutToExpire()
  uid: com.microsoft.aad.adal.DefaultTokenCacheStore.getTokensAboutToExpire()
- fullName: com.microsoft.aad.adal.DefaultTokenCacheStore.getTokensForResource(String resource)
  name: getTokensForResource(String resource)
  nameWithType: DefaultTokenCacheStore.getTokensForResource(String resource)
  overridden: com.microsoft.aad.adal.ITokenStoreQuery.getTokensForResource(String)
  parameters:
  - description: <p>Resource identifier </p>
    name: resource
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>list of <xref uid="com.microsoft.aad.adal.TokenCacheItem" data-throw-if-not-resolved="false" data-raw-source="TokenCacheItem"></xref></p>
    type: List&lt;<xref href="com.microsoft.aad.adal.TokenCacheItem?alt=com.microsoft.aad.adal.TokenCacheItem&text=TokenCacheItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Tokens for resource.</p>

    <p></p>
  syntax: public List<TokenCacheItem> getTokensForResource(String resource)
  uid: com.microsoft.aad.adal.DefaultTokenCacheStore.getTokensForResource(String)
- fullName: com.microsoft.aad.adal.DefaultTokenCacheStore.getTokensForUser(String userId)
  name: getTokensForUser(String userId)
  nameWithType: DefaultTokenCacheStore.getTokensForUser(String userId)
  overridden: com.microsoft.aad.adal.ITokenStoreQuery.getTokensForUser(String)
  parameters:
  - description: <p>userId </p>
    name: userId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>list of <xref uid="com.microsoft.aad.adal.TokenCacheItem" data-throw-if-not-resolved="false" data-raw-source="TokenCacheItem"></xref></p>
    type: List&lt;<xref href="com.microsoft.aad.adal.TokenCacheItem?alt=com.microsoft.aad.adal.TokenCacheItem&text=TokenCacheItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get tokens for user.</p>

    <p></p>
  syntax: public List<TokenCacheItem> getTokensForUser(String userId)
  uid: com.microsoft.aad.adal.DefaultTokenCacheStore.getTokensForUser(String)
- fullName: com.microsoft.aad.adal.DefaultTokenCacheStore.getUniqueUsersWithTokenCache()
  name: getUniqueUsersWithTokenCache()
  nameWithType: DefaultTokenCacheStore.getUniqueUsersWithTokenCache()
  overridden: com.microsoft.aad.adal.ITokenStoreQuery.getUniqueUsersWithTokenCache()
  returns:
    description: <p>unique users </p>
    type: <xref href="Set%3CString%3E?alt=Set%3CString%3E&text=Set%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Unique users with tokens.</p>

    <p></p>
  syntax: public Set<String> getUniqueUsersWithTokenCache()
  uid: com.microsoft.aad.adal.DefaultTokenCacheStore.getUniqueUsersWithTokenCache()
- fullName: com.microsoft.aad.adal.DefaultTokenCacheStore.removeAll()
  name: removeAll()
  nameWithType: DefaultTokenCacheStore.removeAll()
  overridden: com.microsoft.aad.adal.ITokenCacheStore.removeAll()
  summary: <p>Removes all items from cache. </p>
  syntax: public void removeAll()
  uid: com.microsoft.aad.adal.DefaultTokenCacheStore.removeAll()
- fullName: com.microsoft.aad.adal.DefaultTokenCacheStore.removeItem(String key)
  name: removeItem(String key)
  nameWithType: DefaultTokenCacheStore.removeItem(String key)
  overridden: com.microsoft.aad.adal.ITokenCacheStore.removeItem(String)
  parameters:
  - description: >-
      <p>

        <xref uid="com.microsoft.aad.adal.CacheKey" data-throw-if-not-resolved="false" data-raw-source="CacheKey"></xref>

      </p>
    name: key
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes item with key.</p>

    <p></p>
  syntax: public void removeItem(String key)
  uid: com.microsoft.aad.adal.DefaultTokenCacheStore.removeItem(String)
- fullName: com.microsoft.aad.adal.DefaultTokenCacheStore.setItem(String key, TokenCacheItem item)
  name: setItem(String key, TokenCacheItem item)
  nameWithType: DefaultTokenCacheStore.setItem(String key, TokenCacheItem item)
  overridden: com.microsoft.aad.adal.ITokenCacheStore.setItem(String,TokenCacheItem)
  parameters:
  - description: >-
      <p>

        <xref uid="com.microsoft.aad.adal.CacheKey" data-throw-if-not-resolved="false" data-raw-source="CacheKey"></xref>

      </p>
    name: key
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Cache item </p>
    name: item
    type: <xref href="com.microsoft.aad.adal.TokenCacheItem?alt=com.microsoft.aad.adal.TokenCacheItem&text=TokenCacheItem" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets item.</p>

    <p></p>
  syntax: public void setItem(String key, TokenCacheItem item)
  uid: com.microsoft.aad.adal.DefaultTokenCacheStore.setItem(String,TokenCacheItem)
nameWithType: DefaultTokenCacheStore
syntax: public class DefaultTokenCacheStore implements ITokenCacheStore,ITokenStoreQuery
type: class
uid: com.microsoft.aad.adal.DefaultTokenCacheStore
fullName: com.microsoft.aad.adal.DefaultTokenCacheStore
name: DefaultTokenCacheStore
package: com.microsoft.aad.adal
summary: <p>Store/Retrieve TokenCacheItem from SharedPreferencesFileManager. SharedPreferencesFileManager saves items when it is committed in an atomic operation. </p>
metadata: {}
