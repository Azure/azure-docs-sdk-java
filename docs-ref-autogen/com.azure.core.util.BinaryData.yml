### YamlMime:JavaType
uid: "com.azure.core.util.BinaryData"
fullName: "com.azure.core.util.BinaryData"
name: "BinaryData"
nameWithType: "BinaryData"
summary: "BinaryData is a convenient data interchange class for use throughout the Azure SDK for Java. Put simply, BinaryData enables developers to bring data in from external sources, and read it back from Azure services, in formats that appeal to them. This leaves BinaryData, and the Azure SDK for Java, the task of converting this data into appropriate formats to be transferred to and from these external services. This enables developers to focus on their business logic, and enables the Azure SDK for Java to optimize operations for best performance.\n\nBinaryData in its simplest form can be thought of as a container for content. Often this content is already in-memory as a String, byte array, or an Object that can be serialized into a String or byte\\[\\]. When the BinaryData is about to be sent to an Azure Service, this in-memory content is copied into the network request and sent to the service.\n\nIn more performance critical scenarios, where copying data into memory results in increased memory pressure, it is possible to create a BinaryData instance from a stream of data. From this, BinaryData can be connected directly to the outgoing network connection so that the stream is read directly to the network, without needing to first be read into memory on the system. Similarly, it is possible to read a stream of data from a BinaryData returned from an Azure Service without it first being read into memory. In many situations, these streaming operations can drastically reduce the memory pressure in applications, and so it is encouraged that all developers very carefully consider their ability to use the most appropriate API in BinaryData whenever they encounter an client library that makes use of BinaryData.\n\nRefer to the documentation of each method in the BinaryData class to better understand its performance characteristics, and refer to the samples below to understand the common usage scenarios of this class.\n\n<xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> can be created from an <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref>, a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref>, a <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"String\"></xref>, an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref>, a <xref uid=\"java.nio.file.Path\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file\"></xref>, or a byte array.\n\n**A note on data mutability**\n\n<xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> does not copy data on construction. BinaryData keeps a reference to the source content and is accessed when a read request is made. So, any modifications to the underlying source before the content is read can result in undefined behavior.\n\nTo create an instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>, use the various static factory methods available. They all start with `'from'` prefix, for example <xref uid=\"com.azure.core.util.BinaryData.fromBytes(byte[])\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData#fromBytes(byte[])\"></xref>.\n\n**Create an instance from a byte array**\n\n```java\nfinal byte[] data = \"Some Data\".getBytes(StandardCharsets.UTF_8);\n BinaryData binaryData = BinaryData.fromBytes(data);\n System.out.println(new String(binaryData.toBytes(), StandardCharsets.UTF_8));\n```\n\n**Create an instance from a String**\n\n```java\nfinal String data = \"Some Data\";\n // Following will use default character set as StandardCharsets.UTF_8\n BinaryData binaryData = BinaryData.fromString(data);\n System.out.println(binaryData.toString());\n```\n\n**Create an instance from an InputStream**\n\n```java\nfinal ByteArrayInputStream inputStream = new ByteArrayInputStream(\"Some Data\".getBytes(StandardCharsets.UTF_8));\n BinaryData binaryData = BinaryData.fromStream(inputStream);\n System.out.println(binaryData.toString());\n```\n\n**Create an instance from an Object**\n\n```java\nclass Person {\n     @JsonProperty\n     private String name;\n\n     @JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n\n     @JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n\n // Provide your custom serializer or use Azure provided serializers.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n BinaryData binaryData = BinaryData.fromObject(data);\n\n System.out.println(binaryData.toString());\n```\n\n**Create an instance from `Flux`**\n\n```java\nfinal byte[] data = \"Some Data\".getBytes(StandardCharsets.UTF_8);\n final Flux<ByteBuffer> dataFlux = Flux.just(ByteBuffer.wrap(data));\n\n Mono<BinaryData> binaryDataMono = BinaryData.fromFlux(dataFlux);\n\n Disposable subscriber = binaryDataMono\n     .map(binaryData -> {\n         System.out.println(binaryData.toString());\n         return true;\n     })\n     .subscribe();\n\n // So that your program wait for above subscribe to complete.\n TimeUnit.SECONDS.sleep(5);\n subscriber.dispose();\n```\n\n**Create an instance from a file**\n\n```java\nBinaryData binaryData = BinaryData.fromFile(new File(\"path/to/file\").toPath());\n System.out.println(new String(binaryData.toBytes(), StandardCharsets.UTF_8));\n```"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class BinaryData"
methods:
- "com.azure.core.util.BinaryData.<T>toObject(com.azure.core.util.serializer.TypeReference<T>)"
- "com.azure.core.util.BinaryData.<T>toObject(com.azure.core.util.serializer.TypeReference<T>,com.azure.core.util.serializer.ObjectSerializer)"
- "com.azure.core.util.BinaryData.<T>toObject(java.lang.Class<T>)"
- "com.azure.core.util.BinaryData.<T>toObject(java.lang.Class<T>,com.azure.core.util.serializer.ObjectSerializer)"
- "com.azure.core.util.BinaryData.<T>toObjectAsync(com.azure.core.util.serializer.TypeReference<T>)"
- "com.azure.core.util.BinaryData.<T>toObjectAsync(com.azure.core.util.serializer.TypeReference<T>,com.azure.core.util.serializer.ObjectSerializer)"
- "com.azure.core.util.BinaryData.<T>toObjectAsync(java.lang.Class<T>)"
- "com.azure.core.util.BinaryData.<T>toObjectAsync(java.lang.Class<T>,com.azure.core.util.serializer.ObjectSerializer)"
- "com.azure.core.util.BinaryData.fromBytes(byte[])"
- "com.azure.core.util.BinaryData.fromFile(java.nio.file.Path)"
- "com.azure.core.util.BinaryData.fromFile(java.nio.file.Path,int)"
- "com.azure.core.util.BinaryData.fromFlux(reactor.core.publisher.Flux<java.nio.ByteBuffer>)"
- "com.azure.core.util.BinaryData.fromFlux(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.lang.Long)"
- "com.azure.core.util.BinaryData.fromObject(java.lang.Object)"
- "com.azure.core.util.BinaryData.fromObject(java.lang.Object,com.azure.core.util.serializer.ObjectSerializer)"
- "com.azure.core.util.BinaryData.fromObjectAsync(java.lang.Object)"
- "com.azure.core.util.BinaryData.fromObjectAsync(java.lang.Object,com.azure.core.util.serializer.ObjectSerializer)"
- "com.azure.core.util.BinaryData.fromStream(java.io.InputStream)"
- "com.azure.core.util.BinaryData.fromStreamAsync(java.io.InputStream)"
- "com.azure.core.util.BinaryData.fromString(java.lang.String)"
- "com.azure.core.util.BinaryData.getLength()"
- "com.azure.core.util.BinaryData.toByteBuffer()"
- "com.azure.core.util.BinaryData.toBytes()"
- "com.azure.core.util.BinaryData.toFluxByteBuffer()"
- "com.azure.core.util.BinaryData.toStream()"
- "com.azure.core.util.BinaryData.toString()"
type: "class"
metadata: {}
package: "com.azure.core.util"
artifact: com.azure:azure-core:1.23.0
