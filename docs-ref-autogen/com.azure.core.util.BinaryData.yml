### YamlMime:JavaType
uid: "com.azure.core.util.BinaryData"
fullName: "com.azure.core.util.BinaryData"
name: "BinaryData"
nameWithType: "BinaryData"
summary: "This class is an abstraction over many different ways that binary data can be represented. The <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> can be created from <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref>, <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref>, <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"String\"></xref>, <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref>, or byte array.\n\n**Immutable data**\n\n<xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> is constructed by copying the given data. Once <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> is instantiated, it can not be changed. It provides various convenient APIs to get data out of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>, they all start with the 'to' prefix, for example <xref uid=\"com.azure.core.util.BinaryData.toBytes()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData#toBytes()\"></xref>.\n\nCode samples are presented below.\n\n**Create an instance from Bytes**\n\n```java\nfinal byte[] data = \"Some Data\".getBytes(StandardCharsets.UTF_8);\n BinaryData binaryData = BinaryData.fromBytes(data);\n System.out.println(new String(binaryData.toBytes(), StandardCharsets.UTF_8));\n```\n\n**Create an instance from String**\n\n```java\nfinal String data = \"Some Data\";\n // Following will use default character set as StandardCharsets.UTF_8\n BinaryData binaryData = BinaryData.fromString(data);\n System.out.println(binaryData.toString());\n```\n\n**Create an instance from InputStream**\n\n```java\nfinal ByteArrayInputStream inputStream = new ByteArrayInputStream(\"Some Data\".getBytes(StandardCharsets.UTF_8));\n BinaryData binaryData = BinaryData.fromStream(inputStream);\n System.out.println(binaryData.toString());\n```\n\n**Create an instance from Object**\n\n```java\nclass Person {\n     {@literal @}JsonProperty\n     private String name;\n \n     {@literal @}JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n \n     {@literal @}JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n \n // Provide your custom serializer or use Azure provided serializers.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n BinaryData binaryData = BinaryData.fromObject(data);\n```"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class BinaryData"
methods:
- "com.azure.core.util.BinaryData.<T>toObject(com.azure.core.util.serializer.TypeReference<T>)"
- "com.azure.core.util.BinaryData.<T>toObject(com.azure.core.util.serializer.TypeReference<T>,com.azure.core.util.serializer.ObjectSerializer)"
- "com.azure.core.util.BinaryData.<T>toObjectAsync(com.azure.core.util.serializer.TypeReference<T>)"
- "com.azure.core.util.BinaryData.<T>toObjectAsync(com.azure.core.util.serializer.TypeReference<T>,com.azure.core.util.serializer.ObjectSerializer)"
- "com.azure.core.util.BinaryData.fromBytes(byte[])"
- "com.azure.core.util.BinaryData.fromFlux(reactor.core.publisher.Flux<java.nio.ByteBuffer>)"
- "com.azure.core.util.BinaryData.fromObject(java.lang.Object)"
- "com.azure.core.util.BinaryData.fromObject(java.lang.Object,com.azure.core.util.serializer.ObjectSerializer)"
- "com.azure.core.util.BinaryData.fromObjectAsync(java.lang.Object)"
- "com.azure.core.util.BinaryData.fromObjectAsync(java.lang.Object,com.azure.core.util.serializer.ObjectSerializer)"
- "com.azure.core.util.BinaryData.fromStream(java.io.InputStream)"
- "com.azure.core.util.BinaryData.fromStreamAsync(java.io.InputStream)"
- "com.azure.core.util.BinaryData.fromString(java.lang.String)"
- "com.azure.core.util.BinaryData.toBytes()"
- "com.azure.core.util.BinaryData.toStream()"
- "com.azure.core.util.BinaryData.toString()"
type: "class"
metadata: {}
package: "com.azure.core.util"
artifact: com.azure:azure-core:1.12.0
