### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.models.DataLakeCorsRule"
fullName: "com.azure.storage.file.datalake.models.DataLakeCorsRule"
name: "DataLakeCorsRule"
nameWithType: "DataLakeCorsRule"
summary: "CORS is an HTTP feature that enables a web application running under one domain to access resources in another domain. Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain; CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class DataLakeCorsRule"
constructors:
- uid: "com.azure.storage.file.datalake.models.DataLakeCorsRule.DataLakeCorsRule()"
  fullName: "com.azure.storage.file.datalake.models.DataLakeCorsRule.DataLakeCorsRule()"
  name: "DataLakeCorsRule()"
  nameWithType: "DataLakeCorsRule.DataLakeCorsRule()"
  syntax: "public DataLakeCorsRule()"
methods:
- uid: "com.azure.storage.file.datalake.models.DataLakeCorsRule.getAllowedHeaders()"
  fullName: "com.azure.storage.file.datalake.models.DataLakeCorsRule.getAllowedHeaders()"
  name: "getAllowedHeaders()"
  nameWithType: "DataLakeCorsRule.getAllowedHeaders()"
  summary: "Get the allowedHeaders property: the request headers that the origin domain may specify on the CORS request."
  syntax: "public String getAllowedHeaders()"
  returns:
    description: "the allowedHeaders value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.DataLakeCorsRule.getAllowedMethods()"
  fullName: "com.azure.storage.file.datalake.models.DataLakeCorsRule.getAllowedMethods()"
  name: "getAllowedMethods()"
  nameWithType: "DataLakeCorsRule.getAllowedMethods()"
  summary: "Get the allowedMethods property: The methods (HTTP request verbs) that the origin domain may use for a CORS request. (comma separated)."
  syntax: "public String getAllowedMethods()"
  returns:
    description: "the allowedMethods value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.DataLakeCorsRule.getAllowedOrigins()"
  fullName: "com.azure.storage.file.datalake.models.DataLakeCorsRule.getAllowedOrigins()"
  name: "getAllowedOrigins()"
  nameWithType: "DataLakeCorsRule.getAllowedOrigins()"
  summary: "Get the allowedOrigins property: The origin domains that are permitted to make a request against the storage service via CORS. The origin domain is the domain from which the request originates. Note that the origin must be an exact case-sensitive match with the origin that the user age sends to the service. You can also use the wildcard character '\\*' to allow all origin domains to make requests via CORS."
  syntax: "public String getAllowedOrigins()"
  returns:
    description: "the allowedOrigins value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.DataLakeCorsRule.getExposedHeaders()"
  fullName: "com.azure.storage.file.datalake.models.DataLakeCorsRule.getExposedHeaders()"
  name: "getExposedHeaders()"
  nameWithType: "DataLakeCorsRule.getExposedHeaders()"
  summary: "Get the exposedHeaders property: The response headers that may be sent in the response to the CORS request and exposed by the browser to the request issuer."
  syntax: "public String getExposedHeaders()"
  returns:
    description: "the exposedHeaders value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.DataLakeCorsRule.getMaxAgeInSeconds()"
  fullName: "com.azure.storage.file.datalake.models.DataLakeCorsRule.getMaxAgeInSeconds()"
  name: "getMaxAgeInSeconds()"
  nameWithType: "DataLakeCorsRule.getMaxAgeInSeconds()"
  summary: "Get the maxAgeInSeconds property: The maximum amount time that a browser should cache the preflight OPTIONS request."
  syntax: "public int getMaxAgeInSeconds()"
  returns:
    description: "the maxAgeInSeconds value."
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.DataLakeCorsRule.setAllowedHeaders(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.models.DataLakeCorsRule.setAllowedHeaders(String allowedHeaders)"
  name: "setAllowedHeaders(String allowedHeaders)"
  nameWithType: "DataLakeCorsRule.setAllowedHeaders(String allowedHeaders)"
  summary: "Set the allowedHeaders property: the request headers that the origin domain may specify on the CORS request."
  parameters:
  - description: "the allowedHeaders value to set."
    name: "allowedHeaders"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeCorsRule setAllowedHeaders(String allowedHeaders)"
  returns:
    description: "the DataLakeCorsRule object itself."
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeCorsRule?alt=com.azure.storage.file.datalake.models.DataLakeCorsRule&text=DataLakeCorsRule\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.DataLakeCorsRule.setAllowedMethods(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.models.DataLakeCorsRule.setAllowedMethods(String allowedMethods)"
  name: "setAllowedMethods(String allowedMethods)"
  nameWithType: "DataLakeCorsRule.setAllowedMethods(String allowedMethods)"
  summary: "Set the allowedMethods property: The methods (HTTP request verbs) that the origin domain may use for a CORS request. (comma separated)."
  parameters:
  - description: "the allowedMethods value to set."
    name: "allowedMethods"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeCorsRule setAllowedMethods(String allowedMethods)"
  returns:
    description: "the DataLakeCorsRule object itself."
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeCorsRule?alt=com.azure.storage.file.datalake.models.DataLakeCorsRule&text=DataLakeCorsRule\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.DataLakeCorsRule.setAllowedOrigins(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.models.DataLakeCorsRule.setAllowedOrigins(String allowedOrigins)"
  name: "setAllowedOrigins(String allowedOrigins)"
  nameWithType: "DataLakeCorsRule.setAllowedOrigins(String allowedOrigins)"
  summary: "Set the allowedOrigins property: The origin domains that are permitted to make a request against the storage service via CORS. The origin domain is the domain from which the request originates. Note that the origin must be an exact case-sensitive match with the origin that the user age sends to the service. You can also use the wildcard character '\\*' to allow all origin domains to make requests via CORS."
  parameters:
  - description: "the allowedOrigins value to set."
    name: "allowedOrigins"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeCorsRule setAllowedOrigins(String allowedOrigins)"
  returns:
    description: "the DataLakeCorsRule object itself."
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeCorsRule?alt=com.azure.storage.file.datalake.models.DataLakeCorsRule&text=DataLakeCorsRule\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.DataLakeCorsRule.setExposedHeaders(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.models.DataLakeCorsRule.setExposedHeaders(String exposedHeaders)"
  name: "setExposedHeaders(String exposedHeaders)"
  nameWithType: "DataLakeCorsRule.setExposedHeaders(String exposedHeaders)"
  summary: "Set the exposedHeaders property: The response headers that may be sent in the response to the CORS request and exposed by the browser to the request issuer."
  parameters:
  - description: "the exposedHeaders value to set."
    name: "exposedHeaders"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeCorsRule setExposedHeaders(String exposedHeaders)"
  returns:
    description: "the DataLakeCorsRule object itself."
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeCorsRule?alt=com.azure.storage.file.datalake.models.DataLakeCorsRule&text=DataLakeCorsRule\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.DataLakeCorsRule.setMaxAgeInSeconds(int)"
  fullName: "com.azure.storage.file.datalake.models.DataLakeCorsRule.setMaxAgeInSeconds(int maxAgeInSeconds)"
  name: "setMaxAgeInSeconds(int maxAgeInSeconds)"
  nameWithType: "DataLakeCorsRule.setMaxAgeInSeconds(int maxAgeInSeconds)"
  summary: "Set the maxAgeInSeconds property: The maximum amount time that a browser should cache the preflight OPTIONS request."
  parameters:
  - description: "the maxAgeInSeconds value to set."
    name: "maxAgeInSeconds"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeCorsRule setMaxAgeInSeconds(int maxAgeInSeconds)"
  returns:
    description: "the DataLakeCorsRule object itself."
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeCorsRule?alt=com.azure.storage.file.datalake.models.DataLakeCorsRule&text=DataLakeCorsRule\" data-throw-if-not-resolved=\"False\" />"
type: "class"
metadata: {}
package: "com.azure.storage.file.datalake.models"
artifact: com.azure:azure-storage-file-datalake:12.9.0
