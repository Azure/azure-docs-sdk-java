### YamlMime:JavaMember
uid: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges*"
fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges"
name: "listRanges"
nameWithType: "ShareFileAsyncClient.listRanges"
members:
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges()"
  name: "listRanges()"
  nameWithType: "ShareFileAsyncClient.listRanges()"
  summary: "List of valid ranges for a file.\n\n**Code Samples**\n\nList all ranges for the file client.\n\n```java\nshareFileAsyncClient.listRanges().subscribe(range ->\n     System.out.printf(\"List ranges completed with start: %d, end: %d\", range.getStart(), range.getEnd()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-ranges"
  syntax: "public PagedFlux<ShareFileRange> listRanges()"
  returns:
    description: "<xref uid=\"com.azure.storage.file.share.models.ShareFileRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ranges\"></xref> in the files."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileRange?alt=com.azure.storage.file.share.models.ShareFileRange&text=ShareFileRange\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges(com.azure.storage.file.share.models.ShareFileRange)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges(ShareFileRange range)"
  name: "listRanges(ShareFileRange range)"
  nameWithType: "ShareFileAsyncClient.listRanges(ShareFileRange range)"
  summary: "List of valid ranges for a file.\n\n**Code Samples**\n\nList all ranges within the file range from 1KB to 2KB.\n\n```java\nshareFileAsyncClient.listRanges(new ShareFileRange(1024, 2048L))\n     .subscribe(result -> System.out.printf(\"List ranges completed with start: %d, end: %d\",\n         result.getStart(), result.getEnd()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-ranges"
  parameters:
  - description: "Optional byte range which returns file data only from the specified range."
    name: "range"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareFileRange?alt=com.azure.storage.file.share.models.ShareFileRange&text=ShareFileRange\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<ShareFileRange> listRanges(ShareFileRange range)"
  returns:
    description: "<xref uid=\"com.azure.storage.file.share.models.ShareFileRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ranges\"></xref> in the files that satisfy the requirements"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileRange?alt=com.azure.storage.file.share.models.ShareFileRange&text=ShareFileRange\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges(com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges(ShareFileRange range, ShareRequestConditions requestConditions)"
  name: "listRanges(ShareFileRange range, ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.listRanges(ShareFileRange range, ShareRequestConditions requestConditions)"
  summary: "List of valid ranges for a file.\n\n**Code Samples**\n\nList all ranges within the file range from 1KB to 2KB.\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.listRanges(new ShareFileRange(1024, 2048L), requestConditions)\n     .subscribe(result -> System.out.printf(\"List ranges completed with start: %d, end: %d\",\n         result.getStart(), result.getEnd()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-ranges"
  parameters:
  - description: "Optional byte range which returns file data only from the specified range."
    name: "range"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareFileRange?alt=com.azure.storage.file.share.models.ShareFileRange&text=ShareFileRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<ShareFileRange> listRanges(ShareFileRange range, ShareRequestConditions requestConditions)"
  returns:
    description: "<xref uid=\"com.azure.storage.file.share.models.ShareFileRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ranges\"></xref> in the files that satisfy the requirements"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileRange?alt=com.azure.storage.file.share.models.ShareFileRange&text=ShareFileRange\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.storage.file.share"
artifact: com.azure:azure-storage-file-share:12.8.0
