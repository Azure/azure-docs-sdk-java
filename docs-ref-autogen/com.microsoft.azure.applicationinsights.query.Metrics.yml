### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.applicationinsights.query.Metrics.get(String appId, MetricId metricId)
  name: get(String appId, MetricId metricId)
  nameWithType: Metrics.get(String appId, MetricId metricId)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>ID of the metric. This is either a standard AI metric, or an application-specific custom metric. Possible values include: 'requests/count', 'requests/duration', 'requests/failed', 'users/count', 'users/authenticated', 'pageViews/count', 'pageViews/duration', 'client/processingDuration', 'client/receiveDuration', 'client/networkDuration', 'client/sendDuration', 'client/totalDuration', 'dependencies/count', 'dependencies/failed', 'dependencies/duration', 'exceptions/count', 'exceptions/browser', 'exceptions/server', 'sessions/count', 'performanceCounters/requestExecutionTime', 'performanceCounters/requestsPerSecond', 'performanceCounters/requestsInQueue', 'performanceCounters/memoryAvailableBytes', 'performanceCounters/exceptionsPerSecond', 'performanceCounters/processCpuPercentage', 'performanceCounters/processIOBytesPerSecond', 'performanceCounters/processPrivateBytes', 'performanceCounters/processorCpuPercentage', 'availabilityResults/availabilityPercentage', 'availabilityResults/duration', 'billing/telemetryCount', 'customEvents/count' </p>"
    name: metricId
    type: <xref href="MetricId?alt=MetricId&text=MetricId" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the MetricsResult object if successful. </p>
    type: <xref href="MetricsResult?alt=MetricsResult&text=MetricsResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve metric data. Gets metric values for a single metric.</p>

    <p></p>
  syntax: public MetricsResult get(String appId, MetricId metricId)
  uid: com.microsoft.azure.applicationinsights.query.Metrics.get(String,MetricId)
- fullName: com.microsoft.azure.applicationinsights.query.Metrics.get(String appId, MetricId metricId, String timespan, Period interval, List<MetricsAggregation> aggregation, List<MetricsSegment> segment, Integer top, String orderby, String filter)
  name: get(String appId, MetricId metricId, String timespan, Period interval, List<MetricsAggregation> aggregation, List<MetricsSegment> segment, Integer top, String orderby, String filter)
  nameWithType: Metrics.get(String appId, MetricId metricId, String timespan, Period interval, List<MetricsAggregation> aggregation, List<MetricsSegment> segment, Integer top, String orderby, String filter)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>ID of the metric. This is either a standard AI metric, or an application-specific custom metric. Possible values include: 'requests/count', 'requests/duration', 'requests/failed', 'users/count', 'users/authenticated', 'pageViews/count', 'pageViews/duration', 'client/processingDuration', 'client/receiveDuration', 'client/networkDuration', 'client/sendDuration', 'client/totalDuration', 'dependencies/count', 'dependencies/failed', 'dependencies/duration', 'exceptions/count', 'exceptions/browser', 'exceptions/server', 'sessions/count', 'performanceCounters/requestExecutionTime', 'performanceCounters/requestsPerSecond', 'performanceCounters/requestsInQueue', 'performanceCounters/memoryAvailableBytes', 'performanceCounters/exceptionsPerSecond', 'performanceCounters/processCpuPercentage', 'performanceCounters/processIOBytesPerSecond', 'performanceCounters/processPrivateBytes', 'performanceCounters/processorCpuPercentage', 'availabilityResults/availabilityPercentage', 'availabilityResults/duration', 'billing/telemetryCount', 'customEvents/count' </p>"
    name: metricId
    type: <xref href="MetricId?alt=MetricId&text=MetricId" data-throw-if-not-resolved="False"/>
  - description: <p>The timespan over which to retrieve metric values. This is an ISO8601 time period value. If timespan is omitted, a default time range of `PT12H` ("last 12 hours") is used. The actual timespan that is queried may be adjusted by the server based. In all cases, the actual time span used for the query is included in the response. </p>
    name: timespan
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The time interval to use when retrieving metric values. This is an ISO8601 duration. If interval is omitted, the metric value is aggregated across the entire timespan. If interval is supplied, the server may adjust the interval to a more appropriate size based on the timespan used for the query. In all cases, the actual interval used for the query is included in the response. </p>
    name: interval
    type: <xref href="Period?alt=Period&text=Period" data-throw-if-not-resolved="False"/>
  - description: <p>The aggregation to use when computing the metric values. To retrieve more than one aggregation at a time, separate them with a comma. If no aggregation is specified, then the default aggregation for the metric is used. </p>
    name: aggregation
    type: <xref href="List%3CMetricsAggregation%3E?alt=List%3CMetricsAggregation%3E&text=List%3CMetricsAggregation%3E" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the dimension to segment the metric values by. This dimension must be applicable to the metric you are retrieving. To segment by more than one dimension at a time, separate them with a comma (,). In this case, the metric data will be segmented in the order the dimensions are listed in the parameter. </p>
    name: segment
    type: <xref href="List%3CMetricsSegment%3E?alt=List%3CMetricsSegment%3E&text=List%3CMetricsSegment%3E" data-throw-if-not-resolved="False"/>
  - description: <p>The number of segments to return. This value is only valid when segment is specified. </p>
    name: top
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The aggregation function and direction to sort the segments by. This value is only valid when segment is specified. </p>
    name: orderby
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>An expression used to filter the results. This value should be a valid OData filter expression where the keys of each clause should be applicable dimensions for the metric you are retrieving. </p>
    name: filter
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the MetricsResult object if successful. </p>
    type: <xref href="MetricsResult?alt=MetricsResult&text=MetricsResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve metric data. Gets metric values for a single metric.</p>

    <p></p>
  syntax: public MetricsResult get(String appId, MetricId metricId, String timespan, Period interval, List<MetricsAggregation> aggregation, List<MetricsSegment> segment, Integer top, String orderby, String filter)
  uid: com.microsoft.azure.applicationinsights.query.Metrics.get(String,MetricId,String,Period,List<MetricsAggregation>,List<MetricsSegment>,Integer,String,String)
- fullName: com.microsoft.azure.applicationinsights.query.Metrics.getAsync(String appId, MetricId metricId)
  name: getAsync(String appId, MetricId metricId)
  nameWithType: Metrics.getAsync(String appId, MetricId metricId)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>ID of the metric. This is either a standard AI metric, or an application-specific custom metric. Possible values include: 'requests/count', 'requests/duration', 'requests/failed', 'users/count', 'users/authenticated', 'pageViews/count', 'pageViews/duration', 'client/processingDuration', 'client/receiveDuration', 'client/networkDuration', 'client/sendDuration', 'client/totalDuration', 'dependencies/count', 'dependencies/failed', 'dependencies/duration', 'exceptions/count', 'exceptions/browser', 'exceptions/server', 'sessions/count', 'performanceCounters/requestExecutionTime', 'performanceCounters/requestsPerSecond', 'performanceCounters/requestsInQueue', 'performanceCounters/memoryAvailableBytes', 'performanceCounters/exceptionsPerSecond', 'performanceCounters/processCpuPercentage', 'performanceCounters/processIOBytesPerSecond', 'performanceCounters/processPrivateBytes', 'performanceCounters/processorCpuPercentage', 'availabilityResults/availabilityPercentage', 'availabilityResults/duration', 'billing/telemetryCount', 'customEvents/count' </p>"
    name: metricId
    type: <xref href="MetricId?alt=MetricId&text=MetricId" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the MetricsResult object </p>
    type: <xref href="Observable%3CMetricsResult%3E?alt=Observable%3CMetricsResult%3E&text=Observable%3CMetricsResult%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve metric data. Gets metric values for a single metric.</p>

    <p></p>
  syntax: public Observable<MetricsResult> getAsync(String appId, MetricId metricId)
  uid: com.microsoft.azure.applicationinsights.query.Metrics.getAsync(String,MetricId)
- fullName: com.microsoft.azure.applicationinsights.query.Metrics.getAsync(String appId, MetricId metricId, final ServiceCallback<MetricsResult> serviceCallback)
  name: getAsync(String appId, MetricId metricId, final ServiceCallback<MetricsResult> serviceCallback)
  nameWithType: Metrics.getAsync(String appId, MetricId metricId, final ServiceCallback<MetricsResult> serviceCallback)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>ID of the metric. This is either a standard AI metric, or an application-specific custom metric. Possible values include: 'requests/count', 'requests/duration', 'requests/failed', 'users/count', 'users/authenticated', 'pageViews/count', 'pageViews/duration', 'client/processingDuration', 'client/receiveDuration', 'client/networkDuration', 'client/sendDuration', 'client/totalDuration', 'dependencies/count', 'dependencies/failed', 'dependencies/duration', 'exceptions/count', 'exceptions/browser', 'exceptions/server', 'sessions/count', 'performanceCounters/requestExecutionTime', 'performanceCounters/requestsPerSecond', 'performanceCounters/requestsInQueue', 'performanceCounters/memoryAvailableBytes', 'performanceCounters/exceptionsPerSecond', 'performanceCounters/processCpuPercentage', 'performanceCounters/processIOBytesPerSecond', 'performanceCounters/processPrivateBytes', 'performanceCounters/processorCpuPercentage', 'availabilityResults/availabilityPercentage', 'availabilityResults/duration', 'billing/telemetryCount', 'customEvents/count' </p>"
    name: metricId
    type: <xref href="MetricId?alt=MetricId&text=MetricId" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CMetricsResult%3E?alt=final+ServiceCallback%3CMetricsResult%3E&text=final+ServiceCallback%3CMetricsResult%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CMetricsResult%3E?alt=ServiceFuture%3CMetricsResult%3E&text=ServiceFuture%3CMetricsResult%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve metric data. Gets metric values for a single metric.</p>

    <p></p>
  syntax: public ServiceFuture<MetricsResult> getAsync(String appId, MetricId metricId, final ServiceCallback<MetricsResult> serviceCallback)
  uid: com.microsoft.azure.applicationinsights.query.Metrics.getAsync(String,MetricId,final ServiceCallback<MetricsResult>)
- fullName: com.microsoft.azure.applicationinsights.query.Metrics.getAsync(String appId, MetricId metricId, String timespan, Period interval, List<MetricsAggregation> aggregation, List<MetricsSegment> segment, Integer top, String orderby, String filter)
  name: getAsync(String appId, MetricId metricId, String timespan, Period interval, List<MetricsAggregation> aggregation, List<MetricsSegment> segment, Integer top, String orderby, String filter)
  nameWithType: Metrics.getAsync(String appId, MetricId metricId, String timespan, Period interval, List<MetricsAggregation> aggregation, List<MetricsSegment> segment, Integer top, String orderby, String filter)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>ID of the metric. This is either a standard AI metric, or an application-specific custom metric. Possible values include: 'requests/count', 'requests/duration', 'requests/failed', 'users/count', 'users/authenticated', 'pageViews/count', 'pageViews/duration', 'client/processingDuration', 'client/receiveDuration', 'client/networkDuration', 'client/sendDuration', 'client/totalDuration', 'dependencies/count', 'dependencies/failed', 'dependencies/duration', 'exceptions/count', 'exceptions/browser', 'exceptions/server', 'sessions/count', 'performanceCounters/requestExecutionTime', 'performanceCounters/requestsPerSecond', 'performanceCounters/requestsInQueue', 'performanceCounters/memoryAvailableBytes', 'performanceCounters/exceptionsPerSecond', 'performanceCounters/processCpuPercentage', 'performanceCounters/processIOBytesPerSecond', 'performanceCounters/processPrivateBytes', 'performanceCounters/processorCpuPercentage', 'availabilityResults/availabilityPercentage', 'availabilityResults/duration', 'billing/telemetryCount', 'customEvents/count' </p>"
    name: metricId
    type: <xref href="MetricId?alt=MetricId&text=MetricId" data-throw-if-not-resolved="False"/>
  - description: <p>The timespan over which to retrieve metric values. This is an ISO8601 time period value. If timespan is omitted, a default time range of `PT12H` ("last 12 hours") is used. The actual timespan that is queried may be adjusted by the server based. In all cases, the actual time span used for the query is included in the response. </p>
    name: timespan
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The time interval to use when retrieving metric values. This is an ISO8601 duration. If interval is omitted, the metric value is aggregated across the entire timespan. If interval is supplied, the server may adjust the interval to a more appropriate size based on the timespan used for the query. In all cases, the actual interval used for the query is included in the response. </p>
    name: interval
    type: <xref href="Period?alt=Period&text=Period" data-throw-if-not-resolved="False"/>
  - description: <p>The aggregation to use when computing the metric values. To retrieve more than one aggregation at a time, separate them with a comma. If no aggregation is specified, then the default aggregation for the metric is used. </p>
    name: aggregation
    type: <xref href="List%3CMetricsAggregation%3E?alt=List%3CMetricsAggregation%3E&text=List%3CMetricsAggregation%3E" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the dimension to segment the metric values by. This dimension must be applicable to the metric you are retrieving. To segment by more than one dimension at a time, separate them with a comma (,). In this case, the metric data will be segmented in the order the dimensions are listed in the parameter. </p>
    name: segment
    type: <xref href="List%3CMetricsSegment%3E?alt=List%3CMetricsSegment%3E&text=List%3CMetricsSegment%3E" data-throw-if-not-resolved="False"/>
  - description: <p>The number of segments to return. This value is only valid when segment is specified. </p>
    name: top
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The aggregation function and direction to sort the segments by. This value is only valid when segment is specified. </p>
    name: orderby
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>An expression used to filter the results. This value should be a valid OData filter expression where the keys of each clause should be applicable dimensions for the metric you are retrieving. </p>
    name: filter
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the MetricsResult object </p>
    type: <xref href="Observable%3CMetricsResult%3E?alt=Observable%3CMetricsResult%3E&text=Observable%3CMetricsResult%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve metric data. Gets metric values for a single metric.</p>

    <p></p>
  syntax: public Observable<MetricsResult> getAsync(String appId, MetricId metricId, String timespan, Period interval, List<MetricsAggregation> aggregation, List<MetricsSegment> segment, Integer top, String orderby, String filter)
  uid: com.microsoft.azure.applicationinsights.query.Metrics.getAsync(String,MetricId,String,Period,List<MetricsAggregation>,List<MetricsSegment>,Integer,String,String)
- fullName: com.microsoft.azure.applicationinsights.query.Metrics.getAsync(String appId, MetricId metricId, String timespan, Period interval, List<MetricsAggregation> aggregation, List<MetricsSegment> segment, Integer top, String orderby, String filter, final ServiceCallback<MetricsResult> serviceCallback)
  name: getAsync(String appId, MetricId metricId, String timespan, Period interval, List<MetricsAggregation> aggregation, List<MetricsSegment> segment, Integer top, String orderby, String filter, final ServiceCallback<MetricsResult> serviceCallback)
  nameWithType: Metrics.getAsync(String appId, MetricId metricId, String timespan, Period interval, List<MetricsAggregation> aggregation, List<MetricsSegment> segment, Integer top, String orderby, String filter, final ServiceCallback<MetricsResult> serviceCallback)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>ID of the metric. This is either a standard AI metric, or an application-specific custom metric. Possible values include: 'requests/count', 'requests/duration', 'requests/failed', 'users/count', 'users/authenticated', 'pageViews/count', 'pageViews/duration', 'client/processingDuration', 'client/receiveDuration', 'client/networkDuration', 'client/sendDuration', 'client/totalDuration', 'dependencies/count', 'dependencies/failed', 'dependencies/duration', 'exceptions/count', 'exceptions/browser', 'exceptions/server', 'sessions/count', 'performanceCounters/requestExecutionTime', 'performanceCounters/requestsPerSecond', 'performanceCounters/requestsInQueue', 'performanceCounters/memoryAvailableBytes', 'performanceCounters/exceptionsPerSecond', 'performanceCounters/processCpuPercentage', 'performanceCounters/processIOBytesPerSecond', 'performanceCounters/processPrivateBytes', 'performanceCounters/processorCpuPercentage', 'availabilityResults/availabilityPercentage', 'availabilityResults/duration', 'billing/telemetryCount', 'customEvents/count' </p>"
    name: metricId
    type: <xref href="MetricId?alt=MetricId&text=MetricId" data-throw-if-not-resolved="False"/>
  - description: <p>The timespan over which to retrieve metric values. This is an ISO8601 time period value. If timespan is omitted, a default time range of `PT12H` ("last 12 hours") is used. The actual timespan that is queried may be adjusted by the server based. In all cases, the actual time span used for the query is included in the response. </p>
    name: timespan
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The time interval to use when retrieving metric values. This is an ISO8601 duration. If interval is omitted, the metric value is aggregated across the entire timespan. If interval is supplied, the server may adjust the interval to a more appropriate size based on the timespan used for the query. In all cases, the actual interval used for the query is included in the response. </p>
    name: interval
    type: <xref href="Period?alt=Period&text=Period" data-throw-if-not-resolved="False"/>
  - description: <p>The aggregation to use when computing the metric values. To retrieve more than one aggregation at a time, separate them with a comma. If no aggregation is specified, then the default aggregation for the metric is used. </p>
    name: aggregation
    type: <xref href="List%3CMetricsAggregation%3E?alt=List%3CMetricsAggregation%3E&text=List%3CMetricsAggregation%3E" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the dimension to segment the metric values by. This dimension must be applicable to the metric you are retrieving. To segment by more than one dimension at a time, separate them with a comma (,). In this case, the metric data will be segmented in the order the dimensions are listed in the parameter. </p>
    name: segment
    type: <xref href="List%3CMetricsSegment%3E?alt=List%3CMetricsSegment%3E&text=List%3CMetricsSegment%3E" data-throw-if-not-resolved="False"/>
  - description: <p>The number of segments to return. This value is only valid when segment is specified. </p>
    name: top
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The aggregation function and direction to sort the segments by. This value is only valid when segment is specified. </p>
    name: orderby
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>An expression used to filter the results. This value should be a valid OData filter expression where the keys of each clause should be applicable dimensions for the metric you are retrieving. </p>
    name: filter
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CMetricsResult%3E?alt=final+ServiceCallback%3CMetricsResult%3E&text=final+ServiceCallback%3CMetricsResult%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CMetricsResult%3E?alt=ServiceFuture%3CMetricsResult%3E&text=ServiceFuture%3CMetricsResult%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve metric data. Gets metric values for a single metric.</p>

    <p></p>
  syntax: public ServiceFuture<MetricsResult> getAsync(String appId, MetricId metricId, String timespan, Period interval, List<MetricsAggregation> aggregation, List<MetricsSegment> segment, Integer top, String orderby, String filter, final ServiceCallback<MetricsResult> serviceCallback)
  uid: com.microsoft.azure.applicationinsights.query.Metrics.getAsync(String,MetricId,String,Period,List<MetricsAggregation>,List<MetricsSegment>,Integer,String,String,final ServiceCallback<MetricsResult>)
- fullName: com.microsoft.azure.applicationinsights.query.Metrics.getMetadata(String appId)
  name: getMetadata(String appId)
  nameWithType: Metrics.getMetadata(String appId)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Object object if successful. </p>
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve metric metatadata. Gets metadata describing the available metrics.</p>

    <p></p>
  syntax: public Object getMetadata(String appId)
  uid: com.microsoft.azure.applicationinsights.query.Metrics.getMetadata(String)
- fullName: com.microsoft.azure.applicationinsights.query.Metrics.getMetadataAsync(String appId)
  name: getMetadataAsync(String appId)
  nameWithType: Metrics.getMetadataAsync(String appId)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Object object </p>
    type: <xref href="Observable%3CObject%3E?alt=Observable%3CObject%3E&text=Observable%3CObject%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve metric metatadata. Gets metadata describing the available metrics.</p>

    <p></p>
  syntax: public Observable<Object> getMetadataAsync(String appId)
  uid: com.microsoft.azure.applicationinsights.query.Metrics.getMetadataAsync(String)
- fullName: com.microsoft.azure.applicationinsights.query.Metrics.getMetadataAsync(String appId, final ServiceCallback<Object> serviceCallback)
  name: getMetadataAsync(String appId, final ServiceCallback<Object> serviceCallback)
  nameWithType: Metrics.getMetadataAsync(String appId, final ServiceCallback<Object> serviceCallback)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CObject%3E?alt=final+ServiceCallback%3CObject%3E&text=final+ServiceCallback%3CObject%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CObject%3E?alt=ServiceFuture%3CObject%3E&text=ServiceFuture%3CObject%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve metric metatadata. Gets metadata describing the available metrics.</p>

    <p></p>
  syntax: public ServiceFuture<Object> getMetadataAsync(String appId, final ServiceCallback<Object> serviceCallback)
  uid: com.microsoft.azure.applicationinsights.query.Metrics.getMetadataAsync(String,final ServiceCallback<Object>)
- fullName: com.microsoft.azure.applicationinsights.query.Metrics.getMetadataWithServiceResponseAsync(String appId)
  name: getMetadataWithServiceResponseAsync(String appId)
  nameWithType: Metrics.getMetadataWithServiceResponseAsync(String appId)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Object object </p>
    type: <xref href="Observable%3CServiceResponse%3CObject%3E%3E?alt=Observable%3CServiceResponse%3CObject%3E%3E&text=Observable%3CServiceResponse%3CObject%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve metric metatadata. Gets metadata describing the available metrics.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Object>> getMetadataWithServiceResponseAsync(String appId)
  uid: com.microsoft.azure.applicationinsights.query.Metrics.getMetadataWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.applicationinsights.query.Metrics.getMultiple(String appId, List<MetricsPostBodySchema> body)
  name: getMultiple(String appId, List<MetricsPostBodySchema> body)
  nameWithType: Metrics.getMultiple(String appId, List<MetricsPostBodySchema> body)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The batched metrics query. </p>
    name: body
    type: <xref href="List%3CMetricsPostBodySchema%3E?alt=List%3CMetricsPostBodySchema%3E&text=List%3CMetricsPostBodySchema%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;MetricsResultsItem&gt; object if successful. </p>
    type: <xref href="List%3CMetricsResultsItem%3E?alt=List%3CMetricsResultsItem%3E&text=List%3CMetricsResultsItem%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve metric data. Gets metric values for multiple metrics.</p>

    <p></p>
  syntax: public List<MetricsResultsItem> getMultiple(String appId, List<MetricsPostBodySchema> body)
  uid: com.microsoft.azure.applicationinsights.query.Metrics.getMultiple(String,List<MetricsPostBodySchema>)
- fullName: com.microsoft.azure.applicationinsights.query.Metrics.getMultipleAsync(String appId, List<MetricsPostBodySchema> body)
  name: getMultipleAsync(String appId, List<MetricsPostBodySchema> body)
  nameWithType: Metrics.getMultipleAsync(String appId, List<MetricsPostBodySchema> body)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The batched metrics query. </p>
    name: body
    type: <xref href="List%3CMetricsPostBodySchema%3E?alt=List%3CMetricsPostBodySchema%3E&text=List%3CMetricsPostBodySchema%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;MetricsResultsItem&gt; object </p>
    type: <xref href="Observable%3CList%3CMetricsResultsItem%3E%3E?alt=Observable%3CList%3CMetricsResultsItem%3E%3E&text=Observable%3CList%3CMetricsResultsItem%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve metric data. Gets metric values for multiple metrics.</p>

    <p></p>
  syntax: public Observable<List<MetricsResultsItem>> getMultipleAsync(String appId, List<MetricsPostBodySchema> body)
  uid: com.microsoft.azure.applicationinsights.query.Metrics.getMultipleAsync(String,List<MetricsPostBodySchema>)
- fullName: com.microsoft.azure.applicationinsights.query.Metrics.getMultipleAsync(String appId, List<MetricsPostBodySchema> body, final ServiceCallback<List<MetricsResultsItem>> serviceCallback)
  name: getMultipleAsync(String appId, List<MetricsPostBodySchema> body, final ServiceCallback<List<MetricsResultsItem>> serviceCallback)
  nameWithType: Metrics.getMultipleAsync(String appId, List<MetricsPostBodySchema> body, final ServiceCallback<List<MetricsResultsItem>> serviceCallback)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The batched metrics query. </p>
    name: body
    type: <xref href="List%3CMetricsPostBodySchema%3E?alt=List%3CMetricsPostBodySchema%3E&text=List%3CMetricsPostBodySchema%3E" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CList%3CMetricsResultsItem%3E%3E?alt=final+ServiceCallback%3CList%3CMetricsResultsItem%3E%3E&text=final+ServiceCallback%3CList%3CMetricsResultsItem%3E%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CList%3CMetricsResultsItem%3E%3E?alt=ServiceFuture%3CList%3CMetricsResultsItem%3E%3E&text=ServiceFuture%3CList%3CMetricsResultsItem%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve metric data. Gets metric values for multiple metrics.</p>

    <p></p>
  syntax: public ServiceFuture<List<MetricsResultsItem>> getMultipleAsync(String appId, List<MetricsPostBodySchema> body, final ServiceCallback<List<MetricsResultsItem>> serviceCallback)
  uid: com.microsoft.azure.applicationinsights.query.Metrics.getMultipleAsync(String,List<MetricsPostBodySchema>,final ServiceCallback<List<MetricsResultsItem>>)
- fullName: com.microsoft.azure.applicationinsights.query.Metrics.getMultipleWithServiceResponseAsync(String appId, List<MetricsPostBodySchema> body)
  name: getMultipleWithServiceResponseAsync(String appId, List<MetricsPostBodySchema> body)
  nameWithType: Metrics.getMultipleWithServiceResponseAsync(String appId, List<MetricsPostBodySchema> body)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The batched metrics query. </p>
    name: body
    type: <xref href="List%3CMetricsPostBodySchema%3E?alt=List%3CMetricsPostBodySchema%3E&text=List%3CMetricsPostBodySchema%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;MetricsResultsItem&gt; object </p>
    type: <xref href="Observable%3CServiceResponse%3CList%3CMetricsResultsItem%3E%3E%3E?alt=Observable%3CServiceResponse%3CList%3CMetricsResultsItem%3E%3E%3E&text=Observable%3CServiceResponse%3CList%3CMetricsResultsItem%3E%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve metric data. Gets metric values for multiple metrics.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<List<MetricsResultsItem>>> getMultipleWithServiceResponseAsync(String appId, List<MetricsPostBodySchema> body)
  uid: com.microsoft.azure.applicationinsights.query.Metrics.getMultipleWithServiceResponseAsync(String,List<MetricsPostBodySchema>)
- fullName: com.microsoft.azure.applicationinsights.query.Metrics.getWithServiceResponseAsync(String appId, MetricId metricId)
  name: getWithServiceResponseAsync(String appId, MetricId metricId)
  nameWithType: Metrics.getWithServiceResponseAsync(String appId, MetricId metricId)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>ID of the metric. This is either a standard AI metric, or an application-specific custom metric. Possible values include: 'requests/count', 'requests/duration', 'requests/failed', 'users/count', 'users/authenticated', 'pageViews/count', 'pageViews/duration', 'client/processingDuration', 'client/receiveDuration', 'client/networkDuration', 'client/sendDuration', 'client/totalDuration', 'dependencies/count', 'dependencies/failed', 'dependencies/duration', 'exceptions/count', 'exceptions/browser', 'exceptions/server', 'sessions/count', 'performanceCounters/requestExecutionTime', 'performanceCounters/requestsPerSecond', 'performanceCounters/requestsInQueue', 'performanceCounters/memoryAvailableBytes', 'performanceCounters/exceptionsPerSecond', 'performanceCounters/processCpuPercentage', 'performanceCounters/processIOBytesPerSecond', 'performanceCounters/processPrivateBytes', 'performanceCounters/processorCpuPercentage', 'availabilityResults/availabilityPercentage', 'availabilityResults/duration', 'billing/telemetryCount', 'customEvents/count' </p>"
    name: metricId
    type: <xref href="MetricId?alt=MetricId&text=MetricId" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the MetricsResult object </p>
    type: <xref href="Observable%3CServiceResponse%3CMetricsResult%3E%3E?alt=Observable%3CServiceResponse%3CMetricsResult%3E%3E&text=Observable%3CServiceResponse%3CMetricsResult%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve metric data. Gets metric values for a single metric.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<MetricsResult>> getWithServiceResponseAsync(String appId, MetricId metricId)
  uid: com.microsoft.azure.applicationinsights.query.Metrics.getWithServiceResponseAsync(String,MetricId)
- fullName: com.microsoft.azure.applicationinsights.query.Metrics.getWithServiceResponseAsync(String appId, MetricId metricId, String timespan, Period interval, List<MetricsAggregation> aggregation, List<MetricsSegment> segment, Integer top, String orderby, String filter)
  name: getWithServiceResponseAsync(String appId, MetricId metricId, String timespan, Period interval, List<MetricsAggregation> aggregation, List<MetricsSegment> segment, Integer top, String orderby, String filter)
  nameWithType: Metrics.getWithServiceResponseAsync(String appId, MetricId metricId, String timespan, Period interval, List<MetricsAggregation> aggregation, List<MetricsSegment> segment, Integer top, String orderby, String filter)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>ID of the metric. This is either a standard AI metric, or an application-specific custom metric. Possible values include: 'requests/count', 'requests/duration', 'requests/failed', 'users/count', 'users/authenticated', 'pageViews/count', 'pageViews/duration', 'client/processingDuration', 'client/receiveDuration', 'client/networkDuration', 'client/sendDuration', 'client/totalDuration', 'dependencies/count', 'dependencies/failed', 'dependencies/duration', 'exceptions/count', 'exceptions/browser', 'exceptions/server', 'sessions/count', 'performanceCounters/requestExecutionTime', 'performanceCounters/requestsPerSecond', 'performanceCounters/requestsInQueue', 'performanceCounters/memoryAvailableBytes', 'performanceCounters/exceptionsPerSecond', 'performanceCounters/processCpuPercentage', 'performanceCounters/processIOBytesPerSecond', 'performanceCounters/processPrivateBytes', 'performanceCounters/processorCpuPercentage', 'availabilityResults/availabilityPercentage', 'availabilityResults/duration', 'billing/telemetryCount', 'customEvents/count' </p>"
    name: metricId
    type: <xref href="MetricId?alt=MetricId&text=MetricId" data-throw-if-not-resolved="False"/>
  - description: <p>The timespan over which to retrieve metric values. This is an ISO8601 time period value. If timespan is omitted, a default time range of `PT12H` ("last 12 hours") is used. The actual timespan that is queried may be adjusted by the server based. In all cases, the actual time span used for the query is included in the response. </p>
    name: timespan
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The time interval to use when retrieving metric values. This is an ISO8601 duration. If interval is omitted, the metric value is aggregated across the entire timespan. If interval is supplied, the server may adjust the interval to a more appropriate size based on the timespan used for the query. In all cases, the actual interval used for the query is included in the response. </p>
    name: interval
    type: <xref href="Period?alt=Period&text=Period" data-throw-if-not-resolved="False"/>
  - description: <p>The aggregation to use when computing the metric values. To retrieve more than one aggregation at a time, separate them with a comma. If no aggregation is specified, then the default aggregation for the metric is used. </p>
    name: aggregation
    type: <xref href="List%3CMetricsAggregation%3E?alt=List%3CMetricsAggregation%3E&text=List%3CMetricsAggregation%3E" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the dimension to segment the metric values by. This dimension must be applicable to the metric you are retrieving. To segment by more than one dimension at a time, separate them with a comma (,). In this case, the metric data will be segmented in the order the dimensions are listed in the parameter. </p>
    name: segment
    type: <xref href="List%3CMetricsSegment%3E?alt=List%3CMetricsSegment%3E&text=List%3CMetricsSegment%3E" data-throw-if-not-resolved="False"/>
  - description: <p>The number of segments to return. This value is only valid when segment is specified. </p>
    name: top
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The aggregation function and direction to sort the segments by. This value is only valid when segment is specified. </p>
    name: orderby
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>An expression used to filter the results. This value should be a valid OData filter expression where the keys of each clause should be applicable dimensions for the metric you are retrieving. </p>
    name: filter
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the MetricsResult object </p>
    type: <xref href="Observable%3CServiceResponse%3CMetricsResult%3E%3E?alt=Observable%3CServiceResponse%3CMetricsResult%3E%3E&text=Observable%3CServiceResponse%3CMetricsResult%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve metric data. Gets metric values for a single metric.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<MetricsResult>> getWithServiceResponseAsync(String appId, MetricId metricId, String timespan, Period interval, List<MetricsAggregation> aggregation, List<MetricsSegment> segment, Integer top, String orderby, String filter)
  uid: com.microsoft.azure.applicationinsights.query.Metrics.getWithServiceResponseAsync(String,MetricId,String,Period,List<MetricsAggregation>,List<MetricsSegment>,Integer,String,String)
nameWithType: Metrics
syntax: public interface Metrics
type: interface
uid: com.microsoft.azure.applicationinsights.query.Metrics
fullName: com.microsoft.azure.applicationinsights.query.Metrics
name: Metrics
package: com.microsoft.azure.applicationinsights.query
summary: <p>An instance of this class provides access to all the operations defined in Metrics. </p>
metadata: {}
