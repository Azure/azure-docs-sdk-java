### YamlMime:JavaType
constructors:
- fullName: system.fabric.health.HealthInformation.HealthInformation(String sourceId, String property, HealthState healthState)
  name: HealthInformation(String sourceId, String property, HealthState healthState)
  nameWithType: HealthInformation.HealthInformation(String sourceId, String property, HealthState healthState)
  parameters:
  - description: <p>The source of the report. Cannot be null or empty. It can't start with "System.", which is reserved keyword for system components reporting. </p>
    name: sourceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The property of the report. Cannot be null or empty. </p>
    name: property
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>he health state of the report. Must be specified. Must be one of the values of <xref uid="system.fabric.health.HealthState" data-throw-if-not-resolved="false" data-raw-source="system.fabric.health.HealthState"></xref>. </p>
    name: healthState
    type: <xref href="system.fabric.health.HealthState?alt=system.fabric.health.HealthState&text=HealthState" data-throw-if-not-resolved="False"/>
  summary: <p>Initializes a new instance of the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.health.HealthInformation"></xref> class. </p>
  syntax: public HealthInformation(String sourceId, String property, HealthState healthState)
  uid: system.fabric.health.HealthInformation.HealthInformation(String,String,HealthState)
fields:
- field:
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  fullName: system.fabric.health.HealthInformation.autoSequenceNumber
  name: autoSequenceNumber
  nameWithType: HealthInformation.autoSequenceNumber
  syntax: public final long autoSequenceNumber= 0
  uid: system.fabric.health.HealthInformation.autoSequenceNumber
- field:
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  fullName: system.fabric.health.HealthInformation.unknownSequenceNumber
  name: unknownSequenceNumber
  nameWithType: HealthInformation.unknownSequenceNumber
  syntax: public final long unknownSequenceNumber= -1
  uid: system.fabric.health.HealthInformation.unknownSequenceNumber
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: system.fabric.health.HealthInformation.getDescription()
  name: getDescription()
  nameWithType: HealthInformation.getDescription()
  returns:
    description: <p>A String which describes the health information in human readable form. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the description of the health information. It represents free text used to add human readable information about the report.</p>

    <p>

      <b>Remarks:</b>The maximum string length for the description is 4096 characters. </p>
  syntax: public String getDescription()
  uid: system.fabric.health.HealthInformation.getDescription()
- fullName: system.fabric.health.HealthInformation.getHealthState()
  name: getHealthState()
  nameWithType: HealthInformation.getHealthState()
  returns:
    description: <p>A <xref uid="system.fabric.health.HealthState" data-throw-if-not-resolved="false" data-raw-source="system.fabric.health.HealthState"></xref> representing the reported health state. </p>
    type: <xref href="system.fabric.health.HealthState?alt=system.fabric.health.HealthState&text=HealthState" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the health state of the health information.</p>

    <p>

      <b>Remarks:</b>The accepted health states are <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.health.HealthState#Ok"></xref>, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.health.HealthState#Warning"></xref> and <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.health.HealthState#Error"></xref>. </p>
  syntax: public HealthState getHealthState()
  uid: system.fabric.health.HealthInformation.getHealthState()
- fullName: system.fabric.health.HealthInformation.getProperty()
  name: getProperty()
  nameWithType: HealthInformation.getProperty()
  returns:
    description: <p>A String representing the property of the health report. Together with the SourceId, it uniquely identifies the health information. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the property of the health report.</p>

    <p>

      <b>Remarks:</b>The property is a String and not a fixed enumeration to allow the reporter to categorize the health event for a specific property of the entity. For example, reporter A can report the health of the Node01 "storage" property and reporter B can report the health of the Node01 "connectivity" property. In the health store, these reports are treated as separate health events for the Node01 entity. </p>
  syntax: public String getProperty()
  uid: system.fabric.health.HealthInformation.getProperty()
- fullName: system.fabric.health.HealthInformation.getSequenceNumber()
  name: getSequenceNumber()
  nameWithType: HealthInformation.getSequenceNumber()
  returns:
    description: <p>A long representing the report sequence number. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the sequence number associated with the report. Must be greater than <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.health.HealthInformation#unknownSequenceNumber"></xref>.</p>

    <p>

      <b>Remarks:</b>The report sequence number is used by health store to detect stale reports. Most of the times, the reporter doesn't need to specify the sequence number. The default value AutoSequenceNumber can be used instead. When a health client receives a report with Auto sequence number, it replaces the auto sequence number with a valid sequence number. The sequence number is guaranteed to increase in the same process, even if the client machine time goes backwards. </p>
  syntax: public long getSequenceNumber()
  uid: system.fabric.health.HealthInformation.getSequenceNumber()
- fullName: system.fabric.health.HealthInformation.getSourceId()
  name: getSourceId()
  nameWithType: HealthInformation.getSourceId()
  returns:
    description: <p>A String representing the source of the health report. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the source Identifier which identifies the watchdog/system component which generated the health information.</p>

    <p></p>
  syntax: public String getSourceId()
  uid: system.fabric.health.HealthInformation.getSourceId()
- fullName: system.fabric.health.HealthInformation.getTimeToLive()
  name: getTimeToLive()
  nameWithType: HealthInformation.getTimeToLive()
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.time.Duration"></xref> representing the time to live of the health report. </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets how long the health report is valid. Must be larger than TimeSpan.Zero.</p>

    <p>

      <b>Remarks:</b>When clients report periodically, they should send reports with higher frequency than time to live. If clients report on transition, they can set the time to live to infinite. When time to live expires, the health event that contains the health information is either removed from health store, if RemoveWhenExpired is true or evaluated at error, if RemoveWhenExpired is false. </p>
  syntax: public Duration getTimeToLive()
  uid: system.fabric.health.HealthInformation.getTimeToLive()
- fullName: system.fabric.health.HealthInformation.isRemoveWhenExpired()
  name: isRemoveWhenExpired()
  nameWithType: HealthInformation.isRemoveWhenExpired()
  returns:
    description: <p>true if the report should be removed from health store when expired; otherwise, false. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets a value that indicates whetherÂ the report is removed from health store when it expires. If set to false, the report is treated as an error when expired. false by default.</p>

    <p>

      <b>Remarks:</b>When clients report periodically, they should set RemoveWhenExpired false (default). This way, is the reporter has issues (eg. deadlock) and can't report, the entity is evaluated at error when the health report expires, and this will flag the entity as <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.health.HealthState#Error"></xref>. Periodic health clients should send reports with higher frequency than time to live to account for delays due to health client batching, message transport over the wire and health store processing. </p>
  syntax: public boolean isRemoveWhenExpired()
  uid: system.fabric.health.HealthInformation.isRemoveWhenExpired()
- fullName: system.fabric.health.HealthInformation.setDescription(String description)
  name: setDescription(String description)
  nameWithType: HealthInformation.setDescription(String description)
  parameters:
  - description: <p>A String which describes the health information in human readable form. </p>
    name: description
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the description of the health information. It represents free text used to add human readable information about the report.</p>

    <p>

      <b>Remarks:</b>The maximum string length for the description is 4096 characters. </p>
  syntax: public void setDescription(String description)
  uid: system.fabric.health.HealthInformation.setDescription(String)
- fullName: system.fabric.health.HealthInformation.setRemoveWhenExpired(boolean removeWhenExpired)
  name: setRemoveWhenExpired(boolean removeWhenExpired)
  nameWithType: HealthInformation.setRemoveWhenExpired(boolean removeWhenExpired)
  parameters:
  - description: <p>true if the report should be removed from health store when expired; otherwise, false. </p>
    name: removeWhenExpired
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets a value that indicates whetherÂ the report is removed from health store when it expires. If set to false, the report is treated as an error when expired. false by default.</p>

    <p>

      <b>Remarks:</b>When clients report periodically, they should set RemoveWhenExpired false (default). This way, is the reporter has issues (eg. deadlock) and can't report, the entity is evaluated at error when the health report expires, and this will flag the entity as <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.health.HealthState#Error"></xref>. Periodic health clients should send reports with higher frequency than time to live to account for delays due to health client batching, message transport over the wire and health store processing. </p>
  syntax: public void setRemoveWhenExpired(boolean removeWhenExpired)
  uid: system.fabric.health.HealthInformation.setRemoveWhenExpired(boolean)
- fullName: system.fabric.health.HealthInformation.setSequenceNumber(long sequenceNumber)
  name: setSequenceNumber(long sequenceNumber)
  nameWithType: HealthInformation.setSequenceNumber(long sequenceNumber)
  parameters:
  - description: <p>A long representing the report sequence number. </p>
    name: sequenceNumber
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if sequenceNumber is less or equals than unknownSequenceNumber </p>
  summary: >-
    <p>Sets the sequence number associated with the report. Must be greater than <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.health.HealthInformation#unknownSequenceNumber"></xref>.</p>

    <p>

      <b>Remarks:</b>The report sequence number is used by health store to detect stale reports. Most of the times, the reporter doesn't need to specify the sequence number. The default value AutoSequenceNumber can be used instead. When a health client receives a report with Auto sequence number, it replaces the auto sequence number with a valid sequence number. The sequence number is guaranteed to increase in the same process, even if the client machine time goes backwards. </p>
  syntax: public void setSequenceNumber(long sequenceNumber)
  uid: system.fabric.health.HealthInformation.setSequenceNumber(long)
- fullName: system.fabric.health.HealthInformation.setTimeToLiveSeconds(Duration timeToLive)
  name: setTimeToLiveSeconds(Duration timeToLive)
  nameWithType: HealthInformation.setTimeToLiveSeconds(Duration timeToLive)
  parameters:
  - description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.time.Duration"></xref> representing the time to live of the health report. </p>
    name: timeToLive
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets how long the health report is valid. Must be larger than TimeSpan.Zero.</p>

    <p>

      <b>Remarks:</b>When clients report periodically, they should send reports with higher frequency than time to live. If clients report on transition, they can set the time to live to infinite. When time to live expires, the health event that contains the health information is either removed from health store, if RemoveWhenExpired is true or evaluated at error, if RemoveWhenExpired is false. </p>
  syntax: public void setTimeToLiveSeconds(Duration timeToLive)
  uid: system.fabric.health.HealthInformation.setTimeToLiveSeconds(Duration)
nameWithType: HealthInformation
syntax: public class HealthInformation
type: class
uid: system.fabric.health.HealthInformation
fullName: system.fabric.health.HealthInformation
name: HealthInformation
package: system.fabric.health
summary: <p>Contains the health information about the entity. This information is included in the health report. It is also provided as part of the health event. </p>
metadata: {}
