### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl"
  id: "CreatedResourcesImpl"
  parent: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation"
  children:
  - "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.CreatedResourcesImpl(com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatableUpdatableResourcesRoot<ResourceT>)"
  - "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.clear()"
  - "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.createdRelatedResource(java.lang.String)"
  - "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.put(java.lang.String,ResourceT)"
  - "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.putAll(java.util.Map<? extends java.lang.String,? extends ResourceT>)"
  - "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.remove(java.lang.Object)"
  langs:
  - "java"
  name: "CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>"
  nameWithType: "CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>"
  fullName: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>"
  type: "Class"
  package: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation"
  summary: "Implements CreatedResources."
  syntax:
    content: "private class CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT> extends HashMap<String,ResourceT> implements CreatedResources<ResourceT>"
    typeParameters:
    - id: "ResourceT"
  inheritance:
  - "java.lang.Object"
  - "java.util.AbstractMap"
  - "java.util.HashMap"
  implements:
  - "com.microsoft.azure.management.resources.fluentcore.model.CreatedResources<ResourceT>"
  inheritedMembers:
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
  - "java.util.AbstractMap.equals(java.lang.Object)"
  - "java.util.AbstractMap.hashCode()"
  - "java.util.AbstractMap.toString()"
  - "java.util.HashMap.afterNodeAccess(java.util.HashMap.Node<K,V>)"
  - "java.util.HashMap.afterNodeInsertion(boolean)"
  - "java.util.HashMap.afterNodeRemoval(java.util.HashMap.Node<K,V>)"
  - "java.util.HashMap.capacity()"
  - "java.util.HashMap.clear()"
  - "java.util.HashMap.clone()"
  - "java.util.HashMap.comparableClassFor(java.lang.Object)"
  - "java.util.HashMap.compareComparables(java.lang.Class<?>,java.lang.Object,java.lang.Object)"
  - "java.util.HashMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)"
  - "java.util.HashMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)"
  - "java.util.HashMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)"
  - "java.util.HashMap.containsKey(java.lang.Object)"
  - "java.util.HashMap.containsValue(java.lang.Object)"
  - "java.util.HashMap.entrySet()"
  - "java.util.HashMap.forEach(java.util.function.BiConsumer<? super K,? super V>)"
  - "java.util.HashMap.get(java.lang.Object)"
  - "java.util.HashMap.getNode(int,java.lang.Object)"
  - "java.util.HashMap.getOrDefault(java.lang.Object,V)"
  - "java.util.HashMap.hash(java.lang.Object)"
  - "java.util.HashMap.internalWriteEntries(java.io.ObjectOutputStream)"
  - "java.util.HashMap.isEmpty()"
  - "java.util.HashMap.keySet()"
  - "java.util.HashMap.loadFactor()"
  - "java.util.HashMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)"
  - "java.util.HashMap.newNode(int,K,V,java.util.HashMap.Node<K,V>)"
  - "java.util.HashMap.newTreeNode(int,K,V,java.util.HashMap.Node<K,V>)"
  - "java.util.HashMap.put(K,V)"
  - "java.util.HashMap.putAll(java.util.Map<? extends K,? extends V>)"
  - "java.util.HashMap.putIfAbsent(K,V)"
  - "java.util.HashMap.putMapEntries(java.util.Map<? extends K,? extends V>,boolean)"
  - "java.util.HashMap.putVal(int,K,V,boolean,boolean)"
  - "java.util.HashMap.reinitialize()"
  - "java.util.HashMap.remove(java.lang.Object)"
  - "java.util.HashMap.remove(java.lang.Object,java.lang.Object)"
  - "java.util.HashMap.removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)"
  - "java.util.HashMap.replace(K,V)"
  - "java.util.HashMap.replace(K,V,V)"
  - "java.util.HashMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)"
  - "java.util.HashMap.replacementNode(java.util.HashMap.Node<K,V>,java.util.HashMap.Node<K,V>)"
  - "java.util.HashMap.replacementTreeNode(java.util.HashMap.Node<K,V>,java.util.HashMap.Node<K,V>)"
  - "java.util.HashMap.resize()"
  - "java.util.HashMap.size()"
  - "java.util.HashMap.tableSizeFor(int)"
  - "java.util.HashMap.treeifyBin(java.util.HashMap.Node<K,V>[],int)"
  - "java.util.HashMap.values()"
- uid: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.CreatedResourcesImpl(com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatableUpdatableResourcesRoot<ResourceT>)"
  id: "CreatedResourcesImpl(com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatableUpdatableResourcesRoot<ResourceT>)"
  parent: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl"
  langs:
  - "java"
  name: "CreatedResourcesImpl(CreatableResourcesImpl.CreatableUpdatableResourcesRoot<ResourceT> creatableUpdatableResourcesRoot)"
  nameWithType: "CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.CreatedResourcesImpl(CreatableResourcesImpl.CreatableUpdatableResourcesRoot<ResourceT> creatableUpdatableResourcesRoot)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.CreatedResourcesImpl(CreatableResourcesImpl.CreatableUpdatableResourcesRoot<ResourceT> creatableUpdatableResourcesRoot)"
  overload: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.CreatedResourcesImpl*"
  type: "Constructor"
  package: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation"
  syntax:
    content: " CreatedResourcesImpl(CreatableResourcesImpl.CreatableUpdatableResourcesRoot<ResourceT> creatableUpdatableResourcesRoot)"
    parameters:
    - id: "creatableUpdatableResourcesRoot"
      type: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatableUpdatableResourcesRoot<ResourceT>"
- uid: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.clear()"
  id: "clear()"
  parent: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl"
  langs:
  - "java"
  name: "clear()"
  nameWithType: "CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.clear()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.clear()"
  overload: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.clear*"
  type: "Method"
  package: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation"
  syntax:
    content: "public void clear()"
- uid: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.createdRelatedResource(java.lang.String)"
  id: "createdRelatedResource(java.lang.String)"
  parent: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl"
  langs:
  - "java"
  name: "createdRelatedResource(String key)"
  nameWithType: "CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.createdRelatedResource(String key)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.createdRelatedResource(String key)"
  overload: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.createdRelatedResource*"
  type: "Method"
  package: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation"
  syntax:
    content: "public Indexable createdRelatedResource(String key)"
    parameters:
    - id: "key"
      type: "java.lang.String"
    return:
      type: "com.microsoft.azure.management.resources.fluentcore.model.Indexable"
- uid: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.put(java.lang.String,ResourceT)"
  id: "put(java.lang.String,ResourceT)"
  parent: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl"
  langs:
  - "java"
  name: "put(String key, ResourceT value)"
  nameWithType: "CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.put(String key, ResourceT value)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.put(String key, ResourceT value)"
  overload: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.put*"
  type: "Method"
  package: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation"
  syntax:
    content: "public ResourceT put(String key, ResourceT value)"
    parameters:
    - id: "key"
      type: "java.lang.String"
    - id: "value"
      type: "ResourceT"
    return:
      type: "ResourceT"
- uid: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.putAll(java.util.Map<? extends java.lang.String,? extends ResourceT>)"
  id: "putAll(java.util.Map<? extends java.lang.String,? extends ResourceT>)"
  parent: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl"
  langs:
  - "java"
  name: "putAll(Map<? extends String,? extends ResourceT> m)"
  nameWithType: "CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.putAll(Map<? extends String,? extends ResourceT> m)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.putAll(Map<? extends String,? extends ResourceT> m)"
  overload: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.putAll*"
  type: "Method"
  package: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation"
  syntax:
    content: "public void putAll(Map<? extends String,? extends ResourceT> m)"
    parameters:
    - id: "m"
      type: "java.util.Map<? extends java.lang.String,? extends ResourceT>"
- uid: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.remove(java.lang.Object)"
  id: "remove(java.lang.Object)"
  parent: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl"
  langs:
  - "java"
  name: "remove(Object key)"
  nameWithType: "CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.remove(Object key)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.remove(Object key)"
  overload: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.remove*"
  type: "Method"
  package: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation"
  syntax:
    content: "public ResourceT remove(Object key)"
    parameters:
    - id: "key"
      type: "java.lang.Object"
    return:
      type: "ResourceT"
references:
- uid: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatableUpdatableResourcesRoot<ResourceT>"
  spec.java:
  - uid: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatableUpdatableResourcesRoot"
    name: "CreatableUpdatableResourcesRoot"
    fullName: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatableUpdatableResourcesRoot"
  - name: "<"
    fullName: "<"
  - uid: "ResourceT"
    name: "ResourceT"
    fullName: "ResourceT"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.CreatedResourcesImpl*"
  name: "CreatedResourcesImpl"
  nameWithType: "CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.CreatedResourcesImpl"
  fullName: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.CreatedResourcesImpl"
  package: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.Indexable"
  name: "Indexable"
  nameWithType: "Indexable"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.Indexable"
- uid: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.createdRelatedResource*"
  name: "createdRelatedResource"
  nameWithType: "CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.createdRelatedResource"
  fullName: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.createdRelatedResource"
  package: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation"
- uid: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.clear*"
  name: "clear"
  nameWithType: "CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.clear"
  fullName: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.clear"
  package: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation"
- uid: "ResourceT"
  spec.java:
  - uid: "ResourceT"
    name: "ResourceT"
    fullName: "ResourceT"
- uid: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.put*"
  name: "put"
  nameWithType: "CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.put"
  fullName: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.put"
  package: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.remove*"
  name: "remove"
  nameWithType: "CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.remove"
  fullName: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.remove"
  package: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation"
- uid: "java.util.Map<? extends java.lang.String,? extends ResourceT>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "? extends java.lang.String"
    name: "String"
    fullName: "? extends java.lang.String"
  - name: ","
    fullName: ","
  - uid: "? extends ResourceT"
    name: "? extends ResourceT"
    fullName: "? extends ResourceT"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatedResourcesImpl.putAll*"
  name: "putAll"
  nameWithType: "CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.putAll"
  fullName: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl<T,ImplT,InnerT>.CreatedResourcesImpl<ResourceT>.putAll"
  package: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation"
- uid: "java.util.HashMap<java.lang.String,ResourceT>"
  name: "HashMap<String,ResourceT>"
  nameWithType: "HashMap<String,ResourceT>"
  fullName: "java.util.HashMap<java.lang.String,ResourceT>"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.CreatedResources<ResourceT>"
  name: "CreatedResources<ResourceT>"
  nameWithType: "CreatedResources<ResourceT>"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.CreatedResources<ResourceT>"
- uid: "java.util.HashMap.remove(java.lang.Object)"
  name: "HashMap.remove(Object)"
  nameWithType: "HashMap.remove(Object)"
  fullName: "java.util.HashMap.remove(java.lang.Object)"
- uid: "java.util.HashMap.remove(java.lang.Object,java.lang.Object)"
  name: "HashMap.remove(Object,Object)"
  nameWithType: "HashMap.remove(Object,Object)"
  fullName: "java.util.HashMap.remove(java.lang.Object,java.lang.Object)"
- uid: "java.util.HashMap.hash(java.lang.Object)"
  name: "HashMap.hash(Object)"
  nameWithType: "HashMap.hash(Object)"
  fullName: "java.util.HashMap.hash(java.lang.Object)"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.util.HashMap.forEach(java.util.function.BiConsumer<? super K,? super V>)"
  name: "HashMap.forEach(BiConsumer<? super K,? super V>)"
  nameWithType: "HashMap.forEach(BiConsumer<? super K,? super V>)"
  fullName: "java.util.HashMap.forEach(java.util.function.BiConsumer<? super K,? super V>)"
- uid: "java.util.HashMap.replacementTreeNode(java.util.HashMap.Node<K,V>,java.util.HashMap.Node<K,V>)"
  name: "HashMap.replacementTreeNode(HashMap.Node<K,V>,HashMap.Node<K,V>)"
  nameWithType: "HashMap.replacementTreeNode(HashMap.Node<K,V>,HashMap.Node<K,V>)"
  fullName: "java.util.HashMap.replacementTreeNode(java.util.HashMap.Node<K,V>,java.util.HashMap.Node<K,V>)"
- uid: "java.util.HashMap.getNode(int,java.lang.Object)"
  name: "HashMap.getNode(int,Object)"
  nameWithType: "HashMap.getNode(int,Object)"
  fullName: "java.util.HashMap.getNode(int,java.lang.Object)"
- uid: "java.util.HashMap.containsValue(java.lang.Object)"
  name: "HashMap.containsValue(Object)"
  nameWithType: "HashMap.containsValue(Object)"
  fullName: "java.util.HashMap.containsValue(java.lang.Object)"
- uid: "java.util.HashMap.afterNodeRemoval(java.util.HashMap.Node<K,V>)"
  name: "HashMap.afterNodeRemoval(HashMap.Node<K,V>)"
  nameWithType: "HashMap.afterNodeRemoval(HashMap.Node<K,V>)"
  fullName: "java.util.HashMap.afterNodeRemoval(java.util.HashMap.Node<K,V>)"
- uid: "java.util.HashMap.putMapEntries(java.util.Map<? extends K,? extends V>,boolean)"
  name: "HashMap.putMapEntries(Map<? extends K,? extends V>,boolean)"
  nameWithType: "HashMap.putMapEntries(Map<? extends K,? extends V>,boolean)"
  fullName: "java.util.HashMap.putMapEntries(java.util.Map<? extends K,? extends V>,boolean)"
- uid: "java.util.HashMap.compareComparables(java.lang.Class<?>,java.lang.Object,java.lang.Object)"
  name: "HashMap.compareComparables(Class<?>,Object,Object)"
  nameWithType: "HashMap.compareComparables(Class<?>,Object,Object)"
  fullName: "java.util.HashMap.compareComparables(java.lang.Class<?>,java.lang.Object,java.lang.Object)"
- uid: "java.util.HashMap.resize()"
  name: "HashMap.resize()"
  nameWithType: "HashMap.resize()"
  fullName: "java.util.HashMap.resize()"
- uid: "java.util.HashMap.reinitialize()"
  name: "HashMap.reinitialize()"
  nameWithType: "HashMap.reinitialize()"
  fullName: "java.util.HashMap.reinitialize()"
- uid: "java.util.HashMap.getOrDefault(java.lang.Object,V)"
  name: "HashMap.getOrDefault(Object,V)"
  nameWithType: "HashMap.getOrDefault(Object,V)"
  fullName: "java.util.HashMap.getOrDefault(java.lang.Object,V)"
- uid: "java.util.HashMap.clear()"
  name: "HashMap.clear()"
  nameWithType: "HashMap.clear()"
  fullName: "java.util.HashMap.clear()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.util.HashMap.afterNodeInsertion(boolean)"
  name: "HashMap.afterNodeInsertion(boolean)"
  nameWithType: "HashMap.afterNodeInsertion(boolean)"
  fullName: "java.util.HashMap.afterNodeInsertion(boolean)"
- uid: "java.util.HashMap.afterNodeAccess(java.util.HashMap.Node<K,V>)"
  name: "HashMap.afterNodeAccess(HashMap.Node<K,V>)"
  nameWithType: "HashMap.afterNodeAccess(HashMap.Node<K,V>)"
  fullName: "java.util.HashMap.afterNodeAccess(java.util.HashMap.Node<K,V>)"
- uid: "java.util.HashMap.size()"
  name: "HashMap.size()"
  nameWithType: "HashMap.size()"
  fullName: "java.util.HashMap.size()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.util.HashMap.entrySet()"
  name: "HashMap.entrySet()"
  nameWithType: "HashMap.entrySet()"
  fullName: "java.util.HashMap.entrySet()"
- uid: "java.util.HashMap.newNode(int,K,V,java.util.HashMap.Node<K,V>)"
  name: "HashMap.newNode(int,K,V,HashMap.Node<K,V>)"
  nameWithType: "HashMap.newNode(int,K,V,HashMap.Node<K,V>)"
  fullName: "java.util.HashMap.newNode(int,K,V,java.util.HashMap.Node<K,V>)"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.util.HashMap.comparableClassFor(java.lang.Object)"
  name: "HashMap.comparableClassFor(Object)"
  nameWithType: "HashMap.comparableClassFor(Object)"
  fullName: "java.util.HashMap.comparableClassFor(java.lang.Object)"
- uid: "java.util.HashMap.treeifyBin(java.util.HashMap.Node<K,V>[],int)"
  name: "HashMap.treeifyBin(HashMap.Node<K,V>[],int)"
  nameWithType: "HashMap.treeifyBin(HashMap.Node<K,V>[],int)"
  fullName: "java.util.HashMap.treeifyBin(java.util.HashMap.Node<K,V>[],int)"
- uid: "java.util.HashMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)"
  name: "HashMap.computeIfAbsent(K,Function<? super K,? extends V>)"
  nameWithType: "HashMap.computeIfAbsent(K,Function<? super K,? extends V>)"
  fullName: "java.util.HashMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)"
- uid: "java.util.HashMap.isEmpty()"
  name: "HashMap.isEmpty()"
  nameWithType: "HashMap.isEmpty()"
  fullName: "java.util.HashMap.isEmpty()"
- uid: "java.util.AbstractMap.equals(java.lang.Object)"
  name: "AbstractMap.equals(Object)"
  nameWithType: "AbstractMap.equals(Object)"
  fullName: "java.util.AbstractMap.equals(java.lang.Object)"
- uid: "java.util.HashMap.clone()"
  name: "HashMap.clone()"
  nameWithType: "HashMap.clone()"
  fullName: "java.util.HashMap.clone()"
- uid: "java.util.HashMap.replace(K,V)"
  name: "HashMap.replace(K,V)"
  nameWithType: "HashMap.replace(K,V)"
  fullName: "java.util.HashMap.replace(K,V)"
- uid: "java.util.HashMap.keySet()"
  name: "HashMap.keySet()"
  nameWithType: "HashMap.keySet()"
  fullName: "java.util.HashMap.keySet()"
- uid: "java.util.HashMap.replacementNode(java.util.HashMap.Node<K,V>,java.util.HashMap.Node<K,V>)"
  name: "HashMap.replacementNode(HashMap.Node<K,V>,HashMap.Node<K,V>)"
  nameWithType: "HashMap.replacementNode(HashMap.Node<K,V>,HashMap.Node<K,V>)"
  fullName: "java.util.HashMap.replacementNode(java.util.HashMap.Node<K,V>,java.util.HashMap.Node<K,V>)"
- uid: "java.util.HashMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)"
  name: "HashMap.merge(K,V,BiFunction<? super V,? super V,? extends V>)"
  nameWithType: "HashMap.merge(K,V,BiFunction<? super V,? super V,? extends V>)"
  fullName: "java.util.HashMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)"
- uid: "java.util.HashMap.removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)"
  name: "HashMap.removeNode(int,Object,Object,boolean,boolean)"
  nameWithType: "HashMap.removeNode(int,Object,Object,boolean,boolean)"
  fullName: "java.util.HashMap.removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)"
- uid: "java.util.HashMap.get(java.lang.Object)"
  name: "HashMap.get(Object)"
  nameWithType: "HashMap.get(Object)"
  fullName: "java.util.HashMap.get(java.lang.Object)"
- uid: "java.util.HashMap.putIfAbsent(K,V)"
  name: "HashMap.putIfAbsent(K,V)"
  nameWithType: "HashMap.putIfAbsent(K,V)"
  fullName: "java.util.HashMap.putIfAbsent(K,V)"
- uid: "java.util.HashMap.internalWriteEntries(java.io.ObjectOutputStream)"
  name: "HashMap.internalWriteEntries(ObjectOutputStream)"
  nameWithType: "HashMap.internalWriteEntries(ObjectOutputStream)"
  fullName: "java.util.HashMap.internalWriteEntries(java.io.ObjectOutputStream)"
- uid: "java.util.AbstractMap.toString()"
  name: "AbstractMap.toString()"
  nameWithType: "AbstractMap.toString()"
  fullName: "java.util.AbstractMap.toString()"
- uid: "java.util.HashMap.loadFactor()"
  name: "HashMap.loadFactor()"
  nameWithType: "HashMap.loadFactor()"
  fullName: "java.util.HashMap.loadFactor()"
- uid: "java.util.HashMap.putAll(java.util.Map<? extends K,? extends V>)"
  name: "HashMap.putAll(Map<? extends K,? extends V>)"
  nameWithType: "HashMap.putAll(Map<? extends K,? extends V>)"
  fullName: "java.util.HashMap.putAll(java.util.Map<? extends K,? extends V>)"
- uid: "java.util.HashMap.replace(K,V,V)"
  name: "HashMap.replace(K,V,V)"
  nameWithType: "HashMap.replace(K,V,V)"
  fullName: "java.util.HashMap.replace(K,V,V)"
- uid: "java.util.HashMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)"
  name: "HashMap.compute(K,BiFunction<? super K,? super V,? extends V>)"
  nameWithType: "HashMap.compute(K,BiFunction<? super K,? super V,? extends V>)"
  fullName: "java.util.HashMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)"
- uid: "java.util.HashMap.capacity()"
  name: "HashMap.capacity()"
  nameWithType: "HashMap.capacity()"
  fullName: "java.util.HashMap.capacity()"
- uid: "java.util.HashMap.put(K,V)"
  name: "HashMap.put(K,V)"
  nameWithType: "HashMap.put(K,V)"
  fullName: "java.util.HashMap.put(K,V)"
- uid: "java.util.HashMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)"
  name: "HashMap.replaceAll(BiFunction<? super K,? super V,? extends V>)"
  nameWithType: "HashMap.replaceAll(BiFunction<? super K,? super V,? extends V>)"
  fullName: "java.util.HashMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)"
- uid: "java.util.HashMap.containsKey(java.lang.Object)"
  name: "HashMap.containsKey(Object)"
  nameWithType: "HashMap.containsKey(Object)"
  fullName: "java.util.HashMap.containsKey(java.lang.Object)"
- uid: "java.util.HashMap.values()"
  name: "HashMap.values()"
  nameWithType: "HashMap.values()"
  fullName: "java.util.HashMap.values()"
- uid: "java.util.AbstractMap.hashCode()"
  name: "AbstractMap.hashCode()"
  nameWithType: "AbstractMap.hashCode()"
  fullName: "java.util.AbstractMap.hashCode()"
- uid: "java.util.HashMap.newTreeNode(int,K,V,java.util.HashMap.Node<K,V>)"
  name: "HashMap.newTreeNode(int,K,V,HashMap.Node<K,V>)"
  nameWithType: "HashMap.newTreeNode(int,K,V,HashMap.Node<K,V>)"
  fullName: "java.util.HashMap.newTreeNode(int,K,V,java.util.HashMap.Node<K,V>)"
- uid: "java.util.HashMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)"
  name: "HashMap.computeIfPresent(K,BiFunction<? super K,? super V,? extends V>)"
  nameWithType: "HashMap.computeIfPresent(K,BiFunction<? super K,? super V,? extends V>)"
  fullName: "java.util.HashMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)"
- uid: "java.util.HashMap.tableSizeFor(int)"
  name: "HashMap.tableSizeFor(int)"
  nameWithType: "HashMap.tableSizeFor(int)"
  fullName: "java.util.HashMap.tableSizeFor(int)"
- uid: "java.util.HashMap.putVal(int,K,V,boolean,boolean)"
  name: "HashMap.putVal(int,K,V,boolean,boolean)"
  nameWithType: "HashMap.putVal(int,K,V,boolean,boolean)"
  fullName: "java.util.HashMap.putVal(int,K,V,boolean,boolean)"
- uid: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatableUpdatableResourcesRoot"
  name: "CreatableResourcesImpl.CreatableUpdatableResourcesRoot"
  nameWithType: "CreatableResourcesImpl.CreatableUpdatableResourcesRoot"
  fullName: "com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.CreatableResourcesImpl.CreatableUpdatableResourcesRoot"
- uid: "? extends java.lang.String,? extends ResourceT"
  name: "? extends String,? extends ResourceT"
  nameWithType: "? extends String,? extends ResourceT"
  fullName: "? extends java.lang.String,? extends ResourceT"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,ResourceT"
  name: "String,ResourceT"
  nameWithType: "String,ResourceT"
  fullName: "java.lang.String,ResourceT"
- uid: "java.util.HashMap"
  name: "HashMap"
  nameWithType: "HashMap"
  fullName: "java.util.HashMap"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.CreatedResources"
  name: "CreatedResources"
  nameWithType: "CreatedResources"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.CreatedResources"
- uid: "? super K,? super V>)"
  name: "? super K,? super V>)"
  nameWithType: "? super K,? super V>)"
  fullName: "? super K,? super V>)"
- uid: "java.util.HashMap.forEach(java.util.function.BiConsumer"
  name: "HashMap.forEach(BiConsumer"
  nameWithType: "HashMap.forEach(BiConsumer"
  fullName: "java.util.HashMap.forEach(java.util.function.BiConsumer"
- uid: "K,V>)"
  name: "K,V>)"
  nameWithType: "K,V>)"
  fullName: "K,V>)"
- uid: "K,V>,java.util.HashMap.Node"
  name: "K,V>,HashMap.Node"
  nameWithType: "K,V>,HashMap.Node"
  fullName: "K,V>,java.util.HashMap.Node"
- uid: "java.util.HashMap.replacementTreeNode(java.util.HashMap.Node"
  name: "HashMap.replacementTreeNode(HashMap.Node"
  nameWithType: "HashMap.replacementTreeNode(HashMap.Node"
  fullName: "java.util.HashMap.replacementTreeNode(java.util.HashMap.Node"
- uid: "java.util.HashMap.afterNodeRemoval(java.util.HashMap.Node"
  name: "HashMap.afterNodeRemoval(HashMap.Node"
  nameWithType: "HashMap.afterNodeRemoval(HashMap.Node"
  fullName: "java.util.HashMap.afterNodeRemoval(java.util.HashMap.Node"
- uid: "? extends K,? extends V>,boolean)"
  name: "? extends K,? extends V>,boolean)"
  nameWithType: "? extends K,? extends V>,boolean)"
  fullName: "? extends K,? extends V>,boolean)"
- uid: "java.util.HashMap.putMapEntries(java.util.Map"
  name: "HashMap.putMapEntries(Map"
  nameWithType: "HashMap.putMapEntries(Map"
  fullName: "java.util.HashMap.putMapEntries(java.util.Map"
- uid: "?>,java.lang.Object,java.lang.Object)"
  name: "?>,Object,Object)"
  nameWithType: "?>,Object,Object)"
  fullName: "?>,java.lang.Object,java.lang.Object)"
- uid: "java.util.HashMap.compareComparables(java.lang.Class"
  name: "HashMap.compareComparables(Class"
  nameWithType: "HashMap.compareComparables(Class"
  fullName: "java.util.HashMap.compareComparables(java.lang.Class"
- uid: "java.util.HashMap.afterNodeAccess(java.util.HashMap.Node"
  name: "HashMap.afterNodeAccess(HashMap.Node"
  nameWithType: "HashMap.afterNodeAccess(HashMap.Node"
  fullName: "java.util.HashMap.afterNodeAccess(java.util.HashMap.Node"
- uid: "java.util.HashMap.newNode(int,K,V,java.util.HashMap.Node"
  name: "HashMap.newNode(int,K,V,HashMap.Node"
  nameWithType: "HashMap.newNode(int,K,V,HashMap.Node"
  fullName: "java.util.HashMap.newNode(int,K,V,java.util.HashMap.Node"
- uid: "K,V>[],int)"
  name: "K,V>[],int)"
  nameWithType: "K,V>[],int)"
  fullName: "K,V>[],int)"
- uid: "java.util.HashMap.treeifyBin(java.util.HashMap.Node"
  name: "HashMap.treeifyBin(HashMap.Node"
  nameWithType: "HashMap.treeifyBin(HashMap.Node"
  fullName: "java.util.HashMap.treeifyBin(java.util.HashMap.Node"
- uid: "? super K,? extends V>)"
  name: "? super K,? extends V>)"
  nameWithType: "? super K,? extends V>)"
  fullName: "? super K,? extends V>)"
- uid: "java.util.HashMap.computeIfAbsent(K,java.util.function.Function"
  name: "HashMap.computeIfAbsent(K,Function"
  nameWithType: "HashMap.computeIfAbsent(K,Function"
  fullName: "java.util.HashMap.computeIfAbsent(K,java.util.function.Function"
- uid: "java.util.HashMap.replacementNode(java.util.HashMap.Node"
  name: "HashMap.replacementNode(HashMap.Node"
  nameWithType: "HashMap.replacementNode(HashMap.Node"
  fullName: "java.util.HashMap.replacementNode(java.util.HashMap.Node"
- uid: "java.util.HashMap.merge(K,V,java.util.function.BiFunction"
  name: "HashMap.merge(K,V,BiFunction"
  nameWithType: "HashMap.merge(K,V,BiFunction"
  fullName: "java.util.HashMap.merge(K,V,java.util.function.BiFunction"
- uid: "? super V,? super V,? extends V>)"
  name: "? super V,? super V,? extends V>)"
  nameWithType: "? super V,? super V,? extends V>)"
  fullName: "? super V,? super V,? extends V>)"
- uid: "java.util.HashMap.putAll(java.util.Map"
  name: "HashMap.putAll(Map"
  nameWithType: "HashMap.putAll(Map"
  fullName: "java.util.HashMap.putAll(java.util.Map"
- uid: "? extends K,? extends V>)"
  name: "? extends K,? extends V>)"
  nameWithType: "? extends K,? extends V>)"
  fullName: "? extends K,? extends V>)"
- uid: "java.util.HashMap.compute(K,java.util.function.BiFunction"
  name: "HashMap.compute(K,BiFunction"
  nameWithType: "HashMap.compute(K,BiFunction"
  fullName: "java.util.HashMap.compute(K,java.util.function.BiFunction"
- uid: "? super K,? super V,? extends V>)"
  name: "? super K,? super V,? extends V>)"
  nameWithType: "? super K,? super V,? extends V>)"
  fullName: "? super K,? super V,? extends V>)"
- uid: "java.util.HashMap.replaceAll(java.util.function.BiFunction"
  name: "HashMap.replaceAll(BiFunction"
  nameWithType: "HashMap.replaceAll(BiFunction"
  fullName: "java.util.HashMap.replaceAll(java.util.function.BiFunction"
- uid: "java.util.HashMap.newTreeNode(int,K,V,java.util.HashMap.Node"
  name: "HashMap.newTreeNode(int,K,V,HashMap.Node"
  nameWithType: "HashMap.newTreeNode(int,K,V,HashMap.Node"
  fullName: "java.util.HashMap.newTreeNode(int,K,V,java.util.HashMap.Node"
- uid: "java.util.HashMap.computeIfPresent(K,java.util.function.BiFunction"
  name: "HashMap.computeIfPresent(K,BiFunction"
  nameWithType: "HashMap.computeIfPresent(K,BiFunction"
  fullName: "java.util.HashMap.computeIfPresent(K,java.util.function.BiFunction"
