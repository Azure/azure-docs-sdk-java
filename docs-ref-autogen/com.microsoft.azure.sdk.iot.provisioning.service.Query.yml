### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="java.util.Iterator&lt;QueryResult&gt;" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.Query.getPageSize()
  name: getPageSize()
  nameWithType: Query.getPageSize()
  returns:
    description: >-
      <p>An<code>int 

          </code> with the current pageSize. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Getter for the pageSize.</p>

    <p>PageSize is the maximum number of items in the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QueryResult"></xref> per iteration.</p>

    <p></p>
  syntax: public int getPageSize()
  uid: com.microsoft.azure.sdk.iot.provisioning.service.Query.getPageSize()
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.Query.hasNext()
  name: hasNext()
  nameWithType: Query.hasNext()
  returns:
    description: >-
      <p>The<code>boolean 

          </code><code>true 

          </code> if query is not finalize in the Service. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Getter for hasNext.</p>

    <p>It will return<code>true 

        </code> if the query is not finished in the Device Provisioning Service, and another iteration with <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query.next()" data-throw-if-not-resolved="false" data-raw-source="next()"></xref> may return more items. Call <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query.next()" data-throw-if-not-resolved="false" data-raw-source="next()"></xref> after receive a<code>hasNext 

        </code><code>true 

        </code> will result in a <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QueryResult"></xref> that can or cannot contains elements. And call <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query.next()" data-throw-if-not-resolved="false" data-raw-source="next()"></xref> after receive a<code>hasNext 

        </code><code>false 

        </code> will result in a exception.</p>

    <p></p>
  syntax: public boolean hasNext()
  uid: com.microsoft.azure.sdk.iot.provisioning.service.Query.hasNext()
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.Query.next()
  name: next()
  nameWithType: Query.next()
  exceptions:
  - type: <xref href="NoSuchElementException?alt=NoSuchElementException&text=NoSuchElementException" data-throw-if-not-resolved="False"/>
    description: <p>if the query does no have more pages to return. </p>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QueryResult"></xref> with the next page of items for the query. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.QueryResult?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.QueryResult&text=QueryResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Return the next page of result for the query.</p>

    <p></p>
  syntax: public QueryResult next()
  uid: com.microsoft.azure.sdk.iot.provisioning.service.Query.next()
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.Query.next(String continuationToken)
  name: next(String continuationToken)
  nameWithType: Query.next(String continuationToken)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> with the previous continuationToken. It cannot be<code>null 

          </code> or empty. </p>
    name: continuationToken
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchElementException?alt=NoSuchElementException&text=NoSuchElementException" data-throw-if-not-resolved="False"/>
    description: <p>if the query does no have more pages to return. </p>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QueryResult"></xref> with the next page of items for the query. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.QueryResult?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.QueryResult&text=QueryResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Return the next page of result for the query using a new continuationToken.</p>

    <p></p>
  syntax: public QueryResult next(String continuationToken)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.Query.next(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.Query.setPageSize(int pageSize)
  name: setPageSize(int pageSize)
  nameWithType: Query.setPageSize(int pageSize)
  parameters:
  - description: >-
      <p>an<code>int 

          </code> with the new pageSize. It cannot be negative. The Device Service Client will use its own default pageSize if it is <b>0</b>. </p>
    name: pageSize
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided pageSize is negative. </p>
  summary: >-
    <p>Setter for the pageSize.</p>

    <p>PageSize is the maximum number of items in the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QueryResult"></xref> per iteration.</p>

    <p></p>
  syntax: public void setPageSize(int pageSize)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.Query.setPageSize(int)
nameWithType: Query
syntax: public class Query
type: class
uid: com.microsoft.azure.sdk.iot.provisioning.service.Query
fullName: com.microsoft.azure.sdk.iot.provisioning.service.Query
name: Query
package: com.microsoft.azure.sdk.iot.provisioning.service
summary: >-
  <p>The query iterator.</p>

  <p>The<code>Query 

      </code> iterator is the result of the query factory for <table rows="3" cols="2"><caption>Query factories</caption><row><entry thead="no"><p><b>IndividualEnrollment:</b></p></entry><entry thead="no"><p><xref uid="com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createIndividualEnrollmentQuery(QuerySpecification,int)" data-throw-if-not-resolved="false" data-raw-source="ProvisioningServiceClient#createIndividualEnrollmentQuery(QuerySpecification, int)"></xref></p></entry></row><row><entry thead="no"><p><b>EnrollmentGroup:</b></p></entry><entry thead="no"><p><xref uid="com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createEnrollmentGroupQuery(QuerySpecification,int)" data-throw-if-not-resolved="false" data-raw-source="ProvisioningServiceClient#createEnrollmentGroupQuery(QuerySpecification, int)"></xref></p></entry></row><row><entry thead="no"><p><b>RegistrationStatus:</b></p></entry><entry thead="no"><p><xref uid="com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createEnrollmentGroupRegistrationStateQuery(QuerySpecification,String,int)" data-throw-if-not-resolved="false" data-raw-source="ProvisioningServiceClient#createEnrollmentGroupRegistrationStateQuery(QuerySpecification, String, int)"></xref></p></entry></row></table></p>

  <p>On all cases, the <b>QuerySpecification</b> contains a SQL query that must follow the <a href="https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-query-language">Query Language</a> for the Device Provisioning Service.</p>

  <p>Optionally, an<code>Integer 

      </code> with the <b>pageSize</b>, can determine the maximum number of the items in the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QueryResult"></xref> returned by the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query.next()" data-throw-if-not-resolved="false" data-raw-source="next()"></xref>. It must be any positive integer, and if it contains 0, the Device Provisioning Service will ignore it and use a standard page size.</p>

  <p>You can use this Object as a standard Iterator, just using the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query.hasNext()" data-throw-if-not-resolved="false" data-raw-source="hasNext()"></xref> and <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query.next()" data-throw-if-not-resolved="false" data-raw-source="next()"></xref> in a <code>while 

      </code> loop, up to the point where the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query.hasNext()" data-throw-if-not-resolved="false" data-raw-source="hasNext()"></xref> return<code>false 

      </code> . But, keep in mind that the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QueryResult"></xref> can contain a empty list, even if the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query.hasNext()" data-throw-if-not-resolved="false" data-raw-source="hasNext()"></xref> returned<code>true 

      </code> . For example, image that you have 10 IndividualEnrollment in the Device Provisioning Service and you created new query with the<code>pageSize 

      </code> equals 5. The first<code>hasNext() 

      </code> will return<code>true 

      </code> , and the first<code>next() 

      </code> will return a<code>QueryResult 

      </code> with 5 items. After that you call the<code>hasNext 

      </code> , which will returns<code>true 

      </code> . Now, before you get the next page, somebody delete all the IndividualEnrollment, What happened, when you call the<code>next() 

      </code> , it will return a valid<code>QueryResult 

      </code> , but the QueryResult.getItems() will return a empty list.</p>

  <p>You can also store a query context (QuerySpecification + ContinuationToken) and restart it in the future, from the point where you stopped.</p>

  <p>Besides the Items, the queryResult contains the continuationToken. In any point in the future, you may recreate the query using the same query factories that you used for the first time, and call <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query.next(String)" data-throw-if-not-resolved="false" data-raw-source="next(String)"></xref> providing the stored continuationToken to get the next page.</p>

  <p></p>
metadata: {}
