### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.models.PathPermissions"
fullName: "com.azure.storage.file.datalake.models.PathPermissions"
name: "PathPermissions"
nameWithType: "PathPermissions"
summary: "Represents POSIX-style permissions on a given resource."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class PathPermissions"
constructors:
- uid: "com.azure.storage.file.datalake.models.PathPermissions.PathPermissions()"
  fullName: "com.azure.storage.file.datalake.models.PathPermissions.PathPermissions()"
  name: "PathPermissions()"
  nameWithType: "PathPermissions.PathPermissions()"
  summary: "Initializes a new instance of `PathPermissions` by setting each member to a new instance of <xref uid=\"com.azure.storage.file.datalake.models.RolePermissions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RolePermissions\"></xref>."
  syntax: "public PathPermissions()"
  desc: "Initializes a new instance of `PathPermissions` by setting each member to a new instance of <xref uid=\"com.azure.storage.file.datalake.models.RolePermissions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RolePermissions\"></xref>."
methods:
- uid: "com.azure.storage.file.datalake.models.PathPermissions.equals(java.lang.Object)"
  fullName: "com.azure.storage.file.datalake.models.PathPermissions.equals(Object o)"
  name: "equals(Object o)"
  nameWithType: "PathPermissions.equals(Object o)"
  overridden: "java.lang.Object.equals(java.lang.Object)"
  parameters:
  - name: "o"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean equals(Object o)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathPermissions.getGroup()"
  fullName: "com.azure.storage.file.datalake.models.PathPermissions.getGroup()"
  name: "getGroup()"
  nameWithType: "PathPermissions.getGroup()"
  summary: "Returns the <xref uid=\"com.azure.storage.file.datalake.models.RolePermissions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RolePermissions\"></xref> for the owning group of the resource."
  syntax: "public RolePermissions getGroup()"
  desc: "Returns the <xref uid=\"com.azure.storage.file.datalake.models.RolePermissions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RolePermissions\"></xref> for the owning group of the resource."
  returns:
    description: "the <xref uid=\"com.azure.storage.file.datalake.models.RolePermissions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RolePermissions\"></xref> for the owning group of the resource."
    type: "<xref href=\"com.azure.storage.file.datalake.models.RolePermissions?alt=com.azure.storage.file.datalake.models.RolePermissions&text=RolePermissions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathPermissions.getOther()"
  fullName: "com.azure.storage.file.datalake.models.PathPermissions.getOther()"
  name: "getOther()"
  nameWithType: "PathPermissions.getOther()"
  summary: "Returns the <xref uid=\"com.azure.storage.file.datalake.models.RolePermissions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RolePermissions\"></xref> for the other users."
  syntax: "public RolePermissions getOther()"
  desc: "Returns the <xref uid=\"com.azure.storage.file.datalake.models.RolePermissions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RolePermissions\"></xref> for the other users."
  returns:
    description: "the <xref uid=\"com.azure.storage.file.datalake.models.RolePermissions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RolePermissions\"></xref> for the other users."
    type: "<xref href=\"com.azure.storage.file.datalake.models.RolePermissions?alt=com.azure.storage.file.datalake.models.RolePermissions&text=RolePermissions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathPermissions.getOwner()"
  fullName: "com.azure.storage.file.datalake.models.PathPermissions.getOwner()"
  name: "getOwner()"
  nameWithType: "PathPermissions.getOwner()"
  summary: "Returns the <xref uid=\"com.azure.storage.file.datalake.models.RolePermissions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RolePermissions\"></xref> for the owner of the resource."
  syntax: "public RolePermissions getOwner()"
  desc: "Returns the <xref uid=\"com.azure.storage.file.datalake.models.RolePermissions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RolePermissions\"></xref> for the owner of the resource."
  returns:
    description: "the <xref uid=\"com.azure.storage.file.datalake.models.RolePermissions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RolePermissions\"></xref> for the owner of the resource."
    type: "<xref href=\"com.azure.storage.file.datalake.models.RolePermissions?alt=com.azure.storage.file.datalake.models.RolePermissions&text=RolePermissions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathPermissions.hashCode()"
  fullName: "com.azure.storage.file.datalake.models.PathPermissions.hashCode()"
  name: "hashCode()"
  nameWithType: "PathPermissions.hashCode()"
  overridden: "java.lang.Object.hashCode()"
  syntax: "public int hashCode()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathPermissions.isExtendedInfoInAcl()"
  fullName: "com.azure.storage.file.datalake.models.PathPermissions.isExtendedInfoInAcl()"
  name: "isExtendedInfoInAcl()"
  nameWithType: "PathPermissions.isExtendedInfoInAcl()"
  summary: "Returns whether or not there is more permissions information in the ACLs."
  syntax: "public boolean isExtendedInfoInAcl()"
  desc: "Returns whether or not there is more permissions information in the ACLs. The permissions string only returns information on the owner, owning group, and other, but the ACLs may contain more permissions for specific users or groups."
  returns:
    description: "<code>true</code> if there is more information in the ACL. <code>false</code> otherwise."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathPermissions.isStickyBitSet()"
  fullName: "com.azure.storage.file.datalake.models.PathPermissions.isStickyBitSet()"
  name: "isStickyBitSet()"
  nameWithType: "PathPermissions.isStickyBitSet()"
  summary: "Returns whether or not the sticky bit has been set."
  syntax: "public boolean isStickyBitSet()"
  desc: "Returns whether or not the sticky bit has been set. The sticky bit may be set on directories, the files in that directory may only be renamed or deleted by the file's owner, the directory's owner, or the root user."
  returns:
    description: "<code>true</code> if the sticky bit is set and <code>false</code> otherwise."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathPermissions.parseOctal(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.models.PathPermissions.parseOctal(String octal)"
  name: "parseOctal(String octal)"
  nameWithType: "PathPermissions.parseOctal(String octal)"
  summary: "Converts an octal string into a `PathPermissions` object."
  modifiers:
  - "static"
  parameters:
  - description: "The octal representation of the permissions."
    name: "octal"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static PathPermissions parseOctal(String octal)"
  desc: "Converts an octal string into a `PathPermissions` object. e.g. 1752 0/1 in the first digit indicates sticky bit. Each subsequent octal character can be expanded into three bits. In order of MSB to LSB, the bits represent read, write, execute."
  returns:
    description: "The permissions parsed out into a <code>PathPermissions</code> instance."
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathPermissions?alt=com.azure.storage.file.datalake.models.PathPermissions&text=PathPermissions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathPermissions.parseSymbolic(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.models.PathPermissions.parseSymbolic(String str)"
  name: "parseSymbolic(String str)"
  nameWithType: "PathPermissions.parseSymbolic(String str)"
  summary: "Converts a symbolic representation of the permissions into a `PathPermissions` object."
  modifiers:
  - "static"
  parameters:
  - description: "The symbolic representation of the permissions."
    name: "str"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static PathPermissions parseSymbolic(String str)"
  desc: "Converts a symbolic representation of the permissions into a `PathPermissions` object. e.g. rwxr-x-wT Each set of three characters correspondes to owner, owning group, and other respectively. 'r', 'w', and 'x' respectively refer to read, write, and execute. A '-' indicates the permission is not given. The sticky bit, if set, takes the place of the last execute bit; a 't' takes the place of 'x' and a 'T' takes the place of '-'."
  returns:
    description: "The permissions parsed out into a <code>PathPermissions</code> instance."
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathPermissions?alt=com.azure.storage.file.datalake.models.PathPermissions&text=PathPermissions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathPermissions.setGroup(com.azure.storage.file.datalake.models.RolePermissions)"
  fullName: "com.azure.storage.file.datalake.models.PathPermissions.setGroup(RolePermissions group)"
  name: "setGroup(RolePermissions group)"
  nameWithType: "PathPermissions.setGroup(RolePermissions group)"
  summary: "Sets the permissions for the owning group of the resource."
  parameters:
  - description: "The <xref uid=\"com.azure.storage.file.datalake.models.RolePermissions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RolePermissions\"></xref> that specify what permissions the owning group should have."
    name: "group"
    type: "<xref href=\"com.azure.storage.file.datalake.models.RolePermissions?alt=com.azure.storage.file.datalake.models.RolePermissions&text=RolePermissions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PathPermissions setGroup(RolePermissions group)"
  desc: "Sets the permissions for the owning group of the resource."
  returns:
    description: "The updated PathPermissions object."
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathPermissions?alt=com.azure.storage.file.datalake.models.PathPermissions&text=PathPermissions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathPermissions.setOther(com.azure.storage.file.datalake.models.RolePermissions)"
  fullName: "com.azure.storage.file.datalake.models.PathPermissions.setOther(RolePermissions other)"
  name: "setOther(RolePermissions other)"
  nameWithType: "PathPermissions.setOther(RolePermissions other)"
  summary: "Sets the permissions for the other users of the resource."
  parameters:
  - description: "The <xref uid=\"com.azure.storage.file.datalake.models.RolePermissions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RolePermissions\"></xref> that specify what permissions other users should have."
    name: "other"
    type: "<xref href=\"com.azure.storage.file.datalake.models.RolePermissions?alt=com.azure.storage.file.datalake.models.RolePermissions&text=RolePermissions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PathPermissions setOther(RolePermissions other)"
  desc: "Sets the permissions for the other users of the resource."
  returns:
    description: "The updated PathPermissions object."
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathPermissions?alt=com.azure.storage.file.datalake.models.PathPermissions&text=PathPermissions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathPermissions.setOwner(com.azure.storage.file.datalake.models.RolePermissions)"
  fullName: "com.azure.storage.file.datalake.models.PathPermissions.setOwner(RolePermissions owner)"
  name: "setOwner(RolePermissions owner)"
  nameWithType: "PathPermissions.setOwner(RolePermissions owner)"
  summary: "Sets the permissions for the owner of the resource."
  parameters:
  - description: "The <xref uid=\"com.azure.storage.file.datalake.models.RolePermissions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RolePermissions\"></xref> that specify what permissions the owner should have."
    name: "owner"
    type: "<xref href=\"com.azure.storage.file.datalake.models.RolePermissions?alt=com.azure.storage.file.datalake.models.RolePermissions&text=RolePermissions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PathPermissions setOwner(RolePermissions owner)"
  desc: "Sets the permissions for the owner of the resource."
  returns:
    description: "The updated PathPermissions object."
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathPermissions?alt=com.azure.storage.file.datalake.models.PathPermissions&text=PathPermissions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathPermissions.setStickyBit(boolean)"
  fullName: "com.azure.storage.file.datalake.models.PathPermissions.setStickyBit(boolean hasStickyBit)"
  name: "setStickyBit(boolean hasStickyBit)"
  nameWithType: "PathPermissions.setStickyBit(boolean hasStickyBit)"
  summary: "Sets the value of the sticky bit."
  parameters:
  - description: "<code>True</code> to set the sticky bit and <code>false</code> to clear it."
    name: "hasStickyBit"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PathPermissions setStickyBit(boolean hasStickyBit)"
  desc: "Sets the value of the sticky bit. The sticky bit may be set on directories, the files in that directory may only be renamed or deleted by the file's owner, the directory's owner, or the root user."
  returns:
    description: "The updated PathPermissions object."
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathPermissions?alt=com.azure.storage.file.datalake.models.PathPermissions&text=PathPermissions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathPermissions.toString()"
  fullName: "com.azure.storage.file.datalake.models.PathPermissions.toString()"
  name: "toString()"
  nameWithType: "PathPermissions.toString()"
  summary: "Converts this object into its octal representation."
  overridden: "java.lang.Object.toString()"
  syntax: "public String toString()"
  desc: "Converts this object into its octal representation."
  returns:
    description: "A <code>String</code> that represents the permissions in octal."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Represents POSIX-style permissions on a given resource. Each resource specifies permissions for the owner, the owning group, and everyone else. Permissions for users or groups not included here can be set using an Access Control List. Manipulating resource permissions is only supported when ADLS interop and Hierarchical Namespace are enabled."
metadata: {}
package: "com.azure.storage.file.datalake.models"
artifact: com.azure:azure-storage-file-datalake:12.12.0
