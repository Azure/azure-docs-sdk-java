items:
- uid: system.fabric._atomic_group_state_provider
  id: _atomic_group_state_provider
  parent: system.fabric
  href: system.fabric._atomic_group_state_provider.yml
  langs:
  - java
  name: AtomicGroupStateProvider
  nameWithType: AtomicGroupStateProvider
  fullName: system.fabric.AtomicGroupStateProvider
  type: Interface
  source:
    remote:
      path: src/prod/src/java/system.fabric/src/system/fabric/AtomicGroupStateProvider.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/AtomicGroupStateProvider.java
    startLine: 7
  package: system.fabric
  syntax:
    content: public interface AtomicGroupStateProvider extends StateProvider
  inheritedMembers:
  - system.fabric._state_provider.getCopyContext()
  - system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)
  - system.fabric._state_provider.getLastCommittedSequenceNumber()
  - system.fabric._state_provider.onDataLossAsync(CancellationToken)
  - system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)
references:
- uid: system.fabric._state_provider.getCopyContext()
  parent: system.fabric._state_provider
  href: system.fabric._state_provider.yml
  name: getCopyContext()
  nameWithType: StateProvider.getCopyContext()
  fullName: OperationDataStream system.fabric.StateProvider.getCopyContext()
  type: Method
  summary: >-
    <p>Obtains context on a Secondary replica after it is created and opened to send context to the Primary replica.</p>

    <p>

      <bold>Remarks:</bold>The Primary replica analyzes the context and sends back state via <xref href="system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false"></xref> . <xref href="system.fabric._state_provider.getCopyContext()" data-throw-if-not-resolved="false"></xref> is called on newly created, idle Secondary replicas and provides a mechanism to asynchronously establish a bidirectional conversation with the Primary replica. The Secondary replica sends <xref href="system.fabric._operation_data" data-throw-if-not-resolved="false"></xref> objects with which the Primary replica can determine the progress of collecting context on the Secondary replica. The Primary replica responds by sending the required state back. See <xref href="system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false"></xref> at the Primary replica for the other half of the exchange. For in-memory services, the <xref href="system.fabric._state_provider.getCopyContext()" data-throw-if-not-resolved="false"></xref> method is not called, as the state of the Secondary replicas is known (they are empty and will require all of the state). </p>
  syntax:
    content: public OperationDataStream getCopyContext()
    return:
      type: system.fabric._operation_data_stream
      description: <p>Returns <xref href="system.fabric._operation_data_stream" data-throw-if-not-resolved="false"></xref>. </p>
- uid: system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)
  parent: system.fabric._state_provider
  href: system.fabric._state_provider.yml
  name: getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
  nameWithType: StateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
  fullName: OperationDataStream system.fabric.StateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
  type: Method
  summary: >-
    <p>Obtains state on a Primary replica that is required to build a Secondary replica.</p>

    <p>

      <bold>Remarks:</bold>Just as <xref href="system.fabric._state_provider.getCopyContext()" data-throw-if-not-resolved="false"></xref> enables the Secondary replica to send context to the Primary replica via an <xref href="system.fabric._operation_data_stream" data-throw-if-not-resolved="false"></xref>, <xref href="system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false"></xref> enables the Primary replica to respond with an <xref href="system.fabric._operation_data_stream" data-throw-if-not-resolved="false"></xref>. The stream contains objects that are delivered to the Secondary replica via the <ref refid="" kindref="compound">system.fabric.StateReplicator#getCopyStream()</ref> method of the <xref href="system.fabric._fabric_replicator" data-throw-if-not-resolved="false"></xref> class. The objects implement <xref href="system.fabric._operation" data-throw-if-not-resolved="false"></xref> and contain the specified data. When the Primary replica receives this call, it should create and return another <xref href="system.fabric._operation_data_stream" data-throw-if-not-resolved="false"></xref> that contains <xref href="system.fabric._operation_data" data-throw-if-not-resolved="false"></xref>. <xref href="system.fabric._operation_data" data-throw-if-not-resolved="false"></xref> represents the data/state that the Secondary replica </p>
  syntax:
    content: public OperationDataStream getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
    parameters:
    - id: upToSequenceNumber
      type: system.fabric._sequence_number
      description: <p>The maximum last sequence number (LSN) that should be placed in the copy stream via the <ref refid="" kindref="compound">system.fabric.StateReplicator#getCopyStream()</ref> method. LSNs greater than this number are delivered to the Secondary replica as a part of the replication stream via the <ref refid="" kindref="compound">system.fabric.StateReplicator#getReplicationStream()</ref> method. </p>
    - id: copyContext
      type: system.fabric._operation_data_stream
      description: <p>An <xref href="system.fabric._operation_data_stream" data-throw-if-not-resolved="false"></xref> that contains the <xref href="system.fabric._operation_data" data-throw-if-not-resolved="false"></xref> objects that are created by the Secondary replica. requires to catch up to the provided </p>
    return:
      type: system.fabric._operation_data_stream
      description: <p>Returns <xref href="system.fabric._operation_data_stream" data-throw-if-not-resolved="false"></xref>. </p>
- uid: system.fabric._state_provider.getLastCommittedSequenceNumber()
  parent: system.fabric._state_provider
  href: system.fabric._state_provider.yml
  name: getLastCommittedSequenceNumber()
  nameWithType: StateProvider.getLastCommittedSequenceNumber()
  fullName: long system.fabric.StateProvider.getLastCommittedSequenceNumber()
  type: Method
  summary: >-
    <p>Obtains the last sequence number that the service has committed.</p>

    <p></p>
  syntax:
    content: public long getLastCommittedSequenceNumber()
    return:
      type: 0364520f
      description: <p>Returns long. </p>
- uid: system.fabric._state_provider.onDataLossAsync(CancellationToken)
  parent: system.fabric._state_provider
  href: system.fabric._state_provider.yml
  name: onDataLossAsync(CancellationToken cancellationToken)
  nameWithType: StateProvider.onDataLossAsync(CancellationToken cancellationToken)
  fullName: CompletableFuture<Boolean> system.fabric.StateProvider.onDataLossAsync(CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>Indicates that a write quorum of replicas in this replica set has been lost, and that therefore data loss might have occurred. The replica set consists of a majority of replicas, which includes the Primary replica.</p>

    <p>

      <bold>Remarks:</bold>When the Service Fabric runtime observes the failure of a quorum of replicas, which includes the Primary replica, it elects a new Primary replica and immediately calls this method on the new Primary replica. A Primary replica that is informed of possible data loss can choose to restore its state from some external data source or can continue to run with the state that it currently has. If the service continues to run with its current state, it should return false from this method, which indicates that no state change has been made. If it has restored or altered its state, such as rolling back incomplete work, it should return true. If true is returned, then the state in other replicas must be assumed to be incorrect. Therefore, the Service Fabric runtime removes the other replicas from the replica set and recreates them. </p>
  syntax:
    content: public CompletableFuture<Boolean> onDataLossAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref href="system.fabric._cancellation_token" data-throw-if-not-resolved="false"></xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 7e53ac82
      description: <p>Returns <ref refid="" kindref="compound">CompletableFuture</ref> of type <ref refid="" kindref="compound">java.lang.Boolean</ref>, that indicates whether the state provider as part of processing this notification has changed its state </p>
- uid: system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)
  parent: system.fabric._state_provider
  href: system.fabric._state_provider.yml
  name: updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)
  nameWithType: StateProvider.updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)
  fullName: CompletableFuture<?> system.fabric.StateProvider.updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>Indicates to a replica that the configuration of a replica set has changed due to a change or attempted change to the Primary replica. The change occurs due to failure or load balancing of the previous Primary replica. <xref href="system.fabric._epoch" data-throw-if-not-resolved="false"></xref> changes act as a barrier by segmenting operations into the exact configuration periods in which they were sent by a specific Primary replica.</p>

    <p>

      <bold>Remarks:</bold>The information in the <xref href="system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false"></xref> method enables the service to maintain a progress vector, which is a list of each epoch that the replica has received, and the maximum LSN that they contained. The progress vector data along with the current applied maximum LSN is useful for a Secondary replica to send during the copy operation to describe the state of the replica. Comparing progress vectors that are received from Secondary replicas during the copy operation enables Primary replicas to determine whether the Secondary replica is up-to-date, what state must be sent to the Secondary replica, and whether the Secondary replica has made false progress. False progress means that a secondary replica reports an LSN in a previous epoch was greater than the LSN that the Primary replica has in its progress vector. </p>
  syntax:
    content: public CompletableFuture<?> updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)
    parameters:
    - id: epoch
      type: system.fabric._epoch
      description: <p>The new <xref href="system.fabric._epoch" data-throw-if-not-resolved="false"></xref>. </p>
    - id: previousEpochLastSequenceNumber
      type: system.fabric._sequence_number
      description: <p>The maximum sequence number (LSN) in the previous epoch. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref href="system.fabric._cancellation_token" data-throw-if-not-resolved="false"></xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>Returns <ref refid="" kindref="compound">CompletableFuture</ref>. </p>
- uid: system.fabric._state_provider
  parent: system.fabric
  href: system.fabric._state_provider.yml
  name: StateProvider
  nameWithType: StateProvider
  fullName: system.fabric.StateProvider
  type: Interface
  summary: <p>Defines the behavior that a service must implement to interact with the <xref href="system.fabric._fabric_replicator" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public interface StateProvider
