### YamlMime:JavaMember
uid: "com.azure.monitor.query.LogsQueryAsyncClient.queryBatch*"
fullName: "com.azure.monitor.query.LogsQueryAsyncClient.queryBatch"
name: "queryBatch"
nameWithType: "LogsQueryAsyncClient.queryBatch"
members:
- uid: "com.azure.monitor.query.LogsQueryAsyncClient.queryBatch(com.azure.monitor.query.models.LogsBatchQuery)"
  fullName: "com.azure.monitor.query.LogsQueryAsyncClient.queryBatch(LogsBatchQuery logsBatchQuery)"
  name: "queryBatch(LogsBatchQuery logsBatchQuery)"
  nameWithType: "LogsQueryAsyncClient.queryBatch(LogsBatchQuery logsBatchQuery)"
  summary: "Returns all the Azure Monitor logs matching the given batch of queries.\n\n**Execute a batch of logs queries**\n\n```java\nLogsBatchQuery batchQuery = new LogsBatchQuery();\n String queryId1 = batchQuery.addWorkspaceQuery(\"{workspace-id-1}\", \"{kusto-query-1}\", QueryTimeInterval.LAST_DAY);\n String queryId2 = batchQuery.addWorkspaceQuery(\"{workspace-id-2}\", \"{kusto-query-2}\",\n         QueryTimeInterval.LAST_7_DAYS, new LogsQueryOptions().setServerTimeout(Duration.ofMinutes(2)));\n\n Mono<LogsBatchQueryResultCollection> batchQueryResponse = logsQueryAsyncClient.queryBatch(batchQuery);\n\n batchQueryResponse.subscribe(result -> {\n     for (LogsBatchQueryResult queryResult : result.getBatchResults()) {\n         System.out.println(\"Logs query result for query id \" + queryResult.getId());\n         for (LogsTableRow row : queryResult.getTable().getRows()) {\n             System.out.println(row.getRow()\n                     .stream()\n                     .map(LogsTableCell::getValueAsString)\n                     .collect(Collectors.joining(\",\")));\n         }\n     }\n });\n```"
  parameters:
  - description: "<xref uid=\"com.azure.monitor.query.models.LogsBatchQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LogsBatchQuery\"></xref> containing a batch of queries."
    name: "logsBatchQuery"
    type: "<xref href=\"com.azure.monitor.query.models.LogsBatchQuery?alt=com.azure.monitor.query.models.LogsBatchQuery&text=LogsBatchQuery\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<LogsBatchQueryResultCollection> queryBatch(LogsBatchQuery logsBatchQuery)"
  returns:
    description: "A collection of query results corresponding to the input batch of queries.@return"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.monitor.query.models.LogsBatchQueryResultCollection?alt=com.azure.monitor.query.models.LogsBatchQueryResultCollection&text=LogsBatchQueryResultCollection\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.monitor.query"
artifact: com.azure:azure-monitor-query:1.0.4
