### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.eventhubs.EventProcessorClient
  id: EventProcessorClient
  artifact: com.azure:azure-messaging-eventhubs:5.1.1
  parent: com.azure.messaging.eventhubs
  children:
  - com.azure.messaging.eventhubs.EventProcessorClient.getIdentifier()
  - com.azure.messaging.eventhubs.EventProcessorClient.isRunning()
  - com.azure.messaging.eventhubs.EventProcessorClient.start()
  - com.azure.messaging.eventhubs.EventProcessorClient.stop()
  langs:
  - java
  name: EventProcessorClient
  nameWithType: EventProcessorClient
  fullName: com.azure.messaging.eventhubs.EventProcessorClient
  type: Class
  package: com.azure.messaging.eventhubs
  summary: >-
    EventProcessorClient provides a convenient mechanism to consume events from all partitions of an Event Hub in the context of a consumer group. Event Processor-based application consists of one or more instances of EventProcessorClient(s) which are set up to consume events from the same Event Hub, consumer group to balance the workload across different instances and track progress when events are processed. Based on the number of instances running, each EventProcessorClient may own zero or more partitions to balance the workload among all the instances.


    To create an instance of EventProcessorClient, use the fluent <xref uid="com.azure.messaging.eventhubs.EventProcessorClientBuilder" data-throw-if-not-resolved="false">EventProcessorClientBuilder</xref>.
  syntax:
    content: public class EventProcessorClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.messaging.eventhubs.EventProcessorClient.EventProcessorClient(com.azure.messaging.eventhubs.EventHubClientBuilder,java.lang.String,java.util.function.Supplier<com.azure.messaging.eventhubs.implementation.PartitionProcessor>,com.azure.messaging.eventhubs.CheckpointStore,boolean,com.azure.core.amqp.implementation.TracerProvider,java.util.function.Consumer<com.azure.messaging.eventhubs.models.ErrorContext>,java.util.Map<java.lang.String,com.azure.messaging.eventhubs.models.EventPosition>,int,java.time.Duration,boolean)
  id: EventProcessorClient(com.azure.messaging.eventhubs.EventHubClientBuilder,java.lang.String,java.util.function.Supplier<com.azure.messaging.eventhubs.implementation.PartitionProcessor>,com.azure.messaging.eventhubs.CheckpointStore,boolean,com.azure.core.amqp.implementation.TracerProvider,java.util.function.Consumer<com.azure.messaging.eventhubs.models.ErrorContext>,java.util.Map<java.lang.String,com.azure.messaging.eventhubs.models.EventPosition>,int,java.time.Duration,boolean)
  artifact: com.azure:azure-messaging-eventhubs:5.1.1
  parent: com.azure.messaging.eventhubs.EventProcessorClient
  langs:
  - java
  name: EventProcessorClient(EventHubClientBuilder eventHubClientBuilder, String consumerGroup, Supplier<PartitionProcessor> partitionProcessorFactory, CheckpointStore checkpointStore, boolean trackLastEnqueuedEventProperties, TracerProvider tracerProvider, Consumer<ErrorContext> processError, Map<String,EventPosition> initialPartitionEventPosition, int maxBatchSize, Duration maxWaitTime, boolean batchReceiveMode)
  nameWithType: EventProcessorClient.EventProcessorClient(EventHubClientBuilder eventHubClientBuilder, String consumerGroup, Supplier<PartitionProcessor> partitionProcessorFactory, CheckpointStore checkpointStore, boolean trackLastEnqueuedEventProperties, TracerProvider tracerProvider, Consumer<ErrorContext> processError, Map<String,EventPosition> initialPartitionEventPosition, int maxBatchSize, Duration maxWaitTime, boolean batchReceiveMode)
  fullName: com.azure.messaging.eventhubs.EventProcessorClient.EventProcessorClient(EventHubClientBuilder eventHubClientBuilder, String consumerGroup, Supplier<PartitionProcessor> partitionProcessorFactory, CheckpointStore checkpointStore, boolean trackLastEnqueuedEventProperties, TracerProvider tracerProvider, Consumer<ErrorContext> processError, Map<String,EventPosition> initialPartitionEventPosition, int maxBatchSize, Duration maxWaitTime, boolean batchReceiveMode)
  overload: com.azure.messaging.eventhubs.EventProcessorClient.EventProcessorClient*
  type: Constructor
  package: com.azure.messaging.eventhubs
  summary: Package-private constructor. Use <xref uid="com.azure.messaging.eventhubs.EventHubClientBuilder" data-throw-if-not-resolved="false">EventHubClientBuilder</xref> to create an instance.
  syntax:
    content: " EventProcessorClient(EventHubClientBuilder eventHubClientBuilder, String consumerGroup, Supplier<PartitionProcessor> partitionProcessorFactory, CheckpointStore checkpointStore, boolean trackLastEnqueuedEventProperties, TracerProvider tracerProvider, Consumer<ErrorContext> processError, Map<String,EventPosition> initialPartitionEventPosition, int maxBatchSize, Duration maxWaitTime, boolean batchReceiveMode)"
    parameters:
    - id: eventHubClientBuilder
      type: com.azure.messaging.eventhubs.EventHubClientBuilder
      description: The <xref uid="com.azure.messaging.eventhubs.EventHubClientBuilder" data-throw-if-not-resolved="false">EventHubClientBuilder</xref>.
    - id: consumerGroup
      type: java.lang.String
      description: The consumer group name used in this event processor to consumer events.
    - id: partitionProcessorFactory
      type: java.util.function.Supplier<com.azure.messaging.eventhubs.implementation.PartitionProcessor>
      description: The factory to create new partition processor(s).
    - id: checkpointStore
      type: com.azure.messaging.eventhubs.CheckpointStore
      description: The store used for reading and updating partition ownership and checkpoints. information.
    - id: trackLastEnqueuedEventProperties
      type: boolean
      description: >-
        If set to <code>true</code>, all events received by this EventProcessorClient
         will also include the last enqueued event properties for it's respective partitions.
    - id: tracerProvider
      type: com.azure.core.amqp.implementation.TracerProvider
      description: The tracer implementation.
    - id: processError
      type: java.util.function.Consumer<com.azure.messaging.eventhubs.models.ErrorContext>
      description: Error handler for any errors that occur outside the context of a partition.
    - id: initialPartitionEventPosition
      type: java.util.Map<java.lang.String,com.azure.messaging.eventhubs.models.EventPosition>
      description: Map of initial event positions for partition ids.
    - id: maxBatchSize
      type: int
      description: The maximum batch size to receive per users' process handler invocation.
    - id: maxWaitTime
      type: java.time.Duration
      description: The maximum time to wait to receive a batch or a single event.
    - id: batchReceiveMode
      type: boolean
      description: >-
        The boolean value indicating if this processor is configured to receive in batches or
         single events.
- uid: com.azure.messaging.eventhubs.EventProcessorClient.getIdentifier()
  id: getIdentifier()
  artifact: com.azure:azure-messaging-eventhubs:5.1.1
  parent: com.azure.messaging.eventhubs.EventProcessorClient
  langs:
  - java
  name: getIdentifier()
  nameWithType: EventProcessorClient.getIdentifier()
  fullName: com.azure.messaging.eventhubs.EventProcessorClient.getIdentifier()
  overload: com.azure.messaging.eventhubs.EventProcessorClient.getIdentifier*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: The identifier is a unique name given to this event processor instance.
  syntax:
    content: public String getIdentifier()
    return:
      type: java.lang.String
      description: Identifier for this event processor.
- uid: com.azure.messaging.eventhubs.EventProcessorClient.isRunning()
  id: isRunning()
  artifact: com.azure:azure-messaging-eventhubs:5.1.1
  parent: com.azure.messaging.eventhubs.EventProcessorClient
  langs:
  - java
  name: isRunning()
  nameWithType: EventProcessorClient.isRunning()
  fullName: com.azure.messaging.eventhubs.EventProcessorClient.isRunning()
  overload: com.azure.messaging.eventhubs.EventProcessorClient.isRunning*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Returns `true` if the event processor is running. If the event processor is already running, calling <xref uid="com.azure.messaging.eventhubs.EventProcessorClient.start()" data-throw-if-not-resolved="false">#start()</xref> has no effect.
  syntax:
    content: public synchronized boolean isRunning()
    return:
      type: boolean
      description: <code>true</code> if the event processor is running.
- uid: com.azure.messaging.eventhubs.EventProcessorClient.start()
  id: start()
  artifact: com.azure:azure-messaging-eventhubs:5.1.1
  parent: com.azure.messaging.eventhubs.EventProcessorClient
  langs:
  - java
  name: start()
  nameWithType: EventProcessorClient.start()
  fullName: com.azure.messaging.eventhubs.EventProcessorClient.start()
  overload: com.azure.messaging.eventhubs.EventProcessorClient.start*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: >-
    Starts processing of events for all partitions of the Event Hub that this event processor can own, assigning a dedicated <xref uid="com.azure.messaging.eventhubs.implementation.PartitionProcessor" data-throw-if-not-resolved="false">PartitionProcessor</xref> to each partition. If there are other Event Processors active for the same consumer group on the Event Hub, responsibility for partitions will be shared between them.


    Subsequent calls to start will be ignored if this event processor is already running. Calling start after <xref uid="com.azure.messaging.eventhubs.EventProcessorClient.stop()" data-throw-if-not-resolved="false">#stop()</xref> is called will restart this event processor.


    **Starting the processor to consume events from all partitions**


    ```java

    eventProcessorClient.start();
     // Continue to perform other tasks while the processor is running in the background.
     eventProcessorClient.stop();
    ```
  syntax:
    content: public synchronized void start()
- uid: com.azure.messaging.eventhubs.EventProcessorClient.stop()
  id: stop()
  artifact: com.azure:azure-messaging-eventhubs:5.1.1
  parent: com.azure.messaging.eventhubs.EventProcessorClient
  langs:
  - java
  name: stop()
  nameWithType: EventProcessorClient.stop()
  fullName: com.azure.messaging.eventhubs.EventProcessorClient.stop()
  overload: com.azure.messaging.eventhubs.EventProcessorClient.stop*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: >-
    Stops processing events for all partitions owned by this event processor. All <xref uid="com.azure.messaging.eventhubs.implementation.PartitionProcessor" data-throw-if-not-resolved="false">PartitionProcessor</xref> will be shutdown and any open resources will be closed.


    Subsequent calls to stop will be ignored if the event processor is not running.


    **Stopping the processor**


    ```java

    eventProcessorClient.start();
     // Continue to perform other tasks while the processor is running in the background.
     eventProcessorClient.stop();
    ```
  syntax:
    content: public synchronized void stop()
references:
- uid: com.azure.messaging.eventhubs.EventHubClientBuilder
  name: EventHubClientBuilder
  nameWithType: EventHubClientBuilder
  fullName: com.azure.messaging.eventhubs.EventHubClientBuilder
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: java.util.function.Supplier<com.azure.messaging.eventhubs.implementation.PartitionProcessor>
  spec.java:
  - uid: java.util.function.Supplier
    name: Supplier
    fullName: java.util.function.Supplier
  - name: <
    fullName: <
  - uid: com.azure.messaging.eventhubs.implementation.PartitionProcessor
    name: PartitionProcessor
    fullName: com.azure.messaging.eventhubs.implementation.PartitionProcessor
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.eventhubs.CheckpointStore
  name: CheckpointStore
  nameWithType: CheckpointStore
  fullName: com.azure.messaging.eventhubs.CheckpointStore
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.core.amqp.implementation.TracerProvider
  spec.java:
  - uid: com.azure.core.amqp.implementation.TracerProvider
    name: TracerProvider
    fullName: com.azure.core.amqp.implementation.TracerProvider
- uid: java.util.function.Consumer<com.azure.messaging.eventhubs.models.ErrorContext>
  spec.java:
  - uid: java.util.function.Consumer
    name: Consumer
    fullName: java.util.function.Consumer
  - name: <
    fullName: <
  - uid: com.azure.messaging.eventhubs.models.ErrorContext
    name: ErrorContext
    fullName: com.azure.messaging.eventhubs.models.ErrorContext
  - name: '>'
    fullName: '>'
- uid: java.util.Map<java.lang.String,com.azure.messaging.eventhubs.models.EventPosition>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: com.azure.messaging.eventhubs.models.EventPosition
    name: EventPosition
    fullName: com.azure.messaging.eventhubs.models.EventPosition
  - name: '>'
    fullName: '>'
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: com.azure.messaging.eventhubs.EventProcessorClient.EventProcessorClient*
  name: EventProcessorClient
  nameWithType: EventProcessorClient.EventProcessorClient
  fullName: com.azure.messaging.eventhubs.EventProcessorClient.EventProcessorClient
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventProcessorClient.getIdentifier*
  name: getIdentifier
  nameWithType: EventProcessorClient.getIdentifier
  fullName: com.azure.messaging.eventhubs.EventProcessorClient.getIdentifier
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventProcessorClient.start*
  name: start
  nameWithType: EventProcessorClient.start
  fullName: com.azure.messaging.eventhubs.EventProcessorClient.start
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventProcessorClient.stop*
  name: stop
  nameWithType: EventProcessorClient.stop
  fullName: com.azure.messaging.eventhubs.EventProcessorClient.stop
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventProcessorClient.isRunning*
  name: isRunning
  nameWithType: EventProcessorClient.isRunning
  fullName: com.azure.messaging.eventhubs.EventProcessorClient.isRunning
  package: com.azure.messaging.eventhubs
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.messaging.eventhubs.implementation.PartitionProcessor
  name: PartitionProcessor
  nameWithType: PartitionProcessor
  fullName: com.azure.messaging.eventhubs.implementation.PartitionProcessor
- uid: java.util.function.Supplier
  name: Supplier
  nameWithType: Supplier
  fullName: java.util.function.Supplier
- uid: java.util.function.Consumer
  name: Consumer
  nameWithType: Consumer
  fullName: java.util.function.Consumer
- uid: com.azure.messaging.eventhubs.models.ErrorContext
  name: ErrorContext
  nameWithType: ErrorContext
  fullName: com.azure.messaging.eventhubs.models.ErrorContext
- uid: java.lang.String,com.azure.messaging.eventhubs.models.EventPosition
  name: String,EventPosition
  nameWithType: String,EventPosition
  fullName: java.lang.String,com.azure.messaging.eventhubs.models.EventPosition
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
