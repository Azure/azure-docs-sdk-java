### YamlMime:JavaMember
uid: "com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment*"
fullName: "com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment"
name: "analyzeSentiment"
nameWithType: "TextAnalyticsClient.analyzeSentiment"
members:
- uid: "com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment(java.lang.String)"
  fullName: "com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment(String document)"
  name: "analyzeSentiment(String document)"
  nameWithType: "TextAnalyticsClient.analyzeSentiment(String document)"
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within i This method will use the default language that sets up in <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TextAnalyticsClientBuilder#defaultLanguage(String)\"></xref>. If none is specified, service will use 'en' as the language.\n\n**Code Sample**\n\nAnalyze the sentiments of documents\n\n```java\nfinal DocumentSentiment documentSentiment =\n     textAnalyticsClient.analyzeSentiment(\"The hotel was dark and unclean.\");\n \n System.out.printf(\n     \"Recognized sentiment: %s, positive score: %.2f, neutral score: %.2f, negative score: %.2f.%n\",\n     documentSentiment.getSentiment(),\n     documentSentiment.getConfidenceScores().getPositive(),\n     documentSentiment.getConfidenceScores().getNeutral(),\n     documentSentiment.getConfidenceScores().getNegative());\n \n for (SentenceSentiment sentenceSentiment : documentSentiment.getSentences()) {\n     System.out.printf(\n         \"Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f, negative score: %.2f.%n\",\n         sentenceSentiment.getSentiment(),\n         sentenceSentiment.getConfidenceScores().getPositive(),\n         sentenceSentiment.getConfidenceScores().getNeutral(),\n         sentenceSentiment.getConfidenceScores().getNegative());\n }\n```"
  parameters:
  - description: "The document to be analyzed.\n For text length limits, maximum batch size, and supported text encoding, see\n <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>."
    name: "document"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DocumentSentiment analyzeSentiment(String document)"
  returns:
    description: "A <xref uid=\"com.azure.ai.textanalytics.models.DocumentSentiment\" data-throw-if-not-resolved=\"false\" data-raw-source=\"analyzed document sentiment\"></xref> of the document."
    type: "<xref href=\"com.azure.ai.textanalytics.models.DocumentSentiment?alt=com.azure.ai.textanalytics.models.DocumentSentiment&text=DocumentSentiment\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment(java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment(String document, String language)"
  name: "analyzeSentiment(String document, String language)"
  nameWithType: "TextAnalyticsClient.analyzeSentiment(String document, String language)"
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within i\n\n**Code Sample**\n\nAnalyze the sentiments in a document with a provided language representation.\n\n```java\nfinal DocumentSentiment documentSentiment = textAnalyticsClient.analyzeSentiment(\n     \"The hotel was dark and unclean.\", \"en\");\n \n System.out.printf(\n     \"Recognized sentiment: %s, positive score: %.2f, neutral score: %.2f, negative score: %.2f.%n\",\n     documentSentiment.getSentiment(),\n     documentSentiment.getConfidenceScores().getPositive(),\n     documentSentiment.getConfidenceScores().getNeutral(),\n     documentSentiment.getConfidenceScores().getNegative());\n \n for (SentenceSentiment sentenceSentiment : documentSentiment.getSentences()) {\n     System.out.printf(\n         \"Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f, negative score: %.2f.%n\",\n         sentenceSentiment.getSentiment(),\n         sentenceSentiment.getConfidenceScores().getPositive(),\n         sentenceSentiment.getConfidenceScores().getNeutral(),\n         sentenceSentiment.getConfidenceScores().getNegative());\n }\n```"
  parameters:
  - description: "The document to be analyzed.\n For text length limits, maximum batch size, and supported text encoding, see\n <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>."
    name: "document"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The 2 letter ISO 639-1 representation of language for the document. If not set, uses \"en\" for\n English as default."
    name: "language"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DocumentSentiment analyzeSentiment(String document, String language)"
  returns:
    description: "A <xref uid=\"com.azure.ai.textanalytics.models.DocumentSentiment\" data-throw-if-not-resolved=\"false\" data-raw-source=\"analyzed document sentiment\"></xref> of the document."
    type: "<xref href=\"com.azure.ai.textanalytics.models.DocumentSentiment?alt=com.azure.ai.textanalytics.models.DocumentSentiment&text=DocumentSentiment\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.ai.textanalytics"
artifact: com.azure:azure-ai-textanalytics:5.0.2
