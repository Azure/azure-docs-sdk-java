### YamlMime:JavaType
uid: "com.microsoft.azure.batch.protocol.ComputeNodes"
fullName: "com.microsoft.azure.batch.protocol.ComputeNodes"
name: "ComputeNodes"
nameWithType: "ComputeNodes"
summary: "An instance of this class provides access to all the operations defined in Compute<wbr>Nodes."
syntax: "public interface ComputeNodes"
methods:
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.addUser(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeUser)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.addUser(String poolId, String nodeId, ComputeNodeUser user)"
  name: "addUser(String poolId, String nodeId, ComputeNodeUser user)"
  nameWithType: "ComputeNodes.addUser(String poolId, String nodeId, ComputeNodeUser user)"
  summary: "Adds a user Account to the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to create a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user Account to be created."
    name: "user"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeUser?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUser&text=ComputeNodeUser\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void addUser(String poolId, String nodeId, ComputeNodeUser user)"
  desc: "Adds a user Account to the specified Compute Node. You can add a user Account to a Compute Node only when it is in the idle or running state."
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.addUser(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeUser,com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.addUser(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)"
  name: "addUser(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)"
  nameWithType: "ComputeNodes.addUser(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)"
  summary: "Adds a user Account to the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to create a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user Account to be created."
    name: "user"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeUser?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUser&text=ComputeNodeUser\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeAddUserOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserOptions&text=ComputeNodeAddUserOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void addUser(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)"
  desc: "Adds a user Account to the specified Compute Node. You can add a user Account to a Compute Node only when it is in the idle or running state."
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.addUserAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeUser)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.addUserAsync(String poolId, String nodeId, ComputeNodeUser user)"
  name: "addUserAsync(String poolId, String nodeId, ComputeNodeUser user)"
  nameWithType: "ComputeNodes.addUserAsync(String poolId, String nodeId, ComputeNodeUser user)"
  summary: "Adds a user Account to the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to create a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user Account to be created."
    name: "user"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeUser?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUser&text=ComputeNodeUser\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> addUserAsync(String poolId, String nodeId, ComputeNodeUser user)"
  desc: "Adds a user Account to the specified Compute Node. You can add a user Account to a Compute Node only when it is in the idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.addUserAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeUser,com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.addUserAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)"
  name: "addUserAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)"
  nameWithType: "ComputeNodes.addUserAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)"
  summary: "Adds a user Account to the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to create a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user Account to be created."
    name: "user"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeUser?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUser&text=ComputeNodeUser\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeAddUserOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserOptions&text=ComputeNodeAddUserOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> addUserAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)"
  desc: "Adds a user Account to the specified Compute Node. You can add a user Account to a Compute Node only when it is in the idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.addUserAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeUser,com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.addUserAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions, ServiceCallback<Void> serviceCallback)"
  name: "addUserAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions, ServiceCallback<Void> serviceCallback)"
  nameWithType: "ComputeNodes.addUserAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions, ServiceCallback<Void> serviceCallback)"
  summary: "Adds a user Account to the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to create a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user Account to be created."
    name: "user"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeUser?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUser&text=ComputeNodeUser\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeAddUserOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserOptions&text=ComputeNodeAddUserOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> addUserAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions, ServiceCallback<Void> serviceCallback)"
  desc: "Adds a user Account to the specified Compute Node. You can add a user Account to a Compute Node only when it is in the idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.addUserAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeUser,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.addUserAsync(String poolId, String nodeId, ComputeNodeUser user, ServiceCallback<Void> serviceCallback)"
  name: "addUserAsync(String poolId, String nodeId, ComputeNodeUser user, ServiceCallback<Void> serviceCallback)"
  nameWithType: "ComputeNodes.addUserAsync(String poolId, String nodeId, ComputeNodeUser user, ServiceCallback<Void> serviceCallback)"
  summary: "Adds a user Account to the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to create a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user Account to be created."
    name: "user"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeUser?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUser&text=ComputeNodeUser\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> addUserAsync(String poolId, String nodeId, ComputeNodeUser user, ServiceCallback<Void> serviceCallback)"
  desc: "Adds a user Account to the specified Compute Node. You can add a user Account to a Compute Node only when it is in the idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.addUserWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeUser)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.addUserWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeUser user)"
  name: "addUserWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeUser user)"
  nameWithType: "ComputeNodes.addUserWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeUser user)"
  summary: "Adds a user Account to the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to create a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user Account to be created."
    name: "user"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeUser?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUser&text=ComputeNodeUser\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,ComputeNodeAddUserHeaders>> addUserWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeUser user)"
  desc: "Adds a user Account to the specified Compute Node. You can add a user Account to a Compute Node only when it is in the idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserHeaders&text=ComputeNodeAddUserHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.addUserWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeUser,com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.addUserWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)"
  name: "addUserWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)"
  nameWithType: "ComputeNodes.addUserWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)"
  summary: "Adds a user Account to the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to create a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user Account to be created."
    name: "user"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeUser?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUser&text=ComputeNodeUser\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeAddUserOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserOptions&text=ComputeNodeAddUserOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,ComputeNodeAddUserHeaders>> addUserWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)"
  desc: "Adds a user Account to the specified Compute Node. You can add a user Account to a Compute Node only when it is in the idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserHeaders&text=ComputeNodeAddUserHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.deleteUser(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.deleteUser(String poolId, String nodeId, String userName)"
  name: "deleteUser(String poolId, String nodeId, String userName)"
  nameWithType: "ComputeNodes.deleteUser(String poolId, String nodeId, String userName)"
  summary: "Deletes a user Account from the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to delete a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the user Account to delete."
    name: "userName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void deleteUser(String poolId, String nodeId, String userName)"
  desc: "Deletes a user Account from the specified Compute Node. You can delete a user Account to a Compute Node only when it is in the idle or running state."
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.deleteUser(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.deleteUser(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)"
  name: "deleteUser(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)"
  nameWithType: "ComputeNodes.deleteUser(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)"
  summary: "Deletes a user Account from the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to delete a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the user Account to delete."
    name: "userName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeDeleteUserOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserOptions&text=ComputeNodeDeleteUserOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void deleteUser(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)"
  desc: "Deletes a user Account from the specified Compute Node. You can delete a user Account to a Compute Node only when it is in the idle or running state."
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserAsync(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserAsync(String poolId, String nodeId, String userName)"
  name: "deleteUserAsync(String poolId, String nodeId, String userName)"
  nameWithType: "ComputeNodes.deleteUserAsync(String poolId, String nodeId, String userName)"
  summary: "Deletes a user Account from the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to delete a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the user Account to delete."
    name: "userName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> deleteUserAsync(String poolId, String nodeId, String userName)"
  desc: "Deletes a user Account from the specified Compute Node. You can delete a user Account to a Compute Node only when it is in the idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)"
  name: "deleteUserAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)"
  nameWithType: "ComputeNodes.deleteUserAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)"
  summary: "Deletes a user Account from the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to delete a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the user Account to delete."
    name: "userName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeDeleteUserOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserOptions&text=ComputeNodeDeleteUserOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> deleteUserAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)"
  desc: "Deletes a user Account from the specified Compute Node. You can delete a user Account to a Compute Node only when it is in the idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions, ServiceCallback<Void> serviceCallback)"
  name: "deleteUserAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions, ServiceCallback<Void> serviceCallback)"
  nameWithType: "ComputeNodes.deleteUserAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions, ServiceCallback<Void> serviceCallback)"
  summary: "Deletes a user Account from the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to delete a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the user Account to delete."
    name: "userName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeDeleteUserOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserOptions&text=ComputeNodeDeleteUserOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> deleteUserAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions, ServiceCallback<Void> serviceCallback)"
  desc: "Deletes a user Account from the specified Compute Node. You can delete a user Account to a Compute Node only when it is in the idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserAsync(String poolId, String nodeId, String userName, ServiceCallback<Void> serviceCallback)"
  name: "deleteUserAsync(String poolId, String nodeId, String userName, ServiceCallback<Void> serviceCallback)"
  nameWithType: "ComputeNodes.deleteUserAsync(String poolId, String nodeId, String userName, ServiceCallback<Void> serviceCallback)"
  summary: "Deletes a user Account from the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to delete a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the user Account to delete."
    name: "userName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> deleteUserAsync(String poolId, String nodeId, String userName, ServiceCallback<Void> serviceCallback)"
  desc: "Deletes a user Account from the specified Compute Node. You can delete a user Account to a Compute Node only when it is in the idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserWithServiceResponseAsync(String poolId, String nodeId, String userName)"
  name: "deleteUserWithServiceResponseAsync(String poolId, String nodeId, String userName)"
  nameWithType: "ComputeNodes.deleteUserWithServiceResponseAsync(String poolId, String nodeId, String userName)"
  summary: "Deletes a user Account from the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to delete a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the user Account to delete."
    name: "userName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,ComputeNodeDeleteUserHeaders>> deleteUserWithServiceResponseAsync(String poolId, String nodeId, String userName)"
  desc: "Deletes a user Account from the specified Compute Node. You can delete a user Account to a Compute Node only when it is in the idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserHeaders&text=ComputeNodeDeleteUserHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserWithServiceResponseAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)"
  name: "deleteUserWithServiceResponseAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)"
  nameWithType: "ComputeNodes.deleteUserWithServiceResponseAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)"
  summary: "Deletes a user Account from the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to delete a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the user Account to delete."
    name: "userName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeDeleteUserOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserOptions&text=ComputeNodeDeleteUserOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,ComputeNodeDeleteUserHeaders>> deleteUserWithServiceResponseAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)"
  desc: "Deletes a user Account from the specified Compute Node. You can delete a user Account to a Compute Node only when it is in the idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserHeaders&text=ComputeNodeDeleteUserHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.disableScheduling(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.disableScheduling(String poolId, String nodeId)"
  name: "disableScheduling(String poolId, String nodeId)"
  nameWithType: "ComputeNodes.disableScheduling(String poolId, String nodeId)"
  summary: "Disables Task scheduling on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node on which you want to disable Task scheduling."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void disableScheduling(String poolId, String nodeId)"
  desc: "Disables Task scheduling on the specified Compute Node. You can disable Task scheduling on a Compute Node only if its current scheduling state is enabled."
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.disableScheduling(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.DisableComputeNodeSchedulingOption,com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.disableScheduling(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)"
  name: "disableScheduling(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)"
  nameWithType: "ComputeNodes.disableScheduling(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)"
  summary: "Disables Task scheduling on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node on which you want to disable Task scheduling."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "What to do with currently running Tasks when disabling Task scheduling on the Compute Node. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion'"
    name: "nodeDisableSchedulingOption"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.DisableComputeNodeSchedulingOption?alt=com.microsoft.azure.batch.protocol.models.DisableComputeNodeSchedulingOption&text=DisableComputeNodeSchedulingOption\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeDisableSchedulingOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingOptions&text=ComputeNodeDisableSchedulingOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void disableScheduling(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)"
  desc: "Disables Task scheduling on the specified Compute Node. You can disable Task scheduling on a Compute Node only if its current scheduling state is enabled."
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingAsync(String poolId, String nodeId)"
  name: "disableSchedulingAsync(String poolId, String nodeId)"
  nameWithType: "ComputeNodes.disableSchedulingAsync(String poolId, String nodeId)"
  summary: "Disables Task scheduling on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node on which you want to disable Task scheduling."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> disableSchedulingAsync(String poolId, String nodeId)"
  desc: "Disables Task scheduling on the specified Compute Node. You can disable Task scheduling on a Compute Node only if its current scheduling state is enabled."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.DisableComputeNodeSchedulingOption,com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)"
  name: "disableSchedulingAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)"
  nameWithType: "ComputeNodes.disableSchedulingAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)"
  summary: "Disables Task scheduling on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node on which you want to disable Task scheduling."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "What to do with currently running Tasks when disabling Task scheduling on the Compute Node. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion'"
    name: "nodeDisableSchedulingOption"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.DisableComputeNodeSchedulingOption?alt=com.microsoft.azure.batch.protocol.models.DisableComputeNodeSchedulingOption&text=DisableComputeNodeSchedulingOption\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeDisableSchedulingOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingOptions&text=ComputeNodeDisableSchedulingOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> disableSchedulingAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)"
  desc: "Disables Task scheduling on the specified Compute Node. You can disable Task scheduling on a Compute Node only if its current scheduling state is enabled."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.DisableComputeNodeSchedulingOption,com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions, ServiceCallback<Void> serviceCallback)"
  name: "disableSchedulingAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions, ServiceCallback<Void> serviceCallback)"
  nameWithType: "ComputeNodes.disableSchedulingAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions, ServiceCallback<Void> serviceCallback)"
  summary: "Disables Task scheduling on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node on which you want to disable Task scheduling."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "What to do with currently running Tasks when disabling Task scheduling on the Compute Node. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion'"
    name: "nodeDisableSchedulingOption"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.DisableComputeNodeSchedulingOption?alt=com.microsoft.azure.batch.protocol.models.DisableComputeNodeSchedulingOption&text=DisableComputeNodeSchedulingOption\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeDisableSchedulingOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingOptions&text=ComputeNodeDisableSchedulingOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> disableSchedulingAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions, ServiceCallback<Void> serviceCallback)"
  desc: "Disables Task scheduling on the specified Compute Node. You can disable Task scheduling on a Compute Node only if its current scheduling state is enabled."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingAsync(String poolId, String nodeId, ServiceCallback<Void> serviceCallback)"
  name: "disableSchedulingAsync(String poolId, String nodeId, ServiceCallback<Void> serviceCallback)"
  nameWithType: "ComputeNodes.disableSchedulingAsync(String poolId, String nodeId, ServiceCallback<Void> serviceCallback)"
  summary: "Disables Task scheduling on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node on which you want to disable Task scheduling."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> disableSchedulingAsync(String poolId, String nodeId, ServiceCallback<Void> serviceCallback)"
  desc: "Disables Task scheduling on the specified Compute Node. You can disable Task scheduling on a Compute Node only if its current scheduling state is enabled."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingWithServiceResponseAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingWithServiceResponseAsync(String poolId, String nodeId)"
  name: "disableSchedulingWithServiceResponseAsync(String poolId, String nodeId)"
  nameWithType: "ComputeNodes.disableSchedulingWithServiceResponseAsync(String poolId, String nodeId)"
  summary: "Disables Task scheduling on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node on which you want to disable Task scheduling."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,ComputeNodeDisableSchedulingHeaders>> disableSchedulingWithServiceResponseAsync(String poolId, String nodeId)"
  desc: "Disables Task scheduling on the specified Compute Node. You can disable Task scheduling on a Compute Node only if its current scheduling state is enabled."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingHeaders&text=ComputeNodeDisableSchedulingHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.DisableComputeNodeSchedulingOption,com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingWithServiceResponseAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)"
  name: "disableSchedulingWithServiceResponseAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)"
  nameWithType: "ComputeNodes.disableSchedulingWithServiceResponseAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)"
  summary: "Disables Task scheduling on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node on which you want to disable Task scheduling."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "What to do with currently running Tasks when disabling Task scheduling on the Compute Node. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion'"
    name: "nodeDisableSchedulingOption"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.DisableComputeNodeSchedulingOption?alt=com.microsoft.azure.batch.protocol.models.DisableComputeNodeSchedulingOption&text=DisableComputeNodeSchedulingOption\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeDisableSchedulingOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingOptions&text=ComputeNodeDisableSchedulingOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,ComputeNodeDisableSchedulingHeaders>> disableSchedulingWithServiceResponseAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)"
  desc: "Disables Task scheduling on the specified Compute Node. You can disable Task scheduling on a Compute Node only if its current scheduling state is enabled."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingHeaders&text=ComputeNodeDisableSchedulingHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.enableScheduling(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.enableScheduling(String poolId, String nodeId)"
  name: "enableScheduling(String poolId, String nodeId)"
  nameWithType: "ComputeNodes.enableScheduling(String poolId, String nodeId)"
  summary: "Enables Task scheduling on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node on which you want to enable Task scheduling."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void enableScheduling(String poolId, String nodeId)"
  desc: "Enables Task scheduling on the specified Compute Node. You can enable Task scheduling on a Compute Node only if its current scheduling state is disabled."
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.enableScheduling(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.enableScheduling(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)"
  name: "enableScheduling(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)"
  nameWithType: "ComputeNodes.enableScheduling(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)"
  summary: "Enables Task scheduling on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node on which you want to enable Task scheduling."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeEnableSchedulingOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingOptions&text=ComputeNodeEnableSchedulingOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void enableScheduling(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)"
  desc: "Enables Task scheduling on the specified Compute Node. You can enable Task scheduling on a Compute Node only if its current scheduling state is disabled."
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingAsync(String poolId, String nodeId)"
  name: "enableSchedulingAsync(String poolId, String nodeId)"
  nameWithType: "ComputeNodes.enableSchedulingAsync(String poolId, String nodeId)"
  summary: "Enables Task scheduling on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node on which you want to enable Task scheduling."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> enableSchedulingAsync(String poolId, String nodeId)"
  desc: "Enables Task scheduling on the specified Compute Node. You can enable Task scheduling on a Compute Node only if its current scheduling state is disabled."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)"
  name: "enableSchedulingAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)"
  nameWithType: "ComputeNodes.enableSchedulingAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)"
  summary: "Enables Task scheduling on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node on which you want to enable Task scheduling."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeEnableSchedulingOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingOptions&text=ComputeNodeEnableSchedulingOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> enableSchedulingAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)"
  desc: "Enables Task scheduling on the specified Compute Node. You can enable Task scheduling on a Compute Node only if its current scheduling state is disabled."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions, ServiceCallback<Void> serviceCallback)"
  name: "enableSchedulingAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions, ServiceCallback<Void> serviceCallback)"
  nameWithType: "ComputeNodes.enableSchedulingAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions, ServiceCallback<Void> serviceCallback)"
  summary: "Enables Task scheduling on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node on which you want to enable Task scheduling."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeEnableSchedulingOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingOptions&text=ComputeNodeEnableSchedulingOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> enableSchedulingAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions, ServiceCallback<Void> serviceCallback)"
  desc: "Enables Task scheduling on the specified Compute Node. You can enable Task scheduling on a Compute Node only if its current scheduling state is disabled."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingAsync(String poolId, String nodeId, ServiceCallback<Void> serviceCallback)"
  name: "enableSchedulingAsync(String poolId, String nodeId, ServiceCallback<Void> serviceCallback)"
  nameWithType: "ComputeNodes.enableSchedulingAsync(String poolId, String nodeId, ServiceCallback<Void> serviceCallback)"
  summary: "Enables Task scheduling on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node on which you want to enable Task scheduling."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> enableSchedulingAsync(String poolId, String nodeId, ServiceCallback<Void> serviceCallback)"
  desc: "Enables Task scheduling on the specified Compute Node. You can enable Task scheduling on a Compute Node only if its current scheduling state is disabled."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingWithServiceResponseAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingWithServiceResponseAsync(String poolId, String nodeId)"
  name: "enableSchedulingWithServiceResponseAsync(String poolId, String nodeId)"
  nameWithType: "ComputeNodes.enableSchedulingWithServiceResponseAsync(String poolId, String nodeId)"
  summary: "Enables Task scheduling on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node on which you want to enable Task scheduling."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,ComputeNodeEnableSchedulingHeaders>> enableSchedulingWithServiceResponseAsync(String poolId, String nodeId)"
  desc: "Enables Task scheduling on the specified Compute Node. You can enable Task scheduling on a Compute Node only if its current scheduling state is disabled."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingHeaders&text=ComputeNodeEnableSchedulingHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)"
  name: "enableSchedulingWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)"
  nameWithType: "ComputeNodes.enableSchedulingWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)"
  summary: "Enables Task scheduling on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node on which you want to enable Task scheduling."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeEnableSchedulingOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingOptions&text=ComputeNodeEnableSchedulingOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,ComputeNodeEnableSchedulingHeaders>> enableSchedulingWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)"
  desc: "Enables Task scheduling on the specified Compute Node. You can enable Task scheduling on a Compute Node only if its current scheduling state is disabled."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingHeaders&text=ComputeNodeEnableSchedulingHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.get(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.get(String poolId, String nodeId)"
  name: "get(String poolId, String nodeId)"
  nameWithType: "ComputeNodes.get(String poolId, String nodeId)"
  summary: "Gets information about the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to get information about."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract ComputeNode get(String poolId, String nodeId)"
  desc: "Gets information about the specified Compute Node."
  returns:
    description: "the ComputeNode object if successful."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.get(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeGetOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.get(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)"
  name: "get(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)"
  nameWithType: "ComputeNodes.get(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)"
  summary: "Gets information about the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to get information about."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeGetOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetOptions&text=ComputeNodeGetOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract ComputeNode get(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)"
  desc: "Gets information about the specified Compute Node."
  returns:
    description: "the ComputeNode object if successful."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getAsync(String poolId, String nodeId)"
  name: "getAsync(String poolId, String nodeId)"
  nameWithType: "ComputeNodes.getAsync(String poolId, String nodeId)"
  summary: "Gets information about the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to get information about."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ComputeNode> getAsync(String poolId, String nodeId)"
  desc: "Gets information about the specified Compute Node."
  returns:
    description: "the observable to the ComputeNode object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeGetOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)"
  name: "getAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)"
  nameWithType: "ComputeNodes.getAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)"
  summary: "Gets information about the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to get information about."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeGetOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetOptions&text=ComputeNodeGetOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ComputeNode> getAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)"
  desc: "Gets information about the specified Compute Node."
  returns:
    description: "the observable to the ComputeNode object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeGetOptions,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.ComputeNode>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions, ServiceCallback<ComputeNode> serviceCallback)"
  name: "getAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions, ServiceCallback<ComputeNode> serviceCallback)"
  nameWithType: "ComputeNodes.getAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions, ServiceCallback<ComputeNode> serviceCallback)"
  summary: "Gets information about the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to get information about."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeGetOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetOptions&text=ComputeNodeGetOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<ComputeNode> getAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions, ServiceCallback<ComputeNode> serviceCallback)"
  desc: "Gets information about the specified Compute Node."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.ComputeNode>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getAsync(String poolId, String nodeId, ServiceCallback<ComputeNode> serviceCallback)"
  name: "getAsync(String poolId, String nodeId, ServiceCallback<ComputeNode> serviceCallback)"
  nameWithType: "ComputeNodes.getAsync(String poolId, String nodeId, ServiceCallback<ComputeNode> serviceCallback)"
  summary: "Gets information about the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to get information about."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<ComputeNode> getAsync(String poolId, String nodeId, ServiceCallback<ComputeNode> serviceCallback)"
  desc: "Gets information about the specified Compute Node."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktop(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktop(String poolId, String nodeId)"
  name: "getRemoteDesktop(String poolId, String nodeId)"
  nameWithType: "ComputeNodes.getRemoteDesktop(String poolId, String nodeId)"
  summary: "Gets the Remote Desktop Protocol file for the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node for which you want to get the Remote Desktop Protocol file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract InputStream getRemoteDesktop(String poolId, String nodeId)"
  desc: "Gets the Remote Desktop Protocol file for the specified Compute Node. Before you can access a Compute Node by using the RDP file, you must create a user Account on the Compute Node. This API can only be invoked on Pools created with a cloud service configuration. For Pools created with a virtual machine configuration, see the GetRemoteLoginSettings API."
  returns:
    description: "the InputStream object if successful."
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktop(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktop(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions)"
  name: "getRemoteDesktop(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions)"
  nameWithType: "ComputeNodes.getRemoteDesktop(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions)"
  summary: "Gets the Remote Desktop Protocol file for the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node for which you want to get the Remote Desktop Protocol file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeGetRemoteDesktopOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions&text=ComputeNodeGetRemoteDesktopOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract InputStream getRemoteDesktop(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions)"
  desc: "Gets the Remote Desktop Protocol file for the specified Compute Node. Before you can access a Compute Node by using the RDP file, you must create a user Account on the Compute Node. This API can only be invoked on Pools created with a cloud service configuration. For Pools created with a virtual machine configuration, see the GetRemoteLoginSettings API."
  returns:
    description: "the InputStream object if successful."
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktop(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions,java.io.OutputStream)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktop(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions, OutputStream outputStream)"
  name: "getRemoteDesktop(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions, OutputStream outputStream)"
  nameWithType: "ComputeNodes.getRemoteDesktop(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions, OutputStream outputStream)"
  summary: "Gets the Remote Desktop Protocol file for the specified compute node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the pool that contains the compute node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the compute node for which you want to get the Remote Desktop Protocol file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeGetRemoteDesktopOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions&text=ComputeNodeGetRemoteDesktopOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "The OutputStream object which data will be written to if successful."
    name: "outputStream"
    type: "<xref href=\"java.io.OutputStream?alt=java.io.OutputStream&text=OutputStream\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void getRemoteDesktop(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions, OutputStream outputStream)"
  desc: "Gets the Remote Desktop Protocol file for the specified compute node."
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktop(java.lang.String,java.lang.String,java.io.OutputStream)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktop(String poolId, String nodeId, OutputStream outputStream)"
  name: "getRemoteDesktop(String poolId, String nodeId, OutputStream outputStream)"
  nameWithType: "ComputeNodes.getRemoteDesktop(String poolId, String nodeId, OutputStream outputStream)"
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the pool that contains the compute node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the compute node for which you want to get the Remote Desktop Protocol file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The OutputStream object which data will be written to if successful."
    name: "outputStream"
    type: "<xref href=\"java.io.OutputStream?alt=java.io.OutputStream&text=OutputStream\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void getRemoteDesktop(String poolId, String nodeId, OutputStream outputStream)"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopAsync(String poolId, String nodeId)"
  name: "getRemoteDesktopAsync(String poolId, String nodeId)"
  nameWithType: "ComputeNodes.getRemoteDesktopAsync(String poolId, String nodeId)"
  summary: "Gets the Remote Desktop Protocol file for the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node for which you want to get the Remote Desktop Protocol file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<InputStream> getRemoteDesktopAsync(String poolId, String nodeId)"
  desc: "Gets the Remote Desktop Protocol file for the specified Compute Node. Before you can access a Compute Node by using the RDP file, you must create a user Account on the Compute Node. This API can only be invoked on Pools created with a cloud service configuration. For Pools created with a virtual machine configuration, see the GetRemoteLoginSettings API."
  returns:
    description: "the observable to the InputStream object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions)"
  name: "getRemoteDesktopAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions)"
  nameWithType: "ComputeNodes.getRemoteDesktopAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions)"
  summary: "Gets the Remote Desktop Protocol file for the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node for which you want to get the Remote Desktop Protocol file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeGetRemoteDesktopOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions&text=ComputeNodeGetRemoteDesktopOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<InputStream> getRemoteDesktopAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions)"
  desc: "Gets the Remote Desktop Protocol file for the specified Compute Node. Before you can access a Compute Node by using the RDP file, you must create a user Account on the Compute Node. This API can only be invoked on Pools created with a cloud service configuration. For Pools created with a virtual machine configuration, see the GetRemoteLoginSettings API."
  returns:
    description: "the observable to the InputStream object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions,com.microsoft.rest.ServiceCallback<java.io.InputStream>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions, ServiceCallback<InputStream> serviceCallback)"
  name: "getRemoteDesktopAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions, ServiceCallback<InputStream> serviceCallback)"
  nameWithType: "ComputeNodes.getRemoteDesktopAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions, ServiceCallback<InputStream> serviceCallback)"
  summary: "Gets the Remote Desktop Protocol file for the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node for which you want to get the Remote Desktop Protocol file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeGetRemoteDesktopOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions&text=ComputeNodeGetRemoteDesktopOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<InputStream> getRemoteDesktopAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions, ServiceCallback<InputStream> serviceCallback)"
  desc: "Gets the Remote Desktop Protocol file for the specified Compute Node. Before you can access a Compute Node by using the RDP file, you must create a user Account on the Compute Node. This API can only be invoked on Pools created with a cloud service configuration. For Pools created with a virtual machine configuration, see the GetRemoteLoginSettings API."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.io.InputStream>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopAsync(String poolId, String nodeId, ServiceCallback<InputStream> serviceCallback)"
  name: "getRemoteDesktopAsync(String poolId, String nodeId, ServiceCallback<InputStream> serviceCallback)"
  nameWithType: "ComputeNodes.getRemoteDesktopAsync(String poolId, String nodeId, ServiceCallback<InputStream> serviceCallback)"
  summary: "Gets the Remote Desktop Protocol file for the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node for which you want to get the Remote Desktop Protocol file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<InputStream> getRemoteDesktopAsync(String poolId, String nodeId, ServiceCallback<InputStream> serviceCallback)"
  desc: "Gets the Remote Desktop Protocol file for the specified Compute Node. Before you can access a Compute Node by using the RDP file, you must create a user Account on the Compute Node. This API can only be invoked on Pools created with a cloud service configuration. For Pools created with a virtual machine configuration, see the GetRemoteLoginSettings API."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopWithServiceResponseAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopWithServiceResponseAsync(String poolId, String nodeId)"
  name: "getRemoteDesktopWithServiceResponseAsync(String poolId, String nodeId)"
  nameWithType: "ComputeNodes.getRemoteDesktopWithServiceResponseAsync(String poolId, String nodeId)"
  summary: "Gets the Remote Desktop Protocol file for the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node for which you want to get the Remote Desktop Protocol file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<InputStream,ComputeNodeGetRemoteDesktopHeaders>> getRemoteDesktopWithServiceResponseAsync(String poolId, String nodeId)"
  desc: "Gets the Remote Desktop Protocol file for the specified Compute Node. Before you can access a Compute Node by using the RDP file, you must create a user Account on the Compute Node. This API can only be invoked on Pools created with a cloud service configuration. For Pools created with a virtual machine configuration, see the GetRemoteLoginSettings API."
  returns:
    description: "the observable to the InputStream object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopHeaders&text=ComputeNodeGetRemoteDesktopHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions)"
  name: "getRemoteDesktopWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions)"
  nameWithType: "ComputeNodes.getRemoteDesktopWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions)"
  summary: "Gets the Remote Desktop Protocol file for the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node for which you want to get the Remote Desktop Protocol file."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeGetRemoteDesktopOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions&text=ComputeNodeGetRemoteDesktopOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<InputStream,ComputeNodeGetRemoteDesktopHeaders>> getRemoteDesktopWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions)"
  desc: "Gets the Remote Desktop Protocol file for the specified Compute Node. Before you can access a Compute Node by using the RDP file, you must create a user Account on the Compute Node. This API can only be invoked on Pools created with a cloud service configuration. For Pools created with a virtual machine configuration, see the GetRemoteLoginSettings API."
  returns:
    description: "the observable to the InputStream object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopHeaders&text=ComputeNodeGetRemoteDesktopHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettings(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettings(String poolId, String nodeId)"
  name: "getRemoteLoginSettings(String poolId, String nodeId)"
  nameWithType: "ComputeNodes.getRemoteLoginSettings(String poolId, String nodeId)"
  summary: "Gets the settings required for remote login to a Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node for which to obtain the remote login settings."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract ComputeNodeGetRemoteLoginSettingsResult getRemoteLoginSettings(String poolId, String nodeId)"
  desc: "Gets the settings required for remote login to a Compute Node. Before you can remotely login to a Compute Node using the remote login settings, you must create a user Account on the Compute Node. This API can be invoked only on Pools created with the virtual machine configuration property. For Pools created with a cloud service configuration, see the GetRemoteDesktop API."
  returns:
    description: "the ComputeNodeGetRemoteLoginSettingsResult object if successful."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult&text=ComputeNodeGetRemoteLoginSettingsResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettings(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettings(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)"
  name: "getRemoteLoginSettings(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)"
  nameWithType: "ComputeNodes.getRemoteLoginSettings(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)"
  summary: "Gets the settings required for remote login to a Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node for which to obtain the remote login settings."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeGetRemoteLoginSettingsOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsOptions&text=ComputeNodeGetRemoteLoginSettingsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract ComputeNodeGetRemoteLoginSettingsResult getRemoteLoginSettings(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)"
  desc: "Gets the settings required for remote login to a Compute Node. Before you can remotely login to a Compute Node using the remote login settings, you must create a user Account on the Compute Node. This API can be invoked only on Pools created with the virtual machine configuration property. For Pools created with a cloud service configuration, see the GetRemoteDesktop API."
  returns:
    description: "the ComputeNodeGetRemoteLoginSettingsResult object if successful."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult&text=ComputeNodeGetRemoteLoginSettingsResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsAsync(String poolId, String nodeId)"
  name: "getRemoteLoginSettingsAsync(String poolId, String nodeId)"
  nameWithType: "ComputeNodes.getRemoteLoginSettingsAsync(String poolId, String nodeId)"
  summary: "Gets the settings required for remote login to a Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node for which to obtain the remote login settings."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ComputeNodeGetRemoteLoginSettingsResult> getRemoteLoginSettingsAsync(String poolId, String nodeId)"
  desc: "Gets the settings required for remote login to a Compute Node. Before you can remotely login to a Compute Node using the remote login settings, you must create a user Account on the Compute Node. This API can be invoked only on Pools created with the virtual machine configuration property. For Pools created with a cloud service configuration, see the GetRemoteDesktop API."
  returns:
    description: "the observable to the ComputeNodeGetRemoteLoginSettingsResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult&text=ComputeNodeGetRemoteLoginSettingsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)"
  name: "getRemoteLoginSettingsAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)"
  nameWithType: "ComputeNodes.getRemoteLoginSettingsAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)"
  summary: "Gets the settings required for remote login to a Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node for which to obtain the remote login settings."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeGetRemoteLoginSettingsOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsOptions&text=ComputeNodeGetRemoteLoginSettingsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ComputeNodeGetRemoteLoginSettingsResult> getRemoteLoginSettingsAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)"
  desc: "Gets the settings required for remote login to a Compute Node. Before you can remotely login to a Compute Node using the remote login settings, you must create a user Account on the Compute Node. This API can be invoked only on Pools created with the virtual machine configuration property. For Pools created with a cloud service configuration, see the GetRemoteDesktop API."
  returns:
    description: "the observable to the ComputeNodeGetRemoteLoginSettingsResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult&text=ComputeNodeGetRemoteLoginSettingsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsOptions,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions, ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult> serviceCallback)"
  name: "getRemoteLoginSettingsAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions, ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult> serviceCallback)"
  nameWithType: "ComputeNodes.getRemoteLoginSettingsAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions, ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult> serviceCallback)"
  summary: "Gets the settings required for remote login to a Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node for which to obtain the remote login settings."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeGetRemoteLoginSettingsOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsOptions&text=ComputeNodeGetRemoteLoginSettingsOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult&text=ComputeNodeGetRemoteLoginSettingsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<ComputeNodeGetRemoteLoginSettingsResult> getRemoteLoginSettingsAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions, ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult> serviceCallback)"
  desc: "Gets the settings required for remote login to a Compute Node. Before you can remotely login to a Compute Node using the remote login settings, you must create a user Account on the Compute Node. This API can be invoked only on Pools created with the virtual machine configuration property. For Pools created with a cloud service configuration, see the GetRemoteDesktop API."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult&text=ComputeNodeGetRemoteLoginSettingsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsAsync(String poolId, String nodeId, ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult> serviceCallback)"
  name: "getRemoteLoginSettingsAsync(String poolId, String nodeId, ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult> serviceCallback)"
  nameWithType: "ComputeNodes.getRemoteLoginSettingsAsync(String poolId, String nodeId, ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult> serviceCallback)"
  summary: "Gets the settings required for remote login to a Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node for which to obtain the remote login settings."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult&text=ComputeNodeGetRemoteLoginSettingsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<ComputeNodeGetRemoteLoginSettingsResult> getRemoteLoginSettingsAsync(String poolId, String nodeId, ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult> serviceCallback)"
  desc: "Gets the settings required for remote login to a Compute Node. Before you can remotely login to a Compute Node using the remote login settings, you must create a user Account on the Compute Node. This API can be invoked only on Pools created with the virtual machine configuration property. For Pools created with a cloud service configuration, see the GetRemoteDesktop API."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult&text=ComputeNodeGetRemoteLoginSettingsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsWithServiceResponseAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsWithServiceResponseAsync(String poolId, String nodeId)"
  name: "getRemoteLoginSettingsWithServiceResponseAsync(String poolId, String nodeId)"
  nameWithType: "ComputeNodes.getRemoteLoginSettingsWithServiceResponseAsync(String poolId, String nodeId)"
  summary: "Gets the settings required for remote login to a Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node for which to obtain the remote login settings."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<ComputeNodeGetRemoteLoginSettingsResult,ComputeNodeGetRemoteLoginSettingsHeaders>> getRemoteLoginSettingsWithServiceResponseAsync(String poolId, String nodeId)"
  desc: "Gets the settings required for remote login to a Compute Node. Before you can remotely login to a Compute Node using the remote login settings, you must create a user Account on the Compute Node. This API can be invoked only on Pools created with the virtual machine configuration property. For Pools created with a cloud service configuration, see the GetRemoteDesktop API."
  returns:
    description: "the observable to the ComputeNodeGetRemoteLoginSettingsResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult&text=ComputeNodeGetRemoteLoginSettingsResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsHeaders&text=ComputeNodeGetRemoteLoginSettingsHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)"
  name: "getRemoteLoginSettingsWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)"
  nameWithType: "ComputeNodes.getRemoteLoginSettingsWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)"
  summary: "Gets the settings required for remote login to a Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node for which to obtain the remote login settings."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeGetRemoteLoginSettingsOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsOptions&text=ComputeNodeGetRemoteLoginSettingsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<ComputeNodeGetRemoteLoginSettingsResult,ComputeNodeGetRemoteLoginSettingsHeaders>> getRemoteLoginSettingsWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)"
  desc: "Gets the settings required for remote login to a Compute Node. Before you can remotely login to a Compute Node using the remote login settings, you must create a user Account on the Compute Node. This API can be invoked only on Pools created with the virtual machine configuration property. For Pools created with a cloud service configuration, see the GetRemoteDesktop API."
  returns:
    description: "the observable to the ComputeNodeGetRemoteLoginSettingsResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult&text=ComputeNodeGetRemoteLoginSettingsResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsHeaders&text=ComputeNodeGetRemoteLoginSettingsHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getWithServiceResponseAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getWithServiceResponseAsync(String poolId, String nodeId)"
  name: "getWithServiceResponseAsync(String poolId, String nodeId)"
  nameWithType: "ComputeNodes.getWithServiceResponseAsync(String poolId, String nodeId)"
  summary: "Gets information about the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to get information about."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<ComputeNode,ComputeNodeGetHeaders>> getWithServiceResponseAsync(String poolId, String nodeId)"
  desc: "Gets information about the specified Compute Node."
  returns:
    description: "the observable to the ComputeNode object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetHeaders&text=ComputeNodeGetHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.getWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeGetOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.getWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)"
  name: "getWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)"
  nameWithType: "ComputeNodes.getWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)"
  summary: "Gets information about the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to get information about."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeGetOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetOptions&text=ComputeNodeGetOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<ComputeNode,ComputeNodeGetHeaders>> getWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)"
  desc: "Gets information about the specified Compute Node."
  returns:
    description: "the observable to the ComputeNode object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeGetHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetHeaders&text=ComputeNodeGetHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.list(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.list(String poolId)"
  name: "list(String poolId)"
  nameWithType: "ComputeNodes.list(String poolId)"
  summary: "Lists the Compute Nodes in the specified Pool."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool from which you want to list Compute Nodes."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedList<ComputeNode> list(String poolId)"
  desc: "Lists the Compute Nodes in the specified Pool."
  returns:
    description: "the PagedList&lt;ComputeNode&gt; object if successful."
    type: "<xref href=\"com.microsoft.azure.PagedList?alt=com.microsoft.azure.PagedList&text=PagedList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.list(java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeListOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.list(String poolId, ComputeNodeListOptions computeNodeListOptions)"
  name: "list(String poolId, ComputeNodeListOptions computeNodeListOptions)"
  nameWithType: "ComputeNodes.list(String poolId, ComputeNodeListOptions computeNodeListOptions)"
  summary: "Lists the Compute Nodes in the specified Pool."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool from which you want to list Compute Nodes."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeListOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeListOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListOptions&text=ComputeNodeListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedList<ComputeNode> list(String poolId, ComputeNodeListOptions computeNodeListOptions)"
  desc: "Lists the Compute Nodes in the specified Pool."
  returns:
    description: "the PagedList&lt;ComputeNode&gt; object if successful."
    type: "<xref href=\"com.microsoft.azure.PagedList?alt=com.microsoft.azure.PagedList&text=PagedList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.listAsync(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.listAsync(String poolId)"
  name: "listAsync(String poolId)"
  nameWithType: "ComputeNodes.listAsync(String poolId)"
  summary: "Lists the Compute Nodes in the specified Pool."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool from which you want to list Compute Nodes."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Page<ComputeNode>> listAsync(String poolId)"
  desc: "Lists the Compute Nodes in the specified Pool."
  returns:
    description: "the observable to the PagedList&lt;ComputeNode&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.listAsync(java.lang.String,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.ComputeNode>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.listAsync(String poolId, ListOperationCallback<ComputeNode> serviceCallback)"
  name: "listAsync(String poolId, ListOperationCallback<ComputeNode> serviceCallback)"
  nameWithType: "ComputeNodes.listAsync(String poolId, ListOperationCallback<ComputeNode> serviceCallback)"
  summary: "Lists the Compute Nodes in the specified Pool."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool from which you want to list Compute Nodes."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.azure.ListOperationCallback?alt=com.microsoft.azure.ListOperationCallback&text=ListOperationCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<List<ComputeNode>> listAsync(String poolId, ListOperationCallback<ComputeNode> serviceCallback)"
  desc: "Lists the Compute Nodes in the specified Pool."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.listAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeListOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.listAsync(String poolId, ComputeNodeListOptions computeNodeListOptions)"
  name: "listAsync(String poolId, ComputeNodeListOptions computeNodeListOptions)"
  nameWithType: "ComputeNodes.listAsync(String poolId, ComputeNodeListOptions computeNodeListOptions)"
  summary: "Lists the Compute Nodes in the specified Pool."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool from which you want to list Compute Nodes."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeListOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeListOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListOptions&text=ComputeNodeListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Page<ComputeNode>> listAsync(String poolId, ComputeNodeListOptions computeNodeListOptions)"
  desc: "Lists the Compute Nodes in the specified Pool."
  returns:
    description: "the observable to the PagedList&lt;ComputeNode&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.listAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeListOptions,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.ComputeNode>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.listAsync(String poolId, ComputeNodeListOptions computeNodeListOptions, ListOperationCallback<ComputeNode> serviceCallback)"
  name: "listAsync(String poolId, ComputeNodeListOptions computeNodeListOptions, ListOperationCallback<ComputeNode> serviceCallback)"
  nameWithType: "ComputeNodes.listAsync(String poolId, ComputeNodeListOptions computeNodeListOptions, ListOperationCallback<ComputeNode> serviceCallback)"
  summary: "Lists the Compute Nodes in the specified Pool."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool from which you want to list Compute Nodes."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeListOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeListOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListOptions&text=ComputeNodeListOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.azure.ListOperationCallback?alt=com.microsoft.azure.ListOperationCallback&text=ListOperationCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<List<ComputeNode>> listAsync(String poolId, ComputeNodeListOptions computeNodeListOptions, ListOperationCallback<ComputeNode> serviceCallback)"
  desc: "Lists the Compute Nodes in the specified Pool."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.listNext(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.listNext(String nextPageLink)"
  name: "listNext(String nextPageLink)"
  nameWithType: "ComputeNodes.listNext(String nextPageLink)"
  summary: "Lists the Compute Nodes in the specified Pool."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedList<ComputeNode> listNext(String nextPageLink)"
  desc: "Lists the Compute Nodes in the specified Pool."
  returns:
    description: "the PagedList&lt;ComputeNode&gt; object if successful."
    type: "<xref href=\"com.microsoft.azure.PagedList?alt=com.microsoft.azure.PagedList&text=PagedList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.listNext(java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeListNextOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.listNext(String nextPageLink, ComputeNodeListNextOptions computeNodeListNextOptions)"
  name: "listNext(String nextPageLink, ComputeNodeListNextOptions computeNodeListNextOptions)"
  nameWithType: "ComputeNodes.listNext(String nextPageLink, ComputeNodeListNextOptions computeNodeListNextOptions)"
  summary: "Lists the Compute Nodes in the specified Pool."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeListNextOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeListNextOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListNextOptions&text=ComputeNodeListNextOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedList<ComputeNode> listNext(String nextPageLink, ComputeNodeListNextOptions computeNodeListNextOptions)"
  desc: "Lists the Compute Nodes in the specified Pool."
  returns:
    description: "the PagedList&lt;ComputeNode&gt; object if successful."
    type: "<xref href=\"com.microsoft.azure.PagedList?alt=com.microsoft.azure.PagedList&text=PagedList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.listNextAsync(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.listNextAsync(String nextPageLink)"
  name: "listNextAsync(String nextPageLink)"
  nameWithType: "ComputeNodes.listNextAsync(String nextPageLink)"
  summary: "Lists the Compute Nodes in the specified Pool."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Page<ComputeNode>> listNextAsync(String nextPageLink)"
  desc: "Lists the Compute Nodes in the specified Pool."
  returns:
    description: "the observable to the PagedList&lt;ComputeNode&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.listNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeListNextOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.listNextAsync(String nextPageLink, ComputeNodeListNextOptions computeNodeListNextOptions)"
  name: "listNextAsync(String nextPageLink, ComputeNodeListNextOptions computeNodeListNextOptions)"
  nameWithType: "ComputeNodes.listNextAsync(String nextPageLink, ComputeNodeListNextOptions computeNodeListNextOptions)"
  summary: "Lists the Compute Nodes in the specified Pool."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeListNextOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeListNextOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListNextOptions&text=ComputeNodeListNextOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Page<ComputeNode>> listNextAsync(String nextPageLink, ComputeNodeListNextOptions computeNodeListNextOptions)"
  desc: "Lists the Compute Nodes in the specified Pool."
  returns:
    description: "the observable to the PagedList&lt;ComputeNode&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.listNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeListNextOptions,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.ComputeNode>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.ComputeNode>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.listNextAsync(String nextPageLink, ComputeNodeListNextOptions computeNodeListNextOptions, ServiceFuture<List<ComputeNode>> serviceFuture, ListOperationCallback<ComputeNode> serviceCallback)"
  name: "listNextAsync(String nextPageLink, ComputeNodeListNextOptions computeNodeListNextOptions, ServiceFuture<List<ComputeNode>> serviceFuture, ListOperationCallback<ComputeNode> serviceCallback)"
  nameWithType: "ComputeNodes.listNextAsync(String nextPageLink, ComputeNodeListNextOptions computeNodeListNextOptions, ServiceFuture<List<ComputeNode>> serviceFuture, ListOperationCallback<ComputeNode> serviceCallback)"
  summary: "Lists the Compute Nodes in the specified Pool."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeListNextOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeListNextOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListNextOptions&text=ComputeNodeListNextOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the ServiceFuture object tracking the Retrofit calls"
    name: "serviceFuture"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.azure.ListOperationCallback?alt=com.microsoft.azure.ListOperationCallback&text=ListOperationCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<List<ComputeNode>> listNextAsync(String nextPageLink, ComputeNodeListNextOptions computeNodeListNextOptions, ServiceFuture<List<ComputeNode>> serviceFuture, ListOperationCallback<ComputeNode> serviceCallback)"
  desc: "Lists the Compute Nodes in the specified Pool."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.listNextAsync(java.lang.String,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.ComputeNode>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.ComputeNode>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.listNextAsync(String nextPageLink, ServiceFuture<List<ComputeNode>> serviceFuture, ListOperationCallback<ComputeNode> serviceCallback)"
  name: "listNextAsync(String nextPageLink, ServiceFuture<List<ComputeNode>> serviceFuture, ListOperationCallback<ComputeNode> serviceCallback)"
  nameWithType: "ComputeNodes.listNextAsync(String nextPageLink, ServiceFuture<List<ComputeNode>> serviceFuture, ListOperationCallback<ComputeNode> serviceCallback)"
  summary: "Lists the Compute Nodes in the specified Pool."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the ServiceFuture object tracking the Retrofit calls"
    name: "serviceFuture"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.azure.ListOperationCallback?alt=com.microsoft.azure.ListOperationCallback&text=ListOperationCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<List<ComputeNode>> listNextAsync(String nextPageLink, ServiceFuture<List<ComputeNode>> serviceFuture, ListOperationCallback<ComputeNode> serviceCallback)"
  desc: "Lists the Compute Nodes in the specified Pool."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.listNextWithServiceResponseAsync(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.listNextWithServiceResponseAsync(String nextPageLink)"
  name: "listNextWithServiceResponseAsync(String nextPageLink)"
  nameWithType: "ComputeNodes.listNextWithServiceResponseAsync(String nextPageLink)"
  summary: "Lists the Compute Nodes in the specified Pool."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Page<ComputeNode>,ComputeNodeListHeaders>> listNextWithServiceResponseAsync(String nextPageLink)"
  desc: "Lists the Compute Nodes in the specified Pool."
  returns:
    description: "the observable to the PagedList&lt;ComputeNode&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeListHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListHeaders&text=ComputeNodeListHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.listNextWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeListNextOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.listNextWithServiceResponseAsync(String nextPageLink, ComputeNodeListNextOptions computeNodeListNextOptions)"
  name: "listNextWithServiceResponseAsync(String nextPageLink, ComputeNodeListNextOptions computeNodeListNextOptions)"
  nameWithType: "ComputeNodes.listNextWithServiceResponseAsync(String nextPageLink, ComputeNodeListNextOptions computeNodeListNextOptions)"
  summary: "Lists the Compute Nodes in the specified Pool."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeListNextOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeListNextOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListNextOptions&text=ComputeNodeListNextOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Page<ComputeNode>,ComputeNodeListHeaders>> listNextWithServiceResponseAsync(String nextPageLink, ComputeNodeListNextOptions computeNodeListNextOptions)"
  desc: "Lists the Compute Nodes in the specified Pool."
  returns:
    description: "the observable to the PagedList&lt;ComputeNode&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeListHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListHeaders&text=ComputeNodeListHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.listWithServiceResponseAsync(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.listWithServiceResponseAsync(String poolId)"
  name: "listWithServiceResponseAsync(String poolId)"
  nameWithType: "ComputeNodes.listWithServiceResponseAsync(String poolId)"
  summary: "Lists the Compute Nodes in the specified Pool."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool from which you want to list Compute Nodes."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Page<ComputeNode>,ComputeNodeListHeaders>> listWithServiceResponseAsync(String poolId)"
  desc: "Lists the Compute Nodes in the specified Pool."
  returns:
    description: "the observable to the PagedList&lt;ComputeNode&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeListHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListHeaders&text=ComputeNodeListHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.listWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeListOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.listWithServiceResponseAsync(String poolId, ComputeNodeListOptions computeNodeListOptions)"
  name: "listWithServiceResponseAsync(String poolId, ComputeNodeListOptions computeNodeListOptions)"
  nameWithType: "ComputeNodes.listWithServiceResponseAsync(String poolId, ComputeNodeListOptions computeNodeListOptions)"
  summary: "Lists the Compute Nodes in the specified Pool."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool from which you want to list Compute Nodes."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeListOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeListOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListOptions&text=ComputeNodeListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Page<ComputeNode>,ComputeNodeListHeaders>> listWithServiceResponseAsync(String poolId, ComputeNodeListOptions computeNodeListOptions)"
  desc: "Lists the Compute Nodes in the specified Pool."
  returns:
    description: "the observable to the PagedList&lt;ComputeNode&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode\" data-throw-if-not-resolved=\"False\" />&gt;,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeListHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListHeaders&text=ComputeNodeListHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.reboot(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.reboot(String poolId, String nodeId)"
  name: "reboot(String poolId, String nodeId)"
  nameWithType: "ComputeNodes.reboot(String poolId, String nodeId)"
  summary: "Restarts the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void reboot(String poolId, String nodeId)"
  desc: "Restarts the specified Compute Node. You can restart a Compute Node only if it is in an idle or running state."
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.reboot(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOption,com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.reboot(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)"
  name: "reboot(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)"
  nameWithType: "ComputeNodes.reboot(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)"
  summary: "Restarts the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "When to reboot the Compute Node and what to do with currently running Tasks. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion', 'retainedData'"
    name: "nodeRebootOption"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOption?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOption&text=ComputeNodeRebootOption\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeRebootOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOptions&text=ComputeNodeRebootOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void reboot(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)"
  desc: "Restarts the specified Compute Node. You can restart a Compute Node only if it is in an idle or running state."
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.rebootAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.rebootAsync(String poolId, String nodeId)"
  name: "rebootAsync(String poolId, String nodeId)"
  nameWithType: "ComputeNodes.rebootAsync(String poolId, String nodeId)"
  summary: "Restarts the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> rebootAsync(String poolId, String nodeId)"
  desc: "Restarts the specified Compute Node. You can restart a Compute Node only if it is in an idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.rebootAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOption,com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.rebootAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)"
  name: "rebootAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)"
  nameWithType: "ComputeNodes.rebootAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)"
  summary: "Restarts the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "When to reboot the Compute Node and what to do with currently running Tasks. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion', 'retainedData'"
    name: "nodeRebootOption"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOption?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOption&text=ComputeNodeRebootOption\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeRebootOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOptions&text=ComputeNodeRebootOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> rebootAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)"
  desc: "Restarts the specified Compute Node. You can restart a Compute Node only if it is in an idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.rebootAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOption,com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.rebootAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions, ServiceCallback<Void> serviceCallback)"
  name: "rebootAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions, ServiceCallback<Void> serviceCallback)"
  nameWithType: "ComputeNodes.rebootAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions, ServiceCallback<Void> serviceCallback)"
  summary: "Restarts the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "When to reboot the Compute Node and what to do with currently running Tasks. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion', 'retainedData'"
    name: "nodeRebootOption"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOption?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOption&text=ComputeNodeRebootOption\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeRebootOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOptions&text=ComputeNodeRebootOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> rebootAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions, ServiceCallback<Void> serviceCallback)"
  desc: "Restarts the specified Compute Node. You can restart a Compute Node only if it is in an idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.rebootAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.rebootAsync(String poolId, String nodeId, ServiceCallback<Void> serviceCallback)"
  name: "rebootAsync(String poolId, String nodeId, ServiceCallback<Void> serviceCallback)"
  nameWithType: "ComputeNodes.rebootAsync(String poolId, String nodeId, ServiceCallback<Void> serviceCallback)"
  summary: "Restarts the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> rebootAsync(String poolId, String nodeId, ServiceCallback<Void> serviceCallback)"
  desc: "Restarts the specified Compute Node. You can restart a Compute Node only if it is in an idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.rebootWithServiceResponseAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.rebootWithServiceResponseAsync(String poolId, String nodeId)"
  name: "rebootWithServiceResponseAsync(String poolId, String nodeId)"
  nameWithType: "ComputeNodes.rebootWithServiceResponseAsync(String poolId, String nodeId)"
  summary: "Restarts the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,ComputeNodeRebootHeaders>> rebootWithServiceResponseAsync(String poolId, String nodeId)"
  desc: "Restarts the specified Compute Node. You can restart a Compute Node only if it is in an idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeRebootHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeRebootHeaders&text=ComputeNodeRebootHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.rebootWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOption,com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.rebootWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)"
  name: "rebootWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)"
  nameWithType: "ComputeNodes.rebootWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)"
  summary: "Restarts the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "When to reboot the Compute Node and what to do with currently running Tasks. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion', 'retainedData'"
    name: "nodeRebootOption"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOption?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOption&text=ComputeNodeRebootOption\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeRebootOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOptions&text=ComputeNodeRebootOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,ComputeNodeRebootHeaders>> rebootWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)"
  desc: "Restarts the specified Compute Node. You can restart a Compute Node only if it is in an idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeRebootHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeRebootHeaders&text=ComputeNodeRebootHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.reimage(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.reimage(String poolId, String nodeId)"
  name: "reimage(String poolId, String nodeId)"
  nameWithType: "ComputeNodes.reimage(String poolId, String nodeId)"
  summary: "Reinstalls the operating system on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void reimage(String poolId, String nodeId)"
  desc: "Reinstalls the operating system on the specified Compute Node. You can reinstall the operating system on a Compute Node only if it is in an idle or running state. This API can be invoked only on Pools created with the cloud service configuration property."
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.reimage(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOption,com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.reimage(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)"
  name: "reimage(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)"
  nameWithType: "ComputeNodes.reimage(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)"
  summary: "Reinstalls the operating system on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "When to reimage the Compute Node and what to do with currently running Tasks. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion', 'retainedData'"
    name: "nodeReimageOption"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOption?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOption&text=ComputeNodeReimageOption\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeReimageOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOptions&text=ComputeNodeReimageOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void reimage(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)"
  desc: "Reinstalls the operating system on the specified Compute Node. You can reinstall the operating system on a Compute Node only if it is in an idle or running state. This API can be invoked only on Pools created with the cloud service configuration property."
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.reimageAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.reimageAsync(String poolId, String nodeId)"
  name: "reimageAsync(String poolId, String nodeId)"
  nameWithType: "ComputeNodes.reimageAsync(String poolId, String nodeId)"
  summary: "Reinstalls the operating system on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> reimageAsync(String poolId, String nodeId)"
  desc: "Reinstalls the operating system on the specified Compute Node. You can reinstall the operating system on a Compute Node only if it is in an idle or running state. This API can be invoked only on Pools created with the cloud service configuration property."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.reimageAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOption,com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.reimageAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)"
  name: "reimageAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)"
  nameWithType: "ComputeNodes.reimageAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)"
  summary: "Reinstalls the operating system on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "When to reimage the Compute Node and what to do with currently running Tasks. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion', 'retainedData'"
    name: "nodeReimageOption"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOption?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOption&text=ComputeNodeReimageOption\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeReimageOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOptions&text=ComputeNodeReimageOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> reimageAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)"
  desc: "Reinstalls the operating system on the specified Compute Node. You can reinstall the operating system on a Compute Node only if it is in an idle or running state. This API can be invoked only on Pools created with the cloud service configuration property."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.reimageAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOption,com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.reimageAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions, ServiceCallback<Void> serviceCallback)"
  name: "reimageAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions, ServiceCallback<Void> serviceCallback)"
  nameWithType: "ComputeNodes.reimageAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions, ServiceCallback<Void> serviceCallback)"
  summary: "Reinstalls the operating system on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "When to reimage the Compute Node and what to do with currently running Tasks. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion', 'retainedData'"
    name: "nodeReimageOption"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOption?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOption&text=ComputeNodeReimageOption\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeReimageOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOptions&text=ComputeNodeReimageOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> reimageAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions, ServiceCallback<Void> serviceCallback)"
  desc: "Reinstalls the operating system on the specified Compute Node. You can reinstall the operating system on a Compute Node only if it is in an idle or running state. This API can be invoked only on Pools created with the cloud service configuration property."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.reimageAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.reimageAsync(String poolId, String nodeId, ServiceCallback<Void> serviceCallback)"
  name: "reimageAsync(String poolId, String nodeId, ServiceCallback<Void> serviceCallback)"
  nameWithType: "ComputeNodes.reimageAsync(String poolId, String nodeId, ServiceCallback<Void> serviceCallback)"
  summary: "Reinstalls the operating system on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> reimageAsync(String poolId, String nodeId, ServiceCallback<Void> serviceCallback)"
  desc: "Reinstalls the operating system on the specified Compute Node. You can reinstall the operating system on a Compute Node only if it is in an idle or running state. This API can be invoked only on Pools created with the cloud service configuration property."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.reimageWithServiceResponseAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.reimageWithServiceResponseAsync(String poolId, String nodeId)"
  name: "reimageWithServiceResponseAsync(String poolId, String nodeId)"
  nameWithType: "ComputeNodes.reimageWithServiceResponseAsync(String poolId, String nodeId)"
  summary: "Reinstalls the operating system on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,ComputeNodeReimageHeaders>> reimageWithServiceResponseAsync(String poolId, String nodeId)"
  desc: "Reinstalls the operating system on the specified Compute Node. You can reinstall the operating system on a Compute Node only if it is in an idle or running state. This API can be invoked only on Pools created with the cloud service configuration property."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeReimageHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeReimageHeaders&text=ComputeNodeReimageHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.reimageWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOption,com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.reimageWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)"
  name: "reimageWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)"
  nameWithType: "ComputeNodes.reimageWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)"
  summary: "Reinstalls the operating system on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node that you want to restart."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "When to reimage the Compute Node and what to do with currently running Tasks. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion', 'retainedData'"
    name: "nodeReimageOption"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOption?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOption&text=ComputeNodeReimageOption\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeReimageOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOptions&text=ComputeNodeReimageOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,ComputeNodeReimageHeaders>> reimageWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)"
  desc: "Reinstalls the operating system on the specified Compute Node. You can reinstall the operating system on a Compute Node only if it is in an idle or running state. This API can be invoked only on Pools created with the cloud service configuration property."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeReimageHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeReimageHeaders&text=ComputeNodeReimageHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.updateUser(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.updateUser(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)"
  name: "updateUser(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)"
  nameWithType: "ComputeNodes.updateUser(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)"
  summary: "Updates the password and expiration time of a user Account on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to update a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the user Account to update."
    name: "userName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The parameters for the request."
    name: "nodeUpdateUserParameter"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter?alt=com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter&text=NodeUpdateUserParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void updateUser(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)"
  desc: "Updates the password and expiration time of a user Account on the specified Compute Node. This operation replaces of all the updatable properties of the Account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user Account on a Compute Node only when it is in the idle or running state."
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.updateUser(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter,com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.updateUser(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)"
  name: "updateUser(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)"
  nameWithType: "ComputeNodes.updateUser(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)"
  summary: "Updates the password and expiration time of a user Account on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to update a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the user Account to update."
    name: "userName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The parameters for the request."
    name: "nodeUpdateUserParameter"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter?alt=com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter&text=NodeUpdateUserParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeUpdateUserOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserOptions&text=ComputeNodeUpdateUserOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void updateUser(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)"
  desc: "Updates the password and expiration time of a user Account on the specified Compute Node. This operation replaces of all the updatable properties of the Account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user Account on a Compute Node only when it is in the idle or running state."
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.updateUserAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)"
  name: "updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)"
  nameWithType: "ComputeNodes.updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)"
  summary: "Updates the password and expiration time of a user Account on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to update a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the user Account to update."
    name: "userName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The parameters for the request."
    name: "nodeUpdateUserParameter"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter?alt=com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter&text=NodeUpdateUserParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)"
  desc: "Updates the password and expiration time of a user Account on the specified Compute Node. This operation replaces of all the updatable properties of the Account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user Account on a Compute Node only when it is in the idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.updateUserAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter,com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)"
  name: "updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)"
  nameWithType: "ComputeNodes.updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)"
  summary: "Updates the password and expiration time of a user Account on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to update a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the user Account to update."
    name: "userName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The parameters for the request."
    name: "nodeUpdateUserParameter"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter?alt=com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter&text=NodeUpdateUserParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeUpdateUserOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserOptions&text=ComputeNodeUpdateUserOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)"
  desc: "Updates the password and expiration time of a user Account on the specified Compute Node. This operation replaces of all the updatable properties of the Account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user Account on a Compute Node only when it is in the idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.updateUserAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter,com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions, ServiceCallback<Void> serviceCallback)"
  name: "updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions, ServiceCallback<Void> serviceCallback)"
  nameWithType: "ComputeNodes.updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions, ServiceCallback<Void> serviceCallback)"
  summary: "Updates the password and expiration time of a user Account on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to update a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the user Account to update."
    name: "userName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The parameters for the request."
    name: "nodeUpdateUserParameter"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter?alt=com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter&text=NodeUpdateUserParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeUpdateUserOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserOptions&text=ComputeNodeUpdateUserOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions, ServiceCallback<Void> serviceCallback)"
  desc: "Updates the password and expiration time of a user Account on the specified Compute Node. This operation replaces of all the updatable properties of the Account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user Account on a Compute Node only when it is in the idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.updateUserAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ServiceCallback<Void> serviceCallback)"
  name: "updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ServiceCallback<Void> serviceCallback)"
  nameWithType: "ComputeNodes.updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ServiceCallback<Void> serviceCallback)"
  summary: "Updates the password and expiration time of a user Account on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to update a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the user Account to update."
    name: "userName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The parameters for the request."
    name: "nodeUpdateUserParameter"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter?alt=com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter&text=NodeUpdateUserParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ServiceCallback<Void> serviceCallback)"
  desc: "Updates the password and expiration time of a user Account on the specified Compute Node. This operation replaces of all the updatable properties of the Account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user Account on a Compute Node only when it is in the idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.updateUserWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.updateUserWithServiceResponseAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)"
  name: "updateUserWithServiceResponseAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)"
  nameWithType: "ComputeNodes.updateUserWithServiceResponseAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)"
  summary: "Updates the password and expiration time of a user Account on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to update a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the user Account to update."
    name: "userName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The parameters for the request."
    name: "nodeUpdateUserParameter"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter?alt=com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter&text=NodeUpdateUserParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,ComputeNodeUpdateUserHeaders>> updateUserWithServiceResponseAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)"
  desc: "Updates the password and expiration time of a user Account on the specified Compute Node. This operation replaces of all the updatable properties of the Account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user Account on a Compute Node only when it is in the idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserHeaders&text=ComputeNodeUpdateUserHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.updateUserWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter,com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.updateUserWithServiceResponseAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)"
  name: "updateUserWithServiceResponseAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)"
  nameWithType: "ComputeNodes.updateUserWithServiceResponseAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)"
  summary: "Updates the password and expiration time of a user Account on the specified Compute Node."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the machine on which you want to update a user Account."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the user Account to update."
    name: "userName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The parameters for the request."
    name: "nodeUpdateUserParameter"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter?alt=com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter&text=NodeUpdateUserParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeUpdateUserOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserOptions&text=ComputeNodeUpdateUserOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,ComputeNodeUpdateUserHeaders>> updateUserWithServiceResponseAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)"
  desc: "Updates the password and expiration time of a user Account on the specified Compute Node. This operation replaces of all the updatable properties of the Account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user Account on a Compute Node only when it is in the idle or running state."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserHeaders&text=ComputeNodeUpdateUserHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogs(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogs(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)"
  name: "uploadBatchServiceLogs(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)"
  nameWithType: "ComputeNodes.uploadBatchServiceLogs(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)"
  summary: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node from which you want to upload the Azure Batch service log files."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Azure Batch service log files upload configuration."
    name: "uploadBatchServiceLogsConfiguration"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration&text=UploadBatchServiceLogsConfiguration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract UploadBatchServiceLogsResult uploadBatchServiceLogs(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)"
  desc: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage. This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service."
  returns:
    description: "the UploadBatchServiceLogsResult object if successful."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogs(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration,com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogs(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)"
  name: "uploadBatchServiceLogs(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)"
  nameWithType: "ComputeNodes.uploadBatchServiceLogs(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)"
  summary: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node from which you want to upload the Azure Batch service log files."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Azure Batch service log files upload configuration."
    name: "uploadBatchServiceLogsConfiguration"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration&text=UploadBatchServiceLogsConfiguration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeUploadBatchServiceLogsOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsOptions&text=ComputeNodeUploadBatchServiceLogsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract UploadBatchServiceLogsResult uploadBatchServiceLogs(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)"
  desc: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage. This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service."
  returns:
    description: "the UploadBatchServiceLogsResult object if successful."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)"
  name: "uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)"
  nameWithType: "ComputeNodes.uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)"
  summary: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node from which you want to upload the Azure Batch service log files."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Azure Batch service log files upload configuration."
    name: "uploadBatchServiceLogsConfiguration"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration&text=UploadBatchServiceLogsConfiguration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<UploadBatchServiceLogsResult> uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)"
  desc: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage. This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service."
  returns:
    description: "the observable to the UploadBatchServiceLogsResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration,com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)"
  name: "uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)"
  nameWithType: "ComputeNodes.uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)"
  summary: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node from which you want to upload the Azure Batch service log files."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Azure Batch service log files upload configuration."
    name: "uploadBatchServiceLogsConfiguration"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration&text=UploadBatchServiceLogsConfiguration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeUploadBatchServiceLogsOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsOptions&text=ComputeNodeUploadBatchServiceLogsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<UploadBatchServiceLogsResult> uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)"
  desc: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage. This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service."
  returns:
    description: "the observable to the UploadBatchServiceLogsResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration,com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsOptions,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions, ServiceCallback<UploadBatchServiceLogsResult> serviceCallback)"
  name: "uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions, ServiceCallback<UploadBatchServiceLogsResult> serviceCallback)"
  nameWithType: "ComputeNodes.uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions, ServiceCallback<UploadBatchServiceLogsResult> serviceCallback)"
  summary: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node from which you want to upload the Azure Batch service log files."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Azure Batch service log files upload configuration."
    name: "uploadBatchServiceLogsConfiguration"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration&text=UploadBatchServiceLogsConfiguration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeUploadBatchServiceLogsOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsOptions&text=ComputeNodeUploadBatchServiceLogsOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<UploadBatchServiceLogsResult> uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions, ServiceCallback<UploadBatchServiceLogsResult> serviceCallback)"
  desc: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage. This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult>)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ServiceCallback<UploadBatchServiceLogsResult> serviceCallback)"
  name: "uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ServiceCallback<UploadBatchServiceLogsResult> serviceCallback)"
  nameWithType: "ComputeNodes.uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ServiceCallback<UploadBatchServiceLogsResult> serviceCallback)"
  summary: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node from which you want to upload the Azure Batch service log files."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Azure Batch service log files upload configuration."
    name: "uploadBatchServiceLogsConfiguration"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration&text=UploadBatchServiceLogsConfiguration\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<UploadBatchServiceLogsResult> uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ServiceCallback<UploadBatchServiceLogsResult> serviceCallback)"
  desc: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage. This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsWithServiceResponseAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)"
  name: "uploadBatchServiceLogsWithServiceResponseAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)"
  nameWithType: "ComputeNodes.uploadBatchServiceLogsWithServiceResponseAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)"
  summary: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node from which you want to upload the Azure Batch service log files."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Azure Batch service log files upload configuration."
    name: "uploadBatchServiceLogsConfiguration"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration&text=UploadBatchServiceLogsConfiguration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<UploadBatchServiceLogsResult,ComputeNodeUploadBatchServiceLogsHeaders>> uploadBatchServiceLogsWithServiceResponseAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)"
  desc: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage. This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service."
  returns:
    description: "the observable to the UploadBatchServiceLogsResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsHeaders&text=ComputeNodeUploadBatchServiceLogsHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration,com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsOptions)"
  fullName: "com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsWithServiceResponseAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)"
  name: "uploadBatchServiceLogsWithServiceResponseAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)"
  nameWithType: "ComputeNodes.uploadBatchServiceLogsWithServiceResponseAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)"
  summary: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Pool that contains the Compute Node."
    name: "poolId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Compute Node from which you want to upload the Azure Batch service log files."
    name: "nodeId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Azure Batch service log files upload configuration."
    name: "uploadBatchServiceLogsConfiguration"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration&text=UploadBatchServiceLogsConfiguration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "computeNodeUploadBatchServiceLogsOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsOptions&text=ComputeNodeUploadBatchServiceLogsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<UploadBatchServiceLogsResult,ComputeNodeUploadBatchServiceLogsHeaders>> uploadBatchServiceLogsWithServiceResponseAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)"
  desc: "Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage. This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service."
  returns:
    description: "the observable to the UploadBatchServiceLogsResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsHeaders&text=ComputeNodeUploadBatchServiceLogsHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "interface"
desc: "An instance of this class provides access to all the operations defined in ComputeNodes."
metadata: {}
package: "com.microsoft.azure.batch.protocol"
artifact: com.microsoft.azure:azure-batch:9.0.0
