### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.blob.implementation.DirectorysImpl"
  id: "DirectorysImpl"
  parent: "com.azure.storage.blob.implementation"
  children:
  - "com.azure.storage.blob.implementation.DirectorysImpl.DirectorysImpl(com.azure.storage.blob.implementation.AzureBlobStorageImpl)"
  - "com.azure.storage.blob.implementation.DirectorysImpl.createWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.DirectorysImpl.createWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.implementation.models.DirectoryHttpHeaders,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.DirectorysImpl.deleteWithRestResponseAsync(java.lang.String,java.lang.String,boolean,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.DirectorysImpl.deleteWithRestResponseAsync(java.lang.String,java.lang.String,boolean,java.lang.Integer,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.DirectorysImpl.getAccessControlWithRestResponseAsync(com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.DirectorysImpl.getAccessControlWithRestResponseAsync(java.lang.Integer,java.lang.Boolean,java.lang.String,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.DirectorysImpl.renameWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.DirectorysImpl.renameWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.implementation.models.DirectoryHttpHeaders,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.DirectorysImpl.setAccessControlWithRestResponseAsync(com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.DirectorysImpl.setAccessControlWithRestResponseAsync(java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,com.azure.core.util.Context)"
  langs:
  - "java"
  name: "DirectorysImpl"
  nameWithType: "DirectorysImpl"
  fullName: "com.azure.storage.blob.implementation.DirectorysImpl"
  type: "Class"
  package: "com.azure.storage.blob.implementation"
  summary: "An instance of this class provides access to all the operations defined in Directorys."
  syntax:
    content: "public final class DirectorysImpl"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.blob.implementation.DirectorysImpl.DirectorysImpl(com.azure.storage.blob.implementation.AzureBlobStorageImpl)"
  id: "DirectorysImpl(com.azure.storage.blob.implementation.AzureBlobStorageImpl)"
  parent: "com.azure.storage.blob.implementation.DirectorysImpl"
  langs:
  - "java"
  name: "DirectorysImpl(AzureBlobStorageImpl client)"
  nameWithType: "DirectorysImpl.DirectorysImpl(AzureBlobStorageImpl client)"
  fullName: "com.azure.storage.blob.implementation.DirectorysImpl.DirectorysImpl(AzureBlobStorageImpl client)"
  overload: "com.azure.storage.blob.implementation.DirectorysImpl.DirectorysImpl*"
  type: "Constructor"
  package: "com.azure.storage.blob.implementation"
  summary: "Initializes an instance of DirectorysImpl."
  syntax:
    content: "public DirectorysImpl(AzureBlobStorageImpl client)"
    parameters:
    - id: "client"
      type: "com.azure.storage.blob.implementation.AzureBlobStorageImpl"
      description: "the instance of the service client containing this operation class."
- uid: "com.azure.storage.blob.implementation.DirectorysImpl.createWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "createWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.DirectorysImpl"
  langs:
  - "java"
  name: "createWithRestResponseAsync(String filesystem, String path, Context context)"
  nameWithType: "DirectorysImpl.createWithRestResponseAsync(String filesystem, String path, Context context)"
  fullName: "com.azure.storage.blob.implementation.DirectorysImpl.createWithRestResponseAsync(String filesystem, String path, Context context)"
  overload: "com.azure.storage.blob.implementation.DirectorysImpl.createWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "Create a directory. By default, the destination is overwritten and if the destination already exists and has a lease the lease is broken. This operation supports conditional HTTP requests. For more information, see \\[Specifying Conditional Headers for Blob Service Operations\\](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). To fail if the destination already exists, use a conditional request with If-None-Match: \"\\*\"."
  syntax:
    content: "public Mono<DirectorysCreateResponse> createWithRestResponseAsync(String filesystem, String path, Context context)"
    parameters:
    - id: "filesystem"
      type: "java.lang.String"
      description: "The filesystem name."
    - id: "path"
      type: "java.lang.String"
      description: "The namespace path to a file or directory."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.DirectorysCreateResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.DirectorysImpl.createWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.implementation.models.DirectoryHttpHeaders,com.azure.core.util.Context)"
  id: "createWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.implementation.models.DirectoryHttpHeaders,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.DirectorysImpl"
  langs:
  - "java"
  name: "createWithRestResponseAsync(String filesystem, String path, Integer timeout, String directoryProperties, String posixPermissions, String posixUmask, String leaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, DirectoryHttpHeaders directoryHttpHeaders, Context context)"
  nameWithType: "DirectorysImpl.createWithRestResponseAsync(String filesystem, String path, Integer timeout, String directoryProperties, String posixPermissions, String posixUmask, String leaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, DirectoryHttpHeaders directoryHttpHeaders, Context context)"
  fullName: "com.azure.storage.blob.implementation.DirectorysImpl.createWithRestResponseAsync(String filesystem, String path, Integer timeout, String directoryProperties, String posixPermissions, String posixUmask, String leaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, DirectoryHttpHeaders directoryHttpHeaders, Context context)"
  overload: "com.azure.storage.blob.implementation.DirectorysImpl.createWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "Create a directory. By default, the destination is overwritten and if the destination already exists and has a lease the lease is broken. This operation supports conditional HTTP requests. For more information, see \\[Specifying Conditional Headers for Blob Service Operations\\](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). To fail if the destination already exists, use a conditional request with If-None-Match: \"\\*\"."
  syntax:
    content: "public Mono<DirectorysCreateResponse> createWithRestResponseAsync(String filesystem, String path, Integer timeout, String directoryProperties, String posixPermissions, String posixUmask, String leaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, DirectoryHttpHeaders directoryHttpHeaders, Context context)"
    parameters:
    - id: "filesystem"
      type: "java.lang.String"
      description: "The filesystem name."
    - id: "path"
      type: "java.lang.String"
      description: "The namespace path to a file or directory."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "directoryProperties"
      type: "java.lang.String"
      description: "Optional.  User-defined properties to be stored with the file or directory, in the format of a comma-separated list of name and value pairs \"n1=v1, n2=v2, ...\", where each value is base64 encoded."
    - id: "posixPermissions"
      type: "java.lang.String"
      description: "Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access permissions for the file owner, the file owning group, and others. Each class may be granted read, write, or execute permission.  The sticky bit is also supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported."
    - id: "posixUmask"
      type: "java.lang.String"
      description: "Only valid if Hierarchical Namespace is enabled for the account. This umask restricts permission settings for file and directory, and will only be applied when default Acl does not exist in parent directory. If the umask bit has set, it means that the corresponding permission will be disabled. Otherwise the corresponding permission will be determined by the permission. A 4-digit octal notation (e.g. 0022) is supported here. If no umask was specified, a default umask - 0027 will be used."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "directoryHttpHeaders"
      type: "com.azure.storage.blob.implementation.models.DirectoryHttpHeaders"
      description: "Additional parameters for the operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.DirectorysCreateResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.DirectorysImpl.deleteWithRestResponseAsync(java.lang.String,java.lang.String,boolean,com.azure.core.util.Context)"
  id: "deleteWithRestResponseAsync(java.lang.String,java.lang.String,boolean,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.DirectorysImpl"
  langs:
  - "java"
  name: "deleteWithRestResponseAsync(String filesystem, String path, boolean recursiveDirectoryDelete, Context context)"
  nameWithType: "DirectorysImpl.deleteWithRestResponseAsync(String filesystem, String path, boolean recursiveDirectoryDelete, Context context)"
  fullName: "com.azure.storage.blob.implementation.DirectorysImpl.deleteWithRestResponseAsync(String filesystem, String path, boolean recursiveDirectoryDelete, Context context)"
  overload: "com.azure.storage.blob.implementation.DirectorysImpl.deleteWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "Deletes the directory."
  syntax:
    content: "public Mono<DirectorysDeleteResponse> deleteWithRestResponseAsync(String filesystem, String path, boolean recursiveDirectoryDelete, Context context)"
    parameters:
    - id: "filesystem"
      type: "java.lang.String"
      description: "The filesystem name."
    - id: "path"
      type: "java.lang.String"
      description: "The namespace path to a file or directory."
    - id: "recursiveDirectoryDelete"
      type: "boolean"
      description: "If \"true\", all paths beneath the directory will be deleted. If \"false\" and the directory is non-empty, an error occurs."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.DirectorysDeleteResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.DirectorysImpl.deleteWithRestResponseAsync(java.lang.String,java.lang.String,boolean,java.lang.Integer,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "deleteWithRestResponseAsync(java.lang.String,java.lang.String,boolean,java.lang.Integer,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.DirectorysImpl"
  langs:
  - "java"
  name: "deleteWithRestResponseAsync(String filesystem, String path, boolean recursiveDirectoryDelete, Integer timeout, String marker, String leaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
  nameWithType: "DirectorysImpl.deleteWithRestResponseAsync(String filesystem, String path, boolean recursiveDirectoryDelete, Integer timeout, String marker, String leaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
  fullName: "com.azure.storage.blob.implementation.DirectorysImpl.deleteWithRestResponseAsync(String filesystem, String path, boolean recursiveDirectoryDelete, Integer timeout, String marker, String leaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
  overload: "com.azure.storage.blob.implementation.DirectorysImpl.deleteWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "Deletes the directory."
  syntax:
    content: "public Mono<DirectorysDeleteResponse> deleteWithRestResponseAsync(String filesystem, String path, boolean recursiveDirectoryDelete, Integer timeout, String marker, String leaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
    parameters:
    - id: "filesystem"
      type: "java.lang.String"
      description: "The filesystem name."
    - id: "path"
      type: "java.lang.String"
      description: "The namespace path to a file or directory."
    - id: "recursiveDirectoryDelete"
      type: "boolean"
      description: "If \"true\", all paths beneath the directory will be deleted. If \"false\" and the directory is non-empty, an error occurs."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "marker"
      type: "java.lang.String"
      description: "When renaming a directory, the number of paths that are renamed with each invocation is limited.  If the number of paths to be renamed exceeds this limit, a continuation token is returned in this response header.  When a continuation token is returned in the response, it must be specified in a subsequent invocation of the rename operation to continue renaming the directory."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.DirectorysDeleteResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.DirectorysImpl.getAccessControlWithRestResponseAsync(com.azure.core.util.Context)"
  id: "getAccessControlWithRestResponseAsync(com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.DirectorysImpl"
  langs:
  - "java"
  name: "getAccessControlWithRestResponseAsync(Context context)"
  nameWithType: "DirectorysImpl.getAccessControlWithRestResponseAsync(Context context)"
  fullName: "com.azure.storage.blob.implementation.DirectorysImpl.getAccessControlWithRestResponseAsync(Context context)"
  overload: "com.azure.storage.blob.implementation.DirectorysImpl.getAccessControlWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "Get the owner, group, permissions, or access control list for a directory."
  syntax:
    content: "public Mono<DirectorysGetAccessControlResponse> getAccessControlWithRestResponseAsync(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.DirectorysGetAccessControlResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.DirectorysImpl.getAccessControlWithRestResponseAsync(java.lang.Integer,java.lang.Boolean,java.lang.String,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,com.azure.core.util.Context)"
  id: "getAccessControlWithRestResponseAsync(java.lang.Integer,java.lang.Boolean,java.lang.String,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.DirectorysImpl"
  langs:
  - "java"
  name: "getAccessControlWithRestResponseAsync(Integer timeout, Boolean upn, String leaseId, String ifMatch, String ifNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String requestId, Context context)"
  nameWithType: "DirectorysImpl.getAccessControlWithRestResponseAsync(Integer timeout, Boolean upn, String leaseId, String ifMatch, String ifNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String requestId, Context context)"
  fullName: "com.azure.storage.blob.implementation.DirectorysImpl.getAccessControlWithRestResponseAsync(Integer timeout, Boolean upn, String leaseId, String ifMatch, String ifNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String requestId, Context context)"
  overload: "com.azure.storage.blob.implementation.DirectorysImpl.getAccessControlWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "Get the owner, group, permissions, or access control list for a directory."
  syntax:
    content: "public Mono<DirectorysGetAccessControlResponse> getAccessControlWithRestResponseAsync(Integer timeout, Boolean upn, String leaseId, String ifMatch, String ifNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String requestId, Context context)"
    parameters:
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "upn"
      type: "java.lang.Boolean"
      description: "Optional. Valid only when Hierarchical Namespace is enabled for the account. If \"true\", the identity values returned in the x-ms-owner, x-ms-group, and x-ms-acl response headers will be transformed from Azure Active Directory Object IDs to User Principal Names.  If \"false\", the values will be returned as Azure Active Directory Object IDs. The default value is false."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.DirectorysGetAccessControlResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.DirectorysImpl.renameWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "renameWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.DirectorysImpl"
  langs:
  - "java"
  name: "renameWithRestResponseAsync(String filesystem, String path, String renameSource, Context context)"
  nameWithType: "DirectorysImpl.renameWithRestResponseAsync(String filesystem, String path, String renameSource, Context context)"
  fullName: "com.azure.storage.blob.implementation.DirectorysImpl.renameWithRestResponseAsync(String filesystem, String path, String renameSource, Context context)"
  overload: "com.azure.storage.blob.implementation.DirectorysImpl.renameWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "Rename a directory. By default, the destination is overwritten and if the destination already exists and has a lease the lease is broken. This operation supports conditional HTTP requests. For more information, see \\[Specifying Conditional Headers for Blob Service Operations\\](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). To fail if the destination already exists, use a conditional request with If-None-Match: \"\\*\"."
  syntax:
    content: "public Mono<DirectorysRenameResponse> renameWithRestResponseAsync(String filesystem, String path, String renameSource, Context context)"
    parameters:
    - id: "filesystem"
      type: "java.lang.String"
      description: "The filesystem name."
    - id: "path"
      type: "java.lang.String"
      description: "The namespace path to a file or directory."
    - id: "renameSource"
      type: "java.lang.String"
      description: "The file or directory to be renamed. The value must have the following format: \"/{filesysystem}/{path}\".  If \"x-ms-properties\" is specified, the properties will overwrite the existing properties; otherwise, the existing properties will be preserved."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.DirectorysRenameResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.DirectorysImpl.renameWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.implementation.models.DirectoryHttpHeaders,com.azure.core.util.Context)"
  id: "renameWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.implementation.models.DirectoryHttpHeaders,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.DirectorysImpl"
  langs:
  - "java"
  name: "renameWithRestResponseAsync(String filesystem, String path, String renameSource, Integer timeout, String marker, String directoryProperties, String posixPermissions, String posixUmask, String leaseId, String sourceLeaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, String requestId, DirectoryHttpHeaders directoryHttpHeaders, Context context)"
  nameWithType: "DirectorysImpl.renameWithRestResponseAsync(String filesystem, String path, String renameSource, Integer timeout, String marker, String directoryProperties, String posixPermissions, String posixUmask, String leaseId, String sourceLeaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, String requestId, DirectoryHttpHeaders directoryHttpHeaders, Context context)"
  fullName: "com.azure.storage.blob.implementation.DirectorysImpl.renameWithRestResponseAsync(String filesystem, String path, String renameSource, Integer timeout, String marker, String directoryProperties, String posixPermissions, String posixUmask, String leaseId, String sourceLeaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, String requestId, DirectoryHttpHeaders directoryHttpHeaders, Context context)"
  overload: "com.azure.storage.blob.implementation.DirectorysImpl.renameWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "Rename a directory. By default, the destination is overwritten and if the destination already exists and has a lease the lease is broken. This operation supports conditional HTTP requests. For more information, see \\[Specifying Conditional Headers for Blob Service Operations\\](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). To fail if the destination already exists, use a conditional request with If-None-Match: \"\\*\"."
  syntax:
    content: "public Mono<DirectorysRenameResponse> renameWithRestResponseAsync(String filesystem, String path, String renameSource, Integer timeout, String marker, String directoryProperties, String posixPermissions, String posixUmask, String leaseId, String sourceLeaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, String requestId, DirectoryHttpHeaders directoryHttpHeaders, Context context)"
    parameters:
    - id: "filesystem"
      type: "java.lang.String"
      description: "The filesystem name."
    - id: "path"
      type: "java.lang.String"
      description: "The namespace path to a file or directory."
    - id: "renameSource"
      type: "java.lang.String"
      description: "The file or directory to be renamed. The value must have the following format: \"/{filesysystem}/{path}\".  If \"x-ms-properties\" is specified, the properties will overwrite the existing properties; otherwise, the existing properties will be preserved."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "marker"
      type: "java.lang.String"
      description: "When renaming a directory, the number of paths that are renamed with each invocation is limited.  If the number of paths to be renamed exceeds this limit, a continuation token is returned in this response header.  When a continuation token is returned in the response, it must be specified in a subsequent invocation of the rename operation to continue renaming the directory."
    - id: "directoryProperties"
      type: "java.lang.String"
      description: "Optional.  User-defined properties to be stored with the file or directory, in the format of a comma-separated list of name and value pairs \"n1=v1, n2=v2, ...\", where each value is base64 encoded."
    - id: "posixPermissions"
      type: "java.lang.String"
      description: "Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access permissions for the file owner, the file owning group, and others. Each class may be granted read, write, or execute permission.  The sticky bit is also supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported."
    - id: "posixUmask"
      type: "java.lang.String"
      description: "Only valid if Hierarchical Namespace is enabled for the account. This umask restricts permission settings for file and directory, and will only be applied when default Acl does not exist in parent directory. If the umask bit has set, it means that the corresponding permission will be disabled. Otherwise the corresponding permission will be determined by the permission. A 4-digit octal notation (e.g. 0022) is supported here. If no umask was specified, a default umask - 0027 will be used."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "sourceLeaseId"
      type: "java.lang.String"
      description: "A lease ID for the source path. If specified, the source path must have an active lease and the leaase ID must match."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "sourceIfModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "sourceIfUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "sourceIfMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "sourceIfNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "directoryHttpHeaders"
      type: "com.azure.storage.blob.implementation.models.DirectoryHttpHeaders"
      description: "Additional parameters for the operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.DirectorysRenameResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.DirectorysImpl.setAccessControlWithRestResponseAsync(com.azure.core.util.Context)"
  id: "setAccessControlWithRestResponseAsync(com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.DirectorysImpl"
  langs:
  - "java"
  name: "setAccessControlWithRestResponseAsync(Context context)"
  nameWithType: "DirectorysImpl.setAccessControlWithRestResponseAsync(Context context)"
  fullName: "com.azure.storage.blob.implementation.DirectorysImpl.setAccessControlWithRestResponseAsync(Context context)"
  overload: "com.azure.storage.blob.implementation.DirectorysImpl.setAccessControlWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "Set the owner, group, permissions, or access control list for a directory."
  syntax:
    content: "public Mono<DirectorysSetAccessControlResponse> setAccessControlWithRestResponseAsync(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.DirectorysSetAccessControlResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.DirectorysImpl.setAccessControlWithRestResponseAsync(java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,com.azure.core.util.Context)"
  id: "setAccessControlWithRestResponseAsync(java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.DirectorysImpl"
  langs:
  - "java"
  name: "setAccessControlWithRestResponseAsync(Integer timeout, String leaseId, String owner, String group, String posixPermissions, String posixAcl, String ifMatch, String ifNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String requestId, Context context)"
  nameWithType: "DirectorysImpl.setAccessControlWithRestResponseAsync(Integer timeout, String leaseId, String owner, String group, String posixPermissions, String posixAcl, String ifMatch, String ifNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String requestId, Context context)"
  fullName: "com.azure.storage.blob.implementation.DirectorysImpl.setAccessControlWithRestResponseAsync(Integer timeout, String leaseId, String owner, String group, String posixPermissions, String posixAcl, String ifMatch, String ifNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String requestId, Context context)"
  overload: "com.azure.storage.blob.implementation.DirectorysImpl.setAccessControlWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "Set the owner, group, permissions, or access control list for a directory."
  syntax:
    content: "public Mono<DirectorysSetAccessControlResponse> setAccessControlWithRestResponseAsync(Integer timeout, String leaseId, String owner, String group, String posixPermissions, String posixAcl, String ifMatch, String ifNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String requestId, Context context)"
    parameters:
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "owner"
      type: "java.lang.String"
      description: "Optional. The owner of the blob or directory."
    - id: "group"
      type: "java.lang.String"
      description: "Optional. The owning group of the blob or directory."
    - id: "posixPermissions"
      type: "java.lang.String"
      description: "Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access permissions for the file owner, the file owning group, and others. Each class may be granted read, write, or execute permission.  The sticky bit is also supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported."
    - id: "posixAcl"
      type: "java.lang.String"
      description: "Sets POSIX access control rights on files and directories. The value is a comma-separated list of access control entries. Each access control entry (ACE) consists of a scope, a type, a user or group identifier, and permissions in the format \"[scope:][type]:[id]:[permissions]\"."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.DirectorysSetAccessControlResponse>"
      description: "a Mono which performs the network request upon subscription."
references:
- uid: "com.azure.storage.blob.implementation.AzureBlobStorageImpl"
  name: "AzureBlobStorageImpl"
  nameWithType: "AzureBlobStorageImpl"
  fullName: "com.azure.storage.blob.implementation.AzureBlobStorageImpl"
- uid: "com.azure.storage.blob.implementation.DirectorysImpl.DirectorysImpl*"
  name: "DirectorysImpl"
  nameWithType: "DirectorysImpl.DirectorysImpl"
  fullName: "com.azure.storage.blob.implementation.DirectorysImpl.DirectorysImpl"
  package: "com.azure.storage.blob.implementation"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.DirectorysCreateResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.DirectorysCreateResponse"
    name: "DirectorysCreateResponse"
    fullName: "com.azure.storage.blob.implementation.models.DirectorysCreateResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.DirectorysImpl.createWithRestResponseAsync*"
  name: "createWithRestResponseAsync"
  nameWithType: "DirectorysImpl.createWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.DirectorysImpl.createWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "java.time.OffsetDateTime"
  spec.java:
  - uid: "java.time.OffsetDateTime"
    name: "OffsetDateTime"
    fullName: "java.time.OffsetDateTime"
- uid: "com.azure.storage.blob.implementation.models.DirectoryHttpHeaders"
  name: "DirectoryHttpHeaders"
  nameWithType: "DirectoryHttpHeaders"
  fullName: "com.azure.storage.blob.implementation.models.DirectoryHttpHeaders"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.DirectorysRenameResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.DirectorysRenameResponse"
    name: "DirectorysRenameResponse"
    fullName: "com.azure.storage.blob.implementation.models.DirectorysRenameResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.DirectorysImpl.renameWithRestResponseAsync*"
  name: "renameWithRestResponseAsync"
  nameWithType: "DirectorysImpl.renameWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.DirectorysImpl.renameWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.DirectorysDeleteResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.DirectorysDeleteResponse"
    name: "DirectorysDeleteResponse"
    fullName: "com.azure.storage.blob.implementation.models.DirectorysDeleteResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.DirectorysImpl.deleteWithRestResponseAsync*"
  name: "deleteWithRestResponseAsync"
  nameWithType: "DirectorysImpl.deleteWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.DirectorysImpl.deleteWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.DirectorysSetAccessControlResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.DirectorysSetAccessControlResponse"
    name: "DirectorysSetAccessControlResponse"
    fullName: "com.azure.storage.blob.implementation.models.DirectorysSetAccessControlResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.DirectorysImpl.setAccessControlWithRestResponseAsync*"
  name: "setAccessControlWithRestResponseAsync"
  nameWithType: "DirectorysImpl.setAccessControlWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.DirectorysImpl.setAccessControlWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.DirectorysGetAccessControlResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.DirectorysGetAccessControlResponse"
    name: "DirectorysGetAccessControlResponse"
    fullName: "com.azure.storage.blob.implementation.models.DirectorysGetAccessControlResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.DirectorysImpl.getAccessControlWithRestResponseAsync*"
  name: "getAccessControlWithRestResponseAsync"
  nameWithType: "DirectorysImpl.getAccessControlWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.DirectorysImpl.getAccessControlWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.storage.blob.implementation.DirectorysImpl.DirectorysService"
  name: "DirectorysImpl.DirectorysService"
  nameWithType: "DirectorysImpl.DirectorysService"
  fullName: "com.azure.storage.blob.implementation.DirectorysImpl.DirectorysService"
- uid: "com.azure.storage.blob.implementation.models.DirectorysCreateResponse"
  name: "DirectorysCreateResponse"
  nameWithType: "DirectorysCreateResponse"
  fullName: "com.azure.storage.blob.implementation.models.DirectorysCreateResponse"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.storage.blob.implementation.models.DirectorysRenameResponse"
  name: "DirectorysRenameResponse"
  nameWithType: "DirectorysRenameResponse"
  fullName: "com.azure.storage.blob.implementation.models.DirectorysRenameResponse"
- uid: "com.azure.storage.blob.implementation.models.DirectorysDeleteResponse"
  name: "DirectorysDeleteResponse"
  nameWithType: "DirectorysDeleteResponse"
  fullName: "com.azure.storage.blob.implementation.models.DirectorysDeleteResponse"
- uid: "com.azure.storage.blob.implementation.models.DirectorysSetAccessControlResponse"
  name: "DirectorysSetAccessControlResponse"
  nameWithType: "DirectorysSetAccessControlResponse"
  fullName: "com.azure.storage.blob.implementation.models.DirectorysSetAccessControlResponse"
- uid: "com.azure.storage.blob.implementation.models.DirectorysGetAccessControlResponse"
  name: "DirectorysGetAccessControlResponse"
  nameWithType: "DirectorysGetAccessControlResponse"
  fullName: "com.azure.storage.blob.implementation.models.DirectorysGetAccessControlResponse"
