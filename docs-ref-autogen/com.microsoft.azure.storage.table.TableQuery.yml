### YamlMime:JavaType
constructors:
- com.microsoft.azure.storage.table.TableQuery.TableQuery()
- com.microsoft.azure.storage.table.TableQuery.TableQuery(final Class<T>)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- com.microsoft.azure.storage.table.TableQuery.combineFilters(String,String,String)
- com.microsoft.azure.storage.table.TableQuery.from(final Class<T>)
- com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final boolean)
- com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final byte [])
- com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final Byte [])
- com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final Date)
- com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final double)
- com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final int)
- com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final long)
- com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final String)
- com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final UUID)
- com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,String,EdmType)
- com.microsoft.azure.storage.table.TableQuery.generateQueryBuilder()
- com.microsoft.azure.storage.table.TableQuery.getClazzType()
- com.microsoft.azure.storage.table.TableQuery.getColumns()
- com.microsoft.azure.storage.table.TableQuery.getFilterString()
- com.microsoft.azure.storage.table.TableQuery.getSourceTableName()
- com.microsoft.azure.storage.table.TableQuery.getTakeCount()
- com.microsoft.azure.storage.table.TableQuery.select(final String [])
- com.microsoft.azure.storage.table.TableQuery.setClazzType(final Class<T>)
- com.microsoft.azure.storage.table.TableQuery.setColumns(final String [])
- com.microsoft.azure.storage.table.TableQuery.setFilterString(final String)
- com.microsoft.azure.storage.table.TableQuery.setSourceTableName(final String)
- com.microsoft.azure.storage.table.TableQuery.setTakeCount(final Integer)
- com.microsoft.azure.storage.table.TableQuery.take(final Integer)
- com.microsoft.azure.storage.table.TableQuery.where(final String)
nameWithType: TableQuery<T>
syntax: public class TableQuery<T extends TableEntity>
type: class
typeParameters:
- description: '<p>A class type which implements <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false">TableEntity</xref> and contains a nullary constructor. Note: when using an inner class to define the class type, mark the class as static. </p>'
  name: T
uid: com.microsoft.azure.storage.table.TableQuery
fullName: com.microsoft.azure.storage.table.TableQuery<T>
name: TableQuery<T>
package: com.microsoft.azure.storage.table
summary: >-
  <p>A class which represents a query against a specified table. A <xref uid="com.microsoft.azure.storage.table.TableQuery" data-throw-if-not-resolved="false">TableQuery</xref> instance aggregates the query parameters to use when the query is executed. One of the  or  methods of <xref uid="com.microsoft.azure.storage.table.CloudTableClient" data-throw-if-not-resolved="false">CloudTableClient</xref> must be called to execute the query. The parameters are encoded and passed to the server when the table query is executed. </p>

  <p>To create a table query with fluent syntax, the <xref uid="com.microsoft.azure.storage.table.TableQuery.from(final Class&lt;T&gt;)" data-throw-if-not-resolved="false">from</xref> static factory method and the <xref uid="com.microsoft.azure.storage.table.TableQuery.where(final String)" data-throw-if-not-resolved="false">where</xref>, <xref uid="com.microsoft.azure.storage.table.TableQuery.select(final String [])" data-throw-if-not-resolved="false">select</xref>, and <xref uid="com.microsoft.azure.storage.table.TableQuery.take(final Integer)" data-throw-if-not-resolved="false">take</xref> mutator methods each return a reference to the object which can be chained into a single expression. Use the <xref uid="" data-throw-if-not-resolved="false">from(Class)</xref> static class factory method to create a  instance that executes on the named table with entities of the specified <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false">TableEntity</xref> implementing type. Use the <xref uid="com.microsoft.azure.storage.table.TableQuery.where(final String)" data-throw-if-not-resolved="false">where</xref> method to specify a filter expression for the entities returned. Use the <xref uid="com.microsoft.azure.storage.table.TableQuery.select(final String [])" data-throw-if-not-resolved="false">select</xref> method to specify the table entity properties to return. Use the <xref uid="com.microsoft.azure.storage.table.TableQuery.take(final Integer)" data-throw-if-not-resolved="false">take</xref> method to limit the number of entities returned by the query. Note that nothing prevents calling these methods more than once on a , so the values saved in the  will be the last encountered in order of execution. </p>

  <p>As an example, you could construct a table query using fluent syntax: </p>

  <p></p>

  <p>This example creates a query on the "Products" table for all entities where the PartitionKey value is "ProductsMNO" and the RowKey value is greater than or equal to "Napkin" and requests the first 25 matching entities, selecting only the common properties and the property named "InventoryCount", and returns them as <xref uid="com.microsoft.azure.storage.table.DynamicTableEntity" data-throw-if-not-resolved="false">DynamicTableEntity</xref> objects. </p>

  <p>Filter expressions for use with the <xref uid="com.microsoft.azure.storage.table.TableQuery.where(final String)" data-throw-if-not-resolved="false">where</xref> method or <xref uid="com.microsoft.azure.storage.table.TableQuery.setFilterString(final String)" data-throw-if-not-resolved="false">setFilterString</xref> method can be created using fluent syntax with the overloaded <xref uid="com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final boolean)" data-throw-if-not-resolved="false">generateFilterCondition</xref> methods and <xref uid="com.microsoft.azure.storage.table.TableQuery.combineFilters(String,String,String)" data-throw-if-not-resolved="false">combineFilters</xref> method, using the comparison operators defined in <xref uid="" data-throw-if-not-resolved="false">QueryComparisons</xref> and the logical operators defined in <xref uid="" data-throw-if-not-resolved="false">Operators</xref>. Note that the first operand in a filter comparison must be a property name, and the second operand must evaluate to a constant. The PartitionKey and RowKey property values are  types for comparison purposes. </p>

  <p>The values that may be used in table queries are explained in more detail in the MSDN topic <a href="http://msdn.microsoft.com/en-us/library/azure/dd894031.aspx">Querying Tables and Entities</a>, but note that the space characters within values do not need to be URL-encoded, as this will be done when the query is executed. </p>

  <p>The <xref uid="" data-throw-if-not-resolved="false">TableQuery#TableQuery(Class)</xref> constructor and <xref uid="" data-throw-if-not-resolved="false">TableQuery#from(Class)</xref> static factory methods require a class type which implements <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false">TableEntity</xref> and contains a nullary constructor. If the query will be executed using an <xref uid="com.microsoft.azure.storage.table.EntityResolver" data-throw-if-not-resolved="false">EntityResolver</xref>, the caller may specify <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false">TableServiceEntity</xref> as the class type.</p>

  <p></p>
metadata: {}
