### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.storage.table.TableQuery
  id: TableQuery
  parent: com.microsoft.azure.storage.table
  children:
  - com.microsoft.azure.storage.table.TableQuery.combineFilters(String,String,String)
  - com.microsoft.azure.storage.table.TableQuery.from(final Class<T>)
  - com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final boolean)
  - com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final byte [])
  - com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final Byte [])
  - com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final Date)
  - com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final double)
  - com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final int)
  - com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final long)
  - com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final String)
  - com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final UUID)
  - com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,String,EdmType)
  - com.microsoft.azure.storage.table.TableQuery.generateQueryBuilder()
  - com.microsoft.azure.storage.table.TableQuery.getClazzType()
  - com.microsoft.azure.storage.table.TableQuery.getColumns()
  - com.microsoft.azure.storage.table.TableQuery.getFilterString()
  - com.microsoft.azure.storage.table.TableQuery.getSourceTableName()
  - com.microsoft.azure.storage.table.TableQuery.getTakeCount()
  - com.microsoft.azure.storage.table.TableQuery.select(final String [])
  - com.microsoft.azure.storage.table.TableQuery.setClazzType(final Class<T>)
  - com.microsoft.azure.storage.table.TableQuery.setColumns(final String [])
  - com.microsoft.azure.storage.table.TableQuery.setFilterString(final String)
  - com.microsoft.azure.storage.table.TableQuery.setSourceTableName(final String)
  - com.microsoft.azure.storage.table.TableQuery.setTakeCount(final Integer)
  - com.microsoft.azure.storage.table.TableQuery.TableQuery()
  - com.microsoft.azure.storage.table.TableQuery.TableQuery(final Class<T>)
  - com.microsoft.azure.storage.table.TableQuery.take(final Integer)
  - com.microsoft.azure.storage.table.TableQuery.where(final String)
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: TableQuery<T>
  nameWithType: TableQuery<T>
  fullName: com.microsoft.azure.storage.table.TableQuery<T>
  type: Class
  source:
    remote: &o0
      path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
      branch: legacy-master
      repo: https://github.com/azure/azure-storage-java
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 74
  package: com.microsoft.azure.storage.table
  summary: "<p>A class which represents a query against a specified table. A <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableQuery\"></xref> instance aggregates the query parameters to use when the query is executed. One of the  or  methods of <xref uid=\"com.microsoft.azure.storage.table.CloudTableClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CloudTableClient\"></xref> must be called to execute the query. The parameters are encoded and passed to the server when the table query is executed. </p>\r\n<p>To create a table query with fluent syntax, the <xref uid=\"com.microsoft.azure.storage.table.TableQuery.from(final Class&lt;T&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"from\"></xref> static factory method and the <xref uid=\"com.microsoft.azure.storage.table.TableQuery.where(final String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"where\"></xref>, <xref uid=\"com.microsoft.azure.storage.table.TableQuery.select(final String [])\" data-throw-if-not-resolved=\"false\" data-raw-source=\"select\"></xref>, and <xref uid=\"com.microsoft.azure.storage.table.TableQuery.take(final Integer)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"take\"></xref> mutator methods each return a reference to the object which can be chained into a single expression. Use the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"from(Class)\"></xref> static class factory method to create a  instance that executes on the named table with entities of the specified <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableEntity\"></xref> implementing type. Use the <xref uid=\"com.microsoft.azure.storage.table.TableQuery.where(final String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"where\"></xref> method to specify a filter expression for the entities returned. Use the <xref uid=\"com.microsoft.azure.storage.table.TableQuery.select(final String [])\" data-throw-if-not-resolved=\"false\" data-raw-source=\"select\"></xref> method to specify the table entity properties to return. Use the <xref uid=\"com.microsoft.azure.storage.table.TableQuery.take(final Integer)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"take\"></xref> method to limit the number of entities returned by the query. Note that nothing prevents calling these methods more than once on a , so the values saved in the  will be the last encountered in order of execution. </p>\r\n<p>As an example, you could construct a table query using fluent syntax: </p>\r\n<p></p>\r\n<p>This example creates a query on the \"Products\" table for all entities where the PartitionKey value is \"ProductsMNO\" and the RowKey value is greater than or equal to \"Napkin\" and requests the first 25 matching entities, selecting only the common properties and the property named \"InventoryCount\", and returns them as <xref uid=\"com.microsoft.azure.storage.table.DynamicTableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DynamicTableEntity\"></xref> objects. </p>\r\n<p>Filter expressions for use with the <xref uid=\"com.microsoft.azure.storage.table.TableQuery.where(final String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"where\"></xref> method or <xref uid=\"com.microsoft.azure.storage.table.TableQuery.setFilterString(final String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"setFilterString\"></xref> method can be created using fluent syntax with the overloaded <xref uid=\"com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"generateFilterCondition\"></xref> methods and <xref uid=\"com.microsoft.azure.storage.table.TableQuery.combineFilters(String,String,String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"combineFilters\"></xref> method, using the comparison operators defined in <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueryComparisons\"></xref> and the logical operators defined in <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Operators\"></xref>. Note that the first operand in a filter comparison must be a property name, and the second operand must evaluate to a constant. The PartitionKey and RowKey property values are  types for comparison purposes. </p>\r\n<p>The values that may be used in table queries are explained in more detail in the MSDN topic <a href=\"http://msdn.microsoft.com/en-us/library/azure/dd894031.aspx\">Querying Tables and Entities</a>, but note that the space characters within values do not need to be URL-encoded, as this will be done when the query is executed. </p>\r\n<p>The <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableQuery#TableQuery(Class)\"></xref> constructor and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableQuery#from(Class)\"></xref> static factory methods require a class type which implements <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableEntity\"></xref> and contains a nullary constructor. If the query will be executed using an <xref uid=\"com.microsoft.azure.storage.table.EntityResolver\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EntityResolver\"></xref>, the caller may specify <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableServiceEntity\"></xref> as the class type.</p>\r\n<p></p>"
  syntax: &o1
    content: public class TableQuery<T extends TableEntity>
    typeParameters:
    - id: T
      type: 8ce1ecb9
      description: '<p>A class type which implements <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> and contains a nullary constructor. Note: when using an inner class to define the class type, mark the class as static. </p>'
  inheritance:
  - java.lang.Object
- uid: com.microsoft.azure.storage.table.TableQuery.combineFilters(String,String,String)
  id: combineFilters(String,String,String)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: combineFilters(String filterA, String operator, String filterB)
  nameWithType: TableQuery<T>.combineFilters(String filterA, String operator, String filterB)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.combineFilters(String filterA, String operator, String filterB)
  overload: com.microsoft.azure.storage.table.TableQuery.combineFilters*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 438
  package: com.microsoft.azure.storage.table
  summary: "<p>Creates a filter condition using the specified logical operator on two filter conditions.</p>\r\n<p></p>"
  syntax: &o9
    content: public static String combineFilters(String filterA, String operator, String filterB)
    parameters:
    - id: filterA
      type: "26831127"
      description: <p>A <code>String</code> which specifies the first formatted filter condition. </p>
    - id: operator
      type: "26831127"
      description: <p>A <code>String</code> which specifies <code>Operators.AND</code> or <code>Operators.OR</code>. </p>
    - id: filterB
      type: "26831127"
      description: <p>A <code>String</code> which specifies the first formatted filter condition. </p>
    return:
      type: "26831127"
      description: <p>A <code>String</code> which represents the combined filter expression. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.from(final Class<T>)
  id: from(final Class<T>)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: from(final Class<T> clazzType)
  nameWithType: TableQuery<T>.from(final Class<T> clazzType)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.from(final Class<T> clazzType)
  overload: com.microsoft.azure.storage.table.TableQuery.from*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 147
  package: com.microsoft.azure.storage.table
  summary: "<p>A static factory method that constructs a <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableQuery\"></xref> instance and defines its table entity type. The method returns the <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableQuery\"></xref> instance reference, allowing additional methods to be chained to modify the query. </p>\r\n<p>The created <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableQuery\"></xref> instance is specialized for table entities of the specified class type T. Callers may specify <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableServiceEntity\"></xref> as the class type parameter if no more specialized type is required.</p>\r\n<p></p>"
  syntax: &o10
    content: public static static<T extends TableEntity> TableQuery<T> from(final Class<T> clazzType)
    parameters:
    - id: clazzType
      type: 2854615f
      description: <p>The <code>java.lang.Class</code> of the class <code>T</code> implementing the <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> interface that represents the table entity type for the query.</p>
    return:
      type: 1e2c6103com.microsoft.azure.storage.table.TableEntity410a1f1ccom.microsoft.azure.storage.table.TableQuery669339f7
      description: <p>The <xref uid="com.microsoft.azure.storage.table.TableQuery" data-throw-if-not-resolved="false" data-raw-source="TableQuery"></xref> instance with the entity type specialization set. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final boolean)
  id: generateFilterCondition(String,String,final boolean)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: generateFilterCondition(String propertyName, String operation, final boolean value)
  nameWithType: TableQuery<T>.generateFilterCondition(String propertyName, String operation, final boolean value)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition(String propertyName, String operation, final boolean value)
  overload: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 171
  package: com.microsoft.azure.storage.table
  summary: "<p>Generates a property filter condition string for a  value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a boolean, as in the following example: </p>\r\n<p></p>\r\n<p>This statement sets  to the following value: </p>\r\n<p></p>\r\n<p></p>"
  syntax: &o8
    content: public static String generateFilterCondition(String propertyName, String operation, final boolean value)
    parameters:
    - id: propertyName
      type: "26831127"
      description: <p>A <code>String</code> which specifies the name of the property to compare. </p>
    - id: operation
      type: "26831127"
      description: <p>A <code>String</code> which specifies the comparison operator to use. </p>
    - id: value
      type: 4dda0764
      description: <p>A <code>boolean</code> which specifies the value to compare with the property. </p>
    return:
      type: "26831127"
      description: <p>A <code>String</code> which represents the formatted filter condition. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final byte [])
  id: generateFilterCondition(String,String,final byte [])
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: generateFilterCondition(String propertyName, String operation, final byte[] value)
  nameWithType: TableQuery<T>.generateFilterCondition(String propertyName, String operation, final byte[] value)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition(String propertyName, String operation, final byte[] value)
  overload: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 196
  package: com.microsoft.azure.storage.table
  summary: "<p>Generates a property filter condition string for a  value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a binary value, as in the following example: </p>\r\n<p></p>\r\n<p>This statement sets  to the following value: </p>\r\n<p></p>\r\n<p></p>"
  syntax:
    content: public static String generateFilterCondition(String propertyName, String operation, final byte[] value)
    parameters:
    - id: propertyName
      type: "26831127"
      description: <p>A <code>String</code> which specifies the name of the property to compare. </p>
    - id: operation
      type: "26831127"
      description: <p>A <code>String</code> which specifies the comparison operator to use. </p>
    - id: value
      type: f549433f
      description: <p>A <code>byte</code> array which specifies the value to compare with the property. </p>
    return:
      type: "26831127"
      description: <p>A <code>String</code> which represents the formatted filter condition. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final Byte [])
  id: generateFilterCondition(String,String,final Byte [])
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: generateFilterCondition(String propertyName, String operation, final Byte[] value)
  nameWithType: TableQuery<T>.generateFilterCondition(String propertyName, String operation, final Byte[] value)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition(String propertyName, String operation, final Byte[] value)
  overload: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 228
  package: com.microsoft.azure.storage.table
  summary: "<p>Generates a property filter condition string for a  value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a binary value, as in the following example: </p>\r\n<p></p>\r\n<p>This statement sets  to the following value: </p>\r\n<p></p>\r\n<p></p>"
  syntax:
    content: public static String generateFilterCondition(String propertyName, String operation, final Byte[] value)
    parameters:
    - id: propertyName
      type: "26831127"
      description: <p>A <code>String</code> which specifies the name of the property to compare. </p>
    - id: operation
      type: "26831127"
      description: <p>A <code>String</code> which specifies the comparison operator to use. </p>
    - id: value
      type: "51340937"
      description: <p>A <code>Byte</code> array which specifies the value to compare with the property. </p>
    return:
      type: "26831127"
      description: <p>A <code>String</code> which represents the formatted filter condition. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final Date)
  id: generateFilterCondition(String,String,final Date)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: generateFilterCondition(String propertyName, String operation, final Date value)
  nameWithType: TableQuery<T>.generateFilterCondition(String propertyName, String operation, final Date value)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition(String propertyName, String operation, final Date value)
  overload: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 260
  package: com.microsoft.azure.storage.table
  summary: "<p>Generates a property filter condition string for a  value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a datetime value, as in the following example: </p>\r\n<p></p>\r\n<p>This statement sets  to something like the following value: </p>\r\n<p></p>\r\n<p></p>"
  syntax:
    content: public static String generateFilterCondition(String propertyName, String operation, final Date value)
    parameters:
    - id: propertyName
      type: "26831127"
      description: <p>A <code>String</code> which specifies the name of the property to compare. </p>
    - id: operation
      type: "26831127"
      description: <p>A <code>String</code> which specifies the comparison operator to use. </p>
    - id: value
      type: 970a8f17
      description: <p>A <code>java.util.Date</code> which specifies the value to compare with the property. </p>
    return:
      type: "26831127"
      description: <p>A <code>String</code> which represents the formatted filter condition. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final double)
  id: generateFilterCondition(String,String,final double)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: generateFilterCondition(String propertyName, String operation, final double value)
  nameWithType: TableQuery<T>.generateFilterCondition(String propertyName, String operation, final double value)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition(String propertyName, String operation, final double value)
  overload: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 285
  package: com.microsoft.azure.storage.table
  summary: "<p>Generates a property filter condition string for a  value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a double value, as in the following example: </p>\r\n<p></p>\r\n<p>This statement sets  to the following value: </p>\r\n<p></p>\r\n<p></p>"
  syntax:
    content: public static String generateFilterCondition(String propertyName, String operation, final double value)
    parameters:
    - id: propertyName
      type: "26831127"
      description: <p>A <code>String</code> which specifies the name of the property to compare. </p>
    - id: operation
      type: "26831127"
      description: <p>A <code>String</code> which specifies the comparison operator to use. </p>
    - id: value
      type: bc185a0c
      description: <p>A <code>double</code> which specifies the value to compare with the property. </p>
    return:
      type: "26831127"
      description: <p>A <code>String</code> which represents the formatted filter condition. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final int)
  id: generateFilterCondition(String,String,final int)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: generateFilterCondition(String propertyName, String operation, final int value)
  nameWithType: TableQuery<T>.generateFilterCondition(String propertyName, String operation, final int value)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition(String propertyName, String operation, final int value)
  overload: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 309
  package: com.microsoft.azure.storage.table
  summary: "<p>Generates a property filter condition string for an  value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a numeric value, as in the following example: </p>\r\n<p></p>\r\n<p>This statement sets  to the following value: </p>\r\n<p></p>\r\n<p></p>"
  syntax:
    content: public static String generateFilterCondition(String propertyName, String operation, final int value)
    parameters:
    - id: propertyName
      type: "26831127"
      description: <p>A <code>String</code> which specifies the name of the property to compare. </p>
    - id: operation
      type: "26831127"
      description: <p>A <code>String</code> which specifies the comparison operator to use. </p>
    - id: value
      type: cd225469
      description: <p>An <code>int</code> which specifies the value to compare with the property. </p>
    return:
      type: "26831127"
      description: <p>A <code>String</code> which represents the formatted filter condition. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final long)
  id: generateFilterCondition(String,String,final long)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: generateFilterCondition(String propertyName, String operation, final long value)
  nameWithType: TableQuery<T>.generateFilterCondition(String propertyName, String operation, final long value)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition(String propertyName, String operation, final long value)
  overload: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 333
  package: com.microsoft.azure.storage.table
  summary: "<p>Generates a property filter condition string for a  value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a numeric value, as in the following example: </p>\r\n<p></p>\r\n<p>This statement sets  to the following value: </p>\r\n<p></p>\r\n<p></p>"
  syntax:
    content: public static String generateFilterCondition(String propertyName, String operation, final long value)
    parameters:
    - id: propertyName
      type: "26831127"
      description: <p>A <code>String</code> which specifies the name of the property to compare. </p>
    - id: operation
      type: "26831127"
      description: <p>A <code>String</code> which specifies the comparison operator to use. </p>
    - id: value
      type: 4c60ae65
      description: <p>A <code>long</code> which specifies the value to compare with the property. </p>
    return:
      type: "26831127"
      description: <p>A <code>String</code> which represents the formatted filter condition. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final String)
  id: generateFilterCondition(String,String,final String)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: generateFilterCondition(String propertyName, String operation, final String value)
  nameWithType: TableQuery<T>.generateFilterCondition(String propertyName, String operation, final String value)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition(String propertyName, String operation, final String value)
  overload: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 357
  package: com.microsoft.azure.storage.table
  summary: "<p>Generates a property filter condition string for a  value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a string value, as in the following example: </p>\r\n<p></p>\r\n<p>This statement sets  to the following value: </p>\r\n<p></p>\r\n<p></p>"
  syntax:
    content: public static String generateFilterCondition(String propertyName, String operation, final String value)
    parameters:
    - id: propertyName
      type: "26831127"
      description: <p>A <code>String</code> which specifies the name of the property to compare. </p>
    - id: operation
      type: "26831127"
      description: <p>A <code>String</code> which specifies the comparison operator to use. </p>
    - id: value
      type: 3d93591e
      description: <p>A <code>String</code> which specifies the value to compare with the property. </p>
    return:
      type: "26831127"
      description: <p>A <code>String</code> which represents the formatted filter condition. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final UUID)
  id: generateFilterCondition(String,String,final UUID)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: generateFilterCondition(String propertyName, String operation, final UUID value)
  nameWithType: TableQuery<T>.generateFilterCondition(String propertyName, String operation, final UUID value)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition(String propertyName, String operation, final UUID value)
  overload: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 422
  package: com.microsoft.azure.storage.table
  summary: "<p>Generates a property filter condition string for a  value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a UUID value, as in the following example: </p>\r\n<p></p>\r\n<p>This statement sets  to the following value: </p>\r\n<p></p>\r\n<p></p>"
  syntax:
    content: public static String generateFilterCondition(String propertyName, String operation, final UUID value)
    parameters:
    - id: propertyName
      type: "26831127"
      description: <p>A <code>String</code> which specifies the name of the property to compare. </p>
    - id: operation
      type: "26831127"
      description: <p>A <code>String</code> which specifies the comparison operator to use. </p>
    - id: value
      type: 5668214f
      description: <p>A <code>UUID</code> which specifies the value to compare with the property. </p>
    return:
      type: "26831127"
      description: <p>A <code>String</code> which represents the formatted filter condition. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,String,EdmType)
  id: generateFilterCondition(String,String,String,EdmType)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: generateFilterCondition(String propertyName, String operation, String value, EdmType edmType)
  nameWithType: TableQuery<T>.generateFilterCondition(String propertyName, String operation, String value, EdmType edmType)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition(String propertyName, String operation, String value, EdmType edmType)
  overload: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 376
  package: com.microsoft.azure.storage.table
  summary: "<p>Generates a property filter condition string. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as the specified <xref uid=\"com.microsoft.azure.storage.table.EdmType\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EdmType\"></xref>.</p>\r\n<p></p>"
  syntax:
    content: public static String generateFilterCondition(String propertyName, String operation, String value, EdmType edmType)
    parameters:
    - id: propertyName
      type: "26831127"
      description: <p>A <code>String</code> which specifies the name of the property to compare. </p>
    - id: operation
      type: "26831127"
      description: <p>A <code>String</code> which specifies the comparison operator to use. </p>
    - id: value
      type: "26831127"
      description: <p>A <code>String</code> which specifies the value to compare with the property. </p>
    - id: edmType
      type: com.microsoft.azure.storage.table.EdmType
      description: <p>The <xref uid="com.microsoft.azure.storage.table.EdmType" data-throw-if-not-resolved="false" data-raw-source="EdmType"></xref> to format the value as. </p>
    return:
      type: "26831127"
      description: <p>A <code>String</code> which represents the formatted filter condition. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.generateQueryBuilder()
  id: generateQueryBuilder()
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: generateQueryBuilder()
  nameWithType: TableQuery<T>.generateQueryBuilder()
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateQueryBuilder()
  overload: com.microsoft.azure.storage.table.TableQuery.generateQueryBuilder*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 706
  package: com.microsoft.azure.storage.table
  summary: "<p>Reserved for internal use. Creates a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UriQueryBuilder\"></xref> object representing the table query.</p>\r\n<p></p>"
  syntax:
    content: protected UriQueryBuilder generateQueryBuilder()
    return:
      type: com.microsoft.azure.storage.core.UriQueryBuilder
      description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="UriQueryBuilder"></xref> object representing the table query.</p>
  exceptions:
  - type: ca4f407a
    description: <p>if an error occurs in adding or encoding the query parameters. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.getClazzType()
  id: getClazzType()
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: getClazzType()
  nameWithType: TableQuery<T>.getClazzType()
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.getClazzType()
  overload: com.microsoft.azure.storage.table.TableQuery.getClazzType*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 477
  package: com.microsoft.azure.storage.table
  summary: "<p>Gets the class type of the table entities returned by the query.</p>\r\n<p></p>"
  syntax:
    content: public Class<T> getClazzType()
    return:
      type: ffb09d2d
      description: <p>The <code>java.lang.Class</code> of the class <code>T</code> that represents the table entity type for the query. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.getColumns()
  id: getColumns()
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: getColumns()
  nameWithType: TableQuery<T>.getColumns()
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.getColumns()
  overload: com.microsoft.azure.storage.table.TableQuery.getColumns*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 494
  package: com.microsoft.azure.storage.table
  summary: "<p>Gets an array of the table entity property names specified in the table query. All properties in the table are returned by default if no property names are specified with a select clause in the table query. The table entity properties to return may be specified with a call to the <xref uid=\"com.microsoft.azure.storage.table.TableQuery.setColumns(final String [])\" data-throw-if-not-resolved=\"false\" data-raw-source=\"setColumns\"></xref> or <xref uid=\"com.microsoft.azure.storage.table.TableQuery.select(final String [])\" data-throw-if-not-resolved=\"false\" data-raw-source=\"select\"></xref> methods with a array of property names as parameter. </p>\r\n<p>Note that the system properties , , and  are automatically requested from the table service whether specified in the <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableQuery\"></xref> or not.</p>\r\n<p></p>"
  syntax:
    content: public String [] getColumns()
    return:
      type: 1bb63ab0
      description: <p>An array of <code>String</code> objects which represents the property names of the table entity properties to return in the query. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.getFilterString()
  id: getFilterString()
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: getFilterString()
  nameWithType: TableQuery<T>.getFilterString()
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.getFilterString()
  overload: com.microsoft.azure.storage.table.TableQuery.getFilterString*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 506
  package: com.microsoft.azure.storage.table
  summary: "<p>Gets the filter expression specified in the table query. All entities in the table are returned by default if no filter expression is specified in the table query. A filter for the entities to return may be specified with a call to the <xref uid=\"com.microsoft.azure.storage.table.TableQuery.setFilterString(final String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"setFilterString\"></xref> or <xref uid=\"com.microsoft.azure.storage.table.TableQuery.where(final String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"where\"></xref> methods.</p>\r\n<p></p>"
  syntax:
    content: public String getFilterString()
    return:
      type: "26831127"
      description: <p>A <code>String</code> which represents the filter expression used in the query. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.getSourceTableName()
  id: getSourceTableName()
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: getSourceTableName()
  nameWithType: TableQuery<T>.getSourceTableName()
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.getSourceTableName()
  overload: com.microsoft.azure.storage.table.TableQuery.getSourceTableName*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 516
  package: com.microsoft.azure.storage.table
  summary: "<p>Gets the name of the source table specified in the table query.</p>\r\n<p></p>"
  syntax:
    content: protected String getSourceTableName()
    return:
      type: "26831127"
      description: <p>A <code>String</code> which represents the name of the source table used in the query. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.getTakeCount()
  id: getTakeCount()
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: getTakeCount()
  nameWithType: TableQuery<T>.getTakeCount()
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.getTakeCount()
  overload: com.microsoft.azure.storage.table.TableQuery.getTakeCount*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 531
  package: com.microsoft.azure.storage.table
  summary: "<p>Gets the number of entities the query returns specified in the table query. If this value is not specified in a table query, a maximum of 1,000 entries will be returned. The number of entities to return may be specified with a call to the <xref uid=\"com.microsoft.azure.storage.table.TableQuery.setTakeCount(final Integer)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"setTakeCount\"></xref> or <xref uid=\"com.microsoft.azure.storage.table.TableQuery.take(final Integer)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"take\"></xref> methods. </p>\r\n<p>If the value returned by  is greater than 1,000, the query will throw a <xref uid=\"com.microsoft.azure.storage.StorageException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageException\"></xref> when executed.</p>\r\n<p></p>"
  syntax:
    content: public Integer getTakeCount()
    return:
      type: 08effaa0
      description: <p>An <code>Integer</code> which represents the maximum number of entities for the table query to return. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.select(final String [])
  id: select(final String [])
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: select(final String[] columns)
  nameWithType: TableQuery<T>.select(final String[] columns)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.select(final String[] columns)
  overload: com.microsoft.azure.storage.table.TableQuery.select*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 550
  package: com.microsoft.azure.storage.table
  summary: "<p>Defines the property names of the table entity properties to return when the table query is executed. The  clause is optional on a table query, used to limit the table properties returned from the server. By default, a query will return all properties from the table entity. </p>\r\n<p>Note that the system properties , , and  are automatically requested from the table service whether specified in the <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableQuery\"></xref> or not.</p>\r\n<p></p>"
  syntax: &o3
    content: public TableQuery<T> select(final String[] columns)
    parameters:
    - id: columns
      type: 3e8f7ba4
      description: <p>An array of <code>String</code> objects which specify the property names of the table entity properties to return when the query is executed.</p>
    return:
      type: com.microsoft.azure.storage.table.TableQuery669339f7
      description: <p>A reference to the <xref uid="com.microsoft.azure.storage.table.TableQuery" data-throw-if-not-resolved="false" data-raw-source="TableQuery"></xref> instance with the table entity properties to return set. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.setClazzType(final Class<T>)
  id: setClazzType(final Class<T>)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: setClazzType(final Class<T> clazzType)
  nameWithType: TableQuery<T>.setClazzType(final Class<T> clazzType)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.setClazzType(final Class<T> clazzType)
  overload: com.microsoft.azure.storage.table.TableQuery.setClazzType*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 567
  package: com.microsoft.azure.storage.table
  summary: "<p>Sets the class type of the table entities returned by the query. A class type is required to execute a table query. </p>\r\n<p>Callers may specify <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableServiceEntity\"></xref> as the class type parameter if no more specialized type is required.</p>\r\n<p></p>"
  syntax:
    content: public void setClazzType(final Class<T> clazzType)
    parameters:
    - id: clazzType
      type: 2854615f
      description: <p>The <code>java.lang.Class</code> of the class <code>T</code> that represents the table entity type for the query. Class <code>T</code> must be a type that implements <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> and has a nullary constructor, </p>
- uid: com.microsoft.azure.storage.table.TableQuery.setColumns(final String [])
  id: setColumns(final String [])
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: setColumns(final String[] columns)
  nameWithType: TableQuery<T>.setColumns(final String[] columns)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.setColumns(final String[] columns)
  overload: com.microsoft.azure.storage.table.TableQuery.setColumns*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 584
  package: com.microsoft.azure.storage.table
  summary: "<p>Sets the property names of the table entity properties to return when the table query is executed. By default, a query will return all properties from the table entity. </p>\r\n<p>Note that the system properties , , and  are automatically requested from the table service whether specified in the <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableQuery\"></xref> or not.</p>\r\n<p></p>"
  syntax: &o2
    content: public void setColumns(final String[] columns)
    parameters:
    - id: columns
      type: 3e8f7ba4
      description: <p>An array of <code>String</code> objects which specify the property names of the table entity properties to return when the query is executed. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.setFilterString(final String)
  id: setFilterString(final String)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: setFilterString(final String filterString)
  nameWithType: TableQuery<T>.setFilterString(final String filterString)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.setFilterString(final String filterString)
  overload: com.microsoft.azure.storage.table.TableQuery.setFilterString*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 612
  package: com.microsoft.azure.storage.table
  summary: "<p>Sets the filter expression to use in the table query. A filter expression is optional; by default a table query will return all entities in the table. </p>\r\n<p>Filter expressions for use with the <xref uid=\"com.microsoft.azure.storage.table.TableQuery.setFilterString(final String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"setFilterString\"></xref> method can be created using fluent syntax with the overloaded <xref uid=\"com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"generateFilterCondition\"></xref> methods and <xref uid=\"com.microsoft.azure.storage.table.TableQuery.combineFilters(String,String,String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"combineFilters\"></xref> method, using the comparison operators defined in <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueryComparisons\"></xref> and the logical operators defined in <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Operators\"></xref>. Note that the first operand in a filter comparison must be a property name, and the second operand must evaluate to a constant. The PartitionKey and RowKey property values are  types for comparison purposes. For example, to query all entities with a PartitionKey value of \"AccessLogs\" on table query : </p>\r\n<p></p>\r\n<p>The values that may be used in table queries are explained in more detail in the MSDN topic</p>\r\n<p>\r\n  <a href=\"http://msdn.microsoft.com/en-us/library/azure/dd894031.aspx\">Querying Tables and Entities</a>, but note that the space characters within values do not need to be URL-encoded, as this will be done when the query is executed. </p>\r\n<p>Note that no more than 15 discrete comparisons are permitted within a filter string.</p>\r\n<p></p>"
  syntax: &o4
    content: public void setFilterString(final String filterString)
    parameters:
    - id: filterString
      type: 3d93591e
      description: <p>A <code>String</code> which represents the filter expression to use in the query. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.setSourceTableName(final String)
  id: setSourceTableName(final String)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: setSourceTableName(final String sourceTableName)
  nameWithType: TableQuery<T>.setSourceTableName(final String sourceTableName)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.setSourceTableName(final String sourceTableName)
  overload: com.microsoft.azure.storage.table.TableQuery.setSourceTableName*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 623
  package: com.microsoft.azure.storage.table
  summary: "<p>Sets the name of the source table for the table query. A table query must have a source table to be executed.</p>\r\n<p></p>"
  syntax:
    content: protected void setSourceTableName(final String sourceTableName)
    parameters:
    - id: sourceTableName
      type: 3d93591e
      description: <p>A <code>String</code> which specifies the name of the source table to use in the query. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.setTakeCount(final Integer)
  id: setTakeCount(final Integer)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: setTakeCount(final Integer takeCount)
  nameWithType: TableQuery<T>.setTakeCount(final Integer takeCount)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.setTakeCount(final Integer takeCount)
  overload: com.microsoft.azure.storage.table.TableQuery.setTakeCount*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 638
  package: com.microsoft.azure.storage.table
  summary: "<p>Sets the upper bound for the number of entities the query returns. If this value is not specified in a table query, by default a maximum of 1,000 entries will be returned. </p>\r\n<p>If the value specified for the  parameter is greater than 1,000, the query will throw a <xref uid=\"com.microsoft.azure.storage.StorageException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageException\"></xref> when executed.</p>\r\n<p></p>"
  syntax: &o6
    content: public void setTakeCount(final Integer takeCount)
    parameters:
    - id: takeCount
      type: 3437983f
      description: <p>An <code>Integer</code> which represents the maximum number of entities for the table query to return. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.TableQuery()
  id: TableQuery()
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: TableQuery()
  nameWithType: TableQuery<T>.TableQuery()
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.TableQuery()
  overload: com.microsoft.azure.storage.table.TableQuery.TableQuery*
  type: Constructor
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 452
  package: com.microsoft.azure.storage.table
  summary: "<p>Initializes an empty <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableQuery\"></xref> instance. This table query cannot be executed without setting a table entity type. </p>"
  syntax:
    content: public TableQuery()
- uid: com.microsoft.azure.storage.table.TableQuery.TableQuery(final Class<T>)
  id: TableQuery(final Class<T>)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: TableQuery(final Class<T> clazzType)
  nameWithType: TableQuery<T>.TableQuery(final Class<T> clazzType)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.TableQuery(final Class<T> clazzType)
  overload: com.microsoft.azure.storage.table.TableQuery.TableQuery*
  type: Constructor
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 466
  package: com.microsoft.azure.storage.table
  summary: "<p>Initializes a <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableQuery\"></xref> with the specified table entity type. Callers may specify <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableServiceEntity\"></xref> as the class type parameter if no more specialized type is required.</p>\r\n<p></p>"
  syntax:
    content: public TableQuery(final Class<T> clazzType)
    parameters:
    - id: clazzType
      type: 2854615f
      description: <p>The <code>java.lang.Class</code> of the class <code>T</code> that represents the table entity type for the query. Class <code>T</code> must be a type that implements <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> and has a nullary constructor. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.take(final Integer)
  id: take(final Integer)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: take(final Integer take)
  nameWithType: TableQuery<T>.take(final Integer take)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.take(final Integer take)
  overload: com.microsoft.azure.storage.table.TableQuery.take*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 659
  package: com.microsoft.azure.storage.table
  summary: "<p>Defines the upper bound for the number of entities the query returns. If this value is not specified in a table query, by default a maximum of 1,000 entries will be returned. </p>\r\n<p>If the value specified for the  parameter is greater than 1,000, the query will throw a <xref uid=\"com.microsoft.azure.storage.StorageException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageException\"></xref> when executed.</p>\r\n<p></p>"
  syntax: &o7
    content: public TableQuery<T> take(final Integer take)
    parameters:
    - id: take
      type: 3437983f
      description: <p>An <code>Integer</code> which represents the maximum number of entities for the table query to return.</p>
    return:
      type: com.microsoft.azure.storage.table.TableQuery669339f7
      description: <p>A reference to the <xref uid="com.microsoft.azure.storage.table.TableQuery" data-throw-if-not-resolved="false" data-raw-source="TableQuery"></xref> instance with the number of entities to return set. </p>
- uid: com.microsoft.azure.storage.table.TableQuery.where(final String)
  id: where(final String)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  langs:
  - java
  name: where(final String filter)
  nameWithType: TableQuery<T>.where(final String filter)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.where(final String filter)
  overload: com.microsoft.azure.storage.table.TableQuery.where*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableQuery.java
    startLine: 693
  package: com.microsoft.azure.storage.table
  summary: "<p>Defines a filter expression for the table query. Only entities that satisfy the specified filter expression will be returned by the query. Setting a filter expression is optional; by default, all entities in the table are returned if no filter expression is specified in the table query. </p>\r\n<p>Filter expressions for use with the <xref uid=\"com.microsoft.azure.storage.table.TableQuery.where(final String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"where\"></xref> method can be created using fluent syntax with the overloaded <xref uid=\"com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"generateFilterCondition\"></xref> methods and <xref uid=\"com.microsoft.azure.storage.table.TableQuery.combineFilters(String,String,String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"combineFilters\"></xref> method, using the comparison operators defined in <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueryComparisons\"></xref> and the logical operators defined in <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Operators\"></xref>. Note that the first operand in a filter comparison must be a property name, and the second operand must evaluate to a constant. The PartitionKey and RowKey property values are  types for comparison purposes. For example, to query all entities with a PartitionKey value of \"AccessLogs\" on table query : </p>\r\n<p></p>\r\n<p>The values that may be used in table queries are explained in more detail in the MSDN topic</p>\r\n<p>\r\n  <a href=\"http://msdn.microsoft.com/en-us/library/azure/dd894031.aspx\">Querying Tables and Entities</a>, but note that the space characters within values do not need to be URL-encoded, as this will be done when the query is executed. </p>\r\n<p>Note that no more than 15 discrete comparisons are permitted within a filter string.</p>\r\n<p></p>"
  syntax: &o5
    content: public TableQuery<T> where(final String filter)
    parameters:
    - id: filter
      type: 3d93591e
      description: <p>A <code>String</code> which specifies the filter expression to apply to the table query. </p>
    return:
      type: com.microsoft.azure.storage.table.TableQuery669339f7
      description: <p>A reference to the <xref uid="com.microsoft.azure.storage.table.TableQuery" data-throw-if-not-resolved="false" data-raw-source="TableQuery"></xref> instance with the filter on entities to return set. </p>
references:
- uid: 8ce1ecb9
  spec.java:
  - name: T
    fullName: T
- uid: 2854615f
  spec.java:
  - name: final Class<T>
    fullName: final Class<T>
- uid: 1e2c6103com.microsoft.azure.storage.table.TableEntity410a1f1ccom.microsoft.azure.storage.table.TableQuery669339f7
  spec.java:
  - name: 'static<T extends '
    fullName: 'static<T extends '
  - uid: com.microsoft.azure.storage.table.TableEntity
    name: TableEntity
    fullName: com.microsoft.azure.storage.table.TableEntity
    href: com.microsoft.azure.storage.table.TableEntity.yml
  - name: '> '
    fullName: '> '
  - uid: com.microsoft.azure.storage.table.TableQuery
    name: TableQuery
    fullName: com.microsoft.azure.storage.table.TableQuery
    href: com.microsoft.azure.storage.table.TableQuery.yml
  - name: <T>
    fullName: <T>
- uid: com.microsoft.azure.storage.table.TableQuery.from*
  name: from
  nameWithType: TableQuery<T>.from
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.from
  package: com.microsoft.azure.storage.table
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: 4dda0764
  spec.java:
  - name: final boolean
    fullName: final boolean
- uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*
  name: generateFilterCondition
  nameWithType: TableQuery<T>.generateFilterCondition
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition
  package: com.microsoft.azure.storage.table
- uid: f549433f
  spec.java:
  - name: final byte []
    fullName: final byte []
- uid: "51340937"
  spec.java:
  - name: final Byte []
    fullName: final Byte []
- uid: 970a8f17
  spec.java:
  - name: final Date
    fullName: final Date
- uid: bc185a0c
  spec.java:
  - name: final double
    fullName: final double
- uid: cd225469
  spec.java:
  - name: final int
    fullName: final int
- uid: 4c60ae65
  spec.java:
  - name: final long
    fullName: final long
- uid: 3d93591e
  spec.java:
  - name: final String
    fullName: final String
- uid: 5668214f
  spec.java:
  - name: final UUID
    fullName: final UUID
- uid: com.microsoft.azure.storage.table.TableQuery.combineFilters*
  name: combineFilters
  nameWithType: TableQuery<T>.combineFilters
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.combineFilters
  package: com.microsoft.azure.storage.table
- uid: com.microsoft.azure.storage.table.TableQuery.TableQuery*
  name: TableQuery
  nameWithType: TableQuery<T>.TableQuery
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.TableQuery
  package: com.microsoft.azure.storage.table
- uid: ffb09d2d
  spec.java:
  - name: Class<T>
    fullName: Class<T>
- uid: com.microsoft.azure.storage.table.TableQuery.getClazzType*
  name: getClazzType
  nameWithType: TableQuery<T>.getClazzType
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.getClazzType
  package: com.microsoft.azure.storage.table
- uid: 1bb63ab0
  spec.java:
  - name: String []
    fullName: String []
- uid: com.microsoft.azure.storage.table.TableQuery.getColumns*
  name: getColumns
  nameWithType: TableQuery<T>.getColumns
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.getColumns
  package: com.microsoft.azure.storage.table
- uid: com.microsoft.azure.storage.table.TableQuery.getFilterString*
  name: getFilterString
  nameWithType: TableQuery<T>.getFilterString
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.getFilterString
  package: com.microsoft.azure.storage.table
- uid: 08effaa0
  spec.java:
  - name: Integer
    fullName: Integer
- uid: com.microsoft.azure.storage.table.TableQuery.getTakeCount*
  name: getTakeCount
  nameWithType: TableQuery<T>.getTakeCount
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.getTakeCount
  package: com.microsoft.azure.storage.table
- uid: 3e8f7ba4
  spec.java:
  - name: final String []
    fullName: final String []
- uid: com.microsoft.azure.storage.table.TableQuery669339f7
  spec.java:
  - uid: com.microsoft.azure.storage.table.TableQuery
    name: TableQuery
    fullName: com.microsoft.azure.storage.table.TableQuery
    href: com.microsoft.azure.storage.table.TableQuery.yml
  - name: <T>
    fullName: <T>
- uid: com.microsoft.azure.storage.table.TableQuery.select*
  name: select
  nameWithType: TableQuery<T>.select
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.select
  package: com.microsoft.azure.storage.table
- uid: com.microsoft.azure.storage.table.TableQuery.setClazzType*
  name: setClazzType
  nameWithType: TableQuery<T>.setClazzType
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.setClazzType
  package: com.microsoft.azure.storage.table
- uid: com.microsoft.azure.storage.table.TableQuery.setColumns*
  name: setColumns
  nameWithType: TableQuery<T>.setColumns
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.setColumns
  package: com.microsoft.azure.storage.table
- uid: com.microsoft.azure.storage.table.TableQuery.setFilterString*
  name: setFilterString
  nameWithType: TableQuery<T>.setFilterString
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.setFilterString
  package: com.microsoft.azure.storage.table
- uid: 3437983f
  spec.java:
  - name: final Integer
    fullName: final Integer
- uid: com.microsoft.azure.storage.table.TableQuery.setTakeCount*
  name: setTakeCount
  nameWithType: TableQuery<T>.setTakeCount
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.setTakeCount
  package: com.microsoft.azure.storage.table
- uid: com.microsoft.azure.storage.table.TableQuery.take*
  name: take
  nameWithType: TableQuery<T>.take
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.take
  package: com.microsoft.azure.storage.table
- uid: com.microsoft.azure.storage.table.TableQuery.where*
  name: where
  nameWithType: TableQuery<T>.where
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.where
  package: com.microsoft.azure.storage.table
- uid: com.microsoft.azure.storage.table.TableQuery.getSourceTableName*
  name: getSourceTableName
  nameWithType: TableQuery<T>.getSourceTableName
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.getSourceTableName
  package: com.microsoft.azure.storage.table
- uid: com.microsoft.azure.storage.table.TableQuery.setSourceTableName*
  name: setSourceTableName
  nameWithType: TableQuery<T>.setSourceTableName
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.setSourceTableName
  package: com.microsoft.azure.storage.table
- uid: ca4f407a
  spec.java:
  - name: StorageException
    fullName: StorageException
- uid: com.microsoft.azure.storage.table.TableQuery.generateQueryBuilder*
  name: generateQueryBuilder
  nameWithType: TableQuery<T>.generateQueryBuilder
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateQueryBuilder
  package: com.microsoft.azure.storage.table
- uid: com.microsoft.azure.storage.table.TableEntity
  parent: com.microsoft.azure.storage.table
  href: com.microsoft.azure.storage.table.TableEntity.yml
  name: TableEntity
  nameWithType: TableEntity
  fullName: com.microsoft.azure.storage.table.TableEntity
  type: Interface
  summary: "<p>An interface required for table entity types. The <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableEntity\"></xref> interface declares getter and setter methods for the common entity properties, and  and  methods for serialization and deserialization of all entity properties using a property map. Create classes implementing <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableEntity\"></xref> to customize property storage, retrieval, serialization and deserialization, and to provide additional custom logic for a table entity. </p>\r\n<p>The Storage client library includes two implementations of <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableEntity\"></xref> that provide for simple property access and serialization: </p>\r\n<p>\r\n  <xref uid=\"com.microsoft.azure.storage.table.DynamicTableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DynamicTableEntity\"></xref> implements <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableEntity\"></xref> and provides a simple property map to store and retrieve properties. Use a <xref uid=\"com.microsoft.azure.storage.table.DynamicTableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DynamicTableEntity\"></xref> for simple access to entity properties when only a subset of properties are returned (for example, by a select clause in a query), or for when your query can return multiple entity types with different properties. You can also use this type to perform bulk table updates of heterogeneous entities without losing property information. </p>\r\n<p>\r\n  <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableServiceEntity\"></xref> is an implementation of <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableEntity\"></xref> that uses reflection-based serialization and deserialization behavior in its  and  methods. <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableServiceEntity\"></xref>-derived classes with methods that follow a convention for types and naming are serialized and deserialized automatically. </p>\r\n<p>Any class that implements <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableEntity\"></xref> can take advantage of the automatic reflection-based serialization and deserialization behavior in <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableServiceEntity\"></xref> by invoking the static methods  in  and  in . The class must provide methods that follow the type and naming convention to be serialized and deserialized automatically. When both a getter method and setter method are found for a given property name and data type, then the appropriate method is invoked automatically to serialize or deserialize the data. The reflection code looks for getter and setter methods in pairs of the form </p>\r\n<p></p>\r\n<p>and </p>\r\n<p></p>\r\n<p>where <em>PropertyName</em> is a property name for the table entity, and <em>type</em> is a Java type compatible with the EDM data type of the property. See the table in the class description for <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableServiceEntity\"></xref> for a map of property types to their Java equivalents. The <xref uid=\"com.microsoft.azure.storage.table.StoreAs\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StoreAs\"></xref> annotation may be applied with a  attribute to specify a property name for reflection on getter and setter methods that do not follow the property name convention. Method names and the  attribute of <xref uid=\"com.microsoft.azure.storage.table.StoreAs\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StoreAs\"></xref> annotations are case sensitive for matching property names with reflection. Use the <xref uid=\"com.microsoft.azure.storage.table.Ignore\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Ignore\"></xref> annotation to prevent methods from being used by reflection for automatic serialization and deserialization. Note that the names \"PartitionKey\", \"RowKey\", \"Timestamp\", and \"Etag\" are reserved and will be ignored if set with the <xref uid=\"com.microsoft.azure.storage.table.StoreAs\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StoreAs\"></xref> annotation in a subclass that uses the reflection methods. </p>\r\n<p></p>"
  syntax:
    content: public interface TableEntity
- uid: com.microsoft.azure.storage.table.TableQuery
  parent: com.microsoft.azure.storage.table
  href: com.microsoft.azure.storage.table.TableQuery.yml
  name: TableQuery<T>
  nameWithType: TableQuery<T>
  fullName: com.microsoft.azure.storage.table.TableQuery<T>
  type: Class
  summary: "<p>A class which represents a query against a specified table. A <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableQuery\"></xref> instance aggregates the query parameters to use when the query is executed. One of the  or  methods of <xref uid=\"com.microsoft.azure.storage.table.CloudTableClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CloudTableClient\"></xref> must be called to execute the query. The parameters are encoded and passed to the server when the table query is executed. </p>\r\n<p>To create a table query with fluent syntax, the <xref uid=\"com.microsoft.azure.storage.table.TableQuery.from(final Class&lt;T&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"from\"></xref> static factory method and the <xref uid=\"com.microsoft.azure.storage.table.TableQuery.where(final String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"where\"></xref>, <xref uid=\"com.microsoft.azure.storage.table.TableQuery.select(final String [])\" data-throw-if-not-resolved=\"false\" data-raw-source=\"select\"></xref>, and <xref uid=\"com.microsoft.azure.storage.table.TableQuery.take(final Integer)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"take\"></xref> mutator methods each return a reference to the object which can be chained into a single expression. Use the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"from(Class)\"></xref> static class factory method to create a  instance that executes on the named table with entities of the specified <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableEntity\"></xref> implementing type. Use the <xref uid=\"com.microsoft.azure.storage.table.TableQuery.where(final String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"where\"></xref> method to specify a filter expression for the entities returned. Use the <xref uid=\"com.microsoft.azure.storage.table.TableQuery.select(final String [])\" data-throw-if-not-resolved=\"false\" data-raw-source=\"select\"></xref> method to specify the table entity properties to return. Use the <xref uid=\"com.microsoft.azure.storage.table.TableQuery.take(final Integer)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"take\"></xref> method to limit the number of entities returned by the query. Note that nothing prevents calling these methods more than once on a , so the values saved in the  will be the last encountered in order of execution. </p>\r\n<p>As an example, you could construct a table query using fluent syntax: </p>\r\n<p></p>\r\n<p>This example creates a query on the \"Products\" table for all entities where the PartitionKey value is \"ProductsMNO\" and the RowKey value is greater than or equal to \"Napkin\" and requests the first 25 matching entities, selecting only the common properties and the property named \"InventoryCount\", and returns them as <xref uid=\"com.microsoft.azure.storage.table.DynamicTableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DynamicTableEntity\"></xref> objects. </p>\r\n<p>Filter expressions for use with the <xref uid=\"com.microsoft.azure.storage.table.TableQuery.where(final String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"where\"></xref> method or <xref uid=\"com.microsoft.azure.storage.table.TableQuery.setFilterString(final String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"setFilterString\"></xref> method can be created using fluent syntax with the overloaded <xref uid=\"com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"generateFilterCondition\"></xref> methods and <xref uid=\"com.microsoft.azure.storage.table.TableQuery.combineFilters(String,String,String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"combineFilters\"></xref> method, using the comparison operators defined in <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueryComparisons\"></xref> and the logical operators defined in <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Operators\"></xref>. Note that the first operand in a filter comparison must be a property name, and the second operand must evaluate to a constant. The PartitionKey and RowKey property values are  types for comparison purposes. </p>\r\n<p>The values that may be used in table queries are explained in more detail in the MSDN topic <a href=\"http://msdn.microsoft.com/en-us/library/azure/dd894031.aspx\">Querying Tables and Entities</a>, but note that the space characters within values do not need to be URL-encoded, as this will be done when the query is executed. </p>\r\n<p>The <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableQuery#TableQuery(Class)\"></xref> constructor and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableQuery#from(Class)\"></xref> static factory methods require a class type which implements <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableEntity\"></xref> and contains a nullary constructor. If the query will be executed using an <xref uid=\"com.microsoft.azure.storage.table.EntityResolver\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EntityResolver\"></xref>, the caller may specify <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableServiceEntity\"></xref> as the class type.</p>\r\n<p></p>"
  syntax: *o1
- uid: com.microsoft.azure.storage.table.TableServiceEntity
  parent: com.microsoft.azure.storage.table
  href: com.microsoft.azure.storage.table.TableServiceEntity.yml
  name: TableServiceEntity
  nameWithType: TableServiceEntity
  fullName: com.microsoft.azure.storage.table.TableServiceEntity
  type: Class
  summary: "<p>The <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableServiceEntity\"></xref> class represents the base object type for a table entity in the Storage service. <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableServiceEntity\"></xref> provides a base implementation for the <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableEntity\"></xref> interface that provides  and  methods that by default serialize and deserialize all properties via reflection. A table entity class may extend this class and override the  and  methods to provide customized or more performant serialization logic. </p>\r\n<p>The use of reflection allows subclasses of <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableServiceEntity\"></xref> to be serialized and deserialized without having to implement the serialization code themselves. When both a getter method and setter method are found for a given property name and data type, then the appropriate method is invoked automatically to serialize or deserialize the data. To take advantage of the automatic serialization code, your table entity classes should provide getter and setter methods for each property in the corresponding table entity in Microsoft Azure table storage. The reflection code looks for getter and setter methods in pairs of the form </p>\r\n<p></p>\r\n<p>and </p>\r\n<p></p>\r\n<p>where <em>PropertyName</em> is a property name for the table entity, and <em>type</em> is a Java type compatible with the EDM data type of the property. See the table below for a map of property types to their Java equivalents. The <xref uid=\"com.microsoft.azure.storage.table.StoreAs\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StoreAs\"></xref> annotation may be applied with a  attribute to specify a property name for reflection on getter and setter methods that do not follow the property name convention. Method names and the  attribute of <xref uid=\"com.microsoft.azure.storage.table.StoreAs\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StoreAs\"></xref> annotations are case sensitive for matching property names with reflection. Use the <xref uid=\"com.microsoft.azure.storage.table.Ignore\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Ignore\"></xref> annotation to prevent methods from being used by reflection for automatic serialization and deserialization. Note that the names \"PartitionKey\", \"RowKey\", \"Timestamp\", and \"Etag\" are reserved and will be ignored if set with the <xref uid=\"com.microsoft.azure.storage.table.StoreAs\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StoreAs\"></xref> annotation in a subclass. </p>\r\n<p>The following table shows the supported property data types in Microsoft Azure storage and the corresponding Java types when deserialized. <table rows=\"9\" cols=\"4\"><caption>Supported property data types in Microsoft Azure storage</caption><row><entry thead=\"yes\"><p>Storage Type </p></entry><entry thead=\"yes\"><p>EdmType Value </p></entry><entry thead=\"yes\"><p>Java Type </p></entry><entry thead=\"yes\"><p>Description  </p></entry></row><row><entry thead=\"no\"><p><b>Edm.Binary</b></p></entry><entry thead=\"no\"><p><xref uid=\"com.microsoft.azure.storage.table.EdmType.BINARY\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EdmType#BINARY\"></xref></p></entry><entry thead=\"no\"><p></p></entry><entry thead=\"no\"><p>An array of bytes up to 64 KB in size.  </p></entry></row><row><entry thead=\"no\"><p><b>Edm.Boolean</b></p></entry><entry thead=\"no\"><p><xref uid=\"com.microsoft.azure.storage.table.EdmType.BOOLEAN\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EdmType#BOOLEAN\"></xref></p></entry><entry thead=\"no\"><p></p></entry><entry thead=\"no\"><p>A Boolean value.  </p></entry></row><row><entry thead=\"no\"><p><b>Edm.DateTime</b></p></entry><entry thead=\"no\"><p><xref uid=\"com.microsoft.azure.storage.table.EdmType.DATE_TIME\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EdmType#DATE_TIME\"></xref></p></entry><entry thead=\"no\"><p></p></entry><entry thead=\"no\"><p>A 64-bit value expressed as Coordinated Universal Time (UTC). The supported range begins from 12:00 midnight, January 1, 1601 A.D. (C.E.), UTC. The range ends at December 31, 9999.  </p></entry></row><row><entry thead=\"no\"><p><b>Edm.Double</b></p></entry><entry thead=\"no\"><p><xref uid=\"com.microsoft.azure.storage.table.EdmType.DOUBLE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EdmType#DOUBLE\"></xref></p></entry><entry thead=\"no\"><p></p></entry><entry thead=\"no\"><p>A 64-bit double-precision floating point value.  </p></entry></row><row><entry thead=\"no\"><p><b>Edm.Guid</b></p></entry><entry thead=\"no\"><p><xref uid=\"com.microsoft.azure.storage.table.EdmType.GUID\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EdmType#GUID\"></xref></p></entry><entry thead=\"no\"><p></p></entry><entry thead=\"no\"><p>A 128-bit globally unique identifier.  </p></entry></row><row><entry thead=\"no\"><p><b>Edm.Int32</b></p></entry><entry thead=\"no\"><p><xref uid=\"com.microsoft.azure.storage.table.EdmType.INT32\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EdmType#INT32\"></xref></p></entry><entry thead=\"no\"><p></p></entry><entry thead=\"no\"><p>A 32-bit integer value.  </p></entry></row><row><entry thead=\"no\"><p><b>Edm.Int64</b></p></entry><entry thead=\"no\"><p><xref uid=\"com.microsoft.azure.storage.table.EdmType.INT64\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EdmType#INT64\"></xref></p></entry><entry thead=\"no\"><p></p></entry><entry thead=\"no\"><p>A 64-bit integer value.  </p></entry></row><row><entry thead=\"no\"><p><b>Edm.String</b></p></entry><entry thead=\"no\"><p><xref uid=\"com.microsoft.azure.storage.table.EdmType.STRING\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EdmType#STRING\"></xref></p></entry><entry thead=\"no\"><p></p></entry><entry thead=\"no\"><p>A UTF-16-encoded value. String values may be up to 64 KB in size.  </p></entry></row></table></p>\r\n<p>See the MSDN topic <a href=\"http://msdn.microsoft.com//library/azure/dd179338.aspx\">Understanding the Table Service Data Model</a> for an overview of tables, entities, and properties as used in the Microsoft Azure Storage service. </p>\r\n<p>For an overview of the available EDM primitive data types and names, see the</p>\r\n<p>\r\n  <a href=\"http://www.odata.org/developers/protocols/overview#AbstractTypeSystem\">Primitive Data Types</a> section of the <a href=\"http://www.odata.org/developers/protocols/overview\">OData Protocol Overview</a>. </p>\r\n<p></p>"
  syntax:
    content: public class TableServiceEntity
- uid: com.microsoft.azure.storage.table.EdmType
  parent: com.microsoft.azure.storage.table
  href: com.microsoft.azure.storage.table.EdmType.yml
  name: EdmType
  nameWithType: EdmType
  fullName: com.microsoft.azure.storage.table.EdmType
  type: Enum
  summary: "<p>A enumeration used to represent the primitive types of the Entity Data Model (EDM) in the Open Data Protocol (OData). The EDM is the underlying abstract data model used by OData services. The <xref uid=\"com.microsoft.azure.storage.table.EdmType\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EdmType\"></xref> enumeration includes a <xref uid=\"com.microsoft.azure.storage.table.EdmType.parse(final String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"parse(String)\"></xref> method to convert EDM data type names to the enumeration type, and overrides the <xref uid=\"com.microsoft.azure.storage.table.EdmType.toString()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"toString()\"></xref> method to produce an EDM data type name. </p>\r\n<p>For more information about OData, see the <a href=\"http://www.odata.org/\">Open Data Protocol</a> website. </p>\r\n<p>For an overview of the available EDM primitive data types and names, see the <a href=\"http://www.odata.org/developers/protocols/overview#AbstractTypeSystem\">Primitive Data Types</a> section of the <a href=\"http://www.odata.org/developers/protocols/overview\">OData Protocol Overview</a>. </p>\r\n<p>The Abstract Type System used to define the primitive types supported by OData is defined in detail in <a href=\"http://msdn.microsoft.com/en-us/library/dd541474.aspx\">[MC-CSDL] (section 2.2.1)</a>. </p>"
  syntax:
    content: public enum EdmType
- uid: com.microsoft.azure.storage.table.TableQuery.setColumns(final String [])
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  name: setColumns(final String[] columns)
  nameWithType: TableQuery<T>.setColumns(final String[] columns)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.setColumns(final String[] columns)
  type: Method
  summary: "<p>Sets the property names of the table entity properties to return when the table query is executed. By default, a query will return all properties from the table entity. </p>\r\n<p>Note that the system properties , , and  are automatically requested from the table service whether specified in the <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableQuery\"></xref> or not.</p>\r\n<p></p>"
  syntax: *o2
- uid: com.microsoft.azure.storage.table.TableQuery.select(final String [])
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  name: select(final String[] columns)
  nameWithType: TableQuery<T>.select(final String[] columns)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.select(final String[] columns)
  type: Method
  summary: "<p>Defines the property names of the table entity properties to return when the table query is executed. The  clause is optional on a table query, used to limit the table properties returned from the server. By default, a query will return all properties from the table entity. </p>\r\n<p>Note that the system properties , , and  are automatically requested from the table service whether specified in the <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableQuery\"></xref> or not.</p>\r\n<p></p>"
  syntax: *o3
- uid: com.microsoft.azure.storage.table.TableQuery.setFilterString(final String)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  name: setFilterString(final String filterString)
  nameWithType: TableQuery<T>.setFilterString(final String filterString)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.setFilterString(final String filterString)
  type: Method
  summary: "<p>Sets the filter expression to use in the table query. A filter expression is optional; by default a table query will return all entities in the table. </p>\r\n<p>Filter expressions for use with the <xref uid=\"com.microsoft.azure.storage.table.TableQuery.setFilterString(final String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"setFilterString\"></xref> method can be created using fluent syntax with the overloaded <xref uid=\"com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"generateFilterCondition\"></xref> methods and <xref uid=\"com.microsoft.azure.storage.table.TableQuery.combineFilters(String,String,String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"combineFilters\"></xref> method, using the comparison operators defined in <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueryComparisons\"></xref> and the logical operators defined in <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Operators\"></xref>. Note that the first operand in a filter comparison must be a property name, and the second operand must evaluate to a constant. The PartitionKey and RowKey property values are  types for comparison purposes. For example, to query all entities with a PartitionKey value of \"AccessLogs\" on table query : </p>\r\n<p></p>\r\n<p>The values that may be used in table queries are explained in more detail in the MSDN topic</p>\r\n<p>\r\n  <a href=\"http://msdn.microsoft.com/en-us/library/azure/dd894031.aspx\">Querying Tables and Entities</a>, but note that the space characters within values do not need to be URL-encoded, as this will be done when the query is executed. </p>\r\n<p>Note that no more than 15 discrete comparisons are permitted within a filter string.</p>\r\n<p></p>"
  syntax: *o4
- uid: com.microsoft.azure.storage.table.TableQuery.where(final String)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  name: where(final String filter)
  nameWithType: TableQuery<T>.where(final String filter)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.where(final String filter)
  type: Method
  summary: "<p>Defines a filter expression for the table query. Only entities that satisfy the specified filter expression will be returned by the query. Setting a filter expression is optional; by default, all entities in the table are returned if no filter expression is specified in the table query. </p>\r\n<p>Filter expressions for use with the <xref uid=\"com.microsoft.azure.storage.table.TableQuery.where(final String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"where\"></xref> method can be created using fluent syntax with the overloaded <xref uid=\"com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"generateFilterCondition\"></xref> methods and <xref uid=\"com.microsoft.azure.storage.table.TableQuery.combineFilters(String,String,String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"combineFilters\"></xref> method, using the comparison operators defined in <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueryComparisons\"></xref> and the logical operators defined in <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Operators\"></xref>. Note that the first operand in a filter comparison must be a property name, and the second operand must evaluate to a constant. The PartitionKey and RowKey property values are  types for comparison purposes. For example, to query all entities with a PartitionKey value of \"AccessLogs\" on table query : </p>\r\n<p></p>\r\n<p>The values that may be used in table queries are explained in more detail in the MSDN topic</p>\r\n<p>\r\n  <a href=\"http://msdn.microsoft.com/en-us/library/azure/dd894031.aspx\">Querying Tables and Entities</a>, but note that the space characters within values do not need to be URL-encoded, as this will be done when the query is executed. </p>\r\n<p>Note that no more than 15 discrete comparisons are permitted within a filter string.</p>\r\n<p></p>"
  syntax: *o5
- uid: com.microsoft.azure.storage.table.TableQuery.setTakeCount(final Integer)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  name: setTakeCount(final Integer takeCount)
  nameWithType: TableQuery<T>.setTakeCount(final Integer takeCount)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.setTakeCount(final Integer takeCount)
  type: Method
  summary: "<p>Sets the upper bound for the number of entities the query returns. If this value is not specified in a table query, by default a maximum of 1,000 entries will be returned. </p>\r\n<p>If the value specified for the  parameter is greater than 1,000, the query will throw a <xref uid=\"com.microsoft.azure.storage.StorageException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageException\"></xref> when executed.</p>\r\n<p></p>"
  syntax: *o6
- uid: com.microsoft.azure.storage.table.TableQuery.take(final Integer)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  name: take(final Integer take)
  nameWithType: TableQuery<T>.take(final Integer take)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.take(final Integer take)
  type: Method
  summary: "<p>Defines the upper bound for the number of entities the query returns. If this value is not specified in a table query, by default a maximum of 1,000 entries will be returned. </p>\r\n<p>If the value specified for the  parameter is greater than 1,000, the query will throw a <xref uid=\"com.microsoft.azure.storage.StorageException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageException\"></xref> when executed.</p>\r\n<p></p>"
  syntax: *o7
- uid: com.microsoft.azure.storage.StorageException
  parent: com.microsoft.azure.storage
  href: com.microsoft.azure.storage.StorageException.yml
  name: StorageException
  nameWithType: StorageException
  fullName: com.microsoft.azure.storage.StorageException
  type: Class
  summary: "<p>Represents an exception for the Microsoft Azure storage service. </p>"
  syntax:
    content: public class StorageException
- uid: com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(String,String,final boolean)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  name: generateFilterCondition(String propertyName, String operation, final boolean value)
  nameWithType: TableQuery<T>.generateFilterCondition(String propertyName, String operation, final boolean value)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.generateFilterCondition(String propertyName, String operation, final boolean value)
  type: Method
  summary: "<p>Generates a property filter condition string for a  value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a boolean, as in the following example: </p>\r\n<p></p>\r\n<p>This statement sets  to the following value: </p>\r\n<p></p>\r\n<p></p>"
  syntax: *o8
- uid: com.microsoft.azure.storage.table.TableQuery.combineFilters(String,String,String)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  name: combineFilters(String filterA, String operator, String filterB)
  nameWithType: TableQuery<T>.combineFilters(String filterA, String operator, String filterB)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.combineFilters(String filterA, String operator, String filterB)
  type: Method
  summary: "<p>Creates a filter condition using the specified logical operator on two filter conditions.</p>\r\n<p></p>"
  syntax: *o9
- uid: com.microsoft.azure.storage.core.UriQueryBuilder
  parent: com.microsoft.azure.storage.core
  href: com.microsoft.azure.storage.core.UriQueryBuilder.yml
  name: UriQueryBuilder
  nameWithType: UriQueryBuilder
  fullName: com.microsoft.azure.storage.core.UriQueryBuilder
  type: Class
  summary: "<p>RESERVED FOR INTERNAL USE. A helper class to help modify the query string of a URI </p>"
  syntax:
    content: public class UriQueryBuilder
- uid: com.microsoft.azure.storage.table.CloudTableClient
  parent: com.microsoft.azure.storage.table
  href: com.microsoft.azure.storage.table.CloudTableClient.yml
  name: CloudTableClient
  nameWithType: CloudTableClient
  fullName: com.microsoft.azure.storage.table.CloudTableClient
  type: Class
  summary: "<p>Provides a service client for accessing the Microsoft Azure Table service. </p>\r\n<p>The <xref uid=\"com.microsoft.azure.storage.table.CloudTableClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CloudTableClient\"></xref> class encapsulates the base URI for the Table service endpoint and the credentials for accessing the storage account, and provides methods to create, delete, list, and query tables, as well as methods to execute operations and queries on table entities. These methods invoke Storage Service REST API operations to make the requests and obtain the results that are returned. </p>\r\n<p>A Table service endpoint is the base URI for Table service resources, including the DNS name of the storage account: <br /><br />\r\n For more information, see the MSDN topic <a href=\"http://msdn.microsoft.com/en-us/library/azure/dd179360.aspx\">Addressing Table Service Resources</a>. </p>\r\n<p>The credentials can be a combination of the storage account name and a key, or a shared access signature. For more information, see the MSDN topic <a href=\"http://msdn.microsoft.com/en-us/library/azure/hh225339.aspx\">Authenticating Access to Your Storage Account</a>. </p>"
  syntax:
    content: public class CloudTableClient extends ServiceClient
- uid: com.microsoft.azure.storage.table.TableQuery.from(final Class<T>)
  parent: com.microsoft.azure.storage.table.TableQuery
  href: com.microsoft.azure.storage.table.TableQuery.yml
  name: from(final Class<T> clazzType)
  nameWithType: TableQuery<T>.from(final Class<T> clazzType)
  fullName: com.microsoft.azure.storage.table.TableQuery<T extends TableEntity>.from(final Class<T> clazzType)
  type: Method
  summary: "<p>A static factory method that constructs a <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableQuery\"></xref> instance and defines its table entity type. The method returns the <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableQuery\"></xref> instance reference, allowing additional methods to be chained to modify the query. </p>\r\n<p>The created <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableQuery\"></xref> instance is specialized for table entities of the specified class type T. Callers may specify <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableServiceEntity\"></xref> as the class type parameter if no more specialized type is required.</p>\r\n<p></p>"
  syntax: *o10
- uid: com.microsoft.azure.storage.table.DynamicTableEntity
  parent: com.microsoft.azure.storage.table
  href: com.microsoft.azure.storage.table.DynamicTableEntity.yml
  name: DynamicTableEntity
  nameWithType: DynamicTableEntity
  fullName: com.microsoft.azure.storage.table.DynamicTableEntity
  type: Class
  summary: "<p>A <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableEntity\"></xref> type which allows callers direct access to the property map of the entity. This class extends <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableServiceEntity\"></xref> to eliminate the use of reflection for serialization and deserialization. </p>"
  syntax:
    content: public class DynamicTableEntity extends TableServiceEntity
- uid: com.microsoft.azure.storage.table.EntityResolver
  parent: com.microsoft.azure.storage.table
  href: com.microsoft.azure.storage.table.EntityResolver.yml
  name: EntityResolver<T>
  nameWithType: EntityResolver<T>
  fullName: com.microsoft.azure.storage.table.EntityResolver<T>
  type: Interface
  summary: "<p>An interface to perform client side projection on a retrieved entity. An <xref uid=\"com.microsoft.azure.storage.table.EntityResolver\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EntityResolver\"></xref> instance must implement a  method projecting the entity data represented by the parameters passed in as a new instance of the type specified by the type parameter. </p>\r\n<p>This interface is useful for converting directly from table entity data to a client object type without requiring a separate table entity class type that deserializes every property individually. For example, a client can perform a client side projection of a <em>Customer</em> entity by simply returning the  for the <em>CustomerName</em> property of each entity. The result of this projection will be a collection of s containing each customer name.</p>\r\n<p></p>"
  syntax:
    content: public interface EntityResolver<T>
    typeParameters:
    - id: T
      type: 8ce1ecb9
      description: <p>The type of the object that the resolver produces. </p>
