### YamlMime:JavaType
uid: "com.azure.cosmos.models.IndexingPolicy"
fullName: "com.azure.cosmos.models.IndexingPolicy"
name: "IndexingPolicy"
nameWithType: "IndexingPolicy"
summary: "Represents the indexing policy configuration for a container in the Azure Cosmos DB database service."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class IndexingPolicy"
constructors:
- uid: "com.azure.cosmos.models.IndexingPolicy.IndexingPolicy()"
  fullName: "com.azure.cosmos.models.IndexingPolicy.IndexingPolicy()"
  name: "IndexingPolicy()"
  nameWithType: "IndexingPolicy.IndexingPolicy()"
  summary: "Constructor."
  syntax: "public IndexingPolicy()"
  desc: "Constructor."
methods:
- uid: "com.azure.cosmos.models.IndexingPolicy.getCompositeIndexes()"
  fullName: "com.azure.cosmos.models.IndexingPolicy.getCompositeIndexes()"
  name: "getCompositeIndexes()"
  nameWithType: "IndexingPolicy.getCompositeIndexes()"
  summary: "Gets the composite indexes for additional indexes."
  syntax: "public List<List<CompositePath>> getCompositeIndexes()"
  desc: "Gets the composite indexes for additional indexes."
  returns:
    description: "the composite indexes."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CompositePath?alt=com.azure.cosmos.models.CompositePath&text=CompositePath\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.models.IndexingPolicy.getExcludedPaths()"
  fullName: "com.azure.cosmos.models.IndexingPolicy.getExcludedPaths()"
  name: "getExcludedPaths()"
  nameWithType: "IndexingPolicy.getExcludedPaths()"
  summary: "Gets the paths that are not indexed."
  syntax: "public List<ExcludedPath> getExcludedPaths()"
  desc: "Gets the paths that are not indexed."
  returns:
    description: "the excluded paths."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.ExcludedPath?alt=com.azure.cosmos.models.ExcludedPath&text=ExcludedPath\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.models.IndexingPolicy.getIncludedPaths()"
  fullName: "com.azure.cosmos.models.IndexingPolicy.getIncludedPaths()"
  name: "getIncludedPaths()"
  nameWithType: "IndexingPolicy.getIncludedPaths()"
  summary: "Gets the paths that are chosen to be indexed by the user."
  syntax: "public List<IncludedPath> getIncludedPaths()"
  desc: "Gets the paths that are chosen to be indexed by the user."
  returns:
    description: "the included paths."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.IncludedPath?alt=com.azure.cosmos.models.IncludedPath&text=IncludedPath\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.models.IndexingPolicy.getIndexingMode()"
  fullName: "com.azure.cosmos.models.IndexingPolicy.getIndexingMode()"
  name: "getIndexingMode()"
  nameWithType: "IndexingPolicy.getIndexingMode()"
  summary: "Gets the indexing mode (consistent or lazy)."
  syntax: "public IndexingMode getIndexingMode()"
  desc: "Gets the indexing mode (consistent or lazy)."
  returns:
    description: "the indexing mode."
    type: "<xref href=\"com.azure.cosmos.models.IndexingMode?alt=com.azure.cosmos.models.IndexingMode&text=IndexingMode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.IndexingPolicy.getSpatialIndexes()"
  fullName: "com.azure.cosmos.models.IndexingPolicy.getSpatialIndexes()"
  name: "getSpatialIndexes()"
  nameWithType: "IndexingPolicy.getSpatialIndexes()"
  summary: "Sets the spatial indexes for additional indexes."
  syntax: "public List<SpatialSpec> getSpatialIndexes()"
  desc: "Sets the spatial indexes for additional indexes."
  returns:
    description: "the spatial indexes."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.SpatialSpec?alt=com.azure.cosmos.models.SpatialSpec&text=SpatialSpec\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.models.IndexingPolicy.isAutomatic()"
  fullName: "com.azure.cosmos.models.IndexingPolicy.isAutomatic()"
  name: "isAutomatic()"
  nameWithType: "IndexingPolicy.isAutomatic()"
  summary: "Gets whether automatic indexing is enabled for a container."
  syntax: "public Boolean isAutomatic()"
  desc: "Gets whether automatic indexing is enabled for a container.\n\nIn automatic indexing, items can be explicitly excluded from indexing using RequestOptions. In manual indexing, items can be explicitly included."
  returns:
    description: "the automatic"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.IndexingPolicy.setAutomatic(boolean)"
  fullName: "com.azure.cosmos.models.IndexingPolicy.setAutomatic(boolean automatic)"
  name: "setAutomatic(boolean automatic)"
  nameWithType: "IndexingPolicy.setAutomatic(boolean automatic)"
  summary: "Sets whether automatic indexing is enabled for a container."
  parameters:
  - description: "the automatic"
    name: "automatic"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public IndexingPolicy setAutomatic(boolean automatic)"
  desc: "Sets whether automatic indexing is enabled for a container.\n\nIn automatic indexing, items can be explicitly excluded from indexing using RequestOptions. In manual indexing, items can be explicitly included."
  returns:
    description: "the Indexing Policy."
    type: "<xref href=\"com.azure.cosmos.models.IndexingPolicy?alt=com.azure.cosmos.models.IndexingPolicy&text=IndexingPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.IndexingPolicy.setCompositeIndexes(java.util.List<java.util.List<com.azure.cosmos.models.CompositePath>>)"
  fullName: "com.azure.cosmos.models.IndexingPolicy.setCompositeIndexes(List<List<CompositePath>> compositeIndexes)"
  name: "setCompositeIndexes(List<List<CompositePath>> compositeIndexes)"
  nameWithType: "IndexingPolicy.setCompositeIndexes(List<List<CompositePath>> compositeIndexes)"
  summary: "Sets the composite indexes for additional indexes."
  parameters:
  - description: "the composite indexes."
    name: "compositeIndexes"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CompositePath?alt=com.azure.cosmos.models.CompositePath&text=CompositePath\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "public IndexingPolicy setCompositeIndexes(List<List<CompositePath>> compositeIndexes)"
  desc: "Sets the composite indexes for additional indexes."
  returns:
    description: "the Indexing Policy."
    type: "<xref href=\"com.azure.cosmos.models.IndexingPolicy?alt=com.azure.cosmos.models.IndexingPolicy&text=IndexingPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.IndexingPolicy.setExcludedPaths(java.util.List<com.azure.cosmos.models.ExcludedPath>)"
  fullName: "com.azure.cosmos.models.IndexingPolicy.setExcludedPaths(List<ExcludedPath> excludedPaths)"
  name: "setExcludedPaths(List<ExcludedPath> excludedPaths)"
  nameWithType: "IndexingPolicy.setExcludedPaths(List<ExcludedPath> excludedPaths)"
  summary: "Sets excluded paths."
  parameters:
  - description: "the excluded paths"
    name: "excludedPaths"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.ExcludedPath?alt=com.azure.cosmos.models.ExcludedPath&text=ExcludedPath\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public IndexingPolicy setExcludedPaths(List<ExcludedPath> excludedPaths)"
  desc: "Sets excluded paths."
  returns:
    description: "the excluded paths"
    type: "<xref href=\"com.azure.cosmos.models.IndexingPolicy?alt=com.azure.cosmos.models.IndexingPolicy&text=IndexingPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.IndexingPolicy.setIncludedPaths(java.util.List<com.azure.cosmos.models.IncludedPath>)"
  fullName: "com.azure.cosmos.models.IndexingPolicy.setIncludedPaths(List<IncludedPath> includedPaths)"
  name: "setIncludedPaths(List<IncludedPath> includedPaths)"
  nameWithType: "IndexingPolicy.setIncludedPaths(List<IncludedPath> includedPaths)"
  summary: "Sets included paths."
  parameters:
  - description: "the included paths"
    name: "includedPaths"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.IncludedPath?alt=com.azure.cosmos.models.IncludedPath&text=IncludedPath\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public IndexingPolicy setIncludedPaths(List<IncludedPath> includedPaths)"
  desc: "Sets included paths."
  returns:
    description: "the included paths"
    type: "<xref href=\"com.azure.cosmos.models.IndexingPolicy?alt=com.azure.cosmos.models.IndexingPolicy&text=IndexingPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.IndexingPolicy.setIndexingMode(com.azure.cosmos.models.IndexingMode)"
  fullName: "com.azure.cosmos.models.IndexingPolicy.setIndexingMode(IndexingMode indexingMode)"
  name: "setIndexingMode(IndexingMode indexingMode)"
  nameWithType: "IndexingPolicy.setIndexingMode(IndexingMode indexingMode)"
  summary: "Sets the indexing mode (consistent or lazy)."
  parameters:
  - description: "the indexing mode."
    name: "indexingMode"
    type: "<xref href=\"com.azure.cosmos.models.IndexingMode?alt=com.azure.cosmos.models.IndexingMode&text=IndexingMode\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public IndexingPolicy setIndexingMode(IndexingMode indexingMode)"
  desc: "Sets the indexing mode (consistent or lazy)."
  returns:
    description: "the Indexing Policy."
    type: "<xref href=\"com.azure.cosmos.models.IndexingPolicy?alt=com.azure.cosmos.models.IndexingPolicy&text=IndexingPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.IndexingPolicy.setSpatialIndexes(java.util.List<com.azure.cosmos.models.SpatialSpec>)"
  fullName: "com.azure.cosmos.models.IndexingPolicy.setSpatialIndexes(List<SpatialSpec> spatialIndexes)"
  name: "setSpatialIndexes(List<SpatialSpec> spatialIndexes)"
  nameWithType: "IndexingPolicy.setSpatialIndexes(List<SpatialSpec> spatialIndexes)"
  summary: "Sets the spatial indexes for additional indexes."
  parameters:
  - description: "the spatial indexes."
    name: "spatialIndexes"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.SpatialSpec?alt=com.azure.cosmos.models.SpatialSpec&text=SpatialSpec\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public IndexingPolicy setSpatialIndexes(List<SpatialSpec> spatialIndexes)"
  desc: "Sets the spatial indexes for additional indexes."
  returns:
    description: "the Indexing Policy."
    type: "<xref href=\"com.azure.cosmos.models.IndexingPolicy?alt=com.azure.cosmos.models.IndexingPolicy&text=IndexingPolicy\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Represents the indexing policy configuration for a container in the Azure Cosmos DB database service."
metadata: {}
package: "com.azure.cosmos.models"
artifact: com.azure:azure-cosmos:4.35.0
