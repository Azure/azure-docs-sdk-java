### YamlMime:JavaMember
nameWithType: Accounts.beginUpdateAsync
type: method
members:
- fullName: com.microsoft.azure.management.datalake.store.Accounts.beginUpdateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  name: beginUpdateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  nameWithType: Accounts.beginUpdateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to update. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountUpdateParameters?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountUpdateParameters&text=DataLakeStoreAccountUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeStoreAccount object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the specified Data Lake Store account information.</p>

    <p></p>
  syntax: public Observable<DataLakeStoreAccount> beginUpdateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.store.Accounts.beginUpdateAsync(String,String,DataLakeStoreAccountUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.store.Accounts.beginUpdateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  name: beginUpdateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  nameWithType: Accounts.beginUpdateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to update. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountUpdateParameters?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccountUpdateParameters&text=DataLakeStoreAccountUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false">ServiceFuture</xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount?alt=com.microsoft.azure.management.datalake.store.models.DataLakeStoreAccount&text=DataLakeStoreAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the specified Data Lake Store account information.</p>

    <p></p>
  syntax: public ServiceFuture<DataLakeStoreAccount> beginUpdateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters, final ServiceCallback<DataLakeStoreAccount> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.Accounts.beginUpdateAsync(String,String,DataLakeStoreAccountUpdateParameters,final ServiceCallback<DataLakeStoreAccount>)
uid: com.microsoft.azure.management.datalake.store.Accounts.beginUpdateAsync*
fullName: com.microsoft.azure.management.datalake.store.Accounts.beginUpdateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
name: beginUpdateAsync(String resourceGroupName, String name, DataLakeStoreAccountUpdateParameters parameters)
package: com.microsoft.azure.management.datalake.store
metadata: {}
