### YamlMime:JavaType
methods:
- system.fabric.StatefulServiceReplica.abort()
- system.fabric.StatefulServiceReplica.changeRoleAsync(ReplicaRole,CancellationToken)
- system.fabric.StatefulServiceReplica.closeAsync(CancellationToken)
- system.fabric.StatefulServiceReplica.initialize(StatefulServiceInitializationParameters)
- system.fabric.StatefulServiceReplica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)
nameWithType: StatefulServiceReplica
syntax: public interface StatefulServiceReplica
type: interface
uid: system.fabric.StatefulServiceReplica
fullName: system.fabric.StatefulServiceReplica
name: StatefulServiceReplica
package: system.fabric
summary: >-
  <p>Defines behavior that governs the lifecycle of a replica, such as startup, initialization, role changes, and shutdown. </p>

  <p>

    <b>Remarks:</b>Stateful service types must implement this interface. The logic of a stateful service type includes behavior that is invoked on Primary replicas and behavior that is invoked on Secondary replicas. If the service author wants to make use of the provided <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref>, then the service must also implement <xref uid="system.fabric.StateProvider" data-throw-if-not-resolved="false">system.fabric.StateProvider</xref> to use the implementation of <xref uid="system.fabric.StateReplicator" data-throw-if-not-resolved="false">system.fabric.StateReplicator</xref> that is provided by <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref></p>
metadata: {}
