### YamlMime:JavaType
uid: "com.azure.messaging.eventgrid.EventGridEvent"
fullName: "com.azure.messaging.eventgrid.EventGridEvent"
name: "EventGridEvent"
nameWithType: "EventGridEvent"
summary: "Represents the EventGrid event conforming to the [ EventGrid event schema][EventGrid event schema].\n\nDepending on your scenario, you can either use the constructor <xref uid=\"com.azure.messaging.eventgrid.EventGridEvent.EventGridEvent(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#EventGridEvent(String, String, BinaryData, String)\"></xref> to create an EventGridEvent, or use the factory method <xref uid=\"com.azure.messaging.eventgrid.EventGridEvent.fromString(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#fromString(String)\"></xref> to deserialize EventGridEvent instances from a Json String representation of EventGrid events.\n\nIf you have the data payload of an EventGridEvent and want to send it out, use the constructor <xref uid=\"com.azure.messaging.eventgrid.EventGridEvent.EventGridEvent(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#EventGridEvent(String, String, BinaryData, String)\"></xref> to create it. Then use <xref uid=\"com.azure.messaging.eventgrid.EventGridPublisherAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventGridPublisherAsyncClient\"></xref> or <xref uid=\"com.azure.messaging.eventgrid.EventGridPublisherClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventGridPublisherClient\"></xref> to send it the EventGrid service.\n\n**Create EventGridEvent Samples**\n\n\\{@codesnippet com.azure.messaging.eventgrid.EventGridEvent\\#constructor\\}\n\nOn the contrary, if you receive events from any event handlers and therefore have the Json string representation of one or more of EventGridEvents, use <xref uid=\"com.azure.messaging.eventgrid.EventGridEvent.fromString(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#fromString(String)\"></xref> to deserialize them from the Json string.\n\n**Deserialize EventGridEvent Samples**\n\n\\{@codesnippet com.azure.messaging.eventgrid.EventGridEvent.fromString\\}\n\n\n[EventGrid event schema]: https://docs.microsoft.com/azure/event-grid/event-schema"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class EventGridEvent"
constructors:
- "com.azure.messaging.eventgrid.EventGridEvent.EventGridEvent(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,java.lang.String)"
methods:
- "com.azure.messaging.eventgrid.EventGridEvent.fromString(java.lang.String)"
- "com.azure.messaging.eventgrid.EventGridEvent.getData()"
- "com.azure.messaging.eventgrid.EventGridEvent.getDataVersion()"
- "com.azure.messaging.eventgrid.EventGridEvent.getEventTime()"
- "com.azure.messaging.eventgrid.EventGridEvent.getEventType()"
- "com.azure.messaging.eventgrid.EventGridEvent.getId()"
- "com.azure.messaging.eventgrid.EventGridEvent.getSubject()"
- "com.azure.messaging.eventgrid.EventGridEvent.getTopic()"
- "com.azure.messaging.eventgrid.EventGridEvent.setEventTime(java.time.OffsetDateTime)"
- "com.azure.messaging.eventgrid.EventGridEvent.setId(java.lang.String)"
- "com.azure.messaging.eventgrid.EventGridEvent.setTopic(java.lang.String)"
type: "class"
metadata: {}
package: "com.azure.messaging.eventgrid"
artifact: com.azure:azure-messaging-eventgrid:4.4.0
