### YamlMime:JavaType
uid: "com.azure.messaging.eventgrid.EventGridEvent"
fullName: "com.azure.messaging.eventgrid.EventGridEvent"
name: "EventGridEvent"
nameWithType: "EventGridEvent"
summary: "Represents the EventGrid event conforming to the [ EventGrid event schema][EventGrid event schema].\n\nDepending on your scenario, you can either use the constructor <xref uid=\"com.azure.messaging.eventgrid.EventGridEvent.EventGridEvent(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#EventGridEvent(String, String, BinaryData, String)\"></xref> to create an EventGridEvent, or use the factory method <xref uid=\"com.azure.messaging.eventgrid.EventGridEvent.fromString(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#fromString(String)\"></xref> to deserialize EventGridEvent instances from a Json String representation of EventGrid events.\n\nIf you have the data payload of an EventGridEvent and want to send it out, use the constructor <xref uid=\"com.azure.messaging.eventgrid.EventGridEvent.EventGridEvent(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#EventGridEvent(String, String, BinaryData, String)\"></xref> to create it. Then use <xref uid=\"com.azure.messaging.eventgrid.EventGridPublisherAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventGridPublisherAsyncClient\"></xref> or <xref uid=\"com.azure.messaging.eventgrid.EventGridPublisherClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventGridPublisherClient\"></xref> to send it the EventGrid service.\n\n**Create EventGridEvent Samples**\n\n```java\n// Use BinaryData.fromObject() to create EventGridEvent data\n // From a model class\n User user = new User(\"Stephen\", \"James\");\n EventGridEvent eventGridEventDataObject = new EventGridEvent(\"/EventGridEvents/example/source\",\n     \"Example.EventType\", BinaryData.fromObject(user), \"0.1\");\n \n // From a String\n EventGridEvent eventGridEventDataStr = new EventGridEvent(\"/EventGridEvents/example/source\",\n     \"Example.EventType\", BinaryData.fromObject(\"Hello World\"), \"0.1\");\n \n // From an Integer\n EventGridEvent eventGridEventDataInt = new EventGridEvent(\"/EventGridEvents/example/source\",\n     \"Example.EventType\", BinaryData.fromObject(1), \"0.1\");\n \n // From a Boolean\n EventGridEvent eventGridEventDataBool = new EventGridEvent(\"/EventGridEvents/example/source\",\n     \"Example.EventType\", BinaryData.fromObject(true), \"0.1\");\n \n // From null\n EventGridEvent eventGridEventDataNull = new EventGridEvent(\"/EventGridEvents/example/source\",\n     \"Example.EventType\", BinaryData.fromObject(null), \"0.1\");\n \n // Use BinaryData.fromString() if you have a Json String for the EventGridEvent data.\n String jsonStringForData = \"\\\"Hello World\\\"\";  // A json String.\n EventGridEvent eventGridEventDataDataJsonStr = new EventGridEvent(\"/EventGridEvents/example/source\",\n     \"Example.EventType\", BinaryData.fromString(jsonStringForData), \"0.1\");\n```\n\nOn the contrary, if you receive events from any event handlers and therefore have the Json string representation of one or more of EventGridEvents, use <xref uid=\"com.azure.messaging.eventgrid.EventGridEvent.fromString(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#fromString(String)\"></xref> to deserialize them from the Json string.\n\n**Deserialize EventGridEvent Samples**\n\n```java\nList<EventGridEvent> eventGridEventList = EventGridEvent.fromString(eventGridEventJsonString);\n EventGridEvent eventGridEvent = eventGridEventList.get(0);\n BinaryData eventGridEventData = eventGridEvent.getData();\n \n User objectValue = eventGridEventData.toObject(User.class);  // If data payload is a User object.\n int intValue = eventGridEventData.toObject(Integer.class);  // If data payload is an int.\n boolean boolValue = eventGridEventData.toObject(Boolean.class);  // If data payload is boolean.\n String stringValue = eventGridEventData.toObject(String.class);  // If data payload is String.\n String jsonStringValue = eventGridEventData.toString();  // The data payload represented in Json String.\n```\n\n\n[EventGrid event schema]: https://docs.microsoft.com/azure/event-grid/event-schema"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class EventGridEvent"
constructors:
- "com.azure.messaging.eventgrid.EventGridEvent.EventGridEvent(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,java.lang.String)"
methods:
- "com.azure.messaging.eventgrid.EventGridEvent.fromString(java.lang.String)"
- "com.azure.messaging.eventgrid.EventGridEvent.getData()"
- "com.azure.messaging.eventgrid.EventGridEvent.getDataVersion()"
- "com.azure.messaging.eventgrid.EventGridEvent.getEventTime()"
- "com.azure.messaging.eventgrid.EventGridEvent.getEventType()"
- "com.azure.messaging.eventgrid.EventGridEvent.getId()"
- "com.azure.messaging.eventgrid.EventGridEvent.getSubject()"
- "com.azure.messaging.eventgrid.EventGridEvent.getTopic()"
- "com.azure.messaging.eventgrid.EventGridEvent.setEventTime(java.time.OffsetDateTime)"
- "com.azure.messaging.eventgrid.EventGridEvent.setId(java.lang.String)"
- "com.azure.messaging.eventgrid.EventGridEvent.setTopic(java.lang.String)"
type: "class"
metadata: {}
package: "com.azure.messaging.eventgrid"
artifact: com.azure:azure-messaging-eventgrid:4.2.0
