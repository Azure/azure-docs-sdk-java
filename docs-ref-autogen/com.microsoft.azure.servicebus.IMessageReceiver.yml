### YamlMime:JavaType
uid: "com.microsoft.azure.servicebus.IMessageReceiver"
fullName: "com.microsoft.azure.servicebus.IMessageReceiver"
name: "IMessageReceiver"
nameWithType: "IMessageReceiver"
summary: "Defines message receiver interface."
syntax: "public interface IMessageReceiver extends IMessageEntityClient, IMessageBrowser"
methods:
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.abandon(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.abandon(UUID lockToken)"
  name: "abandon(UUID lockToken)"
  nameWithType: "IMessageReceiver.abandon(UUID lockToken)"
  summary: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void abandon(UUID lockToken)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.abandon(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.abandon(UUID lockToken, TransactionContext transaction)"
  name: "abandon(UUID lockToken, TransactionContext transaction)"
  nameWithType: "IMessageReceiver.abandon(UUID lockToken, TransactionContext transaction)"
  summary: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void abandon(UUID lockToken, TransactionContext transaction)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.abandon(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.abandon(UUID lockToken, Map<String,Object> propertiesToModify)"
  name: "abandon(UUID lockToken, Map<String,Object> propertiesToModify)"
  nameWithType: "IMessageReceiver.abandon(UUID lockToken, Map<String,Object> propertiesToModify)"
  summary: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "Message properties to modify."
    name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract void abandon(UUID lockToken, Map<String,Object> propertiesToModify)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.abandon(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.abandon(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  name: "abandon(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  nameWithType: "IMessageReceiver.abandon(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  summary: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "Message properties to modify."
    name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void abandon(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(UUID lockToken)"
  name: "abandonAsync(UUID lockToken)"
  nameWithType: "IMessageReceiver.abandonAsync(UUID lockToken)"
  summary: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> abandonAsync(UUID lockToken)"
  desc: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message."
  returns:
    description: "a CompletableFuture representing the pending abandon."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(UUID lockToken, TransactionContext transaction)"
  name: "abandonAsync(UUID lockToken, TransactionContext transaction)"
  nameWithType: "IMessageReceiver.abandonAsync(UUID lockToken, TransactionContext transaction)"
  summary: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> abandonAsync(UUID lockToken, TransactionContext transaction)"
  desc: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message."
  returns:
    description: "a CompletableFuture representing the pending abandon."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  name: "abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  nameWithType: "IMessageReceiver.abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  summary: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "Message properties to modify."
    name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract CompletableFuture<Void> abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  desc: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message."
  returns:
    description: "a CompletableFuture representing the pending abandon."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  name: "abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  nameWithType: "IMessageReceiver.abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  summary: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "Message properties to modify."
    name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  desc: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message."
  returns:
    description: "a CompletableFuture representing the pending abandon."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.complete(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.complete(UUID lockToken)"
  name: "complete(UUID lockToken)"
  nameWithType: "IMessageReceiver.complete(UUID lockToken)"
  summary: "Completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void complete(UUID lockToken)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token. This will delete the message from the service."
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.complete(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.complete(UUID lockToken, TransactionContext transaction)"
  name: "complete(UUID lockToken, TransactionContext transaction)"
  nameWithType: "IMessageReceiver.complete(UUID lockToken, TransactionContext transaction)"
  summary: "Completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void complete(UUID lockToken, TransactionContext transaction)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token. This will delete the message from the service."
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.completeAsync(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.completeAsync(UUID lockToken)"
  name: "completeAsync(UUID lockToken)"
  nameWithType: "IMessageReceiver.completeAsync(UUID lockToken)"
  summary: "Asynchronously completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> completeAsync(UUID lockToken)"
  desc: "Asynchronously completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token. This will delete the message from the service."
  returns:
    description: "a CompletableFuture representing the pending complete."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.completeAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.completeAsync(UUID lockToken, TransactionContext transaction)"
  name: "completeAsync(UUID lockToken, TransactionContext transaction)"
  nameWithType: "IMessageReceiver.completeAsync(UUID lockToken, TransactionContext transaction)"
  summary: "Asynchronously completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> completeAsync(UUID lockToken, TransactionContext transaction)"
  desc: "Asynchronously completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token. This will delete the message from the service."
  returns:
    description: "a CompletableFuture representing the pending complete."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID lockToken)"
  name: "deadLetter(UUID lockToken)"
  nameWithType: "IMessageReceiver.deadLetter(UUID lockToken)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void deadLetter(UUID lockToken)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue."
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID lockToken, TransactionContext transaction)"
  name: "deadLetter(UUID lockToken, TransactionContext transaction)"
  nameWithType: "IMessageReceiver.deadLetter(UUID lockToken, TransactionContext transaction)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void deadLetter(UUID lockToken, TransactionContext transaction)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue."
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(java.util.UUID,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  name: "deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  nameWithType: "IMessageReceiver.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "The deadletter reason."
    name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The deadletter error description."
    name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(java.util.UUID,java.lang.String,java.lang.String,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  name: "deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  nameWithType: "IMessageReceiver.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "The deadletter reason."
    name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The deadletter error description."
    name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  name: "deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  nameWithType: "IMessageReceiver.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "The deadletter reason."
    name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The deadletter error description."
    name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Message properties to modify."
    name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  name: "deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  nameWithType: "IMessageReceiver.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "The deadletter reason."
    name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The deadletter error description."
    name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Message properties to modify."
    name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID lockToken, Map<String,Object> propertiesToModify)"
  name: "deadLetter(UUID lockToken, Map<String,Object> propertiesToModify)"
  nameWithType: "IMessageReceiver.deadLetter(UUID lockToken, Map<String,Object> propertiesToModify)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified message properties."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "Message properties to modify."
    name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract void deadLetter(UUID lockToken, Map<String,Object> propertiesToModify)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified message properties."
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  name: "deadLetter(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  nameWithType: "IMessageReceiver.deadLetter(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified message properties."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "Message properties to modify."
    name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void deadLetter(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified message properties."
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID lockToken)"
  name: "deadLetterAsync(UUID lockToken)"
  nameWithType: "IMessageReceiver.deadLetterAsync(UUID lockToken)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> deadLetterAsync(UUID lockToken)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter."
  returns:
    description: "a CompletableFuture representing the pending deadletter."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID lockToken, TransactionContext transaction)"
  name: "deadLetterAsync(UUID lockToken, TransactionContext transaction)"
  nameWithType: "IMessageReceiver.deadLetterAsync(UUID lockToken, TransactionContext transaction)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> deadLetterAsync(UUID lockToken, TransactionContext transaction)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter."
  returns:
    description: "a CompletableFuture representing the pending deadletter."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  name: "deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  nameWithType: "IMessageReceiver.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "The deadletter reason."
    name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The deadletter error description."
    name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
  returns:
    description: "a CompletableFuture representing the pending deadletter."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  name: "deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  nameWithType: "IMessageReceiver.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "The deadletter reason."
    name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The deadletter error description."
    name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
  returns:
    description: "a CompletableFuture representing the pending deadletter."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  name: "deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  nameWithType: "IMessageReceiver.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "The deadletter reason."
    name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The deadletter error description."
    name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Message properties to modify."
    name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
  returns:
    description: "a CompletableFuture representing the pending deadletter."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  name: "deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  nameWithType: "IMessageReceiver.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "The deadletter reason."
    name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The deadletter error description."
    name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Message properties to modify."
    name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
  returns:
    description: "a CompletableFuture representing the pending deadletter."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  name: "deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  nameWithType: "IMessageReceiver.deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified properties."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "Message properties to modify."
    name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract CompletableFuture<Void> deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified properties."
  returns:
    description: "a CompletableFuture representing the pending deadletter."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  name: "deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  nameWithType: "IMessageReceiver.deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified properties."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "Message properties to modify."
    name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified properties."
  returns:
    description: "a CompletableFuture representing the pending deadletter."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.defer(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.defer(UUID lockToken)"
  name: "defer(UUID lockToken)"
  nameWithType: "IMessageReceiver.defer(UUID lockToken)"
  summary: "Defers a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void defer(UUID lockToken)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Defers a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token. This will move message into deferred subqueue."
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.defer(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.defer(UUID lockToken, TransactionContext transaction)"
  name: "defer(UUID lockToken, TransactionContext transaction)"
  nameWithType: "IMessageReceiver.defer(UUID lockToken, TransactionContext transaction)"
  summary: "Defers a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void defer(UUID lockToken, TransactionContext transaction)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Defers a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token. This will move message into deferred subqueue."
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.defer(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.defer(UUID lockToken, Map<String,Object> propertiesToModify)"
  name: "defer(UUID lockToken, Map<String,Object> propertiesToModify)"
  nameWithType: "IMessageReceiver.defer(UUID lockToken, Map<String,Object> propertiesToModify)"
  summary: "Defers a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token with modified message property."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "Message properties to modify."
    name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract void defer(UUID lockToken, Map<String,Object> propertiesToModify)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Defers a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token with modified message property. This will move message into deferred subqueue."
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.defer(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.defer(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  name: "defer(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  nameWithType: "IMessageReceiver.defer(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  summary: "Defers a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token with modified message property."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "Message properties to modify."
    name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void defer(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Defers a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token with modified message property. This will move message into deferred subqueue."
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(UUID lockToken)"
  name: "deferAsync(UUID lockToken)"
  nameWithType: "IMessageReceiver.deferAsync(UUID lockToken)"
  summary: "Asynchronously defers a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> deferAsync(UUID lockToken)"
  desc: "Asynchronously defers a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token. This will move message into deferred subqueue."
  returns:
    description: "a CompletableFuture representing the pending defer."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(UUID lockToken, TransactionContext transaction)"
  name: "deferAsync(UUID lockToken, TransactionContext transaction)"
  nameWithType: "IMessageReceiver.deferAsync(UUID lockToken, TransactionContext transaction)"
  summary: "Asynchronously defers a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> deferAsync(UUID lockToken, TransactionContext transaction)"
  desc: "Asynchronously defers a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token. This will move message into deferred subqueue."
  returns:
    description: "a CompletableFuture representing the pending defer."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  name: "deferAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  nameWithType: "IMessageReceiver.deferAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  summary: "Asynchronously defers a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token with modified message propert."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "Message properties to modify."
    name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract CompletableFuture<Void> deferAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  desc: "Asynchronously defers a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token with modified message propert. This will move message into deferred subqueue."
  returns:
    description: "a CompletableFuture representing the pending defer."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  name: "deferAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  nameWithType: "IMessageReceiver.deferAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  summary: "Asynchronously defers a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token with modified message propert."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "Message properties to modify."
    name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> which this operation should enlist to."
    name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> deferAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  desc: "Asynchronously defers a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token with modified message propert. This will move message into deferred subqueue."
  returns:
    description: "a CompletableFuture representing the pending defer."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.getPrefetchCount()"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.getPrefetchCount()"
  name: "getPrefetchCount()"
  nameWithType: "IMessageReceiver.getPrefetchCount()"
  summary: "Get the prefetch value set."
  modifiers:
  - "abstract"
  syntax: "public abstract int getPrefetchCount()"
  desc: "Get the prefetch value set."
  returns:
    description: "The set prefetch count value."
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.getReceiveMode()"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.getReceiveMode()"
  name: "getReceiveMode()"
  nameWithType: "IMessageReceiver.getReceiveMode()"
  summary: "Get current receiver's <xref uid=\"com.microsoft.azure.servicebus.ReceiveMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiveMode\"></xref>."
  modifiers:
  - "abstract"
  syntax: "public abstract ReceiveMode getReceiveMode()"
  desc: "Get current receiver's <xref uid=\"com.microsoft.azure.servicebus.ReceiveMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiveMode\"></xref>."
  returns:
    description: "<xref uid=\"com.microsoft.azure.servicebus.ReceiveMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiveMode\"></xref>"
    type: "<xref href=\"com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.receive()"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.receive()"
  name: "receive()"
  nameWithType: "IMessageReceiver.receive()"
  summary: "Receives a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with default server wait time."
  modifiers:
  - "abstract"
  syntax: "public abstract IMessage receive()"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receives a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with default server wait time."
  returns:
    description: "The received <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> or null if there is no message."
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.receive(java.time.Duration)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.receive(Duration serverWaitTime)"
  name: "receive(Duration serverWaitTime)"
  nameWithType: "IMessageReceiver.receive(Duration serverWaitTime)"
  summary: "Receives a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with specified server wait time."
  modifiers:
  - "abstract"
  parameters:
  - description: "The server wait time"
    name: "serverWaitTime"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract IMessage receive(Duration serverWaitTime)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receives a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with specified server wait time."
  returns:
    description: "The received <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> or null if there is no message."
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.receiveAsync()"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.receiveAsync()"
  name: "receiveAsync()"
  nameWithType: "IMessageReceiver.receiveAsync()"
  summary: "Receives a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> from Azure Service Bus."
  modifiers:
  - "abstract"
  syntax: "public abstract CompletableFuture<IMessage> receiveAsync()"
  desc: "Receives a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> from Azure Service Bus."
  returns:
    description: "The message received. Returns null if no message is found"
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.receiveAsync(java.time.Duration)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.receiveAsync(Duration serverWaitTime)"
  name: "receiveAsync(Duration serverWaitTime)"
  nameWithType: "IMessageReceiver.receiveAsync(Duration serverWaitTime)"
  summary: "Receives a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> from Azure Service Bus with server wait time."
  modifiers:
  - "abstract"
  parameters:
  - description: "The time the client waits for receiving a message before it times out."
    name: "serverWaitTime"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<IMessage> receiveAsync(Duration serverWaitTime)"
  desc: "Receives a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> from Azure Service Bus with server wait time."
  returns:
    description: "The message received. Returns null if no message is found"
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.receiveBatch(int)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.receiveBatch(int maxMessageCount)"
  name: "receiveBatch(int maxMessageCount)"
  nameWithType: "IMessageReceiver.receiveBatch(int maxMessageCount)"
  summary: "Receives a maximum of max<wbr>Message<wbr>Count <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> from Azure Service Bus."
  modifiers:
  - "abstract"
  parameters:
  - description: "The maximum number of messages that will be received."
    name: "maxMessageCount"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Collection<IMessage> receiveBatch(int maxMessageCount)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receives a maximum of maxMessageCount <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> from Azure Service Bus."
  returns:
    description: "List of messages received. Returns null if no message is found."
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.receiveBatch(int,java.time.Duration)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.receiveBatch(int maxMessageCount, Duration serverWaitTime)"
  name: "receiveBatch(int maxMessageCount, Duration serverWaitTime)"
  nameWithType: "IMessageReceiver.receiveBatch(int maxMessageCount, Duration serverWaitTime)"
  summary: "Receives a maximum of max<wbr>Message<wbr>Count <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> from Azure Service Bus with server wait time."
  modifiers:
  - "abstract"
  parameters:
  - description: "The maximum number of messages that will be received."
    name: "maxMessageCount"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "The time the client waits for receiving a message before it times out."
    name: "serverWaitTime"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Collection<IMessage> receiveBatch(int maxMessageCount, Duration serverWaitTime)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receives a maximum of maxMessageCount <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> from Azure Service Bus with server wait time."
  returns:
    description: "List of messages received. Returns null if no message is found."
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.receiveBatchAsync(int)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.receiveBatchAsync(int maxMessageCount)"
  name: "receiveBatchAsync(int maxMessageCount)"
  nameWithType: "IMessageReceiver.receiveBatchAsync(int maxMessageCount)"
  summary: "Asynchronously receives a maximum of max<wbr>Message<wbr>Count <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> from the entity."
  modifiers:
  - "abstract"
  parameters:
  - description: "The maximum number of messages that will be received."
    name: "maxMessageCount"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Collection<IMessage>> receiveBatchAsync(int maxMessageCount)"
  desc: "Asynchronously receives a maximum of maxMessageCount <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> from the entity."
  returns:
    description: "a CompletableFuture representing the pending receive."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.receiveBatchAsync(int,java.time.Duration)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.receiveBatchAsync(int maxMessageCount, Duration serverWaitTime)"
  name: "receiveBatchAsync(int maxMessageCount, Duration serverWaitTime)"
  nameWithType: "IMessageReceiver.receiveBatchAsync(int maxMessageCount, Duration serverWaitTime)"
  summary: "Asynchronously receives a maximum of max<wbr>Message<wbr>Count <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> from Azure Service Bus with server wait time."
  modifiers:
  - "abstract"
  parameters:
  - description: "The maximum number of messages that will be received."
    name: "maxMessageCount"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "The time the client waits for receiving a message before it times out."
    name: "serverWaitTime"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Collection<IMessage>> receiveBatchAsync(int maxMessageCount, Duration serverWaitTime)"
  desc: "Asynchronously receives a maximum of maxMessageCount <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> from Azure Service Bus with server wait time."
  returns:
    description: "a CompletableFuture representing the pending receive."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessage(long)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessage(long sequenceNumber)"
  name: "receiveDeferredMessage(long sequenceNumber)"
  nameWithType: "IMessageReceiver.receiveDeferredMessage(long sequenceNumber)"
  summary: "Receives a deferred <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref>."
  modifiers:
  - "abstract"
  parameters:
  - description: "The <xref uid=\"com.microsoft.azure.servicebus.Message.getSequenceNumber()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getSequenceNumber()\"></xref>."
    name: "sequenceNumber"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract IMessage receiveDeferredMessage(long sequenceNumber)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receives a deferred <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref>. Deferred messages can only be received by using sequence number."
  returns:
    description: "The received <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> or null if there is no message for given sequence number."
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageAsync(long)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageAsync(long sequenceNumber)"
  name: "receiveDeferredMessageAsync(long sequenceNumber)"
  nameWithType: "IMessageReceiver.receiveDeferredMessageAsync(long sequenceNumber)"
  summary: "Asynchronously receives a specific deferred <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> identified by sequence number."
  modifiers:
  - "abstract"
  parameters:
  - description: "The sequence number of the message that will be received."
    name: "sequenceNumber"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<IMessage> receiveDeferredMessageAsync(long sequenceNumber)"
  desc: "Asynchronously receives a specific deferred <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> identified by sequence number."
  returns:
    description: "a CompletableFuture representing the pending receive."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageBatch(java.util.Collection<java.lang.Long>)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageBatch(Collection<Long> sequenceNumbers)"
  name: "receiveDeferredMessageBatch(Collection<Long> sequenceNumbers)"
  nameWithType: "IMessageReceiver.receiveDeferredMessageBatch(Collection<Long> sequenceNumbers)"
  summary: "Receives a batch of deferred <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref>."
  modifiers:
  - "abstract"
  parameters:
  - description: "The sequence numbers of desired deferred messages."
    name: "sequenceNumbers"
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract Collection<IMessage> receiveDeferredMessageBatch(Collection<Long> sequenceNumbers)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receives a batch of deferred <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref>."
  returns:
    description: "List of messages received. Returns null if no message is found."
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageBatchAsync(java.util.Collection<java.lang.Long>)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageBatchAsync(Collection<Long> sequenceNumbers)"
  name: "receiveDeferredMessageBatchAsync(Collection<Long> sequenceNumbers)"
  nameWithType: "IMessageReceiver.receiveDeferredMessageBatchAsync(Collection<Long> sequenceNumbers)"
  summary: "Asynchronously receives a set of deferred <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> from the entity."
  modifiers:
  - "abstract"
  parameters:
  - description: "The sequence numbers of the message that will be received."
    name: "sequenceNumbers"
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract CompletableFuture<Collection<IMessage>> receiveDeferredMessageBatchAsync(Collection<Long> sequenceNumbers)"
  desc: "Asynchronously receives a set of deferred <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> from the entity."
  returns:
    description: "a CompletableFuture representing the pending receive."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLock(com.microsoft.azure.servicebus.IMessage)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLock(IMessage message)"
  name: "renewMessageLock(IMessage message)"
  nameWithType: "IMessageReceiver.renewMessageLock(IMessage message)"
  summary: "Renews the lock on the message specified by the lock token."
  modifiers:
  - "abstract"
  parameters:
  - description: "The <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to be renewed"
    name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Instant renewMessageLock(IMessage message)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Renews the lock on the message specified by the lock token. The lock will be renewed based on the setting specified on the entity. When a message is received in <xref uid=\"com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiveMode#PEEKLOCK\"></xref> mode, the message is locked on the server for this receiver instance for a duration as specified during the Queue/Subscription creation (LockDuration). If processing of the message requires longer than this duration, the lock needs to be renewed. For each renewal, the lock is reset to the entity's LockDuration value."
  returns:
    description: "The new locked until UTC time."
    type: "<xref href=\"java.time.Instant?alt=java.time.Instant&text=Instant\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLock(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLock(UUID lockToken)"
  name: "renewMessageLock(UUID lockToken)"
  nameWithType: "IMessageReceiver.renewMessageLock(UUID lockToken)"
  summary: "Renews the lock on the message specified by the lock token."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Instant renewMessageLock(UUID lockToken)"
  exceptions:
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if the current thread was interrupted while waiting"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Renews the lock on the message specified by the lock token. The lock will be renewed based on the setting specified on the entity. When a message is received in <xref uid=\"com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiveMode#PEEKLOCK\"></xref> mode, the message is locked on the server for this receiver instance for a duration as specified during the Queue/Subscription creation (LockDuration). If processing of the message requires longer than this duration, the lock needs to be renewed. For each renewal, the lock is reset to the entity's LockDuration value. Note - calling this will not update <xref uid=\"com.microsoft.azure.servicebus.Message.getLockedUntilUtc()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockedUntilUtc()\"></xref> and updated lockedUntilUtc must be tracked by the application."
  returns:
    description: "The new locked until UTC time."
    type: "<xref href=\"java.time.Instant?alt=java.time.Instant&text=Instant\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLockAsync(com.microsoft.azure.servicebus.IMessage)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLockAsync(IMessage message)"
  name: "renewMessageLockAsync(IMessage message)"
  nameWithType: "IMessageReceiver.renewMessageLockAsync(IMessage message)"
  summary: "Asynchronously renews the lock on the message specified by the lock token."
  modifiers:
  - "abstract"
  parameters:
  - description: "The <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to be renewed"
    name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Instant> renewMessageLockAsync(IMessage message)"
  desc: "Asynchronously renews the lock on the message specified by the lock token. The lock will be renewed based on the setting specified on the entity. When a message is received in <xref uid=\"com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiveMode#PEEKLOCK\"></xref> mode, the message is locked on the server for this receiver instance for a duration as specified during the Queue/Subscription creation (LockDuration). If processing of the message requires longer than this duration, the lock needs to be renewed. For each renewal, the lock is reset to the entity's LockDuration value."
  returns:
    description: "a CompletableFuture representing the pending renew."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.time.Instant?alt=java.time.Instant&text=Instant\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLockAsync(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLockAsync(UUID lockToken)"
  name: "renewMessageLockAsync(UUID lockToken)"
  nameWithType: "IMessageReceiver.renewMessageLockAsync(UUID lockToken)"
  summary: "Renews the lock on the message specified by the lock token."
  modifiers:
  - "abstract"
  parameters:
  - description: "Message lock token <xref uid=\"com.microsoft.azure.servicebus.Message.getLockToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockToken()\"></xref>"
    name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Instant> renewMessageLockAsync(UUID lockToken)"
  desc: "Renews the lock on the message specified by the lock token. The lock will be renewed based on the setting specified on the entity. When a message is received in <xref uid=\"com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiveMode#PEEKLOCK\"></xref> mode, the message is locked on the server for this receiver instance for a duration as specified during the Queue/Subscription creation (LockDuration). If processing of the message requires longer than this duration, the lock needs to be renewed. For each renewal, the lock is reset to the entity's LockDuration value. Note - calling this will not update <xref uid=\"com.microsoft.azure.servicebus.Message.getLockedUntilUtc()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message#getLockedUntilUtc()\"></xref> and updated lockedUntilUtc must be tracked by the application."
  returns:
    description: "a CompletableFuture representing the pending renew."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.time.Instant?alt=java.time.Instant&text=Instant\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.IMessageReceiver.setPrefetchCount(int)"
  fullName: "com.microsoft.azure.servicebus.IMessageReceiver.setPrefetchCount(int prefetchCount)"
  name: "setPrefetchCount(int prefetchCount)"
  nameWithType: "IMessageReceiver.setPrefetchCount(int prefetchCount)"
  summary: "Set the prefetch count of the receiver."
  modifiers:
  - "abstract"
  parameters:
  - description: "The desired prefetch count."
    name: "prefetchCount"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void setPrefetchCount(int prefetchCount)"
  exceptions:
  - description: "if sets the value failed"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Set the prefetch count of the receiver. Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when and before the application asks for one using Receive. Setting a non-zero value prefetches PrefetchCount number of messages. Setting the value to zero turns prefetch off. For both PEEKLOCK mode and RECEIVEANDDELETE mode, the default value is 0.\n\nThe value cannot be set until the receiver is created."
type: "interface"
desc: "Defines message receiver interface. The MessageReceiver can be used to receive messages from Queues and Subscriptions and acknowledge them."
implements:
- "<xref href=\"com.microsoft.azure.servicebus.IMessageBrowser?alt=com.microsoft.azure.servicebus.IMessageBrowser&text=IMessageBrowser\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.servicebus.IMessageEntityClient?alt=com.microsoft.azure.servicebus.IMessageEntityClient&text=IMessageEntityClient\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.microsoft.azure.servicebus"
artifact: com.microsoft.azure:azure-servicebus:3.6.6
