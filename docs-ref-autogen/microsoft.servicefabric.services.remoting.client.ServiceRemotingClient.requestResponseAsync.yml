### YamlMime:JavaMember
nameWithType: ServiceRemotingClient.requestResponseAsync
type: method
members:
- fullName: microsoft.servicefabric.services.remoting.client.ServiceRemotingClient.requestResponseAsync(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  name: requestResponseAsync(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  nameWithType: ServiceRemotingClient.requestResponseAsync(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  parameters:
  - description: <p>Message headers </p>
    name: messageHeaders
    type: <xref href="microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders?alt=microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders&text=ServiceRemotingMessageHeaders" data-throw-if-not-resolved="False"/>
  - description: <p>Message body </p>
    name: requestBody
    type: <xref href="byte+%5B%5D?alt=byte []&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Response body </p>
    type: <xref href="CompletableFuture%3Cbyte%5B%5D%3E?alt=CompletableFuture<byte[]>&text=CompletableFuture%3Cbyte%5B%5D%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sends a message to the service and gets a response back.</p>

    <p></p>
  syntax: public CompletableFuture<byte[]> requestResponseAsync(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  uid: microsoft.servicefabric.services.remoting.client.ServiceRemotingClient.requestResponseAsync(ServiceRemotingMessageHeaders,byte [])
uid: microsoft.servicefabric.services.remoting.client.ServiceRemotingClient.requestResponseAsync*
fullName: microsoft.servicefabric.services.remoting.client.ServiceRemotingClient.requestResponseAsync(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
name: requestResponseAsync(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
package: microsoft.servicefabric.services.remoting.client
metadata: {}
