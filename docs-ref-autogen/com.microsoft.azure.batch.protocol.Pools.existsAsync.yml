### YamlMime:JavaMember
nameWithType: Pools.existsAsync
type: method
members:
- fullName: com.microsoft.azure.batch.protocol.Pools.existsAsync(String poolId)
  name: existsAsync(String poolId)
  nameWithType: Pools.existsAsync(String poolId)
  parameters:
  - description: <p>The ID of the pool to get. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the boolean object </p>
    type: <xref href="Observable%3CBoolean%3E?alt=Observable%3CBoolean%3E&text=Observable%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets basic properties of a pool.</p>

    <p></p>
  syntax: public Observable<Boolean> existsAsync(String poolId)
  uid: com.microsoft.azure.batch.protocol.Pools.existsAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Pools.existsAsync(String poolId, final ServiceCallback<Boolean> serviceCallback)
  name: existsAsync(String poolId, final ServiceCallback<Boolean> serviceCallback)
  nameWithType: Pools.existsAsync(String poolId, final ServiceCallback<Boolean> serviceCallback)
  parameters:
  - description: <p>The ID of the pool to get. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CBoolean%3E?alt=final+ServiceCallback%3CBoolean%3E&text=final+ServiceCallback%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CBoolean%3E?alt=ServiceFuture%3CBoolean%3E&text=ServiceFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets basic properties of a pool.</p>

    <p></p>
  syntax: public ServiceFuture<Boolean> existsAsync(String poolId, final ServiceCallback<Boolean> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.existsAsync(String,final ServiceCallback<Boolean>)
- fullName: com.microsoft.azure.batch.protocol.Pools.existsAsync(String poolId, PoolExistsOptions poolExistsOptions)
  name: existsAsync(String poolId, PoolExistsOptions poolExistsOptions)
  nameWithType: Pools.existsAsync(String poolId, PoolExistsOptions poolExistsOptions)
  parameters:
  - description: <p>The ID of the pool to get. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolExistsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolExistsOptions?alt=com.microsoft.azure.batch.protocol.models.PoolExistsOptions&text=PoolExistsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the boolean object </p>
    type: <xref href="Observable%3CBoolean%3E?alt=Observable%3CBoolean%3E&text=Observable%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets basic properties of a pool.</p>

    <p></p>
  syntax: public Observable<Boolean> existsAsync(String poolId, PoolExistsOptions poolExistsOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.existsAsync(String,PoolExistsOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.existsAsync(String poolId, PoolExistsOptions poolExistsOptions, final ServiceCallback<Boolean> serviceCallback)
  name: existsAsync(String poolId, PoolExistsOptions poolExistsOptions, final ServiceCallback<Boolean> serviceCallback)
  nameWithType: Pools.existsAsync(String poolId, PoolExistsOptions poolExistsOptions, final ServiceCallback<Boolean> serviceCallback)
  parameters:
  - description: <p>The ID of the pool to get. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolExistsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolExistsOptions?alt=com.microsoft.azure.batch.protocol.models.PoolExistsOptions&text=PoolExistsOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CBoolean%3E?alt=final+ServiceCallback%3CBoolean%3E&text=final+ServiceCallback%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CBoolean%3E?alt=ServiceFuture%3CBoolean%3E&text=ServiceFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets basic properties of a pool.</p>

    <p></p>
  syntax: public ServiceFuture<Boolean> existsAsync(String poolId, PoolExistsOptions poolExistsOptions, final ServiceCallback<Boolean> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.existsAsync(String,PoolExistsOptions,final ServiceCallback<Boolean>)
uid: com.microsoft.azure.batch.protocol.Pools.existsAsync*
fullName: com.microsoft.azure.batch.protocol.Pools.existsAsync
name: existsAsync(String poolId)
package: com.microsoft.azure.batch.protocol
metadata: {}
