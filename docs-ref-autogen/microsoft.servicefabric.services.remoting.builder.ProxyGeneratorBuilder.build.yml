### YamlMime:JavaMember
nameWithType: ProxyGeneratorBuilder.build
type: method
members:
- fullName: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuilder.build(Class<?> interfaceType, InterfaceDescription[] interfaceDescriptions)
  name: build(Class<?> interfaceType, InterfaceDescription[] interfaceDescriptions)
  nameWithType: ProxyGeneratorBuilder.build(Class<?> interfaceType, InterfaceDescription[] interfaceDescriptions)
  parameters:
  - name: interfaceType
    type: <xref href="Class%3C%3F%3E?alt=Class<?>&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  - name: interfaceDescriptions
    type: <xref href="InterfaceDescription+%5B%5D?alt=InterfaceDescription []&text=InterfaceDescription+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuildResult?alt=microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuildResult&text=ProxyGeneratorBuildResult" data-throw-if-not-resolved="False"/>
  syntax: public ProxyGeneratorBuildResult build(Class<?> interfaceType, InterfaceDescription[] interfaceDescriptions)
  uid: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuilder.build(Class<?>,InterfaceDescription [])
uid: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuilder.build*
fullName: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuilder.build(Class<?> interfaceType, InterfaceDescription[] interfaceDescriptions)
name: build(Class<?> interfaceType, InterfaceDescription[] interfaceDescriptions)
package: microsoft.servicefabric.services.remoting.builder
metadata: {}
