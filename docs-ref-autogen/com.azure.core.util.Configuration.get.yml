### YamlMime:JavaMember
uid: "com.azure.core.util.Configuration.get*"
fullName: "com.azure.core.util.Configuration.<T>get"
name: "<T>get"
nameWithType: "Configuration.<T>get"
members:
- uid: "com.azure.core.util.Configuration.<T>get(com.azure.core.util.ConfigurationProperty<T>)"
  fullName: "com.azure.core.util.Configuration.<T>get(ConfigurationProperty<T> property)"
  name: "<T>get(ConfigurationProperty<T> property)"
  nameWithType: "Configuration.<T>get(ConfigurationProperty<T> property)"
  summary: "Gets property value from all available sources in the following order:\n\n *  Explicit configuration from given <xref uid=\"com.azure.core.util.ConfigurationSource\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSource\"></xref> by property name\n *  Explicit configuration by property aliases in the order they were provided in <xref uid=\"com.azure.core.util.ConfigurationProperty\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationProperty\"></xref>\n *  Explicit configuration by property name in the shared section (if <xref uid=\"com.azure.core.util.ConfigurationProperty\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationProperty\"></xref> is shared)\n *  Explicit configuration by property aliases in the shared section (if <xref uid=\"com.azure.core.util.ConfigurationProperty\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationProperty\"></xref> is shared)\n *  System property (if set)\n *  Environment variable (if set)\n\nProperty value is converted to specified type. If property value is missing and not required, default value is returned.\n\n```java\nConfigurationProperty<String> property = ConfigurationPropertyBuilder.ofString(\"http.proxy.hostname\")\n     .shared(true)\n     .logValue(true)\n     .systemPropertyName(\"http.proxyHost\")\n     .build();\n\n // attempts to get local `azure.sdk.<client-name>.http.proxy.host` property and falls back to\n // shared azure.sdk.http.proxy.port\n System.out.println(configuration.get(property));\n```"
  parameters:
  - description: "instance."
    name: "property"
    type: "<xref href=\"com.azure.core.util.ConfigurationProperty?alt=com.azure.core.util.ConfigurationProperty&text=ConfigurationProperty\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>get(ConfigurationProperty<T> property)"
  returns:
    description: "true if property is available, false otherwise."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.Configuration.<T>get(java.lang.String,T)"
  fullName: "com.azure.core.util.Configuration.<T>get(String name, T defaultValue)"
  name: "<T>get(String name, T defaultValue)"
  nameWithType: "Configuration.<T>get(String name, T defaultValue)"
  summary: "Gets the value of system property or environment variable converted to given primitive `T` using corresponding `parse` method on this type. Use <xref uid=\"com.azure.core.util.Configuration.<T>get(com.azure.core.util.ConfigurationProperty<T>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Configuration#get(ConfigurationProperty)\"></xref> overload to get explicit configuration or environment configuration from specific source.\n\nThis method first checks the values previously loaded from the environment, if the configuration is found there it will be returned. Otherwise, this will attempt to load the value from the environment.\n\nIf no configuration is found, the `defaultValue` is returned.\n\n**Following types are supported:**\n\n *  <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Byte\"></xref>\n *  <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Short\"></xref>\n *  <xref uid=\"java.lang.Integer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Integer\"></xref>\n *  <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Long\"></xref>\n *  <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Float\"></xref>\n *  <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Double\"></xref>\n *  <xref uid=\"java.lang.Boolean\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Boolean\"></xref>"
  parameters:
  - description: "Name of the configuration."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Value to return if the configuration isn't found."
    name: "defaultValue"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>get(String name, T defaultValue)"
  returns:
    description: "The converted configuration if found, otherwise the default value is returned."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.Configuration.<T>get(java.lang.String,java.util.function.Function<java.lang.String,T>)"
  fullName: "com.azure.core.util.Configuration.<T>get(String name, Function<String,T> converter)"
  name: "<T>get(String name, Function<String,T> converter)"
  nameWithType: "Configuration.<T>get(String name, Function<String,T> converter)"
  summary: "Gets the value of system property or environment variable and converts it with the `converter`.\n\nThis method first checks the values previously loaded from the environment, if the configuration is found there it will be returned. Otherwise, this will attempt to load the value from the environment.\n\nIf no configuration is found the `converter` won't be called and null will be returned."
  parameters:
  - description: "Name of the configuration."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Converter used to map the configuration to <code>T</code>."
    name: "converter"
    type: "<xref href=\"java.util.function.Function?alt=java.util.function.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>get(String name, Function<String,T> converter)"
  returns:
    description: "The converted configuration if found, otherwise null."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.Configuration.get(java.lang.String)"
  fullName: "com.azure.core.util.Configuration.get(String name)"
  name: "get(String name)"
  nameWithType: "Configuration.get(String name)"
  summary: "Gets the value of system property or environment variable. Use <xref uid=\"com.azure.core.util.Configuration.<T>get(com.azure.core.util.ConfigurationProperty<T>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Configuration#get(ConfigurationProperty)\"></xref> overload to get explicit configuration or environment configuration from specific source.\n\nThis method first checks the values previously loaded from the environment, if the configuration is found there it will be returned. Otherwise, this will attempt to load the value from the environment."
  parameters:
  - description: "Name of the configuration."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String get(String name)"
  returns:
    description: "Value of the configuration if found, otherwise null."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.core.util"
artifact: com.azure:azure-core:1.30.0
