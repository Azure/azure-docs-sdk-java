### YamlMime:ManagedReference
items:
- uid: com.azure.core.util.serializer.TypeReference
  id: TypeReference
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.serializer
  children:
  - com.azure.core.util.serializer.TypeReference.<T>createInstance(java.lang.Class<T>)
  - com.azure.core.util.serializer.TypeReference.TypeReference()
  - com.azure.core.util.serializer.TypeReference.getJavaType()
  langs:
  - java
  name: TypeReference<T>
  nameWithType: TypeReference<T>
  fullName: com.azure.core.util.serializer.TypeReference<T>
  type: Class
  package: com.azure.core.util.serializer
  summary: >-
    This class represents a generic Java type, retaining information about generics.


    **Code sample**


    ```java

    // Construct a TypeReference<T> for a Java generic type.
     // This pattern should only be used for generic types, for classes use the createInstance factory method.
     TypeReference<Map<String, Object>> typeReference = new TypeReference<Map<String, Object>>() { };
    ```


    ```java

    // Construct a TypeReference<T> for a Java class.
     // This pattern should only be used for non-generic classes when possible, use the constructor for generic
     // class when possible.
     TypeReference<Integer> typeReference = TypeReference.createInstance(int.class);
    ```
  syntax:
    content: public abstract class TypeReference<T>
    typeParameters:
    - id: T
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.core.util.serializer.TypeReference.<T>createInstance(java.lang.Class<T>)
  id: <T>createInstance(java.lang.Class<T>)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.serializer.TypeReference
  langs:
  - java
  name: <T>createInstance(Class<T> clazz)
  nameWithType: TypeReference<T>.<T>createInstance(Class<T> clazz)
  fullName: com.azure.core.util.serializer.TypeReference<T>.<T>createInstance(Class<T> clazz)
  overload: com.azure.core.util.serializer.TypeReference.createInstance*
  type: Method
  package: com.azure.core.util.serializer
  summary: >-
    Creates and instance of <xref uid="com.azure.core.util.serializer.TypeReference" data-throw-if-not-resolved="false">TypeReference</xref> which maintains the generic `T` of the passed <xref uid="java.lang.Class" data-throw-if-not-resolved="false">Class</xref>.


    This method will cache the instance of <xref uid="com.azure.core.util.serializer.TypeReference" data-throw-if-not-resolved="false">TypeReference</xref> using the passed <xref uid="java.lang.Class" data-throw-if-not-resolved="false">Class</xref> as the key. This is meant to be used with non-generic types such as primitive object types and POJOs, not `Map` or `List` parameterized types.
  syntax:
    content: public static TypeReference<T> <T>createInstance(Class<T> clazz)
    parameters:
    - id: clazz
      type: java.lang.Class<T>
      description: <xref uid="java.lang.Class" data-throw-if-not-resolved="false">Class</xref> that contains generic information used to create the <xref uid="com.azure.core.util.serializer.TypeReference" data-throw-if-not-resolved="false">TypeReference</xref>.
    return:
      type: com.azure.core.util.serializer.TypeReference<T>
      description: Either the cached or new instance of <xref uid="com.azure.core.util.serializer.TypeReference" data-throw-if-not-resolved="false">TypeReference</xref>.
- uid: com.azure.core.util.serializer.TypeReference.TypeReference()
  id: TypeReference()
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.serializer.TypeReference
  langs:
  - java
  name: TypeReference()
  nameWithType: TypeReference<T>.TypeReference()
  fullName: com.azure.core.util.serializer.TypeReference<T>.TypeReference()
  overload: com.azure.core.util.serializer.TypeReference.TypeReference*
  type: Constructor
  package: com.azure.core.util.serializer
  summary: Constructs a new <xref uid="com.azure.core.util.serializer.TypeReference" data-throw-if-not-resolved="false">TypeReference</xref> which maintains generic information.
  syntax:
    content: public TypeReference()
- uid: com.azure.core.util.serializer.TypeReference.TypeReference(java.lang.Class<T>)
  id: TypeReference(java.lang.Class<T>)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.serializer.TypeReference
  langs:
  - java
  name: TypeReference(Class<T> clazz)
  nameWithType: TypeReference<T>.TypeReference(Class<T> clazz)
  fullName: com.azure.core.util.serializer.TypeReference<T>.TypeReference(Class<T> clazz)
  overload: com.azure.core.util.serializer.TypeReference.TypeReference*
  type: Constructor
  package: com.azure.core.util.serializer
  syntax:
    content: private TypeReference(Class<T> clazz)
    parameters:
    - id: clazz
      type: java.lang.Class<T>
- uid: com.azure.core.util.serializer.TypeReference.getJavaType()
  id: getJavaType()
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.serializer.TypeReference
  langs:
  - java
  name: getJavaType()
  nameWithType: TypeReference<T>.getJavaType()
  fullName: com.azure.core.util.serializer.TypeReference<T>.getJavaType()
  overload: com.azure.core.util.serializer.TypeReference.getJavaType*
  type: Method
  package: com.azure.core.util.serializer
  summary: Returns the <xref uid="java.lang.reflect.Type" data-throw-if-not-resolved="false">Type</xref> representing `T`.
  syntax:
    content: public Type getJavaType()
    return:
      type: java.lang.reflect.Type
      description: The <xref uid="java.lang.reflect.Type" data-throw-if-not-resolved="false">Type</xref> representing <code>T</code>.
references:
- uid: com.azure.core.util.serializer.TypeReference.TypeReference*
  name: TypeReference
  nameWithType: TypeReference<T>.TypeReference
  fullName: com.azure.core.util.serializer.TypeReference<T>.TypeReference
  package: com.azure.core.util.serializer
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: java.lang.reflect.Type
  spec.java:
  - uid: java.lang.reflect.Type
    name: Type
    fullName: java.lang.reflect.Type
- uid: com.azure.core.util.serializer.TypeReference.getJavaType*
  name: getJavaType
  nameWithType: TypeReference<T>.getJavaType
  fullName: com.azure.core.util.serializer.TypeReference<T>.getJavaType
  package: com.azure.core.util.serializer
- uid: com.azure.core.util.serializer.TypeReference<T>
  spec.java:
  - uid: com.azure.core.util.serializer.TypeReference
    name: TypeReference
    fullName: com.azure.core.util.serializer.TypeReference
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.serializer.TypeReference.createInstance*
  name: <T>createInstance
  nameWithType: TypeReference<T>.<T>createInstance
  fullName: com.azure.core.util.serializer.TypeReference<T>.<T>createInstance
  package: com.azure.core.util.serializer
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
