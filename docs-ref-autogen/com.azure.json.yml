### YamlMime:JavaPackage
uid: "com.azure.json"
fullName: "com.azure.json"
name: "com.azure.json"
summary: "<p>The Azure JSON library provides interfaces for stream-style JSON reading and writing."
classes:
- "com.azure.json.JsonOptions"
- "com.azure.json.JsonProviders"
- "com.azure.json.JsonReader"
- "com.azure.json.JsonWriteContext"
- "com.azure.json.JsonWriter"
enums:
- "com.azure.json.JsonToken"
- "com.azure.json.JsonWriteState"
interfaces:
- "com.azure.json.JsonProvider"
- "com.azure.json.JsonSerializable"
- "com.azure.json.ReadValueCallback"
- "com.azure.json.WriteValueCallback"
desc: "<p>The Azure JSON library provides interfaces for stream-style JSON reading and writing. Stream-style reading and\n writing has the type itself define how to read JSON to create an instance of itself and how it writes out to JSON.\n Azure JSON also allows for external implementations for JSON reading and writing by offering a\n <a href=\"https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html\">service provider interface</a> to load\n implementations from the classpath. However, if one is not found, the Azure JSON library provides a default\n implementation.</p>\n\n <h2>Getting Started</h2>\n\n <p><xref uid=\"com.azure.json.JsonSerializable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.json.JsonSerializable\"></xref> is the base of Azure JSON: it's the interface that types implement to\n provide stream-style JSON reading and writing functionality. The interface has a single implementable method\n <xref uid=\"com.azure.json.JsonSerializable#toJson(com.azure.json.JsonWriter)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"toJson(JsonWriter)\"></xref> that defines how the\n object is written as JSON, to the <xref uid=\"com.azure.json.JsonWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.json.JsonWriter\"></xref>, and a static method\n <xref uid=\"com.azure.json.JsonSerializable#fromJson(com.azure.json.JsonReader)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"fromJson(JsonReader)\"></xref> that defines how to\n read an instance of the object from JSON, being read from the <xref uid=\"com.azure.json.JsonReader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.json.JsonReader\"></xref>. The default\n implementation of <xref uid=\"com.azure.json.JsonSerializable#fromJson(com.azure.json.JsonReader)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"fromJson(JsonReader)\"></xref>\n throws an <xref uid=\"java.lang.UnsupportedOperationException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.UnsupportedOperationException\"></xref> if the static method isn't hidden (a static method with the\n same definition) by the type implementing <xref uid=\"com.azure.json.JsonSerializable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.json.JsonSerializable\"></xref>. Given that the type itself manages\n JSON serialization the type can be fluent, immutable, or a mix of fluent and immutable, it doesn't matter as all\n logic is self-encapsulated.</p>\n\n <p><strong>Sample: All JsonSerializable fields are optional</strong></p>\n\n <!-- src_embed com.azure.json.JsonSerializable.ComputerMemory -->\n <pre>\n\n &#47;**\n  * Implementation of JsonSerializable where all properties are fluently set.\n  *&#47;\n public class ComputerMemory implements JsonSerializable&lt;ComputerMemory&gt; &#123;\n     private long memoryInBytes;\n     private double clockSpeedInHertz;\n     private String manufacturer;\n     private boolean errorCorrecting;\n\n     &#47;**\n      * Sets the memory capacity, in bytes, of the computer memory.\n      *\n      * &#64;param memoryInBytes The memory capacity in bytes.\n      * &#64;return The update ComputerMemory\n      *&#47;\n     public ComputerMemory setMemoryInBytes&#40;long memoryInBytes&#41; &#123;\n         this.memoryInBytes = memoryInBytes;\n         return this;\n     &#125;\n\n     &#47;**\n      * Sets the clock speed, in hertz, of the computer memory.\n      *\n      * &#64;param clockSpeedInHertz The clock speed in hertz.\n      * &#64;return The update ComputerMemory\n      *&#47;\n     public ComputerMemory setClockSpeedInHertz&#40;double clockSpeedInHertz&#41; &#123;\n         this.clockSpeedInHertz = clockSpeedInHertz;\n         return this;\n     &#125;\n\n     &#47;**\n      * Sets the manufacturer of the computer memory.\n      *\n      * &#64;param manufacturer The manufacturer.\n      * &#64;return The update ComputerMemory\n      *&#47;\n     public ComputerMemory setManufacturer&#40;String manufacturer&#41; &#123;\n         this.manufacturer = manufacturer;\n         return this;\n     &#125;\n\n     &#47;**\n      * Sets whether the computer memory is error correcting.\n      *\n      * &#64;param errorCorrecting Whether the computer memory is error correcting.\n      * &#64;return The update ComputerMemory\n      *&#47;\n     public ComputerMemory setErrorCorrecting&#40;boolean errorCorrecting&#41; &#123;\n         this.errorCorrecting = errorCorrecting;\n         return this;\n     &#125;\n\n     &#64;Override\n     public JsonWriter toJson&#40;JsonWriter jsonWriter&#41; throws IOException &#123;\n         return jsonWriter.writeStartObject&#40;&#41;\n             .writeLongField&#40;&quot;memoryInBytes&quot;, memoryInBytes&#41;\n             .writeDoubleField&#40;&quot;clockSpeedInHertz&quot;, clockSpeedInHertz&#41;\n             &#47;&#47; Writing fields with nullable types won't write the field if the value is null. If a nullable field needs\n             &#47;&#47; to always be written use 'writeNullableField&#40;String, Object, WriteValueCallback&lt;JsonWriter, Object&gt;&#41;'.\n             &#47;&#47; This will write 'fieldName: null' if the value is null.\n             .writeStringField&#40;&quot;manufacturer&quot;, manufacturer&#41;\n             .writeBooleanField&#40;&quot;errorCorrecting&quot;, errorCorrecting&#41;\n             .writeEndObject&#40;&#41;;\n     &#125;\n\n     &#47;**\n      * Reads an instance of ComputerMemory from the JsonReader.\n      *\n      * &#64;param jsonReader The JsonReader being read.\n      * &#64;return An instance of ComputerMemory if the JsonReader was pointing to an instance of it, or null if it was\n      * pointing to JSON null.\n      * &#64;throws IOException If an error occurs while reading the ComputerMemory.\n      *&#47;\n     public static ComputerMemory fromJson&#40;JsonReader jsonReader&#41; throws IOException &#123;\n         &#47;&#47; 'readObject' will initialize reading if the JsonReader hasn't begun JSON reading and validate that the\n         &#47;&#47; current state of reading is a JSON start object. If the state isn't JSON start object an exception will be\n         &#47;&#47; thrown.\n         return jsonReader.readObject&#40;reader -&gt; &#123;\n             ComputerMemory deserializedValue = new ComputerMemory&#40;&#41;;\n\n             while &#40;reader.nextToken&#40;&#41; != JsonToken.END_OBJECT&#41; &#123;\n                 String fieldName = reader.getFieldName&#40;&#41;;\n                 reader.nextToken&#40;&#41;;\n\n                 &#47;&#47; In this case field names are case-sensitive but this could be replaced with 'equalsIgnoreCase' to\n                 &#47;&#47; make them case-insensitive.\n                 if &#40;&quot;memoryInBytes&quot;.equals&#40;fieldName&#41;&#41; &#123;\n                     deserializedValue.setMemoryInBytes&#40;reader.getLong&#40;&#41;&#41;;\n                 &#125; else if &#40;&quot;clockSpeedInHertz&quot;.equals&#40;fieldName&#41;&#41; &#123;\n                     deserializedValue.setClockSpeedInHertz&#40;reader.getDouble&#40;&#41;&#41;;\n                 &#125; else if &#40;&quot;manufacturer&quot;.equals&#40;fieldName&#41;&#41; &#123;\n                     deserializedValue.setManufacturer&#40;reader.getString&#40;&#41;&#41;;\n                 &#125; else if &#40;&quot;errorCorrecting&quot;.equals&#40;fieldName&#41;&#41; &#123;\n                     deserializedValue.setErrorCorrecting&#40;reader.getBoolean&#40;&#41;&#41;;\n                 &#125; else &#123;\n                     &#47;&#47; Fallthrough case of an unknown property. In this instance the value is skipped, if it's a JSON\n                     &#47;&#47; array or object the reader will progress until it terminated. This could also throw an exception\n                     &#47;&#47; if unknown properties should cause that or be read into an additional properties Map for further\n                     &#47;&#47; usage.\n                     reader.skipChildren&#40;&#41;;\n                 &#125;\n             &#125;\n\n             return deserializedValue;\n         &#125;&#41;;\n     &#125;\n &#125;\n </pre>\n <!-- end com.azure.json.JsonSerializable.ComputerMemory -->\n\n <p><strong>Sample: All JsonSerializable fields are required</strong></p>\n\n <!-- src_embed com.azure.json.JsonSerializable.ComputerProcessor -->\n <pre>\n\n &#47;**\n  * Implementation of JsonSerializable where all properties are set in the constructor.\n  *&#47;\n public class ComputerProcessor implements JsonSerializable&lt;ComputerProcessor&gt; &#123;\n     private final int cores;\n     private final int threads;\n     private final String manufacturer;\n     private final double clockSpeedInHertz;\n     private final OffsetDateTime releaseDate;\n\n     &#47;**\n      * Creates an instance of ComputerProcessor.\n      *\n      * &#64;param cores The number of physical cores.\n      * &#64;param threads The number of virtual threads.\n      * &#64;param manufacturer The manufacturer of the processor.\n      * &#64;param clockSpeedInHertz The clock speed, in hertz, of the processor.\n      * &#64;param releaseDate The release date of the processor, if unreleased this is null.\n      *&#47;\n     public ComputerProcessor&#40;int cores, int threads, String manufacturer, double clockSpeedInHertz,\n         OffsetDateTime releaseDate&#41; &#123;\n         &#47;&#47; This constructor could be made package-private or private as 'fromJson' has access to internal APIs.\n         this.cores = cores;\n         this.threads = threads;\n         this.manufacturer = manufacturer;\n         this.clockSpeedInHertz = clockSpeedInHertz;\n         this.releaseDate = releaseDate;\n     &#125;\n\n     &#64;Override\n     public JsonWriter toJson&#40;JsonWriter jsonWriter&#41; throws IOException &#123;\n         return jsonWriter.writeStartObject&#40;&#41;\n             .writeIntField&#40;&quot;cores&quot;, cores&#41;\n             .writeIntField&#40;&quot;threads&quot;, threads&#41;\n             .writeStringField&#40;&quot;manufacturer&quot;, manufacturer&#41;\n             .writeDoubleField&#40;&quot;clockSpeedInHertz&quot;, clockSpeedInHertz&#41;\n             &#47;&#47; 'writeNullableField' will always write a field, even if the value is null.\n             .writeNullableField&#40;&quot;releaseDate&quot;, releaseDate, &#40;writer, value&#41; -&gt; writer.writeString&#40;value.toString&#40;&#41;&#41;&#41;\n             .writeEndObject&#40;&#41;\n             &#47;&#47; In this case 'toJson' eagerly flushes the JsonWriter.\n             &#47;&#47; Flushing too often may result in performance penalties.\n             .flush&#40;&#41;;\n     &#125;\n\n     &#47;**\n      * Reads an instance of ComputerProcessor from the JsonReader.\n      *\n      * &#64;param jsonReader The JsonReader being read.\n      * &#64;return An instance of ComputerProcessor if the JsonReader was pointing to an instance of it, or null if it was\n      * pointing to JSON null.\n      * &#64;throws IOException If an error occurs while reading the ComputerProcessor.\n      * &#64;throws IllegalStateException If any of the required properties to create ComputerProcessor aren't found.\n      *&#47;\n     public static ComputerProcessor fromJson&#40;JsonReader jsonReader&#41; throws IOException &#123;\n         return jsonReader.readObject&#40;reader -&gt; &#123;\n             &#47;&#47; Local variables to keep track of what values have been found.\n             &#47;&#47; Some properties have a corresponding 'boolean found&lt;Name&gt;' to track if a JSON property with that name\n             &#47;&#47; was found. If the value wasn't found an exception will be thrown at the end of reading the object.\n             int cores = 0;\n             boolean foundCores = false;\n             int threads = 0;\n             boolean foundThreads = false;\n             String manufacturer = null;\n             boolean foundManufacturer = false;\n             double clockSpeedInHertz = 0.0D;\n             boolean foundClockSpeedInHertz = false;\n             OffsetDateTime releaseDate = null;\n\n             while &#40;reader.nextToken&#40;&#41; != JsonToken.END_OBJECT&#41; &#123;\n                 String fieldName = reader.getFieldName&#40;&#41;;\n                 reader.nextToken&#40;&#41;;\n\n                 &#47;&#47; Example of case-insensitive names.\n                 if &#40;&quot;cores&quot;.equalsIgnoreCase&#40;fieldName&#41;&#41; &#123;\n                     cores = reader.getInt&#40;&#41;;\n                     foundCores = true;\n                 &#125; else if &#40;&quot;threads&quot;.equalsIgnoreCase&#40;fieldName&#41;&#41; &#123;\n                     threads = reader.getInt&#40;&#41;;\n                     foundThreads = true;\n                 &#125; else if &#40;&quot;manufacturer&quot;.equalsIgnoreCase&#40;fieldName&#41;&#41; &#123;\n                     manufacturer = reader.getString&#40;&#41;;\n                     foundManufacturer = true;\n                 &#125; else if &#40;&quot;clockSpeedInHertz&quot;.equalsIgnoreCase&#40;fieldName&#41;&#41; &#123;\n                     clockSpeedInHertz = reader.getDouble&#40;&#41;;\n                     foundClockSpeedInHertz = true;\n                 &#125; else if &#40;&quot;releaseDate&quot;.equalsIgnoreCase&#40;fieldName&#41;&#41; &#123;\n                     &#47;&#47; For nullable primitives 'getNullable' must be used as it will return null if the current token\n                     &#47;&#47; is JSON null or pass the reader to the non-null callback method for reading, in this case for\n                     &#47;&#47; OffsetDateTime it uses 'getString' to call 'OffsetDateTime.parse'.\n                     releaseDate = reader.getNullable&#40;nonNullReader -&gt; OffsetDateTime.parse&#40;nonNullReader.getString&#40;&#41;&#41;&#41;;\n                 &#125; else &#123;\n                     reader.skipChildren&#40;&#41;;\n                 &#125;\n             &#125;\n\n             &#47;&#47; Check that all required fields were found.\n             if &#40;foundCores &amp;&amp; foundThreads &amp;&amp; foundManufacturer &amp;&amp; foundClockSpeedInHertz&#41; &#123;\n                 return new ComputerProcessor&#40;cores, threads, manufacturer, clockSpeedInHertz, releaseDate&#41;;\n             &#125;\n\n             &#47;&#47; If required fields were missing throw an exception.\n             throw new IOException&#40;&quot;Missing one, or more, required fields. Required fields are 'cores', 'threads', &quot;\n                 + &quot;'manufacturer', and 'clockSpeedInHertz'.&quot;&#41;;\n         &#125;&#41;;\n     &#125;\n &#125;\n </pre>\n <!-- end com.azure.json.JsonSerializable.ComputerProcessor -->\n\n <p><strong>Sample: JsonSerializable contains required and optional fields</strong></p>\n\n <!-- src_embed com.azure.json.JsonSerializable.VmStatistics -->\n <pre>\n\n &#47;**\n  * Implementation of JsonSerializable where some properties are set in the constructor and some properties are set using\n  * fluent methods.\n  *&#47;\n public class VmStatistics implements JsonSerializable&lt;VmStatistics&gt; &#123;\n     private final String vmSize;\n     private final ComputerProcessor processor;\n     private final ComputerMemory memory;\n     private final boolean acceleratedNetwork;\n     private Map&lt;String, Object&gt; additionalProperties;\n\n     &#47;**\n      * Creates an instance VmStatistics.\n      *\n      * &#64;param vmSize The size, or name, of the VM type.\n      * &#64;param processor The processor of the VM.\n      * &#64;param memory The memory of the VM.\n      * &#64;param acceleratedNetwork Whether the VM has accelerated networking.\n      *&#47;\n     public VmStatistics&#40;String vmSize, ComputerProcessor processor, ComputerMemory memory, boolean acceleratedNetwork&#41; &#123;\n         this.vmSize = vmSize;\n         this.processor = processor;\n         this.memory = memory;\n         this.acceleratedNetwork = acceleratedNetwork;\n     &#125;\n\n     &#47;**\n      * Sets additional properties about the VM.\n      *\n      * &#64;param additionalProperties Additional properties of the VM.\n      * &#64;return The update VmStatistics\n      *&#47;\n     public VmStatistics setAdditionalProperties&#40;Map&lt;String, Object&gt; additionalProperties&#41; &#123;\n         this.additionalProperties = additionalProperties;\n         return this;\n     &#125;\n\n     &#64;Override\n     public JsonWriter toJson&#40;JsonWriter jsonWriter&#41; throws IOException &#123;\n         jsonWriter.writeStartObject&#40;&#41;\n             .writeStringField&#40;&quot;VMSize&quot;, vmSize&#41;\n             .writeJsonField&#40;&quot;Processor&quot;, processor&#41;\n             .writeJsonField&#40;&quot;Memory&quot;, memory&#41;\n             .writeBooleanField&#40;&quot;AcceleratedNetwork&quot;, acceleratedNetwork&#41;;\n\n         &#47;&#47; Include additional properties in JSON serialization.\n         if &#40;additionalProperties != null&#41; &#123;\n             for &#40;Map.Entry&lt;String, Object&gt; additionalProperty : additionalProperties.entrySet&#40;&#41;&#41; &#123;\n                 jsonWriter.writeUntypedField&#40;additionalProperty.getKey&#40;&#41;, additionalProperty.getValue&#40;&#41;&#41;;\n             &#125;\n         &#125;\n\n         return jsonWriter.writeEndObject&#40;&#41;;\n     &#125;\n\n     &#47;**\n      * Reads an instance of VmStatistics from the JsonReader.\n      *\n      * &#64;param jsonReader The JsonReader being read.\n      * &#64;return An instance of VmStatistics if the JsonReader was pointing to an instance of it, or null if it was\n      * pointing to JSON null.\n      * &#64;throws IOException If an error occurs while reading the VmStatistics.\n      * &#64;throws IllegalStateException If any of the required properties to create VmStatistics aren't found.\n      *&#47;\n     public static VmStatistics fromJson&#40;JsonReader jsonReader&#41; throws IOException &#123;\n         return jsonReader.readObject&#40;reader -&gt; &#123;\n             String vmSize = null;\n             boolean foundVmSize = false;\n             ComputerProcessor processor = null;\n             boolean foundProcessor = false;\n             ComputerMemory memory = null;\n             boolean foundMemory = false;\n             boolean acceleratedNetwork = false;\n             boolean foundAcceleratedNetwork = false;\n             Map&lt;String, Object&gt; additionalProperties = null;\n\n             while &#40;reader.nextToken&#40;&#41; != JsonToken.END_OBJECT&#41; &#123;\n                 String fieldName = reader.getFieldName&#40;&#41;;\n                 reader.nextToken&#40;&#41;;\n\n                 &#47;&#47; Example of case-insensitive names and where serialization named don't match field names.\n                 if &#40;&quot;VMSize&quot;.equalsIgnoreCase&#40;fieldName&#41;&#41; &#123;\n                     vmSize = reader.getString&#40;&#41;;\n                     foundVmSize = true;\n                 &#125; else if &#40;&quot;Processor&quot;.equalsIgnoreCase&#40;fieldName&#41;&#41; &#123;\n                     &#47;&#47; Pass the JsonReader to another JsonSerializable to read the inner object.\n                     processor = ComputerProcessor.fromJson&#40;reader&#41;;\n                     foundProcessor = true;\n                 &#125; else if &#40;&quot;Memory&quot;.equalsIgnoreCase&#40;fieldName&#41;&#41; &#123;\n                     memory = ComputerMemory.fromJson&#40;reader&#41;;\n                     foundMemory = true;\n                 &#125; else if &#40;&quot;AcceleratedNetwork&quot;.equalsIgnoreCase&#40;fieldName&#41;&#41; &#123;\n                     acceleratedNetwork = reader.getBoolean&#40;&#41;;\n                     foundAcceleratedNetwork = true;\n                 &#125; else &#123;\n                     &#47;&#47; Fallthrough case but the JSON property is maintained.\n                     if &#40;additionalProperties == null&#41; &#123;\n                         &#47;&#47; Maintain ordering of additional properties using a LinkedHashMap.\n                         additionalProperties = new LinkedHashMap&lt;&gt;&#40;&#41;;\n                     &#125;\n\n                     &#47;&#47; Additional properties are unknown types, use 'readUntyped'.\n                     additionalProperties.put&#40;fieldName, reader.readUntyped&#40;&#41;&#41;;\n                 &#125;\n             &#125;\n\n             &#47;&#47; Check that all required fields were found.\n             if &#40;foundVmSize &amp;&amp; foundProcessor &amp;&amp; foundMemory &amp;&amp; foundAcceleratedNetwork&#41; &#123;\n                 return new VmStatistics&#40;vmSize, processor, memory, acceleratedNetwork&#41;\n                     .setAdditionalProperties&#40;additionalProperties&#41;;\n             &#125;\n\n             &#47;&#47; If required fields were missing throw an exception.\n             throw new IOException&#40;&quot;Missing one, or more, required fields. Required fields are 'VMSize', 'Processor',&quot;\n                 + &quot;'Memory', and 'AcceleratedNetwork'.&quot;&#41;;\n         &#125;&#41;;\n     &#125;\n &#125;\n </pre>\n <!-- end com.azure.json.JsonSerializable.VmStatistics -->\n\n <h2>Reading and Writing JSON</h2>\n\n <p><xref uid=\"com.azure.json.JsonReader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.json.JsonReader\"></xref> contains APIs and logic for parsing JSON. The type is abstract and consists of\n both abstract methods for an implementation to implement as well as final method for commonly shared logic that\n builds on the abstract methods. Similarly, <xref uid=\"com.azure.json.JsonWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.json.JsonWriter\"></xref> contains APIs and logic for writing\n JSON, and as with <xref uid=\"com.azure.json.JsonReader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.json.JsonReader\"></xref>, it contains both abstract methods for implementations to\n implement and final methods for commonly shared logic that builds on the abstract methods. Both types implement\n <xref uid=\"java.io.Closeable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.Closeable\"></xref> and should be used in try-with-resources blocks to ensure any resources created by\n the implementations are cleaned up once JSON reading or writing is complete. Both types are used by the\n <xref uid=\"com.azure.json.JsonProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.json.JsonProvider\"></xref> service provider interface which is used to create instances of\n <xref uid=\"com.azure.json.JsonReader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.json.JsonReader\"></xref> and <xref uid=\"com.azure.json.JsonWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.json.JsonWriter\"></xref> implementations.</p>\n\n\n <p><xref uid=\"com.azure.json.JsonProviders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.json.JsonProviders\"></xref> is a utility class that handles finding <xref uid=\"com.azure.json.JsonProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.json.JsonProvider\"></xref>\n implementations on the classpath and should be the default way to create instances of\n <xref uid=\"com.azure.json.JsonReader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.json.JsonReader\"></xref> and <xref uid=\"com.azure.json.JsonWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.json.JsonWriter\"></xref>. As mentioned earlier, the Azure JSON\n package provides a default implementation allowing for the library to be used stand-alone.\n <xref uid=\"com.azure.json.JsonReader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.json.JsonReader\"></xref> can be created from <code>byte[]</code>, <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.String\"></xref>,\n <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.InputStream\"></xref>, and <xref uid=\"java.io.Reader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.Reader\"></xref> sources, <xref uid=\"com.azure.json.JsonWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.json.JsonWriter\"></xref> can be created\n from <xref uid=\"java.io.OutputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.OutputStream\"></xref> and <xref uid=\"java.io.Writer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.Writer\"></xref> sources. No matter the source the functionality will be\n the same, the options exist to provide the best convenience and performance by reducing type translations.\n\n <p><strong>Sample: Reading a JSON byte[]</strong></p>\n\n <!-- src_embed com.azure.json.JsonReader.readJsonByteArray -->\n <pre>\n &#47;&#47; Sample uses String.getBytes as a convenience to show the JSON string in a human-readable form.\n byte[] json = &#40;&quot;&#123;&#92;&quot;memoryInBytes&#92;&quot;:10000000000,&#92;&quot;clockSpeedInHertz&#92;&quot;:4800000000,&quot;\n     + &quot;&#92;&quot;manufacturer&#92;&quot;:&#92;&quot;Memory Corp&#92;&quot;,&#92;&quot;errorCorrecting&#92;&quot;:true&#125;&quot;&#41;.getBytes&#40;StandardCharsets.UTF_8&#41;;\n\n try &#40;JsonReader jsonReader = JsonProviders.createReader&#40;json&#41;&#41; &#123;\n     return ComputerMemory.fromJson&#40;jsonReader&#41;;\n &#125;\n </pre>\n <!-- end com.azure.json.JsonReader.readJsonByteArray -->\n\n <p><strong>Sample: Reading a JSON String</strong></p>\n\n <!-- src_embed com.azure.json.JsonReader.readJsonString -->\n <pre>\n String json = &quot;&#123;&#92;&quot;cores&#92;&quot;:16,&#92;&quot;threads&#92;&quot;:32,&#92;&quot;manufacturer&#92;&quot;:&#92;&quot;Processor Corp&#92;&quot;,&quot;\n     + &quot;&#92;&quot;clockSpeedInHertz&#92;&quot;:5000000000,&#92;&quot;releaseDate&#92;&quot;:null&#125;&quot;;\n\n try &#40;JsonReader jsonReader = JsonProviders.createReader&#40;json&#41;&#41; &#123;\n     return ComputerProcessor.fromJson&#40;jsonReader&#41;;\n &#125;\n </pre>\n <!-- end com.azure.json.JsonReader.readJsonString -->\n\n <p><strong>Sample: Reading a JSON InputStream</strong></p>\n\n <!-- src_embed com.azure.json.JsonReader.readJsonInputStream -->\n <pre>\n &#47;&#47; Sample uses String.getBytes as a convenience to show the JSON string in a human-readable form.\n InputStream json = new ByteArrayInputStream&#40;&#40;&quot;&#123;&#92;&quot;VMSize&#92;&quot;:&#92;&quot;large&#92;&quot;,&#92;&quot;Processor&#92;&quot;:&#123;&#92;&quot;cores&#92;&quot;:8,&quot;\n     + &quot;&#92;&quot;threads&#92;&quot;16&#92;&quot;,&#92;&quot;manufacturer&#92;&quot;:&#92;&quot;Processor Corp&#92;&quot;,&#92;&quot;clockSpeedInHertz&#92;&quot;:4000000000,&quot;\n     + &quot;&#92;&quot;releaseDate&#92;&quot;:&#92;&quot;2023-01-01&#92;&quot;&#125;,&#92;&quot;Memory&#92;&quot;:&#123;&#92;&quot;memoryInBytes&#92;&quot;:10000000000,&quot;\n     + &quot;&#92;&quot;clockSpeedInHertz&#92;&quot;:4800000000,&#92;&quot;manufacturer&#92;&quot;:&#92;&quot;Memory Corp&#92;&quot;,&#92;&quot;errorCorrecting&#92;&quot;:true&#125;,&quot;\n     + &quot;&#92;&quot;AcceleratedNetwork&#92;&quot;:true,&#92;&quot;CloudProvider&#92;&quot;:&#92;&quot;Azure&#92;&quot;,&#92;&quot;Available&#92;&quot;:true&#125;&quot;&#41;\n     .getBytes&#40;StandardCharsets.UTF_8&#41;&#41;;\n\n try &#40;JsonReader jsonReader = JsonProviders.createReader&#40;json&#41;&#41; &#123;\n     return VmStatistics.fromJson&#40;jsonReader&#41;;\n &#125;\n </pre>\n <!-- end com.azure.json.JsonReader.readJsonInputStream -->\n\n <p><strong>Sample: Reading a JSON Reader</strong></p>\n\n <!-- src_embed com.azure.json.JsonReader.readJsonReader -->\n <pre>\n Reader json = new StringReader&#40;&quot;&#123;&#92;&quot;VMSize&#92;&quot;:&#92;&quot;large&#92;&quot;,&#92;&quot;Processor&#92;&quot;:&#123;&#92;&quot;cores&#92;&quot;:8,&#92;&quot;threads&#92;&quot;16&#92;&quot;,&quot;\n     + &quot;&#92;&quot;manufacturer&#92;&quot;:&#92;&quot;Processor Corp&#92;&quot;,&#92;&quot;clockSpeedInHertz&#92;&quot;:4000000000,&#92;&quot;releaseDate&#92;&quot;:&#92;&quot;2023-01-01&#92;&quot;&#125;,&quot;\n     + &quot;&#92;&quot;Memory&#92;&quot;:&#123;&#92;&quot;memoryInBytes&#92;&quot;:10000000000,&#92;&quot;clockSpeedInHertz&#92;&quot;:4800000000,&quot;\n     + &quot;&#92;&quot;manufacturer&#92;&quot;:&#92;&quot;Memory Corp&#92;&quot;,&#92;&quot;errorCorrecting&#92;&quot;:true&#125;,&#92;&quot;AcceleratedNetwork&#92;&quot;:true,&quot;\n     + &quot;&#92;&quot;CloudProvider&#92;&quot;:&#92;&quot;Azure&#92;&quot;,&#92;&quot;Available&#92;&quot;:true&#125;&quot;&#41;;\n\n try &#40;JsonReader jsonReader = JsonProviders.createReader&#40;json&#41;&#41; &#123;\n     return VmStatistics.fromJson&#40;jsonReader&#41;;\n &#125;\n </pre>\n <!-- end com.azure.json.JsonReader.readJsonReader -->\n\n <p><strong>Sample: Writing to a JSON OutputStream</strong></p>\n\n <!-- src_embed com.azure.json.JsonWriter.writeJsonOutputStream -->\n <pre>\n Map&lt;String, Object&gt; additionalVmProperties = new LinkedHashMap&lt;&gt;&#40;&#41;;\n additionalVmProperties.put&#40;&quot;CloudProvider&quot;, &quot;Azure&quot;&#41;;\n additionalVmProperties.put&#40;&quot;Available&quot;, true&#41;;\n\n VmStatistics vmStatistics = new VmStatistics&#40;&quot;large&quot;,\n     new ComputerProcessor&#40;8, 16, &quot;Processor Corp&quot;, 4000000000D, OffsetDateTime.parse&#40;&quot;2023-01-01&quot;&#41;&#41;,\n     new ComputerMemory&#40;&#41;\n         .setMemoryInBytes&#40;10000000000L&#41;\n         .setClockSpeedInHertz&#40;4800000000D&#41;\n         .setManufacturer&#40;&quot;Memory Corp&quot;&#41;\n         .setErrorCorrecting&#40;true&#41;,\n     true&#41;\n     .setAdditionalProperties&#40;additionalVmProperties&#41;;\n\n ByteArrayOutputStream json = new ByteArrayOutputStream&#40;&#41;;\n try &#40;JsonWriter jsonWriter = JsonProviders.createWriter&#40;json&#41;&#41; &#123;\n     &#47;&#47; JsonWriter automatically flushes on close.\n     vmStatistics.toJson&#40;jsonWriter&#41;;\n &#125;\n\n &#47;&#47; &#123;&quot;VMSize&quot;:&quot;large&quot;,&quot;Processor&quot;:&#123;&quot;cores&quot;:8,&quot;threads&quot;:16,&quot;manufacturer&quot;:&quot;Processor Corp&quot;,\n &#47;&#47;   &quot;clockSpeedInHertz&quot;:4000000000.0,&quot;releaseDate&quot;:&quot;2023-01-01&quot;&#125;,&quot;Memory&quot;:&#123;&quot;memoryInBytes&quot;:10000000000,\n &#47;&#47;   &quot;clockSpeedInHertz&quot;:4800000000.0,&quot;manufacturer&quot;:&quot;Memory Corp&quot;,&quot;errorCorrecting&quot;:true&#125;,\n &#47;&#47;   &quot;AcceleratedNetwork&quot;:true,&quot;CloudProvider&quot;:&quot;Azure&quot;,&quot;Available&quot;:true&#125;\n System.out.println&#40;json&#41;;\n </pre>\n <!-- end com.azure.json.JsonWriter.writeJsonOutputStream -->\n\n <p><strong>Sample: Writing to a JSON Writer</strong></p>\n\n <!-- src_embed com.azure.json.JsonWriter.writeJsonWriter -->\n <pre>\n Map&lt;String, Object&gt; additionalVmProperties = new LinkedHashMap&lt;&gt;&#40;&#41;;\n additionalVmProperties.put&#40;&quot;CloudProvider&quot;, &quot;Azure&quot;&#41;;\n additionalVmProperties.put&#40;&quot;Available&quot;, true&#41;;\n\n VmStatistics vmStatistics = new VmStatistics&#40;&quot;large&quot;,\n     new ComputerProcessor&#40;8, 16, &quot;Processor Corp&quot;, 4000000000D, OffsetDateTime.parse&#40;&quot;2023-01-01&quot;&#41;&#41;,\n     new ComputerMemory&#40;&#41;\n         .setMemoryInBytes&#40;10000000000L&#41;\n         .setClockSpeedInHertz&#40;4800000000D&#41;\n         .setManufacturer&#40;&quot;Memory Corp&quot;&#41;\n         .setErrorCorrecting&#40;true&#41;,\n     true&#41;\n     .setAdditionalProperties&#40;additionalVmProperties&#41;;\n\n Writer json = new StringWriter&#40;&#41;;\n try &#40;JsonWriter jsonWriter = JsonProviders.createWriter&#40;json&#41;&#41; &#123;\n     &#47;&#47; JsonWriter automatically flushes on close.\n     vmStatistics.toJson&#40;jsonWriter&#41;;\n &#125;\n\n &#47;&#47; &#123;&quot;VMSize&quot;:&quot;large&quot;,&quot;Processor&quot;:&#123;&quot;cores&quot;:8,&quot;threads&quot;:16,&quot;manufacturer&quot;:&quot;Processor Corp&quot;,\n &#47;&#47;   &quot;clockSpeedInHertz&quot;:4000000000.0,&quot;releaseDate&quot;:&quot;2023-01-01&quot;&#125;,&quot;Memory&quot;:&#123;&quot;memoryInBytes&quot;:10000000000,\n &#47;&#47;   &quot;clockSpeedInHertz&quot;:4800000000.0,&quot;manufacturer&quot;:&quot;Memory Corp&quot;,&quot;errorCorrecting&quot;:true&#125;,\n &#47;&#47;   &quot;AcceleratedNetwork&quot;:true,&quot;CloudProvider&quot;:&quot;Azure&quot;,&quot;Available&quot;:true&#125;\n System.out.println&#40;json&#41;;\n </pre>\n <!-- end com.azure.json.JsonWriter.writeJsonWriter -->"
metadata: {}
package: "com.azure.json"
artifact: com.azure:azure-json:1.1.0
