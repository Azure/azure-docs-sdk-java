### YamlMime:JavaType
uid: "com.azure.storage.blob.specialized.PageBlobClient"
fullName: "com.azure.storage.blob.specialized.PageBlobClient"
name: "PageBlobClient"
nameWithType: "PageBlobClient"
summary: "Client to a page blob."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.storage.blob.specialized.BlobClientBase?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.storage.blob.specialized.BlobClientBase.abortCopyFromUrl(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.abortCopyFromUrlWithResponse(java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.beginCopy(com.azure.storage.blob.options.BlobBeginCopyOptions)"
- "com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.time.Duration)"
- "com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)"
- "com.azure.storage.blob.specialized.BlobClientBase.copyFromUrl(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.copyFromUrlWithResponse(com.azure.storage.blob.options.BlobCopyFromUrlOptions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.createSnapshot()"
- "com.azure.storage.blob.specialized.BlobClientBase.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.delete()"
- "com.azure.storage.blob.specialized.BlobClientBase.deleteIfExists()"
- "com.azure.storage.blob.specialized.BlobClientBase.deleteIfExistsWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.deleteImmutabilityPolicy()"
- "com.azure.storage.blob.specialized.BlobClientBase.deleteImmutabilityPolicyWithResponse(java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.deleteWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.download(java.io.OutputStream)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadContent()"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadContentWithResponse(com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadStream(java.io.OutputStream)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadStreamWithResponse(java.io.OutputStream,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String,boolean)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(com.azure.storage.blob.options.BlobDownloadToFileOptions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.downloadWithResponse(java.io.OutputStream,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.exists()"
- "com.azure.storage.blob.specialized.BlobClientBase.existsWithResponse(java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)"
- "com.azure.storage.blob.specialized.BlobClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)"
- "com.azure.storage.blob.specialized.BlobClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey,java.lang.String,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.getAccountInfo()"
- "com.azure.storage.blob.specialized.BlobClientBase.getAccountInfoWithResponse(java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.getAccountName()"
- "com.azure.storage.blob.specialized.BlobClientBase.getAccountUrl()"
- "com.azure.storage.blob.specialized.BlobClientBase.getBlobName()"
- "com.azure.storage.blob.specialized.BlobClientBase.getBlobUrl()"
- "com.azure.storage.blob.specialized.BlobClientBase.getContainerClient()"
- "com.azure.storage.blob.specialized.BlobClientBase.getContainerName()"
- "com.azure.storage.blob.specialized.BlobClientBase.getCustomerProvidedKey()"
- "com.azure.storage.blob.specialized.BlobClientBase.getCustomerProvidedKeyClient(com.azure.storage.blob.models.CustomerProvidedKey)"
- "com.azure.storage.blob.specialized.BlobClientBase.getEncryptionScopeClient(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.getHttpPipeline()"
- "com.azure.storage.blob.specialized.BlobClientBase.getProperties()"
- "com.azure.storage.blob.specialized.BlobClientBase.getPropertiesWithResponse(com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.getServiceVersion()"
- "com.azure.storage.blob.specialized.BlobClientBase.getSnapshotClient(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.getSnapshotId()"
- "com.azure.storage.blob.specialized.BlobClientBase.getTags()"
- "com.azure.storage.blob.specialized.BlobClientBase.getTagsWithResponse(com.azure.storage.blob.options.BlobGetTagsOptions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.getVersionClient(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.getVersionId()"
- "com.azure.storage.blob.specialized.BlobClientBase.isSnapshot()"
- "com.azure.storage.blob.specialized.BlobClientBase.openInputStream()"
- "com.azure.storage.blob.specialized.BlobClientBase.openInputStream(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.BlobClientBase.openInputStream(com.azure.storage.blob.options.BlobInputStreamOptions)"
- "com.azure.storage.blob.specialized.BlobClientBase.openInputStream(com.azure.storage.blob.options.BlobInputStreamOptions,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.openQueryInputStream(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.openQueryInputStreamWithResponse(com.azure.storage.blob.options.BlobQueryOptions)"
- "com.azure.storage.blob.specialized.BlobClientBase.query(java.io.OutputStream,java.lang.String)"
- "com.azure.storage.blob.specialized.BlobClientBase.queryWithResponse(com.azure.storage.blob.options.BlobQueryOptions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setAccessTier(com.azure.storage.blob.models.AccessTier)"
- "com.azure.storage.blob.specialized.BlobClientBase.setAccessTierWithResponse(com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.lang.String,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setAccessTierWithResponse(com.azure.storage.blob.options.BlobSetAccessTierOptions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setHttpHeaders(com.azure.storage.blob.models.BlobHttpHeaders)"
- "com.azure.storage.blob.specialized.BlobClientBase.setHttpHeadersWithResponse(com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setImmutabilityPolicy(com.azure.storage.blob.models.BlobImmutabilityPolicy)"
- "com.azure.storage.blob.specialized.BlobClientBase.setImmutabilityPolicyWithResponse(com.azure.storage.blob.models.BlobImmutabilityPolicy,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setLegalHold(boolean)"
- "com.azure.storage.blob.specialized.BlobClientBase.setLegalHoldWithResponse(boolean,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
- "com.azure.storage.blob.specialized.BlobClientBase.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.setTags(java.util.Map<java.lang.String,java.lang.String>)"
- "com.azure.storage.blob.specialized.BlobClientBase.setTagsWithResponse(com.azure.storage.blob.options.BlobSetTagsOptions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.blob.specialized.BlobClientBase.undelete()"
- "com.azure.storage.blob.specialized.BlobClientBase.undeleteWithResponse(java.time.Duration,com.azure.core.util.Context)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class PageBlobClient extends BlobClientBase"
fields:
- uid: "com.azure.storage.blob.specialized.PageBlobClient.MAX_PUT_PAGES_BYTES"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.MAX_PUT_PAGES_BYTES"
  name: "MAX_PUT_PAGES_BYTES"
  nameWithType: "PageBlobClient.MAX_PUT_PAGES_BYTES"
  summary: "Indicates the maximum number of bytes that may be sent in a call to put<wbr>Page."
  modifiers:
  - "static"
  - "final"
  field:
    value: "4194304"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final int MAX_PUT_PAGES_BYTES"
  desc: "Indicates the maximum number of bytes that may be sent in a call to putPage."
- uid: "com.azure.storage.blob.specialized.PageBlobClient.PAGE_BYTES"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.PAGE_BYTES"
  name: "PAGE_BYTES"
  nameWithType: "PageBlobClient.PAGE_BYTES"
  summary: "Indicates the number of bytes in a page."
  modifiers:
  - "static"
  - "final"
  field:
    value: "512"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final int PAGE_BYTES"
  desc: "Indicates the number of bytes in a page."
methods:
- uid: "com.azure.storage.blob.specialized.PageBlobClient.clearPages(com.azure.storage.blob.models.PageRange)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.clearPages(PageRange pageRange)"
  name: "clearPages(PageRange pageRange)"
  nameWithType: "PageBlobClient.clearPages(PageRange pageRange)"
  summary: "Frees the specified pages from the page blob."
  parameters:
  - description: "A <xref uid=\"com.azure.storage.blob.models.PageRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageRange\"></xref> object. Given that pages must be aligned with 512-byte boundaries, the start\n offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte ranges\n are 0-511, 512-1023, etc."
    name: "pageRange"
    type: "<xref href=\"com.azure.storage.blob.models.PageRange?alt=com.azure.storage.blob.models.PageRange&text=PageRange\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PageBlobItem clearPages(PageRange pageRange)"
  desc: "Frees the specified pages from the page blob. The size of the range must be a multiple of 512. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n\n PageBlobItem pageBlob = client.clearPages(pageRange);\n\n System.out.printf(\"Cleared page blob with sequence number %s%n\", pageBlob.getBlobSequenceNumber());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  returns:
    description: "The information of the cleared pages."
    type: "<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.clearPagesWithResponse(com.azure.storage.blob.models.PageRange,com.azure.storage.blob.models.PageBlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.clearPagesWithResponse(PageRange pageRange, PageBlobRequestConditions pageBlobRequestConditions, Duration timeout, Context context)"
  name: "clearPagesWithResponse(PageRange pageRange, PageBlobRequestConditions pageBlobRequestConditions, Duration timeout, Context context)"
  nameWithType: "PageBlobClient.clearPagesWithResponse(PageRange pageRange, PageBlobRequestConditions pageBlobRequestConditions, Duration timeout, Context context)"
  summary: "Frees the specified pages from the page blob."
  parameters:
  - description: "A <xref uid=\"com.azure.storage.blob.models.PageRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageRange\"></xref> object. Given that pages must be aligned with 512-byte boundaries, the start\n offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte ranges\n are 0-511, 512-1023, etc."
    name: "pageRange"
    type: "<xref href=\"com.azure.storage.blob.models.PageRange?alt=com.azure.storage.blob.models.PageRange&text=PageRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.PageBlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobRequestConditions\"></xref>"
    name: "pageBlobRequestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.PageBlobRequestConditions?alt=com.azure.storage.blob.models.PageBlobRequestConditions&text=PageBlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<PageBlobItem> clearPagesWithResponse(PageRange pageRange, PageBlobRequestConditions pageBlobRequestConditions, Duration timeout, Context context)"
  desc: "Frees the specified pages from the page blob. The size of the range must be a multiple of 512. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n PageBlobRequestConditions pageBlobRequestConditions = new PageBlobRequestConditions().setLeaseId(leaseId);\n Context context = new Context(key, value);\n\n PageBlobItem pageBlob = client\n     .clearPagesWithResponse(pageRange, pageBlobRequestConditions, timeout, context).getValue();\n\n System.out.printf(\"Cleared page blob with sequence number %s%n\", pageBlob.getBlobSequenceNumber());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  returns:
    description: "The information of the cleared pages."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.copyIncremental(java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.copyIncremental(String source, String snapshot)"
  name: "copyIncremental(String source, String snapshot)"
  nameWithType: "PageBlobClient.copyIncremental(String source, String snapshot)"
  summary: "Begins an operation to start an incremental copy from one page blob's snapshot to this page blob."
  parameters:
  - description: "The source page blob."
    name: "source"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The snapshot on the copy source."
    name: "snapshot"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CopyStatusType copyIncremental(String source, String snapshot)"
  desc: "Begins an operation to start an incremental copy from one page blob's snapshot to this page blob. The snapshot is copied such that only the differential changes between the previously copied snapshot are transferred to the destination. The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual. For more information, see the Azure Docs [here][] and [here][here 1].\n\n**Code Samples**\n\n```java\nfinal String snapshot = \"copy snapshot\";\n CopyStatusType statusType = client.copyIncremental(url, snapshot);\n\n switch (statusType) {\n     case SUCCESS:\n         System.out.println(\"Page blob copied successfully\");\n         break;\n     case FAILED:\n         System.out.println(\"Page blob copied failed\");\n         break;\n     case ABORTED:\n         System.out.println(\"Page blob copied aborted\");\n         break;\n     case PENDING:\n         System.out.println(\"Page blob copied pending\");\n         break;\n     default:\n         break;\n }\n```\n\n\n[here]: https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob\n[here 1]: https://docs.microsoft.com/azure/virtual-machines/windows/incremental-snapshots"
  returns:
    description: "The copy status."
    type: "<xref href=\"com.azure.storage.blob.models.CopyStatusType?alt=com.azure.storage.blob.models.CopyStatusType&text=CopyStatusType\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.copyIncrementalWithResponse(com.azure.storage.blob.options.PageBlobCopyIncrementalOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.copyIncrementalWithResponse(PageBlobCopyIncrementalOptions options, Duration timeout, Context context)"
  name: "copyIncrementalWithResponse(PageBlobCopyIncrementalOptions options, Duration timeout, Context context)"
  nameWithType: "PageBlobClient.copyIncrementalWithResponse(PageBlobCopyIncrementalOptions options, Duration timeout, Context context)"
  summary: "Begins an operation to start an incremental copy from one page blob's snapshot to this page blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.PageBlobCopyIncrementalOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobCopyIncrementalOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.PageBlobCopyIncrementalOptions?alt=com.azure.storage.blob.options.PageBlobCopyIncrementalOptions&text=PageBlobCopyIncrementalOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<CopyStatusType> copyIncrementalWithResponse(PageBlobCopyIncrementalOptions options, Duration timeout, Context context)"
  desc: "Begins an operation to start an incremental copy from one page blob's snapshot to this page blob. The snapshot is copied such that only the differential changes between the previously copied snapshot are transferred to the destination. The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual. For more information, see the Azure Docs [here][] and [here][here 1].\n\n**Code Samples**\n\n```java\nfinal String snapshot = \"copy snapshot\";\n PageBlobCopyIncrementalRequestConditions destinationRequestConditions = new PageBlobCopyIncrementalRequestConditions()\n     .setIfNoneMatch(\"snapshotMatch\");\n Context context = new Context(key, value);\n\n CopyStatusType statusType = client\n     .copyIncrementalWithResponse(new PageBlobCopyIncrementalOptions(url, snapshot)\n         .setRequestConditions(destinationRequestConditions), timeout, context).getValue();\n\n switch (statusType) {\n     case SUCCESS:\n         System.out.println(\"Page blob copied successfully\");\n         break;\n     case FAILED:\n         System.out.println(\"Page blob copied failed\");\n         break;\n     case ABORTED:\n         System.out.println(\"Page blob copied aborted\");\n         break;\n     case PENDING:\n         System.out.println(\"Page blob copied pending\");\n         break;\n     default:\n         break;\n }\n```\n\n\n[here]: https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob\n[here 1]: https://docs.microsoft.com/azure/virtual-machines/windows/incremental-snapshots"
  returns:
    description: "The copy status."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.CopyStatusType?alt=com.azure.storage.blob.models.CopyStatusType&text=CopyStatusType\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.copyIncrementalWithResponse(java.lang.String,java.lang.String,com.azure.core.http.RequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.copyIncrementalWithResponse(String source, String snapshot, RequestConditions modifiedRequestConditions, Duration timeout, Context context)"
  name: "copyIncrementalWithResponse(String source, String snapshot, RequestConditions modifiedRequestConditions, Duration timeout, Context context)"
  nameWithType: "PageBlobClient.copyIncrementalWithResponse(String source, String snapshot, RequestConditions modifiedRequestConditions, Duration timeout, Context context)"
  summary: "Begins an operation to start an incremental copy from one page blob's snapshot to this page blob."
  parameters:
  - description: "The source page blob."
    name: "source"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The snapshot on the copy source."
    name: "snapshot"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Standard HTTP Access conditions related to the modification of data. ETag and\n LastModifiedTime are used to construct conditions related to when the blob was changed relative to the given\n request. The request will fail if the specified condition is not satisfied."
    name: "modifiedRequestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<CopyStatusType> copyIncrementalWithResponse(String source, String snapshot, RequestConditions modifiedRequestConditions, Duration timeout, Context context)"
  desc: "Begins an operation to start an incremental copy from one page blob's snapshot to this page blob. The snapshot is copied such that only the differential changes between the previously copied snapshot are transferred to the destination. The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual. For more information, see the Azure Docs [here][] and [here][here 1].\n\n**Code Samples**\n\n```java\nfinal String snapshot = \"copy snapshot\";\n RequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfNoneMatch(\"snapshotMatch\");\n Context context = new Context(key, value);\n\n CopyStatusType statusType = client\n     .copyIncrementalWithResponse(url, snapshot, modifiedRequestConditions, timeout, context).getValue();\n\n switch (statusType) {\n     case SUCCESS:\n         System.out.println(\"Page blob copied successfully\");\n         break;\n     case FAILED:\n         System.out.println(\"Page blob copied failed\");\n         break;\n     case ABORTED:\n         System.out.println(\"Page blob copied aborted\");\n         break;\n     case PENDING:\n         System.out.println(\"Page blob copied pending\");\n         break;\n     default:\n         break;\n }\n```\n\n\n[here]: https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob\n[here 1]: https://docs.microsoft.com/azure/virtual-machines/windows/incremental-snapshots"
  returns:
    description: "The copy status."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.CopyStatusType?alt=com.azure.storage.blob.models.CopyStatusType&text=CopyStatusType\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.create(long)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.create(long size)"
  name: "create(long size)"
  nameWithType: "PageBlobClient.create(long size)"
  summary: "Creates a page blob of the specified length."
  parameters:
  - description: "Specifies the maximum size for the page blob, up to 8 TB. The page blob size must be aligned to a\n 512-byte boundary."
    name: "size"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PageBlobItem create(long size)"
  desc: "Creates a page blob of the specified length. By default this method will not overwrite an existing blob. Call PutPage to upload data data to a page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPageBlobItem pageBlob = client.create(size);\n System.out.printf(\"Created page blob with sequence number %s%n\", pageBlob.getBlobSequenceNumber());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob"
  returns:
    description: "The information of the created page blob."
    type: "<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.create(long,boolean)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.create(long size, boolean overwrite)"
  name: "create(long size, boolean overwrite)"
  nameWithType: "PageBlobClient.create(long size, boolean overwrite)"
  summary: "Creates a page blob of the specified length."
  parameters:
  - description: "Specifies the maximum size for the page blob, up to 8 TB. The page blob size must be aligned to a\n 512-byte boundary."
    name: "size"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether or not to overwrite, should data exist on the blob."
    name: "overwrite"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PageBlobItem create(long size, boolean overwrite)"
  desc: "Creates a page blob of the specified length. Call PutPage to upload data data to a page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nboolean overwrite = false; // Default value\n PageBlobItem pageBlob = client.create(size, overwrite);\n System.out.printf(\"Created page blob with sequence number %s%n\", pageBlob.getBlobSequenceNumber());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob"
  returns:
    description: "The information of the created page blob."
    type: "<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.createIfNotExists(long)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.createIfNotExists(long size)"
  name: "createIfNotExists(long size)"
  nameWithType: "PageBlobClient.createIfNotExists(long size)"
  summary: "Creates a page blob of the specified length if it does not exist."
  parameters:
  - description: "Specifies the maximum size for the page blob, up to 8 TB. The page blob size must be aligned to a\n 512-byte boundary."
    name: "size"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PageBlobItem createIfNotExists(long size)"
  desc: "Creates a page blob of the specified length if it does not exist. Call PutPage to upload data to a page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPageBlobItem pageBlob = client.createIfNotExists(size);\n System.out.printf(\"Created page blob with sequence number %s%n\", pageBlob.getBlobSequenceNumber());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob"
  returns:
    description: "<xref uid=\"com.azure.storage.blob.models.PageBlobItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobItem\"></xref> containing information of the created page blob."
    type: "<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.createIfNotExistsWithResponse(com.azure.storage.blob.options.PageBlobCreateOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.createIfNotExistsWithResponse(PageBlobCreateOptions options, Duration timeout, Context context)"
  name: "createIfNotExistsWithResponse(PageBlobCreateOptions options, Duration timeout, Context context)"
  nameWithType: "PageBlobClient.createIfNotExistsWithResponse(PageBlobCreateOptions options, Duration timeout, Context context)"
  summary: "Creates a page blob of the specified length if it does not exist."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.PageBlobCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.PageBlobCreateOptions?alt=com.azure.storage.blob.options.PageBlobCreateOptions&text=PageBlobCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<PageBlobItem> createIfNotExistsWithResponse(PageBlobCreateOptions options, Duration timeout, Context context)"
  desc: "Creates a page blob of the specified length if it does not exist. Call PutPage to upload data to a page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n Context context = new Context(key, value);\n\n Response<PageBlobItem> response = client.createIfNotExistsWithResponse(new PageBlobCreateOptions(size)\n     .setHeaders(headers).setMetadata(metadata).setTags(tags), timeout, context);\n\n if (response.getStatusCode() == 409) {\n     System.out.println(\"Already existed.\");\n } else {\n     System.out.printf(\"Create completed with status %d%n\", response.getStatusCode());\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob"
  returns:
    description: "A reactive <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> signaling completion, whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a\n <xref uid=\"com.azure.storage.blob.models.PageBlobItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobItem\"></xref> containing information about the page blob. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 201, a new\n page blob was successfully created. If status code is 409, a page blob already existed at this location."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.createWithResponse(com.azure.storage.blob.options.PageBlobCreateOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.createWithResponse(PageBlobCreateOptions options, Duration timeout, Context context)"
  name: "createWithResponse(PageBlobCreateOptions options, Duration timeout, Context context)"
  nameWithType: "PageBlobClient.createWithResponse(PageBlobCreateOptions options, Duration timeout, Context context)"
  summary: "Creates a page blob of the specified length."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.PageBlobCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.PageBlobCreateOptions?alt=com.azure.storage.blob.options.PageBlobCreateOptions&text=PageBlobCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<PageBlobItem> createWithResponse(PageBlobCreateOptions options, Duration timeout, Context context)"
  desc: "Creates a page blob of the specified length. Call PutPage to upload data data to a page blob. For more information, see the [Azure Docs][].\n\nTo avoid overwriting, pass \"\\*\" to <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions#setIfNoneMatch(String)\"></xref>.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n BlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n Context context = new Context(key, value);\n\n PageBlobItem pageBlob = client\n     .createWithResponse(new PageBlobCreateOptions(size).setSequenceNumber(sequenceNumber)\n             .setHeaders(headers).setMetadata(metadata).setTags(tags)\n             .setRequestConditions(blobRequestConditions), timeout,\n         context)\n     .getValue();\n\n System.out.printf(\"Created page blob with sequence number %s%n\", pageBlob.getBlobSequenceNumber());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob"
  returns:
    description: "The information of the created page blob."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.createWithResponse(long,java.lang.Long,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.createWithResponse(long size, Long sequenceNumber, BlobHttpHeaders headers, Map<String,String> metadata, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  name: "createWithResponse(long size, Long sequenceNumber, BlobHttpHeaders headers, Map<String,String> metadata, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "PageBlobClient.createWithResponse(long size, Long sequenceNumber, BlobHttpHeaders headers, Map<String,String> metadata, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "Creates a page blob of the specified length."
  parameters:
  - description: "Specifies the maximum size for the page blob, up to 8 TB. The page blob size must be aligned to a\n 512-byte boundary."
    name: "size"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "A user-controlled value that you can use to track requests. The value of the sequence\n number must be between 0 and 2^63 - 1.The default value is 0."
    name: "sequenceNumber"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobHttpHeaders\"></xref>"
    name: "headers"
    type: "<xref href=\"com.azure.storage.blob.models.BlobHttpHeaders?alt=com.azure.storage.blob.models.BlobHttpHeaders&text=BlobHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "Metadata to associate with the blob. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<PageBlobItem> createWithResponse(long size, Long sequenceNumber, BlobHttpHeaders headers, Map<String,String> metadata, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "Creates a page blob of the specified length. Call PutPage to upload data data to a page blob. For more information, see the [Azure Docs][].\n\nTo avoid overwriting, pass \"\\*\" to <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions#setIfNoneMatch(String)\"></xref>.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n BlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n Context context = new Context(key, value);\n\n PageBlobItem pageBlob = client\n     .createWithResponse(size, sequenceNumber, headers, metadata, blobRequestConditions, timeout, context)\n     .getValue();\n\n System.out.printf(\"Created page blob with sequence number %s%n\", pageBlob.getBlobSequenceNumber());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob"
  returns:
    description: "The information of the created page blob."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.getBlobOutputStream(com.azure.storage.blob.models.PageRange)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.getBlobOutputStream(PageRange pageRange)"
  name: "getBlobOutputStream(PageRange pageRange)"
  nameWithType: "PageBlobClient.getBlobOutputStream(PageRange pageRange)"
  summary: "Creates and opens an output stream to write data to the page blob."
  parameters:
  - description: "A <xref uid=\"com.azure.storage.blob.models.PageRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageRange\"></xref> object. Given that pages must be aligned with 512-byte boundaries, the start\n offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte ranges\n are 0-511, 512-1023, etc."
    name: "pageRange"
    type: "<xref href=\"com.azure.storage.blob.models.PageRange?alt=com.azure.storage.blob.models.PageRange&text=PageRange\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobOutputStream getBlobOutputStream(PageRange pageRange)"
  desc: "Creates and opens an output stream to write data to the page blob. If the blob already exists on the service, it will be overwritten."
  returns:
    description: "A <xref uid=\"com.azure.storage.blob.specialized.BlobOutputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobOutputStream\"></xref> object used to write data to the blob."
    type: "<xref href=\"com.azure.storage.blob.specialized.BlobOutputStream?alt=com.azure.storage.blob.specialized.BlobOutputStream&text=BlobOutputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.getBlobOutputStream(com.azure.storage.blob.models.PageRange,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.getBlobOutputStream(PageRange pageRange, BlobRequestConditions requestConditions)"
  name: "getBlobOutputStream(PageRange pageRange, BlobRequestConditions requestConditions)"
  nameWithType: "PageBlobClient.getBlobOutputStream(PageRange pageRange, BlobRequestConditions requestConditions)"
  summary: "Creates and opens an output stream to write data to the page blob."
  parameters:
  - description: "A <xref uid=\"com.azure.storage.blob.models.PageRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageRange\"></xref> object. Given that pages must be aligned with 512-byte boundaries, the start\n offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte ranges\n are 0-511, 512-1023, etc."
    name: "pageRange"
    type: "<xref href=\"com.azure.storage.blob.models.PageRange?alt=com.azure.storage.blob.models.PageRange&text=PageRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "A <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref> object that represents the access conditions for the\n blob."
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobOutputStream getBlobOutputStream(PageRange pageRange, BlobRequestConditions requestConditions)"
  desc: "Creates and opens an output stream to write data to the page blob. If the blob already exists on the service, it will be overwritten."
  returns:
    description: "A <xref uid=\"com.azure.storage.blob.specialized.BlobOutputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobOutputStream\"></xref> object used to write data to the blob."
    type: "<xref href=\"com.azure.storage.blob.specialized.BlobOutputStream?alt=com.azure.storage.blob.specialized.BlobOutputStream&text=BlobOutputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.getCustomerProvidedKeyClient(com.azure.storage.blob.models.CustomerProvidedKey)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.getCustomerProvidedKeyClient(CustomerProvidedKey customerProvidedKey)"
  name: "getCustomerProvidedKeyClient(CustomerProvidedKey customerProvidedKey)"
  nameWithType: "PageBlobClient.getCustomerProvidedKeyClient(CustomerProvidedKey customerProvidedKey)"
  summary: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.PageBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobClient\"></xref> with the specified `customerProvidedKey`."
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.getCustomerProvidedKeyClient(com.azure.storage.blob.models.CustomerProvidedKey)"
  parameters:
  - description: "the <xref uid=\"com.azure.storage.blob.models.CustomerProvidedKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CustomerProvidedKey\"></xref> for the blob,\n pass <code>null</code> to use no customer provided key."
    name: "customerProvidedKey"
    type: "<xref href=\"com.azure.storage.blob.models.CustomerProvidedKey?alt=com.azure.storage.blob.models.CustomerProvidedKey&text=CustomerProvidedKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PageBlobClient getCustomerProvidedKeyClient(CustomerProvidedKey customerProvidedKey)"
  desc: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.PageBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobClient\"></xref> with the specified `customerProvidedKey`."
  returns:
    description: "a <xref uid=\"com.azure.storage.blob.specialized.PageBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobClient\"></xref> with the specified <code>customerProvidedKey</code>."
    type: "<xref href=\"com.azure.storage.blob.specialized.PageBlobClient?alt=com.azure.storage.blob.specialized.PageBlobClient&text=PageBlobClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.getEncryptionScopeClient(java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.getEncryptionScopeClient(String encryptionScope)"
  name: "getEncryptionScopeClient(String encryptionScope)"
  nameWithType: "PageBlobClient.getEncryptionScopeClient(String encryptionScope)"
  summary: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.PageBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobClient\"></xref> with the specified `encryptionScope`."
  overridden: "com.azure.storage.blob.specialized.BlobClientBase.getEncryptionScopeClient(java.lang.String)"
  parameters:
  - description: "the encryption scope for the blob, pass <code>null</code> to use no encryption scope."
    name: "encryptionScope"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PageBlobClient getEncryptionScopeClient(String encryptionScope)"
  desc: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.PageBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobClient\"></xref> with the specified `encryptionScope`."
  returns:
    description: "a <xref uid=\"com.azure.storage.blob.specialized.PageBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobClient\"></xref> with the specified <code>encryptionScope</code>."
    type: "<xref href=\"com.azure.storage.blob.specialized.PageBlobClient?alt=com.azure.storage.blob.specialized.PageBlobClient&text=PageBlobClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.getManagedDiskPageRangesDiff(com.azure.storage.blob.models.BlobRange,java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.getManagedDiskPageRangesDiff(BlobRange blobRange, String prevSnapshotUrl)"
  name: "getManagedDiskPageRangesDiff(BlobRange blobRange, String prevSnapshotUrl)"
  nameWithType: "PageBlobClient.getManagedDiskPageRangesDiff(BlobRange blobRange, String prevSnapshotUrl)"
  summary: "This API only works for managed disk accounts."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "blobRange"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies the URL of a previous snapshot of the target blob. Specifies that the\n response will contain only pages that were changed between target blob and previous snapshot. Changed pages\n include both updated and cleared pages. The target blob may be a snapshot, as long as the snapshot specified by\n prevsnapshot is the older of the two."
    name: "prevSnapshotUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PageList getManagedDiskPageRangesDiff(BlobRange blobRange, String prevSnapshotUrl)"
  desc: "This API only works for managed disk accounts.\n\nGets the collection of page ranges that differ between a specified snapshot and this page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n final String prevSnapshotUrl = \"previous snapshot url\";\n PageList pageList = client.getPageRangesDiff(blobRange, prevSnapshotUrl);\n\n System.out.println(\"Valid Page Ranges are:\");\n for (PageRange pageRange : pageList.getPageRange()) {\n     System.out.printf(\"Start: %s, End: %s%n\", pageRange.getStart(), pageRange.getEnd());\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  returns:
    description: "All the different page ranges."
    type: "<xref href=\"com.azure.storage.blob.models.PageList?alt=com.azure.storage.blob.models.PageList&text=PageList\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.getManagedDiskPageRangesDiffWithResponse(com.azure.storage.blob.models.BlobRange,java.lang.String,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.getManagedDiskPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshotUrl, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  name: "getManagedDiskPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshotUrl, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "PageBlobClient.getManagedDiskPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshotUrl, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "This API only works for managed disk accounts."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "blobRange"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies the URL of a previous snapshot of the target blob. Specifies that the\n response will contain only pages that were changed between target blob and previous snapshot. Changed pages\n include both updated and cleared pages. The target blob may be a snapshot, as long as the snapshot specified by\n prevsnapshot is the older of the two."
    name: "prevSnapshotUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<PageList> getManagedDiskPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshotUrl, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "This API only works for managed disk accounts.\n\nGets the collection of page ranges that differ between a specified snapshot and this page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n final String prevSnapshotUrl = \"previous snapshot url\";\n BlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n Context context = new Context(key, value);\n\n PageList pageList = client\n     .getPageRangesDiffWithResponse(blobRange, prevSnapshotUrl, blobRequestConditions, timeout, context).getValue();\n\n System.out.println(\"Valid Page Ranges are:\");\n for (PageRange pageRange : pageList.getPageRange()) {\n     System.out.printf(\"Start: %s, End: %s%n\", pageRange.getStart(), pageRange.getEnd());\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  returns:
    description: "All the different page ranges."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageList?alt=com.azure.storage.blob.models.PageList&text=PageList\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.getPageRanges(com.azure.storage.blob.models.BlobRange)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.getPageRanges(BlobRange blobRange)"
  name: "getPageRanges(BlobRange blobRange)"
  nameWithType: "PageBlobClient.getPageRanges(BlobRange blobRange)"
  summary: "Returns the list of valid page ranges for a page blob or snapshot of a page blob."
  deprecatedTag: "See <xref uid=\"com.azure.storage.blob.specialized.PageBlobClient.listPageRanges(com.azure.storage.blob.models.BlobRange)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#listPageRanges(BlobRange)\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "blobRange"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic PageList getPageRanges(BlobRange blobRange)"
  desc: "Returns the list of valid page ranges for a page blob or snapshot of a page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n PageList pageList = client.getPageRanges(blobRange);\n\n System.out.println(\"Valid Page Ranges are:\");\n for (PageRange pageRange : pageList.getPageRange()) {\n     System.out.printf(\"Start: %s, End: %s%n\", pageRange.getStart(), pageRange.getEnd());\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  hasDeprecatedTag: true
  returns:
    description: "The information of the cleared pages."
    type: "<xref href=\"com.azure.storage.blob.models.PageList?alt=com.azure.storage.blob.models.PageList&text=PageList\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.getPageRangesDiff(com.azure.storage.blob.models.BlobRange,java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.getPageRangesDiff(BlobRange blobRange, String prevSnapshot)"
  name: "getPageRangesDiff(BlobRange blobRange, String prevSnapshot)"
  nameWithType: "PageBlobClient.getPageRangesDiff(BlobRange blobRange, String prevSnapshot)"
  summary: "Gets the collection of page ranges that differ between a specified snapshot and this page blob."
  deprecatedTag: "See <xref uid=\"com.azure.storage.blob.specialized.PageBlobClient.listPageRangesDiff(com.azure.storage.blob.models.BlobRange,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#listPageRangesDiff(BlobRange, String)\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "blobRange"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies that the response will contain only pages that were changed between target blob and\n previous snapshot. Changed pages include both updated and cleared pages. The target blob may be a snapshot, as\n long as the snapshot specified by prevsnapshot is the older of the two."
    name: "prevSnapshot"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic PageList getPageRangesDiff(BlobRange blobRange, String prevSnapshot)"
  desc: "Gets the collection of page ranges that differ between a specified snapshot and this page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n final String prevSnapshot = \"previous snapshot\";\n PageList pageList = client.getPageRangesDiff(blobRange, prevSnapshot);\n\n System.out.println(\"Valid Page Ranges are:\");\n for (PageRange pageRange : pageList.getPageRange()) {\n     System.out.printf(\"Start: %s, End: %s%n\", pageRange.getStart(), pageRange.getEnd());\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  hasDeprecatedTag: true
  returns:
    description: "All the different page ranges."
    type: "<xref href=\"com.azure.storage.blob.models.PageList?alt=com.azure.storage.blob.models.PageList&text=PageList\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.getPageRangesDiffWithResponse(com.azure.storage.blob.models.BlobRange,java.lang.String,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.getPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshot, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  name: "getPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshot, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "PageBlobClient.getPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshot, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "This API only works for managed disk accounts."
  deprecatedTag: "See <xref uid=\"com.azure.storage.blob.specialized.PageBlobClient.listPageRanges(com.azure.storage.blob.options.ListPageRangesOptions,java.time.Duration,com.azure.core.util.Context)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#listPageRanges(ListPageRangesOptions,Duration,Context)\"></xref> )\\}"
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "blobRange"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies that the response will contain only pages that were changed between target blob and\n previous snapshot. Changed pages include both updated and cleared pages. The target blob may be a snapshot, as\n long as the snapshot specified by prevsnapshot is the older of the two."
    name: "prevSnapshot"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic Response<PageList> getPageRangesDiffWithResponse(BlobRange blobRange, String prevSnapshot, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "This API only works for managed disk accounts.\n\nGets the collection of page ranges that differ between a specified snapshot and this page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n final String prevSnapshot = \"previous snapshot\";\n BlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n Context context = new Context(key, value);\n\n PageList pageList = client\n     .getPageRangesDiffWithResponse(blobRange, prevSnapshot, blobRequestConditions, timeout, context).getValue();\n\n System.out.println(\"Valid Page Ranges are:\");\n for (PageRange pageRange : pageList.getPageRange()) {\n     System.out.printf(\"Start: %s, End: %s%n\", pageRange.getStart(), pageRange.getEnd());\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  hasDeprecatedTag: true
  returns:
    description: "All the different page ranges."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageList?alt=com.azure.storage.blob.models.PageList&text=PageList\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.getPageRangesWithResponse(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.getPageRangesWithResponse(BlobRange blobRange, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  name: "getPageRangesWithResponse(BlobRange blobRange, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "PageBlobClient.getPageRangesWithResponse(BlobRange blobRange, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "Returns the list of valid page ranges for a page blob or snapshot of a page blob."
  deprecatedTag: "See <xref uid=\"com.azure.storage.blob.specialized.PageBlobClient.listPageRanges(com.azure.storage.blob.options.ListPageRangesOptions,java.time.Duration,com.azure.core.util.Context)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#listPageRanges(ListPageRangesOptions,Duration,Context)\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "blobRange"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic Response<PageList> getPageRangesWithResponse(BlobRange blobRange, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "Returns the list of valid page ranges for a page blob or snapshot of a page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n BlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n Context context = new Context(key, value);\n\n PageList pageList = client\n     .getPageRangesWithResponse(blobRange, blobRequestConditions, timeout, context).getValue();\n\n System.out.println(\"Valid Page Ranges are:\");\n for (PageRange pageRange : pageList.getPageRange()) {\n     System.out.printf(\"Start: %s, End: %s%n\", pageRange.getStart(), pageRange.getEnd());\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  hasDeprecatedTag: true
  returns:
    description: "All the page ranges."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageList?alt=com.azure.storage.blob.models.PageList&text=PageList\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.listPageRanges(com.azure.storage.blob.models.BlobRange)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.listPageRanges(BlobRange blobRange)"
  name: "listPageRanges(BlobRange blobRange)"
  nameWithType: "PageBlobClient.listPageRanges(BlobRange blobRange)"
  summary: "Returns the list of valid page ranges for a page blob or snapshot of a page blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "blobRange"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<PageRangeItem> listPageRanges(BlobRange blobRange)"
  desc: "Returns the list of valid page ranges for a page blob or snapshot of a page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n String prevSnapshot = \"previous snapshot\";\n PagedIterable<PageRangeItem> iterable = client.listPageRanges(blobRange);\n\n for (PageRangeItem item : iterable) {\n     System.out.printf(\"Offset: %s, Length: %s, isClear: %s%n\", item.getRange().getOffset(),\n         item.getRange().getLength(), item.isClear());\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  returns:
    description: "A reactive response containing the information of the cleared pages."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageRangeItem?alt=com.azure.storage.blob.models.PageRangeItem&text=PageRangeItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.listPageRanges(com.azure.storage.blob.options.ListPageRangesOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.listPageRanges(ListPageRangesOptions options, Duration timeout, Context context)"
  name: "listPageRanges(ListPageRangesOptions options, Duration timeout, Context context)"
  nameWithType: "PageBlobClient.listPageRanges(ListPageRangesOptions options, Duration timeout, Context context)"
  summary: "Returns the list of valid page ranges for a page blob or snapshot of a page blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.ListPageRangesOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ListPageRangesOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.ListPageRangesOptions?alt=com.azure.storage.blob.options.ListPageRangesOptions&text=ListPageRangesOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<PageRangeItem> listPageRanges(ListPageRangesOptions options, Duration timeout, Context context)"
  desc: "Returns the list of valid page ranges for a page blob or snapshot of a page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nListPageRangesOptions options = new ListPageRangesOptions(new BlobRange(offset))\n     .setRequestConditions(new BlobRequestConditions().setLeaseId(leaseId))\n     .setMaxResultsPerPage(1000);\n\n Context context = new Context(key, value);\n\n PagedIterable<PageRangeItem> iter = client\n     .listPageRanges(options, timeout, context);\n\n System.out.println(\"Valid Page Ranges are:\");\n for (PageRangeItem item : iter) {\n     System.out.printf(\"Offset: %s, Length: %s, isClear: %s%n\", item.getRange().getOffset(),\n         item.getRange().getLength(), item.isClear());\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  returns:
    description: "A reactive response emitting all the page ranges."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageRangeItem?alt=com.azure.storage.blob.models.PageRangeItem&text=PageRangeItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.listPageRangesDiff(com.azure.storage.blob.models.BlobRange,java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.listPageRangesDiff(BlobRange blobRange, String prevSnapshot)"
  name: "listPageRangesDiff(BlobRange blobRange, String prevSnapshot)"
  nameWithType: "PageBlobClient.listPageRangesDiff(BlobRange blobRange, String prevSnapshot)"
  summary: "Gets the collection of page ranges that differ between a specified snapshot and this page blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "blobRange"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies that the response will contain only pages that were changed between target blob and\n previous snapshot. Changed pages include both updated and cleared pages. The target blob may be a snapshot, as\n long as the snapshot specified by prevsnapshot is the older of the two."
    name: "prevSnapshot"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<PageRangeItem> listPageRangesDiff(BlobRange blobRange, String prevSnapshot)"
  desc: "Gets the collection of page ranges that differ between a specified snapshot and this page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n String prevSnapshot = \"previous snapshot\";\n PagedIterable<PageRangeItem> iterable = client.listPageRangesDiff(blobRange, prevSnapshot);\n\n for (PageRangeItem item : iterable) {\n     System.out.printf(\"Offset: %s, Length: %s, isClear: %s%n\", item.getRange().getOffset(),\n         item.getRange().getLength(), item.isClear());\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  returns:
    description: "A reactive response emitting all the different page ranges."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageRangeItem?alt=com.azure.storage.blob.models.PageRangeItem&text=PageRangeItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.listPageRangesDiff(com.azure.storage.blob.options.ListPageRangesDiffOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.listPageRangesDiff(ListPageRangesDiffOptions options, Duration timeout, Context context)"
  name: "listPageRangesDiff(ListPageRangesDiffOptions options, Duration timeout, Context context)"
  nameWithType: "PageBlobClient.listPageRangesDiff(ListPageRangesDiffOptions options, Duration timeout, Context context)"
  summary: "Gets the collection of page ranges that differ between a specified snapshot and this page blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.ListPageRangesDiffOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ListPageRangesDiffOptions\"></xref>."
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.ListPageRangesDiffOptions?alt=com.azure.storage.blob.options.ListPageRangesDiffOptions&text=ListPageRangesDiffOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<PageRangeItem> listPageRangesDiff(ListPageRangesDiffOptions options, Duration timeout, Context context)"
  desc: "Gets the collection of page ranges that differ between a specified snapshot and this page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nListPageRangesDiffOptions options = new ListPageRangesDiffOptions(new BlobRange(offset), \"previous snapshot\")\n     .setRequestConditions(new BlobRequestConditions().setLeaseId(leaseId))\n     .setMaxResultsPerPage(1000);\n\n Context context = new Context(key, value);\n\n PagedIterable<PageRangeItem> iter = client\n     .listPageRangesDiff(options, timeout, context);\n\n System.out.println(\"Valid Page Ranges are:\");\n for (PageRangeItem item : iter) {\n     System.out.printf(\"Offset: %s, Length: %s, isClear: %s%n\", item.getRange().getOffset(),\n         item.getRange().getLength(), item.isClear());\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  returns:
    description: "A reactive response emitting all the different page ranges."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageRangeItem?alt=com.azure.storage.blob.models.PageRangeItem&text=PageRangeItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.resize(long)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.resize(long size)"
  name: "resize(long size)"
  nameWithType: "PageBlobClient.resize(long size)"
  summary: "Resizes the page blob to the specified size (which must be a multiple of 512)."
  parameters:
  - description: "Resizes a page blob to the specified size. If the specified value is less than the current size of\n the blob, then all pages above the specified value are cleared."
    name: "size"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PageBlobItem resize(long size)"
  desc: "Resizes the page blob to the specified size (which must be a multiple of 512). For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPageBlobItem pageBlob = client.resize(size);\n System.out.printf(\"Page blob resized with sequence number %s%n\", pageBlob.getBlobSequenceNumber());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-properties"
  returns:
    description: "The resized page blob."
    type: "<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.resizeWithResponse(long,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.resizeWithResponse(long size, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  name: "resizeWithResponse(long size, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "PageBlobClient.resizeWithResponse(long size, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "Resizes the page blob to the specified size (which must be a multiple of 512)."
  parameters:
  - description: "Resizes a page blob to the specified size. If the specified value is less than the current size of\n the blob, then all pages above the specified value are cleared."
    name: "size"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<PageBlobItem> resizeWithResponse(long size, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "Resizes the page blob to the specified size (which must be a multiple of 512). For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n Context context = new Context(key, value);\n\n PageBlobItem pageBlob = client\n     .resizeWithResponse(size, blobRequestConditions, timeout, context).getValue();\n System.out.printf(\"Page blob resized with sequence number %s%n\", pageBlob.getBlobSequenceNumber());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-properties"
  returns:
    description: "The resized page blob."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.updateSequenceNumber(com.azure.storage.blob.models.SequenceNumberActionType,java.lang.Long)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.updateSequenceNumber(SequenceNumberActionType action, Long sequenceNumber)"
  name: "updateSequenceNumber(SequenceNumberActionType action, Long sequenceNumber)"
  nameWithType: "PageBlobClient.updateSequenceNumber(SequenceNumberActionType action, Long sequenceNumber)"
  summary: "Sets the page blob's sequence number."
  parameters:
  - description: "Indicates how the service should modify the blob's sequence number."
    name: "action"
    type: "<xref href=\"com.azure.storage.blob.models.SequenceNumberActionType?alt=com.azure.storage.blob.models.SequenceNumberActionType&text=SequenceNumberActionType\" data-throw-if-not-resolved=\"False\" />"
  - description: "The blob's sequence number. The sequence number is a user-controlled property that you can\n use to track requests and manage concurrency issues."
    name: "sequenceNumber"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PageBlobItem updateSequenceNumber(SequenceNumberActionType action, Long sequenceNumber)"
  desc: "Sets the page blob's sequence number. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPageBlobItem pageBlob = client.updateSequenceNumber(SequenceNumberActionType.INCREMENT, size);\n\n System.out.printf(\"Page blob updated to sequence number %s%n\", pageBlob.getBlobSequenceNumber());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-properties"
  returns:
    description: "The updated page blob."
    type: "<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.updateSequenceNumberWithResponse(com.azure.storage.blob.models.SequenceNumberActionType,java.lang.Long,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.updateSequenceNumberWithResponse(SequenceNumberActionType action, Long sequenceNumber, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  name: "updateSequenceNumberWithResponse(SequenceNumberActionType action, Long sequenceNumber, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "PageBlobClient.updateSequenceNumberWithResponse(SequenceNumberActionType action, Long sequenceNumber, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "Sets the page blob's sequence number."
  parameters:
  - description: "Indicates how the service should modify the blob's sequence number."
    name: "action"
    type: "<xref href=\"com.azure.storage.blob.models.SequenceNumberActionType?alt=com.azure.storage.blob.models.SequenceNumberActionType&text=SequenceNumberActionType\" data-throw-if-not-resolved=\"False\" />"
  - description: "The blob's sequence number. The sequence number is a user-controlled property that you can\n use to track requests and manage concurrency issues."
    name: "sequenceNumber"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<PageBlobItem> updateSequenceNumberWithResponse(SequenceNumberActionType action, Long sequenceNumber, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "Sets the page blob's sequence number. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n Context context = new Context(key, value);\n\n PageBlobItem pageBlob = client.updateSequenceNumberWithResponse(\n     SequenceNumberActionType.INCREMENT, size, blobRequestConditions, timeout, context).getValue();\n\n System.out.printf(\"Page blob updated to sequence number %s%n\", pageBlob.getBlobSequenceNumber());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-properties"
  returns:
    description: "The updated page blob."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.uploadPages(com.azure.storage.blob.models.PageRange,java.io.InputStream)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.uploadPages(PageRange pageRange, InputStream body)"
  name: "uploadPages(PageRange pageRange, InputStream body)"
  nameWithType: "PageBlobClient.uploadPages(PageRange pageRange, InputStream body)"
  summary: "Writes one or more pages to the page blob."
  parameters:
  - description: "A <xref uid=\"com.azure.storage.blob.models.PageRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageRange\"></xref> object. Given that pages must be aligned with 512-byte boundaries, the start\n offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte ranges\n are 0-511, 512-1023, etc."
    name: "pageRange"
    type: "<xref href=\"com.azure.storage.blob.models.PageRange?alt=com.azure.storage.blob.models.PageRange&text=PageRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "The data to upload. The data must be markable. This is in order to support retries. If\n the data is not markable, consider using <xref uid=\"com.azure.storage.blob.specialized.PageBlobClient.getBlobOutputStream(com.azure.storage.blob.models.PageRange)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getBlobOutputStream(PageRange)\"></xref> and writing to the returned\n OutputStream. Alternatively, consider wrapping your data source in a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.BufferedInputStream\"></xref> to add\n mark support."
    name: "body"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PageBlobItem uploadPages(PageRange pageRange, InputStream body)"
  desc: "Writes one or more pages to the page blob. The write size must be a multiple of 512. For more information, see the [Azure Docs][].\n\nNote that the data passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code Samples**\n\n```java\nPageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n InputStream dataStream = new ByteArrayInputStream(data.getBytes(StandardCharsets.UTF_8));\n\n PageBlobItem pageBlob = client.uploadPages(pageRange, dataStream);\n System.out.printf(\"Uploaded page blob with sequence number %s%n\", pageBlob.getBlobSequenceNumber());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  returns:
    description: "The information of the uploaded pages."
    type: "<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.uploadPagesFromUrl(com.azure.storage.blob.models.PageRange,java.lang.String,java.lang.Long)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.uploadPagesFromUrl(PageRange range, String sourceUrl, Long sourceOffset)"
  name: "uploadPagesFromUrl(PageRange range, String sourceUrl, Long sourceOffset)"
  nameWithType: "PageBlobClient.uploadPagesFromUrl(PageRange range, String sourceUrl, Long sourceOffset)"
  summary: "Writes one or more pages from the source page blob to this page blob."
  parameters:
  - description: "A <xref uid=\"com.azure.storage.blob.models.PageRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageRange\"></xref> object. Given that pages must be aligned with 512-byte boundaries, the start\n offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte ranges\n are 0-511, 512-1023, etc."
    name: "range"
    type: "<xref href=\"com.azure.storage.blob.models.PageRange?alt=com.azure.storage.blob.models.PageRange&text=PageRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "The url to the blob that will be the source of the copy.  A source blob in the same storage\n account can be authenticated via Shared Key. However, if the source is a blob in another account, the source blob\n must either be public or must be authenticated via a shared access signature. If the source blob is public, no\n authentication is required to perform the operation."
    name: "sourceUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The source offset to copy from.  Pass null or 0 to copy from the beginning of source page\n blob."
    name: "sourceOffset"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PageBlobItem uploadPagesFromUrl(PageRange range, String sourceUrl, Long sourceOffset)"
  desc: "Writes one or more pages from the source page blob to this page blob. The write size must be a multiple of 512. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n\n PageBlobItem pageBlob = client.uploadPagesFromUrl(pageRange, url, sourceOffset);\n\n System.out.printf(\"Uploaded page blob from URL with sequence number %s%n\", pageBlob.getBlobSequenceNumber());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  returns:
    description: "The information of the uploaded pages."
    type: "<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.uploadPagesFromUrlWithResponse(com.azure.storage.blob.models.PageRange,java.lang.String,java.lang.Long,byte[],com.azure.storage.blob.models.PageBlobRequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.uploadPagesFromUrlWithResponse(PageRange range, String sourceUrl, Long sourceOffset, byte[] sourceContentMd5, PageBlobRequestConditions destRequestConditions, BlobRequestConditions sourceRequestConditions, Duration timeout, Context context)"
  name: "uploadPagesFromUrlWithResponse(PageRange range, String sourceUrl, Long sourceOffset, byte[] sourceContentMd5, PageBlobRequestConditions destRequestConditions, BlobRequestConditions sourceRequestConditions, Duration timeout, Context context)"
  nameWithType: "PageBlobClient.uploadPagesFromUrlWithResponse(PageRange range, String sourceUrl, Long sourceOffset, byte[] sourceContentMd5, PageBlobRequestConditions destRequestConditions, BlobRequestConditions sourceRequestConditions, Duration timeout, Context context)"
  summary: "Writes one or more pages from the source page blob to this page blob."
  parameters:
  - description: "The destination <xref uid=\"com.azure.storage.blob.models.PageRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageRange\"></xref> range. Given that pages must be aligned with 512-byte boundaries,\n the start offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte\n ranges are 0-511, 512-1023, etc."
    name: "range"
    type: "<xref href=\"com.azure.storage.blob.models.PageRange?alt=com.azure.storage.blob.models.PageRange&text=PageRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "The url to the blob that will be the source of the copy.  A source blob in the same storage\n account can be authenticated via Shared Key. However, if the source is a blob in another account, the source blob\n must either be public or must be authenticated via a shared access signature. If the source blob is public, no\n authentication is required to perform the operation."
    name: "sourceUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The source offset to copy from.  Pass null or 0 to copy from the beginning of source blob."
    name: "sourceOffset"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
  - description: "An MD5 hash of the block content from the source blob. If specified, the service will\n calculate the MD5 of the received data and fail the request if it does not match the provided MD5."
    name: "sourceContentMd5"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "<xref uid=\"com.azure.storage.blob.models.PageBlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobRequestConditions\"></xref>"
    name: "destRequestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.PageBlobRequestConditions?alt=com.azure.storage.blob.models.PageBlobRequestConditions&text=PageBlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "sourceRequestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<PageBlobItem> uploadPagesFromUrlWithResponse(PageRange range, String sourceUrl, Long sourceOffset, byte[] sourceContentMd5, PageBlobRequestConditions destRequestConditions, BlobRequestConditions sourceRequestConditions, Duration timeout, Context context)"
  desc: "Writes one or more pages from the source page blob to this page blob. The write size must be a multiple of 512. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n InputStream dataStream = new ByteArrayInputStream(data.getBytes(StandardCharsets.UTF_8));\n byte[] sourceContentMD5 = new byte[512];\n PageBlobRequestConditions pageBlobRequestConditions = new PageBlobRequestConditions().setLeaseId(leaseId);\n BlobRequestConditions sourceRequestConditions = new BlobRequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n Context context = new Context(key, value);\n\n PageBlobItem pageBlob = client\n     .uploadPagesFromUrlWithResponse(pageRange, url, sourceOffset, sourceContentMD5, pageBlobRequestConditions,\n         sourceRequestConditions, timeout, context).getValue();\n\n System.out.printf(\"Uploaded page blob from URL with sequence number %s%n\", pageBlob.getBlobSequenceNumber());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  returns:
    description: "The information of the uploaded pages."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.uploadPagesFromUrlWithResponse(com.azure.storage.blob.options.PageBlobUploadPagesFromUrlOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.uploadPagesFromUrlWithResponse(PageBlobUploadPagesFromUrlOptions options, Duration timeout, Context context)"
  name: "uploadPagesFromUrlWithResponse(PageBlobUploadPagesFromUrlOptions options, Duration timeout, Context context)"
  nameWithType: "PageBlobClient.uploadPagesFromUrlWithResponse(PageBlobUploadPagesFromUrlOptions options, Duration timeout, Context context)"
  summary: "Writes one or more pages from the source page blob to this page blob."
  parameters:
  - description: "Parameters for the operation."
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.PageBlobUploadPagesFromUrlOptions?alt=com.azure.storage.blob.options.PageBlobUploadPagesFromUrlOptions&text=PageBlobUploadPagesFromUrlOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<PageBlobItem> uploadPagesFromUrlWithResponse(PageBlobUploadPagesFromUrlOptions options, Duration timeout, Context context)"
  desc: "Writes one or more pages from the source page blob to this page blob. The write size must be a multiple of 512. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n InputStream dataStream = new ByteArrayInputStream(data.getBytes(StandardCharsets.UTF_8));\n byte[] sourceContentMD5 = new byte[512];\n PageBlobRequestConditions pageBlobRequestConditions = new PageBlobRequestConditions().setLeaseId(leaseId);\n BlobRequestConditions sourceRequestConditions = new BlobRequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n Context context = new Context(key, value);\n\n PageBlobItem pageBlob = client\n     .uploadPagesFromUrlWithResponse(new PageBlobUploadPagesFromUrlOptions(pageRange, url)\n         .setSourceOffset(sourceOffset).setSourceContentMd5(sourceContentMD5)\n         .setDestinationRequestConditions(pageBlobRequestConditions)\n         .setSourceRequestConditions(sourceRequestConditions), timeout, context).getValue();\n\n System.out.printf(\"Uploaded page blob from URL with sequence number %s%n\", pageBlob.getBlobSequenceNumber());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  returns:
    description: "The information of the uploaded pages."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobClient.uploadPagesWithResponse(com.azure.storage.blob.models.PageRange,java.io.InputStream,byte[],com.azure.storage.blob.models.PageBlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.PageBlobClient.uploadPagesWithResponse(PageRange pageRange, InputStream body, byte[] contentMd5, PageBlobRequestConditions pageBlobRequestConditions, Duration timeout, Context context)"
  name: "uploadPagesWithResponse(PageRange pageRange, InputStream body, byte[] contentMd5, PageBlobRequestConditions pageBlobRequestConditions, Duration timeout, Context context)"
  nameWithType: "PageBlobClient.uploadPagesWithResponse(PageRange pageRange, InputStream body, byte[] contentMd5, PageBlobRequestConditions pageBlobRequestConditions, Duration timeout, Context context)"
  summary: "Writes one or more pages to the page blob."
  parameters:
  - description: "A <xref uid=\"com.azure.storage.blob.models.PageRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageRange\"></xref> object. Given that pages must be aligned with 512-byte boundaries, the start\n offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte ranges\n are 0-511, 512-1023, etc."
    name: "pageRange"
    type: "<xref href=\"com.azure.storage.blob.models.PageRange?alt=com.azure.storage.blob.models.PageRange&text=PageRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "The data to upload. The data must be markable. This is in order to support retries. If\n the data is not markable, consider using <xref uid=\"com.azure.storage.blob.specialized.PageBlobClient.getBlobOutputStream(com.azure.storage.blob.models.PageRange)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getBlobOutputStream(PageRange)\"></xref> and writing to the returned\n OutputStream. Alternatively, consider wrapping your data source in a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.BufferedInputStream\"></xref> to add\n mark support."
    name: "body"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  - description: "An MD5 hash of the page content. This hash is used to verify the integrity of the page during\n transport. When this header is specified, the storage service compares the hash of the content that has arrived\n with this header value. Note that this MD5 hash is not stored with the blob. If the two hashes do not match, the\n operation will fail."
    name: "contentMd5"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "<xref uid=\"com.azure.storage.blob.models.PageBlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobRequestConditions\"></xref>"
    name: "pageBlobRequestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.PageBlobRequestConditions?alt=com.azure.storage.blob.models.PageBlobRequestConditions&text=PageBlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<PageBlobItem> uploadPagesWithResponse(PageRange pageRange, InputStream body, byte[] contentMd5, PageBlobRequestConditions pageBlobRequestConditions, Duration timeout, Context context)"
  desc: "Writes one or more pages to the page blob. The write size must be a multiple of 512. For more information, see the [Azure Docs][].\n\nNote that the data passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code Samples**\n\n```java\nbyte[] md5 = MessageDigest.getInstance(\"MD5\").digest(\"data\".getBytes(StandardCharsets.UTF_8));\n PageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n InputStream dataStream = new ByteArrayInputStream(data.getBytes(StandardCharsets.UTF_8));\n PageBlobRequestConditions pageBlobRequestConditions = new PageBlobRequestConditions().setLeaseId(leaseId);\n Context context = new Context(key, value);\n\n PageBlobItem pageBlob = client\n     .uploadPagesWithResponse(pageRange, dataStream, md5, pageBlobRequestConditions, timeout, context).getValue();\n\n System.out.printf(\"Uploaded page blob with sequence number %s%n\", pageBlob.getBlobSequenceNumber());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  returns:
    description: "The information of the uploaded pages."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Client to a page blob. It may only be instantiated through a <xref uid=\"com.azure.storage.blob.specialized.SpecializedBlobClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SpecializedBlobClientBuilder\"></xref> or via the method <xref uid=\"com.azure.storage.blob.BlobClient.getPageBlobClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobClient#getPageBlobClient()\"></xref>. This class does not hold any state about a particular blob, but is instead a convenient way of sending appropriate requests to the resource on the service.\n\nPlease refer to the [Azure Docs][] for more information.\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs"
metadata: {}
package: "com.azure.storage.blob.specialized"
artifact: com.azure:azure-storage-blob:12.19.0
