### YamlMime:JavaType
methods:
- fullName: system.fabric.PrimaryReplicator.buildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
  name: buildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
  nameWithType: PrimaryReplicator.buildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
  parameters:
  - description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
    name: replicaInfo
    type: <xref href="system.fabric.ReplicaInformation?alt=system.fabric.ReplicaInformation&text=ReplicaInformation" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A future that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture?alt=CompletableFuture&text=CompletableFuture" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>

    <p></p>
  syntax: public CompletableFuture buildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
  uid: system.fabric.PrimaryReplicator.buildReplicaAsync(ReplicaInformation,CancellationToken)
- fullName: system.fabric.PrimaryReplicator.onDataLossAsync(CancellationToken cancellationToken)
  name: onDataLossAsync(CancellationToken cancellationToken)
  nameWithType: PrimaryReplicator.onDataLossAsync(CancellationToken cancellationToken)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A CompletableFuture that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> onDataLossAsync(CancellationToken cancellationToken)
  uid: system.fabric.PrimaryReplicator.onDataLossAsync(CancellationToken)
- fullName: system.fabric.PrimaryReplicator.removeReplica(long replicaId)
  name: removeReplica(long replicaId)
  nameWithType: PrimaryReplicator.removeReplica(long replicaId)
  parameters:
  - description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>
    name: replicaId
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>

    <p></p>

    <p>

      <b>Remarks:</b> This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax: public void removeReplica(long replicaId)
  uid: system.fabric.PrimaryReplicator.removeReplica(long)
- fullName: system.fabric.PrimaryReplicator.updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
  name: updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
  nameWithType: PrimaryReplicator.updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
  parameters:
  - description: <p>For Internal Use Only. </p>
    name: currentConfiguration
    type: <xref href="system.fabric.ReplicaSetConfiguration?alt=system.fabric.ReplicaSetConfiguration&text=ReplicaSetConfiguration" data-throw-if-not-resolved="False"/>
  - description: <p>For Internal Use Only. </p>
    name: previousConfiguration
    type: <xref href="system.fabric.ReplicaSetConfiguration?alt=system.fabric.ReplicaSetConfiguration&text=ReplicaSetConfiguration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>

    <p></p>
  syntax: public void updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
  uid: system.fabric.PrimaryReplicator.updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration,ReplicaSetConfiguration)
- fullName: system.fabric.PrimaryReplicator.updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
  name: updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
  nameWithType: PrimaryReplicator.updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
  parameters:
  - description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>
    name: currentConfiguration
    type: <xref href="system.fabric.ReplicaSetConfiguration?alt=system.fabric.ReplicaSetConfiguration&text=ReplicaSetConfiguration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>

    <p></p>

    <p>

      <b>Remarks:</b> This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax: public void updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
  uid: system.fabric.PrimaryReplicator.updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration)
- fullName: system.fabric.PrimaryReplicator.waitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
  name: waitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
  nameWithType: PrimaryReplicator.waitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
  parameters:
  - description: <p>For Internal Use Only. </p>
    name: quorumMode
    type: <xref href="system.fabric.ReplicaSetQuorumMode?alt=system.fabric.ReplicaSetQuorumMode&text=ReplicaSetQuorumMode" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A future that represents asynchrnous completion. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture?alt=CompletableFuture&text=CompletableFuture" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>

    <p>For Internal Use Only. </p>

    <p></p>
  syntax: public CompletableFuture waitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
  uid: system.fabric.PrimaryReplicator.waitForCatchUpQuorumAsync(ReplicaSetQuorumMode,CancellationToken)
nameWithType: PrimaryReplicator
syntax: public interface PrimaryReplicator
type: interface
uid: system.fabric.PrimaryReplicator
fullName: system.fabric.PrimaryReplicator
name: PrimaryReplicator
package: system.fabric
summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
metadata: {}
