### YamlMime:JavaType
uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate"
fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate"
name: "ReactiveCosmosTemplate"
nameWithType: "ReactiveCosmosTemplate"
summary: "Template class of reactive cosmos"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public class **ReactiveCosmosTemplate**</br> implements <xref href=\"com.azure.spring.data.cosmos.core.ReactiveCosmosOperations?alt=com.azure.spring.data.cosmos.core.ReactiveCosmosOperations&text=ReactiveCosmosOperations\" data-throw-if-not-resolved=\"False\" />, <xref href=\"org.springframework.context.ApplicationContextAware?alt=org.springframework.context.ApplicationContextAware&text=ApplicationContextAware\" data-throw-if-not-resolved=\"False\" />"
constructors:
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.ReactiveCosmosTemplate(com.azure.cosmos.CosmosAsyncClient,java.lang.String,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.ReactiveCosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)"
  name: "ReactiveCosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)"
  nameWithType: "ReactiveCosmosTemplate.ReactiveCosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)"
  summary: "Initialization"
  parameters:
  - description: "must not be null"
    name: "client"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncClient?alt=com.azure.cosmos.CosmosAsyncClient&text=CosmosAsyncClient\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "databaseName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "must not be null"
    name: "cosmosConfig"
    type: "<xref href=\"com.azure.spring.data.cosmos.config.CosmosConfig?alt=com.azure.spring.data.cosmos.config.CosmosConfig&text=CosmosConfig\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "mappingCosmosConverter"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter?alt=com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter&text=MappingCosmosConverter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ReactiveCosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)"
  desc: "Initialization"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.ReactiveCosmosTemplate(com.azure.cosmos.CosmosAsyncClient,java.lang.String,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter,org.springframework.data.auditing.IsNewAwareAuditingHandler)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.ReactiveCosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)"
  name: "ReactiveCosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)"
  nameWithType: "ReactiveCosmosTemplate.ReactiveCosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)"
  summary: "Initialization"
  parameters:
  - description: "must not be null"
    name: "client"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncClient?alt=com.azure.cosmos.CosmosAsyncClient&text=CosmosAsyncClient\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "databaseName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "must not be null"
    name: "cosmosConfig"
    type: "<xref href=\"com.azure.spring.data.cosmos.config.CosmosConfig?alt=com.azure.spring.data.cosmos.config.CosmosConfig&text=CosmosConfig\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "mappingCosmosConverter"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter?alt=com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter&text=MappingCosmosConverter\" data-throw-if-not-resolved=\"False\" />"
  - description: "can be null"
    name: "cosmosAuditingHandler"
    type: "<xref href=\"org.springframework.data.auditing.IsNewAwareAuditingHandler?alt=org.springframework.data.auditing.IsNewAwareAuditingHandler&text=IsNewAwareAuditingHandler\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ReactiveCosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)"
  desc: "Initialization"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.ReactiveCosmosTemplate(com.azure.spring.data.cosmos.CosmosFactory,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.ReactiveCosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)"
  name: "ReactiveCosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)"
  nameWithType: "ReactiveCosmosTemplate.ReactiveCosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)"
  summary: "Initialization"
  parameters:
  - description: "must not be null"
    name: "cosmosFactory"
    type: "<xref href=\"com.azure.spring.data.cosmos.CosmosFactory?alt=com.azure.spring.data.cosmos.CosmosFactory&text=CosmosFactory\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "cosmosConfig"
    type: "<xref href=\"com.azure.spring.data.cosmos.config.CosmosConfig?alt=com.azure.spring.data.cosmos.config.CosmosConfig&text=CosmosConfig\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "mappingCosmosConverter"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter?alt=com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter&text=MappingCosmosConverter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ReactiveCosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)"
  desc: "Initialization"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.ReactiveCosmosTemplate(com.azure.spring.data.cosmos.CosmosFactory,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter,org.springframework.data.auditing.IsNewAwareAuditingHandler)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.ReactiveCosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)"
  name: "ReactiveCosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)"
  nameWithType: "ReactiveCosmosTemplate.ReactiveCosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)"
  summary: "Constructor"
  parameters:
  - description: "the cosmos db factory"
    name: "cosmosFactory"
    type: "<xref href=\"com.azure.spring.data.cosmos.CosmosFactory?alt=com.azure.spring.data.cosmos.CosmosFactory&text=CosmosFactory\" data-throw-if-not-resolved=\"False\" />"
  - description: "the cosmos config"
    name: "cosmosConfig"
    type: "<xref href=\"com.azure.spring.data.cosmos.config.CosmosConfig?alt=com.azure.spring.data.cosmos.config.CosmosConfig&text=CosmosConfig\" data-throw-if-not-resolved=\"False\" />"
  - description: "the mappingCosmosConverter"
    name: "mappingCosmosConverter"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter?alt=com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter&text=MappingCosmosConverter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the auditing handler"
    name: "cosmosAuditingHandler"
    type: "<xref href=\"org.springframework.data.auditing.IsNewAwareAuditingHandler?alt=org.springframework.data.auditing.IsNewAwareAuditingHandler&text=IsNewAwareAuditingHandler\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ReactiveCosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)"
  desc: "Constructor"
methods:
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<S,T>deleteEntities(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<T,?>,java.lang.Iterable<S>)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<S,T>deleteEntities(CosmosEntityInformation<T,?> entityInformation, Iterable<S> entities)"
  name: "<S,T>deleteEntities(CosmosEntityInformation<T,?> entityInformation, Iterable<S> entities)"
  nameWithType: "ReactiveCosmosTemplate.<S,T>deleteEntities(CosmosEntityInformation<T,?> entityInformation, Iterable<S> entities)"
  summary: "Delete all items with bulk."
  parameters:
  - description: "the CosmosEntityInformation"
    name: "entityInformation"
    type: "<xref href=\"com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation?alt=com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation&text=CosmosEntityInformation\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,?&gt;"
  - description: "the Iterable entities to be deleted"
    name: "entities"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a>&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> <S,T>deleteEntities(CosmosEntityInformation<T,?> entityInformation, Iterable<S> entities)"
  desc: "Delete all items with bulk."
  returns:
    description: "void Mono"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<S,T>deleteEntities(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<T,?>,reactor.core.publisher.Flux<S>)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<S,T>deleteEntities(CosmosEntityInformation<T,?> entityInformation, Flux<S> entities)"
  name: "<S,T>deleteEntities(CosmosEntityInformation<T,?> entityInformation, Flux<S> entities)"
  nameWithType: "ReactiveCosmosTemplate.<S,T>deleteEntities(CosmosEntityInformation<T,?> entityInformation, Flux<S> entities)"
  summary: "Delete all items with bulk."
  parameters:
  - description: "the CosmosEntityInformation"
    name: "entityInformation"
    type: "<xref href=\"com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation?alt=com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation&text=CosmosEntityInformation\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,?&gt;"
  - description: "the Iterable entities to be deleted"
    name: "entities"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> <S,T>deleteEntities(CosmosEntityInformation<T,?> entityInformation, Flux<S> entities)"
  desc: "Delete all items with bulk."
  returns:
    description: "void Mono"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<S,T>insertAll(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<T,?>,java.lang.Iterable<S>)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<S,T>insertAll(CosmosEntityInformation<T,?> entityInformation, Iterable<S> entities)"
  name: "<S,T>insertAll(CosmosEntityInformation<T,?> entityInformation, Iterable<S> entities)"
  nameWithType: "ReactiveCosmosTemplate.<S,T>insertAll(CosmosEntityInformation<T,?> entityInformation, Iterable<S> entities)"
  summary: "Insert all items with bulk."
  parameters:
  - description: "the CosmosEntityInformation"
    name: "entityInformation"
    type: "<xref href=\"com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation?alt=com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation&text=CosmosEntityInformation\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,?&gt;"
  - description: "the Iterable entities to be inserted"
    name: "entities"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a>&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Flux<S> <S,T>insertAll(CosmosEntityInformation<T,?> entityInformation, Iterable<S> entities)"
  desc: "Insert all items with bulk."
  returns:
    description: "Flux of result"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<S,T>insertAll(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<T,?>,reactor.core.publisher.Flux<S>)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<S,T>insertAll(CosmosEntityInformation<T,?> entityInformation, Flux<S> entities)"
  name: "<S,T>insertAll(CosmosEntityInformation<T,?> entityInformation, Flux<S> entities)"
  nameWithType: "ReactiveCosmosTemplate.<S,T>insertAll(CosmosEntityInformation<T,?> entityInformation, Flux<S> entities)"
  summary: "Insert all items with bulk."
  parameters:
  - description: "the CosmosEntityInformation"
    name: "entityInformation"
    type: "<xref href=\"com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation?alt=com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation&text=CosmosEntityInformation\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,?&gt;"
  - description: "the Flux of entities to be inserted"
    name: "entities"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Flux<S> <S,T>insertAll(CosmosEntityInformation<T,?> entityInformation, Flux<S> entities)"
  desc: "Insert all items with bulk."
  returns:
    description: "Flux of result"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>delete(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.delete(CosmosQuery query, Class<T> domainType, String containerName)"
  name: "delete(CosmosQuery query, Class<T> domainType, String containerName)"
  nameWithType: "ReactiveCosmosTemplate.delete(CosmosQuery query, Class<T> domainType, String containerName)"
  summary: "Delete items matching query with bulk if PK exists"
  parameters:
  - description: "the document query"
    name: "query"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.query.CosmosQuery?alt=com.azure.spring.data.cosmos.core.query.CosmosQuery&text=CosmosQuery\" data-throw-if-not-resolved=\"False\" />"
  - description: "the entity class"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the container name"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Flux<T> <T>delete(CosmosQuery query, Class<T> domainType, String containerName)"
  desc: "Delete items matching query with bulk if PK exists"
  returns:
    description: "Mono"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>deleteEntity(java.lang.String,T)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.deleteEntity(String containerName, T entity)"
  name: "deleteEntity(String containerName, T entity)"
  nameWithType: "ReactiveCosmosTemplate.deleteEntity(String containerName, T entity)"
  summary: "Deletes the entity"
  parameters:
  - description: "Container name of database"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "the entity to delete"
    name: "entity"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> <T>deleteEntity(String containerName, T entity)"
  desc: "Deletes the entity"
  returns:
    description: "void Mono"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>find(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.find(CosmosQuery query, Class<T> domainType, String containerName)"
  name: "find(CosmosQuery query, Class<T> domainType, String containerName)"
  nameWithType: "ReactiveCosmosTemplate.find(CosmosQuery query, Class<T> domainType, String containerName)"
  summary: "Find items"
  parameters:
  - description: "the document query"
    name: "query"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.query.CosmosQuery?alt=com.azure.spring.data.cosmos.core.query.CosmosQuery&text=CosmosQuery\" data-throw-if-not-resolved=\"False\" />"
  - description: "the entity class"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the container name"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Flux<T> <T>find(CosmosQuery query, Class<T> domainType, String containerName)"
  desc: "Find items"
  returns:
    description: "Flux with found items or error"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>findAll(com.azure.cosmos.models.PartitionKey,java.lang.Class<T>)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.findAll(PartitionKey partitionKey, Class<T> domainType)"
  name: "findAll(PartitionKey partitionKey, Class<T> domainType)"
  nameWithType: "ReactiveCosmosTemplate.findAll(PartitionKey partitionKey, Class<T> domainType)"
  summary: "Find all items in a given container with partition key"
  parameters:
  - name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Flux<T> <T>findAll(PartitionKey partitionKey, Class<T> domainType)"
  desc: "Find all items in a given container with partition key"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>findAll(java.lang.Class<T>)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.findAll(Class<T> domainType)"
  name: "findAll(Class<T> domainType)"
  nameWithType: "ReactiveCosmosTemplate.findAll(Class<T> domainType)"
  summary: "Find all items in a given container"
  parameters:
  - description: "the domainType"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Flux<T> <T>findAll(Class<T> domainType)"
  desc: "Find all items in a given container"
  returns:
    description: "Flux with all the found items or error"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>findAll(java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.findAll(String containerName, Class<T> domainType)"
  name: "findAll(String containerName, Class<T> domainType)"
  nameWithType: "ReactiveCosmosTemplate.findAll(String containerName, Class<T> domainType)"
  summary: "Find all items in a given container"
  parameters:
  - description: "the containerName"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "the domainType"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Flux<T> <T>findAll(String containerName, Class<T> domainType)"
  desc: "Find all items in a given container"
  returns:
    description: "Flux with all the found items or error"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>findById(java.lang.Object,java.lang.Class<T>)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.findById(Object id, Class<T> domainType)"
  name: "findById(Object id, Class<T> domainType)"
  nameWithType: "ReactiveCosmosTemplate.findById(Object id, Class<T> domainType)"
  summary: "Find by id"
  parameters:
  - description: "the id"
    name: "id"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  - description: "the domainType"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<T> <T>findById(Object id, Class<T> domainType)"
  desc: "Find by id"
  returns:
    description: "Mono with the item or error"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>findById(java.lang.Object,java.lang.Class<T>,com.azure.cosmos.models.PartitionKey)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.findById(Object id, Class<T> domainType, PartitionKey partitionKey)"
  name: "findById(Object id, Class<T> domainType, PartitionKey partitionKey)"
  nameWithType: "ReactiveCosmosTemplate.findById(Object id, Class<T> domainType, PartitionKey partitionKey)"
  summary: "Find by id"
  parameters:
  - description: "the id"
    name: "id"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  - description: "the entity class"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "partition Key"
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<T> <T>findById(Object id, Class<T> domainType, PartitionKey partitionKey)"
  desc: "Find by id"
  returns:
    description: "Mono with the item or error"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>findById(java.lang.String,java.lang.Object,java.lang.Class<T>)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.findById(String containerName, Object id, Class<T> domainType)"
  name: "findById(String containerName, Object id, Class<T> domainType)"
  nameWithType: "ReactiveCosmosTemplate.findById(String containerName, Object id, Class<T> domainType)"
  summary: "Find by id"
  parameters:
  - description: "the container name"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "the id"
    name: "id"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  - description: "the entity class"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<T> <T>findById(String containerName, Object id, Class<T> domainType)"
  desc: "Find by id"
  returns:
    description: "Mono with the item or error"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>insert(T)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.insert(T objectToSave)"
  name: "insert(T objectToSave)"
  nameWithType: "ReactiveCosmosTemplate.insert(T objectToSave)"
  summary: "Insert"
  parameters:
  - description: "the object to save"
    name: "objectToSave"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<T> <T>insert(T objectToSave)"
  desc: "Insert"
  returns:
    description: "Mono with the item or error"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>insert(T,com.azure.cosmos.models.PartitionKey)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.insert(T objectToSave, PartitionKey partitionKey)"
  name: "insert(T objectToSave, PartitionKey partitionKey)"
  nameWithType: "ReactiveCosmosTemplate.insert(T objectToSave, PartitionKey partitionKey)"
  summary: "Insert"
  parameters:
  - description: "the object to save"
    name: "objectToSave"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key"
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<T> <T>insert(T objectToSave, PartitionKey partitionKey)"
  desc: "Insert"
  returns:
    description: "Mono with the item or error"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>insert(java.lang.String,T)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.insert(String containerName, T objectToSave)"
  name: "insert(String containerName, T objectToSave)"
  nameWithType: "ReactiveCosmosTemplate.insert(String containerName, T objectToSave)"
  summary: "Insert"
  parameters:
  - description: "the container name"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "the object to save"
    name: "objectToSave"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<T> <T>insert(String containerName, T objectToSave)"
  desc: "Insert"
  returns:
    description: "Mono with the item or error"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>insert(java.lang.String,T,com.azure.cosmos.models.PartitionKey)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.insert(String containerName, T objectToSave, PartitionKey partitionKey)"
  name: "insert(String containerName, T objectToSave, PartitionKey partitionKey)"
  nameWithType: "ReactiveCosmosTemplate.insert(String containerName, T objectToSave, PartitionKey partitionKey)"
  summary: "Insert"
  parameters:
  - description: "the container name"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "the object to save"
    name: "objectToSave"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key"
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<T> <T>insert(String containerName, T objectToSave, PartitionKey partitionKey)"
  desc: "Insert"
  returns:
    description: "Mono with the item or error"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>patch(java.lang.Object,com.azure.cosmos.models.PartitionKey,java.lang.Class<T>,com.azure.cosmos.models.CosmosPatchOperations)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.patch(Object id, PartitionKey partitionKey, Class<T> domainType, CosmosPatchOperations patchOperations)"
  name: "patch(Object id, PartitionKey partitionKey, Class<T> domainType, CosmosPatchOperations patchOperations)"
  nameWithType: "ReactiveCosmosTemplate.patch(Object id, PartitionKey partitionKey, Class<T> domainType, CosmosPatchOperations patchOperations)"
  summary: "Patches item applies partial update (patch) to an item"
  parameters:
  - description: "must not be null"
    name: "id"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  - description: "must not be null"
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "must not be null"
    name: "patchOperations"
    type: "<xref href=\"com.azure.cosmos.models.CosmosPatchOperations?alt=com.azure.cosmos.models.CosmosPatchOperations&text=CosmosPatchOperations\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<T> <T>patch(Object id, PartitionKey partitionKey, Class<T> domainType, CosmosPatchOperations patchOperations)"
  desc: "Patches item applies partial update (patch) to an item"
  returns:
    description: "the patched item"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>patch(java.lang.Object,com.azure.cosmos.models.PartitionKey,java.lang.Class<T>,com.azure.cosmos.models.CosmosPatchOperations,com.azure.cosmos.models.CosmosPatchItemRequestOptions)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.patch(Object id, PartitionKey partitionKey, Class<T> domainType, CosmosPatchOperations patchOperations, CosmosPatchItemRequestOptions options)"
  name: "patch(Object id, PartitionKey partitionKey, Class<T> domainType, CosmosPatchOperations patchOperations, CosmosPatchItemRequestOptions options)"
  nameWithType: "ReactiveCosmosTemplate.patch(Object id, PartitionKey partitionKey, Class<T> domainType, CosmosPatchOperations patchOperations, CosmosPatchItemRequestOptions options)"
  summary: "applies partial update (patch) to an item with Cosmos<wbr>Patch<wbr>Item<wbr>Request<wbr>Options"
  parameters:
  - description: "must not be null"
    name: "id"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  - description: "must not be null"
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "must not be null"
    name: "patchOperations"
    type: "<xref href=\"com.azure.cosmos.models.CosmosPatchOperations?alt=com.azure.cosmos.models.CosmosPatchOperations&text=CosmosPatchOperations\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional CosmosPatchItemRequestOptions, e.g. options.setFilterPredicate(\"FROM products p WHERE p.used = false\");"
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosPatchItemRequestOptions?alt=com.azure.cosmos.models.CosmosPatchItemRequestOptions&text=CosmosPatchItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<T> <T>patch(Object id, PartitionKey partitionKey, Class<T> domainType, CosmosPatchOperations patchOperations, CosmosPatchItemRequestOptions options)"
  desc: "applies partial update (patch) to an item with CosmosPatchItemRequestOptions"
  returns:
    description: "the patched item"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>runQuery(com.azure.cosmos.models.SqlQuerySpec,java.lang.Class<?>,java.lang.Class<T>)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType)"
  name: "runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType)"
  nameWithType: "ReactiveCosmosTemplate.runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType)"
  summary: "Run the query."
  parameters:
  - name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  - name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;?&gt;"
  - name: "returnType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Flux<T> <T>runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType)"
  desc: "Run the query."
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>runQuery(com.azure.cosmos.models.SqlQuerySpec,org.springframework.data.domain.Sort,java.lang.Class<?>,java.lang.Class<T>)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.runQuery(SqlQuerySpec querySpec, Sort sort, Class<?> domainType, Class<T> returnType)"
  name: "runQuery(SqlQuerySpec querySpec, Sort sort, Class<?> domainType, Class<T> returnType)"
  nameWithType: "ReactiveCosmosTemplate.runQuery(SqlQuerySpec querySpec, Sort sort, Class<?> domainType, Class<T> returnType)"
  summary: "Run the query."
  parameters:
  - name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  - name: "sort"
    type: "<xref href=\"org.springframework.data.domain.Sort?alt=org.springframework.data.domain.Sort&text=Sort\" data-throw-if-not-resolved=\"False\" />"
  - name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;?&gt;"
  - name: "returnType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Flux<T> <T>runQuery(SqlQuerySpec querySpec, Sort sort, Class<?> domainType, Class<T> returnType)"
  desc: "Run the query."
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>upsert(T)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.upsert(T object)"
  name: "upsert(T object)"
  nameWithType: "ReactiveCosmosTemplate.upsert(T object)"
  summary: "Upsert"
  parameters:
  - description: "the object to upsert"
    name: "object"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<T> <T>upsert(T object)"
  desc: "Upsert"
  returns:
    description: "Mono with the item or error"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>upsert(java.lang.String,T)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.upsert(String containerName, T object)"
  name: "upsert(String containerName, T object)"
  nameWithType: "ReactiveCosmosTemplate.upsert(String containerName, T object)"
  summary: "Upsert"
  parameters:
  - description: "the container name"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "the object to save"
    name: "object"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<T> <T>upsert(String containerName, T object)"
  desc: "Upsert"
  returns:
    description: "Mono with the item or error"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.count(com.azure.cosmos.models.SqlQuerySpec,java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.count(SqlQuerySpec querySpec, String containerName)"
  name: "count(SqlQuerySpec querySpec, String containerName)"
  nameWithType: "ReactiveCosmosTemplate.count(SqlQuerySpec querySpec, String containerName)"
  summary: "Count"
  parameters:
  - description: "the document query spec"
    name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  - description: "the container name"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Long> count(SqlQuerySpec querySpec, String containerName)"
  desc: "Count"
  returns:
    description: "Mono with count or error"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Long.html\">Long</a>&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.count(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.count(CosmosQuery query, String containerName)"
  name: "count(CosmosQuery query, String containerName)"
  nameWithType: "ReactiveCosmosTemplate.count(CosmosQuery query, String containerName)"
  summary: "Count"
  parameters:
  - description: "the document query"
    name: "query"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.query.CosmosQuery?alt=com.azure.spring.data.cosmos.core.query.CosmosQuery&text=CosmosQuery\" data-throw-if-not-resolved=\"False\" />"
  - description: "the container name"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Long> count(CosmosQuery query, String containerName)"
  desc: "Count"
  returns:
    description: "Mono with count or error"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Long.html\">Long</a>&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.count(java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.count(String containerName)"
  name: "count(String containerName)"
  nameWithType: "ReactiveCosmosTemplate.count(String containerName)"
  summary: "Count"
  parameters:
  - description: "the container name"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Long> count(String containerName)"
  desc: "Count"
  returns:
    description: "Mono with the count or error"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Long.html\">Long</a>&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.createContainerIfNotExists(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<?,?>)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.createContainerIfNotExists(CosmosEntityInformation<?,?> information)"
  name: "createContainerIfNotExists(CosmosEntityInformation<?,?> information)"
  nameWithType: "ReactiveCosmosTemplate.createContainerIfNotExists(CosmosEntityInformation<?,?> information)"
  summary: "Creates a container if it doesn't already exist"
  parameters:
  - description: "the CosmosEntityInformation"
    name: "information"
    type: "<xref href=\"com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation?alt=com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation&text=CosmosEntityInformation\" data-throw-if-not-resolved=\"False\" />&lt;?,?&gt;"
  syntax: "public Mono<CosmosContainerResponse> createContainerIfNotExists(CosmosEntityInformation<?,?> information)"
  desc: "Creates a container if it doesn't already exist"
  returns:
    description: "Mono containing CosmosContainerResponse"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.deleteAll(java.lang.String,java.lang.Class<?>)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.deleteAll(String containerName, Class<?> domainType)"
  name: "deleteAll(String containerName, Class<?> domainType)"
  nameWithType: "ReactiveCosmosTemplate.deleteAll(String containerName, Class<?> domainType)"
  summary: "Delete all items in a container"
  parameters:
  - description: "the container name"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "the domainType"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;?&gt;"
  syntax: "public Mono<Void> deleteAll(String containerName, Class<?> domainType)"
  desc: "Delete all items in a container"
  returns:
    description: "void Mono"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.deleteById(java.lang.String,java.lang.Object,com.azure.cosmos.models.PartitionKey)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.deleteById(String containerName, Object id, PartitionKey partitionKey)"
  name: "deleteById(String containerName, Object id, PartitionKey partitionKey)"
  nameWithType: "ReactiveCosmosTemplate.deleteById(String containerName, Object id, PartitionKey partitionKey)"
  summary: "Deletes the item with id and partition key."
  parameters:
  - description: "Container name of database"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "item id"
    name: "id"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  - description: "the partition key"
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteById(String containerName, Object id, PartitionKey partitionKey)"
  desc: "Deletes the item with id and partition key."
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.deleteContainer(java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.deleteContainer(String containerName)"
  name: "deleteContainer(String containerName)"
  nameWithType: "ReactiveCosmosTemplate.deleteContainer(String containerName)"
  summary: "Delete container with container name"
  parameters:
  - description: "the container name"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void deleteContainer(String containerName)"
  desc: "Delete container with container name"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.exists(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<?>,java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.exists(CosmosQuery query, Class<?> domainType, String containerName)"
  name: "exists(CosmosQuery query, Class<?> domainType, String containerName)"
  nameWithType: "ReactiveCosmosTemplate.exists(CosmosQuery query, Class<?> domainType, String containerName)"
  summary: "Exists"
  parameters:
  - description: "the document query"
    name: "query"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.query.CosmosQuery?alt=com.azure.spring.data.cosmos.core.query.CosmosQuery&text=CosmosQuery\" data-throw-if-not-resolved=\"False\" />"
  - description: "the entity class"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;?&gt;"
  - description: "the container name"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Boolean> exists(CosmosQuery query, Class<?> domainType, String containerName)"
  desc: "Exists"
  returns:
    description: "Mono with a boolean or error"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.existsById(java.lang.Object,java.lang.Class<?>,java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.existsById(Object id, Class<?> domainType, String containerName)"
  name: "existsById(Object id, Class<?> domainType, String containerName)"
  nameWithType: "ReactiveCosmosTemplate.existsById(Object id, Class<?> domainType, String containerName)"
  summary: "Exists"
  parameters:
  - description: "the id"
    name: "id"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  - description: "the entity class"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;?&gt;"
  - description: "the container name"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Boolean> existsById(Object id, Class<?> domainType, String containerName)"
  desc: "Exists"
  returns:
    description: "Mono with a boolean or error"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.getContainerName(java.lang.Class<?>)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.getContainerName(Class<?> domainType)"
  name: "getContainerName(Class<?> domainType)"
  nameWithType: "ReactiveCosmosTemplate.getContainerName(Class<?> domainType)"
  summary: "Get container name"
  parameters:
  - name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;?&gt;"
  syntax: "public String getContainerName(Class<?> domainType)"
  desc: "Get container name"
  returns:
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.getContainerNameOverride(java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.getContainerNameOverride(String containerName)"
  name: "getContainerNameOverride(String containerName)"
  nameWithType: "ReactiveCosmosTemplate.getContainerNameOverride(String containerName)"
  summary: "Check if an overridden version of container<wbr>Name is present, and if so, return it"
  parameters:
  - description: "Container name of database"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public String getContainerNameOverride(String containerName)"
  desc: "Check if an overridden version of containerName is present, and if so, return it"
  returns:
    description: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.getContainerProperties(java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.getContainerProperties(String containerName)"
  name: "getContainerProperties(String containerName)"
  nameWithType: "ReactiveCosmosTemplate.getContainerProperties(String containerName)"
  summary: "Get properties for specified container"
  parameters:
  - name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<CosmosContainerProperties> getContainerProperties(String containerName)"
  desc: "Get properties for specified container"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.getConverter()"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.getConverter()"
  name: "getConverter()"
  nameWithType: "ReactiveCosmosTemplate.getConverter()"
  summary: "To get converter"
  syntax: "public MappingCosmosConverter getConverter()"
  desc: "To get converter"
  returns:
    type: "<xref href=\"com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter?alt=com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter&text=MappingCosmosConverter\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.replaceContainerProperties(java.lang.String,com.azure.cosmos.models.CosmosContainerProperties)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.replaceContainerProperties(String containerName, CosmosContainerProperties properties)"
  name: "replaceContainerProperties(String containerName, CosmosContainerProperties properties)"
  nameWithType: "ReactiveCosmosTemplate.replaceContainerProperties(String containerName, CosmosContainerProperties properties)"
  summary: "Replace container properties for the specified container"
  parameters:
  - name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - name: "properties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosContainerProperties> replaceContainerProperties(String containerName, CosmosContainerProperties properties)"
  desc: "Replace container properties for the specified container"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.setApplicationContext(org.springframework.context.ApplicationContext)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.setApplicationContext(ApplicationContext applicationContext)"
  name: "setApplicationContext(ApplicationContext applicationContext)"
  nameWithType: "ReactiveCosmosTemplate.setApplicationContext(ApplicationContext applicationContext)"
  parameters:
  - description: "the application context"
    name: "applicationContext"
    type: "<xref href=\"org.springframework.context.ApplicationContext?alt=org.springframework.context.ApplicationContext&text=ApplicationContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setApplicationContext(ApplicationContext applicationContext)"
  exceptions:
  - description: "the bean exception"
    type: "<xref href=\"org.springframework.beans.BeansException?alt=org.springframework.beans.BeansException&text=BeansException\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Template class of reactive cosmos"
implements:
- "<xref href=\"com.azure.spring.data.cosmos.core.ReactiveCosmosOperations?alt=com.azure.spring.data.cosmos.core.ReactiveCosmosOperations&text=ReactiveCosmosOperations\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"org.springframework.context.ApplicationContextAware?alt=org.springframework.context.ApplicationContextAware&text=ApplicationContextAware\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.spring.data.cosmos.core"
artifact: com.azure:azure-spring-data-cosmos:5.19.0
