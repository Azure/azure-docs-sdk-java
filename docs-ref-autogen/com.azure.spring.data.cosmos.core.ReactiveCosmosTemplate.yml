### YamlMime:JavaType
uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate"
fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate"
name: "ReactiveCosmosTemplate"
nameWithType: "ReactiveCosmosTemplate"
summary: "Template class of reactive cosmos"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class ReactiveCosmosTemplate implements ReactiveCosmosOperations, ApplicationContextAware"
constructors:
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.ReactiveCosmosTemplate(com.azure.cosmos.CosmosAsyncClient,java.lang.String,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.ReactiveCosmosTemplate(com.azure.cosmos.CosmosAsyncClient,java.lang.String,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter,org.springframework.data.auditing.IsNewAwareAuditingHandler)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.ReactiveCosmosTemplate(com.azure.spring.data.cosmos.CosmosFactory,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.ReactiveCosmosTemplate(com.azure.spring.data.cosmos.CosmosFactory,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter,org.springframework.data.auditing.IsNewAwareAuditingHandler)"
methods:
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>delete(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>deleteEntity(java.lang.String,T)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>find(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>findAll(com.azure.cosmos.models.PartitionKey,java.lang.Class<T>)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>findAll(java.lang.Class<T>)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>findAll(java.lang.String,java.lang.Class<T>)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>findById(java.lang.Object,java.lang.Class<T>)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>findById(java.lang.Object,java.lang.Class<T>,com.azure.cosmos.models.PartitionKey)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>findById(java.lang.String,java.lang.Object,java.lang.Class<T>)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>insert(T)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>insert(T,com.azure.cosmos.models.PartitionKey)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>insert(java.lang.String,T)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>insert(java.lang.String,java.lang.Object,com.azure.cosmos.models.PartitionKey)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>runQuery(com.azure.cosmos.models.SqlQuerySpec,java.lang.Class<?>,java.lang.Class<T>)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>upsert(T)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.<T>upsert(java.lang.String,T)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.count(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.String)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.count(java.lang.String)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.createContainerIfNotExists(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<?,?>)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.deleteAll(java.lang.String,java.lang.Class<?>)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.deleteById(java.lang.String,java.lang.Object,com.azure.cosmos.models.PartitionKey)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.deleteContainer(java.lang.String)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.exists(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<?>,java.lang.String)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.existsById(java.lang.Object,java.lang.Class<?>,java.lang.String)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.getContainerName(java.lang.Class<?>)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.getContainerProperties(java.lang.String)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.getConverter()"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.replaceContainerProperties(java.lang.String,com.azure.cosmos.models.CosmosContainerProperties)"
- "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.setApplicationContext(org.springframework.context.ApplicationContext)"
type: "class"
implements:
- "<xref href=\"com.azure.spring.data.cosmos.core.ReactiveCosmosOperations?alt=com.azure.spring.data.cosmos.core.ReactiveCosmosOperations&text=ReactiveCosmosOperations\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"org.springframework.context.ApplicationContextAware?alt=org.springframework.context.ApplicationContextAware&text=ApplicationContextAware\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.spring.data.cosmos.core"
artifact: com.azure:azure-spring-data-cosmos:3.3.0
