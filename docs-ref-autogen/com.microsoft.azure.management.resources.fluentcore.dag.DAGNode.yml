### YamlMime:JavaType
uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode"
fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT,NodeT>"
name: "DAGNode<DataT,NodeT>"
nameWithType: "DAGNode<DataT,NodeT>"
summary: "The type representing node in a <xref uid=\"com.microsoft.azure.management.resources.fluentcore.dag.DAGraph\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DAGraph\"></xref>."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.dag.Node?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.microsoft.azure.management.resources.fluentcore.dag.Node.addChild(java.lang.String)"
- "com.microsoft.azure.management.resources.fluentcore.dag.Node.children()"
- "com.microsoft.azure.management.resources.fluentcore.dag.Node.data()"
- "com.microsoft.azure.management.resources.fluentcore.dag.Node.hasChildren()"
- "com.microsoft.azure.management.resources.fluentcore.dag.Node.key()"
- "com.microsoft.azure.management.resources.fluentcore.dag.Node.owner()"
- "com.microsoft.azure.management.resources.fluentcore.dag.Node.removeChild(java.lang.String)"
- "com.microsoft.azure.management.resources.fluentcore.dag.Node.setOwner(com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class DAGNode<DataT,NodeT> extends Node<DataT,NodeT>"
constructors:
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.DAGNode(java.lang.String,DataT)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT,NodeT>.DAGNode(String key, DataT data)"
  name: "DAGNode(String key, DataT data)"
  nameWithType: "DAGNode<DataT,NodeT>.DAGNode(String key, DataT data)"
  summary: "Creates a DAG node."
  parameters:
  - description: "unique id of the node"
    name: "key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "data to be stored in the node"
    name: "data"
    type: "<xref href=\"DataT?alt=DataT&text=DataT\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DAGNode(String key, DataT data)"
  desc: "Creates a DAG node."
methods:
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.addDependency(java.lang.String)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT,NodeT>.addDependency(String dependencyKey)"
  name: "addDependency(String dependencyKey)"
  nameWithType: "DAGNode<DataT,NodeT>.addDependency(String dependencyKey)"
  summary: "Mark the node identified by the given key as this node's dependency."
  parameters:
  - description: "the id of the dependency node"
    name: "dependencyKey"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void addDependency(String dependencyKey)"
  desc: "Mark the node identified by the given key as this node's dependency."
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.addDependent(java.lang.String)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT,NodeT>.addDependent(String key)"
  name: "addDependent(String key)"
  nameWithType: "DAGNode<DataT,NodeT>.addDependent(String key)"
  summary: "Mark the node identified by the given key as dependent of this node."
  parameters:
  - description: "the id of the dependent node"
    name: "key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void addDependent(String key)"
  desc: "Mark the node identified by the given key as dependent of this node."
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.dependencyKeys()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT,NodeT>.dependencyKeys()"
  name: "dependencyKeys()"
  nameWithType: "DAGNode<DataT,NodeT>.dependencyKeys()"
  syntax: "public List<String> dependencyKeys()"
  returns:
    description: "a list of keys of nodes in <xref uid=\"com.microsoft.azure.management.resources.fluentcore.dag.DAGraph\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DAGraph\"></xref> that this node depends on"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.hasDependencies()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT,NodeT>.hasDependencies()"
  name: "hasDependencies()"
  nameWithType: "DAGNode<DataT,NodeT>.hasDependencies()"
  syntax: "public boolean hasDependencies()"
  returns:
    description: "true if this node has any dependency"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.initialize()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT,NodeT>.initialize()"
  name: "initialize()"
  nameWithType: "DAGNode<DataT,NodeT>.initialize()"
  summary: "Initialize the node so that traversal can be performed on the parent DAG."
  syntax: "public void initialize()"
  desc: "Initialize the node so that traversal can be performed on the parent DAG."
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.isPreparer()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT,NodeT>.isPreparer()"
  name: "isPreparer()"
  nameWithType: "DAGNode<DataT,NodeT>.isPreparer()"
  syntax: "public boolean isPreparer()"
  returns:
    description: "true if this node is marked as preparer"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.lock()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT,NodeT>.lock()"
  name: "lock()"
  nameWithType: "DAGNode<DataT,NodeT>.lock()"
  syntax: "public ReentrantLock lock()"
  returns:
    description: "the lock to be used while performing thread safe operation on this node."
    type: "<xref href=\"java.util.concurrent.locks.ReentrantLock?alt=java.util.concurrent.locks.ReentrantLock&text=ReentrantLock\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.onFaultedResolution(java.lang.String,java.lang.Throwable)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT,NodeT>.onFaultedResolution(String dependencyKey, Throwable throwable)"
  name: "onFaultedResolution(String dependencyKey, Throwable throwable)"
  nameWithType: "DAGNode<DataT,NodeT>.onFaultedResolution(String dependencyKey, Throwable throwable)"
  summary: "Reports a dependency of this node has been faulted."
  modifiers:
  - "protected"
  parameters:
  - description: "the id of the dependency node"
    name: "dependencyKey"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the reason for unsuccessful resolution"
    name: "throwable"
    type: "<xref href=\"java.lang.Throwable?alt=java.lang.Throwable&text=Throwable\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected void onFaultedResolution(String dependencyKey, Throwable throwable)"
  desc: "Reports a dependency of this node has been faulted."
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.onSuccessfulResolution(java.lang.String)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT,NodeT>.onSuccessfulResolution(String dependencyKey)"
  name: "onSuccessfulResolution(String dependencyKey)"
  nameWithType: "DAGNode<DataT,NodeT>.onSuccessfulResolution(String dependencyKey)"
  summary: "Reports a dependency of this node has been successfully resolved."
  modifiers:
  - "protected"
  parameters:
  - description: "the id of the dependency node"
    name: "dependencyKey"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected void onSuccessfulResolution(String dependencyKey)"
  desc: "Reports a dependency of this node has been successfully resolved."
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.removeDependency(java.lang.String)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT,NodeT>.removeDependency(String dependencyKey)"
  name: "removeDependency(String dependencyKey)"
  nameWithType: "DAGNode<DataT,NodeT>.removeDependency(String dependencyKey)"
  summary: "Remove the dependency node identified by the given key from the dependencies."
  parameters:
  - description: "the id of the dependency node"
    name: "dependencyKey"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void removeDependency(String dependencyKey)"
  desc: "Remove the dependency node identified by the given key from the dependencies."
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.setPreparer(boolean)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT,NodeT>.setPreparer(boolean isPreparer)"
  name: "setPreparer(boolean isPreparer)"
  nameWithType: "DAGNode<DataT,NodeT>.setPreparer(boolean isPreparer)"
  summary: "Mark or un-mark this node as preparer."
  parameters:
  - description: "true if this node needs to be marked as preparer, false otherwise."
    name: "isPreparer"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setPreparer(boolean isPreparer)"
  desc: "Mark or un-mark this node as preparer."
type: "class"
typeParameters:
- description: "the type of the data stored in the node"
  name: "DataT"
- description: "the type of the node"
  name: "NodeT"
desc: "The type representing node in a <xref uid=\"com.microsoft.azure.management.resources.fluentcore.dag.DAGraph\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DAGraph\"></xref>."
metadata: {}
package: "com.microsoft.azure.management.resources.fluentcore.dag"
artifact: com.microsoft.azure:azure-mgmt-resources:1.41.4
