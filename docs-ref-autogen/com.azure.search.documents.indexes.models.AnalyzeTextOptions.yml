### YamlMime:JavaType
uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions"
fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions"
name: "AnalyzeTextOptions"
nameWithType: "AnalyzeTextOptions"
summary: "Specifies some text and analysis components used to break that text into tokens."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class AnalyzeTextOptions"
constructors:
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(java.lang.String,com.azure.search.documents.indexes.models.LexicalAnalyzerName)"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalAnalyzerName analyzerName)"
  name: "AnalyzeTextOptions(String text, LexicalAnalyzerName analyzerName)"
  nameWithType: "AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalAnalyzerName analyzerName)"
  summary: "Constructor to <xref uid=\"com.azure.search.documents.indexes.models.AnalyzeTextOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeTextOptions\"></xref> which takes analyzerName."
  parameters:
  - description: "The text break into tokens."
    name: "text"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the analyzer to use to break the\n given text. If this parameter is not specified, you must specify a\n tokenizer instead. The tokenizer and analyzer parameters are mutually\n exclusive. Possible values include: 'ArMicrosoft', 'ArLucene',\n 'HyLucene', 'BnMicrosoft', 'EuLucene', 'BgMicrosoft', 'BgLucene',\n 'CaMicrosoft', 'CaLucene', 'ZhHansMicrosoft', 'ZhHansLucene',\n 'ZhHantMicrosoft', 'ZhHantLucene', 'HrMicrosoft', 'CsMicrosoft',\n 'CsLucene', 'DaMicrosoft', 'DaLucene', 'NlMicrosoft', 'NlLucene',\n 'EnMicrosoft', 'EnLucene', 'EtMicrosoft', 'FiMicrosoft', 'FiLucene',\n 'FrMicrosoft', 'FrLucene', 'GlLucene', 'DeMicrosoft', 'DeLucene',\n 'ElMicrosoft', 'ElLucene', 'GuMicrosoft', 'HeMicrosoft', 'HiMicrosoft',\n 'HiLucene', 'HuMicrosoft', 'HuLucene', 'IsMicrosoft', 'IdMicrosoft',\n 'IdLucene', 'GaLucene', 'ItMicrosoft', 'ItLucene', 'JaMicrosoft',\n 'JaLucene', 'KnMicrosoft', 'KoMicrosoft', 'KoLucene', 'LvMicrosoft',\n 'LvLucene', 'LtMicrosoft', 'MlMicrosoft', 'MsMicrosoft', 'MrMicrosoft',\n 'NbMicrosoft', 'NoLucene', 'FaLucene', 'PlMicrosoft', 'PlLucene',\n 'PtBrMicrosoft', 'PtBrLucene', 'PtPtMicrosoft', 'PtPtLucene',\n 'PaMicrosoft', 'RoMicrosoft', 'RoLucene', 'RuMicrosoft', 'RuLucene',\n 'SrCyrillicMicrosoft', 'SrLatinMicrosoft', 'SkMicrosoft', 'SlMicrosoft',\n 'EsMicrosoft', 'EsLucene', 'SvMicrosoft', 'SvLucene', 'TaMicrosoft',\n 'TeMicrosoft', 'ThMicrosoft', 'ThLucene', 'TrMicrosoft', 'TrLucene',\n 'UkMicrosoft', 'UrMicrosoft', 'ViMicrosoft', 'StandardLucene',\n 'StandardAsciiFoldingLucene', 'Keyword', 'Pattern', 'Simple', 'Stop',\n 'Whitespace'."
    name: "analyzerName"
    type: "<xref href=\"com.azure.search.documents.indexes.models.LexicalAnalyzerName?alt=com.azure.search.documents.indexes.models.LexicalAnalyzerName&text=LexicalAnalyzerName\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AnalyzeTextOptions(String text, LexicalAnalyzerName analyzerName)"
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(java.lang.String,com.azure.search.documents.indexes.models.LexicalTokenizerName)"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalTokenizerName tokenizerName)"
  name: "AnalyzeTextOptions(String text, LexicalTokenizerName tokenizerName)"
  nameWithType: "AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalTokenizerName tokenizerName)"
  summary: "Constructor to <xref uid=\"com.azure.search.documents.indexes.models.AnalyzeTextOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeTextOptions\"></xref> which takes tokenizerName."
  parameters:
  - description: "The text break into tokens."
    name: "text"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the tokenizer to use to break\n the given text. If this parameter is not specified, you must specify an\n analyzer instead. The tokenizer and analyzer parameters are mutually\n exclusive. Possible values include: 'Classic', 'EdgeNGram', 'Keyword',\n 'Letter', 'Lowercase', 'MicrosoftLanguageTokenizer',\n 'MicrosoftLanguageStemmingTokenizer', 'NGram', 'PathHierarchy',\n 'Pattern', 'Standard', 'UaxUrlEmail', 'Whitespace'."
    name: "tokenizerName"
    type: "<xref href=\"com.azure.search.documents.indexes.models.LexicalTokenizerName?alt=com.azure.search.documents.indexes.models.LexicalTokenizerName&text=LexicalTokenizerName\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AnalyzeTextOptions(String text, LexicalTokenizerName tokenizerName)"
methods:
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getAnalyzerName()"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getAnalyzerName()"
  name: "getAnalyzerName()"
  nameWithType: "AnalyzeTextOptions.getAnalyzerName()"
  summary: "Get the analyzer property: The name of the analyzer to use to break the given text. If this parameter is not specified, you must specify a tokenizer instead. The tokenizer and analyzer parameters are mutually exclusive. Possible values include: 'ArMicrosoft', 'ArLucene', 'HyLucene', 'BnMicrosoft', 'EuLucene', 'BgMicrosoft', 'BgLucene', 'CaMicrosoft', 'CaLucene', 'ZhHansMicrosoft', 'ZhHansLucene', 'ZhHantMicrosoft', 'ZhHantLucene', 'HrMicrosoft', 'CsMicrosoft', 'CsLucene', 'DaMicrosoft', 'DaLucene', 'NlMicrosoft', 'NlLucene', 'EnMicrosoft', 'EnLucene', 'EtMicrosoft', 'FiMicrosoft', 'FiLucene', 'FrMicrosoft', 'FrLucene', 'GlLucene', 'DeMicrosoft', 'DeLucene', 'ElMicrosoft', 'ElLucene', 'GuMicrosoft', 'HeMicrosoft', 'HiMicrosoft', 'HiLucene', 'HuMicrosoft', 'HuLucene', 'IsMicrosoft', 'IdMicrosoft', 'IdLucene', 'GaLucene', 'ItMicrosoft', 'ItLucene', 'JaMicrosoft', 'JaLucene', 'KnMicrosoft', 'KoMicrosoft', 'KoLucene', 'LvMicrosoft', 'LvLucene', 'LtMicrosoft', 'MlMicrosoft', 'MsMicrosoft', 'MrMicrosoft', 'NbMicrosoft', 'NoLucene', 'FaLucene', 'PlMicrosoft', 'PlLucene', 'PtBrMicrosoft', 'PtBrLucene', 'PtPtMicrosoft', 'PtPtLucene', 'PaMicrosoft', 'RoMicrosoft', 'RoLucene', 'RuMicrosoft', 'RuLucene', 'SrCyrillicMicrosoft', 'SrLatinMicrosoft', 'SkMicrosoft', 'SlMicrosoft', 'EsMicrosoft', 'EsLucene', 'SvMicrosoft', 'SvLucene', 'TaMicrosoft', 'TeMicrosoft', 'ThMicrosoft', 'ThLucene', 'TrMicrosoft', 'TrLucene', 'UkMicrosoft', 'UrMicrosoft', 'ViMicrosoft', 'StandardLucene', 'StandardAsciiFoldingLucene', 'Keyword', 'Pattern', 'Simple', 'Stop', 'Whitespace'."
  syntax: "public LexicalAnalyzerName getAnalyzerName()"
  returns:
    description: "the analyzer value."
    type: "<xref href=\"com.azure.search.documents.indexes.models.LexicalAnalyzerName?alt=com.azure.search.documents.indexes.models.LexicalAnalyzerName&text=LexicalAnalyzerName\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getCharFilters()"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getCharFilters()"
  name: "getCharFilters()"
  nameWithType: "AnalyzeTextOptions.getCharFilters()"
  summary: "Get the charFilters property: An optional list of character filters to use when breaking the given text. This parameter can only be set when using the tokenizer parameter."
  syntax: "public List<CharFilterName> getCharFilters()"
  returns:
    description: "the charFilters value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.CharFilterName?alt=com.azure.search.documents.indexes.models.CharFilterName&text=CharFilterName\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getText()"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getText()"
  name: "getText()"
  nameWithType: "AnalyzeTextOptions.getText()"
  summary: "Get the text property: The text to break into tokens."
  syntax: "public String getText()"
  returns:
    description: "the text value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getTokenFilters()"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getTokenFilters()"
  name: "getTokenFilters()"
  nameWithType: "AnalyzeTextOptions.getTokenFilters()"
  summary: "Get the tokenFilters property: An optional list of token filters to use when breaking the given text. This parameter can only be set when using the tokenizer parameter."
  syntax: "public List<TokenFilterName> getTokenFilters()"
  returns:
    description: "the tokenFilters value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.TokenFilterName?alt=com.azure.search.documents.indexes.models.TokenFilterName&text=TokenFilterName\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getTokenizerName()"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getTokenizerName()"
  name: "getTokenizerName()"
  nameWithType: "AnalyzeTextOptions.getTokenizerName()"
  summary: "Get the tokenizer property: The name of the tokenizer to use to break the given text. If this parameter is not specified, you must specify an analyzer instead. The tokenizer and analyzer parameters are mutually exclusive. Possible values include: 'Classic', 'EdgeNGram', 'Keyword', 'Letter', 'Lowercase', 'MicrosoftLanguageTokenizer', 'MicrosoftLanguageStemmingTokenizer', 'NGram', 'PathHierarchy', 'Pattern', 'Standard', 'UaxUrlEmail', 'Whitespace'."
  syntax: "public LexicalTokenizerName getTokenizerName()"
  returns:
    description: "the tokenizer value."
    type: "<xref href=\"com.azure.search.documents.indexes.models.LexicalTokenizerName?alt=com.azure.search.documents.indexes.models.LexicalTokenizerName&text=LexicalTokenizerName\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.setCharFilters(com.azure.search.documents.indexes.models.CharFilterName...)"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.setCharFilters(CharFilterName[] charFilters)"
  name: "setCharFilters(CharFilterName[] charFilters)"
  nameWithType: "AnalyzeTextOptions.setCharFilters(CharFilterName[] charFilters)"
  summary: "Set the charFilters property: An optional list of character filters to use when breaking the given text. This parameter can only be set when using the tokenizer parameter."
  parameters:
  - description: "the charFilters value to set."
    name: "charFilters"
    type: "<xref href=\"com.azure.search.documents.indexes.models.CharFilterName?alt=com.azure.search.documents.indexes.models.CharFilterName&text=CharFilterName\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public AnalyzeTextOptions setCharFilters(CharFilterName[] charFilters)"
  returns:
    description: "the AnalyzeRequest object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.AnalyzeTextOptions?alt=com.azure.search.documents.indexes.models.AnalyzeTextOptions&text=AnalyzeTextOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.setTokenFilters(com.azure.search.documents.indexes.models.TokenFilterName...)"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.setTokenFilters(TokenFilterName[] tokenFilters)"
  name: "setTokenFilters(TokenFilterName[] tokenFilters)"
  nameWithType: "AnalyzeTextOptions.setTokenFilters(TokenFilterName[] tokenFilters)"
  summary: "Set the tokenFilters property: An optional list of token filters to use when breaking the given text. This parameter can only be set when using the tokenizer parameter."
  parameters:
  - description: "the tokenFilters value to set."
    name: "tokenFilters"
    type: "<xref href=\"com.azure.search.documents.indexes.models.TokenFilterName?alt=com.azure.search.documents.indexes.models.TokenFilterName&text=TokenFilterName\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public AnalyzeTextOptions setTokenFilters(TokenFilterName[] tokenFilters)"
  returns:
    description: "the AnalyzeRequest object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.AnalyzeTextOptions?alt=com.azure.search.documents.indexes.models.AnalyzeTextOptions&text=AnalyzeTextOptions\" data-throw-if-not-resolved=\"False\" />"
type: "class"
metadata: {}
package: "com.azure.search.documents.indexes.models"
artifact: com.azure:azure-search-documents:11.4.9
