### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.services.remoting.builder.ServiceCodeBuilder.ServiceCodeBuilder()
  name: ServiceCodeBuilder()
  nameWithType: ServiceCodeBuilder.ServiceCodeBuilder()
  syntax: protected ServiceCodeBuilder()
  uid: microsoft.servicefabric.services.remoting.builder.ServiceCodeBuilder.ServiceCodeBuilder()
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.services.remoting.builder.CodeBuilder?alt=microsoft.servicefabric.services.remoting.builder.CodeBuilder&text=CodeBuilder" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.services.remoting.builder.CodeBuilderBase?alt=microsoft.servicefabric.services.remoting.builder.CodeBuilderBase&text=CodeBuilderBase" data-throw-if-not-resolved="False"/>
inheritedMembers:
- microsoft.servicefabric.services.remoting.builder.CodeBuilderBase.CodeBuilderBase(CodeBuilderNamesBase)
- microsoft.servicefabric.services.remoting.builder.CodeBuilderBase.getNames()
- microsoft.servicefabric.services.remoting.builder.CodeBuilderBase.getOrBuildMethodBodyTypes(Class<?>)
- microsoft.servicefabric.services.remoting.builder.CodeBuilderBase.getOrBuildMethodDispatcher(Class<?>)
- microsoft.servicefabric.services.remoting.builder.CodeBuilderBase.getOrBuildProxyGenerator(Class<?>)
methods:
- fullName: microsoft.servicefabric.services.remoting.builder.ServiceCodeBuilder.buildMethodBodyTypes(Class<?> interfaceType)
  name: buildMethodBodyTypes(Class<?> interfaceType)
  nameWithType: ServiceCodeBuilder.buildMethodBodyTypes(Class<?> interfaceType)
  parameters:
  - name: interfaceType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="MethodBodyTypesBuildResult?alt=MethodBodyTypesBuildResult&text=MethodBodyTypesBuildResult" data-throw-if-not-resolved="False"/>
  syntax: protected MethodBodyTypesBuildResult buildMethodBodyTypes(Class<?> interfaceType)
  uid: microsoft.servicefabric.services.remoting.builder.ServiceCodeBuilder.buildMethodBodyTypes(Class<?>)
- fullName: microsoft.servicefabric.services.remoting.builder.ServiceCodeBuilder.buildMethodDispatcher(Class<?> interfaceType)
  name: buildMethodDispatcher(Class<?> interfaceType)
  nameWithType: ServiceCodeBuilder.buildMethodDispatcher(Class<?> interfaceType)
  parameters:
  - name: interfaceType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="microsoft.servicefabric.services.remoting.builder.MethodDispatcherBuildResult?alt=microsoft.servicefabric.services.remoting.builder.MethodDispatcherBuildResult&text=MethodDispatcherBuildResult" data-throw-if-not-resolved="False"/>
  syntax: protected MethodDispatcherBuildResult buildMethodDispatcher(Class<?> interfaceType)
  uid: microsoft.servicefabric.services.remoting.builder.ServiceCodeBuilder.buildMethodDispatcher(Class<?>)
- fullName: microsoft.servicefabric.services.remoting.builder.ServiceCodeBuilder.buildProxyGenerator(Class<?> interfaceType)
  name: buildProxyGenerator(Class<?> interfaceType)
  nameWithType: ServiceCodeBuilder.buildProxyGenerator(Class<?> interfaceType)
  parameters:
  - name: interfaceType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuildResult?alt=microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuildResult&text=ProxyGeneratorBuildResult" data-throw-if-not-resolved="False"/>
  syntax: protected ProxyGeneratorBuildResult buildProxyGenerator(Class<?> interfaceType)
  uid: microsoft.servicefabric.services.remoting.builder.ServiceCodeBuilder.buildProxyGenerator(Class<?>)
- fullName: microsoft.servicefabric.services.remoting.builder.ServiceCodeBuilder.getOrCreateMethodDispatcher(Class<?> serviceInterfaceType)
  name: getOrCreateMethodDispatcher(Class<?> serviceInterfaceType)
  nameWithType: ServiceCodeBuilder.getOrCreateMethodDispatcher(Class<?> serviceInterfaceType)
  parameters:
  - name: serviceInterfaceType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="microsoft.servicefabric.services.remoting.builder.ServiceMethodDispatcherBase?alt=microsoft.servicefabric.services.remoting.builder.ServiceMethodDispatcherBase&text=ServiceMethodDispatcherBase" data-throw-if-not-resolved="False"/>
  syntax: public static ServiceMethodDispatcherBase getOrCreateMethodDispatcher(Class<?> serviceInterfaceType)
  uid: microsoft.servicefabric.services.remoting.builder.ServiceCodeBuilder.getOrCreateMethodDispatcher(Class<?>)
- fullName: microsoft.servicefabric.services.remoting.builder.ServiceCodeBuilder.getOrCreateProxyGenerator(Class<?> serviceInterfaceType)
  name: getOrCreateProxyGenerator(Class<?> serviceInterfaceType)
  nameWithType: ServiceCodeBuilder.getOrCreateProxyGenerator(Class<?> serviceInterfaceType)
  parameters:
  - name: serviceInterfaceType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="microsoft.servicefabric.services.remoting.builder.ServiceProxyGenerator?alt=microsoft.servicefabric.services.remoting.builder.ServiceProxyGenerator&text=ServiceProxyGenerator" data-throw-if-not-resolved="False"/>
  syntax: public static ServiceProxyGenerator getOrCreateProxyGenerator(Class<?> serviceInterfaceType)
  uid: microsoft.servicefabric.services.remoting.builder.ServiceCodeBuilder.getOrCreateProxyGenerator(Class<?>)
nameWithType: ServiceCodeBuilder
syntax: public class ServiceCodeBuilder extends CodeBuilderBase
type: class
uid: microsoft.servicefabric.services.remoting.builder.ServiceCodeBuilder
fullName: microsoft.servicefabric.services.remoting.builder.ServiceCodeBuilder
name: ServiceCodeBuilder
package: microsoft.servicefabric.services.remoting.builder
summary: <p>Used to create service proxy object and method dispatcher object. For internal use only. </p>
metadata: {}
