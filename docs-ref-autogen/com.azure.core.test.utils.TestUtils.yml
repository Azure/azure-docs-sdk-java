### YamlMime:JavaType
uid: "com.azure.core.test.utils.TestUtils"
fullName: "com.azure.core.test.utils.TestUtils"
name: "TestUtils"
nameWithType: "TestUtils"
summary: "Contains utility methods used for testing."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **TestUtils**"
methods:
- uid: "com.azure.core.test.utils.TestUtils.assertArraysEqual(byte[],byte[])"
  fullName: "com.azure.core.test.utils.TestUtils.assertArraysEqual(byte[] expected, byte[] actual)"
  name: "assertArraysEqual(byte[] expected, byte[] actual)"
  nameWithType: "TestUtils.assertArraysEqual(byte[] expected, byte[] actual)"
  summary: "Asserts that two arrays are equal."
  modifiers:
  - "static"
  parameters:
  - description: "The expected byte array."
    name: "expected"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "The actual byte array."
    name: "actual"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public static void assertArraysEqual(byte[] expected, byte[] actual)"
  desc: "Asserts that two arrays are equal.\n\nThis method is similar to JUnit's <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Assertions#assertArrayEquals(byte[], byte[])\"></xref> except that it takes advantage of hardware intrinsics offered by the JDK to optimize comparing the byte arrays.\n\nIf the arrays aren't equal this will call <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Assertions#assertArrayEquals(byte[], byte[])\"></xref> to take advantage of the better error message, but this is the exceptional case and worth the double comparison performance hit."
- uid: "com.azure.core.test.utils.TestUtils.assertArraysEqual(byte[],int,byte[],int,int)"
  fullName: "com.azure.core.test.utils.TestUtils.assertArraysEqual(byte[] expected, int expectedOffset, byte[] actual, int actualOffset, int length)"
  name: "assertArraysEqual(byte[] expected, int expectedOffset, byte[] actual, int actualOffset, int length)"
  nameWithType: "TestUtils.assertArraysEqual(byte[] expected, int expectedOffset, byte[] actual, int actualOffset, int length)"
  summary: "Asserts that two arrays are equal."
  modifiers:
  - "static"
  parameters:
  - description: "The expected byte array."
    name: "expected"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Starting offset to begin comparing in the expected array."
    name: "expectedOffset"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "The actual byte array."
    name: "actual"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Starting offset to begin comparing in the actual array."
    name: "actualOffset"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Amount of bytes to compare."
    name: "length"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static void assertArraysEqual(byte[] expected, int expectedOffset, byte[] actual, int actualOffset, int length)"
  desc: "Asserts that two arrays are equal.\n\nThis method is similar to JUnit's <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Assertions#assertArrayEquals(byte[], byte[])\"></xref> except that it takes advantage of hardware intrinsics offered by the JDK to optimize comparing the byte arrays and allows for comparing subsections of the arrays.\n\nIf the arrays aren't equal this will copy the array ranges and call <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Assertions#assertArrayEquals(byte[], byte[])\"></xref> to take advantage of the better error message, but this is the exceptional case and worth the double comparison performance hit."
- uid: "com.azure.core.test.utils.TestUtils.assertByteBuffersEqual(java.nio.ByteBuffer,java.nio.ByteBuffer)"
  fullName: "com.azure.core.test.utils.TestUtils.assertByteBuffersEqual(ByteBuffer expected, ByteBuffer actual)"
  name: "assertByteBuffersEqual(ByteBuffer expected, ByteBuffer actual)"
  nameWithType: "TestUtils.assertByteBuffersEqual(ByteBuffer expected, ByteBuffer actual)"
  summary: "Asserts that two <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffers\"></xref> are equal."
  modifiers:
  - "static"
  parameters:
  - description: "The expected <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref>."
    name: "expected"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html\">ByteBuffer</a>"
  - description: "The actual <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref>."
    name: "actual"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html\">ByteBuffer</a>"
  syntax: "public static void assertByteBuffersEqual(ByteBuffer expected, ByteBuffer actual)"
  desc: "Asserts that two <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffers\"></xref> are equal.\n\nThis method is similar to JUnit's <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Assertions#assertArrayEquals(byte[], byte[])\"></xref> except that it takes advantage of hardware intrinsics offered by the JDK to optimize comparing the ByteBuffers.\n\nIf the ByteBuffers aren't equal this will copy the ByteBuffer contents into byte arrays and call <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Assertions#assertArrayEquals(byte[], byte[])\"></xref> to take advantage of the better error message, but this is the exceptional case and worth the double comparison performance hit."
- uid: "com.azure.core.test.utils.TestUtils.getFaultInjectingHttpClient(com.azure.core.http.HttpClient,boolean)"
  fullName: "com.azure.core.test.utils.TestUtils.getFaultInjectingHttpClient(HttpClient clientToWrap, boolean useHttps)"
  name: "getFaultInjectingHttpClient(HttpClient clientToWrap, boolean useHttps)"
  nameWithType: "TestUtils.getFaultInjectingHttpClient(HttpClient clientToWrap, boolean useHttps)"
  summary: "Wraps an <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClient\"></xref> to make calls to [HTTP fault injector][] to test random network failures.\n\n\n[HTTP fault injector]: https://github.com/Azure/azure-sdk-tools/tree/main/tools/http-fault-injector"
  modifiers:
  - "static"
  parameters:
  - description: "The <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClient\"></xref> being wrapped that will send the actual request."
    name: "clientToWrap"
    type: "<xref href=\"com.azure.core.http.HttpClient?alt=com.azure.core.http.HttpClient&text=HttpClient\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether HTTPS should be used to communicate with HTTP fault injector."
    name: "useHttps"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static HttpClient getFaultInjectingHttpClient(HttpClient clientToWrap, boolean useHttps)"
  desc: "Wraps an <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClient\"></xref> to make calls to [HTTP fault injector][] to test random network failures.\n\nUsing the <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClient\"></xref> returned by this method requires all setup required by HTTP fault injector to be configured. `useHttps` determines whether requests are forwarded to HTTP fault injector using HTTPS or HTTP, using HTTP doesn't require the self-signed certificate used by HTTP fault injector to be trusted by the JVM making it easier to prototype tests using HTTP fault injector. Merge ready tests should always use HTTPS.\n\nThe <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClient\"></xref> returned will use the default successful and failure response percentages. 75% of request will succeed, 24% of requests will fail with a partial body returned, and 1% of requests will never return a response. It is recommended for tests using HTTP fault injector to set <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClientOptions#setResponseTimeout(Duration)\"></xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClientOptions#setReadTimeout(Duration)\"></xref>, or the equivalent methods directly in the HTTP client builder being used, as the default timeouts are 60 seconds and with responses failing randomly reducing the timeout will let the tests run faster while still generally testing the same.\n\n\n[HTTP fault injector]: https://github.com/Azure/azure-sdk-tools/tree/main/tools/http-fault-injector"
  returns:
    description: "An <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClient\"></xref> that forwards requests to HTTP fault injector with automatic fault injection\n handling to run tests with flaky network."
    type: "<xref href=\"com.azure.core.http.HttpClient?alt=com.azure.core.http.HttpClient&text=HttpClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.test.utils.TestUtils.getFaultInjectingHttpClient(com.azure.core.http.HttpClient,boolean,int,int,int)"
  fullName: "com.azure.core.test.utils.TestUtils.getFaultInjectingHttpClient(HttpClient clientToWrap, boolean useHttps, int successRate, int partialRate, int failureRate)"
  name: "getFaultInjectingHttpClient(HttpClient clientToWrap, boolean useHttps, int successRate, int partialRate, int failureRate)"
  nameWithType: "TestUtils.getFaultInjectingHttpClient(HttpClient clientToWrap, boolean useHttps, int successRate, int partialRate, int failureRate)"
  summary: "Wraps an <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClient\"></xref> to make calls to [HTTP fault injector][] to test random network failures.\n\n\n[HTTP fault injector]: https://github.com/Azure/azure-sdk-tools/tree/main/tools/http-fault-injector"
  modifiers:
  - "static"
  parameters:
  - description: "The <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClient\"></xref> being wrapped that will send the actual request."
    name: "clientToWrap"
    type: "<xref href=\"com.azure.core.http.HttpClient?alt=com.azure.core.http.HttpClient&text=HttpClient\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether HTTPS should be used to communicate with HTTP fault injector."
    name: "useHttps"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Percent of requests that will succeed."
    name: "successRate"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Percent of requests that will partially succeed."
    name: "partialRate"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Percent of requests that will fail."
    name: "failureRate"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static HttpClient getFaultInjectingHttpClient(HttpClient clientToWrap, boolean useHttps, int successRate, int partialRate, int failureRate)"
  desc: "Wraps an <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClient\"></xref> to make calls to [HTTP fault injector][] to test random network failures.\n\nUsing the <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClient\"></xref> returned by this method requires all setup required by HTTP fault injector to be configured. `useHttps` determines whether requests are forwarded to HTTP fault injector using HTTPS or HTTP, using HTTP doesn't require the self-signed certificate used by HTTP fault injector to be trusted by the JVM making it easier to prototype tests using HTTP fault injector. Merge ready tests should always use HTTPS.\n\nThe <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClient\"></xref> returned will use the specified successful and failure response percentages. The combination of `successRate`, `partialRate`, and `failureRate` must equal 100, if not an <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalArgumentException\"></xref> will be thrown. An <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalArgumentException\"></xref> will also be thrown if any of the values are negative. It is recommended for tests using HTTP fault injector to set <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClientOptions#setResponseTimeout(Duration)\"></xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClientOptions#setReadTimeout(Duration)\"></xref>, or the equivalent methods directly in the HTTP client builder being used, as the default timeouts are 60 seconds and with responses failing randomly reducing the timeout will let the tests run faster while still generally testing the same.\n\n\n[HTTP fault injector]: https://github.com/Azure/azure-sdk-tools/tree/main/tools/http-fault-injector"
  returns:
    description: "An <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClient\"></xref> that forwards requests to HTTP fault injector with automatic fault injection\n handling to run tests with flaky network."
    type: "<xref href=\"com.azure.core.http.HttpClient?alt=com.azure.core.http.HttpClient&text=HttpClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.test.utils.TestUtils.getRecordFolder()"
  fullName: "com.azure.core.test.utils.TestUtils.getRecordFolder()"
  name: "getRecordFolder()"
  nameWithType: "TestUtils.getRecordFolder()"
  summary: "Get the <xref uid=\"java.io.File\" data-throw-if-not-resolved=\"false\" data-raw-source=\"File\"></xref> pointing to the folder where session records live."
  modifiers:
  - "static"
  syntax: "public static File getRecordFolder()"
  desc: "Get the <xref uid=\"java.io.File\" data-throw-if-not-resolved=\"false\" data-raw-source=\"File\"></xref> pointing to the folder where session records live."
  returns:
    description: "The session-records folder."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/File.html\">File</a>"
- uid: "com.azure.core.test.utils.TestUtils.getRepoRootResolveUntil(java.nio.file.Path,java.lang.String)"
  fullName: "com.azure.core.test.utils.TestUtils.getRepoRootResolveUntil(Path testClassPath, String resolveFolder)"
  name: "getRepoRootResolveUntil(Path testClassPath, String resolveFolder)"
  nameWithType: "TestUtils.getRepoRootResolveUntil(Path testClassPath, String resolveFolder)"
  summary: "Locates the root of the current repo until the provided folder's parent."
  modifiers:
  - "static"
  parameters:
  - description: "the test class path"
    name: "testClassPath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/file/Path.html\">Path</a>"
  - description: "the folder parent to resolve the path until"
    name: "resolveFolder"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public static Path getRepoRootResolveUntil(Path testClassPath, String resolveFolder)"
  desc: "Locates the root of the current repo until the provided folder's parent."
  returns:
    description: "The <xref uid=\"java.nio.file.Path\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Path\"></xref> to the root of the repo."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/file/Path.html\">Path</a>"
- uid: "com.azure.core.test.utils.TestUtils.toURI(java.net.URL)"
  fullName: "com.azure.core.test.utils.TestUtils.toURI(URL url)"
  name: "toURI(URL url)"
  nameWithType: "TestUtils.toURI(URL url)"
  summary: "Returns a [URI][] equivalent to this URL.\n\n\n[URI]: https://docs.oracle.com/javase/8/docs/api/java/net/URI.html"
  modifiers:
  - "static"
  parameters:
  - description: "the url to be converted to URI"
    name: "url"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/net/URL.html\">URL</a>"
  syntax: "public static URI toURI(URL url)"
  desc: "Returns a [URI][] equivalent to this URL.\n\n\n[URI]: https://docs.oracle.com/javase/8/docs/api/java/net/URI.html"
  returns:
    description: "the URI"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/net/URI.html\">URI</a>"
type: "class"
desc: "Contains utility methods used for testing."
metadata: {}
package: "com.azure.core.test.utils"
artifact: com.azure:azure-core-test:1.22.0
