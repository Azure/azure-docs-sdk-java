### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="system.fabric.description.EntryPointDescription?alt=system.fabric.description.EntryPointDescription&text=EntryPointDescription" data-throw-if-not-resolved="False"/>
inheritedMembers:
- system.fabric.description.EntryPointDescription.EntryPointDescription(CodePackageEntryPointKind)
- system.fabric.description.EntryPointDescription.getKind()
methods:
- fullName: system.fabric.description.ExeHostEntryPointDescription.getArguments()
  name: getArguments()
  nameWithType: ExeHostEntryPointDescription.getArguments()
  returns:
    description: <p>The arguments passed to the executable as specified in the service manifest. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the arguments passed to the executable as specified in the service manifest. </p>
  syntax: public String getArguments()
  uid: system.fabric.description.ExeHostEntryPointDescription.getArguments()
- fullName: system.fabric.description.ExeHostEntryPointDescription.getConsoleRedirectionFileMaxSizeInKb()
  name: getConsoleRedirectionFileMaxSizeInKb()
  nameWithType: ExeHostEntryPointDescription.getConsoleRedirectionFileMaxSizeInKb()
  returns:
    description: <p>The maximum size in KB for console redirection file. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the maximum size in KB for console redirection file. </p>
  syntax: public long getConsoleRedirectionFileMaxSizeInKb()
  uid: system.fabric.description.ExeHostEntryPointDescription.getConsoleRedirectionFileMaxSizeInKb()
- fullName: system.fabric.description.ExeHostEntryPointDescription.getConsoleRedirectionFileRetentionCount()
  name: getConsoleRedirectionFileRetentionCount()
  nameWithType: ExeHostEntryPointDescription.getConsoleRedirectionFileRetentionCount()
  returns:
    description: <p>The maximum number of files used for console redirection before overwriting content in circular way. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the maximum number of files used for console redirection before overwriting content in circular way. </p>
  syntax: public long getConsoleRedirectionFileRetentionCount()
  uid: system.fabric.description.ExeHostEntryPointDescription.getConsoleRedirectionFileRetentionCount()
- fullName: system.fabric.description.ExeHostEntryPointDescription.getPeriodicInterval()
  name: getPeriodicInterval()
  nameWithType: ExeHostEntryPointDescription.getPeriodicInterval()
  returns:
    description: <p>The time period the executable needs to be activated periodically. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the time period, if executable needs to be activated periodically. </p>
  syntax: public long getPeriodicInterval()
  uid: system.fabric.description.ExeHostEntryPointDescription.getPeriodicInterval()
- fullName: system.fabric.description.ExeHostEntryPointDescription.getProgram()
  name: getProgram()
  nameWithType: ExeHostEntryPointDescription.getProgram()
  returns:
    description: <p>The executable name as specified in the service manifest. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the executable name as specified in the service manifest. </p>
  syntax: public String getProgram()
  uid: system.fabric.description.ExeHostEntryPointDescription.getProgram()
- fullName: system.fabric.description.ExeHostEntryPointDescription.getWorkingFolder()
  name: getWorkingFolder()
  nameWithType: ExeHostEntryPointDescription.getWorkingFolder()
  returns:
    description: <p>The working folder for the executable as specified in the service manifest. </p>
    type: <xref href="system.fabric.description.ExeHostWorkingFolder?alt=system.fabric.description.ExeHostWorkingFolder&text=ExeHostWorkingFolder" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the working folder for the executable as specified in the service manifest. </p>
  syntax: public ExeHostWorkingFolder getWorkingFolder()
  uid: system.fabric.description.ExeHostEntryPointDescription.getWorkingFolder()
- fullName: system.fabric.description.ExeHostEntryPointDescription.isConsoleRedirectedEnabled()
  name: isConsoleRedirectedEnabled()
  nameWithType: ExeHostEntryPointDescription.isConsoleRedirectedEnabled()
  returns:
    description: <p>true if console redirection for executables is enabled; otherwise false. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>Gets a value that indicates whether to enable or disable console redirection for executables. Default is false. </p>
  syntax: public boolean isConsoleRedirectedEnabled()
  uid: system.fabric.description.ExeHostEntryPointDescription.isConsoleRedirectedEnabled()
- fullName: system.fabric.description.ExeHostEntryPointDescription.toString()
  name: toString()
  nameWithType: ExeHostEntryPointDescription.toString()
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String toString()
  uid: system.fabric.description.ExeHostEntryPointDescription.toString()
nameWithType: ExeHostEntryPointDescription
syntax: public class ExeHostEntryPointDescription extends EntryPointDescription
type: class
uid: system.fabric.description.ExeHostEntryPointDescription
fullName: system.fabric.description.ExeHostEntryPointDescription
name: ExeHostEntryPointDescription
package: system.fabric.description
metadata: {}
