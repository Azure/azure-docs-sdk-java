### YamlMime:ManagedReference
items:
- uid: com.azure.storage.blob.ProgressReporter
  id: ProgressReporter
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob
  children:
  - com.azure.storage.blob.ProgressReporter.ProgressReporter()
  - com.azure.storage.blob.ProgressReporter.addParallelProgressReporting(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.blob.ProgressReceiver,java.util.concurrent.locks.Lock,java.util.concurrent.atomic.AtomicLong)
  - com.azure.storage.blob.ProgressReporter.addProgressReporting(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.blob.ProgressReceiver)
  langs:
  - java
  name: ProgressReporter
  nameWithType: ProgressReporter
  fullName: com.azure.storage.blob.ProgressReporter
  type: Class
  package: com.azure.storage.blob
  summary: '`ProgressReporter` offers a convenient way to add progress tracking to a given Flux.'
  syntax:
    content: public final class ProgressReporter
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.blob.ProgressReporter.ProgressReporter()
  id: ProgressReporter()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.ProgressReporter
  langs:
  - java
  name: ProgressReporter()
  nameWithType: ProgressReporter.ProgressReporter()
  fullName: com.azure.storage.blob.ProgressReporter.ProgressReporter()
  overload: com.azure.storage.blob.ProgressReporter.ProgressReporter*
  type: Constructor
  package: com.azure.storage.blob
  syntax:
    content: public ProgressReporter()
- uid: com.azure.storage.blob.ProgressReporter.addParallelProgressReporting(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.blob.ProgressReceiver,java.util.concurrent.locks.Lock,java.util.concurrent.atomic.AtomicLong)
  id: addParallelProgressReporting(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.blob.ProgressReceiver,java.util.concurrent.locks.Lock,java.util.concurrent.atomic.AtomicLong)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.ProgressReporter
  langs:
  - java
  name: addParallelProgressReporting(Flux<ByteBuffer> data, ProgressReceiver progressReceiver, Lock lock, AtomicLong totalProgress)
  nameWithType: ProgressReporter.addParallelProgressReporting(Flux<ByteBuffer> data, ProgressReceiver progressReceiver, Lock lock, AtomicLong totalProgress)
  fullName: com.azure.storage.blob.ProgressReporter.addParallelProgressReporting(Flux<ByteBuffer> data, ProgressReceiver progressReceiver, Lock lock, AtomicLong totalProgress)
  overload: com.azure.storage.blob.ProgressReporter.addParallelProgressReporting*
  type: Method
  package: com.azure.storage.blob
  summary: Adds parallel progress reporting functionality to the given `Flux`. Each subscription (and therefore each retry) will rewind the progress reported so as not to over-report. The data reported will be the total amount of data emitted so far, or the "current position" of the Flux in parallel.
  syntax:
    content: public static Flux<ByteBuffer> addParallelProgressReporting(Flux<ByteBuffer> data, ProgressReceiver progressReceiver, Lock lock, AtomicLong totalProgress)
    parameters:
    - id: data
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data whose transfer progress is to be tracked.
    - id: progressReceiver
      type: com.azure.storage.blob.ProgressReceiver
      description: <xref uid="com.azure.storage.blob.ProgressReceiver" data-throw-if-not-resolved="false">ProgressReceiver</xref>
    - id: lock
      type: java.util.concurrent.locks.Lock
      description: >-
        This lock will be instantiated by the operation initiating the whole transfer to coordinate each
         ProgressReporterImpl.
    - id: totalProgress
      type: java.util.concurrent.atomic.AtomicLong
      description: >-
        We need an AtomicLong to be able to update the value referenced. Because we are already
         synchronizing with the lock, we don't incur any additional performance hit here by the synchronization.
    return:
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: >-
        A <code>Flux</code> that emits the same data as the source but calls a callback to report the total amount of
         data emitted so far.
- uid: com.azure.storage.blob.ProgressReporter.addProgressReporting(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.blob.ProgressReceiver)
  id: addProgressReporting(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.blob.ProgressReceiver)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.ProgressReporter
  langs:
  - java
  name: addProgressReporting(Flux<ByteBuffer> data, ProgressReceiver progressReceiver)
  nameWithType: ProgressReporter.addProgressReporting(Flux<ByteBuffer> data, ProgressReceiver progressReceiver)
  fullName: com.azure.storage.blob.ProgressReporter.addProgressReporting(Flux<ByteBuffer> data, ProgressReceiver progressReceiver)
  overload: com.azure.storage.blob.ProgressReporter.addProgressReporting*
  type: Method
  package: com.azure.storage.blob
  summary: Adds progress reporting functionality to the given `Flux`. Each subscription (and therefore each retry) will rewind the progress reported so as not to over-report. The data reported will be the total amount of data emitted so far, or the "current position" of the Flux.
  syntax:
    content: public static Flux<ByteBuffer> addProgressReporting(Flux<ByteBuffer> data, ProgressReceiver progressReceiver)
    parameters:
    - id: data
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data whose transfer progress is to be tracked.
    - id: progressReceiver
      type: com.azure.storage.blob.ProgressReceiver
      description: <xref uid="com.azure.storage.blob.ProgressReceiver" data-throw-if-not-resolved="false">ProgressReceiver</xref>
    return:
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: >-
        A <code>Flux</code> that emits the same data as the source but calls a callback to report the total amount of
         data emitted so far.
references:
- uid: com.azure.storage.blob.ProgressReporter.ProgressReporter*
  name: ProgressReporter
  nameWithType: ProgressReporter.ProgressReporter
  fullName: com.azure.storage.blob.ProgressReporter.ProgressReporter
  package: com.azure.storage.blob
- uid: reactor.core.publisher.Flux<java.nio.ByteBuffer>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: java.nio.ByteBuffer
    name: ByteBuffer
    fullName: java.nio.ByteBuffer
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.ProgressReceiver
  name: ProgressReceiver
  nameWithType: ProgressReceiver
  fullName: com.azure.storage.blob.ProgressReceiver
- uid: com.azure.storage.blob.ProgressReporter.addProgressReporting*
  name: addProgressReporting
  nameWithType: ProgressReporter.addProgressReporting
  fullName: com.azure.storage.blob.ProgressReporter.addProgressReporting
  package: com.azure.storage.blob
- uid: java.util.concurrent.locks.Lock
  spec.java:
  - uid: java.util.concurrent.locks.Lock
    name: Lock
    fullName: java.util.concurrent.locks.Lock
- uid: java.util.concurrent.atomic.AtomicLong
  spec.java:
  - uid: java.util.concurrent.atomic.AtomicLong
    name: AtomicLong
    fullName: java.util.concurrent.atomic.AtomicLong
- uid: com.azure.storage.blob.ProgressReporter.addParallelProgressReporting*
  name: addParallelProgressReporting
  nameWithType: ProgressReporter.addParallelProgressReporting
  fullName: com.azure.storage.blob.ProgressReporter.addParallelProgressReporting
  package: com.azure.storage.blob
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: reactor.core.publisher.Flux
  name: Flux
  nameWithType: Flux
  fullName: reactor.core.publisher.Flux
- uid: java.nio.ByteBuffer
  name: ByteBuffer
  nameWithType: ByteBuffer
  fullName: java.nio.ByteBuffer
