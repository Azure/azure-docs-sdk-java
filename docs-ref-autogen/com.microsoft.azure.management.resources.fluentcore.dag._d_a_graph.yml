### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  id: _d_a_graph
  parent: com.microsoft.azure.management.resources.fluentcore.dag
  children:
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.DAGraph(NodeT)
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.getNext()
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.getNode(String)
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.hasParent()
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.isPreparer()
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.isRootNode(NodeT)
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.merge(DAGraph<DataT, NodeT>)
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.mergeChildToParent(String,NodeT)
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.prepare()
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.reportCompletion(NodeT)
  - com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.reportError(NodeT,Throwable)
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  langs:
  - java
  name: DAGraph<DataT,NodeT,NodeT>
  nameWithType: DAGraph<DataT,NodeT,NodeT>
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT,NodeT,NodeT>
  type: Class
  source:
    remote: &o0
      path: azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/dag/DAGraph.java
      branch: 880e2022bf46b71f481107effb7c878a9ae065dd
      repo: https://github.com/Azure/azure-sdk-for-java
    path: azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/dag/DAGraph.java
    startLine: 19
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: >-
    <p>Type representing a DAG (directed acyclic graph). </p>

    <p>each node in a DAG is represented by <xref uid="com.microsoft.azure.management.resources.fluentcore.dag._d_a_g_node" data-throw-if-not-resolved="false">DAGNode</xref></p>

    <p></p>
  syntax: &o1
    content: public class DAGraph<DataT,NodeT extends DAGNode<DataT,NodeT>> extends Graph<DataT, NodeT>
    typeParameters:
    - type: 7aacc8e4
      description: <p>the type of the data stored in the graph nodes </p>
    - type: 3166dcd3
      description: <p>the type of the nodes in the graph </p>
    - type: 3166dcd3
      description: <p>the type of the nodes in the graph </p>
  inheritance:
  - java.lang.Object
  - com.microsoft.azure.management.resources.fluentcore.dag._graph
  inheritedMembers:
  - com.microsoft.azure.management.resources.fluentcore.dag._graph.addNode(NodeT)
  - com.microsoft.azure.management.resources.fluentcore.dag._graph.findPath(String,String)
  - com.microsoft.azure.management.resources.fluentcore.dag._graph.getNodes()
  - com.microsoft.azure.management.resources.fluentcore.dag._graph.graph
  - com.microsoft.azure.management.resources.fluentcore.dag._graph.Graph()
  - com.microsoft.azure.management.resources.fluentcore.dag._graph.visit(Visitor)
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.DAGraph(NodeT)
  id: DAGraph(NodeT)
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  langs:
  - java
  name: DAGraph(NodeT rootNode)
  nameWithType: DAGraph<DataT,NodeT,NodeT>.DAGraph(NodeT rootNode)
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.DAGraph(NodeT rootNode)
  overload: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.DAGraph*
  type: Constructor
  source:
    remote: *o0
    path: azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/dag/DAGraph.java
    startLine: 38
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: >-
    <p>Creates a new DAG.</p>

    <p></p>
  syntax:
    content: public DAGraph(NodeT rootNode)
    parameters:
    - id: rootNode
      type: 3166dcd3
      description: <p>the root node of this DAG </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.getNext()
  id: getNext()
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  langs:
  - java
  name: getNext()
  nameWithType: DAGraph<DataT,NodeT,NodeT>.getNext()
  fullName: NodeT com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.getNext()
  overload: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.getNext*
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/dag/DAGraph.java
    startLine: 133
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: >-
    <p>Gets next node in the DAG which has no dependency or all of it's dependencies are resolved and ready to be consumed.</p>

    <p></p>
  syntax:
    content: public NodeT getNext()
    return:
      type: 3166dcd3
      description: <p>next node or null if all the nodes have been explored or no node is available at this moment. </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.getNode(String)
  id: getNode(String)
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  langs:
  - java
  name: getNode(String key)
  nameWithType: DAGraph<DataT,NodeT,NodeT>.getNode(String key)
  fullName: NodeT com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.getNode(String key)
  overload: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.getNode*
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/dag/DAGraph.java
    startLine: 146
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: <p>Gets a node from the graph with the given key. </p>
  syntax:
    content: public NodeT getNode(String key)
    parameters:
    - id: key
      type: "26831127"
      description: <p>the key of the node </p>
    return:
      type: 3166dcd3
      description: <p>the node </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.hasParent()
  id: hasParent()
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  langs:
  - java
  name: hasParent()
  nameWithType: DAGraph<DataT,NodeT,NodeT>.hasParent()
  fullName: boolean com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.hasParent()
  overload: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.hasParent*
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/dag/DAGraph.java
    startLine: 48
  package: com.microsoft.azure.management.resources.fluentcore.dag
  syntax:
    content: public boolean hasParent()
    return:
      type: 4fc6e284
      description: >-
        <p>

          <code>true</code> if this DAG is merged with another DAG and hence has a parent </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.isPreparer()
  id: isPreparer()
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  langs:
  - java
  name: isPreparer()
  nameWithType: DAGraph<DataT,NodeT,NodeT>.isPreparer()
  fullName: boolean com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.isPreparer()
  overload: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.isPreparer*
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/dag/DAGraph.java
    startLine: 66
  package: com.microsoft.azure.management.resources.fluentcore.dag
  syntax:
    content: public boolean isPreparer()
    return:
      type: 4fc6e284
      description: >-
        <p>

          <code>true</code> if this dag is the preparer responsible for preparing the DAG for traversal. </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.isRootNode(NodeT)
  id: isRootNode(NodeT)
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  langs:
  - java
  name: isRootNode(NodeT node)
  nameWithType: DAGraph<DataT,NodeT,NodeT>.isRootNode(NodeT node)
  fullName: boolean com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.isRootNode(NodeT node)
  overload: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.isRootNode*
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/dag/DAGraph.java
    startLine: 58
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: >-
    <p>Checks whether the given node is root node of this DAG.</p>

    <p></p>
  syntax:
    content: public boolean isRootNode(NodeT node)
    parameters:
    - id: node
      type: 3166dcd3
      description: <p>the node <xref uid="com.microsoft.azure.management.resources.fluentcore.dag._d_a_g_node" data-throw-if-not-resolved="false">DAGNode</xref> to be checked </p>
    return:
      type: 4fc6e284
      description: >-
        <p>

          <code>true</code> if the given node is root node </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.merge(DAGraph<DataT, NodeT>)
  id: merge(DAGraph<DataT, NodeT>)
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  langs:
  - java
  name: merge(DAGraph<DataT, NodeT> parent)
  nameWithType: DAGraph<DataT,NodeT,NodeT>.merge(DAGraph<DataT, NodeT> parent)
  fullName: void com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.merge(DAGraph<DataT, NodeT> parent)
  overload: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.merge*
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/dag/DAGraph.java
    startLine: 78
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: >-
    <p>Merge this DAG with another DAG. </p>

    <p>This will mark this DAG as a child DAG, the dependencies of nodes in this DAG will be merged with (copied to) the parent DAG</p>

    <p></p>
  syntax:
    content: public void merge(DAGraph<DataT, NodeT> parent)
    parameters:
    - id: parent
      type: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph513491d4
      description: <p>the parent DAG </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.mergeChildToParent(String,NodeT)
  id: mergeChildToParent(String,NodeT)
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  langs:
  - java
  name: mergeChildToParent(String parentKey, NodeT childNode)
  nameWithType: DAGraph<DataT,NodeT,NodeT>.mergeChildToParent(String parentKey, NodeT childNode)
  fullName: void com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.mergeChildToParent(String parentKey, NodeT childNode)
  overload: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.mergeChildToParent*
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/dag/DAGraph.java
    startLine: 96
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: >-
    <p>Merges DAG associated with childNode to DAG associated with a parent node of given key.</p>

    <p></p>
  syntax:
    content: public void mergeChildToParent(String parentKey, NodeT childNode)
    parameters:
    - id: parentKey
      type: "26831127"
      description: <p>the key of the parent node </p>
    - id: childNode
      type: 3166dcd3
      description: <p>the child node </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.prepare()
  id: prepare()
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  langs:
  - java
  name: prepare()
  nameWithType: DAGraph<DataT,NodeT,NodeT>.prepare()
  fullName: void com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.prepare()
  overload: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.prepare*
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/dag/DAGraph.java
    startLine: 112
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: <p>Prepares this DAG for traversal using getNext method, each call to getNext returns next node in the DAG with no dependencies. </p>
  syntax:
    content: public void prepare()
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.reportCompletion(NodeT)
  id: reportCompletion(NodeT)
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  langs:
  - java
  name: reportCompletion(NodeT completed)
  nameWithType: DAGraph<DataT,NodeT,NodeT>.reportCompletion(NodeT completed)
  fullName: void com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.reportCompletion(NodeT completed)
  overload: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.reportCompletion*
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/dag/DAGraph.java
    startLine: 155
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: >-
    <p>Reports that a node is resolved hence other nodes depends on it can consume it.</p>

    <p></p>
  syntax:
    content: public void reportCompletion(NodeT completed)
    parameters:
    - id: completed
      type: 3166dcd3
      description: <p>the node ready to be consumed </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.reportError(NodeT,Throwable)
  id: reportError(NodeT,Throwable)
  parent: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  langs:
  - java
  name: reportError(NodeT faulted, Throwable throwable)
  nameWithType: DAGraph<DataT,NodeT,NodeT>.reportError(NodeT faulted, Throwable throwable)
  fullName: void com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.reportError(NodeT faulted, Throwable throwable)
  overload: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.reportError*
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/fluentcore/dag/DAGraph.java
    startLine: 178
  package: com.microsoft.azure.management.resources.fluentcore.dag
  summary: >-
    <p>Reports that a node is faulted.</p>

    <p></p>
  syntax:
    content: public void reportError(NodeT faulted, Throwable throwable)
    parameters:
    - id: faulted
      type: 3166dcd3
      description: <p>the node faulted </p>
    - id: throwable
      type: a04fafd7
      description: <p>the reason for fault </p>
references:
- uid: 7aacc8e4
  spec.java:
  - name: DataT
    fullName: DataT
- uid: 3166dcd3
  spec.java:
  - name: NodeT
    fullName: NodeT
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.DAGraph*
  name: DAGraph
  nameWithType: DAGraph<DataT,NodeT,NodeT>.DAGraph
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.DAGraph
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.hasParent*
  name: hasParent
  nameWithType: DAGraph<DataT,NodeT,NodeT>.hasParent
  fullName: boolean com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.hasParent
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.isRootNode*
  name: isRootNode
  nameWithType: DAGraph<DataT,NodeT,NodeT>.isRootNode
  fullName: boolean com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.isRootNode
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.isPreparer*
  name: isPreparer
  nameWithType: DAGraph<DataT,NodeT,NodeT>.isPreparer
  fullName: boolean com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.isPreparer
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph513491d4
  spec.java:
  - uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
    name: DAGraph
    fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph
    href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  - name: <DataT, NodeT>
    fullName: <DataT, NodeT>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.merge*
  name: merge
  nameWithType: DAGraph<DataT,NodeT,NodeT>.merge
  fullName: void com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.merge
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.mergeChildToParent*
  name: mergeChildToParent
  nameWithType: DAGraph<DataT,NodeT,NodeT>.mergeChildToParent
  fullName: void com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.mergeChildToParent
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.prepare*
  name: prepare
  nameWithType: DAGraph<DataT,NodeT,NodeT>.prepare
  fullName: void com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.prepare
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.getNext*
  name: getNext
  nameWithType: DAGraph<DataT,NodeT,NodeT>.getNext
  fullName: NodeT com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.getNext
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.getNode*
  name: getNode
  nameWithType: DAGraph<DataT,NodeT,NodeT>.getNode
  fullName: NodeT com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.getNode
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.reportCompletion*
  name: reportCompletion
  nameWithType: DAGraph<DataT,NodeT,NodeT>.reportCompletion
  fullName: void com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.reportCompletion
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: a04fafd7
  spec.java:
  - name: Throwable
    fullName: Throwable
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.reportError*
  name: reportError
  nameWithType: DAGraph<DataT,NodeT,NodeT>.reportError
  fullName: void com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.reportError
  package: com.microsoft.azure.management.resources.fluentcore.dag
- uid: com.microsoft.azure.management.resources.fluentcore.dag._graph.addNode(NodeT)
  parent: com.microsoft.azure.management.resources.fluentcore.dag._graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._graph.yml
  name: addNode(NodeT node)
  nameWithType: Graph<DataT,NodeT,NodeT>.addNode(NodeT node)
  fullName: void com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT, NodeT extends Node<DataT, NodeT>.addNode(NodeT node)
  type: Method
  summary: >-
    <p>Adds a node to this graph.</p>

    <p></p>
  syntax:
    content: public void addNode(NodeT node)
    parameters:
    - id: node
      type: 3166dcd3
      description: <p>the node </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._graph.findPath(String,String)
  parent: com.microsoft.azure.management.resources.fluentcore.dag._graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._graph.yml
  name: findPath(String start, String end)
  nameWithType: Graph<DataT,NodeT,NodeT>.findPath(String start, String end)
  fullName: String com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT, NodeT extends Node<DataT, NodeT>.findPath(String start, String end)
  type: Method
  syntax:
    content: protected String findPath(String start, String end)
    parameters:
    - id: start
      type: "26831127"
    - id: end
      type: "26831127"
    return:
      type: "26831127"
- uid: com.microsoft.azure.management.resources.fluentcore.dag._graph.getNodes()
  parent: com.microsoft.azure.management.resources.fluentcore.dag._graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._graph.yml
  name: getNodes()
  nameWithType: Graph<DataT,NodeT,NodeT>.getNodes()
  fullName: Collection<NodeT> com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT, NodeT extends Node<DataT, NodeT>.getNodes()
  type: Method
  syntax:
    content: public Collection<NodeT> getNodes()
    return:
      type: 97fa570e
      description: <p>all nodes in the graph. </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._graph.graph
  parent: com.microsoft.azure.management.resources.fluentcore.dag._graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._graph.yml
  name: graph
  nameWithType: Graph<DataT,NodeT,NodeT>.graph
  fullName: Map<String, NodeT> com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT, NodeT extends Node<DataT, NodeT>.graph
  type: Field
  summary: <p>the underlying graph. </p>
  syntax:
    content: protected Map<String, NodeT> graph
    return:
      type: a3cb62d6
- uid: com.microsoft.azure.management.resources.fluentcore.dag._graph.Graph()
  parent: com.microsoft.azure.management.resources.fluentcore.dag._graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._graph.yml
  name: Graph()
  nameWithType: Graph<DataT,NodeT,NodeT>.Graph()
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT, NodeT extends Node<DataT, NodeT>.Graph()
  type: Constructor
  summary: <p>Creates a directed graph. </p>
  syntax:
    content: public Graph()
- uid: com.microsoft.azure.management.resources.fluentcore.dag._graph.visit(Visitor)
  parent: com.microsoft.azure.management.resources.fluentcore.dag._graph
  href: com.microsoft.azure.management.resources.fluentcore.dag._graph.yml
  name: visit(Visitor visitor)
  nameWithType: Graph<DataT,NodeT,NodeT>.visit(Visitor visitor)
  fullName: void com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT, NodeT extends Node<DataT, NodeT>.visit(Visitor visitor)
  type: Method
  summary: >-
    <p>Perform DFS visit in this graph. </p>

    <p>The directed graph will be traversed in DFS order and the visitor will be notified as search explores each node and edge.</p>

    <p></p>
  syntax:
    content: public void visit(Visitor visitor)
    parameters:
    - id: visitor
      type: bb01fbc9
      description: <p>the graph visitor </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._graph
  parent: com.microsoft.azure.management.resources.fluentcore.dag
  href: com.microsoft.azure.management.resources.fluentcore.dag._graph.yml
  name: Graph<DataT,NodeT,NodeT>
  nameWithType: Graph<DataT,NodeT,NodeT>
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT,NodeT>
  type: Class
  summary: >-
    <p>Type representing a directed graph data structure. </p>

    <p>Each node in a graph is represented by <xref uid="com.microsoft.azure.management.resources.fluentcore.dag._node" data-throw-if-not-resolved="false">Node</xref></p>

    <p></p>
  syntax:
    content: public class Graph<DataT,NodeT extends Node<DataT,NodeT>>
    typeParameters:
    - type: 7aacc8e4
      description: <p>the type of the data stored in the graph's nodes </p>
    - type: 3166dcd3
      description: <p>the type of the nodes in the graph </p>
    - type: 3166dcd3
      description: <p>the type of the nodes in the graph </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_g_node
  parent: com.microsoft.azure.management.resources.fluentcore.dag
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_g_node.yml
  name: DAGNode<DataT,NodeT,NodeT>
  nameWithType: DAGNode<DataT,NodeT,NodeT>
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT,NodeT,NodeT>
  type: Class
  summary: >-
    <p>The type representing node in a <xref uid="com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph" data-throw-if-not-resolved="false">DAGraph</xref>.</p>

    <p></p>
  syntax:
    content: public class DAGNode<DataT,NodeT extends DAGNode<DataT,NodeT>> extends Node<DataT, NodeT>
    typeParameters:
    - type: 7aacc8e4
      description: <p>the type of the data stored in the node </p>
    - type: 3166dcd3
      description: <p>the type of the node </p>
    - type: 3166dcd3
      description: <p>the type of the node </p>
- uid: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph
  parent: com.microsoft.azure.management.resources.fluentcore.dag
  href: com.microsoft.azure.management.resources.fluentcore.dag._d_a_graph.yml
  name: DAGraph<DataT,NodeT,NodeT>
  nameWithType: DAGraph<DataT,NodeT,NodeT>
  fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT,NodeT,NodeT>
  type: Class
  summary: >-
    <p>Type representing a DAG (directed acyclic graph). </p>

    <p>each node in a DAG is represented by <xref uid="com.microsoft.azure.management.resources.fluentcore.dag._d_a_g_node" data-throw-if-not-resolved="false">DAGNode</xref></p>

    <p></p>
  syntax: *o1
