### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions"
fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions"
name: "DataLakeFileAppendOptions"
nameWithType: "DataLakeFileAppendOptions"
summary: "Optional parameters for appending data to a file."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public class **DataLakeFileAppendOptions**"
constructors:
- uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.DataLakeFileAppendOptions()"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.DataLakeFileAppendOptions()"
  name: "DataLakeFileAppendOptions()"
  nameWithType: "DataLakeFileAppendOptions.DataLakeFileAppendOptions()"
  syntax: "public DataLakeFileAppendOptions()"
methods:
- uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.getContentMd5()"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.getContentMd5()"
  name: "getContentMd5()"
  nameWithType: "DataLakeFileAppendOptions.getContentMd5()"
  summary: "When this header is specified, the storage service compares the hash of the content that has arrived with this header value."
  syntax: "public byte[] getContentMd5()"
  desc: "When this header is specified, the storage service compares the hash of the content that has arrived with this header value. If the two hashes do not match, the operation will fail with error code 400 (Bad Request). Note that this MD5 hash is not stored with the file. This header is associated with the request content, and not with the stored content of the file itself."
  returns:
    description: "MD5 hash of the content of the data."
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.getLeaseAction()"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.getLeaseAction()"
  name: "getLeaseAction()"
  nameWithType: "DataLakeFileAppendOptions.getLeaseAction()"
  summary: "Get lease action set on file."
  syntax: "public LeaseAction getLeaseAction()"
  desc: "Get lease action set on file. <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.ACQUIRE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#ACQUIRE\"></xref> will attempt to acquire a new lease on the file, with <xref uid=\"com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.proposedLeaseId\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAppendOptions#proposedLeaseId\"></xref> as the lease ID. <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.ACQUIRE_RELEASE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#ACQUIRE_RELEASE\"></xref> will attempt to aquire a new lease on the file, with <xref uid=\"com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.proposedLeaseId\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAppendOptions#proposedLeaseId\"></xref> as the lease ID. The lease will be released once the Append operation is complete. <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.AUTO_RENEW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#AUTO_RENEW\"></xref> will attempt to renew the lease specified by <xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions.getLeaseId()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions#getLeaseId()\"></xref>. <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.RELEASE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#RELEASE\"></xref> will attempt to release the least specified by <xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions.getLeaseId()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions#getLeaseId()\"></xref>."
  returns:
    description: "The <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction\"></xref> set on the file."
    type: "<xref href=\"com.azure.storage.file.datalake.models.LeaseAction?alt=com.azure.storage.file.datalake.models.LeaseAction&text=LeaseAction\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.getLeaseDuration()"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.getLeaseDuration()"
  name: "getLeaseDuration()"
  nameWithType: "DataLakeFileAppendOptions.getLeaseDuration()"
  syntax: "public Integer getLeaseDuration()"
  returns:
    description: "the lease duration in seconds."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.getLeaseId()"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.getLeaseId()"
  name: "getLeaseId()"
  nameWithType: "DataLakeFileAppendOptions.getLeaseId()"
  summary: "Gets the lease ID to access the file."
  syntax: "public String getLeaseId()"
  desc: "Gets the lease ID to access the file."
  returns:
    description: "lease ID to access this file."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.getProposedLeaseId()"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.getProposedLeaseId()"
  name: "getProposedLeaseId()"
  nameWithType: "DataLakeFileAppendOptions.getProposedLeaseId()"
  summary: "Gets proposed lease id."
  syntax: "public String getProposedLeaseId()"
  desc: "Gets proposed lease id. Valid with <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.ACQUIRE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#ACQUIRE\"></xref> and <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.ACQUIRE_RELEASE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#ACQUIRE_RELEASE\"></xref>."
  returns:
    description: "the proposed lease id."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.isFlush()"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.isFlush()"
  name: "isFlush()"
  nameWithType: "DataLakeFileAppendOptions.isFlush()"
  summary: "Returns whether file will be flushed after the append."
  syntax: "public Boolean isFlush()"
  desc: "Returns whether file will be flushed after the append."
  returns:
    description: "the boolean flag for flush."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.setContentHash(byte[])"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.setContentHash(byte[] contentMd5)"
  name: "setContentHash(byte[] contentMd5)"
  nameWithType: "DataLakeFileAppendOptions.setContentHash(byte[] contentMd5)"
  summary: "This hash is used to verify the integrity of the request content during transport."
  parameters:
  - description: "contentMd5 An MD5 hash of the content of the data. If specified, the service will calculate\n the MD5 of the received data and fail the request if it does not match the provided MD5."
    name: "contentMd5"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public DataLakeFileAppendOptions setContentHash(byte[] contentMd5)"
  desc: "This hash is used to verify the integrity of the request content during transport. When this header is specified, the storage service compares the hash of the content that has arrived with this header value. If the two hashes do not match, the operation will fail with error code 400 (Bad Request). Note that this MD5 hash is not stored with the file. This header is associated with the request content, and not with the stored content of the file itself."
  returns:
    description: "the updated DataLakeFileAppendOptions object."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakeFileAppendOptions?alt=com.azure.storage.file.datalake.options.DataLakeFileAppendOptions&text=DataLakeFileAppendOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.setFlush(java.lang.Boolean)"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.setFlush(Boolean flush)"
  name: "setFlush(Boolean flush)"
  nameWithType: "DataLakeFileAppendOptions.setFlush(Boolean flush)"
  summary: "If true, the file will be flushed after the append."
  parameters:
  - description: "boolean flag to indicate whether file should be flushed."
    name: "flush"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
  syntax: "public DataLakeFileAppendOptions setFlush(Boolean flush)"
  desc: "If true, the file will be flushed after the append."
  returns:
    description: "the updated DataLakeFileAppendOptions object."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakeFileAppendOptions?alt=com.azure.storage.file.datalake.options.DataLakeFileAppendOptions&text=DataLakeFileAppendOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.setLeaseAction(com.azure.storage.file.datalake.models.LeaseAction)"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.setLeaseAction(LeaseAction leaseAction)"
  name: "setLeaseAction(LeaseAction leaseAction)"
  nameWithType: "DataLakeFileAppendOptions.setLeaseAction(LeaseAction leaseAction)"
  summary: "Get lease action set on file."
  parameters:
  - description: "the <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction\"></xref> to set on the file."
    name: "leaseAction"
    type: "<xref href=\"com.azure.storage.file.datalake.models.LeaseAction?alt=com.azure.storage.file.datalake.models.LeaseAction&text=LeaseAction\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeFileAppendOptions setLeaseAction(LeaseAction leaseAction)"
  desc: "Get lease action set on file. <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.ACQUIRE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#ACQUIRE\"></xref> will attempt to acquire a new lease on the file, with <xref uid=\"com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.proposedLeaseId\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAppendOptions#proposedLeaseId\"></xref> as the lease ID. <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.ACQUIRE_RELEASE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#ACQUIRE_RELEASE\"></xref> will attempt to aquire a new lease on the file, with <xref uid=\"com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.proposedLeaseId\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAppendOptions#proposedLeaseId\"></xref> as the lease ID. The lease will be released once the Append operation is complete. <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.AUTO_RENEW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#AUTO_RENEW\"></xref> will attempt to renew the lease specified by <xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions.getLeaseId()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions#getLeaseId()\"></xref>. <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.RELEASE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#RELEASE\"></xref> will attempt to release the least specified by <xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions.getLeaseId()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions#getLeaseId()\"></xref>."
  returns:
    description: "the updated DataLakeFileAppendOptions object."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakeFileAppendOptions?alt=com.azure.storage.file.datalake.options.DataLakeFileAppendOptions&text=DataLakeFileAppendOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.setLeaseDuration(java.lang.Integer)"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.setLeaseDuration(Integer leaseDurationInSeconds)"
  name: "setLeaseDuration(Integer leaseDurationInSeconds)"
  nameWithType: "DataLakeFileAppendOptions.setLeaseDuration(Integer leaseDurationInSeconds)"
  summary: "Optional."
  parameters:
  - description: "the new lease duration."
    name: "leaseDurationInSeconds"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  syntax: "public DataLakeFileAppendOptions setLeaseDuration(Integer leaseDurationInSeconds)"
  desc: "Optional. Specifies the duration of the lease, in seconds, or specify -1 for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. Sets the lease duration."
  returns:
    description: "the updated DataLakeFileAppendOptions object."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakeFileAppendOptions?alt=com.azure.storage.file.datalake.options.DataLakeFileAppendOptions&text=DataLakeFileAppendOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.setLeaseId(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.setLeaseId(String leaseId)"
  name: "setLeaseId(String leaseId)"
  nameWithType: "DataLakeFileAppendOptions.setLeaseId(String leaseId)"
  summary: "Sets the lease ID."
  parameters:
  - description: "The lease ID."
    name: "leaseId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public DataLakeFileAppendOptions setLeaseId(String leaseId)"
  desc: "Sets the lease ID."
  returns:
    description: "the updated DataLakeFileAppendOptions object."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakeFileAppendOptions?alt=com.azure.storage.file.datalake.options.DataLakeFileAppendOptions&text=DataLakeFileAppendOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.setProposedLeaseId(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.setProposedLeaseId(String proposedLeaseId)"
  name: "setProposedLeaseId(String proposedLeaseId)"
  nameWithType: "DataLakeFileAppendOptions.setProposedLeaseId(String proposedLeaseId)"
  summary: "Sets the proposed lease id."
  parameters:
  - description: "the proposed lease id to set."
    name: "proposedLeaseId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public DataLakeFileAppendOptions setProposedLeaseId(String proposedLeaseId)"
  desc: "Sets the proposed lease id. Valid with <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.ACQUIRE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#ACQUIRE\"></xref> and <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.ACQUIRE_RELEASE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#ACQUIRE_RELEASE\"></xref>."
  returns:
    description: "the updated DataLakeFileAppendOptions object."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakeFileAppendOptions?alt=com.azure.storage.file.datalake.options.DataLakeFileAppendOptions&text=DataLakeFileAppendOptions\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Optional parameters for appending data to a file."
metadata: {}
package: "com.azure.storage.file.datalake.options"
artifact: com.azure:azure-storage-file-datalake:12.21.0
