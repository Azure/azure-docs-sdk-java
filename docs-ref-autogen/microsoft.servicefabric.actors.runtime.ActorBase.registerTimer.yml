### YamlMime:JavaMember
nameWithType: ActorBase.registerTimer
type: method
members:
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, Object state, Duration dueTime, Duration period)
  name: registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, Object state, Duration dueTime, Duration period)
  nameWithType: ActorBase.registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, Object state, Duration dueTime, Duration period)
  parameters:
  - description: <p>Callback to invoke when timer fires. </p>
    name: asyncCallback
    type: <xref href="Function%3CObject%2C+CompletableFuture%3C%3F%3E%3E?alt=Function<Object, CompletableFuture<?>>&text=Function%3CObject%2C+CompletableFuture%3C%3F%3E%3E" data-throw-if-not-resolved="False"/>
  - description: <p>State to pass into timer callback. </p>
    name: state
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>TimeSpan when actor timer is first due. </p>
    name: dueTime
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: <p>TimeSpan for subsequent actor timer invocation. </p>
    name: period
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns ActorTimer object. </p>
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorTimer?alt=microsoft.servicefabric.actors.runtime.ActorTimer&text=ActorTimer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Registers a Timer for the actor.</p>

    <p></p>
  syntax: protected ActorTimer registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, Object state, Duration dueTime, Duration period)
  uid: microsoft.servicefabric.actors.runtime.ActorBase.registerTimer(Function<Object, CompletableFuture<?>>,Object,Duration,Duration)
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, String asyncCallbackFunctionName, Object state, Duration dueTime, Duration period)
  name: registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, String asyncCallbackFunctionName, Object state, Duration dueTime, Duration period)
  nameWithType: ActorBase.registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, String asyncCallbackFunctionName, Object state, Duration dueTime, Duration period)
  parameters:
  - description: <p>Callback to invoke when timer fires. </p>
    name: asyncCallback
    type: <xref href="Function%3CObject%2C+CompletableFuture%3C%3F%3E%3E?alt=Function<Object, CompletableFuture<?>>&text=Function%3CObject%2C+CompletableFuture%3C%3F%3E%3E" data-throw-if-not-resolved="False"/>
  - description: <p>name of AsyncCallBack function. It can be used in <xref uid="microsoft.servicefabric.actors.runtime.ActorBase.onPreActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false">ActorBase#onPreActorMethodAsync(ActorMethodContext)</xref> and <xref uid="microsoft.servicefabric.actors.runtime.ActorBase.onPostActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false">ActorBase#onPostActorMethodAsync(ActorMethodContext)</xref> to initiate any user task on pre- and post- calling of this function. The property <xref uid="microsoft.servicefabric.actors.runtime.ActorMethodContext.getMethodName()" data-throw-if-not-resolved="false">ActorMethodContext#getMethodName()</xref> will give the method name. </p>
    name: asyncCallbackFunctionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>State to pass into timer callback. </p>
    name: state
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>TimeSpan when actor timer is first due. </p>
    name: dueTime
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: <p>TimeSpan for subsequent actor timer invocation. </p>
    name: period
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns ActorTimer object. </p>
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorTimer?alt=microsoft.servicefabric.actors.runtime.ActorTimer&text=ActorTimer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Registers a Timer for the actor.</p>

    <p></p>
  syntax: protected ActorTimer registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, String asyncCallbackFunctionName, Object state, Duration dueTime, Duration period)
  uid: microsoft.servicefabric.actors.runtime.ActorBase.registerTimer(Function<Object, CompletableFuture<?>>,String,Object,Duration,Duration)
uid: microsoft.servicefabric.actors.runtime.ActorBase.registerTimer*
fullName: microsoft.servicefabric.actors.runtime.ActorBase.registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, Object state, Duration dueTime, Duration period)
name: registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, Object state, Duration dueTime, Duration period)
package: microsoft.servicefabric.actors.runtime
metadata: {}
