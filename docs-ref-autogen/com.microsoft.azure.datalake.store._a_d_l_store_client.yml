items:
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client
  id: _a_d_l_store_client
  parent: com.microsoft.azure.datalake.store
  children:
  - com.microsoft.azure.datalake.store._a_d_l_store_client.checkAccess(String,String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.checkExists(String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.concatenateFiles(String,List<String>)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.createClient(String,AccessTokenProvider)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.createClient(String,AzureADToken)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.createClient(String,ClientCredsTokenProvider)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.createClient(String,RefreshTokenBasedTokenProvider)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.createClient(String,String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.createClient(String,UserPasswordTokenProvider)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.createDirectory(String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.createDirectory(String,String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.createEmptyFile(String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.createFile(String,IfExists)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.createFile(String,IfExists,String,boolean)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.delete(String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.deleteRecursive(String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory(String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory(String,int)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory(String,int,String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory(String,int,String,String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory(String,int,String,String,UserGroupRepresentation)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory(String,String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory(String,String,String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory(String,UserGroupRepresentation)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.getAclStatus(String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.getAclStatus(String,UserGroupRepresentation)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.getAppendStream(String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.getContentSummary(String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.getDirectoryEntry(String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.getDirectoryEntry(String,UserGroupRepresentation)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.getExceptionFromResponse(OperationResponse,String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.getReadStream(String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.modifyAclEntries(String,List<AclEntry>)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.removeAclEntries(String,List<AclEntry>)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.removeAllAcls(String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.removeDefaultAcls(String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.rename(String,String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.rename(String,String,boolean)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.setAcl(String,List<AclEntry>)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.setExpiryTime(String,ExpiryOption,long)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.setOptions(ADLStoreOptions)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.setOwner(String,String,String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.setPermission(String,String)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.setTimes(String,Date,Date)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.updateToken(AzureADToken)
  - com.microsoft.azure.datalake.store._a_d_l_store_client.updateToken(String)
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: ADLStoreClient
  nameWithType: ADLStoreClient
  fullName: com.microsoft.azure.datalake.store.ADLStoreClient
  type: Class
  source:
    remote: &o0
      path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
      branch: master
      repo: https://github.com/azure/azure-data-lake-store-java
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 32
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>

      <programlisting>

        <codeline>

          <highlight class="normal">ADLStoreClient<sp></sp></highlight>

        </codeline>

      </programlisting> class represents a client to Azure Data Lake. It can be used to perform operations on files and directories. </p>
  syntax: &o1
    content: public class ADLStoreClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - com.microsoft.azure.datalake.store._a_d_l_store_client.[static initializer]()
  - com.microsoft.azure.datalake.store._a_d_l_store_client.getAccessToken()
  - com.microsoft.azure.datalake.store._a_d_l_store_client.getAccountName()
  - com.microsoft.azure.datalake.store._a_d_l_store_client.getClientId()
  - com.microsoft.azure.datalake.store._a_d_l_store_client.getFilePathPrefix()
  - com.microsoft.azure.datalake.store._a_d_l_store_client.getHttpPrefix()
  - com.microsoft.azure.datalake.store._a_d_l_store_client.getTiHeaderValue()
  - com.microsoft.azure.datalake.store._a_d_l_store_client.getUserAgent()
  - com.microsoft.azure.datalake.store._a_d_l_store_client.remoteExceptionsEnabled()
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.checkAccess(String,String)
  id: checkAccess(String,String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: checkAccess(String path, String rwx)
  nameWithType: ADLStoreClient.checkAccess(String path, String rwx)
  fullName: boolean com.microsoft.azure.datalake.store.ADLStoreClient.checkAccess(String path, String rwx)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.checkAccess*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 820
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>checks whether the calling user has the required permissions for the file/directory . The permissions to check should be specified in the rwx parameter, as a unix permission string (for example,<programlisting><codeline><highlight class="normal">"r-x"<sp></sp></highlight></codeline></programlisting> ).</p>

    <p></p>
  syntax:
    content: public boolean checkAccess(String path, String rwx)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of file or directory to check access for </p>
    - id: rwx
      type: "26831127"
      description: <p>the permission to check for, in rwx string form. The call returns true if the caller has all the requested permissions. For example, specifying<programlisting><codeline><highlight class="normal">"r-x"<sp></sp></highlight></codeline></programlisting> succeeds if the caller has read and execute permissions. </p>
    return:
      type: 4fc6e284
      description: <p>true if the caller has the requested permissions, false otherwise </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.checkExists(String)
  id: checkExists(String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: checkExists(String filename)
  nameWithType: ADLStoreClient.checkExists(String filename)
  fullName: boolean com.microsoft.azure.datalake.store.ADLStoreClient.checkExists(String filename)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.checkExists*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 762
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Check that a file or directory exists.</p>

    <p></p>
  syntax:
    content: public boolean checkExists(String filename)
    parameters:
    - id: filename
      type: "26831127"
      description: <p>path to check </p>
    return:
      type: 4fc6e284
      description: <p>true if the path exists, false otherwise </p>
  exceptions:
  - type: cbf33bbe
    description: <p>thrown on error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.concatenateFiles(String,List<String>)
  id: concatenateFiles(String,List<String>)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: concatenateFiles(String path, List<String> fileList)
  nameWithType: ADLStoreClient.concatenateFiles(String path, List<String> fileList)
  fullName: boolean com.microsoft.azure.datalake.store.ADLStoreClient.concatenateFiles(String path, List<String> fileList)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.concatenateFiles*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 309
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Concatenate the specified list of files into this file. The target should not exist. The source files will be deleted if the concatenate succeeds.</p>

    <p></p>
  syntax:
    content: public boolean concatenateFiles(String path, List<String> fileList)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of the destination to concatenate files into </p>
    - id: fileList
      type: 7d60c20e
      description: >-
        <p>

          <ref refid="" kindref="compound">List</ref> of strings containing full pathnames of the files to concatenate. Cannot be null or empty. </p>
    return:
      type: 4fc6e284
      description: <p>returns true if the call succeeds </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error in concatenating files </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.createClient(String,AccessTokenProvider)
  id: createClient(String,AccessTokenProvider)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: createClient(String accountFQDN, AccessTokenProvider tokenProvider)
  nameWithType: ADLStoreClient.createClient(String accountFQDN, AccessTokenProvider tokenProvider)
  fullName: static ADLStoreClient com.microsoft.azure.datalake.store.ADLStoreClient.createClient(String accountFQDN, AccessTokenProvider tokenProvider)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.createClient*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 149
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>gets an<programlisting><codeline><highlight class="normal">ADLStoreClient<sp></sp></highlight></codeline></programlisting> object.</p>

    <p></p>
  syntax:
    content: public static ADLStoreClient createClient(String accountFQDN, AccessTokenProvider tokenProvider)
    parameters:
    - id: accountFQDN
      type: "26831127"
      description: <p>string containing the fully qualified domain name of the account. For example, contoso.azuredatalakestore.net </p>
    - id: tokenProvider
      type: com.microsoft.azure.datalake.store.oauth2._access_token_provider
      description: >-
        <p>

          <ref refid="" kindref="compound">AccessTokenProvider</ref> that can provide the AAD token </p>
    return:
      type: com.microsoft.azure.datalake.store._a_d_l_store_client
      description: <p>the client object </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.createClient(String,AzureADToken)
  id: createClient(String,AzureADToken)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: createClient(String accountFQDN, AzureADToken token)
  nameWithType: ADLStoreClient.createClient(String accountFQDN, AzureADToken token)
  fullName: static ADLStoreClient com.microsoft.azure.datalake.store.ADLStoreClient.createClient(String accountFQDN, AzureADToken token)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.createClient*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 108
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>gets an<programlisting><codeline><highlight class="normal">ADLStoreClient<sp></sp></highlight></codeline></programlisting> object.</p>

    <p></p>
  syntax:
    content: public static ADLStoreClient createClient(String accountFQDN, AzureADToken token)
    parameters:
    - id: accountFQDN
      type: "26831127"
      description: <p>string containing the fully qualified domain name of the account. e.g., contoso.azuredatalakestore.net </p>
    - id: token
      type: com.microsoft.azure.datalake.store.oauth2._azure_a_d_token
      description: >-
        <p>

          <ref refid="" kindref="compound">AzureADToken</ref> object that contains the AAD token to use </p>
    return:
      type: com.microsoft.azure.datalake.store._a_d_l_store_client
      description: <p>the client object </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.createClient(String,ClientCredsTokenProvider)
  id: createClient(String,ClientCredsTokenProvider)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: createClient(String accountFQDN, ClientCredsTokenProvider tokenProvider)
  nameWithType: ADLStoreClient.createClient(String accountFQDN, ClientCredsTokenProvider tokenProvider)
  fullName: static ADLStoreClient com.microsoft.azure.datalake.store.ADLStoreClient.createClient(String accountFQDN, ClientCredsTokenProvider tokenProvider)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.createClient*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 171
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>gets an<programlisting><codeline><highlight class="normal">ADLStoreClient<sp></sp></highlight></codeline></programlisting> object.</p>

    <p></p>
  syntax:
    content: public static ADLStoreClient createClient(String accountFQDN, ClientCredsTokenProvider tokenProvider)
    parameters:
    - id: accountFQDN
      type: "26831127"
      description: <p>string containing the fully qualified domain name of the account. For example, contoso.azuredatalakestore.net </p>
    - id: tokenProvider
      type: com.microsoft.azure.datalake.store.oauth2._client_creds_token_provider
      description: >-
        <p>

          <ref refid="" kindref="compound">ClientCredsTokenProvider</ref> that can provide the AAD token </p>
    return:
      type: com.microsoft.azure.datalake.store._a_d_l_store_client
      description: <p>the client object </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.createClient(String,RefreshTokenBasedTokenProvider)
  id: createClient(String,RefreshTokenBasedTokenProvider)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: createClient(String accountFQDN, RefreshTokenBasedTokenProvider tokenProvider)
  nameWithType: ADLStoreClient.createClient(String accountFQDN, RefreshTokenBasedTokenProvider tokenProvider)
  fullName: static ADLStoreClient com.microsoft.azure.datalake.store.ADLStoreClient.createClient(String accountFQDN, RefreshTokenBasedTokenProvider tokenProvider)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.createClient*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 184
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>gets an<programlisting><codeline><highlight class="normal">ADLStoreClient<sp></sp></highlight></codeline></programlisting> object.</p>

    <p></p>
  syntax:
    content: public static ADLStoreClient createClient(String accountFQDN, RefreshTokenBasedTokenProvider tokenProvider)
    parameters:
    - id: accountFQDN
      type: "26831127"
      description: <p>string containing the fully qualified domain name of the account. For example, contoso.azuredatalakestore.net </p>
    - id: tokenProvider
      type: com.microsoft.azure.datalake.store.oauth2._refresh_token_based_token_provider
      description: >-
        <p>

          <ref refid="" kindref="compound">RefreshTokenBasedTokenProvider</ref> that can provide the AAD token </p>
    return:
      type: com.microsoft.azure.datalake.store._a_d_l_store_client
      description: <p>the client object </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.createClient(String,String)
  id: createClient(String,String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: createClient(String accountFQDN, String accessToken)
  nameWithType: ADLStoreClient.createClient(String accountFQDN, String accessToken)
  fullName: static ADLStoreClient com.microsoft.azure.datalake.store.ADLStoreClient.createClient(String accountFQDN, String accessToken)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.createClient*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 128
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>gets an<programlisting><codeline><highlight class="normal">ADLStoreClient<sp></sp></highlight></codeline></programlisting> object.</p>

    <p></p>
  syntax:
    content: public static ADLStoreClient createClient(String accountFQDN, String accessToken)
    parameters:
    - id: accountFQDN
      type: "26831127"
      description: <p>string containing the fully qualified domain name of the account. e.g., contoso.azuredatalakestore.net </p>
    - id: accessToken
      type: "26831127"
      description: <p>String containing the AAD access token to be used </p>
    return:
      type: com.microsoft.azure.datalake.store._a_d_l_store_client
      description: <p>the client object </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.createClient(String,UserPasswordTokenProvider)
  id: createClient(String,UserPasswordTokenProvider)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: createClient(String accountFQDN, UserPasswordTokenProvider tokenProvider)
  nameWithType: ADLStoreClient.createClient(String accountFQDN, UserPasswordTokenProvider tokenProvider)
  fullName: static ADLStoreClient com.microsoft.azure.datalake.store.ADLStoreClient.createClient(String accountFQDN, UserPasswordTokenProvider tokenProvider)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.createClient*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 196
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>gets an<programlisting><codeline><highlight class="normal">ADLStoreClient<sp></sp></highlight></codeline></programlisting> object.</p>

    <p></p>
  syntax:
    content: public static ADLStoreClient createClient(String accountFQDN, UserPasswordTokenProvider tokenProvider)
    parameters:
    - id: accountFQDN
      type: "26831127"
      description: <p>string containing the fully qualified domain name of the account. For example, contoso.azuredatalakestore.net </p>
    - id: tokenProvider
      type: com.microsoft.azure.datalake.store.oauth2._user_password_token_provider
      description: >-
        <p>

          <ref refid="" kindref="compound">UserPasswordTokenProvider</ref> that can provide the AAD token </p>
    return:
      type: com.microsoft.azure.datalake.store._a_d_l_store_client
      description: <p>the client object </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.createDirectory(String)
  id: createDirectory(String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: createDirectory(String path)
  nameWithType: ADLStoreClient.createDirectory(String path)
  fullName: boolean com.microsoft.azure.datalake.store.ADLStoreClient.createDirectory(String path)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.createDirectory*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 538
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>creates a directory, and all it's parent directories if they dont already exist.</p>

    <p></p>
  syntax:
    content: public boolean createDirectory(String path)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of directory to create </p>
    return:
      type: 4fc6e284
      description: <p>returns<programlisting><codeline><highlight class="normal">true<sp></sp></highlight></codeline></programlisting> if the call succeeded </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.createDirectory(String,String)
  id: createDirectory(String,String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: createDirectory(String path, String octalPermission)
  nameWithType: ADLStoreClient.createDirectory(String path, String octalPermission)
  fullName: boolean com.microsoft.azure.datalake.store.ADLStoreClient.createDirectory(String path, String octalPermission)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.createDirectory*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 550
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>creates a directory, and all it's parent directories if they dont already exist.</p>

    <p></p>
  syntax:
    content: public boolean createDirectory(String path, String octalPermission)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of directory to create </p>
    - id: octalPermission
      type: "26831127"
      description: <p>permissions for the directory, as octal digits (for example,<programlisting><codeline><highlight class="normal">"755"<sp></sp></highlight></codeline></programlisting> ). Can be null. </p>
    return:
      type: 4fc6e284
      description: <p>returns<programlisting><codeline><highlight class="normal">true<sp></sp></highlight></codeline></programlisting> if the call succeeded </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.createEmptyFile(String)
  id: createEmptyFile(String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: createEmptyFile(String filename)
  nameWithType: ADLStoreClient.createEmptyFile(String filename)
  fullName: void com.microsoft.azure.datalake.store.ADLStoreClient.createEmptyFile(String filename)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.createEmptyFile*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 781
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Creates an empty file.</p>

    <p></p>
  syntax:
    content: public void createEmptyFile(String filename)
    parameters:
    - id: filename
      type: "26831127"
      description: <p>name of file to create. </p>
  exceptions:
  - type: cbf33bbe
    description: <p>thrown on error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.createFile(String,IfExists)
  id: createFile(String,IfExists)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: createFile(String path, IfExists mode)
  nameWithType: ADLStoreClient.createFile(String path, IfExists mode)
  fullName: ADLFileOutputStream com.microsoft.azure.datalake.store.ADLStoreClient.createFile(String path, IfExists mode)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.createFile*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 220
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>create a file. If<programlisting><codeline><highlight class="normal">overwriteIfExists<sp></sp></highlight></codeline></programlisting> is false and the file already exists, then an exceptionis thrown. The call returns an <xref href="com.microsoft.azure.datalake.store._a_d_l_file_output_stream" data-throw-if-not-resolved="false"></xref> that can then be written to.</p>

    <p></p>
  syntax:
    content: public ADLFileOutputStream createFile(String path, IfExists mode)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of file to create </p>
    - id: mode
      type: com.microsoft.azure.datalake.store._if_exists
      description: >-
        <p>

          <xref href="com.microsoft.azure.datalake.store._if_exists" data-throw-if-not-resolved="false"></xref>

          <programlisting>

            <codeline>

              <highlight class="normal">enum<sp></sp></highlight>

            </codeline>

          </programlisting> specifying whether to overwite or throw an exception if the file already exists </p>
    return:
      type: com.microsoft.azure.datalake.store._a_d_l_file_output_stream
      description: >-
        <p>

          <xref href="com.microsoft.azure.datalake.store._a_d_l_file_output_stream" data-throw-if-not-resolved="false"></xref> to write to </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error in creating the file </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.createFile(String,IfExists,String,boolean)
  id: createFile(String,IfExists,String,boolean)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: createFile(String path, IfExists mode, String octalPermission, boolean createParent)
  nameWithType: ADLStoreClient.createFile(String path, IfExists mode, String octalPermission, boolean createParent)
  fullName: ADLFileOutputStream com.microsoft.azure.datalake.store.ADLStoreClient.createFile(String path, IfExists mode, String octalPermission, boolean createParent)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.createFile*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 238
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>create a file. If<programlisting><codeline><highlight class="normal">overwriteIfExists<sp></sp></highlight></codeline></programlisting> is false and the file already exists, then an exceptionis thrown. The call returns an <xref href="com.microsoft.azure.datalake.store._a_d_l_file_output_stream" data-throw-if-not-resolved="false"></xref> that can then be written to.</p>

    <p></p>
  syntax:
    content: public ADLFileOutputStream createFile(String path, IfExists mode, String octalPermission, boolean createParent)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of file to create </p>
    - id: mode
      type: com.microsoft.azure.datalake.store._if_exists
      description: >-
        <p>

          <xref href="com.microsoft.azure.datalake.store._if_exists" data-throw-if-not-resolved="false"></xref>

          <programlisting>

            <codeline>

              <highlight class="normal">enum<sp></sp></highlight>

            </codeline>

          </programlisting> specifying whether to overwite or throw an exception if the file already exists </p>
    - id: octalPermission
      type: "26831127"
      description: <p>permissions for the file, as octal digits (For Example,<programlisting><codeline><highlight class="normal">"755"<sp></sp></highlight></codeline></programlisting> ) </p>
    - id: createParent
      type: 4fc6e284
      description: <p>if true, then parent directories of the file are created if they are missing. </p>
    return:
      type: com.microsoft.azure.datalake.store._a_d_l_file_output_stream
      description: >-
        <p>

          <xref href="com.microsoft.azure.datalake.store._a_d_l_file_output_stream" data-throw-if-not-resolved="false"></xref> to write to </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error in creating the file </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.delete(String)
  id: delete(String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: delete(String path)
  nameWithType: ADLStoreClient.delete(String path)
  fullName: boolean com.microsoft.azure.datalake.store.ADLStoreClient.delete(String path)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.delete*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 659
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>delete the file or directory.</p>

    <p></p>
  syntax:
    content: public boolean delete(String path)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of file or directory to delete </p>
    return:
      type: 4fc6e284
      description: <p>returns<programlisting><codeline><highlight class="normal">true<sp></sp></highlight></codeline></programlisting> if the call succeeded </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.deleteRecursive(String)
  id: deleteRecursive(String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: deleteRecursive(String path)
  nameWithType: ADLStoreClient.deleteRecursive(String path)
  fullName: boolean com.microsoft.azure.datalake.store.ADLStoreClient.deleteRecursive(String path)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.deleteRecursive*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 568
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>deletes a directory and all it's child directories and files recursively.</p>

    <p></p>
  syntax:
    content: public boolean deleteRecursive(String path)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of directory to delete </p>
    return:
      type: 4fc6e284
      description: <p>returns<programlisting><codeline><highlight class="normal">true<sp></sp></highlight></codeline></programlisting> if the call succeeded </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory(String)
  id: enumerateDirectory(String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: enumerateDirectory(String path)
  nameWithType: ADLStoreClient.enumerateDirectory(String path)
  fullName: List<DirectoryEntry> com.microsoft.azure.datalake.store.ADLStoreClient.enumerateDirectory(String path)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 352
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Enumerates the contents of a directory, returning a <ref refid="" kindref="compound">List</ref> of <xref href="com.microsoft.azure.datalake.store._directory_entry" data-throw-if-not-resolved="false"></xref> objects, one per file or directory in the specified directory.</p>

    <p></p>
  syntax:
    content: public List<DirectoryEntry> enumerateDirectory(String path)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of directory to enumerate </p>
    return:
      type: 5618da2dcom.microsoft.azure.datalake.store._directory_entrya08ddfce
      description: >-
        <p>

          <ref refid="" kindref="compound">List</ref>&lt;<xref href="com.microsoft.azure.datalake.store._directory_entry" data-throw-if-not-resolved="false"></xref>&gt; containing the contents of the directory </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory(String,int)
  id: enumerateDirectory(String,int)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: enumerateDirectory(String path, int maxEntriesToRetrieve)
  nameWithType: ADLStoreClient.enumerateDirectory(String path, int maxEntriesToRetrieve)
  fullName: List<DirectoryEntry> com.microsoft.azure.datalake.store.ADLStoreClient.enumerateDirectory(String path, int maxEntriesToRetrieve)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 384
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Enumerates the contents of a directory, returning a <ref refid="" kindref="compound">List</ref> of <xref href="com.microsoft.azure.datalake.store._directory_entry" data-throw-if-not-resolved="false"></xref> objects, one per file or directory in the specified directory. </p>

    <p>To avoid overwhelming the client or the server, the call may return a partial list, in which case the caller should make the call again with the last entry from the returned list specified as the <programlisting><codeline><highlight class="normal">startAfter<sp></sp></highlight></codeline></programlisting> parameter of the next call. </p>

    <p></p>
  syntax:
    content: public List<DirectoryEntry> enumerateDirectory(String path, int maxEntriesToRetrieve)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of directory to enumerate </p>
    - id: maxEntriesToRetrieve
      type: f75371fa
      description: <p>maximum number of entries to retrieve. Note that server can limit the number of entries retrieved to a number smaller than the number specified. </p>
    return:
      type: 5618da2dcom.microsoft.azure.datalake.store._directory_entrya08ddfce
      description: >-
        <p>

          <ref refid="" kindref="compound">List</ref>&lt;<xref href="com.microsoft.azure.datalake.store._directory_entry" data-throw-if-not-resolved="false"></xref>&gt; containing the contents of the directory </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory(String,int,String)
  id: enumerateDirectory(String,int,String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: enumerateDirectory(String path, int maxEntriesToRetrieve, String startAfter)
  nameWithType: ADLStoreClient.enumerateDirectory(String path, int maxEntriesToRetrieve, String startAfter)
  fullName: List<DirectoryEntry> com.microsoft.azure.datalake.store.ADLStoreClient.enumerateDirectory(String path, int maxEntriesToRetrieve, String startAfter)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 422
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Enumerates the contents of a directory, returning a <ref refid="" kindref="compound">List</ref> of <xref href="com.microsoft.azure.datalake.store._directory_entry" data-throw-if-not-resolved="false"></xref> objects, one per file or directory in the specified directory. </p>

    <p>To avoid overwhelming the client or the server, the call may return a partial list, in which case the caller should make the call again with the last entry from the returned list specified as the <programlisting><codeline><highlight class="normal">startAfter<sp></sp></highlight></codeline></programlisting> parameter of the next call. </p>

    <p></p>
  syntax:
    content: public List<DirectoryEntry> enumerateDirectory(String path, int maxEntriesToRetrieve, String startAfter)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of directory to enumerate </p>
    - id: maxEntriesToRetrieve
      type: f75371fa
      description: <p>maximum number of entries to retrieve. Note that server can limit the number of entries retrieved to a number smaller than the number specified. </p>
    - id: startAfter
      type: "26831127"
      description: <p>the filename after which to begin enumeration </p>
    return:
      type: 5618da2dcom.microsoft.azure.datalake.store._directory_entrya08ddfce
      description: >-
        <p>

          <ref refid="" kindref="compound">List</ref>&lt;<xref href="com.microsoft.azure.datalake.store._directory_entry" data-throw-if-not-resolved="false"></xref>&gt; containing the contents of the directory </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory(String,int,String,String)
  id: enumerateDirectory(String,int,String,String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: enumerateDirectory(String path, int maxEntriesToRetrieve, String startAfter, String endBefore)
  nameWithType: ADLStoreClient.enumerateDirectory(String path, int maxEntriesToRetrieve, String startAfter, String endBefore)
  fullName: List<DirectoryEntry> com.microsoft.azure.datalake.store.ADLStoreClient.enumerateDirectory(String path, int maxEntriesToRetrieve, String startAfter, String endBefore)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 462
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Enumerates the contents of a directory, returning a <ref refid="" kindref="compound">List</ref> of <xref href="com.microsoft.azure.datalake.store._directory_entry" data-throw-if-not-resolved="false"></xref> objects, one per file or directory in the specified directory. </p>

    <p>To avoid overwhelming the client or the server, the call may return a partial list, in which case the caller should make the call again with the last entry from the returned list specified as the <programlisting><codeline><highlight class="normal">startAfter<sp></sp></highlight></codeline></programlisting> parameter of the next call. </p>

    <p></p>
  syntax:
    content: public List<DirectoryEntry> enumerateDirectory(String path, int maxEntriesToRetrieve, String startAfter, String endBefore)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of directory to enumerate </p>
    - id: maxEntriesToRetrieve
      type: f75371fa
      description: <p>maximum number of entries to retrieve. Note that server can limit the number of entries retrieved to a number smaller than the number specified. </p>
    - id: startAfter
      type: "26831127"
      description: <p>the filename after which to begin enumeration </p>
    - id: endBefore
      type: "26831127"
      description: <p>the filename before which to end the enumeration </p>
    return:
      type: 5618da2dcom.microsoft.azure.datalake.store._directory_entrya08ddfce
      description: >-
        <p>

          <ref refid="" kindref="compound">List</ref>&lt;<xref href="com.microsoft.azure.datalake.store._directory_entry" data-throw-if-not-resolved="false"></xref>&gt; containing the contents of the directory </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory(String,int,String,String,UserGroupRepresentation)
  id: enumerateDirectory(String,int,String,String,UserGroupRepresentation)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: enumerateDirectory(String path, int maxEntriesToRetrieve, String startAfter, String endBefore, UserGroupRepresentation oidOrUpn)
  nameWithType: ADLStoreClient.enumerateDirectory(String path, int maxEntriesToRetrieve, String startAfter, String endBefore, UserGroupRepresentation oidOrUpn)
  fullName: List<DirectoryEntry> com.microsoft.azure.datalake.store.ADLStoreClient.enumerateDirectory(String path, int maxEntriesToRetrieve, String startAfter, String endBefore, UserGroupRepresentation oidOrUpn)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 489
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Enumerates the contents of a directory, returning a <ref refid="" kindref="compound">List</ref> of <xref href="com.microsoft.azure.datalake.store._directory_entry" data-throw-if-not-resolved="false"></xref> objects, one per file or directory in the specified directory. </p>

    <p>To avoid overwhelming the client or the server, the call may return a partial list, in which case the caller should make the call again with the last entry from the returned list specified as the <programlisting><codeline><highlight class="normal">startAfter<sp></sp></highlight></codeline></programlisting> parameter of the next call. </p>

    <p></p>
  syntax:
    content: public List<DirectoryEntry> enumerateDirectory(String path, int maxEntriesToRetrieve, String startAfter, String endBefore, UserGroupRepresentation oidOrUpn)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of directory to enumerate </p>
    - id: maxEntriesToRetrieve
      type: f75371fa
      description: <p>maximum number of entries to retrieve. Note that server can limit the number of entries retrieved to a number smaller than the number specified. </p>
    - id: startAfter
      type: "26831127"
      description: <p>the filename after which to begin enumeration </p>
    - id: endBefore
      type: "26831127"
      description: <p>the filename before which to end the enumeration </p>
    - id: oidOrUpn
      type: com.microsoft.azure.datalake.store._user_group_representation
      description: >-
        <p>

          <xref href="com.microsoft.azure.datalake.store._user_group_representation" data-throw-if-not-resolved="false"></xref> enum specifying whether to return user and group information as OID or UPN </p>
    return:
      type: 5618da2dcom.microsoft.azure.datalake.store._directory_entrya08ddfce
      description: >-
        <p>

          <ref refid="" kindref="compound">List</ref>&lt;<xref href="com.microsoft.azure.datalake.store._directory_entry" data-throw-if-not-resolved="false"></xref>&gt; containing the contents of the directory </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory(String,String)
  id: enumerateDirectory(String,String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: enumerateDirectory(String path, String startAfter)
  nameWithType: ADLStoreClient.enumerateDirectory(String path, String startAfter)
  fullName: List<DirectoryEntry> com.microsoft.azure.datalake.store.ADLStoreClient.enumerateDirectory(String path, String startAfter)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 402
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Enumerates the contents of a directory, returning a <ref refid="" kindref="compound">List</ref> of <xref href="com.microsoft.azure.datalake.store._directory_entry" data-throw-if-not-resolved="false"></xref> objects, one per file or directory in the specified directory. </p>

    <p>To avoid overwhelming the client or the server, the call may return a partial list, in which case the caller should make the call again with the last entry from the returned list specified as the <programlisting><codeline><highlight class="normal">startAfter<sp></sp></highlight></codeline></programlisting> parameter of the next call. </p>

    <p></p>
  syntax:
    content: public List<DirectoryEntry> enumerateDirectory(String path, String startAfter)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of directory to enumerate </p>
    - id: startAfter
      type: "26831127"
      description: <p>the filename after which to begin enumeration </p>
    return:
      type: 5618da2dcom.microsoft.azure.datalake.store._directory_entrya08ddfce
      description: >-
        <p>

          <ref refid="" kindref="compound">List</ref>&lt;<xref href="com.microsoft.azure.datalake.store._directory_entry" data-throw-if-not-resolved="false"></xref>&gt; containing the contents of the directory </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory(String,String,String)
  id: enumerateDirectory(String,String,String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: enumerateDirectory(String path, String startAfter, String endBefore)
  nameWithType: ADLStoreClient.enumerateDirectory(String path, String startAfter, String endBefore)
  fullName: List<DirectoryEntry> com.microsoft.azure.datalake.store.ADLStoreClient.enumerateDirectory(String path, String startAfter, String endBefore)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 441
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Enumerates the contents of a directory, returning a <ref refid="" kindref="compound">List</ref> of <xref href="com.microsoft.azure.datalake.store._directory_entry" data-throw-if-not-resolved="false"></xref> objects, one per file or directory in the specified directory. </p>

    <p>To avoid overwhelming the client or the server, the call may return a partial list, in which case the caller should make the call again with the last entry from the returned list specified as the <programlisting><codeline><highlight class="normal">startAfter<sp></sp></highlight></codeline></programlisting> parameter of the next call. </p>

    <p></p>
  syntax:
    content: public List<DirectoryEntry> enumerateDirectory(String path, String startAfter, String endBefore)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of directory to enumerate </p>
    - id: startAfter
      type: "26831127"
      description: <p>the filename after which to begin enumeration </p>
    - id: endBefore
      type: "26831127"
      description: <p>the filename before which to end the enumeration </p>
    return:
      type: 5618da2dcom.microsoft.azure.datalake.store._directory_entrya08ddfce
      description: >-
        <p>

          <ref refid="" kindref="compound">List</ref>&lt;<xref href="com.microsoft.azure.datalake.store._directory_entry" data-throw-if-not-resolved="false"></xref>&gt; containing the contents of the directory </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory(String,UserGroupRepresentation)
  id: enumerateDirectory(String,UserGroupRepresentation)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: enumerateDirectory(String path, UserGroupRepresentation oidOrUpn)
  nameWithType: ADLStoreClient.enumerateDirectory(String path, UserGroupRepresentation oidOrUpn)
  fullName: List<DirectoryEntry> com.microsoft.azure.datalake.store.ADLStoreClient.enumerateDirectory(String path, UserGroupRepresentation oidOrUpn)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 366
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Enumerates the contents of a directory, returning a <ref refid="" kindref="compound">List</ref> of <xref href="com.microsoft.azure.datalake.store._directory_entry" data-throw-if-not-resolved="false"></xref> objects, one per file or directory in the specified directory.</p>

    <p></p>
  syntax:
    content: public List<DirectoryEntry> enumerateDirectory(String path, UserGroupRepresentation oidOrUpn)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of directory to enumerate </p>
    - id: oidOrUpn
      type: com.microsoft.azure.datalake.store._user_group_representation
      description: >-
        <p>

          <xref href="com.microsoft.azure.datalake.store._user_group_representation" data-throw-if-not-resolved="false"></xref> enum specifying whether to return user and group information as OID or UPN </p>
    return:
      type: 5618da2dcom.microsoft.azure.datalake.store._directory_entrya08ddfce
      description: >-
        <p>

          <ref refid="" kindref="compound">List</ref>&lt;<xref href="com.microsoft.azure.datalake.store._directory_entry" data-throw-if-not-resolved="false"></xref>&gt; containing the contents of the directory </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.getAclStatus(String)
  id: getAclStatus(String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: getAclStatus(String path)
  nameWithType: ADLStoreClient.getAclStatus(String path)
  fullName: AclStatus com.microsoft.azure.datalake.store.ADLStoreClient.getAclStatus(String path)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.getAclStatus*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 910
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Queries the ACLs and permissions for a file or directory.</p>

    <p></p>
  syntax:
    content: public AclStatus getAclStatus(String path)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of file or directory to query </p>
    return:
      type: com.microsoft.azure.datalake.store.acl._acl_status
      description: >-
        <p>

          <ref refid="" kindref="compound">AclStatus</ref> object containing the ACL and permission info </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.getAclStatus(String,UserGroupRepresentation)
  id: getAclStatus(String,UserGroupRepresentation)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: getAclStatus(String path, UserGroupRepresentation oidOrUpn)
  nameWithType: ADLStoreClient.getAclStatus(String path, UserGroupRepresentation oidOrUpn)
  fullName: AclStatus com.microsoft.azure.datalake.store.ADLStoreClient.getAclStatus(String path, UserGroupRepresentation oidOrUpn)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.getAclStatus*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 924
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Queries the ACLs and permissions for a file or directory.</p>

    <p></p>
  syntax:
    content: public AclStatus getAclStatus(String path, UserGroupRepresentation oidOrUpn)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of file or directory to query </p>
    - id: oidOrUpn
      type: com.microsoft.azure.datalake.store._user_group_representation
      description: >-
        <p>

          <xref href="com.microsoft.azure.datalake.store._user_group_representation" data-throw-if-not-resolved="false"></xref> enum specifying whether to return user and group information as OID or UPN </p>
    return:
      type: com.microsoft.azure.datalake.store.acl._acl_status
      description: >-
        <p>

          <ref refid="" kindref="compound">AclStatus</ref> object containing the ACL and permission info </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.getAppendStream(String)
  id: getAppendStream(String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: getAppendStream(String path)
  nameWithType: ADLStoreClient.getAppendStream(String path)
  fullName: ADLFileOutputStream com.microsoft.azure.datalake.store.ADLStoreClient.getAppendStream(String path)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.getAppendStream*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 285
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>appends to an existing file.</p>

    <p></p>
  syntax:
    content: public ADLFileOutputStream getAppendStream(String path)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of file to append to </p>
    return:
      type: com.microsoft.azure.datalake.store._a_d_l_file_output_stream
      description: >-
        <p>

          <xref href="com.microsoft.azure.datalake.store._a_d_l_file_output_stream" data-throw-if-not-resolved="false"></xref> to write to. The contents written to this stream will be appended to the file. </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error in opening the file for append </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.getContentSummary(String)
  id: getContentSummary(String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: getContentSummary(String path)
  nameWithType: ADLStoreClient.getContentSummary(String path)
  fullName: ContentSummary com.microsoft.azure.datalake.store.ADLStoreClient.getContentSummary(String path)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.getContentSummary*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 710
  package: com.microsoft.azure.datalake.store
  summary: <p>Gets the content summary of a file or directory. </p>
  syntax:
    content: public ContentSummary getContentSummary(String path)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of file or directory to query </p>
    return:
      type: com.microsoft.azure.datalake.store._content_summary
      description: >-
        <p>

          <xref href="com.microsoft.azure.datalake.store._content_summary" data-throw-if-not-resolved="false"></xref> containing summary of information about the file or directory </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.getDirectoryEntry(String)
  id: getDirectoryEntry(String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: getDirectoryEntry(String path)
  nameWithType: ADLStoreClient.getDirectoryEntry(String path)
  fullName: DirectoryEntry com.microsoft.azure.datalake.store.ADLStoreClient.getDirectoryEntry(String path)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.getDirectoryEntry*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 680
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Gets the directory metadata about this file or directory.</p>

    <p></p>
  syntax:
    content: public DirectoryEntry getDirectoryEntry(String path)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of file or directory to get directory entry for </p>
    return:
      type: com.microsoft.azure.datalake.store._directory_entry
      description: >-
        <p>

          <xref href="com.microsoft.azure.datalake.store._directory_entry" data-throw-if-not-resolved="false"></xref> containing the metadata for the file/directory </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.getDirectoryEntry(String,UserGroupRepresentation)
  id: getDirectoryEntry(String,UserGroupRepresentation)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: getDirectoryEntry(String path, UserGroupRepresentation oidOrUpn)
  nameWithType: ADLStoreClient.getDirectoryEntry(String path, UserGroupRepresentation oidOrUpn)
  fullName: DirectoryEntry com.microsoft.azure.datalake.store.ADLStoreClient.getDirectoryEntry(String path, UserGroupRepresentation oidOrUpn)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.getDirectoryEntry*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 693
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Gets the directory metadata about this file or directory.</p>

    <p></p>
  syntax:
    content: public DirectoryEntry getDirectoryEntry(String path, UserGroupRepresentation oidOrUpn)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of file or directory to get directory entry for </p>
    - id: oidOrUpn
      type: com.microsoft.azure.datalake.store._user_group_representation
      description: >-
        <p>

          <xref href="com.microsoft.azure.datalake.store._user_group_representation" data-throw-if-not-resolved="false"></xref> enum specifying whether to return user and group information as OID or UPN </p>
    return:
      type: com.microsoft.azure.datalake.store._directory_entry
      description: >-
        <p>

          <xref href="com.microsoft.azure.datalake.store._directory_entry" data-throw-if-not-resolved="false"></xref> containing the metadata for the file/directory </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.getExceptionFromResponse(OperationResponse,String)
  id: getExceptionFromResponse(OperationResponse,String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: getExceptionFromResponse(OperationResponse resp, String defaultMessage)
  nameWithType: ADLStoreClient.getExceptionFromResponse(OperationResponse resp, String defaultMessage)
  fullName: IOException com.microsoft.azure.datalake.store.ADLStoreClient.getExceptionFromResponse(OperationResponse resp, String defaultMessage)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.getExceptionFromResponse*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 1101
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>creates an <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> from <xref href="com.microsoft.azure.datalake.store._operation_response" data-throw-if-not-resolved="false"></xref>.</p>

    <p></p>
  syntax:
    content: public IOException getExceptionFromResponse(OperationResponse resp, String defaultMessage)
    parameters:
    - id: resp
      type: com.microsoft.azure.datalake.store._operation_response
      description: <p>the <xref href="com.microsoft.azure.datalake.store._operation_response" data-throw-if-not-resolved="false"></xref> to convert to exception </p>
    - id: defaultMessage
      type: "26831127"
      description: <p>message to use if the inner exception does not have a text message. </p>
    return:
      type: cbf33bbe
      description: <p>the <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref>, or<programlisting><codeline><highlight class="normal">null<sp></sp></highlight></codeline></programlisting> if the<programlisting><codeline><highlight class="normal">resp.successful<sp></sp></highlight></codeline></programlisting> is<programlisting><codeline><highlight class="normal">true<sp></sp></highlight></codeline></programlisting></p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.getReadStream(String)
  id: getReadStream(String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: getReadStream(String path)
  nameWithType: ADLStoreClient.getReadStream(String path)
  fullName: ADLFileInputStream com.microsoft.azure.datalake.store.ADLStoreClient.getReadStream(String path)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.getReadStream*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 268
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Opens a file for read and returns an <xref href="com.microsoft.azure.datalake.store._a_d_l_file_input_stream" data-throw-if-not-resolved="false"></xref> to read the file contents from.</p>

    <p></p>
  syntax:
    content: public ADLFileInputStream getReadStream(String path)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of file to read </p>
    return:
      type: com.microsoft.azure.datalake.store._a_d_l_file_input_stream
      description: >-
        <p>

          <xref href="com.microsoft.azure.datalake.store._a_d_l_file_input_stream" data-throw-if-not-resolved="false"></xref> to read the file contents from. </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error in opening the file </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.modifyAclEntries(String,List<AclEntry>)
  id: modifyAclEntries(String,List<AclEntry>)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: modifyAclEntries(String path, List<AclEntry> aclSpec)
  nameWithType: ADLStoreClient.modifyAclEntries(String path, List<AclEntry> aclSpec)
  fullName: void com.microsoft.azure.datalake.store.ADLStoreClient.modifyAclEntries(String path, List<AclEntry> aclSpec)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.modifyAclEntries*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 841
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Modify the acl entries for a file or directory. This call merges the supplied list with existing ACLs. If an entry with the same scope, type and user already exists, then the permissions are replaced. If not, than an new ACL entry if added.</p>

    <p></p>
  syntax:
    content: public void modifyAclEntries(String path, List<AclEntry> aclSpec)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of file or directory to change ACLs for </p>
    - id: aclSpec
      type: 5618da2dcom.microsoft.azure.datalake.store.acl._acl_entrya08ddfce
      description: >-
        <p>

          <ref refid="" kindref="compound">List</ref> of <ref refid="" kindref="compound">AclEntry</ref>s, containing the entries to add or modify </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.removeAclEntries(String,List<AclEntry>)
  id: removeAclEntries(String,List<AclEntry>)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: removeAclEntries(String path, List<AclEntry> aclSpec)
  nameWithType: ADLStoreClient.removeAclEntries(String path, List<AclEntry> aclSpec)
  fullName: void com.microsoft.azure.datalake.store.ADLStoreClient.removeAclEntries(String path, List<AclEntry> aclSpec)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.removeAclEntries*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 877
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Removes the specified ACL entries from a file or directory.</p>

    <p></p>
  syntax:
    content: public void removeAclEntries(String path, List<AclEntry> aclSpec)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of file or directory to remove ACLs for </p>
    - id: aclSpec
      type: 5618da2dcom.microsoft.azure.datalake.store.acl._acl_entrya08ddfce
      description: >-
        <p>

          <ref refid="" kindref="compound">List</ref> of <ref refid="" kindref="compound">AclEntry</ref>s to remove </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.removeAllAcls(String)
  id: removeAllAcls(String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: removeAllAcls(String path)
  nameWithType: ADLStoreClient.removeAllAcls(String path)
  fullName: void com.microsoft.azure.datalake.store.ADLStoreClient.removeAllAcls(String path)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.removeAllAcls*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 893
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Removes all acl entries from a file or directory.</p>

    <p></p>
  syntax:
    content: public void removeAllAcls(String path)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of file or directory to remove ACLs for </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.removeDefaultAcls(String)
  id: removeDefaultAcls(String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: removeDefaultAcls(String path)
  nameWithType: ADLStoreClient.removeDefaultAcls(String path)
  fullName: void com.microsoft.azure.datalake.store.ADLStoreClient.removeDefaultAcls(String path)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.removeDefaultAcls*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 589
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>removes all default acl entries from a directory. The access ACLs for the directory itself are not modified.</p>

    <p></p>
  syntax:
    content: public void removeDefaultAcls(String path)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of directory to remove default ACLs from </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.rename(String,String)
  id: rename(String,String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: rename(String path, String newName)
  nameWithType: ADLStoreClient.rename(String path, String newName)
  fullName: boolean com.microsoft.azure.datalake.store.ADLStoreClient.rename(String path, String newName)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.rename*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 615
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>rename a file or directory.</p>

    <p></p>
  syntax:
    content: public boolean rename(String path, String newName)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of file or directory to rename </p>
    - id: newName
      type: "26831127"
      description: <p>the new name of the file</p>
    return:
      type: 4fc6e284
      description: <p>returns<programlisting><codeline><highlight class="normal">true<sp></sp></highlight></codeline></programlisting> if the call succeeded</p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.rename(String,String,boolean)
  id: rename(String,String,boolean)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: rename(String path, String newName, boolean overwrite)
  nameWithType: ADLStoreClient.rename(String path, String newName, boolean overwrite)
  fullName: boolean com.microsoft.azure.datalake.store.ADLStoreClient.rename(String path, String newName, boolean overwrite)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.rename*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 632
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>rename a file or directory.</p>

    <p></p>
  syntax:
    content: public boolean rename(String path, String newName, boolean overwrite)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of file or directory to rename </p>
    - id: newName
      type: "26831127"
      description: <p>the new name of the file/directory </p>
    - id: overwrite
      type: 4fc6e284
      description: <p>overwrite destination if it already exists. If the destination is a non-empty directory, then the call fails rather than overwrite the directory.</p>
    return:
      type: 4fc6e284
      description: <p>returns<programlisting><codeline><highlight class="normal">true<sp></sp></highlight></codeline></programlisting> if the call succeeded</p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.setAcl(String,List<AclEntry>)
  id: setAcl(String,List<AclEntry>)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: setAcl(String path, List<AclEntry> aclSpec)
  nameWithType: ADLStoreClient.setAcl(String path, List<AclEntry> aclSpec)
  fullName: void com.microsoft.azure.datalake.store.ADLStoreClient.setAcl(String path, List<AclEntry> aclSpec)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.setAcl*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 860
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Sets the ACLs for a file or directory. If the file or directory already has any ACLs associated with it, then all the existing ACLs are removed before adding the specified ACLs.</p>

    <p></p>
  syntax:
    content: public void setAcl(String path, List<AclEntry> aclSpec)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of file or directory to set ACLs for </p>
    - id: aclSpec
      type: 5618da2dcom.microsoft.azure.datalake.store.acl._acl_entrya08ddfce
      description: >-
        <p>

          <ref refid="" kindref="compound">List</ref> of <ref refid="" kindref="compound">AclEntry</ref>s, containing the entries to set </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.setExpiryTime(String,ExpiryOption,long)
  id: setExpiryTime(String,ExpiryOption,long)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: setExpiryTime(String path, ExpiryOption expiryOption, long expiryTimeMilliseconds)
  nameWithType: ADLStoreClient.setExpiryTime(String path, ExpiryOption expiryOption, long expiryTimeMilliseconds)
  fullName: void com.microsoft.azure.datalake.store.ADLStoreClient.setExpiryTime(String path, ExpiryOption expiryOption, long expiryTimeMilliseconds)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.setExpiryTime*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 328
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Sets the expiry time on a file.</p>

    <p></p>
  syntax:
    content: public void setExpiryTime(String path, ExpiryOption expiryOption, long expiryTimeMilliseconds)
    parameters:
    - id: path
      type: "26831127"
      description: <p>path of the file to set expiry on </p>
    - id: expiryOption
      type: com.microsoft.azure.datalake.store._expiry_option
      description: >-
        <p>

          <xref href="com.microsoft.azure.datalake.store._expiry_option" data-throw-if-not-resolved="false"></xref> value specifying how to interpret the passed in time </p>
    - id: expiryTimeMilliseconds
      type: 0364520f
      description: <p>time duration in milliseconds </p>
  exceptions:
  - type: cbf33bbe
    description: <p>if there is an error in setting file expiry </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.setOptions(ADLStoreOptions)
  id: setOptions(ADLStoreOptions)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: setOptions(ADLStoreOptions o)
  nameWithType: ADLStoreClient.setOptions(ADLStoreOptions o)
  fullName: synchronized void com.microsoft.azure.datalake.store.ADLStoreClient.setOptions(ADLStoreOptions o)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.setOptions*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 946
  package: com.microsoft.azure.datalake.store
  summary: <p>Sets the options to configure the behavior of this client. </p>
  syntax:
    content: public synchronized void setOptions(ADLStoreOptions o)
    parameters:
    - id: o
      type: com.microsoft.azure.datalake.store._a_d_l_store_options
      description: >-
        <p>

          <xref href="com.microsoft.azure.datalake.store._a_d_l_store_options" data-throw-if-not-resolved="false"></xref> object that specifies the options to set </p>
    return:
      type: 5c0b90ca
  exceptions:
  - type: cbf33bbe
    description: <p>if there is an error in creating the file path prefix specified </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.setOwner(String,String,String)
  id: setOwner(String,String,String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: setOwner(String path, String owner, String group)
  nameWithType: ADLStoreClient.setOwner(String path, String owner, String group)
  fullName: void com.microsoft.azure.datalake.store.ADLStoreClient.setOwner(String path, String owner, String group)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.setOwner*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 724
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>sets the owning user and group of the file. If the user or group are<programlisting><codeline><highlight class="normal">null<sp></sp></highlight></codeline></programlisting> , then they are not changed. It is illegal to pass both user and owner as<programlisting><codeline><highlight class="normal">null<sp></sp></highlight></codeline></programlisting> .</p>

    <p></p>
  syntax:
    content: public void setOwner(String path, String owner, String group)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of file or directory to set owner/group for </p>
    - id: owner
      type: "26831127"
      description: <p>the ID of the user, or<programlisting><codeline><highlight class="normal">null<sp></sp></highlight></codeline></programlisting></p>
    - id: group
      type: "26831127"
      description: <p>the ID of the group, or<programlisting><codeline><highlight class="normal">null<sp></sp></highlight></codeline></programlisting></p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.setPermission(String,String)
  id: setPermission(String,String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: setPermission(String path, String octalPermissions)
  nameWithType: ADLStoreClient.setPermission(String path, String octalPermissions)
  fullName: void com.microsoft.azure.datalake.store.ADLStoreClient.setPermission(String path, String octalPermissions)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.setPermission*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 798
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>Sets the permissions of the specified file ro directory. This sets the traditional unix read/write/execute permissions for the file/directory. To set Acl's use the <ref refid="" kindref="compound">setAcl</ref> call.</p>

    <p></p>
  syntax:
    content: public void setPermission(String path, String octalPermissions)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of file or directory to set permissions for </p>
    - id: octalPermissions
      type: "26831127"
      description: <p>the permissions to set, in unix octal form. For example, '644'. </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.setTimes(String,Date,Date)
  id: setTimes(String,Date,Date)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: setTimes(String path, Date atime, Date mtime)
  nameWithType: ADLStoreClient.setTimes(String path, Date atime, Date mtime)
  fullName: void com.microsoft.azure.datalake.store.ADLStoreClient.setTimes(String path, Date atime, Date mtime)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.setTimes*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 742
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>sets one or both of the times (Modified and Access time) of the file or directory</p>

    <p></p>
  syntax:
    content: public void setTimes(String path, Date atime, Date mtime)
    parameters:
    - id: path
      type: "26831127"
      description: <p>full pathname of file or directory to set times for </p>
    - id: atime
      type: "12977444"
      description: <p>Access time as a long </p>
    - id: mtime
      type: "12977444"
      description: <p>Modified time as a long </p>
  exceptions:
  - type: cbf33bbe
    description: >-
      <p>

        <xref href="com.microsoft.azure.datalake.store._a_d_l_exception" data-throw-if-not-resolved="false"></xref> is thrown if there is an error </p>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.updateToken(AzureADToken)
  id: updateToken(AzureADToken)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: updateToken(AzureADToken token)
  nameWithType: ADLStoreClient.updateToken(AzureADToken token)
  fullName: synchronized void com.microsoft.azure.datalake.store.ADLStoreClient.updateToken(AzureADToken token)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.updateToken*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 960
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>update token on existing client. This is useful if the client is expected to be used over long time, and token has expired.</p>

    <p></p>
  syntax:
    content: public synchronized void updateToken(AzureADToken token)
    parameters:
    - id: token
      type: com.microsoft.azure.datalake.store.oauth2._azure_a_d_token
      description: <p>The OAuth2 Token </p>
    return:
      type: 5c0b90ca
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.updateToken(String)
  id: updateToken(String)
  parent: com.microsoft.azure.datalake.store._a_d_l_store_client
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  langs:
  - java
  name: updateToken(String accessToken)
  nameWithType: ADLStoreClient.updateToken(String accessToken)
  fullName: synchronized void com.microsoft.azure.datalake.store.ADLStoreClient.updateToken(String accessToken)
  overload: com.microsoft.azure.datalake.store._a_d_l_store_client.updateToken*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/ADLStoreClient.java
    startLine: 971
  package: com.microsoft.azure.datalake.store
  summary: >-
    <p>update token on existing client. This is useful if the client is expected to be used over long time, and token has expired.</p>

    <p></p>
  syntax:
    content: public synchronized void updateToken(String accessToken)
    parameters:
    - id: accessToken
      type: "26831127"
      description: <p>The AAD Token string </p>
    return:
      type: 5c0b90ca
references:
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.createClient*
  name: createClient
  nameWithType: ADLStoreClient.createClient
  fullName: static ADLStoreClient com.microsoft.azure.datalake.store.ADLStoreClient.createClient
  package: com.microsoft.azure.datalake.store
- uid: cbf33bbe
  spec.java:
  - name: IOException
    fullName: IOException
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.createFile*
  name: createFile
  nameWithType: ADLStoreClient.createFile
  fullName: ADLFileOutputStream com.microsoft.azure.datalake.store.ADLStoreClient.createFile
  package: com.microsoft.azure.datalake.store
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.getReadStream*
  name: getReadStream
  nameWithType: ADLStoreClient.getReadStream
  fullName: ADLFileInputStream com.microsoft.azure.datalake.store.ADLStoreClient.getReadStream
  package: com.microsoft.azure.datalake.store
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.getAppendStream*
  name: getAppendStream
  nameWithType: ADLStoreClient.getAppendStream
  fullName: ADLFileOutputStream com.microsoft.azure.datalake.store.ADLStoreClient.getAppendStream
  package: com.microsoft.azure.datalake.store
- uid: 7d60c20e
  spec.java:
  - name: List<String>
    fullName: List<String>
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.concatenateFiles*
  name: concatenateFiles
  nameWithType: ADLStoreClient.concatenateFiles
  fullName: boolean com.microsoft.azure.datalake.store.ADLStoreClient.concatenateFiles
  package: com.microsoft.azure.datalake.store
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.setExpiryTime*
  name: setExpiryTime
  nameWithType: ADLStoreClient.setExpiryTime
  fullName: void com.microsoft.azure.datalake.store.ADLStoreClient.setExpiryTime
  package: com.microsoft.azure.datalake.store
- uid: 5618da2dcom.microsoft.azure.datalake.store._directory_entrya08ddfce
  spec.java:
  - name: List<
    fullName: List<
  - uid: com.microsoft.azure.datalake.store._directory_entry
    name: DirectoryEntry
    fullName: com.microsoft.azure.datalake.store.DirectoryEntry
    href: com.microsoft.azure.datalake.store._directory_entry.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.enumerateDirectory*
  name: enumerateDirectory
  nameWithType: ADLStoreClient.enumerateDirectory
  fullName: List<DirectoryEntry> com.microsoft.azure.datalake.store.ADLStoreClient.enumerateDirectory
  package: com.microsoft.azure.datalake.store
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.createDirectory*
  name: createDirectory
  nameWithType: ADLStoreClient.createDirectory
  fullName: boolean com.microsoft.azure.datalake.store.ADLStoreClient.createDirectory
  package: com.microsoft.azure.datalake.store
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.deleteRecursive*
  name: deleteRecursive
  nameWithType: ADLStoreClient.deleteRecursive
  fullName: boolean com.microsoft.azure.datalake.store.ADLStoreClient.deleteRecursive
  package: com.microsoft.azure.datalake.store
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.removeDefaultAcls*
  name: removeDefaultAcls
  nameWithType: ADLStoreClient.removeDefaultAcls
  fullName: void com.microsoft.azure.datalake.store.ADLStoreClient.removeDefaultAcls
  package: com.microsoft.azure.datalake.store
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.rename*
  name: rename
  nameWithType: ADLStoreClient.rename
  fullName: boolean com.microsoft.azure.datalake.store.ADLStoreClient.rename
  package: com.microsoft.azure.datalake.store
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.delete*
  name: delete
  nameWithType: ADLStoreClient.delete
  fullName: boolean com.microsoft.azure.datalake.store.ADLStoreClient.delete
  package: com.microsoft.azure.datalake.store
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.getDirectoryEntry*
  name: getDirectoryEntry
  nameWithType: ADLStoreClient.getDirectoryEntry
  fullName: DirectoryEntry com.microsoft.azure.datalake.store.ADLStoreClient.getDirectoryEntry
  package: com.microsoft.azure.datalake.store
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.getContentSummary*
  name: getContentSummary
  nameWithType: ADLStoreClient.getContentSummary
  fullName: ContentSummary com.microsoft.azure.datalake.store.ADLStoreClient.getContentSummary
  package: com.microsoft.azure.datalake.store
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.setOwner*
  name: setOwner
  nameWithType: ADLStoreClient.setOwner
  fullName: void com.microsoft.azure.datalake.store.ADLStoreClient.setOwner
  package: com.microsoft.azure.datalake.store
- uid: "12977444"
  spec.java:
  - name: Date
    fullName: Date
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.setTimes*
  name: setTimes
  nameWithType: ADLStoreClient.setTimes
  fullName: void com.microsoft.azure.datalake.store.ADLStoreClient.setTimes
  package: com.microsoft.azure.datalake.store
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.checkExists*
  name: checkExists
  nameWithType: ADLStoreClient.checkExists
  fullName: boolean com.microsoft.azure.datalake.store.ADLStoreClient.checkExists
  package: com.microsoft.azure.datalake.store
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.createEmptyFile*
  name: createEmptyFile
  nameWithType: ADLStoreClient.createEmptyFile
  fullName: void com.microsoft.azure.datalake.store.ADLStoreClient.createEmptyFile
  package: com.microsoft.azure.datalake.store
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.setPermission*
  name: setPermission
  nameWithType: ADLStoreClient.setPermission
  fullName: void com.microsoft.azure.datalake.store.ADLStoreClient.setPermission
  package: com.microsoft.azure.datalake.store
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.checkAccess*
  name: checkAccess
  nameWithType: ADLStoreClient.checkAccess
  fullName: boolean com.microsoft.azure.datalake.store.ADLStoreClient.checkAccess
  package: com.microsoft.azure.datalake.store
- uid: 5618da2dcom.microsoft.azure.datalake.store.acl._acl_entrya08ddfce
  spec.java:
  - name: List<
    fullName: List<
  - uid: com.microsoft.azure.datalake.store.acl._acl_entry
    name: AclEntry
    fullName: com.microsoft.azure.datalake.store.acl.AclEntry
    href: com.microsoft.azure.datalake.store.acl._acl_entry.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.modifyAclEntries*
  name: modifyAclEntries
  nameWithType: ADLStoreClient.modifyAclEntries
  fullName: void com.microsoft.azure.datalake.store.ADLStoreClient.modifyAclEntries
  package: com.microsoft.azure.datalake.store
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.setAcl*
  name: setAcl
  nameWithType: ADLStoreClient.setAcl
  fullName: void com.microsoft.azure.datalake.store.ADLStoreClient.setAcl
  package: com.microsoft.azure.datalake.store
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.removeAclEntries*
  name: removeAclEntries
  nameWithType: ADLStoreClient.removeAclEntries
  fullName: void com.microsoft.azure.datalake.store.ADLStoreClient.removeAclEntries
  package: com.microsoft.azure.datalake.store
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.removeAllAcls*
  name: removeAllAcls
  nameWithType: ADLStoreClient.removeAllAcls
  fullName: void com.microsoft.azure.datalake.store.ADLStoreClient.removeAllAcls
  package: com.microsoft.azure.datalake.store
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.getAclStatus*
  name: getAclStatus
  nameWithType: ADLStoreClient.getAclStatus
  fullName: AclStatus com.microsoft.azure.datalake.store.ADLStoreClient.getAclStatus
  package: com.microsoft.azure.datalake.store
- uid: 5c0b90ca
  spec.java:
  - name: synchronized void
    fullName: synchronized void
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.setOptions*
  name: setOptions
  nameWithType: ADLStoreClient.setOptions
  fullName: synchronized void com.microsoft.azure.datalake.store.ADLStoreClient.setOptions
  package: com.microsoft.azure.datalake.store
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.updateToken*
  name: updateToken
  nameWithType: ADLStoreClient.updateToken
  fullName: synchronized void com.microsoft.azure.datalake.store.ADLStoreClient.updateToken
  package: com.microsoft.azure.datalake.store
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.getExceptionFromResponse*
  name: getExceptionFromResponse
  nameWithType: ADLStoreClient.getExceptionFromResponse
  fullName: IOException com.microsoft.azure.datalake.store.ADLStoreClient.getExceptionFromResponse
  package: com.microsoft.azure.datalake.store
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.[static initializer]()
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.getAccessToken()
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.getAccountName()
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.getClientId()
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.getFilePathPrefix()
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.getHttpPrefix()
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.getTiHeaderValue()
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.getUserAgent()
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client.remoteExceptionsEnabled()
- uid: com.microsoft.azure.datalake.store.oauth2._access_token_provider
  parent: com.microsoft.azure.datalake.store.oauth2
  href: com.microsoft.azure.datalake.store.oauth2._access_token_provider.yml
  name: AccessTokenProvider
  nameWithType: AccessTokenProvider
  fullName: com.microsoft.azure.datalake.store.oauth2.AccessTokenProvider
  type: Class
  summary: >-
    <p>Returns an Azure Active Directory token when requested. The provider can cache the token if it has already retrieved one. If it does, then the provider is responsible for checking expiry and refreshing as needed. </p>

    <p>In other words, this is is a token cache that fetches tokens when requested, if the cached token has expired. </p>
  syntax:
    content: public class AccessTokenProvider
- uid: com.microsoft.azure.datalake.store._directory_entry
  parent: com.microsoft.azure.datalake.store
  href: com.microsoft.azure.datalake.store._directory_entry.yml
  name: DirectoryEntry
  nameWithType: DirectoryEntry
  fullName: com.microsoft.azure.datalake.store.DirectoryEntry
  type: Class
  summary: <p>filesystem metadata of a directory enrty (a file or a directory) in ADL. </p>
  syntax:
    content: public class DirectoryEntry
- uid: com.microsoft.azure.datalake.store._user_group_representation
  parent: com.microsoft.azure.datalake.store
  href: com.microsoft.azure.datalake.store._user_group_representation.yml
  name: UserGroupRepresentation
  nameWithType: UserGroupRepresentation
  fullName: com.microsoft.azure.datalake.store.UserGroupRepresentation
  type: Enum
  summary: <p>Enum specifying how user and group objects should be represented in calls that return user and group ID. </p>
  syntax:
    content: public enum UserGroupRepresentation
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client
  parent: com.microsoft.azure.datalake.store
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  name: ADLStoreClient
  nameWithType: ADLStoreClient
  fullName: com.microsoft.azure.datalake.store.ADLStoreClient
  type: Class
  summary: >-
    <p>

      <programlisting>

        <codeline>

          <highlight class="normal">ADLStoreClient<sp></sp></highlight>

        </codeline>

      </programlisting> class represents a client to Azure Data Lake. It can be used to perform operations on files and directories. </p>
  syntax: *o1
- uid: com.microsoft.azure.datalake.store.oauth2._azure_a_d_token
  parent: com.microsoft.azure.datalake.store.oauth2
  href: com.microsoft.azure.datalake.store.oauth2._azure_a_d_token.yml
  name: AzureADToken
  nameWithType: AzureADToken
  fullName: com.microsoft.azure.datalake.store.oauth2.AzureADToken
  type: Class
  summary: <p>Object represnting the AAD access token to use when making HTTP requests to Azure Data Lake Storage. </p>
  syntax:
    content: public class AzureADToken
- uid: com.microsoft.azure.datalake.store.oauth2._client_creds_token_provider
  parent: com.microsoft.azure.datalake.store.oauth2
  href: com.microsoft.azure.datalake.store.oauth2._client_creds_token_provider.yml
  name: ClientCredsTokenProvider
  nameWithType: ClientCredsTokenProvider
  fullName: com.microsoft.azure.datalake.store.oauth2.ClientCredsTokenProvider
  type: Class
  summary: <p>Provides tokens based on client credentials </p>
  syntax:
    content: public class ClientCredsTokenProvider
- uid: com.microsoft.azure.datalake.store.oauth2._refresh_token_based_token_provider
  parent: com.microsoft.azure.datalake.store.oauth2
  href: com.microsoft.azure.datalake.store.oauth2._refresh_token_based_token_provider.yml
  name: RefreshTokenBasedTokenProvider
  nameWithType: RefreshTokenBasedTokenProvider
  fullName: com.microsoft.azure.datalake.store.oauth2.RefreshTokenBasedTokenProvider
  type: Class
  summary: <p>Provides tokens based on refresh token </p>
  syntax:
    content: public class RefreshTokenBasedTokenProvider
- uid: com.microsoft.azure.datalake.store.oauth2._user_password_token_provider
  parent: com.microsoft.azure.datalake.store.oauth2
  href: com.microsoft.azure.datalake.store.oauth2._user_password_token_provider.yml
  name: UserPasswordTokenProvider
  nameWithType: UserPasswordTokenProvider
  fullName: com.microsoft.azure.datalake.store.oauth2.UserPasswordTokenProvider
  type: Class
  summary: <p>Provides tokens based on username and password </p>
  syntax:
    content: public class UserPasswordTokenProvider
- uid: com.microsoft.azure.datalake.store._a_d_l_file_output_stream
  parent: com.microsoft.azure.datalake.store
  href: com.microsoft.azure.datalake.store._a_d_l_file_output_stream.yml
  name: ADLFileOutputStream
  nameWithType: ADLFileOutputStream
  fullName: com.microsoft.azure.datalake.store.ADLFileOutputStream
  type: Class
  summary: >-
    <p>

      <programlisting>

        <codeline>

          <highlight class="normal">ADLFileOutputStream<sp></sp></highlight>

        </codeline>

      </programlisting> is used to add data to an Azure Data Lake File. It is a buffering stream that accumulates user writes, and then writes to the server in chunks. Default chunk size is 4MB.</p>

    <p>

      <bold>Thread-safety</bold>: Note that methods in this class are NOT thread-safe.</p>
  syntax:
    content: public class ADLFileOutputStream
- uid: com.microsoft.azure.datalake.store._if_exists
  parent: com.microsoft.azure.datalake.store
  href: com.microsoft.azure.datalake.store._if_exists.yml
  name: IfExists
  nameWithType: IfExists
  fullName: com.microsoft.azure.datalake.store.IfExists
  type: Enum
  summary: <p>Enum specifying actions to take if attempting to create a file that already exists. </p>
  syntax:
    content: public enum IfExists
- uid: com.microsoft.azure.datalake.store._a_d_l_exception
  parent: com.microsoft.azure.datalake.store
  href: com.microsoft.azure.datalake.store._a_d_l_exception.yml
  name: ADLException
  nameWithType: ADLException
  fullName: com.microsoft.azure.datalake.store.ADLException
  type: Class
  summary: <p>Exception type returned by Azure Data Lake SDK methods. Derives from <ref refid="" kindref="compound">IOException</ref>. Contains a number of additional fields that contain information about the success or failure of a server call. </p>
  syntax:
    content: public class ADLException
- uid: com.microsoft.azure.datalake.store._a_d_l_file_input_stream
  parent: com.microsoft.azure.datalake.store
  href: com.microsoft.azure.datalake.store._a_d_l_file_input_stream.yml
  name: ADLFileInputStream
  nameWithType: ADLFileInputStream
  fullName: com.microsoft.azure.datalake.store.ADLFileInputStream
  type: Class
  summary: >-
    <p>

      <xref href="com.microsoft.azure.datalake.store._a_d_l_file_input_stream" data-throw-if-not-resolved="false"></xref> can be used to read data from an open file on ADL. It is a buffering stream, that reads data from the server in bulk, and then satisfies user reads from the buffer. Default buffer size is 4MB.</p>

    <p>

      <bold>Thread-safety</bold>: Note that methods in this class are NOT thread-safe. </p>
  syntax:
    content: public class ADLFileInputStream
- uid: com.microsoft.azure.datalake.store._expiry_option
  parent: com.microsoft.azure.datalake.store
  href: com.microsoft.azure.datalake.store._expiry_option.yml
  name: ExpiryOption
  nameWithType: ExpiryOption
  fullName: com.microsoft.azure.datalake.store.ExpiryOption
  type: Enum
  summary: <p>Enum specifying how to interpret the expiry time specified in setExpiry call. </p>
  syntax:
    content: public enum ExpiryOption
- uid: com.microsoft.azure.datalake.store._content_summary
  parent: com.microsoft.azure.datalake.store
  href: com.microsoft.azure.datalake.store._content_summary.yml
  name: ContentSummary
  nameWithType: ContentSummary
  fullName: com.microsoft.azure.datalake.store.ContentSummary
  type: Class
  summary: <p>structure that contains the return values from getContentSummary call. </p>
  syntax:
    content: public class ContentSummary
- uid: com.microsoft.azure.datalake.store.acl._acl_entry
  parent: com.microsoft.azure.datalake.store.acl
  href: com.microsoft.azure.datalake.store.acl._acl_entry.yml
  name: AclEntry
  nameWithType: AclEntry
  fullName: com.microsoft.azure.datalake.store.acl.AclEntry
  type: Class
  summary: >-
    <p>Contains one ACL entry. An ACL entry consists of a scope (access or default), the type of the ACL (user, group, other or mask), the name of the user or group associated with this ACL (can be blank to specify the default permissions for users and groups, and must be blank for mask entries), and the action permitted by this ACL entry. </p>

    <p>An ACL for an object consists of a<programlisting><codeline><highlight class="normal">List<sp></sp></highlight></codeline></programlisting> of Acl entries. </p>

    <p>This class also provides a number of convenience methods for converting ACL entries and ACLs to and back from strings. </p>
  syntax:
    content: public class AclEntry
- uid: com.microsoft.azure.datalake.store.acl._acl_status
  parent: com.microsoft.azure.datalake.store.acl
  href: com.microsoft.azure.datalake.store.acl._acl_status.yml
  name: AclStatus
  nameWithType: AclStatus
  fullName: com.microsoft.azure.datalake.store.acl.AclStatus
  type: Class
  summary: <p>Object returned by the <xref href="com.microsoft.azure.datalake.store._a_d_l_store_client.getAclStatus(String)" data-throw-if-not-resolved="false"></xref> getAclStatus} call, that contains the Acl and Permission information for that file or directory. </p>
  syntax:
    content: public class AclStatus
- uid: com.microsoft.azure.datalake.store._a_d_l_store_options
  parent: com.microsoft.azure.datalake.store
  href: com.microsoft.azure.datalake.store._a_d_l_store_options.yml
  name: ADLStoreOptions
  nameWithType: ADLStoreOptions
  fullName: com.microsoft.azure.datalake.store.ADLStoreOptions
  type: Class
  summary: <p>Options to configure the behavior of <xref href="com.microsoft.azure.datalake.store._a_d_l_store_client" data-throw-if-not-resolved="false"></xref></p>
  syntax:
    content: public class ADLStoreOptions
- uid: com.microsoft.azure.datalake.store._operation_response
  parent: com.microsoft.azure.datalake.store
  href: com.microsoft.azure.datalake.store._operation_response.yml
  name: OperationResponse
  nameWithType: OperationResponse
  fullName: com.microsoft.azure.datalake.store.OperationResponse
  type: Class
  summary: >-
    <p>information about a response from a server call.</p>

    <p>This class is a container for all the information from making a server call. </p>
  syntax:
    content: public class OperationResponse
