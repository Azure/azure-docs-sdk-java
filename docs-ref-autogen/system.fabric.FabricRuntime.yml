### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="AutoCloseable" data-throw-if-not-resolved="False"/>
methods:
- fullName: system.fabric.FabricRuntime.close()
  name: close()
  nameWithType: FabricRuntime.close()
  summary: <p>Closes the associated <xref uid="system.fabric.FabricCodePackageActivationContext" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricCodePackageActivationContext"></xref> instance and release the associated runtime pointer. </p>
  syntax: public void close()
  uid: system.fabric.FabricRuntime.close()
- fullName: system.fabric.FabricRuntime.create()
  name: create()
  nameWithType: FabricRuntime.create()
  returns:
    description: <p>A newly created <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricRuntime"></xref> object. </p>
    type: <xref href="system.fabric.FabricRuntime?alt=system.fabric.FabricRuntime&text=FabricRuntime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricRuntime"></xref> object.</p>

    <p></p>
  syntax: public static FabricRuntime create()
  uid: system.fabric.FabricRuntime.create()
- fullName: system.fabric.FabricRuntime.createAsync(Duration timeout)
  name: createAsync(Duration timeout)
  nameWithType: FabricRuntime.createAsync(Duration timeout)
  parameters:
  - description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The task representing the asynchronous operation. </p>
    type: CompletableFuture&lt;<xref href="system.fabric.FabricRuntime?alt=system.fabric.FabricRuntime&text=FabricRuntime" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricRuntime"></xref> object asynchronously with the specified timeout parameter.</p>

    <p></p>
  syntax: public static CompletableFuture<FabricRuntime> createAsync(Duration timeout)
  uid: system.fabric.FabricRuntime.createAsync(Duration)
- fullName: system.fabric.FabricRuntime.createAsync(Runnable fabricExitCallback, Duration timeout)
  name: createAsync(Runnable fabricExitCallback, Duration timeout)
  nameWithType: FabricRuntime.createAsync(Runnable fabricExitCallback, Duration timeout)
  parameters:
  - description: <p>The Action to be executed when the runtime exits or terminates. </p>
    name: fabricExitCallback
    type: <xref href="Runnable?alt=Runnable&text=Runnable" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The task representing the asynchronous operation. </p>
    type: CompletableFuture&lt;<xref href="system.fabric.FabricRuntime?alt=system.fabric.FabricRuntime&text=FabricRuntime" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricRuntime"></xref> object asynchronously with the specified callback function which will be executed if the underlying runtime terminates or exits for any reason.</p>

    <p></p>
  syntax: public static CompletableFuture<FabricRuntime> createAsync(Runnable fabricExitCallback, Duration timeout)
  uid: system.fabric.FabricRuntime.createAsync(Runnable,Duration)
- fullName: system.fabric.FabricRuntime.getActivationContext()
  name: getActivationContext()
  nameWithType: FabricRuntime.getActivationContext()
  returns:
    description: <p>The activation context. </p>
    type: <xref href="system.fabric.FabricCodePackageActivationContext?alt=system.fabric.FabricCodePackageActivationContext&text=FabricCodePackageActivationContext" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieves the current <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricRuntime"></xref>'s <xref uid="system.fabric.CodePackageActivationContext" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext"></xref>.</p>

    <p></p>
  syntax: public static FabricCodePackageActivationContext getActivationContext()
  uid: system.fabric.FabricRuntime.getActivationContext()
- fullName: system.fabric.FabricRuntime.getActivationContextAsync(Duration timeout)
  name: getActivationContextAsync(Duration timeout)
  nameWithType: FabricRuntime.getActivationContextAsync(Duration timeout)
  parameters:
  - description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The task representing the asynchronous operation. </p>
    type: CompletableFuture&lt;<xref href="system.fabric.FabricCodePackageActivationContext?alt=system.fabric.FabricCodePackageActivationContext&text=FabricCodePackageActivationContext" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the current <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricRuntime"></xref>â€™s <xref uid="system.fabric.CodePackageActivationContext" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext"></xref> asynchronously with the specified parameter.</p>

    <p></p>
  syntax: public static CompletableFuture<FabricCodePackageActivationContext> getActivationContextAsync(Duration timeout)
  uid: system.fabric.FabricRuntime.getActivationContextAsync(Duration)
- fullName: system.fabric.FabricRuntime.getNodeContext()
  name: getNodeContext()
  nameWithType: FabricRuntime.getNodeContext()
  returns:
    description: <p>The node context. </p>
    type: <xref href="system.fabric.NodeContext?alt=system.fabric.NodeContext&text=NodeContext" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the Node Context object that contains information about Fabric Node.</p>

    <p></p>
  syntax: public static NodeContext getNodeContext()
  uid: system.fabric.FabricRuntime.getNodeContext()
- fullName: system.fabric.FabricRuntime.getNodeContextAsync(Duration timeout)
  name: getNodeContextAsync(Duration timeout)
  nameWithType: FabricRuntime.getNodeContextAsync(Duration timeout)
  parameters:
  - description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The task representing the asynchronous operation. </p>
    type: CompletableFuture&lt;<xref href="system.fabric.NodeContext?alt=system.fabric.NodeContext&text=NodeContext" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets Node Context from Fabric Node asynchronously with timeout and cancellation token.</p>

    <p></p>
  syntax: public static CompletableFuture<NodeContext> getNodeContextAsync(Duration timeout)
  uid: system.fabric.FabricRuntime.getNodeContextAsync(Duration)
- fullName: system.fabric.FabricRuntime.registerServiceType(String serviceTypeName, Class<?> serviceTypeImplementation)
  name: registerServiceType(String serviceTypeName, Class<?> serviceTypeImplementation)
  nameWithType: FabricRuntime.registerServiceType(String serviceTypeName, Class<?> serviceTypeImplementation)
  parameters:
  - description: <p>The type name of the service type (as a string). This should match the type of the service group type as specified in the manifests and/or the CreateService command. </p>
    name: serviceTypeName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The qualified service Type that implements the specified serviceTypeName. </p>
    name: serviceTypeImplementation
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Associates the specified serviceTypeName with the actual managed Type that implements it.</p>

    <p>

      <b>Remarks:</b>Note that this mechanism for service type registration does not require a custom <xref uid="system.fabric.StatelessServiceFactory" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatelessServiceFactory"></xref> or <xref uid="system.fabric.StatefulServiceFactory" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatefulServiceFactory"></xref> to be provided at registration time. Service Fabric will generate one at runtime and utilize it automatically. If there is a need for a custom implementation of the factory, you can implement <xref uid="system.fabric.StatelessServiceFactory" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatelessServiceFactory"></xref> or <xref uid="system.fabric.StatefulServiceFactory" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatefulServiceFactory"></xref> and then provide those via the corresponding factory registration methods ( <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricRuntime#registerStatelessServiceFactoryAsync(java.lang.String, system.fabric.StatelessServiceFactory, java.time.Duration)"></xref> or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricRuntime#registerStatefulServiceFactoryAsync(java.lang.String, system.fabric.StatefulServiceFactory, java.time.Duration)"></xref> ) </p>
  syntax: public void registerServiceType(String serviceTypeName, Class<?> serviceTypeImplementation)
  uid: system.fabric.FabricRuntime.registerServiceType(String,Class<?>)
- fullName: system.fabric.FabricRuntime.registerServiceTypeAsync(String serviceTypeName, Class<?> serviceTypeImplementation, Duration timeout)
  name: registerServiceTypeAsync(String serviceTypeName, Class<?> serviceTypeImplementation, Duration timeout)
  nameWithType: FabricRuntime.registerServiceTypeAsync(String serviceTypeName, Class<?> serviceTypeImplementation, Duration timeout)
  parameters:
  - description: <p>The type name of the service type (as a string). This should match the type of the service group type as specified in the manifests and/or the CreateService command. </p>
    name: serviceTypeName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The qualified service Type that implements the specified serviceTypeName. </p>
    name: serviceTypeImplementation
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The task representing the asynchronous operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Asynchronously associates the specified serviceTypeName with the actual managed Type that implements it, with the specified timeout</p>

    <p></p>
  syntax: public CompletableFuture<?> registerServiceTypeAsync(String serviceTypeName, Class<?> serviceTypeImplementation, Duration timeout)
  uid: system.fabric.FabricRuntime.registerServiceTypeAsync(String,Class<?>,Duration)
- fullName: system.fabric.FabricRuntime.registerStatefulServiceFactory(String serviceTypeName, StatefulServiceFactory factory)
  name: registerStatefulServiceFactory(String serviceTypeName, StatefulServiceFactory factory)
  nameWithType: FabricRuntime.registerStatefulServiceFactory(String serviceTypeName, StatefulServiceFactory factory)
  parameters:
  - description: <p>The type name of the service type (as a string). This should match the type of the service group type as specified in the manifests and/or the CreateService command. </p>
    name: serviceTypeName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="system.fabric.StatefulServiceFactory" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatefulServiceFactory"></xref> which can create the specified service type. </p>
    name: factory
    type: <xref href="system.fabric.StatefulServiceFactory?alt=system.fabric.StatefulServiceFactory&text=StatefulServiceFactory" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Registers the specified <xref uid="system.fabric.StatefulServiceFactory" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatefulServiceFactory"></xref> for the specified service type.</p>

    <p></p>
  syntax: public void registerStatefulServiceFactory(String serviceTypeName, StatefulServiceFactory factory)
  uid: system.fabric.FabricRuntime.registerStatefulServiceFactory(String,StatefulServiceFactory)
- fullName: system.fabric.FabricRuntime.registerStatefulServiceFactoryAsync(String serviceTypeName, StatefulServiceFactory factory, Duration timeout)
  name: registerStatefulServiceFactoryAsync(String serviceTypeName, StatefulServiceFactory factory, Duration timeout)
  nameWithType: FabricRuntime.registerStatefulServiceFactoryAsync(String serviceTypeName, StatefulServiceFactory factory, Duration timeout)
  parameters:
  - description: <p>The type name of the service type (as a string). This should match the type of the service group type as specified in the manifests and/or the CreateService command. </p>
    name: serviceTypeName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="system.fabric.StatefulServiceFactory" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatefulServiceFactory"></xref> which can create the specified service type. </p>
    name: factory
    type: <xref href="system.fabric.StatefulServiceFactory?alt=system.fabric.StatefulServiceFactory&text=StatefulServiceFactory" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The representing the asynchronous operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Registers the specified <xref uid="system.fabric.StatefulServiceFactory" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatefulServiceFactory"></xref> for the specified service type with the specified timeout and cancellationToken.</p>

    <p></p>
  syntax: public CompletableFuture<?> registerStatefulServiceFactoryAsync(String serviceTypeName, StatefulServiceFactory factory, Duration timeout)
  uid: system.fabric.FabricRuntime.registerStatefulServiceFactoryAsync(String,StatefulServiceFactory,Duration)
- fullName: system.fabric.FabricRuntime.registerStatelessServiceFactory(String serviceTypeName, StatelessServiceFactory factory)
  name: registerStatelessServiceFactory(String serviceTypeName, StatelessServiceFactory factory)
  nameWithType: FabricRuntime.registerStatelessServiceFactory(String serviceTypeName, StatelessServiceFactory factory)
  parameters:
  - description: <p>The type name of the service type (as a string). This should match the type of the service group type as specified in the manifests and/or the CreateService command. </p>
    name: serviceTypeName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="system.fabric.StatelessServiceFactory" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatelessServiceFactory"></xref> which can create the specified service type. </p>
    name: factory
    type: <xref href="system.fabric.StatelessServiceFactory?alt=system.fabric.StatelessServiceFactory&text=StatelessServiceFactory" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Registers the specified <xref uid="system.fabric.StatelessServiceFactory" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatelessServiceFactory"></xref> for the specified service type.</p>

    <p></p>
  syntax: public void registerStatelessServiceFactory(String serviceTypeName, StatelessServiceFactory factory)
  uid: system.fabric.FabricRuntime.registerStatelessServiceFactory(String,StatelessServiceFactory)
- fullName: system.fabric.FabricRuntime.registerStatelessServiceFactoryAsync(String serviceTypeName, StatelessServiceFactory factory, Duration timeout)
  name: registerStatelessServiceFactoryAsync(String serviceTypeName, StatelessServiceFactory factory, Duration timeout)
  nameWithType: FabricRuntime.registerStatelessServiceFactoryAsync(String serviceTypeName, StatelessServiceFactory factory, Duration timeout)
  parameters:
  - description: <p>The type name of the service type (as a string). This should match the type of the service group type as specified in the manifests and/or the CreateService command. </p>
    name: serviceTypeName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="system.fabric.StatelessServiceFactory" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatelessServiceFactory"></xref> which can create the specified service type. </p>
    name: factory
    type: <xref href="system.fabric.StatelessServiceFactory?alt=system.fabric.StatelessServiceFactory&text=StatelessServiceFactory" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The task representing the asynchronous operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Asynchronously registers the specified <xref uid="system.fabric.StatelessServiceFactory" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatelessServiceFactory"></xref> for the specified service type, with the specified timeout and cancellationToken</p>

    <p></p>
  syntax: public CompletableFuture<?> registerStatelessServiceFactoryAsync(String serviceTypeName, StatelessServiceFactory factory, Duration timeout)
  uid: system.fabric.FabricRuntime.registerStatelessServiceFactoryAsync(String,StatelessServiceFactory,Duration)
nameWithType: FabricRuntime
syntax: public class FabricRuntime
type: class
uid: system.fabric.FabricRuntime
fullName: system.fabric.FabricRuntime
name: FabricRuntime
package: system.fabric
summary: <p>Allows user created hosts to obtain their <xref uid="system.fabric.CodePackageActivationContext" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext"></xref>, well as to register the necessary service factories [ <xref uid="system.fabric.StatelessServiceFactory" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatelessServiceFactory"></xref>, <xref uid="system.fabric.StatefulServiceFactory" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatefulServiceFactory"></xref> ] or service types directly. </p>
metadata: {}
