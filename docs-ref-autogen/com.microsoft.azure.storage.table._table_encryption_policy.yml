items:
- uid: com.microsoft.azure.storage.table._table_encryption_policy
  id: _table_encryption_policy
  parent: com.microsoft.azure.storage.table
  children:
  - com.microsoft.azure.storage.table._table_encryption_policy.getKey()
  - com.microsoft.azure.storage.table._table_encryption_policy.getKeyResolver()
  - com.microsoft.azure.storage.table._table_encryption_policy.keyResolver()
  - com.microsoft.azure.storage.table._table_encryption_policy.keyWrapper()
  - com.microsoft.azure.storage.table._table_encryption_policy.setKey(IKey)
  - com.microsoft.azure.storage.table._table_encryption_policy.setKeyResolver(IKeyResolver)
  - com.microsoft.azure.storage.table._table_encryption_policy.TableEncryptionPolicy(IKey,IKeyResolver)
  href: com.microsoft.azure.storage.table._table_encryption_policy.yml
  langs:
  - java
  name: TableEncryptionPolicy
  nameWithType: TableEncryptionPolicy
  fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy
  type: Class
  source:
    remote: &o0
      path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEncryptionPolicy.java
      branch: master
      repo: https://github.com/Azure/azure-storage-java
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEncryptionPolicy.java
    startLine: 47
  package: com.microsoft.azure.storage.table
  summary: <p>Represents a table encryption policy that is used to perform envelope encryption/decryption of Azure table entities. </p>
  syntax: &o1
    content: public class TableEncryptionPolicy
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - com.microsoft.azure.storage.table._table_encryption_policy.decryptEntity(HashMap<String, EntityProperty>,HashSet<String>,String,String,Key,EncryptionData,Boolean)
  - com.microsoft.azure.storage.table._table_encryption_policy.decryptMetadataAndReturnCEK(String,String,EntityProperty,EntityProperty,EncryptionData)
  - com.microsoft.azure.storage.table._table_encryption_policy.encryptEntity(Map<String, EntityProperty>,String,String,EncryptionResolver)
- uid: com.microsoft.azure.storage.table._table_encryption_policy.getKey()
  id: getKey()
  parent: com.microsoft.azure.storage.table._table_encryption_policy
  href: com.microsoft.azure.storage.table._table_encryption_policy.yml
  langs:
  - java
  name: getKey()
  nameWithType: TableEncryptionPolicy.getKey()
  fullName: IKey com.microsoft.azure.storage.table.TableEncryptionPolicy.getKey()
  overload: com.microsoft.azure.storage.table._table_encryption_policy.getKey*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEncryptionPolicy.java
    startLine: 83
  package: com.microsoft.azure.storage.table
  summary: >-
    <p>Gets the <ref refid="" kindref="compound">IKey</ref> that is used to wrap/unwrap the content key during encryption.</p>

    <p></p>
  syntax:
    content: public IKey getKey()
    return:
      type: com.microsoft.azure.keyvault.core._i_key
      description: <p>An <ref refid="" kindref="compound">IKey</ref> object. </p>
- uid: com.microsoft.azure.storage.table._table_encryption_policy.getKeyResolver()
  id: getKeyResolver()
  parent: com.microsoft.azure.storage.table._table_encryption_policy
  href: com.microsoft.azure.storage.table._table_encryption_policy.yml
  langs:
  - java
  name: getKeyResolver()
  nameWithType: TableEncryptionPolicy.getKeyResolver()
  fullName: IKeyResolver com.microsoft.azure.storage.table.TableEncryptionPolicy.getKeyResolver()
  overload: com.microsoft.azure.storage.table._table_encryption_policy.getKeyResolver*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEncryptionPolicy.java
    startLine: 92
  package: com.microsoft.azure.storage.table
  summary: >-
    <p>Gets the key resolver used to select the correct key for decrypting existing table entities.</p>

    <p></p>
  syntax:
    content: public IKeyResolver getKeyResolver()
    return:
      type: com.microsoft.azure.keyvault.core._i_key_resolver
      description: <p>A resolver that returns an <ref refid="" kindref="compound">SymmetricKey</ref> given a keyId. </p>
- uid: com.microsoft.azure.storage.table._table_encryption_policy.keyResolver()
  id: keyResolver()
  parent: com.microsoft.azure.storage.table._table_encryption_policy
  href: com.microsoft.azure.storage.table._table_encryption_policy.yml
  langs:
  - java
  name: keyResolver
  nameWithType: TableEncryptionPolicy.keyResolver
  fullName: IKeyResolver com.microsoft.azure.storage.table.TableEncryptionPolicy.keyResolver
  type: Field
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEncryptionPolicy.java
    startLine: 57
  package: com.microsoft.azure.storage.table
  summary: <p>The <ref refid="" kindref="compound">IKeyResolver</ref> used to select the correct key for decrypting existing table entities. </p>
  syntax:
    content: public IKeyResolver keyResolver
    return:
      type: com.microsoft.azure.keyvault.core._i_key_resolver
- uid: com.microsoft.azure.storage.table._table_encryption_policy.keyWrapper()
  id: keyWrapper()
  parent: com.microsoft.azure.storage.table._table_encryption_policy
  href: com.microsoft.azure.storage.table._table_encryption_policy.yml
  langs:
  - java
  name: keyWrapper
  nameWithType: TableEncryptionPolicy.keyWrapper
  fullName: IKey com.microsoft.azure.storage.table.TableEncryptionPolicy.keyWrapper
  type: Field
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEncryptionPolicy.java
    startLine: 52
  package: com.microsoft.azure.storage.table
  summary: <p>An object of type <ref refid="" kindref="compound">IKey</ref> that is used to wrap/unwrap the content key during encryption. </p>
  syntax:
    content: public IKey keyWrapper
    return:
      type: com.microsoft.azure.keyvault.core._i_key
- uid: com.microsoft.azure.storage.table._table_encryption_policy.setKey(IKey)
  id: setKey(IKey)
  parent: com.microsoft.azure.storage.table._table_encryption_policy
  href: com.microsoft.azure.storage.table._table_encryption_policy.yml
  langs:
  - java
  name: setKey(IKey key)
  nameWithType: TableEncryptionPolicy.setKey(IKey key)
  fullName: void com.microsoft.azure.storage.table.TableEncryptionPolicy.setKey(IKey key)
  overload: com.microsoft.azure.storage.table._table_encryption_policy.setKey*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEncryptionPolicy.java
    startLine: 102
  package: com.microsoft.azure.storage.table
  summary: >-
    <p>Sets the <ref refid="" kindref="compound">IKey</ref> that is used to wrap/unwrap the content key during encryption.</p>

    <p></p>
  syntax:
    content: public void setKey(IKey key)
    parameters:
    - id: key
      type: com.microsoft.azure.keyvault.core._i_key
      description: <p>An <ref refid="" kindref="compound">IKey</ref> object. </p>
- uid: com.microsoft.azure.storage.table._table_encryption_policy.setKeyResolver(IKeyResolver)
  id: setKeyResolver(IKeyResolver)
  parent: com.microsoft.azure.storage.table._table_encryption_policy
  href: com.microsoft.azure.storage.table._table_encryption_policy.yml
  langs:
  - java
  name: setKeyResolver(IKeyResolver keyResolver)
  nameWithType: TableEncryptionPolicy.setKeyResolver(IKeyResolver keyResolver)
  fullName: void com.microsoft.azure.storage.table.TableEncryptionPolicy.setKeyResolver(IKeyResolver keyResolver)
  overload: com.microsoft.azure.storage.table._table_encryption_policy.setKeyResolver*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEncryptionPolicy.java
    startLine: 112
  package: com.microsoft.azure.storage.table
  summary: >-
    <p>Sets the key resolver used to select the correct key for decrypting existing table entities.</p>

    <p></p>
  syntax:
    content: public void setKeyResolver(IKeyResolver keyResolver)
    parameters:
    - id: keyResolver
      type: com.microsoft.azure.keyvault.core._i_key_resolver
      description: <p>A resolver that returns an <ref refid="" kindref="compound">IKey</ref> given a keyId. </p>
- uid: com.microsoft.azure.storage.table._table_encryption_policy.TableEncryptionPolicy(IKey,IKeyResolver)
  id: TableEncryptionPolicy(IKey,IKeyResolver)
  parent: com.microsoft.azure.storage.table._table_encryption_policy
  href: com.microsoft.azure.storage.table._table_encryption_policy.yml
  langs:
  - java
  name: TableEncryptionPolicy(IKey key, IKeyResolver keyResolver)
  nameWithType: TableEncryptionPolicy.TableEncryptionPolicy(IKey key, IKeyResolver keyResolver)
  fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy.TableEncryptionPolicy(IKey key, IKeyResolver keyResolver)
  overload: com.microsoft.azure.storage.table._table_encryption_policy.TableEncryptionPolicy*
  type: Constructor
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/TableEncryptionPolicy.java
    startLine: 73
  package: com.microsoft.azure.storage.table
  summary: >-
    <p>Initializes a new instance of the <xref href="com.microsoft.azure.storage.table._table_encryption_policy" data-throw-if-not-resolved="false"></xref> class with the specified key and resolver. </p>

    <p>If the generated policy is intended to be used for encryption, users are expected to provide a key at the minimum. The absence of key will cause an exception to be thrown during encryption. If the generated policy is intended to be used for decryption, users can provide a keyResolver. The client library will - 1. Invoke the key resolver if specified to get the key. 2. If resolver is not specified but a key is specified, match the key id on the key and use it.</p>

    <p></p>
  syntax:
    content: public TableEncryptionPolicy(IKey key, IKeyResolver keyResolver)
    parameters:
    - id: key
      type: com.microsoft.azure.keyvault.core._i_key
      description: <p>An object of type <ref refid="" kindref="compound">IKey</ref> that is used to wrap/unwrap the content encryption key. </p>
    - id: keyResolver
      type: com.microsoft.azure.keyvault.core._i_key_resolver
      description: <p>The key resolver used to select the correct key for decrypting existing table entities. </p>
references:
- uid: com.microsoft.azure.storage.table._table_encryption_policy.TableEncryptionPolicy*
  name: TableEncryptionPolicy
  nameWithType: TableEncryptionPolicy.TableEncryptionPolicy
  fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy.TableEncryptionPolicy
  package: com.microsoft.azure.storage.table
- uid: com.microsoft.azure.storage.table._table_encryption_policy.getKey*
  name: getKey
  nameWithType: TableEncryptionPolicy.getKey
  fullName: IKey com.microsoft.azure.storage.table.TableEncryptionPolicy.getKey
  package: com.microsoft.azure.storage.table
- uid: com.microsoft.azure.storage.table._table_encryption_policy.getKeyResolver*
  name: getKeyResolver
  nameWithType: TableEncryptionPolicy.getKeyResolver
  fullName: IKeyResolver com.microsoft.azure.storage.table.TableEncryptionPolicy.getKeyResolver
  package: com.microsoft.azure.storage.table
- uid: com.microsoft.azure.storage.table._table_encryption_policy.setKey*
  name: setKey
  nameWithType: TableEncryptionPolicy.setKey
  fullName: void com.microsoft.azure.storage.table.TableEncryptionPolicy.setKey
  package: com.microsoft.azure.storage.table
- uid: com.microsoft.azure.storage.table._table_encryption_policy.setKeyResolver*
  name: setKeyResolver
  nameWithType: TableEncryptionPolicy.setKeyResolver
  fullName: void com.microsoft.azure.storage.table.TableEncryptionPolicy.setKeyResolver
  package: com.microsoft.azure.storage.table
- uid: com.microsoft.azure.storage.table._table_encryption_policy.decryptEntity(HashMap<String, EntityProperty>,HashSet<String>,String,String,Key,EncryptionData,Boolean)
- uid: com.microsoft.azure.storage.table._table_encryption_policy.decryptMetadataAndReturnCEK(String,String,EntityProperty,EntityProperty,EncryptionData)
- uid: com.microsoft.azure.storage.table._table_encryption_policy.encryptEntity(Map<String, EntityProperty>,String,String,EncryptionResolver)
- uid: com.microsoft.azure.keyvault.core._i_key
  parent: com.microsoft.azure.keyvault.core
  href: com.microsoft.azure.keyvault.core._i_key.yml
  name: IKey
  nameWithType: IKey
  fullName: com.microsoft.azure.keyvault.core.IKey
  type: Interface
  summary: <p>Interface for representing cryptographic keys with the Microsoft Azure Key Vault libraries. </p>
  syntax:
    content: public interface IKey
- uid: com.microsoft.azure.keyvault.core._i_key_resolver
  parent: com.microsoft.azure.keyvault.core
  href: com.microsoft.azure.keyvault.core._i_key_resolver.yml
  name: IKeyResolver
  nameWithType: IKeyResolver
  fullName: com.microsoft.azure.keyvault.core.IKeyResolver
  type: Interface
  summary: <p>Interface for representing key resolving operations with the Microsoft Azure Key Vault libraries. </p>
  syntax:
    content: public interface IKeyResolver
- uid: com.microsoft.azure.storage.table._table_encryption_policy
  parent: com.microsoft.azure.storage.table
  href: com.microsoft.azure.storage.table._table_encryption_policy.yml
  name: TableEncryptionPolicy
  nameWithType: TableEncryptionPolicy
  fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy
  type: Class
  summary: <p>Represents a table encryption policy that is used to perform envelope encryption/decryption of Azure table entities. </p>
  syntax: *o1
- uid: com.microsoft.azure.storage.table._entity_property
  parent: com.microsoft.azure.storage.table
  href: com.microsoft.azure.storage.table._entity_property.yml
  name: EntityProperty
  nameWithType: EntityProperty
  fullName: com.microsoft.azure.storage.table.EntityProperty
  type: Class
  summary: >-
    <p>A class which represents a single typed property value in a table entity. An <xref href="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false"></xref> stores the data type as an <xref href="com.microsoft.azure.storage.table._edm_type" data-throw-if-not-resolved="false"></xref>. The value, which may be  for object types, but not for primitive types, is serialized and stored as a . </p>

    <p>

      <xref href="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false"></xref> provides overloaded constructors and overloads of the  method for supported value types. Each overloaded constructor or  method sets the <xref href="com.microsoft.azure.storage.table._edm_type" data-throw-if-not-resolved="false"></xref> and serializes the value appropriately based on the parameter type. </p>

    <p>Use one of the <emphasis>Type</emphasis> methods to deserialize an <xref href="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false"></xref> as the appropriate Java type. The method will throw a <ref refid="" kindref="compound">ParseException</ref> or <ref refid="" kindref="compound">IllegalArgumentException</ref> if the <xref href="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false"></xref> cannot be deserialized as the Java type. </p>
  syntax:
    content: public class EntityProperty
- uid: com.microsoft.azure.storage.table._table_request_options._encryption_resolver
  parent: com.microsoft.azure.storage.table
  href: com.microsoft.azure.storage.table._table_request_options._encryption_resolver.yml
  name: TableRequestOptions.EncryptionResolver
  nameWithType: TableRequestOptions.EncryptionResolver
  fullName: com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver
  type: Interface
  summary: <p>The interface whose function is used to get the value indicating whether a property should be encrypted or not given the partition key, row key, and the property name. </p>
  syntax:
    content: public interface EncryptionResolver
- uid: com.microsoft.azure.storage._storage_exception
  parent: com.microsoft.azure.storage
  href: com.microsoft.azure.storage._storage_exception.yml
  name: StorageException
  nameWithType: StorageException
  fullName: com.microsoft.azure.storage.StorageException
  type: Class
  summary: <p>Represents an exception for the Microsoft Azure storage service. </p>
  syntax:
    content: public class StorageException
- uid: com.microsoft.azure.storage.core._encryption_data
  parent: com.microsoft.azure.storage.core
  href: com.microsoft.azure.storage.core._encryption_data.yml
  name: EncryptionData
  nameWithType: EncryptionData
  fullName: com.microsoft.azure.storage.core.EncryptionData
  type: Class
  summary: <p>RESERVED FOR INTERNAL USE. Represents the encryption data that is stored on the service. </p>
  syntax:
    content: public class EncryptionData
