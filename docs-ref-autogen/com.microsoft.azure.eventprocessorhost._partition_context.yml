items:
- uid: com.microsoft.azure.eventprocessorhost._partition_context
  id: _partition_context
  parent: com.microsoft.azure.eventprocessorhost
  children:
  - com.microsoft.azure.eventprocessorhost._partition_context.checkpoint()
  - com.microsoft.azure.eventprocessorhost._partition_context.checkpoint(EventData)
  - com.microsoft.azure.eventprocessorhost._partition_context.getConsumerGroupName()
  - com.microsoft.azure.eventprocessorhost._partition_context.getEventHubPath()
  - com.microsoft.azure.eventprocessorhost._partition_context.getOwner()
  - com.microsoft.azure.eventprocessorhost._partition_context.getPartitionId()
  - com.microsoft.azure.eventprocessorhost._partition_context.getRuntimeInformation()
  - com.microsoft.azure.eventprocessorhost._partition_context.setOffsetAndSequenceNumber(EventData)
  - com.microsoft.azure.eventprocessorhost._partition_context.setOffsetAndSequenceNumber(String,long)
  href: com.microsoft.azure.eventprocessorhost._partition_context.yml
  langs:
  - java
  name: PartitionContext
  nameWithType: PartitionContext
  fullName: com.microsoft.azure.eventprocessorhost.PartitionContext
  type: Class
  source:
    remote: &o0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-java
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
    startLine: 16
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public class PartitionContext
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - com.microsoft.azure.eventprocessorhost._partition_context.getInitialOffset()
  - com.microsoft.azure.eventprocessorhost._partition_context.getLease()
  - com.microsoft.azure.eventprocessorhost._partition_context.PartitionContext(EventProcessorHost,String,String,String)
  - com.microsoft.azure.eventprocessorhost._partition_context.setLease(Lease)
  - com.microsoft.azure.eventprocessorhost._partition_context.setRuntimeInformation(ReceiverRuntimeInformation)
- uid: com.microsoft.azure.eventprocessorhost._partition_context.checkpoint()
  id: checkpoint()
  parent: com.microsoft.azure.eventprocessorhost._partition_context
  href: com.microsoft.azure.eventprocessorhost._partition_context.yml
  langs:
  - java
  name: checkpoint()
  nameWithType: PartitionContext.checkpoint()
  fullName: void com.microsoft.azure.eventprocessorhost.PartitionContext.checkpoint()
  overload: com.microsoft.azure.eventprocessorhost._partition_context.checkpoint*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
    startLine: 151
  package: com.microsoft.azure.eventprocessorhost
  summary: <p>Writes the current offset and sequenceNumber to the checkpoint store via the checkpoint manager. </p>
  syntax:
    content: public void checkpoint()
  exceptions:
  - type: 3c87bd19
    description: <p>If this.sequenceNumber is less than the last checkpointed value </p>
  - type: f25e3dc2
  - type: 8256ba40
- uid: com.microsoft.azure.eventprocessorhost._partition_context.checkpoint(EventData)
  id: checkpoint(EventData)
  parent: com.microsoft.azure.eventprocessorhost._partition_context
  href: com.microsoft.azure.eventprocessorhost._partition_context.yml
  langs:
  - java
  name: checkpoint(EventData event)
  nameWithType: PartitionContext.checkpoint(EventData event)
  fullName: void com.microsoft.azure.eventprocessorhost.PartitionContext.checkpoint(EventData event)
  overload: com.microsoft.azure.eventprocessorhost._partition_context.checkpoint*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
    startLine: 176
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Stores the offset and sequenceNumber from the provided received EventData instance, then writes those values to the checkpoint store via the checkpoint manager.</p>

    <p></p>
  syntax:
    content: public void checkpoint(EventData event)
    parameters:
    - id: event
      type: com.microsoft.azure.eventhubs._event_data
      description: <p>A received EventData with valid offset and sequenceNumber </p>
  exceptions:
  - type: 3c87bd19
    description: <p>If the sequenceNumber in the provided event is less than the last checkpointed value </p>
  - type: f25e3dc2
  - type: 8256ba40
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getConsumerGroupName()
  id: getConsumerGroupName()
  parent: com.microsoft.azure.eventprocessorhost._partition_context
  href: com.microsoft.azure.eventprocessorhost._partition_context.yml
  langs:
  - java
  name: getConsumerGroupName()
  nameWithType: PartitionContext.getConsumerGroupName()
  fullName: String com.microsoft.azure.eventprocessorhost.PartitionContext.getConsumerGroupName()
  overload: com.microsoft.azure.eventprocessorhost._partition_context.getConsumerGroupName*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
    startLine: 41
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public String getConsumerGroupName()
    return:
      type: "26831127"
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getEventHubPath()
  id: getEventHubPath()
  parent: com.microsoft.azure.eventprocessorhost._partition_context
  href: com.microsoft.azure.eventprocessorhost._partition_context.yml
  langs:
  - java
  name: getEventHubPath()
  nameWithType: PartitionContext.getEventHubPath()
  fullName: String com.microsoft.azure.eventprocessorhost.PartitionContext.getEventHubPath()
  overload: com.microsoft.azure.eventprocessorhost._partition_context.getEventHubPath*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
    startLine: 46
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public String getEventHubPath()
    return:
      type: "26831127"
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getOwner()
  id: getOwner()
  parent: com.microsoft.azure.eventprocessorhost._partition_context
  href: com.microsoft.azure.eventprocessorhost._partition_context.yml
  langs:
  - java
  name: getOwner()
  nameWithType: PartitionContext.getOwner()
  fullName: String com.microsoft.azure.eventprocessorhost.PartitionContext.getOwner()
  overload: com.microsoft.azure.eventprocessorhost._partition_context.getOwner*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
    startLine: 51
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public String getOwner()
    return:
      type: "26831127"
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getPartitionId()
  id: getPartitionId()
  parent: com.microsoft.azure.eventprocessorhost._partition_context
  href: com.microsoft.azure.eventprocessorhost._partition_context.yml
  langs:
  - java
  name: getPartitionId()
  nameWithType: PartitionContext.getPartitionId()
  fullName: String com.microsoft.azure.eventprocessorhost.PartitionContext.getPartitionId()
  overload: com.microsoft.azure.eventprocessorhost._partition_context.getPartitionId*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
    startLine: 100
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public String getPartitionId()
    return:
      type: "26831127"
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getRuntimeInformation()
  id: getRuntimeInformation()
  parent: com.microsoft.azure.eventprocessorhost._partition_context
  href: com.microsoft.azure.eventprocessorhost._partition_context.yml
  langs:
  - java
  name: getRuntimeInformation()
  nameWithType: PartitionContext.getRuntimeInformation()
  fullName: ReceiverRuntimeInformation com.microsoft.azure.eventprocessorhost.PartitionContext.getRuntimeInformation()
  overload: com.microsoft.azure.eventprocessorhost._partition_context.getRuntimeInformation*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
    startLine: 56
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public ReceiverRuntimeInformation getRuntimeInformation()
    return:
      type: com.microsoft.azure.eventhubs._receiver_runtime_information
- uid: com.microsoft.azure.eventprocessorhost._partition_context.setOffsetAndSequenceNumber(EventData)
  id: setOffsetAndSequenceNumber(EventData)
  parent: com.microsoft.azure.eventprocessorhost._partition_context
  href: com.microsoft.azure.eventprocessorhost._partition_context.yml
  langs:
  - java
  name: setOffsetAndSequenceNumber(EventData event)
  nameWithType: PartitionContext.setOffsetAndSequenceNumber(EventData event)
  fullName: void com.microsoft.azure.eventprocessorhost.PartitionContext.setOffsetAndSequenceNumber(EventData event)
  overload: com.microsoft.azure.eventprocessorhost._partition_context.setOffsetAndSequenceNumber*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
    startLine: 78
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public void setOffsetAndSequenceNumber(EventData event)
    parameters:
    - id: event
      type: com.microsoft.azure.eventhubs._event_data
- uid: com.microsoft.azure.eventprocessorhost._partition_context.setOffsetAndSequenceNumber(String,long)
  id: setOffsetAndSequenceNumber(String,long)
  parent: com.microsoft.azure.eventprocessorhost._partition_context
  href: com.microsoft.azure.eventprocessorhost._partition_context.yml
  langs:
  - java
  name: setOffsetAndSequenceNumber(String offset, long sequenceNumber)
  nameWithType: PartitionContext.setOffsetAndSequenceNumber(String offset, long sequenceNumber)
  fullName: void com.microsoft.azure.eventprocessorhost.PartitionContext.setOffsetAndSequenceNumber(String offset, long sequenceNumber)
  overload: com.microsoft.azure.eventprocessorhost._partition_context.setOffsetAndSequenceNumber*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
    startLine: 84
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public void setOffsetAndSequenceNumber(String offset, long sequenceNumber)
    parameters:
    - id: offset
      type: "26831127"
    - id: sequenceNumber
      type: 0364520f
references:
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getConsumerGroupName*
  name: getConsumerGroupName
  nameWithType: PartitionContext.getConsumerGroupName
  fullName: String com.microsoft.azure.eventprocessorhost.PartitionContext.getConsumerGroupName
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getEventHubPath*
  name: getEventHubPath
  nameWithType: PartitionContext.getEventHubPath
  fullName: String com.microsoft.azure.eventprocessorhost.PartitionContext.getEventHubPath
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getOwner*
  name: getOwner
  nameWithType: PartitionContext.getOwner
  fullName: String com.microsoft.azure.eventprocessorhost.PartitionContext.getOwner
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getRuntimeInformation*
  name: getRuntimeInformation
  nameWithType: PartitionContext.getRuntimeInformation
  fullName: ReceiverRuntimeInformation com.microsoft.azure.eventprocessorhost.PartitionContext.getRuntimeInformation
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._partition_context.setOffsetAndSequenceNumber*
  name: setOffsetAndSequenceNumber
  nameWithType: PartitionContext.setOffsetAndSequenceNumber
  fullName: void com.microsoft.azure.eventprocessorhost.PartitionContext.setOffsetAndSequenceNumber
  package: com.microsoft.azure.eventprocessorhost
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getPartitionId*
  name: getPartitionId
  nameWithType: PartitionContext.getPartitionId
  fullName: String com.microsoft.azure.eventprocessorhost.PartitionContext.getPartitionId
  package: com.microsoft.azure.eventprocessorhost
- uid: 3c87bd19
  spec.java:
  - name: IllegalArgumentException
    fullName: IllegalArgumentException
- uid: f25e3dc2
  spec.java:
  - name: ExecutionException
    fullName: ExecutionException
- uid: 8256ba40
  spec.java:
  - name: InterruptedException
    fullName: InterruptedException
- uid: com.microsoft.azure.eventprocessorhost._partition_context.checkpoint*
  name: checkpoint
  nameWithType: PartitionContext.checkpoint
  fullName: void com.microsoft.azure.eventprocessorhost.PartitionContext.checkpoint
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getInitialOffset()
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getLease()
- uid: com.microsoft.azure.eventprocessorhost._partition_context.PartitionContext(EventProcessorHost,String,String,String)
- uid: com.microsoft.azure.eventprocessorhost._partition_context.setLease(Lease)
- uid: com.microsoft.azure.eventprocessorhost._partition_context.setRuntimeInformation(ReceiverRuntimeInformation)
- uid: com.microsoft.azure.eventprocessorhost._event_processor_host
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._event_processor_host.yml
  name: EventProcessorHost
  nameWithType: EventProcessorHost
  fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost
  type: Class
  syntax:
    content: public class EventProcessorHost
- uid: com.microsoft.azure.eventprocessorhost._lease
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._lease.yml
  name: Lease
  nameWithType: Lease
  fullName: com.microsoft.azure.eventprocessorhost.Lease
  type: Class
  summary: >-
    <p>

      <xref href="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false"></xref> class is public so that advanced users can implement an <xref href="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false"></xref>. Unless you are implementing <xref href="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false"></xref> you should not have to deal with objects of this class or derived classes directly. </p>

    <p>When implementing an <xref href="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false"></xref> it may be necessary to derive from this class to carry around more information and override isExpired. The data fields have been left private instead of protected because they have a full set of getters and setters (except partitionId, which is immutable) which provide equivalent access. When implementing AzureBlobLease, for example, there was no need for more access than the getters and setters provide. </p>

    <p>Note that a <xref href="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false"></xref> object just carries information about a partition lease. The functionality to acquire/renew/release a lease is all on the <xref href="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public class Lease
- uid: com.microsoft.azure.eventhubs._partition_receiver.START_OF_STREAM()
  parent: com.microsoft.azure.eventhubs._partition_receiver
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  name: START_OF_STREAM
  nameWithType: PartitionReceiver.START_OF_STREAM
  fullName: final String com.microsoft.azure.eventhubs.PartitionReceiver.START_OF_STREAM
  type: Field
  summary: <p>This is a constant defined to represent the start of a partition stream in EventHub. </p>
  syntax:
    content: public static final String START_OF_STREAM= "-1"
    return:
      type: 3d93591e
- uid: com.microsoft.azure.eventhubs._receiver_runtime_information
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._receiver_runtime_information.yml
  name: ReceiverRuntimeInformation
  nameWithType: ReceiverRuntimeInformation
  fullName: com.microsoft.azure.eventhubs.ReceiverRuntimeInformation
  type: Class
  summary: <p>Represents the temporal receiver runtime information for a <xref href="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false"></xref>. Current received <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> and <xref href="com.microsoft.azure.eventhubs._receiver_runtime_information" data-throw-if-not-resolved="false"></xref> can be used to find approximate value of pending events (which are not processed yet). </p>
  syntax:
    content: public class ReceiverRuntimeInformation
- uid: com.microsoft.azure.eventhubs._event_data
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: EventData
  nameWithType: EventData
  fullName: com.microsoft.azure.eventhubs.EventData
  type: Class
  summary: >-
    <p>The data structure encapsulating the Event being sent-to and received-from EventHubs. Each EventHubs partition can be visualized as a Stream of <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. </p>

    <p>Serializing a received <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> with AMQP sections other than ApplicationProperties (with primitive java types) and Data section is not supported. </p>

    <p>Here's how AMQP message sections map to <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. Here's the reference used for AMQP 1.0 specification: <ulink url="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf">http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf</ulink><preformatted>

    i.   <xref href="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false"></xref> - AMQPMessage.ApplicationProperties section

    ii.  <xref href="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false"></xref> - if AMQPMessage.Body has Data section

    iii. <xref href="com.microsoft.azure.eventhubs._event_data.getObject()" data-throw-if-not-resolved="false"></xref> - if AMQPMessage.Body has AMQPValue or AMQPSequence sections

    </preformatted> While using client libraries released by Microsoft Azure EventHubs, sections (i) and (ii) alone are sufficient. Section (iii) is used for advanced scenarios, where the sending application uses third-party AMQP library to send the message to EventHubs and the receiving application uses this client library to receive <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public class EventData
- uid: com.microsoft.azure.eventprocessorhost._checkpoint
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._checkpoint.yml
  name: Checkpoint
  nameWithType: Checkpoint
  fullName: com.microsoft.azure.eventprocessorhost.Checkpoint
  type: Class
  summary: >-
    <p>

      <xref href="com.microsoft.azure.eventprocessorhost._checkpoint" data-throw-if-not-resolved="false"></xref> class is public so that advanced users can implement an <xref href="com.microsoft.azure.eventprocessorhost._i_checkpoint_manager" data-throw-if-not-resolved="false"></xref>. Unless you are implementing <xref href="com.microsoft.azure.eventprocessorhost._i_checkpoint_manager" data-throw-if-not-resolved="false"></xref> you should not have to deal with objects of this class directly. </p>

    <p>A <xref href="com.microsoft.azure.eventprocessorhost._checkpoint" data-throw-if-not-resolved="false"></xref> is essentially just a tuple. It has a fixed partition id, set at creation time and immutable thereafter, and associates that with an offset/sequenceNumber pair which indicates a position within the messages in that partition. </p>
  syntax:
    content: public class Checkpoint
