### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.eventprocessorhost._partition_context
  id: _partition_context
  parent: com.microsoft.azure.eventprocessorhost
  children:
  - com.microsoft.azure.eventprocessorhost._partition_context.checkpoint()
  - com.microsoft.azure.eventprocessorhost._partition_context.checkpoint(Checkpoint)
  - com.microsoft.azure.eventprocessorhost._partition_context.checkpoint(EventData)
  - com.microsoft.azure.eventprocessorhost._partition_context.getConsumerGroupName()
  - com.microsoft.azure.eventprocessorhost._partition_context.getEventHubPath()
  - com.microsoft.azure.eventprocessorhost._partition_context.getOwner()
  - com.microsoft.azure.eventprocessorhost._partition_context.getPartitionId()
  - com.microsoft.azure.eventprocessorhost._partition_context.getRuntimeInformation()
  href: com.microsoft.azure.eventprocessorhost._partition_context.yml
  langs:
  - java
  name: PartitionContext
  nameWithType: PartitionContext
  fullName: com.microsoft.azure.eventprocessorhost.PartitionContext
  type: Class
  source:
    remote: &o0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-java
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
    startLine: 23
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public class PartitionContext
  inheritance:
  - java.lang.Object
- uid: com.microsoft.azure.eventprocessorhost._partition_context.checkpoint()
  id: checkpoint()
  parent: com.microsoft.azure.eventprocessorhost._partition_context
  href: com.microsoft.azure.eventprocessorhost._partition_context.yml
  langs:
  - java
  name: checkpoint()
  nameWithType: PartitionContext.checkpoint()
  fullName: com.microsoft.azure.eventprocessorhost.PartitionContext.checkpoint()
  overload: com.microsoft.azure.eventprocessorhost._partition_context.checkpoint*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
    startLine: 150
  package: com.microsoft.azure.eventprocessorhost
  summary: "<p>Writes the position of the last event in the current batch to the checkpoint store via the checkpoint manager. </p>\r\n<p>It is important to check the result in order to detect failures. </p>\r\n<p>If receiving started from a user-provided EventPosition and no events have been received yet, then this will fail. (This scenario is possible when invoke-after-receive-timeout has been set in EventProcessorOptions.)</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> checkpoint()
    return:
      type: db03ee24
      description: <p>CompletableFuture { -&gt;} null when the checkpoint has been persisted successfully, completes exceptionally on error. </p>
- uid: com.microsoft.azure.eventprocessorhost._partition_context.checkpoint(Checkpoint)
  id: checkpoint(Checkpoint)
  parent: com.microsoft.azure.eventprocessorhost._partition_context
  href: com.microsoft.azure.eventprocessorhost._partition_context.yml
  langs:
  - java
  name: checkpoint(Checkpoint checkpoint)
  nameWithType: PartitionContext.checkpoint(Checkpoint checkpoint)
  fullName: com.microsoft.azure.eventprocessorhost.PartitionContext.checkpoint(Checkpoint checkpoint)
  overload: com.microsoft.azure.eventprocessorhost._partition_context.checkpoint*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
    startLine: 189
  package: com.microsoft.azure.eventprocessorhost
  summary: "<p>Writes the position of the provided Checkpoint instance to the checkpoint store via the checkpoint manager.</p>\r\n<p>It is important to check the result in order to detect failures.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> checkpoint(Checkpoint checkpoint)
    parameters:
    - id: checkpoint
      type: com.microsoft.azure.eventprocessorhost._checkpoint
      description: <p>a checkpoint </p>
    return:
      type: db03ee24
      description: <p>CompletableFuture { -&gt;} null when the checkpoint has been persisted successfully, completes exceptionally on error. </p>
- uid: com.microsoft.azure.eventprocessorhost._partition_context.checkpoint(EventData)
  id: checkpoint(EventData)
  parent: com.microsoft.azure.eventprocessorhost._partition_context
  href: com.microsoft.azure.eventprocessorhost._partition_context.yml
  langs:
  - java
  name: checkpoint(EventData event)
  nameWithType: PartitionContext.checkpoint(EventData event)
  fullName: com.microsoft.azure.eventprocessorhost.PartitionContext.checkpoint(EventData event)
  overload: com.microsoft.azure.eventprocessorhost._partition_context.checkpoint*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
    startLine: 170
  package: com.microsoft.azure.eventprocessorhost
  summary: "<p>Writes the position of the provided EventData instance to the checkpoint store via the checkpoint manager. </p>\r\n<p>It is important to check the result in order to detect failures.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> checkpoint(EventData event)
    parameters:
    - id: event
      type: com.microsoft.azure.eventhubs._event_data
      description: <p>A received EventData </p>
    return:
      type: db03ee24
      description: <p>CompletableFuture { -&gt;} null when the checkpoint has been persisted successfully, completes exceptionally on error. </p>
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getConsumerGroupName()
  id: getConsumerGroupName()
  parent: com.microsoft.azure.eventprocessorhost._partition_context
  href: com.microsoft.azure.eventprocessorhost._partition_context.yml
  langs:
  - java
  name: getConsumerGroupName()
  nameWithType: PartitionContext.getConsumerGroupName()
  fullName: com.microsoft.azure.eventprocessorhost.PartitionContext.getConsumerGroupName()
  overload: com.microsoft.azure.eventprocessorhost._partition_context.getConsumerGroupName*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
    startLine: 44
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public String getConsumerGroupName()
    return:
      type: "26831127"
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getEventHubPath()
  id: getEventHubPath()
  parent: com.microsoft.azure.eventprocessorhost._partition_context
  href: com.microsoft.azure.eventprocessorhost._partition_context.yml
  langs:
  - java
  name: getEventHubPath()
  nameWithType: PartitionContext.getEventHubPath()
  fullName: com.microsoft.azure.eventprocessorhost.PartitionContext.getEventHubPath()
  overload: com.microsoft.azure.eventprocessorhost._partition_context.getEventHubPath*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
    startLine: 53
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public String getEventHubPath()
    return:
      type: "26831127"
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getOwner()
  id: getOwner()
  parent: com.microsoft.azure.eventprocessorhost._partition_context
  href: com.microsoft.azure.eventprocessorhost._partition_context.yml
  langs:
  - java
  name: getOwner()
  nameWithType: PartitionContext.getOwner()
  fullName: com.microsoft.azure.eventprocessorhost.PartitionContext.getOwner()
  overload: com.microsoft.azure.eventprocessorhost._partition_context.getOwner*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
    startLine: 62
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public String getOwner()
    return:
      type: "26831127"
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getPartitionId()
  id: getPartitionId()
  parent: com.microsoft.azure.eventprocessorhost._partition_context
  href: com.microsoft.azure.eventprocessorhost._partition_context.yml
  langs:
  - java
  name: getPartitionId()
  nameWithType: PartitionContext.getPartitionId()
  fullName: com.microsoft.azure.eventprocessorhost.PartitionContext.getPartitionId()
  overload: com.microsoft.azure.eventprocessorhost._partition_context.getPartitionId*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
    startLine: 105
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public String getPartitionId()
    return:
      type: "26831127"
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getRuntimeInformation()
  id: getRuntimeInformation()
  parent: com.microsoft.azure.eventprocessorhost._partition_context
  href: com.microsoft.azure.eventprocessorhost._partition_context.yml
  langs:
  - java
  name: getRuntimeInformation()
  nameWithType: PartitionContext.getRuntimeInformation()
  fullName: com.microsoft.azure.eventprocessorhost.PartitionContext.getRuntimeInformation()
  overload: com.microsoft.azure.eventprocessorhost._partition_context.getRuntimeInformation*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/PartitionContext.java
    startLine: 72
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public ReceiverRuntimeInformation getRuntimeInformation()
    return:
      type: com.microsoft.azure.eventhubs._receiver_runtime_information
references:
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getConsumerGroupName*
  name: getConsumerGroupName
  nameWithType: PartitionContext.getConsumerGroupName
  fullName: com.microsoft.azure.eventprocessorhost.PartitionContext.getConsumerGroupName
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getEventHubPath*
  name: getEventHubPath
  nameWithType: PartitionContext.getEventHubPath
  fullName: com.microsoft.azure.eventprocessorhost.PartitionContext.getEventHubPath
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getOwner*
  name: getOwner
  nameWithType: PartitionContext.getOwner
  fullName: com.microsoft.azure.eventprocessorhost.PartitionContext.getOwner
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getRuntimeInformation*
  name: getRuntimeInformation
  nameWithType: PartitionContext.getRuntimeInformation
  fullName: com.microsoft.azure.eventprocessorhost.PartitionContext.getRuntimeInformation
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._partition_context.getPartitionId*
  name: getPartitionId
  nameWithType: PartitionContext.getPartitionId
  fullName: com.microsoft.azure.eventprocessorhost.PartitionContext.getPartitionId
  package: com.microsoft.azure.eventprocessorhost
- uid: db03ee24
  spec.java:
  - name: CompletableFuture<Void>
    fullName: CompletableFuture<Void>
- uid: com.microsoft.azure.eventprocessorhost._partition_context.checkpoint*
  name: checkpoint
  nameWithType: PartitionContext.checkpoint
  fullName: com.microsoft.azure.eventprocessorhost.PartitionContext.checkpoint
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._complete_lease
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._complete_lease.yml
  name: CompleteLease
  nameWithType: CompleteLease
  fullName: com.microsoft.azure.eventprocessorhost.CompleteLease
  type: Class
  summary: >-
    <p>CompleteLease class is public so that advanced users can implement an ILeaseManager. Unless you are implementing ILeaseManager you should not have to deal with objects of this class or derived classes directly. </p>

    <p>CompleteLease carries around complete information about a lease. By itself, it has the epoch. Any lease manager implementation can derive from this class to add data which the lease manager needs to function <ndash></ndash> see AzureBlobLease for an example. Having two distinct classes allows the code to clearly express which variety of lease any variable holds or a method requires, and avoids the problem of accidentally supplying a lightweight BaseLease to a method which needs the lease-manager-specific fields. </p>
  syntax:
    content: public class CompleteLease extends BaseLease
- uid: com.microsoft.azure.eventhubs._receiver_runtime_information
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._receiver_runtime_information.yml
  name: ReceiverRuntimeInformation
  nameWithType: ReceiverRuntimeInformation
  fullName: com.microsoft.azure.eventhubs.ReceiverRuntimeInformation
  type: Class
  summary: <p>Represents the temporal end of stream information of an EventHubs Partition. </p>
  syntax:
    content: public class ReceiverRuntimeInformation
- uid: com.microsoft.azure.eventhubs._event_data
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: EventData
  nameWithType: EventData
  fullName: com.microsoft.azure.eventhubs.EventData
  type: Interface
  summary: >-
    <p>The data structure encapsulating the Event being sent-to and received-from EventHubs. Each EventHubs partition can be visualized as a Stream of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>

    <p>Serializing a received <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> with AMQP sections other than ApplicationProperties (with primitive java types) and Data section is not supported. </p>

    <p>Here's how AMQP message sections map to <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. Here's the reference used for AMQP 1.0 specification: <a href="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf">http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf</a><pre>

    i.   <xref uid="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false">getProperties()</xref> - AMQPMessage.ApplicationProperties section

    ii.  <xref uid="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false">getBytes()</xref> - if AMQPMessage.Body has Data section

    iii. <xref uid="com.microsoft.azure.eventhubs._event_data.getObject()" data-throw-if-not-resolved="false">getObject()</xref> - if AMQPMessage.Body has AMQPValue or AMQPSequence sections

    </pre> While using client libraries released by Microsoft Azure EventHubs, sections (i) and (ii) alone are sufficient. Section (iii) is used for advanced scenarios, where the sending application uses third-party AMQP library to send the message to EventHubs and the receiving application uses this client library to receive <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>
  syntax:
    content: public interface EventData
- uid: com.microsoft.azure.eventhubs._event_position
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_position.yml
  name: EventPosition
  nameWithType: EventPosition
  fullName: com.microsoft.azure.eventhubs.EventPosition
  type: Interface
  summary: <p>Defines a position of an <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> in the event hub partition. The position can be an Offset, Sequence Number, or EnqueuedTime. </p>
  syntax:
    content: public interface EventPosition
- uid: com.microsoft.azure.eventprocessorhost._checkpoint
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._checkpoint.yml
  name: Checkpoint
  nameWithType: Checkpoint
  fullName: com.microsoft.azure.eventprocessorhost.Checkpoint
  type: Class
  summary: >-
    <p>Checkpoint class is public so that advanced users can implement an ICheckpointManager. Unless you are implementing ICheckpointManager you should not have to deal with objects of this class directly. </p>

    <p>A Checkpoint is essentially just a tuple. It has a fixed partition id, set at creation time and immutable thereafter, and associates that with an offset/sequenceNumber pair which indicates a position within the events in that partition. </p>
  syntax:
    content: public class Checkpoint
