### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder"
fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder"
name: "DataLakeLeaseClientBuilder"
nameWithType: "DataLakeLeaseClientBuilder"
summary: "This class provides a fluent builder API to help aid the configuration and instantiation of Storage Lease clients."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class DataLakeLeaseClientBuilder"
constructors:
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.DataLakeLeaseClientBuilder()"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.DataLakeLeaseClientBuilder()"
  name: "DataLakeLeaseClientBuilder()"
  nameWithType: "DataLakeLeaseClientBuilder.DataLakeLeaseClientBuilder()"
  summary: "Creates a new instance of <xref uid=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeLeaseClientBuilder\"></xref>."
  syntax: "public DataLakeLeaseClientBuilder()"
  desc: "Creates a new instance of <xref uid=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeLeaseClientBuilder\"></xref>."
methods:
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildAsyncClient()"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildAsyncClient()"
  name: "buildAsyncClient()"
  nameWithType: "DataLakeLeaseClientBuilder.buildAsyncClient()"
  summary: "Creates a <xref uid=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeLeaseAsyncClient\"></xref> based on the configurations set in the builder."
  syntax: "public DataLakeLeaseAsyncClient buildAsyncClient()"
  desc: "Creates a <xref uid=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeLeaseAsyncClient\"></xref> based on the configurations set in the builder."
  returns:
    description: "a <xref uid=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeLeaseAsyncClient\"></xref> based on the configurations in this builder."
    type: "<xref href=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient?alt=com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient&text=DataLakeLeaseAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildClient()"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildClient()"
  name: "buildClient()"
  nameWithType: "DataLakeLeaseClientBuilder.buildClient()"
  summary: "Creates a <xref uid=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeLeaseClient\"></xref> based on the configurations set in the builder."
  syntax: "public DataLakeLeaseClient buildClient()"
  desc: "Creates a <xref uid=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeLeaseClient\"></xref> based on the configurations set in the builder."
  returns:
    description: "a <xref uid=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeLeaseClient\"></xref> based on the configurations in this builder."
    type: "<xref href=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseClient?alt=com.azure.storage.file.datalake.specialized.DataLakeLeaseClient&text=DataLakeLeaseClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.directoryAsyncClient(com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient)"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.directoryAsyncClient(DataLakeDirectoryAsyncClient dataLakeDirectoryAsyncClient)"
  name: "directoryAsyncClient(DataLakeDirectoryAsyncClient dataLakeDirectoryAsyncClient)"
  nameWithType: "DataLakeLeaseClientBuilder.directoryAsyncClient(DataLakeDirectoryAsyncClient dataLakeDirectoryAsyncClient)"
  summary: "Configures the builder based on the passed <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref>."
  parameters:
  - description: "DataLakeDirectoryAsyncClient used to configure the builder."
    name: "dataLakeDirectoryAsyncClient"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient&text=DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeLeaseClientBuilder directoryAsyncClient(DataLakeDirectoryAsyncClient dataLakeDirectoryAsyncClient)"
  desc: "Configures the builder based on the passed <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref>. This will set the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"URL\"></xref> that are used to interact with the service."
  returns:
    description: "the updated DataLakeLeaseClientBuilder object"
    type: "<xref href=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder?alt=com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder&text=DataLakeLeaseClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.directoryClient(com.azure.storage.file.datalake.DataLakeDirectoryClient)"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.directoryClient(DataLakeDirectoryClient dataLakeDirectoryClient)"
  name: "directoryClient(DataLakeDirectoryClient dataLakeDirectoryClient)"
  nameWithType: "DataLakeLeaseClientBuilder.directoryClient(DataLakeDirectoryClient dataLakeDirectoryClient)"
  summary: "Configures the builder based on the passed <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryClient\"></xref>."
  parameters:
  - description: "DataLakeDirectoryClient used to configure the builder."
    name: "dataLakeDirectoryClient"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryClient&text=DataLakeDirectoryClient\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeLeaseClientBuilder directoryClient(DataLakeDirectoryClient dataLakeDirectoryClient)"
  desc: "Configures the builder based on the passed <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryClient\"></xref>. This will set the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"URL\"></xref> that are used to interact with the service."
  returns:
    description: "the updated DataLakeLeaseClientBuilder object"
    type: "<xref href=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder?alt=com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder&text=DataLakeLeaseClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileAsyncClient(com.azure.storage.file.datalake.DataLakeFileAsyncClient)"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileAsyncClient(DataLakeFileAsyncClient dataLakeFileAsyncClient)"
  name: "fileAsyncClient(DataLakeFileAsyncClient dataLakeFileAsyncClient)"
  nameWithType: "DataLakeLeaseClientBuilder.fileAsyncClient(DataLakeFileAsyncClient dataLakeFileAsyncClient)"
  summary: "Configures the builder based on the passed <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref>."
  parameters:
  - description: "DataLakeFileAsyncClient used to configure the builder."
    name: "dataLakeFileAsyncClient"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileAsyncClient&text=DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeLeaseClientBuilder fileAsyncClient(DataLakeFileAsyncClient dataLakeFileAsyncClient)"
  desc: "Configures the builder based on the passed <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref>. This will set the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"URL\"></xref> that are used to interact with the service."
  returns:
    description: "the updated DataLakeLeaseClientBuilder object"
    type: "<xref href=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder?alt=com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder&text=DataLakeLeaseClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileClient(com.azure.storage.file.datalake.DataLakeFileClient)"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileClient(DataLakeFileClient dataLakeFileClient)"
  name: "fileClient(DataLakeFileClient dataLakeFileClient)"
  nameWithType: "DataLakeLeaseClientBuilder.fileClient(DataLakeFileClient dataLakeFileClient)"
  summary: "Configures the builder based on the passed <xref uid=\"com.azure.storage.file.datalake.DataLakeFileClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileClient\"></xref>."
  parameters:
  - description: "DataLakeFileClient used to configure the builder."
    name: "dataLakeFileClient"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeFileClient?alt=com.azure.storage.file.datalake.DataLakeFileClient&text=DataLakeFileClient\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeLeaseClientBuilder fileClient(DataLakeFileClient dataLakeFileClient)"
  desc: "Configures the builder based on the passed <xref uid=\"com.azure.storage.file.datalake.DataLakeFileClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileClient\"></xref>. This will set the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"URL\"></xref> that are used to interact with the service."
  returns:
    description: "the updated DataLakeLeaseClientBuilder object"
    type: "<xref href=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder?alt=com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder&text=DataLakeLeaseClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileSystemAsyncClient(com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient)"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileSystemAsyncClient(DataLakeFileSystemAsyncClient dataLakeFileSystemAsyncClient)"
  name: "fileSystemAsyncClient(DataLakeFileSystemAsyncClient dataLakeFileSystemAsyncClient)"
  nameWithType: "DataLakeLeaseClientBuilder.fileSystemAsyncClient(DataLakeFileSystemAsyncClient dataLakeFileSystemAsyncClient)"
  summary: "Configures the builder based on the passed <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemAsyncClient\"></xref>."
  parameters:
  - description: "DataLakeFileSystemAsyncClient used to configure the builder."
    name: "dataLakeFileSystemAsyncClient"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient&text=DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeLeaseClientBuilder fileSystemAsyncClient(DataLakeFileSystemAsyncClient dataLakeFileSystemAsyncClient)"
  desc: "Configures the builder based on the passed <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemAsyncClient\"></xref>. This will set the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"URL\"></xref> that are used to interact with the service."
  returns:
    description: "the updated DataLakeLeaseClientBuilder object"
    type: "<xref href=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder?alt=com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder&text=DataLakeLeaseClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileSystemClient(com.azure.storage.file.datalake.DataLakeFileSystemClient)"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileSystemClient(DataLakeFileSystemClient dataLakeFileSystemClient)"
  name: "fileSystemClient(DataLakeFileSystemClient dataLakeFileSystemClient)"
  nameWithType: "DataLakeLeaseClientBuilder.fileSystemClient(DataLakeFileSystemClient dataLakeFileSystemClient)"
  summary: "Configures the builder based on the passed <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemClient\"></xref>."
  parameters:
  - description: "DataLakeFileSystemClient used to configure the builder."
    name: "dataLakeFileSystemClient"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeFileSystemClient?alt=com.azure.storage.file.datalake.DataLakeFileSystemClient&text=DataLakeFileSystemClient\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeLeaseClientBuilder fileSystemClient(DataLakeFileSystemClient dataLakeFileSystemClient)"
  desc: "Configures the builder based on the passed <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileSystemClient\"></xref>. This will set the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"URL\"></xref> that are used to interact with the service."
  returns:
    description: "the updated DataLakeLeaseClientBuilder object"
    type: "<xref href=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder?alt=com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder&text=DataLakeLeaseClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.leaseId(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.leaseId(String leaseId)"
  name: "leaseId(String leaseId)"
  nameWithType: "DataLakeLeaseClientBuilder.leaseId(String leaseId)"
  summary: "Sets the identifier for the lease."
  parameters:
  - description: "Identifier for the lease."
    name: "leaseId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeLeaseClientBuilder leaseId(String leaseId)"
  desc: "Sets the identifier for the lease.\n\nIf a lease ID isn't set then a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UUID\"></xref> will be used."
  returns:
    description: "the updated DataLakeLeaseClientBuilder object"
    type: "<xref href=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder?alt=com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder&text=DataLakeLeaseClientBuilder\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "This class provides a fluent builder API to help aid the configuration and instantiation of Storage Lease clients. Lease clients are able to interact with both file system and path clients and act as a supplement client. A new instance of <xref uid=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeLeaseClient\"></xref> and <xref uid=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeLeaseAsyncClient\"></xref> are constructed every time <xref uid=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"buildClient\"></xref> and <xref uid=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildAsyncClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"buildAsyncClient\"></xref> are called respectively.\n\nWhen a client is instantiated and a <xref uid=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.leaseId(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"leaseId\"></xref> hasn't been set a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UUID\"></xref> will be used as the lease identifier.\n\n**Instantiating LeaseClients**\n\n```java\nDataLakeLeaseClient dataLakeLeaseClient = new DataLakeLeaseClientBuilder()\n     .fileClient(fileClient)\n     .leaseId(leaseId)\n     .buildClient();\n```\n\n```java\nDataLakeLeaseClient dataLakeLeaseClient = new DataLakeLeaseClientBuilder()\n     .directoryClient(directoryClient)\n     .leaseId(leaseId)\n     .buildClient();\n```\n\n```java\nDataLakeLeaseClient dataLakeLeaseClient = new DataLakeLeaseClientBuilder()\n     .fileSystemClient(dataLakeFileSystemClient)\n     .leaseId(leaseId)\n     .buildClient();\n```\n\n**Instantiating LeaseAsyncClients**\n\n```java\nDataLakeLeaseAsyncClient dataLakeLeaseAsyncClient = new DataLakeLeaseClientBuilder()\n     .fileAsyncClient(fileAsyncClient)\n     .leaseId(leaseId)\n     .buildAsyncClient();\n```\n\n```java\nDataLakeLeaseAsyncClient dataLakeLeaseAsyncClient = new DataLakeLeaseClientBuilder()\n     .directoryAsyncClient(directoryAsyncClient)\n     .leaseId(leaseId)\n     .buildAsyncClient();\n```\n\n```java\nDataLakeLeaseAsyncClient dataLakeLeaseAsyncClient = new DataLakeLeaseClientBuilder()\n     .fileSystemAsyncClient(dataLakeFileSystemAsyncClient)\n     .leaseId(leaseId)\n     .buildAsyncClient();\n```"
metadata: {}
package: "com.azure.storage.file.datalake.specialized"
artifact: com.azure:azure-storage-file-datalake:12.12.0
