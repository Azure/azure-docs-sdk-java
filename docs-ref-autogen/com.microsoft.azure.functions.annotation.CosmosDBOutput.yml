### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.functions.annotation.CosmosDBOutput.collectionName()
  name: collectionName()
  nameWithType: CosmosDBOutput.collectionName()
  returns:
    description: <p>The collection name string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the collection name of the CosmosDB to which to write.</p>

    <p></p>
  syntax: public String collectionName()
  uid: com.microsoft.azure.functions.annotation.CosmosDBOutput.collectionName()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBOutput.collectionThroughput()
  name: collectionThroughput()
  nameWithType: CosmosDBOutput.collectionThroughput()
  returns:
    description: <p>Throughput of the created collection. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>If CreateIfNotExists is true, defines the throughput of the created collection.</p>

    <p></p>
  syntax: public int collectionThroughput() default -1
  uid: com.microsoft.azure.functions.annotation.CosmosDBOutput.collectionThroughput()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBOutput.connectionStringSetting()
  name: connectionStringSetting()
  nameWithType: CosmosDBOutput.connectionStringSetting()
  returns:
    description: <p>The app setting name of the connection string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the app setting name that contains the CosmosDB connection string.</p>

    <p></p>
  syntax: public String connectionStringSetting()
  uid: com.microsoft.azure.functions.annotation.CosmosDBOutput.connectionStringSetting()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBOutput.createIfNotExists()
  name: createIfNotExists()
  nameWithType: CosmosDBOutput.createIfNotExists()
  returns:
    description: <p>The ID string. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the ID of the CosmosDB to which to write.</p>

    <p></p>
  syntax: public boolean createIfNotExists() default false
  uid: com.microsoft.azure.functions.annotation.CosmosDBOutput.createIfNotExists()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBOutput.databaseName()
  name: databaseName()
  nameWithType: CosmosDBOutput.databaseName()
  returns:
    description: <p>The database name string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the database name of the CosmosDB to which to write.</p>

    <p></p>
  syntax: public String databaseName()
  uid: com.microsoft.azure.functions.annotation.CosmosDBOutput.databaseName()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBOutput.dataType()
  name: dataType()
  nameWithType: CosmosDBOutput.dataType()
  returns:
    description: <p>The dataType which will be used by the Functions runtime. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines how Functions runtime should treat the parameter value. Possible values are: </p>

    <p>

      <ul>

        <li>

          <p>"" or string: treat it as a string whose value is serialized from the parameter </p>

        </li>

        <li>

          <p>binary: treat it as a binary data whose value comes from for example OutputBinding&lt;byte[]&gt; </p>

        </li>

      </ul>

    </p>

    <p></p>
  syntax: public String dataType() default ""
  uid: com.microsoft.azure.functions.annotation.CosmosDBOutput.dataType()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBOutput.name()
  name: name()
  nameWithType: CosmosDBOutput.name()
  returns:
    description: <p>The variable name used in function.json. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The variable name used in function.json.</p>

    <p></p>
  syntax: public String name()
  uid: com.microsoft.azure.functions.annotation.CosmosDBOutput.name()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBOutput.partitionKey()
  name: partitionKey()
  nameWithType: CosmosDBOutput.partitionKey()
  returns:
    description: <p>partitionKey of the created collection. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the partition key path for the created collection when createIfNotExists is set to true. May include binding parameters.</p>

    <p></p>
  syntax: public String partitionKey() default ""
  uid: com.microsoft.azure.functions.annotation.CosmosDBOutput.partitionKey()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBOutput.preferredLocations()
  name: preferredLocations()
  nameWithType: CosmosDBOutput.preferredLocations()
  returns:
    description: <p>PreferredLocations for geo-replicated database accounts </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines preferred locations (regions) for geo-replicated database accounts in the Azure Cosmos DB service. Values should be comma-separated. example, PreferredLocations = "East US,South

    Central US,North Europe"</p>

    <p></p>
  syntax: public String preferredLocations() default ""
  uid: com.microsoft.azure.functions.annotation.CosmosDBOutput.preferredLocations()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBOutput.useMultipleWriteLocations()
  name: useMultipleWriteLocations()
  nameWithType: CosmosDBOutput.useMultipleWriteLocations()
  returns:
    description: <p>whether to Multi Master accounts </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enable to use with Multi Master accounts.</p>

    <p></p>
  syntax: public boolean useMultipleWriteLocations() default false
  uid: com.microsoft.azure.functions.annotation.CosmosDBOutput.useMultipleWriteLocations()
nameWithType: CosmosDBOutput
syntax: public interface CosmosDBOutput
type: interface
uid: com.microsoft.azure.functions.annotation.CosmosDBOutput
fullName: com.microsoft.azure.functions.annotation.CosmosDBOutput
name: CosmosDBOutput
package: com.microsoft.azure.functions.annotation
summary: >-
  <p>CosmosDBOutput(name = "database", databaseName = "ToDoList", collectionName = "Items", connectionStringSetting = "AzureCosmosDBConnection") ) { return "{ \"id": "" + System.currentTimeMillis() + "", "description": "" + message + "" }"; } </p>

  <p></p>
metadata: {}
