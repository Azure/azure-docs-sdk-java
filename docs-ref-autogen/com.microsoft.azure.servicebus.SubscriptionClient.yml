### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.servicebus.SubscriptionClient
  id: SubscriptionClient
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus
  children:
  - com.microsoft.azure.servicebus.SubscriptionClient.DEFAULT_RULE_NAME
  - com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder,com.microsoft.azure.servicebus.ReceiveMode)
  - com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(java.lang.String,java.lang.String,com.microsoft.azure.servicebus.ClientSettings,com.microsoft.azure.servicebus.ReceiveMode)
  - com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(java.net.URI,java.lang.String,com.microsoft.azure.servicebus.ClientSettings,com.microsoft.azure.servicebus.ReceiveMode)
  - com.microsoft.azure.servicebus.SubscriptionClient.abandon(java.util.UUID)
  - com.microsoft.azure.servicebus.SubscriptionClient.abandon(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.SubscriptionClient.abandon(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  - com.microsoft.azure.servicebus.SubscriptionClient.abandon(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(java.util.UUID)
  - com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  - com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.SubscriptionClient.addRule(com.microsoft.azure.servicebus.rules.RuleDescription)
  - com.microsoft.azure.servicebus.SubscriptionClient.addRule(java.lang.String,com.microsoft.azure.servicebus.rules.Filter)
  - com.microsoft.azure.servicebus.SubscriptionClient.addRuleAsync(com.microsoft.azure.servicebus.rules.RuleDescription)
  - com.microsoft.azure.servicebus.SubscriptionClient.addRuleAsync(java.lang.String,com.microsoft.azure.servicebus.rules.Filter)
  - com.microsoft.azure.servicebus.SubscriptionClient.complete(java.util.UUID)
  - com.microsoft.azure.servicebus.SubscriptionClient.complete(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.SubscriptionClient.completeAsync(java.util.UUID)
  - com.microsoft.azure.servicebus.SubscriptionClient.completeAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID)
  - com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String)
  - com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)
  - com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  - com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID)
  - com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String)
  - com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)
  - com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  - com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.SubscriptionClient.getEntityPath()
  - com.microsoft.azure.servicebus.SubscriptionClient.getPrefetchCount()
  - com.microsoft.azure.servicebus.SubscriptionClient.getReceiveMode()
  - com.microsoft.azure.servicebus.SubscriptionClient.getRules()
  - com.microsoft.azure.servicebus.SubscriptionClient.getRulesAsync()
  - com.microsoft.azure.servicebus.SubscriptionClient.getSubscriptionName()
  - com.microsoft.azure.servicebus.SubscriptionClient.getTopicName()
  - com.microsoft.azure.servicebus.SubscriptionClient.onClose()
  - com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler)
  - com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,com.microsoft.azure.servicebus.MessageHandlerOptions)
  - com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,com.microsoft.azure.servicebus.MessageHandlerOptions,java.util.concurrent.ExecutorService)
  - com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,java.util.concurrent.ExecutorService)
  - com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler)
  - com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,com.microsoft.azure.servicebus.SessionHandlerOptions)
  - com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,com.microsoft.azure.servicebus.SessionHandlerOptions,java.util.concurrent.ExecutorService)
  - com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,java.util.concurrent.ExecutorService)
  - com.microsoft.azure.servicebus.SubscriptionClient.removeRule(java.lang.String)
  - com.microsoft.azure.servicebus.SubscriptionClient.removeRuleAsync(java.lang.String)
  - com.microsoft.azure.servicebus.SubscriptionClient.setPrefetchCount(int)
  langs:
  - java
  name: SubscriptionClient
  nameWithType: SubscriptionClient
  fullName: com.microsoft.azure.servicebus.SubscriptionClient
  type: Class
  package: com.microsoft.azure.servicebus
  syntax:
    content: public final class SubscriptionClient extends InitializableEntity implements ISubscriptionClient
  inheritance:
  - java.lang.Object
  - com.microsoft.azure.servicebus.primitives.ClientEntity
  - com.microsoft.azure.servicebus.InitializableEntity
  implements:
  - com.microsoft.azure.servicebus.ISubscriptionClient
  inheritedMembers:
  - com.microsoft.azure.servicebus.primitives.ClientEntity.close()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.onClose()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.setClosing()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(java.lang.Throwable)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.servicebus.SubscriptionClient.DEFAULT_RULE_NAME
  id: DEFAULT_RULE_NAME
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: DEFAULT_RULE_NAME
  nameWithType: SubscriptionClient.DEFAULT_RULE_NAME
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.DEFAULT_RULE_NAME
  type: Field
  package: com.microsoft.azure.servicebus
  syntax:
    content: public static final String DEFAULT_RULE_NAME
    return:
      type: java.lang.String
- uid: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(com.microsoft.azure.servicebus.ReceiveMode,java.lang.String)
  id: SubscriptionClient(com.microsoft.azure.servicebus.ReceiveMode,java.lang.String)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: SubscriptionClient(ReceiveMode receiveMode, String subscriptionPath)
  nameWithType: SubscriptionClient.SubscriptionClient(ReceiveMode receiveMode, String subscriptionPath)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(ReceiveMode receiveMode, String subscriptionPath)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient*
  type: Constructor
  package: com.microsoft.azure.servicebus
  syntax:
    content: private SubscriptionClient(ReceiveMode receiveMode, String subscriptionPath)
    parameters:
    - id: receiveMode
      type: com.microsoft.azure.servicebus.ReceiveMode
    - id: subscriptionPath
      type: java.lang.String
- uid: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder,com.microsoft.azure.servicebus.ReceiveMode)
  id: SubscriptionClient(com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder,com.microsoft.azure.servicebus.ReceiveMode)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: SubscriptionClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  nameWithType: SubscriptionClient.SubscriptionClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient*
  type: Constructor
  package: com.microsoft.azure.servicebus
  syntax:
    content: public SubscriptionClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
    parameters:
    - id: amqpConnectionStringBuilder
      type: com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder
    - id: receiveMode
      type: com.microsoft.azure.servicebus.ReceiveMode
- uid: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(com.microsoft.azure.servicebus.primitives.MessagingFactory,java.lang.String,com.microsoft.azure.servicebus.ReceiveMode)
  id: SubscriptionClient(com.microsoft.azure.servicebus.primitives.MessagingFactory,java.lang.String,com.microsoft.azure.servicebus.ReceiveMode)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: SubscriptionClient(MessagingFactory factory, String subscriptionPath, ReceiveMode receiveMode)
  nameWithType: SubscriptionClient.SubscriptionClient(MessagingFactory factory, String subscriptionPath, ReceiveMode receiveMode)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(MessagingFactory factory, String subscriptionPath, ReceiveMode receiveMode)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient*
  type: Constructor
  package: com.microsoft.azure.servicebus
  syntax:
    content: " SubscriptionClient(MessagingFactory factory, String subscriptionPath, ReceiveMode receiveMode)"
    parameters:
    - id: factory
      type: com.microsoft.azure.servicebus.primitives.MessagingFactory
    - id: subscriptionPath
      type: java.lang.String
    - id: receiveMode
      type: com.microsoft.azure.servicebus.ReceiveMode
- uid: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(java.lang.String,java.lang.String,com.microsoft.azure.servicebus.ClientSettings,com.microsoft.azure.servicebus.ReceiveMode)
  id: SubscriptionClient(java.lang.String,java.lang.String,com.microsoft.azure.servicebus.ClientSettings,com.microsoft.azure.servicebus.ReceiveMode)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: SubscriptionClient(String namespace, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  nameWithType: SubscriptionClient.SubscriptionClient(String namespace, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(String namespace, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient*
  type: Constructor
  package: com.microsoft.azure.servicebus
  syntax:
    content: public SubscriptionClient(String namespace, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)
    parameters:
    - id: namespace
      type: java.lang.String
    - id: subscriptionPath
      type: java.lang.String
    - id: clientSettings
      type: com.microsoft.azure.servicebus.ClientSettings
    - id: receiveMode
      type: com.microsoft.azure.servicebus.ReceiveMode
- uid: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(java.net.URI,java.lang.String,com.microsoft.azure.servicebus.ClientSettings,com.microsoft.azure.servicebus.ReceiveMode)
  id: SubscriptionClient(java.net.URI,java.lang.String,com.microsoft.azure.servicebus.ClientSettings,com.microsoft.azure.servicebus.ReceiveMode)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: SubscriptionClient(URI namespaceEndpointURI, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  nameWithType: SubscriptionClient.SubscriptionClient(URI namespaceEndpointURI, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(URI namespaceEndpointURI, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient*
  type: Constructor
  package: com.microsoft.azure.servicebus
  syntax:
    content: public SubscriptionClient(URI namespaceEndpointURI, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)
    parameters:
    - id: namespaceEndpointURI
      type: java.net.URI
    - id: subscriptionPath
      type: java.lang.String
    - id: clientSettings
      type: com.microsoft.azure.servicebus.ClientSettings
    - id: receiveMode
      type: com.microsoft.azure.servicebus.ReceiveMode
- uid: com.microsoft.azure.servicebus.SubscriptionClient.abandon(java.util.UUID)
  id: abandon(java.util.UUID)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: abandon(UUID lockToken)
  nameWithType: SubscriptionClient.abandon(UUID lockToken)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.abandon(UUID lockToken)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.abandon*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Abandon <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message
  syntax:
    content: public void abandon(UUID lockToken)
    parameters:
    - id: lockToken
      type: java.util.UUID
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.abandon(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  id: abandon(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: abandon(UUID lockToken, TransactionContext transaction)
  nameWithType: SubscriptionClient.abandon(UUID lockToken, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.abandon(UUID lockToken, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.abandon*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Abandon <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message
  syntax:
    content: public void abandon(UUID lockToken, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.abandon(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  id: abandon(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: abandon(UUID lockToken, Map<String,Object> propertiesToModify)
  nameWithType: SubscriptionClient.abandon(UUID lockToken, Map<String,Object> propertiesToModify)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.abandon(UUID lockToken, Map<String,Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.abandon*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Abandon <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message
  syntax:
    content: public void abandon(UUID lockToken, Map<String,Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.abandon(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  id: abandon(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: abandon(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  nameWithType: SubscriptionClient.abandon(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.abandon(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.abandon*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Abandon <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message
  syntax:
    content: public void abandon(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(java.util.UUID)
  id: abandonAsync(java.util.UUID)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: abandonAsync(UUID lockToken)
  nameWithType: SubscriptionClient.abandonAsync(UUID lockToken)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(UUID lockToken)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously abandon <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message.
  syntax:
    content: public CompletableFuture<Void> abandonAsync(UUID lockToken)
    parameters:
    - id: lockToken
      type: java.util.UUID
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  id: abandonAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: abandonAsync(UUID lockToken, TransactionContext transaction)
  nameWithType: SubscriptionClient.abandonAsync(UUID lockToken, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(UUID lockToken, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously abandon <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message.
  syntax:
    content: public CompletableFuture<Void> abandonAsync(UUID lockToken, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  id: abandonAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify)
  nameWithType: SubscriptionClient.abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously abandon <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message.
  syntax:
    content: public CompletableFuture<Void> abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  id: abandonAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  nameWithType: SubscriptionClient.abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously abandon <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message.
  syntax:
    content: public CompletableFuture<Void> abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.SubscriptionClient.addRule(com.microsoft.azure.servicebus.rules.RuleDescription)
  id: addRule(com.microsoft.azure.servicebus.rules.RuleDescription)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: addRule(RuleDescription ruleDescription)
  nameWithType: SubscriptionClient.addRule(RuleDescription ruleDescription)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.addRule(RuleDescription ruleDescription)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.addRule*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Adds a rule to the current subscription to filter the messages reaching from topic to the subscription.
  syntax:
    content: public void addRule(RuleDescription ruleDescription)
    parameters:
    - id: ruleDescription
      type: com.microsoft.azure.servicebus.rules.RuleDescription
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.addRule(java.lang.String,com.microsoft.azure.servicebus.rules.Filter)
  id: addRule(java.lang.String,com.microsoft.azure.servicebus.rules.Filter)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: addRule(String ruleName, Filter filter)
  nameWithType: SubscriptionClient.addRule(String ruleName, Filter filter)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.addRule(String ruleName, Filter filter)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.addRule*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Adds a rule with specified name and <xref uid="com.microsoft.azure.servicebus.rules.Filter" data-throw-if-not-resolved="false">Filter</xref> to the current subscription to filter the messages reaching from topic to the subscription.
  syntax:
    content: public void addRule(String ruleName, Filter filter)
    parameters:
    - id: ruleName
      type: java.lang.String
    - id: filter
      type: com.microsoft.azure.servicebus.rules.Filter
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.addRuleAsync(com.microsoft.azure.servicebus.rules.RuleDescription)
  id: addRuleAsync(com.microsoft.azure.servicebus.rules.RuleDescription)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: addRuleAsync(RuleDescription ruleDescription)
  nameWithType: SubscriptionClient.addRuleAsync(RuleDescription ruleDescription)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.addRuleAsync(RuleDescription ruleDescription)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.addRuleAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously adds a rule to the current subscription to filter the messages reaching from topic to the subscription.
  syntax:
    content: public CompletableFuture<Void> addRuleAsync(RuleDescription ruleDescription)
    parameters:
    - id: ruleDescription
      type: com.microsoft.azure.servicebus.rules.RuleDescription
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.SubscriptionClient.addRuleAsync(java.lang.String,com.microsoft.azure.servicebus.rules.Filter)
  id: addRuleAsync(java.lang.String,com.microsoft.azure.servicebus.rules.Filter)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: addRuleAsync(String ruleName, Filter filter)
  nameWithType: SubscriptionClient.addRuleAsync(String ruleName, Filter filter)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.addRuleAsync(String ruleName, Filter filter)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.addRuleAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously adds a rule with specified name and <xref uid="com.microsoft.azure.servicebus.rules.Filter" data-throw-if-not-resolved="false">Filter</xref> to the current subscription to filter the messages reaching from topic to the subscription.
  syntax:
    content: public CompletableFuture<Void> addRuleAsync(String ruleName, Filter filter)
    parameters:
    - id: ruleName
      type: java.lang.String
    - id: filter
      type: com.microsoft.azure.servicebus.rules.Filter
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.SubscriptionClient.complete(java.util.UUID)
  id: complete(java.util.UUID)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: complete(UUID lockToken)
  nameWithType: SubscriptionClient.complete(UUID lockToken)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.complete(UUID lockToken)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.complete*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Completes a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> using its lock token. This will delete the message from the service.
  syntax:
    content: public void complete(UUID lockToken)
    parameters:
    - id: lockToken
      type: java.util.UUID
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.complete(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  id: complete(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: complete(UUID lockToken, TransactionContext transaction)
  nameWithType: SubscriptionClient.complete(UUID lockToken, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.complete(UUID lockToken, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.complete*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Completes a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> using its lock token. This will delete the message from the service.
  syntax:
    content: public void complete(UUID lockToken, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.completeAsync(java.util.UUID)
  id: completeAsync(java.util.UUID)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: completeAsync(UUID lockToken)
  nameWithType: SubscriptionClient.completeAsync(UUID lockToken)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.completeAsync(UUID lockToken)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.completeAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously completes a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> using its lock token. This will delete the message from the service.
  syntax:
    content: public CompletableFuture<Void> completeAsync(UUID lockToken)
    parameters:
    - id: lockToken
      type: java.util.UUID
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.SubscriptionClient.completeAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  id: completeAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: completeAsync(UUID lockToken, TransactionContext transaction)
  nameWithType: SubscriptionClient.completeAsync(UUID lockToken, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.completeAsync(UUID lockToken, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.completeAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously completes a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> using its lock token. This will delete the message from the service.
  syntax:
    content: public CompletableFuture<Void> completeAsync(UUID lockToken, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID)
  id: deadLetter(java.util.UUID)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: deadLetter(UUID lockToken)
  nameWithType: SubscriptionClient.deadLetter(UUID lockToken)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue.
  syntax:
    content: public void deadLetter(UUID lockToken)
    parameters:
    - id: lockToken
      type: java.util.UUID
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  id: deadLetter(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: deadLetter(UUID lockToken, TransactionContext transaction)
  nameWithType: SubscriptionClient.deadLetter(UUID lockToken, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue.
  syntax:
    content: public void deadLetter(UUID lockToken, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String)
  id: deadLetter(java.util.UUID,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  nameWithType: SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description.
  syntax:
    content: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: deadLetterReason
      type: java.lang.String
    - id: deadLetterErrorDescription
      type: java.lang.String
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String,com.microsoft.azure.servicebus.TransactionContext)
  id: deadLetter(java.util.UUID,java.lang.String,java.lang.String,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  nameWithType: SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description.
  syntax:
    content: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: deadLetterReason
      type: java.lang.String
    - id: deadLetterErrorDescription
      type: java.lang.String
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)
  id: deadLetter(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)
  nameWithType: SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description and modified properties.
  syntax:
    content: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: deadLetterReason
      type: java.lang.String
    - id: deadLetterErrorDescription
      type: java.lang.String
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  id: deadLetter(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)
  nameWithType: SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description and modified properties.
  syntax:
    content: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: deadLetterReason
      type: java.lang.String
    - id: deadLetterErrorDescription
      type: java.lang.String
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  id: deadLetter(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: deadLetter(UUID lockToken, Map<String,Object> propertiesToModify)
  nameWithType: SubscriptionClient.deadLetter(UUID lockToken, Map<String,Object> propertiesToModify)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken, Map<String,Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with modified message properties.
  syntax:
    content: public void deadLetter(UUID lockToken, Map<String,Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  id: deadLetter(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: deadLetter(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  nameWithType: SubscriptionClient.deadLetter(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with modified message properties.
  syntax:
    content: public void deadLetter(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID)
  id: deadLetterAsync(java.util.UUID)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: deadLetterAsync(UUID lockToken)
  nameWithType: SubscriptionClient.deadLetterAsync(UUID lockToken)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter.
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken)
    parameters:
    - id: lockToken
      type: java.util.UUID
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  id: deadLetterAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, TransactionContext transaction)
  nameWithType: SubscriptionClient.deadLetterAsync(UUID lockToken, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter.
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String)
  id: deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  nameWithType: SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description.
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: deadLetterReason
      type: java.lang.String
    - id: deadLetterErrorDescription
      type: java.lang.String
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,com.microsoft.azure.servicebus.TransactionContext)
  id: deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  nameWithType: SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description.
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: deadLetterReason
      type: java.lang.String
    - id: deadLetterErrorDescription
      type: java.lang.String
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)
  id: deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)
  nameWithType: SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description and modified properties.
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: deadLetterReason
      type: java.lang.String
    - id: deadLetterErrorDescription
      type: java.lang.String
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  id: deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)
  nameWithType: SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description and modified properties.
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: deadLetterReason
      type: java.lang.String
    - id: deadLetterErrorDescription
      type: java.lang.String
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  id: deadLetterAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify)
  nameWithType: SubscriptionClient.deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with modified properties.
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  id: deadLetterAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  nameWithType: SubscriptionClient.deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously moves a <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with modified properties.
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)
    parameters:
    - id: lockToken
      type: java.util.UUID
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.SubscriptionClient.getEntityPath()
  id: getEntityPath()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: getEntityPath()
  nameWithType: SubscriptionClient.getEntityPath()
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.getEntityPath()
  overload: com.microsoft.azure.servicebus.SubscriptionClient.getEntityPath*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Gets the path of the entity this client is sending messages to or receiving messages from.
  syntax:
    content: public String getEntityPath()
    return:
      type: java.lang.String
- uid: com.microsoft.azure.servicebus.SubscriptionClient.getPrefetchCount()
  id: getPrefetchCount()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: getPrefetchCount()
  nameWithType: SubscriptionClient.getPrefetchCount()
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.getPrefetchCount()
  overload: com.microsoft.azure.servicebus.SubscriptionClient.getPrefetchCount*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Get the prefetch value set.
  syntax:
    content: public int getPrefetchCount()
    return:
      type: int
- uid: com.microsoft.azure.servicebus.SubscriptionClient.getReceiveMode()
  id: getReceiveMode()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: getReceiveMode()
  nameWithType: SubscriptionClient.getReceiveMode()
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.getReceiveMode()
  overload: com.microsoft.azure.servicebus.SubscriptionClient.getReceiveMode*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Gets the <xref uid="com.microsoft.azure.servicebus.ReceiveMode" data-throw-if-not-resolved="false">ReceiveMode</xref> of the current receiver
  syntax:
    content: public ReceiveMode getReceiveMode()
    return:
      type: com.microsoft.azure.servicebus.ReceiveMode
- uid: com.microsoft.azure.servicebus.SubscriptionClient.getRules()
  id: getRules()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: getRules()
  nameWithType: SubscriptionClient.getRules()
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.getRules()
  overload: com.microsoft.azure.servicebus.SubscriptionClient.getRules*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Get all rules associated with the subscription.
  syntax:
    content: public Collection<RuleDescription> getRules()
    return:
      type: java.util.Collection<com.microsoft.azure.servicebus.rules.RuleDescription>
  exceptions:
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
  - type: java.lang.InterruptedException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.getRulesAsync()
  id: getRulesAsync()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: getRulesAsync()
  nameWithType: SubscriptionClient.getRulesAsync()
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.getRulesAsync()
  overload: com.microsoft.azure.servicebus.SubscriptionClient.getRulesAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Get all rules associated with the subscription.
  syntax:
    content: public CompletableFuture<Collection<RuleDescription>> getRulesAsync()
    return:
      type: java.util.concurrent.CompletableFuture<java.util.Collection<com.microsoft.azure.servicebus.rules.RuleDescription>>
- uid: com.microsoft.azure.servicebus.SubscriptionClient.getSubscriptionName()
  id: getSubscriptionName()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: getSubscriptionName()
  nameWithType: SubscriptionClient.getSubscriptionName()
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.getSubscriptionName()
  overload: com.microsoft.azure.servicebus.SubscriptionClient.getSubscriptionName*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Gets the subscription name.
  syntax:
    content: public String getSubscriptionName()
    return:
      type: java.lang.String
- uid: com.microsoft.azure.servicebus.SubscriptionClient.getTopicName()
  id: getTopicName()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: getTopicName()
  nameWithType: SubscriptionClient.getTopicName()
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.getTopicName()
  overload: com.microsoft.azure.servicebus.SubscriptionClient.getTopicName*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Gets the name of the topic, for this subscription.
  syntax:
    content: public String getTopicName()
    return:
      type: java.lang.String
- uid: com.microsoft.azure.servicebus.SubscriptionClient.onClose()
  id: onClose()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: onClose()
  nameWithType: SubscriptionClient.onClose()
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.onClose()
  overload: com.microsoft.azure.servicebus.SubscriptionClient.onClose*
  type: Method
  package: com.microsoft.azure.servicebus
  syntax:
    content: protected CompletableFuture<Void> onClose()
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler)
  id: registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: registerMessageHandler(IMessageHandler handler)
  nameWithType: SubscriptionClient.registerMessageHandler(IMessageHandler handler)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(IMessageHandler handler)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages. IMessageHandler methods are executed on java.util.concurrent.commonPool()
  syntax:
    content: public void registerMessageHandler(IMessageHandler handler)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.IMessageHandler
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,com.microsoft.azure.servicebus.MessageHandlerOptions)
  id: registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,com.microsoft.azure.servicebus.MessageHandlerOptions)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)
  nameWithType: SubscriptionClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages. IMessageHandler methods are executed on java.util.concurrent.commonPool()
  syntax:
    content: public void registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.IMessageHandler
    - id: handlerOptions
      type: com.microsoft.azure.servicebus.MessageHandlerOptions
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,com.microsoft.azure.servicebus.MessageHandlerOptions,java.util.concurrent.ExecutorService)
  id: registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,com.microsoft.azure.servicebus.MessageHandlerOptions,java.util.concurrent.ExecutorService)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)
  nameWithType: SubscriptionClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages. IMessageHandler methods are executed on the passed executor service.
  syntax:
    content: public void registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.IMessageHandler
    - id: handlerOptions
      type: com.microsoft.azure.servicebus.MessageHandlerOptions
    - id: executorService
      type: java.util.concurrent.ExecutorService
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,java.util.concurrent.ExecutorService)
  id: registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,java.util.concurrent.ExecutorService)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: registerMessageHandler(IMessageHandler handler, ExecutorService executorService)
  nameWithType: SubscriptionClient.registerMessageHandler(IMessageHandler handler, ExecutorService executorService)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(IMessageHandler handler, ExecutorService executorService)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages. IMessageHandler methods are executed on the passed executor service.
  syntax:
    content: public void registerMessageHandler(IMessageHandler handler, ExecutorService executorService)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.IMessageHandler
    - id: executorService
      type: java.util.concurrent.ExecutorService
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler)
  id: registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: registerSessionHandler(ISessionHandler handler)
  nameWithType: SubscriptionClient.registerSessionHandler(ISessionHandler handler)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(ISessionHandler handler)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages. ISessionHandler methods are executed on java.util.concurrent.commonPool()
  syntax:
    content: public void registerSessionHandler(ISessionHandler handler)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.ISessionHandler
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,com.microsoft.azure.servicebus.SessionHandlerOptions)
  id: registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,com.microsoft.azure.servicebus.SessionHandlerOptions)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)
  nameWithType: SubscriptionClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages. ISessionHandler methods are executed on java.util.concurrent.commonPool()
  syntax:
    content: public void registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.ISessionHandler
    - id: handlerOptions
      type: com.microsoft.azure.servicebus.SessionHandlerOptions
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,com.microsoft.azure.servicebus.SessionHandlerOptions,java.util.concurrent.ExecutorService)
  id: registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,com.microsoft.azure.servicebus.SessionHandlerOptions,java.util.concurrent.ExecutorService)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)
  nameWithType: SubscriptionClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages. ISessionHandler methods are executed on the passed executor service.
  syntax:
    content: public void registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.ISessionHandler
    - id: handlerOptions
      type: com.microsoft.azure.servicebus.SessionHandlerOptions
    - id: executorService
      type: java.util.concurrent.ExecutorService
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,java.util.concurrent.ExecutorService)
  id: registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,java.util.concurrent.ExecutorService)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: registerSessionHandler(ISessionHandler handler, ExecutorService executorService)
  nameWithType: SubscriptionClient.registerSessionHandler(ISessionHandler handler, ExecutorService executorService)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(ISessionHandler handler, ExecutorService executorService)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages. ISessionHandler methods are executed on the passed executor service.
  syntax:
    content: public void registerSessionHandler(ISessionHandler handler, ExecutorService executorService)
    parameters:
    - id: handler
      type: com.microsoft.azure.servicebus.ISessionHandler
    - id: executorService
      type: java.util.concurrent.ExecutorService
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.removeRule(java.lang.String)
  id: removeRule(java.lang.String)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: removeRule(String ruleName)
  nameWithType: SubscriptionClient.removeRule(String ruleName)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.removeRule(String ruleName)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.removeRule*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Removes the rule on the subscription identified by ruleName
  syntax:
    content: public void removeRule(String ruleName)
    parameters:
    - id: ruleName
      type: java.lang.String
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.SubscriptionClient.removeRuleAsync(java.lang.String)
  id: removeRuleAsync(java.lang.String)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: removeRuleAsync(String ruleName)
  nameWithType: SubscriptionClient.removeRuleAsync(String ruleName)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.removeRuleAsync(String ruleName)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.removeRuleAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously removes the rule on the subscription identified by ruleName
  syntax:
    content: public CompletableFuture<Void> removeRuleAsync(String ruleName)
    parameters:
    - id: ruleName
      type: java.lang.String
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.SubscriptionClient.setPrefetchCount(int)
  id: setPrefetchCount(int)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.SubscriptionClient
  langs:
  - java
  name: setPrefetchCount(int prefetchCount)
  nameWithType: SubscriptionClient.setPrefetchCount(int prefetchCount)
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.setPrefetchCount(int prefetchCount)
  overload: com.microsoft.azure.servicebus.SubscriptionClient.setPrefetchCount*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: >-
    Set the prefetch count of the receiver. Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when and before the application asks for one using Receive. Setting a non-zero value prefetches PrefetchCount number of messages. Setting the value to zero turns prefetch off. For RECEIVEANDDELETE mode, the default value is 0. For PEEKLOCK mode, the default value is 100.


    The value cannot be set until the receiver is created.
  syntax:
    content: public void setPrefetchCount(int prefetchCount)
    parameters:
    - id: prefetchCount
      type: int
  exceptions:
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
references:
- uid: com.microsoft.azure.servicebus.ReceiveMode
  name: ReceiveMode
  nameWithType: ReceiveMode
  fullName: com.microsoft.azure.servicebus.ReceiveMode
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient*
  name: SubscriptionClient
  nameWithType: SubscriptionClient.SubscriptionClient
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder
  name: ConnectionStringBuilder
  nameWithType: ConnectionStringBuilder
  fullName: com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder
- uid: com.microsoft.azure.servicebus.ClientSettings
  name: ClientSettings
  nameWithType: ClientSettings
  fullName: com.microsoft.azure.servicebus.ClientSettings
- uid: java.net.URI
  spec.java:
  - uid: java.net.URI
    name: URI
    fullName: java.net.URI
- uid: com.microsoft.azure.servicebus.primitives.MessagingFactory
  name: MessagingFactory
  nameWithType: MessagingFactory
  fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory
- uid: com.microsoft.azure.servicebus.SubscriptionClient.getReceiveMode*
  name: getReceiveMode
  nameWithType: SubscriptionClient.getReceiveMode
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.getReceiveMode
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.SubscriptionClient.getEntityPath*
  name: getEntityPath
  nameWithType: SubscriptionClient.getEntityPath
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.getEntityPath
  package: com.microsoft.azure.servicebus
- uid: java.lang.InterruptedException
  spec.java:
  - uid: java.lang.InterruptedException
    name: InterruptedException
    fullName: java.lang.InterruptedException
- uid: com.microsoft.azure.servicebus.primitives.ServiceBusException
  name: ServiceBusException
  nameWithType: ServiceBusException
  fullName: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.rules.RuleDescription
  name: RuleDescription
  nameWithType: RuleDescription
  fullName: com.microsoft.azure.servicebus.rules.RuleDescription
- uid: com.microsoft.azure.servicebus.SubscriptionClient.addRule*
  name: addRule
  nameWithType: SubscriptionClient.addRule
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.addRule
  package: com.microsoft.azure.servicebus
- uid: java.util.concurrent.CompletableFuture<java.lang.Void>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.SubscriptionClient.addRuleAsync*
  name: addRuleAsync
  nameWithType: SubscriptionClient.addRuleAsync
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.addRuleAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.rules.Filter
  name: Filter
  nameWithType: Filter
  fullName: com.microsoft.azure.servicebus.rules.Filter
- uid: com.microsoft.azure.servicebus.SubscriptionClient.removeRule*
  name: removeRule
  nameWithType: SubscriptionClient.removeRule
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.removeRule
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.SubscriptionClient.removeRuleAsync*
  name: removeRuleAsync
  nameWithType: SubscriptionClient.removeRuleAsync
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.removeRuleAsync
  package: com.microsoft.azure.servicebus
- uid: java.util.Collection<com.microsoft.azure.servicebus.rules.RuleDescription>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: com.microsoft.azure.servicebus.rules.RuleDescription
    name: RuleDescription
    fullName: com.microsoft.azure.servicebus.rules.RuleDescription
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.SubscriptionClient.getRules*
  name: getRules
  nameWithType: SubscriptionClient.getRules
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.getRules
  package: com.microsoft.azure.servicebus
- uid: java.util.concurrent.CompletableFuture<java.util.Collection<com.microsoft.azure.servicebus.rules.RuleDescription>>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: com.microsoft.azure.servicebus.rules.RuleDescription
    name: RuleDescription
    fullName: com.microsoft.azure.servicebus.rules.RuleDescription
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.SubscriptionClient.getRulesAsync*
  name: getRulesAsync
  nameWithType: SubscriptionClient.getRulesAsync
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.getRulesAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.IMessageHandler
  name: IMessageHandler
  nameWithType: IMessageHandler
  fullName: com.microsoft.azure.servicebus.IMessageHandler
- uid: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler*
  name: registerMessageHandler
  nameWithType: SubscriptionClient.registerMessageHandler
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.MessageHandlerOptions
  name: MessageHandlerOptions
  nameWithType: MessageHandlerOptions
  fullName: com.microsoft.azure.servicebus.MessageHandlerOptions
- uid: com.microsoft.azure.servicebus.ISessionHandler
  name: ISessionHandler
  nameWithType: ISessionHandler
  fullName: com.microsoft.azure.servicebus.ISessionHandler
- uid: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler*
  name: registerSessionHandler
  nameWithType: SubscriptionClient.registerSessionHandler
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.SessionHandlerOptions
  name: SessionHandlerOptions
  nameWithType: SessionHandlerOptions
  fullName: com.microsoft.azure.servicebus.SessionHandlerOptions
- uid: java.util.concurrent.ExecutorService
  spec.java:
  - uid: java.util.concurrent.ExecutorService
    name: ExecutorService
    fullName: java.util.concurrent.ExecutorService
- uid: com.microsoft.azure.servicebus.SubscriptionClient.onClose*
  name: onClose
  nameWithType: SubscriptionClient.onClose
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.onClose
  package: com.microsoft.azure.servicebus
- uid: java.util.UUID
  spec.java:
  - uid: java.util.UUID
    name: UUID
    fullName: java.util.UUID
- uid: com.microsoft.azure.servicebus.SubscriptionClient.abandon*
  name: abandon
  nameWithType: SubscriptionClient.abandon
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.abandon
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TransactionContext
  name: TransactionContext
  nameWithType: TransactionContext
  fullName: com.microsoft.azure.servicebus.TransactionContext
- uid: java.util.Map<java.lang.String,java.lang.Object>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync*
  name: abandonAsync
  nameWithType: SubscriptionClient.abandonAsync
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.SubscriptionClient.complete*
  name: complete
  nameWithType: SubscriptionClient.complete
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.complete
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.SubscriptionClient.completeAsync*
  name: completeAsync
  nameWithType: SubscriptionClient.completeAsync
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.completeAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter*
  name: deadLetter
  nameWithType: SubscriptionClient.deadLetter
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync*
  name: deadLetterAsync
  nameWithType: SubscriptionClient.deadLetterAsync
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync
  package: com.microsoft.azure.servicebus
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.microsoft.azure.servicebus.SubscriptionClient.getPrefetchCount*
  name: getPrefetchCount
  nameWithType: SubscriptionClient.getPrefetchCount
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.getPrefetchCount
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.SubscriptionClient.setPrefetchCount*
  name: setPrefetchCount
  nameWithType: SubscriptionClient.setPrefetchCount
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.setPrefetchCount
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.SubscriptionClient.getTopicName*
  name: getTopicName
  nameWithType: SubscriptionClient.getTopicName
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.getTopicName
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.SubscriptionClient.getSubscriptionName*
  name: getSubscriptionName
  nameWithType: SubscriptionClient.getSubscriptionName
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.getSubscriptionName
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.InitializableEntity
  name: InitializableEntity
  nameWithType: InitializableEntity
  fullName: com.microsoft.azure.servicebus.InitializableEntity
- uid: com.microsoft.azure.servicebus.ISubscriptionClient
  name: ISubscriptionClient
  nameWithType: ISubscriptionClient
  fullName: com.microsoft.azure.servicebus.ISubscriptionClient
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()
  name: ClientEntity.setClosed()
  nameWithType: ClientEntity.setClosed()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()
  name: ClientEntity.finalize()
  nameWithType: ClientEntity.finalize()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.setClosing()
  name: ClientEntity.setClosing()
  nameWithType: ClientEntity.setClosing()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.setClosing()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(java.lang.Throwable)
  name: ClientEntity.throwIfClosed(Throwable)
  nameWithType: ClientEntity.throwIfClosed(Throwable)
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(java.lang.Throwable)
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.close()
  name: ClientEntity.close()
  nameWithType: ClientEntity.close()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.close()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()
  name: ClientEntity.closeAsync()
  nameWithType: ClientEntity.closeAsync()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.onClose()
  name: ClientEntity.onClose()
  nameWithType: ClientEntity.onClose()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.onClose()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()
  name: ClientEntity.getIsClosed()
  nameWithType: ClientEntity.getIsClosed()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()
  name: ClientEntity.getIsClosingOrClosed()
  nameWithType: ClientEntity.getIsClosingOrClosed()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()
  name: ClientEntity.getClientId()
  nameWithType: ClientEntity.getClientId()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: java.util.concurrent.CompletableFuture
  name: CompletableFuture
  nameWithType: CompletableFuture
  fullName: java.util.concurrent.CompletableFuture
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: java.lang.String,java.lang.Object
  name: String,Object
  nameWithType: String,Object
  fullName: java.lang.String,java.lang.Object
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
