### YamlMime:JavaType
uid: "com.microsoft.azure.servicebus.SubscriptionClient"
fullName: "com.microsoft.azure.servicebus.SubscriptionClient"
name: "SubscriptionClient"
nameWithType: "SubscriptionClient"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.servicebus.primitives.ClientEntity?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.servicebus.InitializableEntity?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.microsoft.azure.servicebus.primitives.ClientEntity.close()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.onClose()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.setClosing()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(java.lang.Throwable)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class SubscriptionClient extends InitializableEntity implements ISubscriptionClient"
constructors:
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder,com.microsoft.azure.servicebus.ReceiveMode)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)"
  name: "SubscriptionClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)"
  nameWithType: "SubscriptionClient.SubscriptionClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)"
  parameters:
  - name: "amqpConnectionStringBuilder"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder?alt=com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder&text=ConnectionStringBuilder\" data-throw-if-not-resolved=\"False\" />"
  - name: "receiveMode"
    type: "<xref href=\"com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SubscriptionClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(java.lang.String,java.lang.String,com.microsoft.azure.servicebus.ClientSettings,com.microsoft.azure.servicebus.ReceiveMode)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(String namespace, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)"
  name: "SubscriptionClient(String namespace, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)"
  nameWithType: "SubscriptionClient.SubscriptionClient(String namespace, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)"
  parameters:
  - name: "namespace"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "subscriptionPath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "clientSettings"
    type: "<xref href=\"com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings\" data-throw-if-not-resolved=\"False\" />"
  - name: "receiveMode"
    type: "<xref href=\"com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SubscriptionClient(String namespace, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(java.net.URI,java.lang.String,com.microsoft.azure.servicebus.ClientSettings,com.microsoft.azure.servicebus.ReceiveMode)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(URI namespaceEndpointURI, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)"
  name: "SubscriptionClient(URI namespaceEndpointURI, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)"
  nameWithType: "SubscriptionClient.SubscriptionClient(URI namespaceEndpointURI, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)"
  parameters:
  - name: "namespaceEndpointURI"
    type: "<xref href=\"java.net.URI?alt=java.net.URI&text=URI\" data-throw-if-not-resolved=\"False\" />"
  - name: "subscriptionPath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "clientSettings"
    type: "<xref href=\"com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings\" data-throw-if-not-resolved=\"False\" />"
  - name: "receiveMode"
    type: "<xref href=\"com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SubscriptionClient(URI namespaceEndpointURI, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
fields:
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.DEFAULT_RULE_NAME"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.DEFAULT_RULE_NAME"
  name: "DEFAULT_RULE_NAME"
  nameWithType: "SubscriptionClient.DEFAULT_RULE_NAME"
  modifiers:
  - "static"
  - "final"
  field:
    value: "$Default"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String DEFAULT_RULE_NAME"
methods:
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.abandon(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.abandon(UUID lockToken)"
  name: "abandon(UUID lockToken)"
  nameWithType: "SubscriptionClient.abandon(UUID lockToken)"
  summary: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void abandon(UUID lockToken)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.abandon(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.abandon(UUID lockToken, TransactionContext transaction)"
  name: "abandon(UUID lockToken, TransactionContext transaction)"
  nameWithType: "SubscriptionClient.abandon(UUID lockToken, TransactionContext transaction)"
  summary: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void abandon(UUID lockToken, TransactionContext transaction)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.abandon(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.abandon(UUID lockToken, Map<String,Object> propertiesToModify)"
  name: "abandon(UUID lockToken, Map<String,Object> propertiesToModify)"
  nameWithType: "SubscriptionClient.abandon(UUID lockToken, Map<String,Object> propertiesToModify)"
  summary: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void abandon(UUID lockToken, Map<String,Object> propertiesToModify)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.abandon(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.abandon(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  name: "abandon(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  nameWithType: "SubscriptionClient.abandon(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  summary: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void abandon(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(UUID lockToken)"
  name: "abandonAsync(UUID lockToken)"
  nameWithType: "SubscriptionClient.abandonAsync(UUID lockToken)"
  summary: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> abandonAsync(UUID lockToken)"
  desc: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(UUID lockToken, TransactionContext transaction)"
  name: "abandonAsync(UUID lockToken, TransactionContext transaction)"
  nameWithType: "SubscriptionClient.abandonAsync(UUID lockToken, TransactionContext transaction)"
  summary: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> abandonAsync(UUID lockToken, TransactionContext transaction)"
  desc: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  name: "abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  nameWithType: "SubscriptionClient.abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  summary: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CompletableFuture<Void> abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  desc: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  name: "abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  nameWithType: "SubscriptionClient.abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  summary: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> abandonAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  desc: "Asynchronously abandon <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.addRule(com.microsoft.azure.servicebus.rules.RuleDescription)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.addRule(RuleDescription ruleDescription)"
  name: "addRule(RuleDescription ruleDescription)"
  nameWithType: "SubscriptionClient.addRule(RuleDescription ruleDescription)"
  summary: "Adds a rule to the current subscription to filter the messages reaching from topic to the subscription."
  parameters:
  - name: "ruleDescription"
    type: "<xref href=\"com.microsoft.azure.servicebus.rules.RuleDescription?alt=com.microsoft.azure.servicebus.rules.RuleDescription&text=RuleDescription\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void addRule(RuleDescription ruleDescription)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Adds a rule to the current subscription to filter the messages reaching from topic to the subscription."
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.addRule(java.lang.String,com.microsoft.azure.servicebus.rules.Filter)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.addRule(String ruleName, Filter filter)"
  name: "addRule(String ruleName, Filter filter)"
  nameWithType: "SubscriptionClient.addRule(String ruleName, Filter filter)"
  summary: "Adds a rule with specified name and <xref uid=\"com.microsoft.azure.servicebus.rules.Filter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Filter\"></xref> to the current subscription to filter the messages reaching from topic to the subscription."
  parameters:
  - name: "ruleName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "filter"
    type: "<xref href=\"com.microsoft.azure.servicebus.rules.Filter?alt=com.microsoft.azure.servicebus.rules.Filter&text=Filter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void addRule(String ruleName, Filter filter)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Adds a rule with specified name and <xref uid=\"com.microsoft.azure.servicebus.rules.Filter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Filter\"></xref> to the current subscription to filter the messages reaching from topic to the subscription."
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.addRuleAsync(com.microsoft.azure.servicebus.rules.RuleDescription)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.addRuleAsync(RuleDescription ruleDescription)"
  name: "addRuleAsync(RuleDescription ruleDescription)"
  nameWithType: "SubscriptionClient.addRuleAsync(RuleDescription ruleDescription)"
  summary: "Asynchronously adds a rule to the current subscription to filter the messages reaching from topic to the subscription."
  parameters:
  - name: "ruleDescription"
    type: "<xref href=\"com.microsoft.azure.servicebus.rules.RuleDescription?alt=com.microsoft.azure.servicebus.rules.RuleDescription&text=RuleDescription\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> addRuleAsync(RuleDescription ruleDescription)"
  desc: "Asynchronously adds a rule to the current subscription to filter the messages reaching from topic to the subscription."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.addRuleAsync(java.lang.String,com.microsoft.azure.servicebus.rules.Filter)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.addRuleAsync(String ruleName, Filter filter)"
  name: "addRuleAsync(String ruleName, Filter filter)"
  nameWithType: "SubscriptionClient.addRuleAsync(String ruleName, Filter filter)"
  summary: "Asynchronously adds a rule with specified name and <xref uid=\"com.microsoft.azure.servicebus.rules.Filter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Filter\"></xref> to the current subscription to filter the messages reaching from topic to the subscription."
  parameters:
  - name: "ruleName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "filter"
    type: "<xref href=\"com.microsoft.azure.servicebus.rules.Filter?alt=com.microsoft.azure.servicebus.rules.Filter&text=Filter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> addRuleAsync(String ruleName, Filter filter)"
  desc: "Asynchronously adds a rule with specified name and <xref uid=\"com.microsoft.azure.servicebus.rules.Filter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Filter\"></xref> to the current subscription to filter the messages reaching from topic to the subscription."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.complete(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.complete(UUID lockToken)"
  name: "complete(UUID lockToken)"
  nameWithType: "SubscriptionClient.complete(UUID lockToken)"
  summary: "Completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void complete(UUID lockToken)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token. This will delete the message from the service."
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.complete(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.complete(UUID lockToken, TransactionContext transaction)"
  name: "complete(UUID lockToken, TransactionContext transaction)"
  nameWithType: "SubscriptionClient.complete(UUID lockToken, TransactionContext transaction)"
  summary: "Completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void complete(UUID lockToken, TransactionContext transaction)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token. This will delete the message from the service."
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.completeAsync(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.completeAsync(UUID lockToken)"
  name: "completeAsync(UUID lockToken)"
  nameWithType: "SubscriptionClient.completeAsync(UUID lockToken)"
  summary: "Asynchronously completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> completeAsync(UUID lockToken)"
  desc: "Asynchronously completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token. This will delete the message from the service."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.completeAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.completeAsync(UUID lockToken, TransactionContext transaction)"
  name: "completeAsync(UUID lockToken, TransactionContext transaction)"
  nameWithType: "SubscriptionClient.completeAsync(UUID lockToken, TransactionContext transaction)"
  summary: "Asynchronously completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> completeAsync(UUID lockToken, TransactionContext transaction)"
  desc: "Asynchronously completes a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> using its lock token. This will delete the message from the service."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken)"
  name: "deadLetter(UUID lockToken)"
  nameWithType: "SubscriptionClient.deadLetter(UUID lockToken)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deadLetter(UUID lockToken)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue."
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken, TransactionContext transaction)"
  name: "deadLetter(UUID lockToken, TransactionContext transaction)"
  nameWithType: "SubscriptionClient.deadLetter(UUID lockToken, TransactionContext transaction)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deadLetter(UUID lockToken, TransactionContext transaction)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue."
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  name: "deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  nameWithType: "SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  name: "deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  nameWithType: "SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  name: "deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  nameWithType: "SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  name: "deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  nameWithType: "SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken, Map<String,Object> propertiesToModify)"
  name: "deadLetter(UUID lockToken, Map<String,Object> propertiesToModify)"
  nameWithType: "SubscriptionClient.deadLetter(UUID lockToken, Map<String,Object> propertiesToModify)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified message properties."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void deadLetter(UUID lockToken, Map<String,Object> propertiesToModify)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified message properties."
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  name: "deadLetter(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  nameWithType: "SubscriptionClient.deadLetter(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  summary: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified message properties."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deadLetter(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified message properties."
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken)"
  name: "deadLetterAsync(UUID lockToken)"
  nameWithType: "SubscriptionClient.deadLetterAsync(UUID lockToken)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> deadLetterAsync(UUID lockToken)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken, TransactionContext transaction)"
  name: "deadLetterAsync(UUID lockToken, TransactionContext transaction)"
  nameWithType: "SubscriptionClient.deadLetterAsync(UUID lockToken, TransactionContext transaction)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> deadLetterAsync(UUID lockToken, TransactionContext transaction)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  name: "deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  nameWithType: "SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  name: "deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  nameWithType: "SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  name: "deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  nameWithType: "SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  name: "deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  nameWithType: "SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "deadLetterErrorDescription"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with deadletter reason and error description and modified properties."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  name: "deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  nameWithType: "SubscriptionClient.deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified properties."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CompletableFuture<Void> deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified properties."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(java.util.UUID,java.util.Map<java.lang.String,java.lang.Object>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  name: "deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  nameWithType: "SubscriptionClient.deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  summary: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified properties."
  parameters:
  - name: "lockToken"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - name: "propertiesToModify"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> deadLetterAsync(UUID lockToken, Map<String,Object> propertiesToModify, TransactionContext transaction)"
  desc: "Asynchronously moves a <xref uid=\"com.microsoft.azure.servicebus.Message\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Message\"></xref> to the deadletter sub-queue with modified properties."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.getEntityPath()"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.getEntityPath()"
  name: "getEntityPath()"
  nameWithType: "SubscriptionClient.getEntityPath()"
  summary: "Gets the path of the entity this client is sending messages to or receiving messages from."
  syntax: "public String getEntityPath()"
  desc: "Gets the path of the entity this client is sending messages to or receiving messages from."
  returns:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.getPrefetchCount()"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.getPrefetchCount()"
  name: "getPrefetchCount()"
  nameWithType: "SubscriptionClient.getPrefetchCount()"
  summary: "Get the prefetch value set."
  syntax: "public int getPrefetchCount()"
  desc: "Get the prefetch value set."
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.getReceiveMode()"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.getReceiveMode()"
  name: "getReceiveMode()"
  nameWithType: "SubscriptionClient.getReceiveMode()"
  summary: "Gets the <xref uid=\"com.microsoft.azure.servicebus.ReceiveMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiveMode\"></xref> of the current receiver"
  syntax: "public ReceiveMode getReceiveMode()"
  desc: "Gets the <xref uid=\"com.microsoft.azure.servicebus.ReceiveMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiveMode\"></xref> of the current receiver"
  returns:
    type: "<xref href=\"com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.getRules()"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.getRules()"
  name: "getRules()"
  nameWithType: "SubscriptionClient.getRules()"
  summary: "Get all rules associated with the subscription."
  syntax: "public Collection<RuleDescription> getRules()"
  exceptions:
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Get all rules associated with the subscription."
  returns:
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.servicebus.rules.RuleDescription?alt=com.microsoft.azure.servicebus.rules.RuleDescription&text=RuleDescription\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.getRulesAsync()"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.getRulesAsync()"
  name: "getRulesAsync()"
  nameWithType: "SubscriptionClient.getRulesAsync()"
  summary: "Get all rules associated with the subscription."
  syntax: "public CompletableFuture<Collection<RuleDescription>> getRulesAsync()"
  desc: "Get all rules associated with the subscription."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.servicebus.rules.RuleDescription?alt=com.microsoft.azure.servicebus.rules.RuleDescription&text=RuleDescription\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.getSubscriptionName()"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.getSubscriptionName()"
  name: "getSubscriptionName()"
  nameWithType: "SubscriptionClient.getSubscriptionName()"
  summary: "Gets the subscription name."
  syntax: "public String getSubscriptionName()"
  desc: "Gets the subscription name."
  returns:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.getTopicName()"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.getTopicName()"
  name: "getTopicName()"
  nameWithType: "SubscriptionClient.getTopicName()"
  summary: "Gets the name of the topic, for this subscription."
  syntax: "public String getTopicName()"
  desc: "Gets the name of the topic, for this subscription."
  returns:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.onClose()"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.onClose()"
  name: "onClose()"
  nameWithType: "SubscriptionClient.onClose()"
  modifiers:
  - "protected"
  overridden: "com.microsoft.azure.servicebus.primitives.ClientEntity.onClose()"
  syntax: "protected CompletableFuture<Void> onClose()"
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(IMessageHandler handler)"
  name: "registerMessageHandler(IMessageHandler handler)"
  nameWithType: "SubscriptionClient.registerMessageHandler(IMessageHandler handler)"
  summary: "Receive messages continuously from the entity."
  parameters:
  - name: "handler"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessageHandler?alt=com.microsoft.azure.servicebus.IMessageHandler&text=IMessageHandler\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic void registerMessageHandler(IMessageHandler handler)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages. IMessageHandler methods are executed on java.util.concurrent.commonPool()"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,com.microsoft.azure.servicebus.MessageHandlerOptions)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)"
  name: "registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)"
  nameWithType: "SubscriptionClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)"
  summary: "Receive messages continuously from the entity."
  parameters:
  - name: "handler"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessageHandler?alt=com.microsoft.azure.servicebus.IMessageHandler&text=IMessageHandler\" data-throw-if-not-resolved=\"False\" />"
  - name: "handlerOptions"
    type: "<xref href=\"com.microsoft.azure.servicebus.MessageHandlerOptions?alt=com.microsoft.azure.servicebus.MessageHandlerOptions&text=MessageHandlerOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic void registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages. IMessageHandler methods are executed on java.util.concurrent.commonPool()"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,com.microsoft.azure.servicebus.MessageHandlerOptions,java.util.concurrent.ExecutorService)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)"
  name: "registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)"
  nameWithType: "SubscriptionClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)"
  summary: "Receive messages continuously from the entity."
  parameters:
  - name: "handler"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessageHandler?alt=com.microsoft.azure.servicebus.IMessageHandler&text=IMessageHandler\" data-throw-if-not-resolved=\"False\" />"
  - name: "handlerOptions"
    type: "<xref href=\"com.microsoft.azure.servicebus.MessageHandlerOptions?alt=com.microsoft.azure.servicebus.MessageHandlerOptions&text=MessageHandlerOptions\" data-throw-if-not-resolved=\"False\" />"
  - name: "executorService"
    type: "<xref href=\"java.util.concurrent.ExecutorService?alt=java.util.concurrent.ExecutorService&text=ExecutorService\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages. IMessageHandler methods are executed on the passed executor service."
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(com.microsoft.azure.servicebus.IMessageHandler,java.util.concurrent.ExecutorService)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(IMessageHandler handler, ExecutorService executorService)"
  name: "registerMessageHandler(IMessageHandler handler, ExecutorService executorService)"
  nameWithType: "SubscriptionClient.registerMessageHandler(IMessageHandler handler, ExecutorService executorService)"
  summary: "Receive messages continuously from the entity."
  parameters:
  - name: "handler"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessageHandler?alt=com.microsoft.azure.servicebus.IMessageHandler&text=IMessageHandler\" data-throw-if-not-resolved=\"False\" />"
  - name: "executorService"
    type: "<xref href=\"java.util.concurrent.ExecutorService?alt=java.util.concurrent.ExecutorService&text=ExecutorService\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void registerMessageHandler(IMessageHandler handler, ExecutorService executorService)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receive messages continuously from the entity. Registers a message handler and begins a new thread to receive messages. IMessageHandler methods are executed on the passed executor service."
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(ISessionHandler handler)"
  name: "registerSessionHandler(ISessionHandler handler)"
  nameWithType: "SubscriptionClient.registerSessionHandler(ISessionHandler handler)"
  summary: "Receive session messages continuously from the queue."
  parameters:
  - name: "handler"
    type: "<xref href=\"com.microsoft.azure.servicebus.ISessionHandler?alt=com.microsoft.azure.servicebus.ISessionHandler&text=ISessionHandler\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic void registerSessionHandler(ISessionHandler handler)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages. ISessionHandler methods are executed on java.util.concurrent.commonPool()"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,com.microsoft.azure.servicebus.SessionHandlerOptions)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)"
  name: "registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)"
  nameWithType: "SubscriptionClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)"
  summary: "Receive session messages continuously from the queue."
  parameters:
  - name: "handler"
    type: "<xref href=\"com.microsoft.azure.servicebus.ISessionHandler?alt=com.microsoft.azure.servicebus.ISessionHandler&text=ISessionHandler\" data-throw-if-not-resolved=\"False\" />"
  - name: "handlerOptions"
    type: "<xref href=\"com.microsoft.azure.servicebus.SessionHandlerOptions?alt=com.microsoft.azure.servicebus.SessionHandlerOptions&text=SessionHandlerOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic void registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages. ISessionHandler methods are executed on java.util.concurrent.commonPool()"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,com.microsoft.azure.servicebus.SessionHandlerOptions,java.util.concurrent.ExecutorService)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)"
  name: "registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)"
  nameWithType: "SubscriptionClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)"
  summary: "Receive session messages continuously from the queue."
  parameters:
  - name: "handler"
    type: "<xref href=\"com.microsoft.azure.servicebus.ISessionHandler?alt=com.microsoft.azure.servicebus.ISessionHandler&text=ISessionHandler\" data-throw-if-not-resolved=\"False\" />"
  - name: "handlerOptions"
    type: "<xref href=\"com.microsoft.azure.servicebus.SessionHandlerOptions?alt=com.microsoft.azure.servicebus.SessionHandlerOptions&text=SessionHandlerOptions\" data-throw-if-not-resolved=\"False\" />"
  - name: "executorService"
    type: "<xref href=\"java.util.concurrent.ExecutorService?alt=java.util.concurrent.ExecutorService&text=ExecutorService\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages. ISessionHandler methods are executed on the passed executor service."
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(com.microsoft.azure.servicebus.ISessionHandler,java.util.concurrent.ExecutorService)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(ISessionHandler handler, ExecutorService executorService)"
  name: "registerSessionHandler(ISessionHandler handler, ExecutorService executorService)"
  nameWithType: "SubscriptionClient.registerSessionHandler(ISessionHandler handler, ExecutorService executorService)"
  summary: "Receive session messages continuously from the queue."
  parameters:
  - name: "handler"
    type: "<xref href=\"com.microsoft.azure.servicebus.ISessionHandler?alt=com.microsoft.azure.servicebus.ISessionHandler&text=ISessionHandler\" data-throw-if-not-resolved=\"False\" />"
  - name: "executorService"
    type: "<xref href=\"java.util.concurrent.ExecutorService?alt=java.util.concurrent.ExecutorService&text=ExecutorService\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void registerSessionHandler(ISessionHandler handler, ExecutorService executorService)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receive session messages continuously from the queue. Registers a message handler and begins a new thread to receive session-messages. ISessionHandler methods are executed on the passed executor service."
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.removeRule(java.lang.String)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.removeRule(String ruleName)"
  name: "removeRule(String ruleName)"
  nameWithType: "SubscriptionClient.removeRule(String ruleName)"
  summary: "Removes the rule on the subscription identified by rule<wbr>Name"
  parameters:
  - name: "ruleName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void removeRule(String ruleName)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Removes the rule on the subscription identified by ruleName"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.removeRuleAsync(java.lang.String)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.removeRuleAsync(String ruleName)"
  name: "removeRuleAsync(String ruleName)"
  nameWithType: "SubscriptionClient.removeRuleAsync(String ruleName)"
  summary: "Asynchronously removes the rule on the subscription identified by rule<wbr>Name"
  parameters:
  - name: "ruleName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> removeRuleAsync(String ruleName)"
  desc: "Asynchronously removes the rule on the subscription identified by ruleName"
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.SubscriptionClient.setPrefetchCount(int)"
  fullName: "com.microsoft.azure.servicebus.SubscriptionClient.setPrefetchCount(int prefetchCount)"
  name: "setPrefetchCount(int prefetchCount)"
  nameWithType: "SubscriptionClient.setPrefetchCount(int prefetchCount)"
  summary: "Set the prefetch count of the receiver."
  parameters:
  - name: "prefetchCount"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setPrefetchCount(int prefetchCount)"
  exceptions:
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Set the prefetch count of the receiver. Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when and before the application asks for one using Receive. Setting a non-zero value prefetches PrefetchCount number of messages. Setting the value to zero turns prefetch off. For RECEIVEANDDELETE mode, the default value is 0. For PEEKLOCK mode, the default value is 100.\n\nThe value cannot be set until the receiver is created."
type: "class"
implements:
- "<xref href=\"com.microsoft.azure.servicebus.ISubscriptionClient?alt=com.microsoft.azure.servicebus.ISubscriptionClient&text=ISubscriptionClient\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.microsoft.azure.servicebus"
artifact: com.microsoft.azure:azure-servicebus:3.6.6
