items:
- uid: system.fabric._operation
  id: _operation
  parent: system.fabric
  children:
  - system.fabric._operation.acknowledge()
  - system.fabric._operation.getAtomicGroupId()
  - system.fabric._operation.getData()
  - system.fabric._operation.getOperationType()
  - system.fabric._operation.getSequenceNumber()
  href: system.fabric._operation.yml
  langs:
  - java
  name: Operation
  nameWithType: Operation
  fullName: system.fabric.Operation
  type: Interface
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
    startLine: 16
  package: system.fabric
  summary: >-
    <p>

      <bold>Remarks:</bold>

      <ref refid="" kindref="compound">system.fabric.Operation</ref> is the base interface that describes state changes that are delivered to a Secondary replica. They contain the <ref refid="" kindref="compound">system.fabric.StateReplicator#replicateAsync(OperationData, SequenceNumber, system.fabric.CancellationToken)</ref> and the sequence number and other identifying information. </p>
  syntax:
    content: public interface Operation
- uid: system.fabric._operation.acknowledge()
  id: acknowledge()
  parent: system.fabric._operation
  href: system.fabric._operation.yml
  langs:
  - java
  name: acknowledge()
  nameWithType: Operation.acknowledge()
  fullName: void system.fabric.Operation.acknowledge()
  overload: system.fabric._operation.acknowledge*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
    startLine: 77
  package: system.fabric
  summary: >-
    <p>Acknowledges that this operation has been successfully applied at the Secondary replica. </p>

    <p>

      <bold>Remarks:</bold>Services should call this method when they have obtained an <ref refid="" kindref="compound">system.fabric.Operation</ref> from the replicator and successfully applied it to their local store. For persisted services, calling this method is mandatory because the <xref href="system.fabric._fabric_replicator" data-throw-if-not-resolved="false"></xref> does not release additional objects that implement <ref refid="" kindref="compound">system.fabric.Operation</ref>. For volatile services, the replicator implicitly acknowledges operations when they are received unless they are configured otherwise by setting the value <xref href="system.fabric._replicator_settings.isRequireServiceAck()" data-throw-if-not-resolved="false"></xref> to true. An operation must be acknowledged by a quorum of replicas before the Primary replica receives the <ref refid="" kindref="compound">system.fabric.StateReplicator#replicateAsync(OperationData, SequenceNumber, system.fabric.CancellationToken)</ref> operation complete responses. </p>
  syntax:
    content: public void acknowledge()
- uid: system.fabric._operation.getAtomicGroupId()
  id: getAtomicGroupId()
  parent: system.fabric._operation
  href: system.fabric._operation.yml
  langs:
  - java
  name: getAtomicGroupId()
  nameWithType: Operation.getAtomicGroupId()
  fullName: long system.fabric.Operation.getAtomicGroupId()
  overload: system.fabric._operation.getAtomicGroupId*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
    startLine: 52
  package: system.fabric
  summary: >-
    <p>Identifies the atomic group, if this object that implements <ref refid="" kindref="compound">system.fabric.Operation</ref> is a part of an atomic group. Atomic groups are only available when a service is a part of service group.</p>

    <p></p>
  syntax:
    content: public long getAtomicGroupId()
    return:
      type: 0364520f
      description: <p>Returns long. </p>
- uid: system.fabric._operation.getData()
  id: getData()
  parent: system.fabric._operation
  href: system.fabric._operation.yml
  langs:
  - java
  name: getData()
  nameWithType: Operation.getData()
  fullName: OperationData system.fabric.Operation.getData()
  overload: system.fabric._operation.getData*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
    startLine: 59
  package: system.fabric
  summary: >-
    <p>Gets the <xref href="system.fabric._operation_data" data-throw-if-not-resolved="false"></xref> that are provided by the Primary replica.</p>

    <p></p>
  syntax:
    content: public OperationData getData()
    return:
      type: system.fabric._operation_data
      description: <p>Returns <xref href="system.fabric._operation_data" data-throw-if-not-resolved="false"></xref>. </p>
- uid: system.fabric._operation.getOperationType()
  id: getOperationType()
  parent: system.fabric._operation
  href: system.fabric._operation.yml
  langs:
  - java
  name: getOperationType()
  nameWithType: Operation.getOperationType()
  fullName: OperationType system.fabric.Operation.getOperationType()
  overload: system.fabric._operation.getOperationType*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
    startLine: 28
  package: system.fabric
  summary: >-
    <p>Gets the type of this operation.</p>

    <p>

      <bold>Remarks:</bold>The <xref href="system.fabric._operation_type" data-throw-if-not-resolved="false"></xref> indicates the type of operation. "Normal" operations are those operations that are sent by non-service grouped services as part of either the copy or replication streams. Other types of operations represent control operations that are specific to service groups. </p>
  syntax:
    content: public OperationType getOperationType()
    return:
      type: system.fabric._operation_type
      description: <p>Returns <xref href="system.fabric._operation_type" data-throw-if-not-resolved="false"></xref>. </p>
- uid: system.fabric._operation.getSequenceNumber()
  id: getSequenceNumber()
  parent: system.fabric._operation
  href: system.fabric._operation.yml
  langs:
  - java
  name: getSequenceNumber()
  nameWithType: Operation.getSequenceNumber()
  fullName: long system.fabric.Operation.getSequenceNumber()
  overload: system.fabric._operation.getSequenceNumber*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
    startLine: 43
  package: system.fabric
  summary: >-
    <p>Gets the sequence number of this operation.</p>

    <p>

      <bold>Remarks:</bold>The sequence number is provided as a part of the <xref href="system.fabric._operation.getSequenceNumber()" data-throw-if-not-resolved="false"></xref> For operations received from the replication stream (<ref refid="" kindref="compound">system.fabric.StateReplicator#getReplicationStream()</ref>) the sequence number is the same that the Primary replica that are receives from <ref refid="" kindref="compound">system.fabric.StateReplicator#replicateAsync(OperationData, SequenceNumber, system.fabric.CancellationToken)</ref> method. </p>
  syntax: &o1
    content: public long getSequenceNumber()
    return:
      type: 0364520f
      description: <p>Returns long. </p>
references:
- uid: system.fabric._operation.getOperationType*
  name: getOperationType
  nameWithType: Operation.getOperationType
  fullName: OperationType system.fabric.Operation.getOperationType
  package: system.fabric
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: system.fabric._operation.getSequenceNumber*
  name: getSequenceNumber
  nameWithType: Operation.getSequenceNumber
  fullName: long system.fabric.Operation.getSequenceNumber
  package: system.fabric
- uid: system.fabric._operation.getAtomicGroupId*
  name: getAtomicGroupId
  nameWithType: Operation.getAtomicGroupId
  fullName: long system.fabric.Operation.getAtomicGroupId
  package: system.fabric
- uid: system.fabric._operation.getData*
  name: getData
  nameWithType: Operation.getData
  fullName: OperationData system.fabric.Operation.getData
  package: system.fabric
- uid: system.fabric._operation.acknowledge*
  name: acknowledge
  nameWithType: Operation.acknowledge
  fullName: void system.fabric.Operation.acknowledge
  package: system.fabric
- uid: system.fabric._j_operation
- uid: system.fabric._operation_type
  parent: system.fabric
  href: system.fabric._operation_type.yml
  name: OperationType
  nameWithType: OperationType
  fullName: system.fabric.OperationType
  type: Enum
  syntax:
    content: public enum OperationType
- uid: system.fabric._operation.getSequenceNumber()
  parent: system.fabric._operation
  href: system.fabric._operation.yml
  name: getSequenceNumber()
  nameWithType: Operation.getSequenceNumber()
  fullName: long system.fabric.Operation.getSequenceNumber()
  type: Method
  summary: >-
    <p>Gets the sequence number of this operation.</p>

    <p>

      <bold>Remarks:</bold>The sequence number is provided as a part of the <xref href="system.fabric._operation.getSequenceNumber()" data-throw-if-not-resolved="false"></xref> For operations received from the replication stream (<ref refid="" kindref="compound">system.fabric.StateReplicator#getReplicationStream()</ref>) the sequence number is the same that the Primary replica that are receives from <ref refid="" kindref="compound">system.fabric.StateReplicator#replicateAsync(OperationData, SequenceNumber, system.fabric.CancellationToken)</ref> method. </p>
  syntax: *o1
- uid: system.fabric._operation_data
  parent: system.fabric
  href: system.fabric._operation_data.yml
  name: OperationData
  nameWithType: OperationData
  fullName: system.fabric.OperationData
  type: Class
  syntax:
    content: public class OperationData
- uid: system.fabric._fabric_replicator
  parent: system.fabric
  href: system.fabric._fabric_replicator.yml
  name: FabricReplicator
  nameWithType: FabricReplicator
  fullName: system.fabric.FabricReplicator
  type: Class
  summary: >-
    <p>Replicates state for high availability and reliability. </p>

    <p>

      <bold>Remarks:</bold>Provides the default implementation of the <xref href="system.fabric._state_replicator" data-throw-if-not-resolved="false"></xref>, <xref href="system.fabric._replicator" data-throw-if-not-resolved="false"></xref>, and <xref href="system.fabric._primary_replicator" data-throw-if-not-resolved="false"></xref> interfaces, which user services can use, along with their implementation of the <xref href="system.fabric._state_provider" data-throw-if-not-resolved="false"></xref> interface. An instance of the <ref refid="" kindref="compound">system.fabric.FabricReplicator</ref> class is obtained via the <xref href="system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)" data-throw-if-not-resolved="false"></xref> method, which can be cast to <xref href="system.fabric._state_replicator" data-throw-if-not-resolved="false"></xref> for use. </p>
  syntax:
    content: public class FabricReplicator implements Replicator
- uid: system.fabric._replicator_settings.isRequireServiceAck()
  parent: system.fabric._replicator_settings
  href: system.fabric._replicator_settings.yml
  name: isRequireServiceAck()
  nameWithType: ReplicatorSettings.isRequireServiceAck()
  fullName: boolean system.fabric.ReplicatorSettings.isRequireServiceAck()
  type: Method
  summary: >-
    <p>Prevents the optimistic acknowledgment of operations in non-persistent services by requiring that the service calls <xref href="system.fabric._operation.acknowledge()" data-throw-if-not-resolved="false"></xref> before it pumps the next operation.</p>

    <p>

      <bold>Remarks:</bold>Non-persistent services which require explicit acknowledgment can set this property to True in order to prevent optimistic acknowledgment of the operations by the <xref href="system.fabric._replicator" data-throw-if-not-resolved="false"></xref>. This setting has no effect for persistent services. The default value is false. </p>
  syntax:
    content: public boolean isRequireServiceAck()
    return:
      type: 4fc6e284
      description: <p>true if the optimistic acknowledgment of operations in non-persistent services;otherwise, false. </p>
