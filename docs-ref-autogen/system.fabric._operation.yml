### YamlMime:ManagedReference
items:
- uid: system.fabric._operation
  id: _operation
  parent: system.fabric
  children:
  - system.fabric._operation.acknowledge()
  - system.fabric._operation.getAtomicGroupId()
  - system.fabric._operation.getData()
  - system.fabric._operation.getOperationType()
  - system.fabric._operation.getSequenceNumber()
  href: system.fabric._operation.yml
  langs:
  - java
  name: Operation
  nameWithType: Operation
  fullName: system.fabric.Operation
  type: Interface
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
    startLine: 16
  package: system.fabric
  summary: "<p>\r\n  <b>Remarks:</b>\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.Operation</xref> is the base interface that describes state changes that are delivered to a Secondary replica. They contain the <xref uid=\"system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator#replicateAsync(OperationData, SequenceNumber, system.fabric.CancellationToken)</xref> and the sequence number and other identifying information. </p>"
  syntax:
    content: public interface Operation
- uid: system.fabric._operation.acknowledge()
  id: acknowledge()
  parent: system.fabric._operation
  href: system.fabric._operation.yml
  langs:
  - java
  name: acknowledge()
  nameWithType: Operation.acknowledge()
  fullName: system.fabric.Operation.acknowledge()
  overload: system.fabric._operation.acknowledge*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
    startLine: 77
  package: system.fabric
  summary: "<p>Acknowledges that this operation has been successfully applied at the Secondary replica. </p>\r\n<p>\r\n  <b>Remarks:</b>Services should call this method when they have obtained an <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.Operation</xref> from the replicator and successfully applied it to their local store. For persisted services, calling this method is mandatory because the <xref uid=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\">system.fabric.FabricReplicator</xref> does not release additional objects that implement <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.Operation</xref>. For volatile services, the replicator implicitly acknowledges operations when they are received unless they are configured otherwise by setting the value <xref uid=\"system.fabric._replicator_settings.isRequireServiceAck()\" data-throw-if-not-resolved=\"false\">system.fabric.ReplicatorSettings#isRequireServiceAck()</xref> to true. An operation must be acknowledged by a quorum of replicas before the Primary replica receives the <xref uid=\"system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator#replicateAsync(OperationData, SequenceNumber, system.fabric.CancellationToken)</xref> operation complete responses. </p>"
  syntax:
    content: public void acknowledge()
- uid: system.fabric._operation.getAtomicGroupId()
  id: getAtomicGroupId()
  parent: system.fabric._operation
  href: system.fabric._operation.yml
  langs:
  - java
  name: getAtomicGroupId()
  nameWithType: Operation.getAtomicGroupId()
  fullName: system.fabric.Operation.getAtomicGroupId()
  overload: system.fabric._operation.getAtomicGroupId*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
    startLine: 52
  package: system.fabric
  summary: "<p>Identifies the atomic group, if this object that implements <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.Operation</xref> is a part of an atomic group. Atomic groups are only available when a service is a part of service group.</p>\r\n<p></p>"
  syntax:
    content: public long getAtomicGroupId()
    return:
      type: 0364520f
      description: <p>Returns long. </p>
- uid: system.fabric._operation.getData()
  id: getData()
  parent: system.fabric._operation
  href: system.fabric._operation.yml
  langs:
  - java
  name: getData()
  nameWithType: Operation.getData()
  fullName: system.fabric.Operation.getData()
  overload: system.fabric._operation.getData*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
    startLine: 59
  package: system.fabric
  summary: "<p>Gets the <xref uid=\"system.fabric._operation_data\" data-throw-if-not-resolved=\"false\">system.fabric.OperationData</xref> that are provided by the Primary replica.</p>\r\n<p></p>"
  syntax:
    content: public OperationData getData()
    return:
      type: system.fabric._operation_data
      description: <p>Returns <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">system.fabric.OperationData</xref>. </p>
- uid: system.fabric._operation.getOperationType()
  id: getOperationType()
  parent: system.fabric._operation
  href: system.fabric._operation.yml
  langs:
  - java
  name: getOperationType()
  nameWithType: Operation.getOperationType()
  fullName: system.fabric.Operation.getOperationType()
  overload: system.fabric._operation.getOperationType*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
    startLine: 28
  package: system.fabric
  summary: "<p>Gets the type of this operation.</p>\r\n<p>\r\n  <b>Remarks:</b>The <xref uid=\"system.fabric._operation_type\" data-throw-if-not-resolved=\"false\">system.fabric.OperationType</xref> indicates the type of operation. \"Normal\" operations are those operations that are sent by non-service grouped services as part of either the copy or replication streams. Other types of operations represent control operations that are specific to service groups. </p>"
  syntax:
    content: public OperationType getOperationType()
    return:
      type: system.fabric._operation_type
      description: <p>Returns <xref uid="system.fabric._operation_type" data-throw-if-not-resolved="false">system.fabric.OperationType</xref>. </p>
- uid: system.fabric._operation.getSequenceNumber()
  id: getSequenceNumber()
  parent: system.fabric._operation
  href: system.fabric._operation.yml
  langs:
  - java
  name: getSequenceNumber()
  nameWithType: Operation.getSequenceNumber()
  fullName: system.fabric.Operation.getSequenceNumber()
  overload: system.fabric._operation.getSequenceNumber*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Operation.java
    startLine: 43
  package: system.fabric
  summary: "<p>Gets the sequence number of this operation.</p>\r\n<p>\r\n  <b>Remarks:</b>The sequence number is provided as a part of the <xref uid=\"system.fabric._operation.getSequenceNumber()\" data-throw-if-not-resolved=\"false\">system.fabric.Operation#getSequenceNumber()</xref> For operations received from the replication stream (<xref uid=\"system.fabric._state_replicator.getReplicationStream()\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator#getReplicationStream()</xref>) the sequence number is the same that the Primary replica that are receives from <xref uid=\"system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\">system.fabric.StateReplicator#replicateAsync(OperationData, SequenceNumber, system.fabric.CancellationToken)</xref> method. </p>"
  syntax: &o1
    content: public long getSequenceNumber()
    return:
      type: 0364520f
      description: <p>Returns long. </p>
references:
- uid: system.fabric._operation.getOperationType*
  name: getOperationType
  nameWithType: Operation.getOperationType
  fullName: system.fabric.Operation.getOperationType
  package: system.fabric
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: system.fabric._operation.getSequenceNumber*
  name: getSequenceNumber
  nameWithType: Operation.getSequenceNumber
  fullName: system.fabric.Operation.getSequenceNumber
  package: system.fabric
- uid: system.fabric._operation.getAtomicGroupId*
  name: getAtomicGroupId
  nameWithType: Operation.getAtomicGroupId
  fullName: system.fabric.Operation.getAtomicGroupId
  package: system.fabric
- uid: system.fabric._operation.getData*
  name: getData
  nameWithType: Operation.getData
  fullName: system.fabric.Operation.getData
  package: system.fabric
- uid: system.fabric._operation.acknowledge*
  name: acknowledge
  nameWithType: Operation.acknowledge
  fullName: system.fabric.Operation.acknowledge
  package: system.fabric
- uid: system.fabric.interop._j_operation
- uid: system.fabric._operation_type
  parent: system.fabric
  href: system.fabric._operation_type.yml
  name: OperationType
  nameWithType: OperationType
  fullName: system.fabric.OperationType
  type: Enum
  summary: <p>Specifies the type of operation that is received via the copy or replication stream. </p>
  syntax:
    content: public enum OperationType
- uid: system.fabric._operation.getSequenceNumber()
  parent: system.fabric._operation
  href: system.fabric._operation.yml
  name: getSequenceNumber()
  nameWithType: Operation.getSequenceNumber()
  fullName: system.fabric.Operation.getSequenceNumber()
  type: Method
  summary: >-
    <p>Gets the sequence number of this operation.</p>

    <p>

      <b>Remarks:</b>The sequence number is provided as a part of the <xref uid="system.fabric._operation.getSequenceNumber()" data-throw-if-not-resolved="false">system.fabric.Operation#getSequenceNumber()</xref> For operations received from the replication stream (<xref uid="system.fabric._state_replicator.getReplicationStream()" data-throw-if-not-resolved="false">system.fabric.StateReplicator#getReplicationStream()</xref>) the sequence number is the same that the Primary replica that are receives from <xref uid="system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false">system.fabric.StateReplicator#replicateAsync(OperationData, SequenceNumber, system.fabric.CancellationToken)</xref> method. </p>
  syntax: *o1
- uid: system.fabric._state_replicator.getReplicationStream()
  parent: system.fabric._state_replicator
  href: system.fabric._state_replicator.yml
  name: getReplicationStream()
  nameWithType: StateReplicator.getReplicationStream()
  fullName: system.fabric.StateReplicator.getReplicationStream()
  type: Method
  summary: <p>Gets replication stream. </p>
  syntax:
    content: public OperationStream getReplicationStream()
    return:
      type: system.fabric._operation_stream
      description: <p>The ReplicationStream implements <xref uid="system.fabric._operation_stream" data-throw-if-not-resolved="false">OperationStream</xref>. The ReplicationStream contains <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref> objects that implement <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Operation</xref>. The objects are provided by the Primary replica via <xref uid="system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false">StateReplicator#replicateAsync(OperationData, SequenceNumber, CancellationToken)</xref>. Generally a Secondary replica should send <xref uid="system.fabric._operation_stream.getOperationAsync(CancellationToken)" data-throw-if-not-resolved="false">OperationStream#getOperationAsync(CancellationToken)</xref>. Although Service Fabric does not require services to do so, generally services should transfer all <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref> objects out of the copy stream first, and then transfer operations out of the replication stream. The transfer from both copies in parallel is supported but increases the complexity of applying state updates correctly and is recommended only for advanced services. The stream is empty when the returned <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Operation</xref> method is null. </p>
- uid: system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)
  parent: system.fabric._state_replicator
  href: system.fabric._state_replicator.yml
  name: replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)
  nameWithType: StateReplicator.replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)
  fullName: system.fabric.StateReplicator.replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)
  type: Method
  summary: <p>Replicates state changes from Primary replica to the Secondary replicas and receives a quorum acknowledgement that those state changes have been applied. </p>
  syntax:
    content: public CompletableFuture<SequenceNumber> replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)
    parameters:
    - id: operationData
      type: system.fabric._operation_data
      description: <p>Represents the state change that the Primary replica wants to replicate. </p>
    - id: sequenceNumber
      type: system.fabric._sequence_number
      description: <p>Long, the LSN of the operation. Note that this is the same value which is returned by the task. Providing it as an out parameter is useful for services which want to prepare the local write to commit when the task finishes. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: <p>A write quorum of replicas that have been lost. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    return:
      type: 9cdf14d0system.fabric._sequence_numbera08ddfce
      description: <p>Returns completable future of type long, the LSN of the operation. </p>
- uid: system.fabric._operation_data
  parent: system.fabric
  href: system.fabric._operation_data.yml
  name: OperationData
  nameWithType: OperationData
  fullName: system.fabric.OperationData
  type: Class
  syntax:
    content: public class OperationData
- uid: system.fabric._fabric_replicator
  parent: system.fabric
  href: system.fabric._fabric_replicator.yml
  name: FabricReplicator
  nameWithType: FabricReplicator
  fullName: system.fabric.FabricReplicator
  type: Class
  summary: >-
    <p>Replicates state for high availability and reliability. </p>

    <p>

      <b>Remarks:</b>Provides the default implementation of the <xref uid="system.fabric._state_replicator" data-throw-if-not-resolved="false">system.fabric.StateReplicator</xref>, <xref uid="system.fabric._replicator" data-throw-if-not-resolved="false">system.fabric.Replicator</xref>, and <xref uid="system.fabric._primary_replicator" data-throw-if-not-resolved="false">system.fabric.PrimaryReplicator</xref> interfaces, which user services can use, along with their implementation of the <xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">system.fabric.StateProvider</xref> interface. An instance of the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref> class is obtained via the <xref uid="system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)" data-throw-if-not-resolved="false">system.fabric.StatefulServicePartition#createReplicator( system.fabric.StateProvider, system.fabric.ReplicatorSettings)</xref> method, which can be cast to <xref uid="system.fabric._state_replicator" data-throw-if-not-resolved="false">system.fabric.StateReplicator</xref> for use. </p>
  syntax:
    content: public class FabricReplicator implements Replicator
- uid: system.fabric._replicator_settings.isRequireServiceAck()
  parent: system.fabric._replicator_settings
  href: system.fabric._replicator_settings.yml
  name: isRequireServiceAck()
  nameWithType: ReplicatorSettings.isRequireServiceAck()
  fullName: system.fabric.ReplicatorSettings.isRequireServiceAck()
  type: Method
  summary: >-
    <p>Prevents the optimistic acknowledgment of operations in non-persistent services by requiring that the service calls <xref uid="system.fabric._operation.acknowledge()" data-throw-if-not-resolved="false">system.fabric.Operation#acknowledge()</xref> before it pumps the next operation.</p>

    <p>

      <b>Remarks:</b>Non-persistent services which require explicit acknowledgment can set this property to True in order to prevent optimistic acknowledgment of the operations by the Replicator. This setting has no effect for persistent services. The default value is false. </p>
  syntax:
    content: public boolean isRequireServiceAck()
    return:
      type: 4fc6e284
      description: <p>true if the optimistic acknowledgment of operations in non-persistent services;otherwise, false. </p>
