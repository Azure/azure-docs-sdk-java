### YamlMime:JavaType
uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
name: "CryptographyAsyncClient"
nameWithType: "CryptographyAsyncClient"
summary: "The <xref uid=\"com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CryptographyAsyncClient\"></xref> provides asynchronous methods to perform cryptographic operations using asymmetric and symmetric keys."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class CryptographyAsyncClient"
methods:
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.decrypt(com.azure.security.keyvault.keys.cryptography.models.DecryptParameters)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.decrypt(DecryptParameters decryptParameters)"
  name: "decrypt(DecryptParameters decryptParameters)"
  nameWithType: "CryptographyAsyncClient.decrypt(DecryptParameters decryptParameters)"
  summary: "Decrypts a single block of encrypted data using the configured key and specified algorithm."
  parameters:
  - description: "The parameters to use in the decryption operation. Microsoft recommends you not use CBC\n without first ensuring the integrity of the ciphertext using an HMAC, for example.\n See https://docs.microsoft.com/dotnet/standard/security/vulnerabilities-cbc-mode for more information."
    name: "decryptParameters"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.DecryptParameters?alt=com.azure.security.keyvault.keys.cryptography.models.DecryptParameters&text=DecryptParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DecryptResult> decrypt(DecryptParameters decryptParameters)"
  desc: "Decrypts a single block of encrypted data using the configured key and specified algorithm. Note that only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The decrypt operation is supported for both asymmetric and symmetric keys. This operation requires the `keys/decrypt` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"encryption algorithm\"></xref> indicates the type of algorithm to use for decrypting the specified encrypted content. Possible values for asymmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA1_5\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP_256\"></xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBCPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC_HS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBC-HS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128GCM\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBCPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC_HS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBC-HS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192GCM\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC_HS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBC-HS512\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256GCM\"></xref>.\n\n**Code Samples**\n\nDecrypts the encrypted content. Subscribes to the call asynchronously and prints out the decrypted content details when a response has been received.\n\n```java\nbyte[] ciphertextBytes = new byte[100];\n new Random(0x1234567L).nextBytes(ciphertextBytes);\n byte[] iv = {\n     (byte) 0x1a, (byte) 0xf3, (byte) 0x8c, (byte) 0x2d, (byte) 0xc2, (byte) 0xb9, (byte) 0x6f, (byte) 0xfd,\n     (byte) 0xd8, (byte) 0x66, (byte) 0x94, (byte) 0x09, (byte) 0x23, (byte) 0x41, (byte) 0xbc, (byte) 0x04\n };\n\n DecryptParameters decryptParameters = DecryptParameters.createA128CbcParameters(ciphertextBytes, iv);\n\n cryptographyAsyncClient.decrypt(decryptParameters)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(decryptResult ->\n         System.out.printf(\"Received decrypted content of length: %d.%n\", decryptResult.getPlainText().length));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the decrypted blob."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.cryptography.models.DecryptResult?alt=com.azure.security.keyvault.keys.cryptography.models.DecryptResult&text=DecryptResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.decrypt(EncryptionAlgorithm algorithm, byte[] ciphertext)"
  name: "decrypt(EncryptionAlgorithm algorithm, byte[] ciphertext)"
  nameWithType: "CryptographyAsyncClient.decrypt(EncryptionAlgorithm algorithm, byte[] ciphertext)"
  summary: "Decrypts a single block of encrypted data using the configured key and specified algorithm."
  parameters:
  - description: "The algorithm to be used for decryption."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm&text=EncryptionAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The content to be decrypted. Microsoft recommends you not use CBC without first ensuring the\n integrity of the ciphertext using an HMAC, for example.\n See https://docs.microsoft.com/dotnet/standard/security/vulnerabilities-cbc-mode for more information."
    name: "ciphertext"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public Mono<DecryptResult> decrypt(EncryptionAlgorithm algorithm, byte[] ciphertext)"
  desc: "Decrypts a single block of encrypted data using the configured key and specified algorithm. Note that only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The decrypt operation is supported for both asymmetric and symmetric keys. This operation requires the `keys/decrypt` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"encryption algorithm\"></xref> indicates the type of algorithm to use for decrypting the specified encrypted content. Possible values for asymmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA1_5\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP_256\"></xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBCPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC_HS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBC-HS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128GCM\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBCPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC_HS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBC-HS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192GCM\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC_HS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBC-HS512\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256GCM\"></xref>.\n\n**Code Samples**\n\nDecrypts the encrypted content. Subscribes to the call asynchronously and prints out the decrypted content details when a response has been received.\n\n```java\nbyte[] ciphertext = new byte[100];\n new Random(0x1234567L).nextBytes(ciphertext);\n\n cryptographyAsyncClient.decrypt(EncryptionAlgorithm.RSA_OAEP, ciphertext)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(decryptResult ->\n         System.out.printf(\"Received decrypted content of length: %d%n\", decryptResult.getPlainText().length));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the decrypted blob."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.cryptography.models.DecryptResult?alt=com.azure.security.keyvault.keys.cryptography.models.DecryptResult&text=DecryptResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptParameters)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.encrypt(EncryptParameters encryptParameters)"
  name: "encrypt(EncryptParameters encryptParameters)"
  nameWithType: "CryptographyAsyncClient.encrypt(EncryptParameters encryptParameters)"
  summary: "Encrypts an arbitrary sequence of bytes using the configured key."
  parameters:
  - description: "The parameters to use in the encryption operation."
    name: "encryptParameters"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.EncryptParameters?alt=com.azure.security.keyvault.keys.cryptography.models.EncryptParameters&text=EncryptParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<EncryptResult> encrypt(EncryptParameters encryptParameters)"
  desc: "Encrypts an arbitrary sequence of bytes using the configured key. Note that the encrypt operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The encrypt operation is supported for both symmetric keys and asymmetric keys. In case of asymmetric keys, the public portion of the key is used for encryption. This operation requires the `keys/encrypt` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"encryption algorithm\"></xref> indicates the type of algorithm to use for encrypting the specified `plaintext`. Possible values for asymmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA1_5\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP_256\"></xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBCPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC_HS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBC-HS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128GCM\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBCPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC_HS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBC-HS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192GCM\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC_HS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBC-HS512\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256GCM\"></xref>.\n\n**Code Samples**\n\nEncrypts the content. Subscribes to the call asynchronously and prints out the encrypted content details when a response has been received.\n\n```java\nbyte[] plaintextBytes = new byte[100];\n new Random(0x1234567L).nextBytes(plaintextBytes);\n byte[] iv = {\n     (byte) 0x1a, (byte) 0xf3, (byte) 0x8c, (byte) 0x2d, (byte) 0xc2, (byte) 0xb9, (byte) 0x6f, (byte) 0xfd,\n     (byte) 0xd8, (byte) 0x66, (byte) 0x94, (byte) 0x09, (byte) 0x23, (byte) 0x41, (byte) 0xbc, (byte) 0x04\n };\n\n EncryptParameters encryptParameters = EncryptParameters.createA128CbcParameters(plaintextBytes, iv);\n\n cryptographyAsyncClient.encrypt(encryptParameters)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(encryptResult ->\n         System.out.printf(\"Received encrypted content of length: %d, with algorithm: %s.%n\",\n             encryptResult.getCipherText().length, encryptResult.getAlgorithm().toString()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EncryptResult\"></xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptResult.getCipherText()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"cipher text\"></xref>\n contains the encrypted content."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.cryptography.models.EncryptResult?alt=com.azure.security.keyvault.keys.cryptography.models.EncryptResult&text=EncryptResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.encrypt(EncryptionAlgorithm algorithm, byte[] plaintext)"
  name: "encrypt(EncryptionAlgorithm algorithm, byte[] plaintext)"
  nameWithType: "CryptographyAsyncClient.encrypt(EncryptionAlgorithm algorithm, byte[] plaintext)"
  summary: "Encrypts an arbitrary sequence of bytes using the configured key."
  parameters:
  - description: "The algorithm to be used for encryption."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm&text=EncryptionAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The content to be encrypted."
    name: "plaintext"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public Mono<EncryptResult> encrypt(EncryptionAlgorithm algorithm, byte[] plaintext)"
  desc: "Encrypts an arbitrary sequence of bytes using the configured key. Note that the encrypt operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The encrypt operation is supported for both symmetric keys and asymmetric keys. In case of asymmetric keys, the public portion of the key is used for encryption. This operation requires the `keys/encrypt` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"encryption algorithm\"></xref> indicates the type of algorithm to use for encrypting the specified `plaintext`. Possible values for asymmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA1_5\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP_256\"></xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBCPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC_HS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128CBC-HS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128GCM\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBCPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC_HS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192CBC-HS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192GCM\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBC\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBCPAD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBPAD\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC_HS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256CBC-HS512\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256GCM\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256GCM\"></xref>.\n\n**Code Samples**\n\nEncrypts the content. Subscribes to the call asynchronously and prints out the encrypted content details when a response has been received.\n\n```java\nbyte[] plaintext = new byte[100];\n new Random(0x1234567L).nextBytes(plaintext);\n\n cryptographyAsyncClient.encrypt(EncryptionAlgorithm.RSA_OAEP, plaintext)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(encryptResult ->\n         System.out.printf(\"Received encrypted content of length: %d, with algorithm: %s.%n\",\n             encryptResult.getCipherText().length, encryptResult.getAlgorithm().toString()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EncryptResult\"></xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptResult.getCipherText()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"cipher text\"></xref>\n contains the encrypted content."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.cryptography.models.EncryptResult?alt=com.azure.security.keyvault.keys.cryptography.models.EncryptResult&text=EncryptResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKey()"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKey()"
  name: "getKey()"
  nameWithType: "CryptographyAsyncClient.getKey()"
  summary: "Gets the public part of the configured key."
  syntax: "public Mono<KeyVaultKey> getKey()"
  desc: "Gets the public part of the configured key. The get key operation is applicable to all key types and it requires the `keys/get` permission for non-local operations.\n\n**Code Samples**\n\nGets the configured key in the client. Subscribes to the call asynchronously and prints out the returned key details when a response has been received.\n\n```java\ncryptographyAsyncClient.getKey()\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(key ->\n         System.out.printf(\"Key returned with name: %s, and id: %s.%n\", key.getName(), key.getId()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the requested <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.models.KeyVaultKey?alt=com.azure.security.keyvault.keys.models.KeyVaultKey&text=KeyVaultKey\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKeyWithResponse()"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKeyWithResponse()"
  name: "getKeyWithResponse()"
  nameWithType: "CryptographyAsyncClient.getKeyWithResponse()"
  summary: "Gets the public part of the configured key."
  syntax: "public Mono<Response<KeyVaultKey>> getKeyWithResponse()"
  desc: "Gets the public part of the configured key. The get key operation is applicable to all key types and it requires the `keys/get` permission for non-local operations.\n\n**Code Samples**\n\nGets the configured key in the client. Subscribes to the call asynchronously and prints out the returned key details when a response has been received.\n\n```java\ncryptographyAsyncClient.getKeyWithResponse()\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(keyResponse ->\n         System.out.printf(\"Key returned with name: %s, and id: %s.%n\", keyResponse.getValue().getName(),\n             keyResponse.getValue().getId()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the\n requested <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.models.KeyVaultKey?alt=com.azure.security.keyvault.keys.models.KeyVaultKey&text=KeyVaultKey\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.sign(SignatureAlgorithm algorithm, byte[] digest)"
  name: "sign(SignatureAlgorithm algorithm, byte[] digest)"
  nameWithType: "CryptographyAsyncClient.sign(SignatureAlgorithm algorithm, byte[] digest)"
  summary: "Creates a signature from a digest using the configured key."
  parameters:
  - description: "The algorithm to use for signing."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm&text=SignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The content from which signature is to be created."
    name: "digest"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public Mono<SignResult> sign(SignatureAlgorithm algorithm, byte[] digest)"
  desc: "Creates a signature from a digest using the configured key. The sign operation supports both asymmetric and symmetric keys. This operation requires the `keys/sign` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"signature algorithm\"></xref> indicates the type of algorithm to use to create the signature from the digest. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"E384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES246K\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>\n\n**Code Samples**\n\nSings the digest. Subscribes to the call asynchronously and prints out the signature details when a response has been received.\n\n```java\nbyte[] data = new byte[100];\n new Random(0x1234567L).nextBytes(data);\n MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n md.update(data);\n byte[] digest = md.digest();\n\n cryptographyAsyncClient.sign(SignatureAlgorithm.ES256, digest)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(signResult ->\n         System.out.printf(\"Received signature of length: %d, with algorithm: %s.%n\",\n             signResult.getSignature().length, signResult.getAlgorithm()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SignResult\"></xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult.getSignature()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"signature\"></xref> contains\n the created signature."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignResult?alt=com.azure.security.keyvault.keys.cryptography.models.SignResult&text=SignResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.signData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.signData(SignatureAlgorithm algorithm, byte[] data)"
  name: "signData(SignatureAlgorithm algorithm, byte[] data)"
  nameWithType: "CryptographyAsyncClient.signData(SignatureAlgorithm algorithm, byte[] data)"
  summary: "Creates a signature from the raw data using the configured key."
  parameters:
  - description: "The algorithm to use for signing."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm&text=SignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The content from which signature is to be created."
    name: "data"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public Mono<SignResult> signData(SignatureAlgorithm algorithm, byte[] data)"
  desc: "Creates a signature from the raw data using the configured key. The sign data operation supports both asymmetric and symmetric keys. This operation requires the `keys/sign` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"signature algorithm\"></xref> indicates the type of algorithm to use to sign the digest. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"E384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES246K\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>\n\n**Code Samples**\n\nSigns the raw data. Subscribes to the call asynchronously and prints out the signature details when a response has been received.\n\n```java\nbyte[] data = new byte[100];\n new Random(0x1234567L).nextBytes(data);\n\n cryptographyAsyncClient.sign(SignatureAlgorithm.ES256, data)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(signResult ->\n         System.out.printf(\"Received signature of length: %d, with algorithm: %s.%n\",\n             signResult.getSignature().length, signResult.getAlgorithm()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SignResult\"></xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult.getSignature()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"signature\"></xref> contains\n the created signature."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignResult?alt=com.azure.security.keyvault.keys.cryptography.models.SignResult&text=SignResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey)"
  name: "unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey)"
  nameWithType: "CryptographyAsyncClient.unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey)"
  summary: "Unwraps a symmetric key using the configured key that was initially used for wrapping that key."
  parameters:
  - description: "The encryption algorithm to use for wrapping the key."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm&text=KeyWrapAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The encrypted key content to unwrap."
    name: "encryptedKey"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public Mono<UnwrapResult> unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey)"
  desc: "Unwraps a symmetric key using the configured key that was initially used for wrapping that key. This operation is the reverse of the wrap operation. The unwrap operation supports asymmetric and symmetric keys to unwrap. This operation requires the `keys/unwrapKey` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"wrap algorithm\"></xref> indicates the type of algorithm to use for unwrapping the specified encrypted key content. Possible values for asymmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA1_5\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP_256\"></xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.A128KW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128KW\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.A192KW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192KW\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.A256KW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256KW\"></xref>.\n\n**Code Samples**\n\nUnwraps the key content. Subscribes to the call asynchronously and prints out the unwrapped key details when a response has been received.\n\n```java\nbyte[] keyToWrap = new byte[100];\n new Random(0x1234567L).nextBytes(key);\n\n cryptographyAsyncClient.wrapKey(KeyWrapAlgorithm.RSA_OAEP, keyToWrap)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(wrapResult ->\n         cryptographyAsyncClient.unwrapKey(KeyWrapAlgorithm.RSA_OAEP, wrapResult.getEncryptedKey())\n             .subscribe(keyUnwrapResult ->\n                 System.out.printf(\"Received key of length: %d.%n\", keyUnwrapResult.getKey().length)));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing an <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.UnwrapResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UnwrapResult\"></xref> whose <xref uid=\"UnwrapResult#getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"decrypted\n key\"></xref> contains the unwrapped key result."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.cryptography.models.UnwrapResult?alt=com.azure.security.keyvault.keys.cryptography.models.UnwrapResult&text=UnwrapResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  name: "verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  nameWithType: "CryptographyAsyncClient.verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  summary: "Verifies a signature using the configured key."
  parameters:
  - description: "The algorithm to use for signing."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm&text=SignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The content from which signature was created."
    name: "digest"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "The signature to be verified."
    name: "signature"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public Mono<VerifyResult> verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  desc: "Verifies a signature using the configured key. The verify operation supports both symmetric keys and asymmetric keys. In case of asymmetric keys public portion of the key is used to verify the signature. This operation requires the `keys/verify` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"signature algorithm\"></xref> indicates the type of algorithm to use to verify the signature. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"E384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES246K\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>\n\n**Code Samples**\n\nVerifies the signature against the specified digest. Subscribes to the call asynchronously and prints out the verification details when a response has been received.\n\n```java\nbyte[] myData = new byte[100];\n new Random(0x1234567L).nextBytes(myData);\n MessageDigest messageDigest = MessageDigest.getInstance(\"SHA-256\");\n messageDigest.update(myData);\n byte[] myDigest = messageDigest.digest();\n\n // A signature can be obtained from the SignResult returned by the CryptographyAsyncClient.sign() operation.\n cryptographyAsyncClient.verify(SignatureAlgorithm.ES256, myDigest, signature)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(verifyResult ->\n         System.out.printf(\"Verification status: %s.%n\", verifyResult.isValid()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.VerifyResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"VerifyResult\"></xref>\n <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.VerifyResult.isValid()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"indicating the signature verification result\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.cryptography.models.VerifyResult?alt=com.azure.security.keyvault.keys.cryptography.models.VerifyResult&text=VerifyResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verifyData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature)"
  name: "verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature)"
  nameWithType: "CryptographyAsyncClient.verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature)"
  summary: "Verifies a signature against the raw data using the configured key."
  parameters:
  - description: "The algorithm to use for signing."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm&text=SignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The raw content against which signature is to be verified."
    name: "data"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "The signature to be verified."
    name: "signature"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public Mono<VerifyResult> verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature)"
  desc: "Verifies a signature against the raw data using the configured key. The verify operation supports both symmetric keys and asymmetric keys. In case of asymmetric keys public portion of the key is used to verify the signature. This operation requires the `keys/verify` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"signature algorithm\"></xref> indicates the type of algorithm to use to verify the signature. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"E384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES246K\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>\n\n**Code Samples**\n\nVerifies the signature against the raw data. Subscribes to the call asynchronously and prints out the verification details when a response has been received.\n\n```java\nbyte[] myData = new byte[100];\n new Random(0x1234567L).nextBytes(myData);\n\n // A signature can be obtained from the SignResult returned by the CryptographyAsyncClient.sign() operation.\n cryptographyAsyncClient.verify(SignatureAlgorithm.ES256, myData, signature)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(verifyResult ->\n         System.out.printf(\"Verification status: %s.%n\", verifyResult.isValid()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.VerifyResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"VerifyResult\"></xref>\n <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.VerifyResult.isValid()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"indicating the signature verification result\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.cryptography.models.VerifyResult?alt=com.azure.security.keyvault.keys.cryptography.models.VerifyResult&text=VerifyResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.wrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  name: "wrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  nameWithType: "CryptographyAsyncClient.wrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  summary: "Wraps a symmetric key using the configured key."
  parameters:
  - description: "The encryption algorithm to use for wrapping the key."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm&text=KeyWrapAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The key content to be wrapped."
    name: "key"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public Mono<WrapResult> wrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  desc: "Wraps a symmetric key using the configured key. The wrap operation supports wrapping a symmetric key with both symmetric and asymmetric keys. This operation requires the `keys/wrapKey` permission for non-local operations.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"wrap algorithm\"></xref> indicates the type of algorithm to use for wrapping the specified key content. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA1_5\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RSA_OAEP_256\"></xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128KW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A128KW\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192KW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A192KW\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256KW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"A256KW\"></xref>.\n\n**Code Samples**\n\nWraps the key content. Subscribes to the call asynchronously and prints out the wrapped key details when a response has been received.\n\n```java\nbyte[] key = new byte[100];\n new Random(0x1234567L).nextBytes(key);\n\n cryptographyAsyncClient.wrapKey(KeyWrapAlgorithm.RSA_OAEP, key)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(wrapResult ->\n         System.out.printf(\"Received encrypted key of length: %d, with algorithm: %s.%n\",\n             wrapResult.getEncryptedKey().length, wrapResult.getAlgorithm().toString()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.WrapResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"WrapResult\"></xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.WrapResult.getEncryptedKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"encrypted key\"></xref>\n contains the wrapped key result."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.cryptography.models.WrapResult?alt=com.azure.security.keyvault.keys.cryptography.models.WrapResult&text=WrapResult\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "The <xref uid=\"com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CryptographyAsyncClient\"></xref> provides asynchronous methods to perform cryptographic operations using asymmetric and symmetric keys. The client supports encrypt, decrypt, wrap key, unwrap key, sign and verify operations using the configured key.\n\n**Samples to construct the sync client**\n\n```java\nCryptographyAsyncClient cryptographyAsyncClient = new CryptographyClientBuilder()\n     .keyIdentifier(\"<your-key-id>\")\n     .credential(new DefaultAzureCredentialBuilder().build())\n     .buildAsyncClient();\n```\n\n```java\nJsonWebKey jsonWebKey = new JsonWebKey().setId(\"SampleJsonWebKey\");\n CryptographyAsyncClient cryptographyAsyncClient = new CryptographyClientBuilder()\n     .jsonWebKey(jsonWebKey)\n     .buildAsyncClient();\n```"
metadata: {}
package: "com.azure.security.keyvault.keys.cryptography"
artifact: com.azure:azure-security-keyvault-keys:4.4.6
