### YamlMime:ManagedReference
items:
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  id: "CryptographyAsyncClient"
  parent: "com.azure.security.keyvault.keys.cryptography"
  children:
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.CryptographyAsyncClient(com.azure.security.keyvault.keys.models.JsonWebKey,com.azure.core.http.HttpPipeline,com.azure.security.keyvault.keys.cryptography.CryptographyServiceVersion)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.CryptographyAsyncClient(java.lang.String,com.azure.core.http.HttpPipeline,com.azure.security.keyvault.keys.cryptography.CryptographyServiceVersion)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.KEY_VAULT_SCOPE"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.SECRETS_COLLECTION"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getCryptographyServiceClient()"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKey()"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKeyId()"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKeyWithResponse()"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKeyWithResponse(com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getSecretKey()"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.key"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.setCryptographyServiceClient(com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.signData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.signData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verifyData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verifyData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])"
  - "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context)"
  langs:
  - "java"
  name: "CryptographyAsyncClient"
  nameWithType: "CryptographyAsyncClient"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  type: "Class"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "The CryptographyAsyncClient provides asynchronous methods to perform cryptographic operations using asymmetric and symmetric keys. The client supports encrypt, decrypt, wrap key, unwrap key, sign and verify operations using the configured key.\n\n**Samples to construct the sync client**\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.async.cryptographyclient.instantiation\\}"
  syntax:
    content: "public class CryptographyAsyncClient"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.CryptographyAsyncClient(com.azure.security.keyvault.keys.models.JsonWebKey,com.azure.core.http.HttpPipeline,com.azure.security.keyvault.keys.cryptography.CryptographyServiceVersion)"
  id: "CryptographyAsyncClient(com.azure.security.keyvault.keys.models.JsonWebKey,com.azure.core.http.HttpPipeline,com.azure.security.keyvault.keys.cryptography.CryptographyServiceVersion)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "CryptographyAsyncClient(JsonWebKey key, HttpPipeline pipeline, CryptographyServiceVersion version)"
  nameWithType: "CryptographyAsyncClient.CryptographyAsyncClient(JsonWebKey key, HttpPipeline pipeline, CryptographyServiceVersion version)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.CryptographyAsyncClient(JsonWebKey key, HttpPipeline pipeline, CryptographyServiceVersion version)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.CryptographyAsyncClient*"
  type: "Constructor"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Creates a CryptographyAsyncClient that uses `pipeline` to service requests"
  syntax:
    content: " CryptographyAsyncClient(JsonWebKey key, HttpPipeline pipeline, CryptographyServiceVersion version)"
    parameters:
    - id: "key"
      type: "com.azure.security.keyvault.keys.models.JsonWebKey"
      description: "the JsonWebKey to use for cryptography operations."
    - id: "pipeline"
      type: "com.azure.core.http.HttpPipeline"
      description: "HttpPipeline that the HTTP requests and responses flow through."
    - id: "version"
      type: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceVersion"
      description: "<xref uid=\"com.azure.security.keyvault.keys.cryptography.CryptographyServiceVersion\" data-throw-if-not-resolved=\"false\">CryptographyServiceVersion</xref> of the service to be used when making requests."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.CryptographyAsyncClient(java.lang.String,com.azure.core.http.HttpPipeline,com.azure.security.keyvault.keys.cryptography.CryptographyServiceVersion)"
  id: "CryptographyAsyncClient(java.lang.String,com.azure.core.http.HttpPipeline,com.azure.security.keyvault.keys.cryptography.CryptographyServiceVersion)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "CryptographyAsyncClient(String keyId, HttpPipeline pipeline, CryptographyServiceVersion version)"
  nameWithType: "CryptographyAsyncClient.CryptographyAsyncClient(String keyId, HttpPipeline pipeline, CryptographyServiceVersion version)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.CryptographyAsyncClient(String keyId, HttpPipeline pipeline, CryptographyServiceVersion version)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.CryptographyAsyncClient*"
  type: "Constructor"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Creates a CryptographyAsyncClient that uses `pipeline` to service requests"
  syntax:
    content: " CryptographyAsyncClient(String keyId, HttpPipeline pipeline, CryptographyServiceVersion version)"
    parameters:
    - id: "keyId"
      type: "java.lang.String"
      description: "THe Azure Key vault key identifier to use for cryptography operations."
    - id: "pipeline"
      type: "com.azure.core.http.HttpPipeline"
      description: "HttpPipeline that the HTTP requests and responses flow through."
    - id: "version"
      type: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceVersion"
      description: "<xref uid=\"com.azure.security.keyvault.keys.cryptography.CryptographyServiceVersion\" data-throw-if-not-resolved=\"false\">CryptographyServiceVersion</xref> of the service to be used when making requests."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.KEY_VAULT_SCOPE"
  id: "KEY_VAULT_SCOPE"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "KEY_VAULT_SCOPE"
  nameWithType: "CryptographyAsyncClient.KEY_VAULT_SCOPE"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.KEY_VAULT_SCOPE"
  type: "Field"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: "static final String KEY_VAULT_SCOPE"
    return:
      type: "java.lang.String"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.SECRETS_COLLECTION"
  id: "SECRETS_COLLECTION"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "SECRETS_COLLECTION"
  nameWithType: "CryptographyAsyncClient.SECRETS_COLLECTION"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.SECRETS_COLLECTION"
  type: "Field"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: "static final String SECRETS_COLLECTION"
    return:
      type: "java.lang.String"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])"
  id: "decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "decrypt(EncryptionAlgorithm algorithm, byte[] cipherText)"
  nameWithType: "CryptographyAsyncClient.decrypt(EncryptionAlgorithm algorithm, byte[] cipherText)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.decrypt(EncryptionAlgorithm algorithm, byte[] cipherText)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.decrypt*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Decrypts a single block of encrypted data using the configured key and specified algorithm. Note that only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The decrypt operation is supported for both asymmetric and symmetric keys. This operation requires the keys/decrypt permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm\" data-throw-if-not-resolved=\"false\">encryption algorithm</xref> indicates the type of algorithm to use for decrypting the specified encrypted content. Possible values for assymetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\">RSA1_5</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\">RSA_OAEP</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\">RSA_OAEP_256</xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC\" data-throw-if-not-resolved=\"false\">A128CBC</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC_HS256\" data-throw-if-not-resolved=\"false\">A128CBC-HS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC\" data-throw-if-not-resolved=\"false\">A192CBC</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC_HS384\" data-throw-if-not-resolved=\"false\">A192CBC-HS384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC\" data-throw-if-not-resolved=\"false\">A256CBC</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC_HS512\" data-throw-if-not-resolved=\"false\">A256CBC-HS512</xref>\n\n**Code Samples**\n\nDecrypts the encrypted content. Subscribes to the call asynchronously and prints out the decrypted content details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.decrypt\\#EncryptionAlgorithm-byte\\}"
  syntax:
    content: "public Mono<DecryptResult> decrypt(EncryptionAlgorithm algorithm, byte[] cipherText)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm"
      description: "The algorithm to be used for decryption."
    - id: "cipherText"
      type: "byte[]"
      description: "The content to be decrypted."
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.DecryptResult>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the decrypted blob."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context)"
  id: "decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "decrypt(EncryptionAlgorithm algorithm, byte[] cipherText, Context context)"
  nameWithType: "CryptographyAsyncClient.decrypt(EncryptionAlgorithm algorithm, byte[] cipherText, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.decrypt(EncryptionAlgorithm algorithm, byte[] cipherText, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.decrypt*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<DecryptResult> decrypt(EncryptionAlgorithm algorithm, byte[] cipherText, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm"
    - id: "cipherText"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.DecryptResult>"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])"
  id: "encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "encrypt(EncryptionAlgorithm algorithm, byte[] plaintext)"
  nameWithType: "CryptographyAsyncClient.encrypt(EncryptionAlgorithm algorithm, byte[] plaintext)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.encrypt(EncryptionAlgorithm algorithm, byte[] plaintext)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.encrypt*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Encrypts an arbitrary sequence of bytes using the configured key. Note that the encrypt operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The encrypt operation is supported for both symmetric keys and asymmetric keys. In case of asymmetric keys public portion of the key is used for encryption. This operation requires the keys/encrypt permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm\" data-throw-if-not-resolved=\"false\">encryption algorithm</xref> indicates the type of algorithm to use for encrypting the specified `plaintext`. Possible values for assymetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\">RSA1_5</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\">RSA_OAEP</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\">RSA_OAEP_256</xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC\" data-throw-if-not-resolved=\"false\">A128CBC</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A128CBC_HS256\" data-throw-if-not-resolved=\"false\">A128CBC-HS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC\" data-throw-if-not-resolved=\"false\">A192CBC</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A192CBC_HS384\" data-throw-if-not-resolved=\"false\">A192CBC-HS384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC\" data-throw-if-not-resolved=\"false\">A256CBC</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm.A256CBC_HS512\" data-throw-if-not-resolved=\"false\">A256CBC-HS512</xref>\n\n**Code Samples**\n\nEncrypts the content. Subscribes to the call asynchronously and prints out the encrypted content details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.encrypt\\#EncryptionAlgorithm-byte\\}"
  syntax:
    content: "public Mono<EncryptResult> encrypt(EncryptionAlgorithm algorithm, byte[] plaintext)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm"
      description: "The algorithm to be used for encryption."
    - id: "plaintext"
      type: "byte[]"
      description: "The content to be encrypted."
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.EncryptResult>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing a <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptResult\" data-throw-if-not-resolved=\"false\">EncryptResult</xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.EncryptResult.getCipherText()\" data-throw-if-not-resolved=\"false\">cipher text</xref>\n     contains the encrypted content."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context)"
  id: "encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, Context context)"
  nameWithType: "CryptographyAsyncClient.encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.encrypt*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<EncryptResult> encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm"
    - id: "plaintext"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.EncryptResult>"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getCryptographyServiceClient()"
  id: "getCryptographyServiceClient()"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "getCryptographyServiceClient()"
  nameWithType: "CryptographyAsyncClient.getCryptographyServiceClient()"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getCryptographyServiceClient()"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getCryptographyServiceClient*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " CryptographyServiceClient getCryptographyServiceClient()"
    return:
      type: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKey()"
  id: "getKey()"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "getKey()"
  nameWithType: "CryptographyAsyncClient.getKey()"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKey()"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Gets the public part of the configured key. The get key operation is applicable to all key types and it requires the `keys/get` permission.\n\n**Code Samples**\n\nGets the configured key in the client. Subscribes to the call asynchronously and prints out the returned key details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.cryptographyclient.getKey\\}"
  syntax:
    content: " Mono<KeyVaultKey> getKey()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.models.KeyVaultKey>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the requested <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\">key</xref>."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKeyId()"
  id: "getKeyId()"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "getKeyId()"
  nameWithType: "CryptographyAsyncClient.getKeyId()"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKeyId()"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKeyId*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<String> getKeyId()"
    return:
      type: "reactor.core.publisher.Mono<java.lang.String>"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKeyWithResponse()"
  id: "getKeyWithResponse()"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "getKeyWithResponse()"
  nameWithType: "CryptographyAsyncClient.getKeyWithResponse()"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKeyWithResponse()"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKeyWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Gets the public part of the configured key. The get key operation is applicable to all key types and it requires the `keys/get` permission.\n\n**Code Samples**\n\nGets the configured key in the client. Subscribes to the call asynchronously and prints out the returned key details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.async.cryptographyclient.getKeyWithResponse\\}"
  syntax:
    content: " Mono<Response<KeyVaultKey>> getKeyWithResponse()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the requested\n     <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\">key</xref>."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKeyWithResponse(com.azure.core.util.Context)"
  id: "getKeyWithResponse(com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "getKeyWithResponse(Context context)"
  nameWithType: "CryptographyAsyncClient.getKeyWithResponse(Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKeyWithResponse(Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKeyWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<Response<KeyVaultKey>> getKeyWithResponse(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>>"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getSecretKey()"
  id: "getSecretKey()"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "getSecretKey()"
  nameWithType: "CryptographyAsyncClient.getSecretKey()"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getSecretKey()"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getSecretKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<JsonWebKey> getSecretKey()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.models.JsonWebKey>"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.key"
  id: "key"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "key"
  nameWithType: "CryptographyAsyncClient.key"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.key"
  type: "Field"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " JsonWebKey key"
    return:
      type: "com.azure.security.keyvault.keys.models.JsonWebKey"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.setCryptographyServiceClient(com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient)"
  id: "setCryptographyServiceClient(com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "setCryptographyServiceClient(CryptographyServiceClient serviceClient)"
  nameWithType: "CryptographyAsyncClient.setCryptographyServiceClient(CryptographyServiceClient serviceClient)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.setCryptographyServiceClient(CryptographyServiceClient serviceClient)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.setCryptographyServiceClient*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " void setCryptographyServiceClient(CryptographyServiceClient serviceClient)"
    parameters:
    - id: "serviceClient"
      type: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])"
  id: "sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "sign(SignatureAlgorithm algorithm, byte[] digest)"
  nameWithType: "CryptographyAsyncClient.sign(SignatureAlgorithm algorithm, byte[] digest)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.sign(SignatureAlgorithm algorithm, byte[] digest)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.sign*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Creates a signature from a digest using the configured key. The sign operation supports both asymmetric and symmetric keys. This operation requires the keys/sign permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\">signature algorithm</xref> indicates the type of algorithm to use to create the signature from the digest. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\">ES256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\">E384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\">ES512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\">ES246K</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\">PS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\">RS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>\n\n**Code Samples**\n\nSings the digest. Subscribes to the call asynchronously and prints out the signature details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.sign\\#SignatureAlgorithm-byte\\}"
  syntax:
    content: "public Mono<SignResult> sign(SignatureAlgorithm algorithm, byte[] digest)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
      description: "The algorithm to use for signing."
    - id: "digest"
      type: "byte[]"
      description: "The content from which signature is to be created."
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.SignResult>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing a <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult\" data-throw-if-not-resolved=\"false\">SignResult</xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult.getSignature()\" data-throw-if-not-resolved=\"false\">signature</xref> contains\n     the created signature."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context)"
  id: "sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "sign(SignatureAlgorithm algorithm, byte[] digest, Context context)"
  nameWithType: "CryptographyAsyncClient.sign(SignatureAlgorithm algorithm, byte[] digest, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.sign(SignatureAlgorithm algorithm, byte[] digest, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.sign*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<SignResult> sign(SignatureAlgorithm algorithm, byte[] digest, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
    - id: "digest"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.SignResult>"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.signData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])"
  id: "signData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "signData(SignatureAlgorithm algorithm, byte[] data)"
  nameWithType: "CryptographyAsyncClient.signData(SignatureAlgorithm algorithm, byte[] data)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.signData(SignatureAlgorithm algorithm, byte[] data)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.signData*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Creates a signature from the raw data using the configured key. The sign data operation supports both asymmetric and symmetric keys. This operation requires the keys/sign permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\">signature algorithm</xref> indicates the type of algorithm to use to sign the digest. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\">ES256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\">E384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\">ES512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\">ES246K</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\">PS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\">RS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>\n\n**Code Samples**\n\nSigns the raw data. Subscribes to the call asynchronously and prints out the signature details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.signData\\#SignatureAlgorithm-byte\\}"
  syntax:
    content: "public Mono<SignResult> signData(SignatureAlgorithm algorithm, byte[] data)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
      description: "The algorithm to use for signing."
    - id: "data"
      type: "byte[]"
      description: "The content from which signature is to be created."
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.SignResult>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing a <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult\" data-throw-if-not-resolved=\"false\">SignResult</xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult.getSignature()\" data-throw-if-not-resolved=\"false\">signature</xref> contains\n     the created signature."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.signData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context)"
  id: "signData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "signData(SignatureAlgorithm algorithm, byte[] data, Context context)"
  nameWithType: "CryptographyAsyncClient.signData(SignatureAlgorithm algorithm, byte[] data, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.signData(SignatureAlgorithm algorithm, byte[] data, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.signData*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<SignResult> signData(SignatureAlgorithm algorithm, byte[] data, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
    - id: "data"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.SignResult>"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])"
  id: "unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey)"
  nameWithType: "CryptographyAsyncClient.unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.unwrapKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Unwraps a symmetric key using the configured key that was initially used for wrapping that key. This operation is the reverse of the wrap operation. The unwrap operation supports asymmetric and symmetric keys to unwrap. This operation requires the keys/unwrapKey permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm\" data-throw-if-not-resolved=\"false\">wrap algorithm</xref> indicates the type of algorithm to use for unwrapping the specified encrypted key content. Possible values for asymmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\">RSA1_5</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\">RSA_OAEP</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\">RSA_OAEP_256</xref>. Possible values for symmetric keys include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.A128KW\" data-throw-if-not-resolved=\"false\">A128KW</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.A192KW\" data-throw-if-not-resolved=\"false\">A192KW</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.A256KW\" data-throw-if-not-resolved=\"false\">A256KW</xref>\n\n**Code Samples**\n\nUnwraps the key content. Subscribes to the call asynchronously and prints out the unwrapped key details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.unwrapKey\\#KeyWrapAlgorithm-byte\\}"
  syntax:
    content: "public Mono<UnwrapResult> unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm"
      description: "The encryption algorithm to use for wrapping the key."
    - id: "encryptedKey"
      type: "byte[]"
      description: "The encrypted key content to unwrap."
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.UnwrapResult>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing a the unwrapped key content."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context)"
  id: "unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey, Context context)"
  nameWithType: "CryptographyAsyncClient.unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.unwrapKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<UnwrapResult> unwrapKey(KeyWrapAlgorithm algorithm, byte[] encryptedKey, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm"
    - id: "encryptedKey"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.UnwrapResult>"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])"
  id: "verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  nameWithType: "CryptographyAsyncClient.verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verify*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Verifies a signature using the configured key. The verify operation supports both symmetric keys and asymmetric keys. In case of asymmetric keys public portion of the key is used to verify the signature . This operation requires the keys/verify permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\">signature algorithm</xref> indicates the type of algorithm to use to verify the signature. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\">ES256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\">E384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\">ES512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\">ES246K</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\">PS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\">RS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>\n\n**Code Samples**\n\nVerifies the signature against the specified digest. Subscribes to the call asynchronously and prints out the verification details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verify\\#SignatureAlgorithm-byte-byte\\}"
  syntax:
    content: "public Mono<VerifyResult> verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
      description: "The algorithm to use for signing."
    - id: "digest"
      type: "byte[]"
      description: "The content from which signature is to be created."
    - id: "signature"
      type: "byte[]"
      description: "The signature to be verified."
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.VerifyResult>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing a <xref uid=\"\" data-throw-if-not-resolved=\"false\">Boolean</xref> indicating the signature verification result."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context)"
  id: "verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature, Context context)"
  nameWithType: "CryptographyAsyncClient.verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verify*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<VerifyResult> verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
    - id: "digest"
      type: "byte[]"
    - id: "signature"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.VerifyResult>"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verifyData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])"
  id: "verifyData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature)"
  nameWithType: "CryptographyAsyncClient.verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verifyData*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Verifies a signature against the raw data using the configured key. The verify operation supports both symmetric keys and asymmetric keys. In case of asymmetric keys public portion of the key is used to verify the signature . This operation requires the keys/verify permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\">signature algorithm</xref> indicates the type of algorithm to use to verify the signature. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\">ES256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\">E384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\">ES512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\">ES246K</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\">PS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\">RS256</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\">RS384</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\">RS512</xref>\n\n**Code Samples**\n\nVerifies the signature against the raw data. Subscribes to the call asynchronously and prints out the verification details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verifyData\\#SignatureAlgorithm-byte-byte\\}"
  syntax:
    content: "public Mono<VerifyResult> verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
      description: "The algorithm to use for signing."
    - id: "data"
      type: "byte[]"
      description: "The raw content against which signature is to be verified."
    - id: "signature"
      type: "byte[]"
      description: "The signature to be verified."
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.VerifyResult>"
      description: "The <xref uid=\"\" data-throw-if-not-resolved=\"false\">Boolean</xref> indicating the signature verification result."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verifyData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context)"
  id: "verifyData(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature, Context context)"
  nameWithType: "CryptographyAsyncClient.verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verifyData*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<VerifyResult> verifyData(SignatureAlgorithm algorithm, byte[] data, byte[] signature, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
    - id: "data"
      type: "byte[]"
    - id: "signature"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.VerifyResult>"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])"
  id: "wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "wrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  nameWithType: "CryptographyAsyncClient.wrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.wrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.wrapKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Wraps a symmetric key using the configured key. The wrap operation supports wrapping a symmetric key with both symmetric and asymmetric keys. This operation requires the keys/wrapKey permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm\" data-throw-if-not-resolved=\"false\">wrap algorithm</xref> indicates the type of algorithm to use for wrapping the specified key content. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA1_5\" data-throw-if-not-resolved=\"false\">RSA1_5</xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP\" data-throw-if-not-resolved=\"false\">RSA_OAEP</xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm.RSA_OAEP_256\" data-throw-if-not-resolved=\"false\">RSA_OAEP_256</xref>\n\n**Code Samples**\n\nWraps the key content. Subscribes to the call asynchronously and prints out the wrapped key details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.wrapKey\\#KeyWrapAlgorithm-byte\\}"
  syntax:
    content: "public Mono<WrapResult> wrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm"
      description: "The encryption algorithm to use for wrapping the key."
    - id: "key"
      type: "byte[]"
      description: "The key content to be wrapped"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.WrapResult>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing a <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.WrapResult\" data-throw-if-not-resolved=\"false\">WrapResult</xref> whose <xref uid=\"WrapResult#getEncryptedKey()\" data-throw-if-not-resolved=\"false\">encrypted\n     key</xref> contains the wrapped key result."
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context)"
  id: "wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient"
  langs:
  - "java"
  name: "wrapKey(KeyWrapAlgorithm algorithm, byte[] key, Context context)"
  nameWithType: "CryptographyAsyncClient.wrapKey(KeyWrapAlgorithm algorithm, byte[] key, Context context)"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.wrapKey(KeyWrapAlgorithm algorithm, byte[] key, Context context)"
  overload: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.wrapKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<WrapResult> wrapKey(KeyWrapAlgorithm algorithm, byte[] key, Context context)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm"
    - id: "key"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.WrapResult>"
references:
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey"
  name: "JsonWebKey"
  nameWithType: "JsonWebKey"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey"
- uid: "com.azure.core.http.HttpPipeline"
  spec.java:
  - uid: "com.azure.core.http.HttpPipeline"
    name: "HttpPipeline"
    fullName: "com.azure.core.http.HttpPipeline"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceVersion"
  name: "CryptographyServiceVersion"
  nameWithType: "CryptographyServiceVersion"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceVersion"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.CryptographyAsyncClient*"
  name: "CryptographyAsyncClient"
  nameWithType: "CryptographyAsyncClient.CryptographyAsyncClient"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.CryptographyAsyncClient"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "reactor.core.publisher.Mono<java.lang.String>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKeyId*"
  name: "getKeyId"
  nameWithType: "CryptographyAsyncClient.getKeyId"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKeyId"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.KeyVaultKey>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.models.KeyVaultKey"
    name: "KeyVaultKey"
    fullName: "com.azure.security.keyvault.keys.models.KeyVaultKey"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKeyWithResponse*"
  name: "getKeyWithResponse"
  nameWithType: "CryptographyAsyncClient.getKeyWithResponse"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKeyWithResponse"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.models.KeyVaultKey>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.models.KeyVaultKey"
    name: "KeyVaultKey"
    fullName: "com.azure.security.keyvault.keys.models.KeyVaultKey"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKey*"
  name: "getKey"
  nameWithType: "CryptographyAsyncClient.getKey"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getKey"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.models.JsonWebKey>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.models.JsonWebKey"
    name: "JsonWebKey"
    fullName: "com.azure.security.keyvault.keys.models.JsonWebKey"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getSecretKey*"
  name: "getSecretKey"
  nameWithType: "CryptographyAsyncClient.getSecretKey"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getSecretKey"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm"
  name: "EncryptionAlgorithm"
  nameWithType: "EncryptionAlgorithm"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.EncryptResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.cryptography.models.EncryptResult"
    name: "EncryptResult"
    fullName: "com.azure.security.keyvault.keys.cryptography.models.EncryptResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.encrypt*"
  name: "encrypt"
  nameWithType: "CryptographyAsyncClient.encrypt"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.encrypt"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.DecryptResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.cryptography.models.DecryptResult"
    name: "DecryptResult"
    fullName: "com.azure.security.keyvault.keys.cryptography.models.DecryptResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.decrypt*"
  name: "decrypt"
  nameWithType: "CryptographyAsyncClient.decrypt"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.decrypt"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
  name: "SignatureAlgorithm"
  nameWithType: "SignatureAlgorithm"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.SignResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.cryptography.models.SignResult"
    name: "SignResult"
    fullName: "com.azure.security.keyvault.keys.cryptography.models.SignResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.sign*"
  name: "sign"
  nameWithType: "CryptographyAsyncClient.sign"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.sign"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.VerifyResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.cryptography.models.VerifyResult"
    name: "VerifyResult"
    fullName: "com.azure.security.keyvault.keys.cryptography.models.VerifyResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verify*"
  name: "verify"
  nameWithType: "CryptographyAsyncClient.verify"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verify"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm"
  name: "KeyWrapAlgorithm"
  nameWithType: "KeyWrapAlgorithm"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.WrapResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.cryptography.models.WrapResult"
    name: "WrapResult"
    fullName: "com.azure.security.keyvault.keys.cryptography.models.WrapResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.wrapKey*"
  name: "wrapKey"
  nameWithType: "CryptographyAsyncClient.wrapKey"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.wrapKey"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.UnwrapResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.cryptography.models.UnwrapResult"
    name: "UnwrapResult"
    fullName: "com.azure.security.keyvault.keys.cryptography.models.UnwrapResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.unwrapKey*"
  name: "unwrapKey"
  nameWithType: "CryptographyAsyncClient.unwrapKey"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.unwrapKey"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.signData*"
  name: "signData"
  nameWithType: "CryptographyAsyncClient.signData"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.signData"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verifyData*"
  name: "verifyData"
  nameWithType: "CryptographyAsyncClient.verifyData"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.verifyData"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
  name: "CryptographyServiceClient"
  nameWithType: "CryptographyServiceClient"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getCryptographyServiceClient*"
  name: "getCryptographyServiceClient"
  nameWithType: "CryptographyAsyncClient.getCryptographyServiceClient"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.getCryptographyServiceClient"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.setCryptographyServiceClient*"
  name: "setCryptographyServiceClient"
  nameWithType: "CryptographyAsyncClient.setCryptographyServiceClient"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.setCryptographyServiceClient"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.security.keyvault.keys.models.KeyVaultKey"
  name: "KeyVaultKey"
  nameWithType: "KeyVaultKey"
  fullName: "com.azure.security.keyvault.keys.models.KeyVaultKey"
- uid: "com.azure.core.http.rest.Response"
  name: "Response"
  nameWithType: "Response"
  fullName: "com.azure.core.http.rest.Response"
- uid: "com.azure.security.keyvault.keys.cryptography.models.EncryptResult"
  name: "EncryptResult"
  nameWithType: "EncryptResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.EncryptResult"
- uid: "com.azure.security.keyvault.keys.cryptography.models.DecryptResult"
  name: "DecryptResult"
  nameWithType: "DecryptResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.DecryptResult"
- uid: "com.azure.security.keyvault.keys.cryptography.models.SignResult"
  name: "SignResult"
  nameWithType: "SignResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.SignResult"
- uid: "com.azure.security.keyvault.keys.cryptography.models.VerifyResult"
  name: "VerifyResult"
  nameWithType: "VerifyResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.VerifyResult"
- uid: "com.azure.security.keyvault.keys.cryptography.models.WrapResult"
  name: "WrapResult"
  nameWithType: "WrapResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.WrapResult"
- uid: "com.azure.security.keyvault.keys.cryptography.models.UnwrapResult"
  name: "UnwrapResult"
  nameWithType: "UnwrapResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.UnwrapResult"
