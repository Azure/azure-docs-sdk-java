### YamlMime:JavaType
uid: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy"
fullName: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy"
name: "RollingUpgradePolicy"
nameWithType: "RollingUpgradePolicy"
summary: "The configuration parameters used while performing a rolling upgrade."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public class **RollingUpgradePolicy**"
constructors:
- uid: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.RollingUpgradePolicy()"
  fullName: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.RollingUpgradePolicy()"
  name: "RollingUpgradePolicy()"
  nameWithType: "RollingUpgradePolicy.RollingUpgradePolicy()"
  syntax: "public RollingUpgradePolicy()"
methods:
- uid: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.enableCrossZoneUpgrade()"
  fullName: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.enableCrossZoneUpgrade()"
  name: "enableCrossZoneUpgrade()"
  nameWithType: "RollingUpgradePolicy.enableCrossZoneUpgrade()"
  summary: "Get allow VMSS to ignore AZ boundaries when constructing upgrade batches."
  syntax: "public Boolean enableCrossZoneUpgrade()"
  desc: "Get allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent to determine the batch size. This field is able to be set to true or false only when using NodePlacementConfiguration as Zonal."
  returns:
    description: "the enableCrossZoneUpgrade value"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
- uid: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.maxBatchInstancePercent()"
  fullName: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.maxBatchInstancePercent()"
  name: "maxBatchInstancePercent()"
  nameWithType: "RollingUpgradePolicy.maxBatchInstancePercent()"
  summary: "Get the maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch."
  syntax: "public Integer maxBatchInstancePercent()"
  desc: "Get the maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The value of this field should be between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent."
  returns:
    description: "the maxBatchInstancePercent value"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
- uid: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.maxUnhealthyInstancePercent()"
  fullName: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.maxUnhealthyInstancePercent()"
  name: "maxUnhealthyInstancePercent()"
  nameWithType: "RollingUpgradePolicy.maxUnhealthyInstancePercent()"
  summary: "Get the maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts."
  syntax: "public Integer maxUnhealthyInstancePercent()"
  desc: "Get the maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The value of this field should be between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent."
  returns:
    description: "the maxUnhealthyInstancePercent value"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
- uid: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.maxUnhealthyUpgradedInstancePercent()"
  fullName: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.maxUnhealthyUpgradedInstancePercent()"
  name: "maxUnhealthyUpgradedInstancePercent()"
  nameWithType: "RollingUpgradePolicy.maxUnhealthyUpgradedInstancePercent()"
  summary: "Get the maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state."
  syntax: "public Integer maxUnhealthyUpgradedInstancePercent()"
  desc: "Get the maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The value of this field should be between 0 and 100, inclusive."
  returns:
    description: "the maxUnhealthyUpgradedInstancePercent value"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
- uid: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.pauseTimeBetweenBatches()"
  fullName: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.pauseTimeBetweenBatches()"
  name: "pauseTimeBetweenBatches()"
  nameWithType: "RollingUpgradePolicy.pauseTimeBetweenBatches()"
  summary: "Get the wait time between completing the update for all virtual machines in one batch and starting the next batch."
  syntax: "public Period pauseTimeBetweenBatches()"
  desc: "Get the wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format."
  returns:
    description: "the pauseTimeBetweenBatches value"
    type: "<xref href=\"org.joda.time.Period?alt=org.joda.time.Period&text=Period\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.prioritizeUnhealthyInstances()"
  fullName: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.prioritizeUnhealthyInstances()"
  name: "prioritizeUnhealthyInstances()"
  nameWithType: "RollingUpgradePolicy.prioritizeUnhealthyInstances()"
  summary: "Get upgrade all unhealthy instances in a scale set before any healthy instances."
  syntax: "public Boolean prioritizeUnhealthyInstances()"
  desc: "Get upgrade all unhealthy instances in a scale set before any healthy instances."
  returns:
    description: "the prioritizeUnhealthyInstances value"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
- uid: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.rollbackFailedInstancesOnPolicyBreach()"
  fullName: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.rollbackFailedInstancesOnPolicyBreach()"
  name: "rollbackFailedInstancesOnPolicyBreach()"
  nameWithType: "RollingUpgradePolicy.rollbackFailedInstancesOnPolicyBreach()"
  summary: "Get rollback failed instances to previous model if the Rolling Upgrade policy is violated."
  syntax: "public Boolean rollbackFailedInstancesOnPolicyBreach()"
  desc: "Get rollback failed instances to previous model if the Rolling Upgrade policy is violated."
  returns:
    description: "the rollbackFailedInstancesOnPolicyBreach value"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
- uid: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.withEnableCrossZoneUpgrade(java.lang.Boolean)"
  fullName: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.withEnableCrossZoneUpgrade(Boolean enableCrossZoneUpgrade)"
  name: "withEnableCrossZoneUpgrade(Boolean enableCrossZoneUpgrade)"
  nameWithType: "RollingUpgradePolicy.withEnableCrossZoneUpgrade(Boolean enableCrossZoneUpgrade)"
  summary: "Set allow VMSS to ignore AZ boundaries when constructing upgrade batches."
  parameters:
  - description: "the enableCrossZoneUpgrade value to set"
    name: "enableCrossZoneUpgrade"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
  syntax: "public RollingUpgradePolicy withEnableCrossZoneUpgrade(Boolean enableCrossZoneUpgrade)"
  desc: "Set allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent to determine the batch size. This field is able to be set to true or false only when using NodePlacementConfiguration as Zonal."
  returns:
    description: "the RollingUpgradePolicy object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy?alt=com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy&text=RollingUpgradePolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.withMaxBatchInstancePercent(java.lang.Integer)"
  fullName: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.withMaxBatchInstancePercent(Integer maxBatchInstancePercent)"
  name: "withMaxBatchInstancePercent(Integer maxBatchInstancePercent)"
  nameWithType: "RollingUpgradePolicy.withMaxBatchInstancePercent(Integer maxBatchInstancePercent)"
  summary: "Set the maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch."
  parameters:
  - description: "the maxBatchInstancePercent value to set"
    name: "maxBatchInstancePercent"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  syntax: "public RollingUpgradePolicy withMaxBatchInstancePercent(Integer maxBatchInstancePercent)"
  desc: "Set the maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The value of this field should be between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent."
  returns:
    description: "the RollingUpgradePolicy object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy?alt=com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy&text=RollingUpgradePolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.withMaxUnhealthyInstancePercent(java.lang.Integer)"
  fullName: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.withMaxUnhealthyInstancePercent(Integer maxUnhealthyInstancePercent)"
  name: "withMaxUnhealthyInstancePercent(Integer maxUnhealthyInstancePercent)"
  nameWithType: "RollingUpgradePolicy.withMaxUnhealthyInstancePercent(Integer maxUnhealthyInstancePercent)"
  summary: "Set the maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts."
  parameters:
  - description: "the maxUnhealthyInstancePercent value to set"
    name: "maxUnhealthyInstancePercent"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  syntax: "public RollingUpgradePolicy withMaxUnhealthyInstancePercent(Integer maxUnhealthyInstancePercent)"
  desc: "Set the maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The value of this field should be between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent."
  returns:
    description: "the RollingUpgradePolicy object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy?alt=com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy&text=RollingUpgradePolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.withMaxUnhealthyUpgradedInstancePercent(java.lang.Integer)"
  fullName: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.withMaxUnhealthyUpgradedInstancePercent(Integer maxUnhealthyUpgradedInstancePercent)"
  name: "withMaxUnhealthyUpgradedInstancePercent(Integer maxUnhealthyUpgradedInstancePercent)"
  nameWithType: "RollingUpgradePolicy.withMaxUnhealthyUpgradedInstancePercent(Integer maxUnhealthyUpgradedInstancePercent)"
  summary: "Set the maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state."
  parameters:
  - description: "the maxUnhealthyUpgradedInstancePercent value to set"
    name: "maxUnhealthyUpgradedInstancePercent"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  syntax: "public RollingUpgradePolicy withMaxUnhealthyUpgradedInstancePercent(Integer maxUnhealthyUpgradedInstancePercent)"
  desc: "Set the maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The value of this field should be between 0 and 100, inclusive."
  returns:
    description: "the RollingUpgradePolicy object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy?alt=com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy&text=RollingUpgradePolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.withPauseTimeBetweenBatches(org.joda.time.Period)"
  fullName: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.withPauseTimeBetweenBatches(Period pauseTimeBetweenBatches)"
  name: "withPauseTimeBetweenBatches(Period pauseTimeBetweenBatches)"
  nameWithType: "RollingUpgradePolicy.withPauseTimeBetweenBatches(Period pauseTimeBetweenBatches)"
  summary: "Set the wait time between completing the update for all virtual machines in one batch and starting the next batch."
  parameters:
  - description: "the pauseTimeBetweenBatches value to set"
    name: "pauseTimeBetweenBatches"
    type: "<xref href=\"org.joda.time.Period?alt=org.joda.time.Period&text=Period\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RollingUpgradePolicy withPauseTimeBetweenBatches(Period pauseTimeBetweenBatches)"
  desc: "Set the wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format."
  returns:
    description: "the RollingUpgradePolicy object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy?alt=com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy&text=RollingUpgradePolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.withPrioritizeUnhealthyInstances(java.lang.Boolean)"
  fullName: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.withPrioritizeUnhealthyInstances(Boolean prioritizeUnhealthyInstances)"
  name: "withPrioritizeUnhealthyInstances(Boolean prioritizeUnhealthyInstances)"
  nameWithType: "RollingUpgradePolicy.withPrioritizeUnhealthyInstances(Boolean prioritizeUnhealthyInstances)"
  summary: "Set upgrade all unhealthy instances in a scale set before any healthy instances."
  parameters:
  - description: "the prioritizeUnhealthyInstances value to set"
    name: "prioritizeUnhealthyInstances"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
  syntax: "public RollingUpgradePolicy withPrioritizeUnhealthyInstances(Boolean prioritizeUnhealthyInstances)"
  desc: "Set upgrade all unhealthy instances in a scale set before any healthy instances."
  returns:
    description: "the RollingUpgradePolicy object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy?alt=com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy&text=RollingUpgradePolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.withRollbackFailedInstancesOnPolicyBreach(java.lang.Boolean)"
  fullName: "com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy.withRollbackFailedInstancesOnPolicyBreach(Boolean rollbackFailedInstancesOnPolicyBreach)"
  name: "withRollbackFailedInstancesOnPolicyBreach(Boolean rollbackFailedInstancesOnPolicyBreach)"
  nameWithType: "RollingUpgradePolicy.withRollbackFailedInstancesOnPolicyBreach(Boolean rollbackFailedInstancesOnPolicyBreach)"
  summary: "Set rollback failed instances to previous model if the Rolling Upgrade policy is violated."
  parameters:
  - description: "the rollbackFailedInstancesOnPolicyBreach value to set"
    name: "rollbackFailedInstancesOnPolicyBreach"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
  syntax: "public RollingUpgradePolicy withRollbackFailedInstancesOnPolicyBreach(Boolean rollbackFailedInstancesOnPolicyBreach)"
  desc: "Set rollback failed instances to previous model if the Rolling Upgrade policy is violated."
  returns:
    description: "the RollingUpgradePolicy object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy?alt=com.microsoft.azure.batch.protocol.models.RollingUpgradePolicy&text=RollingUpgradePolicy\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "The configuration parameters used while performing a rolling upgrade."
metadata: {}
package: "com.microsoft.azure.batch.protocol.models"
artifact: com.microsoft.azure:azure-batch:11.2.0
