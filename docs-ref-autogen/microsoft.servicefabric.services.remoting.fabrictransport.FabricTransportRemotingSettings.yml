### YamlMime:ManagedReference
items:
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  id: FabricTransportRemotingSettings
  parent: microsoft.servicefabric.services.remoting.fabrictransport
  children:
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.FabricTransportRemotingSettings()
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getConnectTimeout()
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getDefault()
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getDefault(String)
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getInternalSettings()
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getKeepAliveTimeout()
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxConcurrentCalls()
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxMessageSize()
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxQueueSize()
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getOperationTimeout()
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getSecurityCredentials()
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFrom(String)
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFromConfigPackage(String,String)
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFromFile(String,String)
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setConnectTimeout(Duration)
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setKeepAliveTimeout(Duration)
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxConcurrentCalls(Long)
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxMessageSize(Long)
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxQueueSize(Long)
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setOperationTimeout(Duration)
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setSecurityCredentials(SecurityCredentials)
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFrom(String)
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFromConfigPackage(String,String)
  - microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFromFile(String,String)
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: FabricTransportRemotingSettings
  nameWithType: FabricTransportRemotingSettings
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 8
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>Settings that configures the FabricTransport communication. </p>"
  syntax: &o1
    content: public class FabricTransportRemotingSettings
  inheritance:
  - java.lang.Object
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.FabricTransportRemotingSettings()
  id: FabricTransportRemotingSettings()
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: FabricTransportRemotingSettings()
  nameWithType: FabricTransportRemotingSettings.FabricTransportRemotingSettings()
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.FabricTransportRemotingSettings()
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.FabricTransportRemotingSettings*
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 13
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>Creates a new FabricTransportRemotingSettings with default Values. </p>"
  syntax:
    content: public FabricTransportRemotingSettings()
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getConnectTimeout()
  id: getConnectTimeout()
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: getConnectTimeout()
  nameWithType: FabricTransportRemotingSettings.getConnectTimeout()
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getConnectTimeout()
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getConnectTimeout*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 230
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>Connect timeout specifies the maximum time allowed for the connection to be established successfully.</p>\r\n<p>\r\n  <b>Remarks:</b>Default Value for ConnectTimeout Timeout is set as 5 seconds. </p>"
  syntax:
    content: public Duration getConnectTimeout()
    return:
      type: e02a2de0
      description: <p>ConnectTimeout as <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.time.Duration"></xref></p>
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getDefault()
  id: getDefault()
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: getDefault()
  nameWithType: FabricTransportRemotingSettings.getDefault()
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getDefault()
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getDefault*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 148
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>FabricTransportSettings returns the default Settings .Loads the configuration file from default Config Package\"Config\" , if not found then try to load from default config file \"ClientExeName.Settings.xml\" from Client Exe directory.</p>\r\n<p></p>"
  syntax:
    content: public static FabricTransportRemotingSettings getDefault()
    return:
      type: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
      description: <p>FabricTransportSettings </p>
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getDefault(String)
  id: getDefault(String)
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: getDefault(String sectionName)
  nameWithType: FabricTransportRemotingSettings.getDefault(String sectionName)
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getDefault(String sectionName)
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getDefault*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 162
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>FabricTransportSettings returns the default Settings .Loads the configuration file from default Config Package\"Config\" , if not found then try to load from default config file \"ClientExeName.Settings.xml\" from Client Exe directory.</p>\r\n<p></p>"
  syntax:
    content: public static FabricTransportRemotingSettings getDefault(String sectionName)
    parameters:
    - id: sectionName
      type: "26831127"
      description: <p>Name of the section within the configuration file. If not found section in configuration file, it will return the default Settings </p>
    return:
      type: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
      description: <p>FabricTransportSettings </p>
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getInternalSettings()
  id: getInternalSettings()
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: getInternalSettings()
  nameWithType: FabricTransportRemotingSettings.getInternalSettings()
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getInternalSettings()
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getInternalSettings*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 430
  package: microsoft.servicefabric.services.remoting.fabrictransport
  syntax:
    content: public FabricTransportSettings getInternalSettings()
    return:
      type: 50ea4c41
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getKeepAliveTimeout()
  id: getKeepAliveTimeout()
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: getKeepAliveTimeout()
  nameWithType: FabricTransportRemotingSettings.getKeepAliveTimeout()
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getKeepAliveTimeout()
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getKeepAliveTimeout*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 289
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>KeepAliveTimeout is provides a way to configure Tcp keep-alive option.</p>\r\n<p>\r\n  <b>Remarks:</b>Default Value for KeepAliveTimeout Timeout is set as TimeSpan.Zero. which indicates we disable the tcp keepalive option. If you are using loadbalancer , you may need to configure this in order to avoid the loadbalancer to close the connection after certain time </p>"
  syntax:
    content: public Duration getKeepAliveTimeout()
    return:
      type: e02a2de0
      description: <p>KeepAliveTimeout as <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.time.Duration"></xref></p>
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxConcurrentCalls()
  id: getMaxConcurrentCalls()
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: getMaxConcurrentCalls()
  nameWithType: FabricTransportRemotingSettings.getMaxConcurrentCalls()
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxConcurrentCalls()
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxConcurrentCalls*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 379
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>MaxConcurrentCalls represents maximum number of messages actively service processes at one time.</p>\r\n<p>\r\n  <b>Remarks:</b>Defaults value for the MaxConcurrentCalls is to the Number of processors. </p>"
  syntax:
    content: public Long getMaxConcurrentCalls()
    return:
      type: 34f09483
      description: <p>MaxConcurrentCalls is the upper limit of active messages in the service. </p>
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxMessageSize()
  id: getMaxMessageSize()
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: getMaxMessageSize()
  nameWithType: FabricTransportRemotingSettings.getMaxMessageSize()
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxMessageSize()
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxMessageSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 320
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>MaxMessageSize represents the maximum size for a message that can be received on a channel configured with this setting.</p>\r\n<p>\r\n  <b>Remarks:</b>Default Value for MaxMessageSize used is 4194304 bytes </p>"
  syntax:
    content: public Long getMaxMessageSize()
    return:
      type: 34f09483
      description: <p>Maximum size of the message in bytes. </p>
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxQueueSize()
  id: getMaxQueueSize()
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: getMaxQueueSize()
  nameWithType: FabricTransportRemotingSettings.getMaxQueueSize()
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxQueueSize()
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxQueueSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 349
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>The maximum size, of a queue that stores messages while they are processed for an endpoint configured with this setting.</p>\r\n<p>\r\n  <b>Remarks:</b>Default value is 10,000 messages </p>"
  syntax:
    content: public Long getMaxQueueSize()
    return:
      type: 34f09483
      description: <p>Max Size for a Queue that recieves messages from the channel. </p>
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getOperationTimeout()
  id: getOperationTimeout()
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: getOperationTimeout()
  nameWithType: FabricTransportRemotingSettings.getOperationTimeout()
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getOperationTimeout()
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getOperationTimeout*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 258
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>Operation Timeout which governs the whole process of sending a message, including receiving a reply message for a request/reply service operation. This timeout also applies when sending reply messages from a callback contract method.</p>\r\n<p>\r\n  <b>Remarks:</b>Default Value for Operation Timeout is set as 5 mins </p>"
  syntax:
    content: public Duration getOperationTimeout()
    return:
      type: e02a2de0
      description: <p>OperationTimeout as <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.time.Duration"></xref></p>
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getSecurityCredentials()
  id: getSecurityCredentials()
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: getSecurityCredentials()
  nameWithType: FabricTransportRemotingSettings.getSecurityCredentials()
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getSecurityCredentials()
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getSecurityCredentials*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 409
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>Security credentials for securing the communication</p>\r\n<p>\r\n  <b>Remarks:</b>Default Value for SecurityCredentials is None SecurityCredential can be of type x509SecurityCredentail <xref uid=\"system.fabric.X509Credentials\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.X509Credentials\"></xref>or WindowsCredentials <xref uid=\"system.fabric.WindowsCredentials\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.WindowsCredentials\"></xref></p>"
  syntax:
    content: public SecurityCredentials getSecurityCredentials()
    return:
      type: system.fabric.SecurityCredentials
      description: <p>SecurityCredentials as <xref uid="system.fabric.SecurityCredentials" data-throw-if-not-resolved="false" data-raw-source="system.fabric.SecurityCredentials"></xref></p>
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFrom(String)
  id: loadFrom(String)
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: loadFrom(String sectionName)
  nameWithType: FabricTransportRemotingSettings.loadFrom(String sectionName)
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFrom(String sectionName)
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFrom*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 40
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>Loads the FabricTransport settings from a sectionName specified in the configuration file Configuration File can be specified using the filePath or using the name of the configuration package specified in the service manifest . It will first try to load config using configPackageName . if configPackageName is not specified then try to load from filePath.</p>\r\n<p>\r\n  <b>Remarks:</b> The following are the parameter names that should be provided in the configuration file,to be recognizable by service fabric to load the transport settings. 1. MaxQueueSize - value in long. 2. MaxMessageSize - value in bytes. 3. MaxConcurrentCalls - value in long. 4. SecurityCredentials - SecurityCredentials value. 5. OperationTimeoutInSeconds - value in seconds. 6. KeepAliveTimeoutInSeconds<ul><li><p>value in seconds. </p></li></ul></p>"
  syntax:
    content: public static FabricTransportRemotingSettings loadFrom(String sectionName)
    parameters:
    - id: sectionName
      type: "26831127"
      description: <p>Name of the section within the configuration file. If not found section in configuration file, it will throw ArgumentException </p>
    return:
      type: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
      description: <p>FabricTransportSettings </p>
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFromConfigPackage(String,String)
  id: loadFromConfigPackage(String,String)
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: loadFromConfigPackage(String sectionName, String configPackageName)
  nameWithType: FabricTransportRemotingSettings.loadFromConfigPackage(String sectionName, String configPackageName)
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFromConfigPackage(String sectionName, String configPackageName)
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFromConfigPackage*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 216
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>Loads the FabricTransport settings from a sectionName specified in the configuration file Configuration File can be specified using the filePath or using the name of the configuration package specified in the service manifest . It will first try to load config using configPackageName . if configPackageName is not specified then try to load from filePath.</p>\r\n<p>\r\n  <b>Remarks:</b> The following are the parameter names that should be provided in the configuration file,to be recognizable by service fabric to load the transport settings. 1. MaxQueueSize - value in long. 2. MaxMessageSize - value in bytes. 3. MaxConcurrentCalls - value in long. 4. SecurityCredentials - SecurityCredentials value. 5. OperationTimeoutInSeconds - value in seconds. 6. KeepAliveTimeoutInSeconds<ul><li><p>value in seconds. </p></li></ul></p>"
  syntax:
    content: public static FabricTransportRemotingSettings loadFromConfigPackage(String sectionName, String configPackageName)
    parameters:
    - id: sectionName
      type: "26831127"
      description: <p>Name of the section within the configuration file. If not found section in configuration file, it will throw ArgumentException</p>
    - id: configPackageName
      type: "26831127"
      description: <p>Name of the configuration package.If its null or empty,it will check for file in filePath </p>
    return:
      type: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
      description: <p>FabricTransportSettings </p>
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFromFile(String,String)
  id: loadFromFile(String,String)
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: loadFromFile(String sectionName, String filePath)
  nameWithType: FabricTransportRemotingSettings.loadFromFile(String sectionName, String filePath)
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFromFile(String sectionName, String filePath)
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFromFile*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 189
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>Loads the FabricTransport settings from a sectionName specified in the configuration file Configuration File can be specified using the filePath or using the name of the configuration package specified in the service manifest . It will first try to load config using configPackageName . if configPackageName is not specified then try to load from filePath.</p>\r\n<p>\r\n  <b>Remarks:</b> The following are the parameter names that should be provided in the configuration file,to be recognizable by service fabric to load the transport settings. 1. MaxQueueSize - value in long. 2. MaxMessageSize - value in bytes. 3. MaxConcurrentCalls - value in long. 4. SecurityCredentials - SecurityCredentials value. 5. OperationTimeoutInSeconds - value in seconds. 6. KeepAliveTimeoutInSeconds<ul><li><p>value in seconds. </p></li></ul></p>"
  syntax:
    content: public static FabricTransportRemotingSettings loadFromFile(String sectionName, String filePath)
    parameters:
    - id: sectionName
      type: "26831127"
      description: <p>Name of the section within the configuration file. If not found section in configuration file, it will throw ArgumentException </p>
    - id: filePath
      type: "26831127"
      description: <p>Full path of the file where the settings will be loaded from. If not specified , it will first try to load from default Config Package"Config" , if not found then load from Settings "ClientExeName.Settings.xml" present in Client Exe directory. </p>
    return:
      type: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
      description: <p>FabricTransportSettings </p>
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setConnectTimeout(Duration)
  id: setConnectTimeout(Duration)
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: setConnectTimeout(Duration connectTimeout)
  nameWithType: FabricTransportRemotingSettings.setConnectTimeout(Duration connectTimeout)
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setConnectTimeout(Duration connectTimeout)
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setConnectTimeout*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 244
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>Connect timeout specifies the maximum time allowed for the connection to be established successfully.</p>\r\n<p>\r\n  <b>Remarks:</b>Default Value for ConnectTimeout Timeout is set as 5 seconds. </p>"
  syntax:
    content: public void setConnectTimeout(Duration connectTimeout)
    parameters:
    - id: connectTimeout
      type: e02a2de0
      description: <p>ConnectTimeout as <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.time.Duration"></xref></p>
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setKeepAliveTimeout(Duration)
  id: setKeepAliveTimeout(Duration)
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: setKeepAliveTimeout(Duration keepAliveTimeout)
  nameWithType: FabricTransportRemotingSettings.setKeepAliveTimeout(Duration keepAliveTimeout)
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setKeepAliveTimeout(Duration keepAliveTimeout)
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setKeepAliveTimeout*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 306
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>KeepAliveTimeout is provides a way to configure Tcp keep-alive option.</p>\r\n<p>\r\n  <b>Remarks:</b>Default Value for KeepAliveTimeout Timeout is set as TimeSpan.Zero. which indicates we disable the tcp keepalive option. If you are using loadbalancer , you may need to configure this in order to avoid the loadbalancer to close the connection after certain time </p>"
  syntax:
    content: public void setKeepAliveTimeout(Duration keepAliveTimeout)
    parameters:
    - id: keepAliveTimeout
      type: e02a2de0
      description: <p>as <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.time.Duration"></xref></p>
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxConcurrentCalls(Long)
  id: setMaxConcurrentCalls(Long)
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: setMaxConcurrentCalls(Long maxConcurrentCalls)
  nameWithType: FabricTransportRemotingSettings.setMaxConcurrentCalls(Long maxConcurrentCalls)
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxConcurrentCalls(Long maxConcurrentCalls)
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxConcurrentCalls*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 395
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>MaxConcurrentCalls represents maximum number of messages actively service processes at one time.</p>\r\n<p>\r\n  <b>Remarks:</b>Defaults value for the MaxConcurrentCalls is to the Number of processors. </p>"
  syntax:
    content: public void setMaxConcurrentCalls(Long maxConcurrentCalls)
    parameters:
    - id: maxConcurrentCalls
      type: 34f09483
      description: <p>MaxConcurrentCalls is the upper limit of active messages in the service. </p>
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxMessageSize(Long)
  id: setMaxMessageSize(Long)
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: setMaxMessageSize(Long maxMessageSize)
  nameWithType: FabricTransportRemotingSettings.setMaxMessageSize(Long maxMessageSize)
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxMessageSize(Long maxMessageSize)
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxMessageSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 335
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>MaxMessageSize represents the maximum size for a message that can be received on a channel configured with this setting.</p>\r\n<p>\r\n  <b>Remarks:</b>Default Value for MaxMessageSize used is 4194304 bytes </p>"
  syntax:
    content: public void setMaxMessageSize(Long maxMessageSize)
    parameters:
    - id: maxMessageSize
      type: 34f09483
      description: <p>Maximum size of the message in bytes. </p>
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxQueueSize(Long)
  id: setMaxQueueSize(Long)
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: setMaxQueueSize(Long maxQueueSize)
  nameWithType: FabricTransportRemotingSettings.setMaxQueueSize(Long maxQueueSize)
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxQueueSize(Long maxQueueSize)
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxQueueSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 364
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>The maximum size, of a queue that stores messages while they are processed for an endpoint configured with this setting.</p>\r\n<p>\r\n  <b>Remarks:</b>Default value is 10,000 messages </p>"
  syntax:
    content: public void setMaxQueueSize(Long maxQueueSize)
    parameters:
    - id: maxQueueSize
      type: 34f09483
      description: <p>Max Size for a Queue that recieves messages from the channel. </p>
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setOperationTimeout(Duration)
  id: setOperationTimeout(Duration)
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: setOperationTimeout(Duration operationTimeout)
  nameWithType: FabricTransportRemotingSettings.setOperationTimeout(Duration operationTimeout)
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setOperationTimeout(Duration operationTimeout)
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setOperationTimeout*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 273
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>Operation Timeout which governs the whole process of sending a message, including receiving a reply message for a request/reply service operation. This timeout also applies when sending reply messages from a callback contract method.</p>\r\n<p>\r\n  <b>Remarks:</b>Default Value for Operation Timeout is set as 5 mins </p>"
  syntax:
    content: public void setOperationTimeout(Duration operationTimeout)
    parameters:
    - id: operationTimeout
      type: e02a2de0
      description: <p>as <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.time.Duration"></xref></p>
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setSecurityCredentials(SecurityCredentials)
  id: setSecurityCredentials(SecurityCredentials)
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: setSecurityCredentials(SecurityCredentials securityCredentials)
  nameWithType: FabricTransportRemotingSettings.setSecurityCredentials(SecurityCredentials securityCredentials)
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setSecurityCredentials(SecurityCredentials securityCredentials)
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setSecurityCredentials*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 424
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>Security credentials for securing the communication</p>\r\n<p>\r\n  <b>Remarks:</b>Default Value for SecurityCredentials is None SecurityCredential can be of type x509SecurityCredentail <xref uid=\"system.fabric.X509Credentials\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.X509Credentials\"></xref> or WindowsCredentials <xref uid=\"system.fabric.WindowsCredentials\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.WindowsCredentials\"></xref></p>"
  syntax:
    content: public void setSecurityCredentials(SecurityCredentials securityCredentials)
    parameters:
    - id: securityCredentials
      type: system.fabric.SecurityCredentials
      description: <p>SecurityCredentials as <xref uid="system.fabric.SecurityCredentials" data-throw-if-not-resolved="false" data-raw-source="system.fabric.SecurityCredentials"></xref></p>
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFrom(String)
  id: tryLoadFrom(String)
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: tryLoadFrom(String sectionName)
  nameWithType: FabricTransportRemotingSettings.tryLoadFrom(String sectionName)
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFrom(String sectionName)
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFrom*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 65
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>Try to load the FabricTransport settings from a sectionName specified in the configuration file. Configuration File can be specified using the filePath or using the name of the configuration package specified in the service manifest . It will first try to load config using configPackageName . if configPackageName is not specified then try to load from filePath.</p>\r\n<p>\r\n  <b>Remarks:</b>The following are the parameter names that should be provided in the configuration file,to be recognizable by service fabric to load the transport settings. 1. MaxQueueSize - value in long. 2. MaxMessageSize - value in bytes. 3. MaxConcurrentCalls - value in long. 4. SecurityCredentials - SecurityCredentials value. 5. OperationTimeoutInSeconds - value in seconds. 6. KeepAliveTimeoutInSeconds<ul><li><p>value in seconds. </p></li></ul></p>"
  syntax:
    content: public static FabricTransportRemotingSettings tryLoadFrom(String sectionName)
    parameters:
    - id: sectionName
      type: "26831127"
      description: <p>Name of the section within the configuration file. If not found section in configuration file, it return false </p>
    return:
      type: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
      description: <p>Boolean specifies whether the settings get loaded successfully from Config. It returns true when load from Config succeeded, else return false. </p>
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFromConfigPackage(String,String)
  id: tryLoadFromConfigPackage(String,String)
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: tryLoadFromConfigPackage(String sectionName, String configPackageName)
  nameWithType: FabricTransportRemotingSettings.tryLoadFromConfigPackage(String sectionName, String configPackageName)
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFromConfigPackage(String sectionName, String configPackageName)
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFromConfigPackage*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 130
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>Try to load the FabricTransport settings from a sectionName specified in the configuration file. Configuration File can be specified using the filePath or using the name of the configuration package specified in the service manifest . It will first try to load config using configPackageName . if configPackageName is not specified then try to load from filePath.</p>\r\n<p>\r\n  <b>Remarks:</b>The following are the parameter names that should be provided in the configuration file,to be recognizable by service fabric to load the transport settings. 1. MaxQueueSize - value in long. 2. MaxMessageSize - value in bytes. 3. MaxConcurrentCalls - value in long. 4. SecurityCredentials - SecurityCredentials value. 5. OperationTimeoutInSeconds - value in seconds. 6. KeepAliveTimeoutInSeconds<ul><li><p>value in seconds. </p></li></ul></p>"
  syntax:
    content: public static FabricTransportRemotingSettings tryLoadFromConfigPackage(String sectionName, String configPackageName)
    parameters:
    - id: sectionName
      type: "26831127"
      description: <p>Name of the section within the configuration file. If not found section in configuration file, it return false </p>
    - id: configPackageName
      type: "26831127"
      description: <p>Name of the configuration package. If its null or empty,it will check for file in filePath </p>
    return:
      type: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
      description: <p>Boolean specifies whether the settings get loaded successfully from Config. It returns true when load from Config succeeded, else return false. </p>
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFromFile(String,String)
  id: tryLoadFromFile(String,String)
  parent: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  langs:
  - java
  name: tryLoadFromFile(String sectionName, String filePath)
  nameWithType: FabricTransportRemotingSettings.tryLoadFromFile(String sectionName, String filePath)
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFromFile(String sectionName, String filePath)
  overload: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFromFile*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/fabrictransport/FabricTransportRemotingSettings.java
    startLine: 98
  package: microsoft.servicefabric.services.remoting.fabrictransport
  summary: "<p>Try to load the FabricTransport settings from a sectionName specified in the configuration file. Configuration File can be specified using the filePath or using the name of the configuration package specified in the service manifest . It will first try to load config using configPackageName . if configPackageName is not specified then try to load from filePath.</p>\r\n<p>\r\n  <b>Remarks:</b>The following are the parameter names that should be provided in the configuration file,to be recognizable by service fabric to load the transport settings. 1. MaxQueueSize - value in long. 2. MaxMessageSize - value in bytes. 3. MaxConcurrentCalls - value in long. 4. SecurityCredentials - SecurityCredentials value. 5. OperationTimeoutInSeconds - value in seconds. 6. KeepAliveTimeoutInSeconds<ul><li><p>value in seconds. </p></li></ul></p>"
  syntax:
    content: public static FabricTransportRemotingSettings tryLoadFromFile(String sectionName, String filePath)
    parameters:
    - id: sectionName
      type: "26831127"
      description: <p>Name of the section within the configuration file. If not found section in configuration file, it return false </p>
    - id: filePath
      type: "26831127"
      description: <p>Full path of the file where the settings will be loaded from. If not specified , it will first try to load from default Config Package"Config" , if not found then load from Settings "ClientExeName.Settings.xml" present in Client Exe directory. </p>
    return:
      type: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
      description: <p>Boolean specifies whether the settings get loaded successfully from Config. It returns true when load from Config succeeded, else return false. </p>
references:
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.FabricTransportRemotingSettings*
  name: FabricTransportRemotingSettings
  nameWithType: FabricTransportRemotingSettings.FabricTransportRemotingSettings
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.FabricTransportRemotingSettings
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: e02a2de0
  spec.java:
  - name: Duration
    fullName: Duration
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getConnectTimeout*
  name: getConnectTimeout
  nameWithType: FabricTransportRemotingSettings.getConnectTimeout
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getConnectTimeout
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setConnectTimeout*
  name: setConnectTimeout
  nameWithType: FabricTransportRemotingSettings.setConnectTimeout
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setConnectTimeout
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getOperationTimeout*
  name: getOperationTimeout
  nameWithType: FabricTransportRemotingSettings.getOperationTimeout
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getOperationTimeout
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setOperationTimeout*
  name: setOperationTimeout
  nameWithType: FabricTransportRemotingSettings.setOperationTimeout
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setOperationTimeout
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getKeepAliveTimeout*
  name: getKeepAliveTimeout
  nameWithType: FabricTransportRemotingSettings.getKeepAliveTimeout
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getKeepAliveTimeout
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setKeepAliveTimeout*
  name: setKeepAliveTimeout
  nameWithType: FabricTransportRemotingSettings.setKeepAliveTimeout
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setKeepAliveTimeout
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: 34f09483
  spec.java:
  - name: Long
    fullName: Long
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxMessageSize*
  name: getMaxMessageSize
  nameWithType: FabricTransportRemotingSettings.getMaxMessageSize
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxMessageSize
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxMessageSize*
  name: setMaxMessageSize
  nameWithType: FabricTransportRemotingSettings.setMaxMessageSize
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxMessageSize
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxQueueSize*
  name: getMaxQueueSize
  nameWithType: FabricTransportRemotingSettings.getMaxQueueSize
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxQueueSize
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxQueueSize*
  name: setMaxQueueSize
  nameWithType: FabricTransportRemotingSettings.setMaxQueueSize
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxQueueSize
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxConcurrentCalls*
  name: getMaxConcurrentCalls
  nameWithType: FabricTransportRemotingSettings.getMaxConcurrentCalls
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxConcurrentCalls
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxConcurrentCalls*
  name: setMaxConcurrentCalls
  nameWithType: FabricTransportRemotingSettings.setMaxConcurrentCalls
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxConcurrentCalls
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getSecurityCredentials*
  name: getSecurityCredentials
  nameWithType: FabricTransportRemotingSettings.getSecurityCredentials
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getSecurityCredentials
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setSecurityCredentials*
  name: setSecurityCredentials
  nameWithType: FabricTransportRemotingSettings.setSecurityCredentials
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setSecurityCredentials
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: 50ea4c41
  spec.java:
  - name: FabricTransportSettings
    fullName: FabricTransportSettings
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getInternalSettings*
  name: getInternalSettings
  nameWithType: FabricTransportRemotingSettings.getInternalSettings
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getInternalSettings
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFrom*
  name: loadFrom
  nameWithType: FabricTransportRemotingSettings.loadFrom
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFrom
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFrom*
  name: tryLoadFrom
  nameWithType: FabricTransportRemotingSettings.tryLoadFrom
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFrom
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFromFile*
  name: tryLoadFromFile
  nameWithType: FabricTransportRemotingSettings.tryLoadFromFile
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFromFile
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFromConfigPackage*
  name: tryLoadFromConfigPackage
  nameWithType: FabricTransportRemotingSettings.tryLoadFromConfigPackage
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFromConfigPackage
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getDefault*
  name: getDefault
  nameWithType: FabricTransportRemotingSettings.getDefault
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getDefault
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFromFile*
  name: loadFromFile
  nameWithType: FabricTransportRemotingSettings.loadFromFile
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFromFile
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFromConfigPackage*
  name: loadFromConfigPackage
  nameWithType: FabricTransportRemotingSettings.loadFromConfigPackage
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFromConfigPackage
  package: microsoft.servicefabric.services.remoting.fabrictransport
- uid: system.fabric.SecurityCredentials
  parent: system.fabric
  href: system.fabric.SecurityCredentials.yml
  name: SecurityCredentials
  nameWithType: SecurityCredentials
  fullName: system.fabric.SecurityCredentials
  type: Class
  summary: "<p>An abstract base class for types that represent security credentials. </p>"
  syntax:
    content: public class SecurityCredentials
- uid: system.fabric.X509Credentials
  parent: system.fabric
  href: system.fabric.X509Credentials.yml
  name: X509Credentials
  nameWithType: X509Credentials
  fullName: system.fabric.X509Credentials
  type: Class
  summary: "<p>Specifies the security credentials that are based upon X.509 certificates which are located in Windows certificate store. </p>"
  syntax:
    content: public class X509Credentials
- uid: system.fabric.WindowsCredentials
  parent: system.fabric
  href: system.fabric.WindowsCredentials.yml
  name: WindowsCredentials
  nameWithType: WindowsCredentials
  fullName: system.fabric.WindowsCredentials
  type: Class
  summary: "<p>Represents the active directory domain credential. </p>"
  syntax:
    content: public class WindowsCredentials
- uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  parent: microsoft.servicefabric.services.remoting.fabrictransport
  href: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.yml
  name: FabricTransportRemotingSettings
  nameWithType: FabricTransportRemotingSettings
  fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
  type: Class
  summary: "<p>Settings that configures the FabricTransport communication. </p>"
  syntax: *o1
