### YamlMime:JavaType
uid: "com.azure.core.models.CloudEventDataFormat"
fullName: "com.azure.core.models.CloudEventDataFormat"
name: "CloudEventDataFormat"
nameWithType: "CloudEventDataFormat"
summary: "Representation of the data format for a <xref uid=\"com.azure.core.models.CloudEvent\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CloudEvent\"></xref>.\n\nWhen constructing a <xref uid=\"com.azure.core.models.CloudEvent\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CloudEvent\"></xref> this is passed to determine the serialized format of the event's data. If <xref uid=\"com.azure.core.models.CloudEventDataFormat.BYTES\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#BYTES\"></xref> is used the data will be stored as a Base64 encoded string, otherwise it will be stored as a JSON serialized object."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.core.util.ExpandableStringEnum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.core.util.ExpandableStringEnum.<T>fromString(java.lang.String,java.lang.Class<T>)"
- "com.azure.core.util.ExpandableStringEnum.<T>values(java.lang.Class<T>)"
- "com.azure.core.util.ExpandableStringEnum.equals(java.lang.Object)"
- "com.azure.core.util.ExpandableStringEnum.hashCode()"
- "com.azure.core.util.ExpandableStringEnum.toString()"
- "java.lang.Object.clone()"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class CloudEventDataFormat extends ExpandableStringEnum<CloudEventDataFormat>"
constructors:
- "com.azure.core.models.CloudEventDataFormat.CloudEventDataFormat()"
fields:
- "com.azure.core.models.CloudEventDataFormat.BYTES"
- "com.azure.core.models.CloudEventDataFormat.JSON"
type: "class"
metadata: {}
package: "com.azure.core.models"
artifact: com.azure:azure-core:1.15.0
