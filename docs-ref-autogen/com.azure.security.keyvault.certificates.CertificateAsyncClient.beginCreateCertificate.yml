### YamlMime:JavaMember
uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.beginCreateCertificate*"
fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.beginCreateCertificate"
name: "beginCreateCertificate"
nameWithType: "CertificateAsyncClient.beginCreateCertificate"
members:
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.beginCreateCertificate(String certificateName, CertificatePolicy policy)"
  name: "beginCreateCertificate(String certificateName, CertificatePolicy policy)"
  nameWithType: "CertificateAsyncClient.beginCreateCertificate(String certificateName, CertificatePolicy policy)"
  summary: "Creates a new certificate. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.\n\n**Code Samples**\n\nCreate certificate is a long running operation. The <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"poller\"></xref> allows users to automatically poll on the create certificate operation status. It is possible to monitor each intermediate poll response during the poll operation.\n\n```java\nCertificatePolicy certPolicy = new CertificatePolicy(\"Self\", \"CN=SelfSignedJavaPkcs12\");\n certificateAsyncClient.beginCreateCertificate(\"certificateName\", certPolicy)\n     .subscribe(pollResponse -> {\n         System.out.println(\"---------------------------------------------------------------------------------\");\n         System.out.println(pollResponse.getStatus());\n         System.out.println(pollResponse.getValue().getStatus());\n         System.out.println(pollResponse.getValue().getStatusDetails());\n     });\n```"
  parameters:
  - description: "The name of the certificate to be created."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The policy of the certificate to be created."
    name: "policy"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<CertificateOperation,KeyVaultCertificateWithPolicy> beginCreateCertificate(String certificateName, CertificatePolicy policy)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> polling on the create certificate operation status."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateOperation?alt=com.azure.security.keyvault.certificates.models.CertificateOperation&text=CertificateOperation\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy,java.lang.Boolean,java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)"
  name: "beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)"
  nameWithType: "CertificateAsyncClient.beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)"
  summary: "Creates a new certificate. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.\n\n**Code Samples**\n\nCreate certificate is a long running operation. The <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"poller\"></xref> allows users to automatically poll on the create certificate operation status. It is possible to monitor each intermediate poll response during the poll operation.\n\n```java\nCertificatePolicy policy = new CertificatePolicy(\"Self\", \"CN=SelfSignedJavaPkcs12\");\n Map<String, String> tags = new HashMap<>();\n tags.put(\"foo\", \"bar\");\n certificateAsyncClient.beginCreateCertificate(\"certificateName\", policy, true, tags)\n     .subscribe(pollResponse -> {\n         System.out.println(\"---------------------------------------------------------------------------------\");\n         System.out.println(pollResponse.getStatus());\n         System.out.println(pollResponse.getValue().getStatus());\n         System.out.println(pollResponse.getValue().getStatusDetails());\n     });\n```"
  parameters:
  - description: "The name of the certificate to be created."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The policy of the certificate to be created."
    name: "policy"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />"
  - description: "The enabled status for the certificate."
    name: "isEnabled"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application specific metadata to set."
    name: "tags"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PollerFlux<CertificateOperation,KeyVaultCertificateWithPolicy> beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> polling on the create certificate operation status."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateOperation?alt=com.azure.security.keyvault.certificates.models.CertificateOperation&text=CertificateOperation\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.security.keyvault.certificates"
artifact: com.azure:azure-security-keyvault-certificates:4.1.4
