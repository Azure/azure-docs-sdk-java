### YamlMime:JavaType
uid: "com.azure.resourcemanager.storage.models.StorageAccount"
fullName: "com.azure.resourcemanager.storage.models.StorageAccount"
name: "StorageAccount"
nameWithType: "StorageAccount"
summary: "An immutable client-side representation of an Azure storage account."
syntax: "public interface **StorageAccount**</br> extends <xref href=\"com.azure.resourcemanager.resources.fluentcore.arm.models.GroupableResource?alt=com.azure.resourcemanager.resources.fluentcore.arm.models.GroupableResource&text=GroupableResource\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.storage.StorageManager?alt=com.azure.resourcemanager.storage.StorageManager&text=StorageManager\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.resourcemanager.storage.fluent.models.StorageAccountInner?alt=com.azure.resourcemanager.storage.fluent.models.StorageAccountInner&text=StorageAccountInner\" data-throw-if-not-resolved=\"False\" />&gt;, <xref href=\"com.azure.resourcemanager.resources.fluentcore.model.Refreshable?alt=com.azure.resourcemanager.resources.fluentcore.model.Refreshable&text=Refreshable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.storage.models.StorageAccount?alt=com.azure.resourcemanager.storage.models.StorageAccount&text=StorageAccount\" data-throw-if-not-resolved=\"False\" />&gt;, <xref href=\"com.azure.resourcemanager.resources.fluentcore.model.Updatable?alt=com.azure.resourcemanager.resources.fluentcore.model.Updatable&text=Updatable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.storage.models.StorageAccount.Update?alt=com.azure.resourcemanager.storage.models.StorageAccount.Update&text=Update\" data-throw-if-not-resolved=\"False\" />&gt;, <xref href=\"com.azure.resourcemanager.resources.fluentcore.collection.SupportsListingPrivateLinkResource?alt=com.azure.resourcemanager.resources.fluentcore.collection.SupportsListingPrivateLinkResource&text=SupportsListingPrivateLinkResource\" data-throw-if-not-resolved=\"False\" />, <xref href=\"com.azure.resourcemanager.resources.fluentcore.collection.SupportsListingPrivateEndpointConnection?alt=com.azure.resourcemanager.resources.fluentcore.collection.SupportsListingPrivateEndpointConnection&text=SupportsListingPrivateEndpointConnection\" data-throw-if-not-resolved=\"False\" />, <xref href=\"com.azure.resourcemanager.resources.fluentcore.collection.SupportsUpdatingPrivateEndpointConnection?alt=com.azure.resourcemanager.resources.fluentcore.collection.SupportsUpdatingPrivateEndpointConnection&text=SupportsUpdatingPrivateEndpointConnection\" data-throw-if-not-resolved=\"False\" />"
methods:
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.accessTier()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.accessTier()"
  name: "accessTier()"
  nameWithType: "StorageAccount.accessTier()"
  summary: "Gets access tier used for billing."
  modifiers:
  - "abstract"
  syntax: "public abstract AccessTier accessTier()"
  desc: "Gets access tier used for billing."
  returns:
    description: "access tier used for billing. Access tier cannot be changed more than once every 7 days (168 hours).\n     Access tier cannot be set for StandardLRS, StandardGRS, StandardRAGRS, or PremiumLRS account types. Possible\n     values include: 'Hot', 'Cool'."
    type: "<xref href=\"com.azure.resourcemanager.storage.models.AccessTier?alt=com.azure.resourcemanager.storage.models.AccessTier&text=AccessTier\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.accountStatuses()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.accountStatuses()"
  name: "accountStatuses()"
  nameWithType: "StorageAccount.accountStatuses()"
  summary: "Gets the status indicating whether the primary and secondary location of the storage account is available or unavailable."
  modifiers:
  - "abstract"
  syntax: "public abstract AccountStatuses accountStatuses()"
  desc: "Gets the status indicating whether the primary and secondary location of the storage account is available or unavailable."
  returns:
    description: "the status indicating whether the primary and secondary location of the storage account is available or\n     unavailable. Possible values include: 'Available', 'Unavailable'"
    type: "<xref href=\"com.azure.resourcemanager.storage.models.AccountStatuses?alt=com.azure.resourcemanager.storage.models.AccountStatuses&text=AccountStatuses\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.canAccessFromAzureServices()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.canAccessFromAzureServices()"
  name: "canAccessFromAzureServices()"
  nameWithType: "StorageAccount.canAccessFromAzureServices()"
  summary: "Checks storage account can be accessed from applications running on azure."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean canAccessFromAzureServices()"
  desc: "Checks storage account can be accessed from applications running on azure."
  returns:
    description: "true if storage can be accessed from application running on azure, false otherwise"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.canReadLogEntriesFromAnyNetwork()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.canReadLogEntriesFromAnyNetwork()"
  name: "canReadLogEntriesFromAnyNetwork()"
  nameWithType: "StorageAccount.canReadLogEntriesFromAnyNetwork()"
  summary: "Checks whether storage log entries can be read from any network."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean canReadLogEntriesFromAnyNetwork()"
  desc: "Checks whether storage log entries can be read from any network."
  returns:
    description: "true if storage log entries can be read from any network, false otherwise"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.canReadMetricsFromAnyNetwork()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.canReadMetricsFromAnyNetwork()"
  name: "canReadMetricsFromAnyNetwork()"
  nameWithType: "StorageAccount.canReadMetricsFromAnyNetwork()"
  summary: "Checks storage metrics can be read from any network."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean canReadMetricsFromAnyNetwork()"
  desc: "Checks storage metrics can be read from any network."
  returns:
    description: "true if storage metrics can be read from any network, false otherwise"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.creationTime()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.creationTime()"
  name: "creationTime()"
  nameWithType: "StorageAccount.creationTime()"
  summary: "Gets the creation date and time of the storage account in UTC."
  modifiers:
  - "abstract"
  syntax: "public abstract OffsetDateTime creationTime()"
  desc: "Gets the creation date and time of the storage account in UTC."
  returns:
    description: "the creation date and time of the storage account in UTC"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/OffsetDateTime.html\">OffsetDateTime</a>"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.customDomain()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.customDomain()"
  name: "customDomain()"
  nameWithType: "StorageAccount.customDomain()"
  summary: "Gets the user assigned custom domain assigned to this storage account."
  modifiers:
  - "abstract"
  syntax: "public abstract CustomDomain customDomain()"
  desc: "Gets the user assigned custom domain assigned to this storage account."
  returns:
    description: "the user assigned custom domain assigned to this storage account"
    type: "<xref href=\"com.azure.resourcemanager.storage.models.CustomDomain?alt=com.azure.resourcemanager.storage.models.CustomDomain&text=CustomDomain\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.encryptionKeySource()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.encryptionKeySource()"
  name: "encryptionKeySource()"
  nameWithType: "StorageAccount.encryptionKeySource()"
  summary: "The source of the key used for encryption."
  modifiers:
  - "abstract"
  syntax: "public abstract StorageAccountEncryptionKeySource encryptionKeySource()"
  desc: "The source of the key used for encryption.\n\n<xref uid=\"com.azure.resourcemanager.storage.models.StorageAccountEncryptionKeySource.MICROSOFT_STORAGE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageAccountEncryptionKeySource#MICROSOFT_STORAGE\"></xref> means that the Storage Account is encrypted using Microsoft-managed Key.\n\n<xref uid=\"com.azure.resourcemanager.storage.models.StorageAccountEncryptionKeySource.MICROSOFT_KEYVAULT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageAccountEncryptionKeySource#MICROSOFT_KEYVAULT\"></xref> means that the Storage Account is encrypted using Customer-managed Key."
  returns:
    description: "the source of the key used for encryption."
    type: "<xref href=\"com.azure.resourcemanager.storage.models.StorageAccountEncryptionKeySource?alt=com.azure.resourcemanager.storage.models.StorageAccountEncryptionKeySource&text=StorageAccountEncryptionKeySource\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.encryptionStatuses()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.encryptionStatuses()"
  name: "encryptionStatuses()"
  nameWithType: "StorageAccount.encryptionStatuses()"
  summary: "Gets the encryption statuses indexed by storage service type."
  modifiers:
  - "abstract"
  syntax: "public abstract Map<StorageService,StorageAccountEncryptionStatus> encryptionStatuses()"
  desc: "Gets the encryption statuses indexed by storage service type."
  returns:
    description: "the encryption statuses indexed by storage service type."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Map.html\">Map</a>&lt;<xref href=\"com.azure.resourcemanager.storage.models.StorageService?alt=com.azure.resourcemanager.storage.models.StorageService&text=StorageService\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.resourcemanager.storage.models.StorageAccountEncryptionStatus?alt=com.azure.resourcemanager.storage.models.StorageAccountEncryptionStatus&text=StorageAccountEncryptionStatus\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.endPoints()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.endPoints()"
  name: "endPoints()"
  nameWithType: "StorageAccount.endPoints()"
  summary: "Gets the URLs that are used to perform a retrieval of a public blob, queue or table object."
  modifiers:
  - "abstract"
  syntax: "public abstract PublicEndpoints endPoints()"
  desc: "Gets the URLs that are used to perform a retrieval of a public blob, queue or table object."
  returns:
    description: "the URLs that are used to perform a retrieval of a public blob, queue or table object. Note that\n     StandardZRS and PremiumLRS accounts only return the blob endpoint"
    type: "<xref href=\"com.azure.resourcemanager.storage.models.PublicEndpoints?alt=com.azure.resourcemanager.storage.models.PublicEndpoints&text=PublicEndpoints\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.getKeys()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.getKeys()"
  name: "getKeys()"
  nameWithType: "StorageAccount.getKeys()"
  summary: "Fetch the up-to-date access keys from Azure for this storage account."
  modifiers:
  - "abstract"
  syntax: "public abstract List<StorageAccountKey> getKeys()"
  desc: "Fetch the up-to-date access keys from Azure for this storage account."
  returns:
    description: "the access keys for this storage account"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.resourcemanager.storage.models.StorageAccountKey?alt=com.azure.resourcemanager.storage.models.StorageAccountKey&text=StorageAccountKey\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.getKeysAsync()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.getKeysAsync()"
  name: "getKeysAsync()"
  nameWithType: "StorageAccount.getKeysAsync()"
  summary: "Fetch the up-to-date access keys from Azure for this storage account asynchronously."
  modifiers:
  - "abstract"
  syntax: "public abstract Mono<List<StorageAccountKey>> getKeysAsync()"
  desc: "Fetch the up-to-date access keys from Azure for this storage account asynchronously."
  returns:
    description: "a representation of the deferred computation of this call, returning the access keys"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.resourcemanager.storage.models.StorageAccountKey?alt=com.azure.resourcemanager.storage.models.StorageAccountKey&text=StorageAccountKey\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.identityTypeForCustomerEncryptionKey()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.identityTypeForCustomerEncryptionKey()"
  name: "identityTypeForCustomerEncryptionKey()"
  nameWithType: "StorageAccount.identityTypeForCustomerEncryptionKey()"
  summary: "Type of the Managed Service Identity used to access Key<wbr>Vault for encryption."
  modifiers:
  - "abstract"
  syntax: "public abstract IdentityType identityTypeForCustomerEncryptionKey()"
  desc: "Type of the Managed Service Identity used to access KeyVault for encryption.\n\nThis property only makes sense when the storage account is encrypted using Customer-managed keys, meaning <xref uid=\"com.azure.resourcemanager.storage.models.StorageAccount.encryptionKeySource()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageAccount#encryptionKeySource()\"></xref> is <xref uid=\"com.azure.resourcemanager.storage.models.StorageAccountEncryptionKeySource.MICROSOFT_KEYVAULT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageAccountEncryptionKeySource#MICROSOFT_KEYVAULT\"></xref>."
  returns:
    description: "type of the Managed Service Identity used to access KeyVault for encryption,\n         <code>null</code> if <xref uid=\"com.azure.resourcemanager.storage.models.StorageAccount.encryptionKeySource()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageAccount#encryptionKeySource()\"></xref> is <xref uid=\"com.azure.resourcemanager.storage.models.StorageAccountEncryptionKeySource.MICROSOFT_STORAGE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageAccountEncryptionKeySource#MICROSOFT_STORAGE\"></xref>"
    type: "<xref href=\"com.azure.resourcemanager.storage.models.IdentityType?alt=com.azure.resourcemanager.storage.models.IdentityType&text=IdentityType\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.infrastructureEncryptionEnabled()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.infrastructureEncryptionEnabled()"
  name: "infrastructureEncryptionEnabled()"
  nameWithType: "StorageAccount.infrastructureEncryptionEnabled()"
  summary: "Checks whether infrastructure encryption for Azure Storage data is enabled."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean infrastructureEncryptionEnabled()"
  desc: "Checks whether infrastructure encryption for Azure Storage data is enabled."
  returns:
    description: "whether infrastructure encryption for Azure Storage data is enabled."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.ipAddressRangesWithAccess()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.ipAddressRangesWithAccess()"
  name: "ipAddressRangesWithAccess()"
  nameWithType: "StorageAccount.ipAddressRangesWithAccess()"
  summary: "Gets the list of ip address ranges having access to the storage account."
  modifiers:
  - "abstract"
  syntax: "public abstract List<String> ipAddressRangesWithAccess()"
  desc: "Gets the list of ip address ranges having access to the storage account."
  returns:
    description: "the list of ip address ranges having access to the storage account."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.ipAddressesWithAccess()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.ipAddressesWithAccess()"
  name: "ipAddressesWithAccess()"
  nameWithType: "StorageAccount.ipAddressesWithAccess()"
  summary: "Gets the list of ip addresses having access to the storage account."
  modifiers:
  - "abstract"
  syntax: "public abstract List<String> ipAddressesWithAccess()"
  desc: "Gets the list of ip addresses having access to the storage account."
  returns:
    description: "the list of ip addresses having access to the storage account."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.isAccessAllowedFromAllNetworks()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.isAccessAllowedFromAllNetworks()"
  name: "isAccessAllowedFromAllNetworks()"
  nameWithType: "StorageAccount.isAccessAllowedFromAllNetworks()"
  summary: "Checks whether authenticated application from any network is allowed to access the storage account."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isAccessAllowedFromAllNetworks()"
  desc: "Checks whether authenticated application from any network is allowed to access the storage account."
  returns:
    description: "true if authenticated application from any network is allowed to access the storage account, false if\n     only application from whitelisted network (subnet, ip address, ip address range) can access the storage\n     account."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.isAllowCrossTenantReplication()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.isAllowCrossTenantReplication()"
  name: "isAllowCrossTenantReplication()"
  nameWithType: "StorageAccount.isAllowCrossTenantReplication()"
  summary: "Checks whether cross tenant replication is allowed."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isAllowCrossTenantReplication()"
  desc: "Checks whether cross tenant replication is allowed."
  returns:
    description: "true if cross tenant replication is enabled, false otherwise"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.isAzureFilesAadIntegrationEnabled()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.isAzureFilesAadIntegrationEnabled()"
  name: "isAzureFilesAadIntegrationEnabled()"
  nameWithType: "StorageAccount.isAzureFilesAadIntegrationEnabled()"
  summary: "Checks whether Aad Integration is enabled for files on this storage account."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isAzureFilesAadIntegrationEnabled()"
  desc: "Checks whether Aad Integration is enabled for files on this storage account."
  returns:
    description: "true if Aad integration is enabled, false otherwise"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.isBlobPublicAccessAllowed()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.isBlobPublicAccessAllowed()"
  name: "isBlobPublicAccessAllowed()"
  nameWithType: "StorageAccount.isBlobPublicAccessAllowed()"
  summary: "Checks whether blob public access is allowed."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isBlobPublicAccessAllowed()"
  desc: "Checks whether blob public access is allowed."
  returns:
    description: "true if blob public access is allowed, false otherwise"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.isDefaultToOAuthAuthentication()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.isDefaultToOAuthAuthentication()"
  name: "isDefaultToOAuthAuthentication()"
  nameWithType: "StorageAccount.isDefaultToOAuthAuthentication()"
  summary: "Checks whether default to oauth authentication is allowed."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isDefaultToOAuthAuthentication()"
  desc: "Checks whether default to oauth authentication is allowed."
  returns:
    description: "true if default to oauth authentication is enabled, false otherwise"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.isHnsEnabled()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.isHnsEnabled()"
  name: "isHnsEnabled()"
  nameWithType: "StorageAccount.isHnsEnabled()"
  summary: "Checks whether Hns is enabled on this storage account."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isHnsEnabled()"
  desc: "Checks whether Hns is enabled on this storage account."
  returns:
    description: "true if Hns is enabled, false otherwise"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.isHttpsTrafficOnly()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.isHttpsTrafficOnly()"
  name: "isHttpsTrafficOnly()"
  nameWithType: "StorageAccount.isHttpsTrafficOnly()"
  summary: "Checks whether storage account only allow HTTPS traffic."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isHttpsTrafficOnly()"
  desc: "Checks whether storage account only allow HTTPS traffic."
  returns:
    description: "true if only allow HTTPS traffic, false otherwise"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.isLargeFileSharesEnabled()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.isLargeFileSharesEnabled()"
  name: "isLargeFileSharesEnabled()"
  nameWithType: "StorageAccount.isLargeFileSharesEnabled()"
  summary: "Checks whether large file shares enabled on this storage account."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isLargeFileSharesEnabled()"
  desc: "Checks whether large file shares enabled on this storage account."
  returns:
    description: "true if large file shares is enabled, false otherwise"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.isSharedKeyAccessAllowed()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.isSharedKeyAccessAllowed()"
  name: "isSharedKeyAccessAllowed()"
  nameWithType: "StorageAccount.isSharedKeyAccessAllowed()"
  summary: "Checks whether shared key access is allowed."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isSharedKeyAccessAllowed()"
  desc: "Checks whether shared key access is allowed."
  returns:
    description: "true if shared key access is allowed, false otherwise"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.kind()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.kind()"
  name: "kind()"
  nameWithType: "StorageAccount.kind()"
  summary: "Gets the kind of the storage account."
  modifiers:
  - "abstract"
  syntax: "public abstract Kind kind()"
  desc: "Gets the kind of the storage account."
  returns:
    description: "the kind of the storage account. Possible values are 'Storage', 'BlobStorage'."
    type: "<xref href=\"com.azure.resourcemanager.storage.models.Kind?alt=com.azure.resourcemanager.storage.models.Kind&text=Kind\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.lastGeoFailoverTime()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.lastGeoFailoverTime()"
  name: "lastGeoFailoverTime()"
  nameWithType: "StorageAccount.lastGeoFailoverTime()"
  summary: "Gets the timestamp of the most recent instance of a failover to the secondary location."
  modifiers:
  - "abstract"
  syntax: "public abstract OffsetDateTime lastGeoFailoverTime()"
  desc: "Gets the timestamp of the most recent instance of a failover to the secondary location."
  returns:
    description: "the timestamp of the most recent instance of a failover to the secondary location. Only the most recent\n     timestamp is retained. This element is not returned if there has never been a failover instance. Only\n     available if the accountType is StandardGRS or StandardRAGRS"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/OffsetDateTime.html\">OffsetDateTime</a>"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.minimumTlsVersion()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.minimumTlsVersion()"
  name: "minimumTlsVersion()"
  nameWithType: "StorageAccount.minimumTlsVersion()"
  summary: "Gets the minimum TLS version for HTTPS traffic."
  modifiers:
  - "abstract"
  syntax: "public abstract MinimumTlsVersion minimumTlsVersion()"
  desc: "Gets the minimum TLS version for HTTPS traffic."
  returns:
    description: "the minimum TLS version for HTTPS traffic."
    type: "<xref href=\"com.azure.resourcemanager.storage.models.MinimumTlsVersion?alt=com.azure.resourcemanager.storage.models.MinimumTlsVersion&text=MinimumTlsVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.networkSubnetsWithAccess()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.networkSubnetsWithAccess()"
  name: "networkSubnetsWithAccess()"
  nameWithType: "StorageAccount.networkSubnetsWithAccess()"
  summary: "Gets the list of resource id of virtual network subnet having access to the storage account."
  modifiers:
  - "abstract"
  syntax: "public abstract List<String> networkSubnetsWithAccess()"
  desc: "Gets the list of resource id of virtual network subnet having access to the storage account."
  returns:
    description: "the list of resource id of virtual network subnet having access to the storage account."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.provisioningState()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.provisioningState()"
  name: "provisioningState()"
  nameWithType: "StorageAccount.provisioningState()"
  summary: "Gets the status of the storage account."
  modifiers:
  - "abstract"
  syntax: "public abstract ProvisioningState provisioningState()"
  desc: "Gets the status of the storage account."
  returns:
    description: "the status of the storage account at the time the operation was called. Possible values include:\n     'Creating', 'ResolvingDNS', 'Succeeded'"
    type: "<xref href=\"com.azure.resourcemanager.storage.models.ProvisioningState?alt=com.azure.resourcemanager.storage.models.ProvisioningState&text=ProvisioningState\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.publicNetworkAccess()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.publicNetworkAccess()"
  name: "publicNetworkAccess()"
  nameWithType: "StorageAccount.publicNetworkAccess()"
  summary: "Whether the storage account can be accessed from public network."
  modifiers:
  - "abstract"
  syntax: "public abstract PublicNetworkAccess publicNetworkAccess()"
  desc: "Whether the storage account can be accessed from public network."
  returns:
    description: "whether the storage account can be accessed from public network."
    type: "<xref href=\"com.azure.resourcemanager.storage.models.PublicNetworkAccess?alt=com.azure.resourcemanager.storage.models.PublicNetworkAccess&text=PublicNetworkAccess\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.regenerateKey(java.lang.String)"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.regenerateKey(String keyName)"
  name: "regenerateKey(String keyName)"
  nameWithType: "StorageAccount.regenerateKey(String keyName)"
  summary: "Regenerates the access keys for this storage account."
  modifiers:
  - "abstract"
  parameters:
  - description: "if the key name"
    name: "keyName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract List<StorageAccountKey> regenerateKey(String keyName)"
  desc: "Regenerates the access keys for this storage account."
  returns:
    description: "the generated access keys for this storage account"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.resourcemanager.storage.models.StorageAccountKey?alt=com.azure.resourcemanager.storage.models.StorageAccountKey&text=StorageAccountKey\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.regenerateKeyAsync(java.lang.String)"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.regenerateKeyAsync(String keyName)"
  name: "regenerateKeyAsync(String keyName)"
  nameWithType: "StorageAccount.regenerateKeyAsync(String keyName)"
  summary: "Regenerates the access keys for this storage account asynchronously."
  modifiers:
  - "abstract"
  parameters:
  - description: "if the key name"
    name: "keyName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract Mono<List<StorageAccountKey>> regenerateKeyAsync(String keyName)"
  desc: "Regenerates the access keys for this storage account asynchronously."
  returns:
    description: "a representation of the deferred computation of this call, returning the regenerated access key"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.resourcemanager.storage.models.StorageAccountKey?alt=com.azure.resourcemanager.storage.models.StorageAccountKey&text=StorageAccountKey\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.skuType()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.skuType()"
  name: "skuType()"
  nameWithType: "StorageAccount.skuType()"
  summary: "Gets the sku of this storage account."
  modifiers:
  - "abstract"
  syntax: "public abstract StorageAccountSkuType skuType()"
  desc: "Gets the sku of this storage account."
  returns:
    description: "the sku of this storage account."
    type: "<xref href=\"com.azure.resourcemanager.storage.models.StorageAccountSkuType?alt=com.azure.resourcemanager.storage.models.StorageAccountSkuType&text=StorageAccountSkuType\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.systemAssignedManagedServiceIdentityPrincipalId()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.systemAssignedManagedServiceIdentityPrincipalId()"
  name: "systemAssignedManagedServiceIdentityPrincipalId()"
  nameWithType: "StorageAccount.systemAssignedManagedServiceIdentityPrincipalId()"
  summary: "Gets the Managed Service Identity specific Active Directory service principal ID assigned to the storage account."
  modifiers:
  - "abstract"
  syntax: "public abstract String systemAssignedManagedServiceIdentityPrincipalId()"
  desc: "Gets the Managed Service Identity specific Active Directory service principal ID assigned to the storage account."
  returns:
    description: "the Managed Service Identity specific Active Directory service principal ID assigned to the storage\n     account."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.systemAssignedManagedServiceIdentityTenantId()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.systemAssignedManagedServiceIdentityTenantId()"
  name: "systemAssignedManagedServiceIdentityTenantId()"
  nameWithType: "StorageAccount.systemAssignedManagedServiceIdentityTenantId()"
  summary: "Gets the Managed Service Identity specific Active Directory tenant ID assigned to the storage account."
  modifiers:
  - "abstract"
  syntax: "public abstract String systemAssignedManagedServiceIdentityTenantId()"
  desc: "Gets the Managed Service Identity specific Active Directory tenant ID assigned to the storage account."
  returns:
    description: "the Managed Service Identity specific Active Directory tenant ID assigned to the storage account."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.userAssignedIdentityIdForCustomerEncryptionKey()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.userAssignedIdentityIdForCustomerEncryptionKey()"
  name: "userAssignedIdentityIdForCustomerEncryptionKey()"
  nameWithType: "StorageAccount.userAssignedIdentityIdForCustomerEncryptionKey()"
  summary: "User-assigned Managed Service Identity ID to access the Key<wbr>Vault for encryption."
  modifiers:
  - "abstract"
  syntax: "public abstract String userAssignedIdentityIdForCustomerEncryptionKey()"
  desc: "User-assigned Managed Service Identity ID to access the KeyVault for encryption.\n\nThis property only makes sense when the storage account is encrypted using Customer-managed keys, meaning <xref uid=\"com.azure.resourcemanager.storage.models.StorageAccount.encryptionKeySource()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageAccount#encryptionKeySource()\"></xref> is <xref uid=\"com.azure.resourcemanager.storage.models.StorageAccountEncryptionKeySource.MICROSOFT_KEYVAULT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageAccountEncryptionKeySource#MICROSOFT_KEYVAULT\"></xref> and <xref uid=\"com.azure.resourcemanager.storage.models.StorageAccount.identityTypeForCustomerEncryptionKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageAccount#identityTypeForCustomerEncryptionKey()\"></xref> is <xref uid=\"com.azure.resourcemanager.storage.models.IdentityType.USER_ASSIGNED\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IdentityType#USER_ASSIGNED\"></xref>."
  returns:
    description: "user-assigned identity ID used to access KeyVault for encryption,\n         null if <xref uid=\"com.azure.resourcemanager.storage.models.StorageAccount.encryptionKeySource()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageAccount#encryptionKeySource()\"></xref> is <xref uid=\"com.azure.resourcemanager.storage.models.StorageAccountEncryptionKeySource.MICROSOFT_STORAGE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageAccountEncryptionKeySource#MICROSOFT_STORAGE\"></xref> or\n         <xref uid=\"com.azure.resourcemanager.storage.models.StorageAccount.identityTypeForCustomerEncryptionKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageAccount#identityTypeForCustomerEncryptionKey()\"></xref> is not <xref uid=\"com.azure.resourcemanager.storage.models.IdentityType.USER_ASSIGNED\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IdentityType#USER_ASSIGNED\"></xref>"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.resourcemanager.storage.models.StorageAccount.userAssignedManagedServiceIdentityIds()"
  fullName: "com.azure.resourcemanager.storage.models.StorageAccount.userAssignedManagedServiceIdentityIds()"
  name: "userAssignedManagedServiceIdentityIds()"
  nameWithType: "StorageAccount.userAssignedManagedServiceIdentityIds()"
  summary: "Gets the resource ids of User Assigned Managed Service Identities associated with the storage account."
  modifiers:
  - "abstract"
  syntax: "public abstract Set<String> userAssignedManagedServiceIdentityIds()"
  desc: "Gets the resource ids of User Assigned Managed Service Identities associated with the storage account."
  returns:
    description: "the resource ids of User Assigned Managed Service Identities associated with the storage account."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Set.html\">Set</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
type: "interface"
desc: "An immutable client-side representation of an Azure storage account."
implements:
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.arm.models.GroupableResource?alt=com.azure.resourcemanager.resources.fluentcore.arm.models.GroupableResource&text=GroupableResource\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.storage.StorageManager?alt=com.azure.resourcemanager.storage.StorageManager&text=StorageManager\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.resourcemanager.storage.fluent.models.StorageAccountInner?alt=com.azure.resourcemanager.storage.fluent.models.StorageAccountInner&text=StorageAccountInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.collection.SupportsListingPrivateEndpointConnection?alt=com.azure.resourcemanager.resources.fluentcore.collection.SupportsListingPrivateEndpointConnection&text=SupportsListingPrivateEndpointConnection\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.collection.SupportsListingPrivateLinkResource?alt=com.azure.resourcemanager.resources.fluentcore.collection.SupportsListingPrivateLinkResource&text=SupportsListingPrivateLinkResource\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.collection.SupportsUpdatingPrivateEndpointConnection?alt=com.azure.resourcemanager.resources.fluentcore.collection.SupportsUpdatingPrivateEndpointConnection&text=SupportsUpdatingPrivateEndpointConnection\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.model.Refreshable?alt=com.azure.resourcemanager.resources.fluentcore.model.Refreshable&text=Refreshable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.storage.models.StorageAccount?alt=com.azure.resourcemanager.storage.models.StorageAccount&text=StorageAccount\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.model.Updatable?alt=com.azure.resourcemanager.resources.fluentcore.model.Updatable&text=Updatable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.storage.models.StorageAccount.Update?alt=com.azure.resourcemanager.storage.models.StorageAccount.Update&text=Update\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.resourcemanager.storage.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-storage:2.47.0
