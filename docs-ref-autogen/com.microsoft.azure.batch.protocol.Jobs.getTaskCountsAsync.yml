### YamlMime:JavaMember
uid: "com.microsoft.azure.batch.protocol.Jobs.getTaskCountsAsync*"
fullName: "com.microsoft.azure.batch.protocol.Jobs.getTaskCountsAsync"
name: "getTaskCountsAsync"
nameWithType: "Jobs.getTaskCountsAsync"
members:
- uid: "com.microsoft.azure.batch.protocol.Jobs.getTaskCountsAsync(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Jobs.getTaskCountsAsync(String jobId)"
  name: "getTaskCountsAsync(String jobId)"
  nameWithType: "Jobs.getTaskCountsAsync(String jobId)"
  summary: "Gets the Task counts for the specified Job. Task counts provide a count of the Tasks by active, running or completed Task state, and a count of Tasks which succeeded or failed. Tasks in the preparing state are counted as running."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<TaskCounts> getTaskCountsAsync(String jobId)"
  returns:
    description: "the observable to the TaskCounts object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskCounts?alt=com.microsoft.azure.batch.protocol.models.TaskCounts&text=TaskCounts\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Jobs.getTaskCountsAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.JobGetTaskCountsOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Jobs.getTaskCountsAsync(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions)"
  name: "getTaskCountsAsync(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions)"
  nameWithType: "Jobs.getTaskCountsAsync(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions)"
  summary: "Gets the Task counts for the specified Job. Task counts provide a count of the Tasks by active, running or completed Task state, and a count of Tasks which succeeded or failed. Tasks in the preparing state are counted as running."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "jobGetTaskCountsOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.JobGetTaskCountsOptions?alt=com.microsoft.azure.batch.protocol.models.JobGetTaskCountsOptions&text=JobGetTaskCountsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<TaskCounts> getTaskCountsAsync(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions)"
  returns:
    description: "the observable to the TaskCounts object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskCounts?alt=com.microsoft.azure.batch.protocol.models.TaskCounts&text=TaskCounts\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Jobs.getTaskCountsAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.JobGetTaskCountsOptions,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.TaskCounts>)"
  fullName: "com.microsoft.azure.batch.protocol.Jobs.getTaskCountsAsync(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions, ServiceCallback<TaskCounts> serviceCallback)"
  name: "getTaskCountsAsync(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions, ServiceCallback<TaskCounts> serviceCallback)"
  nameWithType: "Jobs.getTaskCountsAsync(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions, ServiceCallback<TaskCounts> serviceCallback)"
  summary: "Gets the Task counts for the specified Job. Task counts provide a count of the Tasks by active, running or completed Task state, and a count of Tasks which succeeded or failed. Tasks in the preparing state are counted as running."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "jobGetTaskCountsOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.JobGetTaskCountsOptions?alt=com.microsoft.azure.batch.protocol.models.JobGetTaskCountsOptions&text=JobGetTaskCountsOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskCounts?alt=com.microsoft.azure.batch.protocol.models.TaskCounts&text=TaskCounts\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<TaskCounts> getTaskCountsAsync(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions, ServiceCallback<TaskCounts> serviceCallback)"
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\">ServiceFuture</xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskCounts?alt=com.microsoft.azure.batch.protocol.models.TaskCounts&text=TaskCounts\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Jobs.getTaskCountsAsync(java.lang.String,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.TaskCounts>)"
  fullName: "com.microsoft.azure.batch.protocol.Jobs.getTaskCountsAsync(String jobId, ServiceCallback<TaskCounts> serviceCallback)"
  name: "getTaskCountsAsync(String jobId, ServiceCallback<TaskCounts> serviceCallback)"
  nameWithType: "Jobs.getTaskCountsAsync(String jobId, ServiceCallback<TaskCounts> serviceCallback)"
  summary: "Gets the Task counts for the specified Job. Task counts provide a count of the Tasks by active, running or completed Task state, and a count of Tasks which succeeded or failed. Tasks in the preparing state are counted as running."
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskCounts?alt=com.microsoft.azure.batch.protocol.models.TaskCounts&text=TaskCounts\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<TaskCounts> getTaskCountsAsync(String jobId, ServiceCallback<TaskCounts> serviceCallback)"
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\">ServiceFuture</xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskCounts?alt=com.microsoft.azure.batch.protocol.models.TaskCounts&text=TaskCounts\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.microsoft.azure.batch.protocol"
artifact: com.microsoft.azure:azure-batch:8.0.0
