### YamlMime:JavaType
uid: "com.azure.cosmos.CosmosClientBuilder"
fullName: "com.azure.cosmos.CosmosClientBuilder"
name: "CosmosClientBuilder"
nameWithType: "CosmosClientBuilder"
summary: "Helper class to build CosmosAsyncClient <xref uid=\"com.azure.cosmos.CosmosAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosAsyncClient\"></xref> and CosmosClient <xref uid=\"com.azure.cosmos.CosmosClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosClient\"></xref> instances as logical representation of the Azure Cosmos database service.\n\nWhen building client, endpoint() and key() are mandatory APIs, without these the initialization will fail.\n\nThough consistencyLevel is not mandatory, but we strongly suggest to pay attention to this API when building client. By default, account consistency level is used if none is provided.\n\nBy default, direct connection mode is used if none specified.\n\n```java\nBuilding Cosmos Async Client minimal APIs (without any customized configurations)\n \n CosmosAsyncClient client = new CosmosClientBuilder()\n         .endpoint(serviceEndpoint)\n         .key(key)\n         .buildAsyncClient();\n```\n\n```java\nBuilding Cosmos Async Client with customizations\n \n CosmosAsyncClient client = new CosmosClientBuilder()\n         .endpoint(serviceEndpoint)\n         .key(key)\n         .directMode(directConnectionConfig, gatewayConnectionConfig)\n         .consistencyLevel(ConsistencyLevel.SESSION)\n         .connectionSharingAcrossClientsEnabled(true)\n         .contentResponseOnWriteEnabled(true)\n         .userAgentSuffix(\"my-application1-client\")\n         .preferredRegions(Collections.singletonList(\"West US\", \"East US\"))\n         .buildAsyncClient();\n```\n\n```java\nBuilding Cosmos Sync Client minimal APIs (without any customized configurations)\n \n CosmosClient client = new CosmosClientBuilder()\n         .endpoint(serviceEndpoint)\n         .key(key)\n         .buildClient();\n```\n\n```java\nBuilding Cosmos Sync Client with customizations\n \n CosmosClient client = new CosmosClientBuilder()\n         .endpoint(serviceEndpoint)\n         .key(key)\n         .directMode(directConnectionConfig, gatewayConnectionConfig)\n         .consistencyLevel(ConsistencyLevel.SESSION)\n         .connectionSharingAcrossClientsEnabled(true)\n         .contentResponseOnWriteEnabled(true)\n         .userAgentSuffix(\"my-application1-client\")\n         .preferredRegions(Collections.singletonList(\"West US\", \"East US\"))\n         .buildClient();\n```"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class CosmosClientBuilder"
constructors:
- "com.azure.cosmos.CosmosClientBuilder.CosmosClientBuilder()"
methods:
- "com.azure.cosmos.CosmosClientBuilder.buildAsyncClient()"
- "com.azure.cosmos.CosmosClientBuilder.buildClient()"
- "com.azure.cosmos.CosmosClientBuilder.clientTelemetryEnabled(boolean)"
- "com.azure.cosmos.CosmosClientBuilder.connectionSharingAcrossClientsEnabled(boolean)"
- "com.azure.cosmos.CosmosClientBuilder.consistencyLevel(com.azure.cosmos.ConsistencyLevel)"
- "com.azure.cosmos.CosmosClientBuilder.contentResponseOnWriteEnabled(boolean)"
- "com.azure.cosmos.CosmosClientBuilder.credential(com.azure.core.credential.AzureKeyCredential)"
- "com.azure.cosmos.CosmosClientBuilder.credential(com.azure.core.credential.TokenCredential)"
- "com.azure.cosmos.CosmosClientBuilder.directMode()"
- "com.azure.cosmos.CosmosClientBuilder.directMode(com.azure.cosmos.DirectConnectionConfig)"
- "com.azure.cosmos.CosmosClientBuilder.directMode(com.azure.cosmos.DirectConnectionConfig,com.azure.cosmos.GatewayConnectionConfig)"
- "com.azure.cosmos.CosmosClientBuilder.endpoint(java.lang.String)"
- "com.azure.cosmos.CosmosClientBuilder.endpointDiscoveryEnabled(boolean)"
- "com.azure.cosmos.CosmosClientBuilder.gatewayMode()"
- "com.azure.cosmos.CosmosClientBuilder.gatewayMode(com.azure.cosmos.GatewayConnectionConfig)"
- "com.azure.cosmos.CosmosClientBuilder.key(java.lang.String)"
- "com.azure.cosmos.CosmosClientBuilder.multipleWriteRegionsEnabled(boolean)"
- "com.azure.cosmos.CosmosClientBuilder.permissions(java.util.List<com.azure.cosmos.models.CosmosPermissionProperties>)"
- "com.azure.cosmos.CosmosClientBuilder.preferredRegions(java.util.List<java.lang.String>)"
- "com.azure.cosmos.CosmosClientBuilder.readRequestsFallbackEnabled(boolean)"
- "com.azure.cosmos.CosmosClientBuilder.resourceToken(java.lang.String)"
- "com.azure.cosmos.CosmosClientBuilder.sessionCapturingOverrideEnabled(boolean)"
- "com.azure.cosmos.CosmosClientBuilder.throttlingRetryOptions(com.azure.cosmos.ThrottlingRetryOptions)"
- "com.azure.cosmos.CosmosClientBuilder.userAgentSuffix(java.lang.String)"
type: "class"
metadata: {}
package: "com.azure.cosmos"
artifact: com.azure:azure-cosmos:4.11.0
