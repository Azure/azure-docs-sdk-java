### YamlMime:JavaType
uid: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource"
fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource"
name: "SqlContainerGetPropertiesResource"
nameWithType: "SqlContainerGetPropertiesResource"
summary: "The Sql<wbr>Container<wbr>Get<wbr>Properties<wbr>Resource model."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.resourcemanager.cosmos.models.SqlContainerResource?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.resourcemanager.cosmos.models.SqlContainerResource.analyticalStorageTtl()"
- "com.azure.resourcemanager.cosmos.models.SqlContainerResource.conflictResolutionPolicy()"
- "com.azure.resourcemanager.cosmos.models.SqlContainerResource.defaultTtl()"
- "com.azure.resourcemanager.cosmos.models.SqlContainerResource.id()"
- "com.azure.resourcemanager.cosmos.models.SqlContainerResource.indexingPolicy()"
- "com.azure.resourcemanager.cosmos.models.SqlContainerResource.partitionKey()"
- "com.azure.resourcemanager.cosmos.models.SqlContainerResource.uniqueKeyPolicy()"
- "com.azure.resourcemanager.cosmos.models.SqlContainerResource.validate()"
- "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withAnalyticalStorageTtl(java.lang.Long)"
- "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withConflictResolutionPolicy(com.azure.resourcemanager.cosmos.models.ConflictResolutionPolicy)"
- "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withDefaultTtl(java.lang.Integer)"
- "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withId(java.lang.String)"
- "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withIndexingPolicy(com.azure.resourcemanager.cosmos.models.IndexingPolicy)"
- "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withPartitionKey(com.azure.resourcemanager.cosmos.models.ContainerPartitionKey)"
- "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withUniqueKeyPolicy(com.azure.resourcemanager.cosmos.models.UniqueKeyPolicy)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class SqlContainerGetPropertiesResource extends SqlContainerResource"
constructors:
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.SqlContainerGetPropertiesResource()"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.SqlContainerGetPropertiesResource()"
  name: "SqlContainerGetPropertiesResource()"
  nameWithType: "SqlContainerGetPropertiesResource.SqlContainerGetPropertiesResource()"
  syntax: "public SqlContainerGetPropertiesResource()"
methods:
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.etag()"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.etag()"
  name: "etag()"
  nameWithType: "SqlContainerGetPropertiesResource.etag()"
  summary: "Get the etag property: A system generated property representing the resource etag required for optimistic concurrency control."
  syntax: "public String etag()"
  desc: "Get the etag property: A system generated property representing the resource etag required for optimistic concurrency control."
  returns:
    description: "the etag value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.rid()"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.rid()"
  name: "rid()"
  nameWithType: "SqlContainerGetPropertiesResource.rid()"
  summary: "Get the rid property: A system generated property."
  syntax: "public String rid()"
  desc: "Get the rid property: A system generated property. A unique identifier."
  returns:
    description: "the rid value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.ts()"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.ts()"
  name: "ts()"
  nameWithType: "SqlContainerGetPropertiesResource.ts()"
  summary: "Get the ts property: A system generated property that denotes the last updated timestamp of the resource."
  syntax: "public Float ts()"
  desc: "Get the ts property: A system generated property that denotes the last updated timestamp of the resource."
  returns:
    description: "the ts value."
    type: "<xref href=\"java.lang.Float?alt=java.lang.Float&text=Float\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.validate()"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.validate()"
  name: "validate()"
  nameWithType: "SqlContainerGetPropertiesResource.validate()"
  summary: "Validates the instance."
  overridden: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.validate()"
  syntax: "public void validate()"
  desc: "Validates the instance."
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.withAnalyticalStorageTtl(java.lang.Long)"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.withAnalyticalStorageTtl(Long analyticalStorageTtl)"
  name: "withAnalyticalStorageTtl(Long analyticalStorageTtl)"
  nameWithType: "SqlContainerGetPropertiesResource.withAnalyticalStorageTtl(Long analyticalStorageTtl)"
  summary: "Set the analytical<wbr>Storage<wbr>Ttl property: Analytical TTL."
  overridden: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withAnalyticalStorageTtl(java.lang.Long)"
  parameters:
  - name: "analyticalStorageTtl"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SqlContainerGetPropertiesResource withAnalyticalStorageTtl(Long analyticalStorageTtl)"
  desc: "Set the analyticalStorageTtl property: Analytical TTL."
  returns:
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource?alt=com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource&text=SqlContainerGetPropertiesResource\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.withConflictResolutionPolicy(com.azure.resourcemanager.cosmos.models.ConflictResolutionPolicy)"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.withConflictResolutionPolicy(ConflictResolutionPolicy conflictResolutionPolicy)"
  name: "withConflictResolutionPolicy(ConflictResolutionPolicy conflictResolutionPolicy)"
  nameWithType: "SqlContainerGetPropertiesResource.withConflictResolutionPolicy(ConflictResolutionPolicy conflictResolutionPolicy)"
  summary: "Set the conflict<wbr>Resolution<wbr>Policy property: The conflict resolution policy for the container."
  overridden: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withConflictResolutionPolicy(com.azure.resourcemanager.cosmos.models.ConflictResolutionPolicy)"
  parameters:
  - name: "conflictResolutionPolicy"
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.ConflictResolutionPolicy?alt=com.azure.resourcemanager.cosmos.models.ConflictResolutionPolicy&text=ConflictResolutionPolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SqlContainerGetPropertiesResource withConflictResolutionPolicy(ConflictResolutionPolicy conflictResolutionPolicy)"
  desc: "Set the conflictResolutionPolicy property: The conflict resolution policy for the container."
  returns:
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource?alt=com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource&text=SqlContainerGetPropertiesResource\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.withDefaultTtl(java.lang.Integer)"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.withDefaultTtl(Integer defaultTtl)"
  name: "withDefaultTtl(Integer defaultTtl)"
  nameWithType: "SqlContainerGetPropertiesResource.withDefaultTtl(Integer defaultTtl)"
  summary: "Set the default<wbr>Ttl property: Default time to live."
  overridden: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withDefaultTtl(java.lang.Integer)"
  parameters:
  - name: "defaultTtl"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SqlContainerGetPropertiesResource withDefaultTtl(Integer defaultTtl)"
  desc: "Set the defaultTtl property: Default time to live."
  returns:
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource?alt=com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource&text=SqlContainerGetPropertiesResource\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.withId(java.lang.String)"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.withId(String id)"
  name: "withId(String id)"
  nameWithType: "SqlContainerGetPropertiesResource.withId(String id)"
  summary: "Set the id property: Name of the Cosmos DB SQL container."
  overridden: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withId(java.lang.String)"
  parameters:
  - name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SqlContainerGetPropertiesResource withId(String id)"
  desc: "Set the id property: Name of the Cosmos DB SQL container."
  returns:
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource?alt=com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource&text=SqlContainerGetPropertiesResource\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.withIndexingPolicy(com.azure.resourcemanager.cosmos.models.IndexingPolicy)"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.withIndexingPolicy(IndexingPolicy indexingPolicy)"
  name: "withIndexingPolicy(IndexingPolicy indexingPolicy)"
  nameWithType: "SqlContainerGetPropertiesResource.withIndexingPolicy(IndexingPolicy indexingPolicy)"
  summary: "Set the indexing<wbr>Policy property: The configuration of the indexing policy."
  overridden: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withIndexingPolicy(com.azure.resourcemanager.cosmos.models.IndexingPolicy)"
  parameters:
  - name: "indexingPolicy"
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.IndexingPolicy?alt=com.azure.resourcemanager.cosmos.models.IndexingPolicy&text=IndexingPolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SqlContainerGetPropertiesResource withIndexingPolicy(IndexingPolicy indexingPolicy)"
  desc: "Set the indexingPolicy property: The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container."
  returns:
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource?alt=com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource&text=SqlContainerGetPropertiesResource\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.withPartitionKey(com.azure.resourcemanager.cosmos.models.ContainerPartitionKey)"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.withPartitionKey(ContainerPartitionKey partitionKey)"
  name: "withPartitionKey(ContainerPartitionKey partitionKey)"
  nameWithType: "SqlContainerGetPropertiesResource.withPartitionKey(ContainerPartitionKey partitionKey)"
  summary: "Set the partition<wbr>Key property: The configuration of the partition key to be used for partitioning data into multiple partitions."
  overridden: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withPartitionKey(com.azure.resourcemanager.cosmos.models.ContainerPartitionKey)"
  parameters:
  - name: "partitionKey"
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.ContainerPartitionKey?alt=com.azure.resourcemanager.cosmos.models.ContainerPartitionKey&text=ContainerPartitionKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SqlContainerGetPropertiesResource withPartitionKey(ContainerPartitionKey partitionKey)"
  desc: "Set the partitionKey property: The configuration of the partition key to be used for partitioning data into multiple partitions."
  returns:
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource?alt=com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource&text=SqlContainerGetPropertiesResource\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.withUniqueKeyPolicy(com.azure.resourcemanager.cosmos.models.UniqueKeyPolicy)"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource.withUniqueKeyPolicy(UniqueKeyPolicy uniqueKeyPolicy)"
  name: "withUniqueKeyPolicy(UniqueKeyPolicy uniqueKeyPolicy)"
  nameWithType: "SqlContainerGetPropertiesResource.withUniqueKeyPolicy(UniqueKeyPolicy uniqueKeyPolicy)"
  summary: "Set the unique<wbr>Key<wbr>Policy property: The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service."
  overridden: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withUniqueKeyPolicy(com.azure.resourcemanager.cosmos.models.UniqueKeyPolicy)"
  parameters:
  - name: "uniqueKeyPolicy"
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.UniqueKeyPolicy?alt=com.azure.resourcemanager.cosmos.models.UniqueKeyPolicy&text=UniqueKeyPolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SqlContainerGetPropertiesResource withUniqueKeyPolicy(UniqueKeyPolicy uniqueKeyPolicy)"
  desc: "Set the uniqueKeyPolicy property: The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service."
  returns:
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource?alt=com.azure.resourcemanager.cosmos.models.SqlContainerGetPropertiesResource&text=SqlContainerGetPropertiesResource\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "The SqlContainerGetPropertiesResource model."
metadata: {}
package: "com.azure.resourcemanager.cosmos.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-cosmos:2.16.0
