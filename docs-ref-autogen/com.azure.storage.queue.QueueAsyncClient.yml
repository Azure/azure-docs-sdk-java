### YamlMime:JavaType
uid: "com.azure.storage.queue.QueueAsyncClient"
fullName: "com.azure.storage.queue.QueueAsyncClient"
name: "QueueAsyncClient"
nameWithType: "QueueAsyncClient"
summary: "This class provides a client that contains all the operations for interacting with a queue in Azure Storage Queue."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class QueueAsyncClient"
methods:
- uid: "com.azure.storage.queue.QueueAsyncClient.clearMessages()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.clearMessages()"
  name: "clearMessages()"
  nameWithType: "QueueAsyncClient.clearMessages()"
  summary: "Deletes all messages in the queue."
  syntax: "public Mono<Void> clearMessages()"
  desc: "Deletes all messages in the queue.\n\n**Code Samples**\n\nClear the messages\n\n```java\nclient.clearMessages().subscribe(\n     response -> System.out.println(\"Clearing messages completed.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/clear-messages"
  returns:
    description: "An empty response"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.clearMessagesWithResponse()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.clearMessagesWithResponse()"
  name: "clearMessagesWithResponse()"
  nameWithType: "QueueAsyncClient.clearMessagesWithResponse()"
  summary: "Deletes all messages in the queue."
  syntax: "public Mono<Response<Void>> clearMessagesWithResponse()"
  desc: "Deletes all messages in the queue.\n\n**Code Samples**\n\nClear the messages\n\n```java\nclient.clearMessagesWithResponse().doOnSuccess(\n     response -> System.out.println(\"Clearing messages completed with status code: \" + response.getStatusCode())\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/clear-messages"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.create()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.create()"
  name: "create()"
  nameWithType: "QueueAsyncClient.create()"
  summary: "Creates a new queue."
  syntax: "public Mono<Void> create()"
  desc: "Creates a new queue.\n\n**Code Samples**\n\nCreate a queue\n\n```java\nclient.create().subscribe(\n     response -> {\n     },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete creating the queue!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-queue4"
  returns:
    description: "An empty response"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.createIfNotExists()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.createIfNotExists()"
  name: "createIfNotExists()"
  nameWithType: "QueueAsyncClient.createIfNotExists()"
  summary: "Creates a new queue."
  syntax: "public Mono<Boolean> createIfNotExists()"
  desc: "Creates a new queue.\n\n**Code Samples**\n\nCreate a queue\n\n```java\nclient.createIfNotExists().subscribe(created -> {\n     if (created) {\n         System.out.println(\"Successfully created.\");\n     } else {\n         System.out.println(\"Already exists.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-queue4"
  returns:
    description: "A reactive response signaling completion. <code>true</code> indicates a new queue was created,\n <code>false</code> indicates the specified queue already existed."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.createIfNotExistsWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.createIfNotExistsWithResponse(Map<String,String> metadata)"
  name: "createIfNotExistsWithResponse(Map<String,String> metadata)"
  nameWithType: "QueueAsyncClient.createIfNotExistsWithResponse(Map<String,String> metadata)"
  summary: "Creates a new queue."
  parameters:
  - description: "Metadata to associate with the queue. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<Boolean>> createIfNotExistsWithResponse(Map<String,String> metadata)"
  desc: "Creates a new queue.\n\n**Code Samples**\n\nCreate a queue with metadata \"queue:metadataMap\"\n\n```java\nclient.createIfNotExistsWithResponse(Collections.singletonMap(\"queue\", \"metadataMap\"))\n     .subscribe(response -> {\n         if (response.getStatusCode() == 409) {\n             System.out.println(\"Already exists.\");\n         } else {\n             System.out.println(\"successfully created.\");\n         }\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-queue4"
  returns:
    description: "A reactive response signaling completion. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 201, a new queue was\n successfully created. If status code is 204 or 409, a queue already existed at this location."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.createWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.createWithResponse(Map<String,String> metadata)"
  name: "createWithResponse(Map<String,String> metadata)"
  nameWithType: "QueueAsyncClient.createWithResponse(Map<String,String> metadata)"
  summary: "Creates a new queue."
  parameters:
  - description: "Metadata to associate with the queue. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<Void>> createWithResponse(Map<String,String> metadata)"
  desc: "Creates a new queue.\n\n**Code Samples**\n\nCreate a queue with metadata \"queue:metadataMap\"\n\n```java\nclient.createWithResponse(Collections.singletonMap(\"queue\", \"metadataMap\")).subscribe(\n     response -> System.out.println(\"Complete creating the queue with status code:\" + response.getStatusCode()),\n     error -> System.err.print(error.toString())\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-queue4"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.delete()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.delete()"
  name: "delete()"
  nameWithType: "QueueAsyncClient.delete()"
  summary: "Permanently deletes the queue."
  syntax: "public Mono<Void> delete()"
  desc: "Permanently deletes the queue.\n\n**Code Samples**\n\nDelete a queue\n\n```java\nclient.delete().doOnSuccess(\n     response -> System.out.println(\"Deleting the queue completed.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-queue3"
  returns:
    description: "An empty response"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.deleteIfExists()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.deleteIfExists()"
  name: "deleteIfExists()"
  nameWithType: "QueueAsyncClient.deleteIfExists()"
  summary: "Permanently deletes the queue if it exists."
  syntax: "public Mono<Boolean> deleteIfExists()"
  desc: "Permanently deletes the queue if it exists.\n\n**Code Samples**\n\nDelete a queue\n\n```java\nclient.deleteIfExists().subscribe(deleted -> {\n     if (deleted) {\n         System.out.println(\"Successfully deleted.\");\n     } else {\n         System.out.println(\"Does not exist.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-queue3"
  returns:
    description: "a reactive response signaling completion. <code>true</code> indicates that the queue was successfully\n deleted, <code>false</code> indicates that the queue did not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.deleteIfExistsWithResponse()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.deleteIfExistsWithResponse()"
  name: "deleteIfExistsWithResponse()"
  nameWithType: "QueueAsyncClient.deleteIfExistsWithResponse()"
  summary: "Permanently deletes the queue if it exists."
  syntax: "public Mono<Response<Boolean>> deleteIfExistsWithResponse()"
  desc: "Permanently deletes the queue if it exists.\n\n**Code Samples**\n\nDelete a queue\n\n```java\nclient.deleteIfExistsWithResponse().subscribe(response -> {\n     if (response.getStatusCode() == 404) {\n         System.out.println(\"Does not exist.\");\n     } else {\n         System.out.println(\"successfully deleted.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-queue3"
  returns:
    description: "A reactive response signaling completion. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 204, the queue was\n successfully deleted. If status code is 404, the queue does not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.deleteMessage(java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.deleteMessage(String messageId, String popReceipt)"
  name: "deleteMessage(String messageId, String popReceipt)"
  nameWithType: "QueueAsyncClient.deleteMessage(String messageId, String popReceipt)"
  summary: "Deletes the specified message in the queue"
  parameters:
  - description: "ID of the message to deleted"
    name: "messageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Unique identifier that must match for the message to be deleted"
    name: "popReceipt"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteMessage(String messageId, String popReceipt)"
  desc: "Deletes the specified message in the queue\n\n**Code Samples**\n\nDelete the first message\n\n```java\nclient.receiveMessage().subscribe(\n     message -> {\n         client.deleteMessage(message.getMessageId(), message.getPopReceipt()).subscribe(\n             response -> {\n             },\n             deleteError -> System.err.print(deleteError.toString()),\n             () -> System.out.println(\"Complete deleting the message!\")\n         );\n     },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete receiving the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-message2"
  returns:
    description: "An empty response"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.deleteMessageWithResponse(java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.deleteMessageWithResponse(String messageId, String popReceipt)"
  name: "deleteMessageWithResponse(String messageId, String popReceipt)"
  nameWithType: "QueueAsyncClient.deleteMessageWithResponse(String messageId, String popReceipt)"
  summary: "Deletes the specified message in the queue"
  parameters:
  - description: "ID of the message to deleted"
    name: "messageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Unique identifier that must match for the message to be deleted"
    name: "popReceipt"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteMessageWithResponse(String messageId, String popReceipt)"
  desc: "Deletes the specified message in the queue\n\n**Code Samples**\n\nDelete the first message\n\n```java\nclient.receiveMessage().subscribe(\n     message -> {\n         client.deleteMessageWithResponse(message.getMessageId(), message.getPopReceipt())\n             .subscribe(\n                 response -> System.out.println(\"Complete deleting the message with status code: \"\n                     + response.getStatusCode()),\n                 deleteError -> System.err.print(deleteError.toString()),\n                 () -> System.out.println(\"Complete deleting the message!\")\n             );\n     },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete receiving the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-message2"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.deleteWithResponse()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.deleteWithResponse()"
  name: "deleteWithResponse()"
  nameWithType: "QueueAsyncClient.deleteWithResponse()"
  summary: "Permanently deletes the queue."
  syntax: "public Mono<Response<Void>> deleteWithResponse()"
  desc: "Permanently deletes the queue.\n\n**Code Samples**\n\nDelete a queue\n\n```java\nclient.deleteWithResponse().subscribe(\n     response -> System.out.println(\"Deleting the queue completed with status code: \" + response.getStatusCode())\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-queue3"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.generateSas(com.azure.storage.queue.sas.QueueServiceSasSignatureValues)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.generateSas(QueueServiceSasSignatureValues queueServiceSasSignatureValues)"
  name: "generateSas(QueueServiceSasSignatureValues queueServiceSasSignatureValues)"
  nameWithType: "QueueAsyncClient.generateSas(QueueServiceSasSignatureValues queueServiceSasSignatureValues)"
  summary: "Generates a service sas for the queue using the specified <xref uid=\"com.azure.storage.queue.sas.QueueServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueServiceSasSignatureValues\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.queue.sas.QueueServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueServiceSasSignatureValues\"></xref>"
    name: "queueServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.queue.sas.QueueServiceSasSignatureValues?alt=com.azure.storage.queue.sas.QueueServiceSasSignatureValues&text=QueueServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateSas(QueueServiceSasSignatureValues queueServiceSasSignatureValues)"
  desc: "Generates a service sas for the queue using the specified <xref uid=\"com.azure.storage.queue.sas.QueueServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueServiceSasSignatureValues\"></xref>\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.queue.sas.QueueServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueServiceSasSignatureValues\"></xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n QueueSasPermission permission = new QueueSasPermission().setReadPermission(true);\n\n QueueServiceSasSignatureValues values = new QueueServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n client.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueAsyncClient.generateSas(com.azure.storage.queue.sas.QueueServiceSasSignatureValues,com.azure.core.util.Context)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.generateSas(QueueServiceSasSignatureValues queueServiceSasSignatureValues, Context context)"
  name: "generateSas(QueueServiceSasSignatureValues queueServiceSasSignatureValues, Context context)"
  nameWithType: "QueueAsyncClient.generateSas(QueueServiceSasSignatureValues queueServiceSasSignatureValues, Context context)"
  summary: "Generates a service sas for the queue using the specified <xref uid=\"com.azure.storage.queue.sas.QueueServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueServiceSasSignatureValues\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.queue.sas.QueueServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueServiceSasSignatureValues\"></xref>"
    name: "queueServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.queue.sas.QueueServiceSasSignatureValues?alt=com.azure.storage.queue.sas.QueueServiceSasSignatureValues&text=QueueServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the code when generating a SAS."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateSas(QueueServiceSasSignatureValues queueServiceSasSignatureValues, Context context)"
  desc: "Generates a service sas for the queue using the specified <xref uid=\"com.azure.storage.queue.sas.QueueServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueServiceSasSignatureValues\"></xref>\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.queue.sas.QueueServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueServiceSasSignatureValues\"></xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n QueueSasPermission permission = new QueueSasPermission().setReadPermission(true);\n\n QueueServiceSasSignatureValues values = new QueueServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n // Client must be authenticated via StorageSharedKeyCredential\n client.generateSas(values, new Context(\"key\", \"value\"));\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueAsyncClient.getAccessPolicy()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getAccessPolicy()"
  name: "getAccessPolicy()"
  nameWithType: "QueueAsyncClient.getAccessPolicy()"
  summary: "Retrieves stored access policies specified on the queue."
  syntax: "public PagedFlux<QueueSignedIdentifier> getAccessPolicy()"
  desc: "Retrieves stored access policies specified on the queue.\n\n**Code Samples**\n\nList the stored access policies\n\n```java\nclient.getAccessPolicy()\n     .subscribe(result -> System.out.printf(\"Access policy %s allows these permissions: %s\",\n         result.getId(), result.getAccessPolicy().getPermissions()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-queue-acl"
  returns:
    description: "The stored access policies specified on the queue."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.QueueSignedIdentifier?alt=com.azure.storage.queue.models.QueueSignedIdentifier&text=QueueSignedIdentifier\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.getAccountName()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getAccountName()"
  name: "getAccountName()"
  nameWithType: "QueueAsyncClient.getAccountName()"
  summary: "Get associated account name."
  syntax: "public String getAccountName()"
  desc: "Get associated account name."
  returns:
    description: "account name associated with this storage resource."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueAsyncClient.getHttpPipeline()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getHttpPipeline()"
  name: "getHttpPipeline()"
  nameWithType: "QueueAsyncClient.getHttpPipeline()"
  summary: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  syntax: "public HttpPipeline getHttpPipeline()"
  desc: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  returns:
    description: "The pipeline."
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueAsyncClient.getMessageEncoding()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getMessageEncoding()"
  name: "getMessageEncoding()"
  nameWithType: "QueueAsyncClient.getMessageEncoding()"
  summary: "Gets the message encoding the client is using."
  syntax: "public QueueMessageEncoding getMessageEncoding()"
  desc: "Gets the message encoding the client is using."
  returns:
    description: "the message encoding the client is using."
    type: "<xref href=\"com.azure.storage.queue.QueueMessageEncoding?alt=com.azure.storage.queue.QueueMessageEncoding&text=QueueMessageEncoding\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueAsyncClient.getProperties()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getProperties()"
  name: "getProperties()"
  nameWithType: "QueueAsyncClient.getProperties()"
  summary: "Retrieves metadata and approximate message count of the queue."
  syntax: "public Mono<QueueProperties> getProperties()"
  desc: "Retrieves metadata and approximate message count of the queue.\n\n**Code Samples**\n\nGet the properties of the queue\n\n```java\nclient.getProperties()\n     .subscribe(properties -> {\n         System.out.printf(\"Metadata: %s, Approximate message count: %d\", properties.getMetadata(),\n             properties.getApproximateMessagesCount());\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-queue-metadata"
  returns:
    description: "A response containing a <xref uid=\"com.azure.storage.queue.models.QueueProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueProperties\"></xref> value which contains the metadata and approximate\n messages count of the queue."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.QueueProperties?alt=com.azure.storage.queue.models.QueueProperties&text=QueueProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.getPropertiesWithResponse()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getPropertiesWithResponse()"
  name: "getPropertiesWithResponse()"
  nameWithType: "QueueAsyncClient.getPropertiesWithResponse()"
  summary: "Retrieves metadata and approximate message count of the queue."
  syntax: "public Mono<Response<QueueProperties>> getPropertiesWithResponse()"
  desc: "Retrieves metadata and approximate message count of the queue.\n\n**Code Samples**\n\nGet the properties of the queue\n\n```java\nclient.getPropertiesWithResponse()\n     .subscribe(response -> {\n         QueueProperties properties = response.getValue();\n         System.out.printf(\"Metadata: %s, Approximate message count: %d\", properties.getMetadata(),\n             properties.getApproximateMessagesCount());\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-queue-metadata"
  returns:
    description: "A response containing a <xref uid=\"com.azure.storage.queue.models.QueueProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueProperties\"></xref> value which contains the metadata and approximate\n messages count of the queue."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.QueueProperties?alt=com.azure.storage.queue.models.QueueProperties&text=QueueProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.getQueueName()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getQueueName()"
  name: "getQueueName()"
  nameWithType: "QueueAsyncClient.getQueueName()"
  summary: "Get the queue name of the client."
  syntax: "public String getQueueName()"
  desc: "Get the queue name of the client.\n\n**Code Samples**\n\n```java\nString queueName = client.getQueueName();\n System.out.println(\"The name of the queue is \" + queueName);\n```"
  returns:
    description: "The name of the queue."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueAsyncClient.getQueueUrl()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getQueueUrl()"
  name: "getQueueUrl()"
  nameWithType: "QueueAsyncClient.getQueueUrl()"
  syntax: "public String getQueueUrl()"
  returns:
    description: "the URL of the storage queue"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueAsyncClient.getServiceVersion()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getServiceVersion()"
  name: "getServiceVersion()"
  nameWithType: "QueueAsyncClient.getServiceVersion()"
  summary: "Gets the service version the client is using."
  syntax: "public QueueServiceVersion getServiceVersion()"
  desc: "Gets the service version the client is using."
  returns:
    description: "the service version the client is using."
    type: "<xref href=\"com.azure.storage.queue.QueueServiceVersion?alt=com.azure.storage.queue.QueueServiceVersion&text=QueueServiceVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.queue.QueueAsyncClient.peekMessage()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.peekMessage()"
  name: "peekMessage()"
  nameWithType: "QueueAsyncClient.peekMessage()"
  summary: "Peeks the first message in the queue."
  syntax: "public Mono<PeekedMessageItem> peekMessage()"
  desc: "Peeks the first message in the queue. Peeked messages don't contain the necessary information needed to interact with the message nor will it hide messages from other operations on the queue.\n\n**Code Samples**\n\nPeek the first message\n\n```java\nclient.peekMessage().subscribe(\n     peekMessages -> System.out.println(\"The message got from peek operation: \"\n         + peekMessages.getBody().toString()),\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete peeking the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/peek-messages"
  returns:
    description: "A <xref uid=\"com.azure.storage.queue.models.PeekedMessageItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PeekedMessageItem\"></xref> that contains metadata about the message."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.PeekedMessageItem?alt=com.azure.storage.queue.models.PeekedMessageItem&text=PeekedMessageItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.peekMessages(java.lang.Integer)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.peekMessages(Integer maxMessages)"
  name: "peekMessages(Integer maxMessages)"
  nameWithType: "QueueAsyncClient.peekMessages(Integer maxMessages)"
  summary: "Peek messages from the front of the queue up to the maximum number of messages."
  parameters:
  - description: "Optional. Maximum number of messages to peek, if there are fewer messages exist in the queue\n than requested all the messages will be peeked. If left empty only 1 message will be peeked, the allowed range is\n 1 to 32 messages."
    name: "maxMessages"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<PeekedMessageItem> peekMessages(Integer maxMessages)"
  desc: "Peek messages from the front of the queue up to the maximum number of messages. Peeked messages don't contain the necessary information needed to interact with the message nor will it hide messages from other operations on the queue.\n\n**Code Samples**\n\nPeek up to the first five messages\n\n```java\nclient.peekMessages(5).subscribe(\n     peekMessage -> System.out.printf(\"Peeked message %s has been received %d times\",\n         peekMessage.getMessageId(), peekMessage.getDequeueCount()),\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete peeking the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/peek-messages"
  returns:
    description: "Up to <code>maxMessages</code> <xref uid=\"com.azure.storage.queue.models.PeekedMessageItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PeekedMessages\"></xref> from the queue. Each PeekedMessage\n contains metadata about the message."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.PeekedMessageItem?alt=com.azure.storage.queue.models.PeekedMessageItem&text=PeekedMessageItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.receiveMessage()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.receiveMessage()"
  name: "receiveMessage()"
  nameWithType: "QueueAsyncClient.receiveMessage()"
  summary: "Retrieves the first message in the queue and hides it from other operations for 30 seconds."
  syntax: "public Mono<QueueMessageItem> receiveMessage()"
  desc: "Retrieves the first message in the queue and hides it from other operations for 30 seconds.\n\n**Code Samples**\n\nDequeue a message\n\n```java\nclient.receiveMessage().subscribe(\n     message -> System.out.println(\"The message got from getMessages operation: \"\n         + message.getBody().toString()),\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete receiving the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-messages"
  returns:
    description: "The first <xref uid=\"com.azure.storage.queue.models.QueueMessageItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueueMessageItem\"></xref> in the queue, it contains <xref uid=\"com.azure.storage.queue.models.QueueMessageItem.getMessageId()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"messageId\"></xref> and <xref uid=\"com.azure.storage.queue.models.QueueMessageItem.getPopReceipt()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"popReceipt\"></xref> used to interact with the message,\n additionally it contains other metadata about the message."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.QueueMessageItem?alt=com.azure.storage.queue.models.QueueMessageItem&text=QueueMessageItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.receiveMessages(java.lang.Integer)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.receiveMessages(Integer maxMessages)"
  name: "receiveMessages(Integer maxMessages)"
  nameWithType: "QueueAsyncClient.receiveMessages(Integer maxMessages)"
  summary: "Retrieves up to the maximum number of messages from the queue and hides them from other operations for 30 seconds."
  parameters:
  - description: "Optional. Maximum number of messages to get, if there are fewer messages exist in the queue\n than requested all the messages will be returned. If left empty only 1 message will be retrieved, the allowed\n range is 1 to 32 messages."
    name: "maxMessages"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<QueueMessageItem> receiveMessages(Integer maxMessages)"
  desc: "Retrieves up to the maximum number of messages from the queue and hides them from other operations for 30 seconds.\n\n**Code Samples**\n\nDequeue up to 5 messages\n\n```java\nclient.receiveMessages(5).subscribe(\n     message -> System.out.println(\"The message got from getMessages operation: \"\n         + message.getBody().toString()),\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete receiving the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-messages"
  returns:
    description: "Up to <code>maxMessages</code> <xref uid=\"com.azure.storage.queue.models.QueueMessageItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiveMessageItem\"></xref> from the queue.\n Each DequeuedMessage contains <xref uid=\"com.azure.storage.queue.models.QueueMessageItem.getMessageId()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"messageId\"></xref> and\n <xref uid=\"com.azure.storage.queue.models.QueueMessageItem.getPopReceipt()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"popReceipt\"></xref> used to interact with the message and\n other metadata about the message."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.QueueMessageItem?alt=com.azure.storage.queue.models.QueueMessageItem&text=QueueMessageItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.receiveMessages(java.lang.Integer,java.time.Duration)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.receiveMessages(Integer maxMessages, Duration visibilityTimeout)"
  name: "receiveMessages(Integer maxMessages, Duration visibilityTimeout)"
  nameWithType: "QueueAsyncClient.receiveMessages(Integer maxMessages, Duration visibilityTimeout)"
  summary: "Retrieves up to the maximum number of messages from the queue and hides them from other operations for the timeout period."
  parameters:
  - description: "Optional. Maximum number of messages to get, if there are fewer messages exist in the queue\n than requested all the messages will be returned. If left empty only 1 message will be retrieved, the allowed\n range is 1 to 32 messages."
    name: "maxMessages"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional. The timeout period for how long the message is invisible in the queue. If left\n empty the dequeued messages will be invisible for 30 seconds. The timeout must be between 1 second and 7 days."
    name: "visibilityTimeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<QueueMessageItem> receiveMessages(Integer maxMessages, Duration visibilityTimeout)"
  desc: "Retrieves up to the maximum number of messages from the queue and hides them from other operations for the timeout period.\n\n**Code Samples**\n\nDequeue up to 5 messages and give them a 60 second timeout period\n\n```java\nclient.receiveMessages(5, Duration.ofSeconds(60))\n     .subscribe(\n         message -> System.out.println(\"The message got from getMessages operation: \"\n             + message.getBody().toString()),\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete receiving the message!\")\n     );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-messages"
  returns:
    description: "Up to <code>maxMessages</code> <xref uid=\"com.azure.storage.queue.models.QueueMessageItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DequeuedMessages\"></xref> from the queue. Each DeqeuedMessage\n contains <xref uid=\"com.azure.storage.queue.models.QueueMessageItem.getMessageId()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"messageId\"></xref> and\n <xref uid=\"com.azure.storage.queue.models.QueueMessageItem.getPopReceipt()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"popReceipt\"></xref>\n used to interact with the message and other metadata about the message."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.QueueMessageItem?alt=com.azure.storage.queue.models.QueueMessageItem&text=QueueMessageItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.sendMessage(com.azure.core.util.BinaryData)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.sendMessage(BinaryData message)"
  name: "sendMessage(BinaryData message)"
  nameWithType: "QueueAsyncClient.sendMessage(BinaryData message)"
  summary: "Enqueues a message that has a time-to-live of 7 days and is instantly visible."
  parameters:
  - description: "Message content"
    name: "message"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SendMessageResult> sendMessage(BinaryData message)"
  desc: "Enqueues a message that has a time-to-live of 7 days and is instantly visible.\n\n**Code Samples**\n\nEnqueue a message of \"Hello, Azure\"\n\n```java\nclient.sendMessage(BinaryData.fromString(\"Hello, Azure\")).subscribe(\n         response -> {\n         },\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete enqueuing the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-message"
  returns:
    description: "A <xref uid=\"com.azure.storage.queue.models.SendMessageResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SendMessageResult\"></xref> value that contains the <xref uid=\"com.azure.storage.queue.models.SendMessageResult.getMessageId()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"messageId\"></xref>\n and <xref uid=\"com.azure.storage.queue.models.SendMessageResult.getPopReceipt()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"popReceipt\"></xref> that are used to interact with the message\n and other metadata about the enqueued message."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.SendMessageResult?alt=com.azure.storage.queue.models.SendMessageResult&text=SendMessageResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.sendMessage(java.lang.String)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.sendMessage(String messageText)"
  name: "sendMessage(String messageText)"
  nameWithType: "QueueAsyncClient.sendMessage(String messageText)"
  summary: "Enqueues a message that has a time-to-live of 7 days and is instantly visible."
  parameters:
  - description: "Message text"
    name: "messageText"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SendMessageResult> sendMessage(String messageText)"
  desc: "Enqueues a message that has a time-to-live of 7 days and is instantly visible.\n\n**Code Samples**\n\nEnqueue a message of \"Hello, Azure\"\n\n```java\nclient.sendMessage(\"Hello, Azure\").subscribe(\n     response -> {\n     },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete enqueuing the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-message"
  returns:
    description: "A <xref uid=\"com.azure.storage.queue.models.SendMessageResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SendMessageResult\"></xref> value that contains the <xref uid=\"com.azure.storage.queue.models.SendMessageResult.getMessageId()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"messageId\"></xref>\n and <xref uid=\"com.azure.storage.queue.models.SendMessageResult.getPopReceipt()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"popReceipt\"></xref> that are used to interact with the message\n and other metadata about the enqueued message."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.SendMessageResult?alt=com.azure.storage.queue.models.SendMessageResult&text=SendMessageResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.sendMessageWithResponse(com.azure.core.util.BinaryData,java.time.Duration,java.time.Duration)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.sendMessageWithResponse(BinaryData message, Duration visibilityTimeout, Duration timeToLive)"
  name: "sendMessageWithResponse(BinaryData message, Duration visibilityTimeout, Duration timeToLive)"
  nameWithType: "QueueAsyncClient.sendMessageWithResponse(BinaryData message, Duration visibilityTimeout, Duration timeToLive)"
  summary: "Enqueues a message with a given time-to-live and a timeout period where the message is invisible in the queue."
  parameters:
  - description: "Message content."
    name: "message"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional. The timeout period for how long the message is invisible in the queue. If\n unset the value will default to 0 and the message will be instantly visible. The timeout must be between 0\n seconds and 7 days."
    name: "visibilityTimeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional. How long the message will stay alive in the queue. If unset the value will default to\n 7 days, if <code>Duration.ofSeconds(-1)</code> is passed the message will not expire.\n The time to live must be <code>Duration.ofSeconds(-1)</code> or any positive number of seconds."
    name: "timeToLive"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SendMessageResult>> sendMessageWithResponse(BinaryData message, Duration visibilityTimeout, Duration timeToLive)"
  desc: "Enqueues a message with a given time-to-live and a timeout period where the message is invisible in the queue.\n\n**Code Samples**\n\nAdd a message of \"Hello, Azure\" that has a timeout of 5 seconds\n\n```java\nclient.sendMessageWithResponse(BinaryData.fromString(\"Hello, Azure\"),\n         Duration.ofSeconds(5), null).subscribe(\n         response -> System.out.printf(\"Message %s expires at %s\", response.getValue().getMessageId(),\n             response.getValue().getExpirationTime()),\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete enqueuing the message!\")\n );\n```\n\nAdd a message of \"Goodbye, Azure\" that has a time to live of 5 seconds\n\n```java\nclient.sendMessageWithResponse(BinaryData.fromString(\"Goodbye, Azure\"),\n         null, Duration.ofSeconds(5)).subscribe(\n         response -> System.out.printf(\"Message %s expires at %s\", response.getValue().getMessageId(),\n             response.getValue().getExpirationTime()),\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete enqueuing the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-message"
  returns:
    description: "A <xref uid=\"com.azure.storage.queue.models.SendMessageResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SendMessageResult\"></xref> value that contains the <xref uid=\"com.azure.storage.queue.models.SendMessageResult.getMessageId()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"messageId\"></xref>\n and <xref uid=\"com.azure.storage.queue.models.SendMessageResult.getPopReceipt()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"popReceipt\"></xref> that are used to interact with the message\n and other metadata about the enqueued message."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.SendMessageResult?alt=com.azure.storage.queue.models.SendMessageResult&text=SendMessageResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.sendMessageWithResponse(java.lang.String,java.time.Duration,java.time.Duration)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.sendMessageWithResponse(String messageText, Duration visibilityTimeout, Duration timeToLive)"
  name: "sendMessageWithResponse(String messageText, Duration visibilityTimeout, Duration timeToLive)"
  nameWithType: "QueueAsyncClient.sendMessageWithResponse(String messageText, Duration visibilityTimeout, Duration timeToLive)"
  summary: "Enqueues a message with a given time-to-live and a timeout period where the message is invisible in the queue."
  parameters:
  - description: "Message text"
    name: "messageText"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional. The timeout period for how long the message is invisible in the queue. If\n unset the value will default to 0 and the message will be instantly visible. The timeout must be between 0\n seconds and 7 days."
    name: "visibilityTimeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional. How long the message will stay alive in the queue. If unset the value will default to\n 7 days, if <code>Duration.ofSeconds(-1)</code> is passed the message will not expire.\n The time to live must be <code>Duration.ofSeconds(-1)</code> or any positive number of seconds."
    name: "timeToLive"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SendMessageResult>> sendMessageWithResponse(String messageText, Duration visibilityTimeout, Duration timeToLive)"
  desc: "Enqueues a message with a given time-to-live and a timeout period where the message is invisible in the queue.\n\n**Code Samples**\n\nAdd a message of \"Hello, Azure\" that has a timeout of 5 seconds\n\n```java\nclient.sendMessageWithResponse(\"Hello, Azure\",\n     Duration.ofSeconds(5), null).subscribe(\n         response -> System.out.printf(\"Message %s expires at %s\", response.getValue().getMessageId(),\n             response.getValue().getExpirationTime()),\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete enqueuing the message!\")\n );\n```\n\nAdd a message of \"Goodbye, Azure\" that has a time to live of 5 seconds\n\n```java\nclient.sendMessageWithResponse(\"Goodbye, Azure\",\n     null, Duration.ofSeconds(5)).subscribe(\n         response -> System.out.printf(\"Message %s expires at %s\", response.getValue().getMessageId(),\n             response.getValue().getExpirationTime()),\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete enqueuing the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-message"
  returns:
    description: "A <xref uid=\"com.azure.storage.queue.models.SendMessageResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SendMessageResult\"></xref> value that contains the <xref uid=\"com.azure.storage.queue.models.SendMessageResult.getMessageId()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"messageId\"></xref>\n and <xref uid=\"com.azure.storage.queue.models.SendMessageResult.getPopReceipt()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"popReceipt\"></xref> that are used to interact with the message\n and other metadata about the enqueued message."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.SendMessageResult?alt=com.azure.storage.queue.models.SendMessageResult&text=SendMessageResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.setAccessPolicy(java.lang.Iterable<com.azure.storage.queue.models.QueueSignedIdentifier>)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.setAccessPolicy(Iterable<QueueSignedIdentifier> permissions)"
  name: "setAccessPolicy(Iterable<QueueSignedIdentifier> permissions)"
  nameWithType: "QueueAsyncClient.setAccessPolicy(Iterable<QueueSignedIdentifier> permissions)"
  summary: "Sets stored access policies on the queue."
  parameters:
  - description: "Access policies to set on the queue"
    name: "permissions"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.QueueSignedIdentifier?alt=com.azure.storage.queue.models.QueueSignedIdentifier&text=QueueSignedIdentifier\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> setAccessPolicy(Iterable<QueueSignedIdentifier> permissions)"
  desc: "Sets stored access policies on the queue.\n\n**Code Samples**\n\nSet a read only stored access policy\n\n```java\nQueueAccessPolicy accessPolicy = new QueueAccessPolicy().setPermissions(\"r\")\n     .setStartsOn(OffsetDateTime.now(ZoneOffset.UTC))\n     .setExpiresOn(OffsetDateTime.now(ZoneOffset.UTC).plusDays(10));\n\n QueueSignedIdentifier permission = new QueueSignedIdentifier().setId(\"mypolicy\").setAccessPolicy(accessPolicy);\n client.setAccessPolicy(Collections.singletonList(permission))\n     .subscribe(response -> System.out.println(\"Setting access policies completed.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-queue-acl"
  returns:
    description: "An empty response"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.setAccessPolicyWithResponse(java.lang.Iterable<com.azure.storage.queue.models.QueueSignedIdentifier>)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.setAccessPolicyWithResponse(Iterable<QueueSignedIdentifier> permissions)"
  name: "setAccessPolicyWithResponse(Iterable<QueueSignedIdentifier> permissions)"
  nameWithType: "QueueAsyncClient.setAccessPolicyWithResponse(Iterable<QueueSignedIdentifier> permissions)"
  summary: "Sets stored access policies on the queue."
  parameters:
  - description: "Access policies to set on the queue"
    name: "permissions"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.QueueSignedIdentifier?alt=com.azure.storage.queue.models.QueueSignedIdentifier&text=QueueSignedIdentifier\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<Void>> setAccessPolicyWithResponse(Iterable<QueueSignedIdentifier> permissions)"
  desc: "Sets stored access policies on the queue.\n\n**Code Samples**\n\nSet a read only stored access policy\n\n```java\nQueueAccessPolicy accessPolicy = new QueueAccessPolicy().setPermissions(\"r\")\n     .setStartsOn(OffsetDateTime.now(ZoneOffset.UTC))\n     .setExpiresOn(OffsetDateTime.now(ZoneOffset.UTC).plusDays(10));\n\n QueueSignedIdentifier permission = new QueueSignedIdentifier().setId(\"mypolicy\").setAccessPolicy(accessPolicy);\n client.setAccessPolicyWithResponse(Collections.singletonList(permission))\n     .subscribe(response -> System.out.printf(\"Setting access policies completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-queue-acl"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.setMetadata(Map<String,String> metadata)"
  name: "setMetadata(Map<String,String> metadata)"
  nameWithType: "QueueAsyncClient.setMetadata(Map<String,String> metadata)"
  summary: "Sets the metadata of the queue."
  parameters:
  - description: "Metadata to set on the queue"
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> setMetadata(Map<String,String> metadata)"
  desc: "Sets the metadata of the queue. Passing in a `null` value for metadata will clear the metadata associated with the queue.\n\n**Code Samples**\n\nSet the queue's metadata to \"queue:metadataMap\"\n\n```java\nclient.setMetadata(Collections.singletonMap(\"queue\", \"metadataMap\"))\n     .subscribe(response -> System.out.println(\"Setting metadata completed.\"));\n```\n\nClear the queue's metadata\n\n```java\nclient.setMetadata(null)\n     .subscribe(response -> System.out.println(\"Clearing metadata completed.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-queue-metadata"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.setMetadataWithResponse(Map<String,String> metadata)"
  name: "setMetadataWithResponse(Map<String,String> metadata)"
  nameWithType: "QueueAsyncClient.setMetadataWithResponse(Map<String,String> metadata)"
  summary: "Sets the metadata of the queue."
  parameters:
  - description: "Metadata to set on the queue"
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<Void>> setMetadataWithResponse(Map<String,String> metadata)"
  desc: "Sets the metadata of the queue. Passing in a `null` value for metadata will clear the metadata associated with the queue.\n\n**Code Samples**\n\nSet the queue's metadata to \"queue:metadataMap\"\n\n```java\nclient.setMetadataWithResponse(Collections.singletonMap(\"queue\", \"metadataMap\"))\n     .subscribe(response -> System.out.printf(\"Setting metadata completed with status code %d\",\n         response.getStatusCode()));\n```\n\nClear the queue's metadata\n\n```java\nclient.setMetadataWithResponse(null)\n     .subscribe(response -> System.out.printf(\"Clearing metadata completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-queue-metadata"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.updateMessage(java.lang.String,java.lang.String,java.lang.String,java.time.Duration)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.updateMessage(String messageId, String popReceipt, String messageText, Duration visibilityTimeout)"
  name: "updateMessage(String messageId, String popReceipt, String messageText, Duration visibilityTimeout)"
  nameWithType: "QueueAsyncClient.updateMessage(String messageId, String popReceipt, String messageText, Duration visibilityTimeout)"
  summary: "Updates the specific message in the queue with a new message and resets the visibility timeout."
  parameters:
  - description: "ID of the message to update"
    name: "messageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Unique identifier that must match for the message to be updated"
    name: "popReceipt"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Updated value for the message"
    name: "messageText"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The timeout period for how long the message is invisible in the queue in seconds. The\n timeout period must be between 1 second and 7 days. The default value is Duration.ZERO."
    name: "visibilityTimeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<UpdateMessageResult> updateMessage(String messageId, String popReceipt, String messageText, Duration visibilityTimeout)"
  desc: "Updates the specific message in the queue with a new message and resets the visibility timeout.\n\n**Code Samples**\n\nDequeue the first message and update it to \"Hello again, Azure\" and hide it for 5 seconds\n\n```java\nclient.receiveMessage().subscribe(\n     message -> {\n         client.updateMessage(\"newText\", message.getMessageId(),\n             message.getPopReceipt(), null).subscribe(\n                 response -> {\n                 },\n                 updateError -> System.err.print(updateError.toString()),\n                 () -> System.out.println(\"Complete updating the message!\")\n         );\n     },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete receiving the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/update-message"
  returns:
    description: "A <xref uid=\"com.azure.storage.queue.models.UpdateMessageResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UpdateMessageResult\"></xref> that contains the new\n <xref uid=\"com.azure.storage.queue.models.UpdateMessageResult.getPopReceipt()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"popReceipt\"></xref> to interact with the message,\n additionally contains the updated metadata about the message."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.UpdateMessageResult?alt=com.azure.storage.queue.models.UpdateMessageResult&text=UpdateMessageResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.updateMessageWithResponse(java.lang.String,java.lang.String,java.lang.String,java.time.Duration)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.updateMessageWithResponse(String messageId, String popReceipt, String messageText, Duration visibilityTimeout)"
  name: "updateMessageWithResponse(String messageId, String popReceipt, String messageText, Duration visibilityTimeout)"
  nameWithType: "QueueAsyncClient.updateMessageWithResponse(String messageId, String popReceipt, String messageText, Duration visibilityTimeout)"
  summary: "Updates the specific message in the queue with a new message and resets the visibility timeout."
  parameters:
  - description: "ID of the message to update"
    name: "messageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Unique identifier that must match for the message to be updated"
    name: "popReceipt"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Updated value for the message"
    name: "messageText"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The timeout period for how long the message is invisible in the queue in seconds. The\n timeout period must be between 1 second and 7 days. The default value is Duration.ZERO."
    name: "visibilityTimeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<UpdateMessageResult>> updateMessageWithResponse(String messageId, String popReceipt, String messageText, Duration visibilityTimeout)"
  desc: "Updates the specific message in the queue with a new message and resets the visibility timeout.\n\n**Code Samples**\n\nDequeue the first message and update it to \"Hello again, Azure\" and hide it for 5 seconds\n\n```java\nclient.receiveMessage().subscribe(\n     message -> {\n         client.updateMessageWithResponse(message.getMessageId(), message.getPopReceipt(), \"newText\",\n             null).subscribe(\n                 response -> System.out.println(\"Complete updating the message with status code:\"\n                     + response.getStatusCode()),\n                 updateError -> System.err.print(updateError.toString()),\n                 () -> System.out.println(\"Complete updating the message!\")\n         );\n     },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete receiving the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/update-message"
  returns:
    description: "A <xref uid=\"com.azure.storage.queue.models.UpdateMessageResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UpdateMessageResult\"></xref> that contains the new\n <xref uid=\"com.azure.storage.queue.models.UpdateMessageResult.getPopReceipt()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"popReceipt\"></xref> to interact with the message,\n additionally contains the updated metadata about the message."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.UpdateMessageResult?alt=com.azure.storage.queue.models.UpdateMessageResult&text=UpdateMessageResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "This class provides a client that contains all the operations for interacting with a queue in Azure Storage Queue. Operations allowed by the client are creating and deleting the queue, retrieving and updating metadata and access policies of the queue, and enqueuing, dequeuing, peeking, updating, and deleting messages.\n\n**Instantiating an Asynchronous Queue Client**\n\n```java\nQueueAsyncClient client = new QueueClientBuilder()\n     .connectionString(\"connectionstring\")\n     .endpoint(\"endpoint\")\n     .buildAsyncClient();\n```\n\nView <xref uid=\"com.azure.storage.queue.QueueClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"this\"></xref> for additional ways to construct the client."
metadata: {}
package: "com.azure.storage.queue"
artifact: com.azure:azure-storage-queue:12.14.1
