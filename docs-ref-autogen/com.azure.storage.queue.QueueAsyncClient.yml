### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.queue.QueueAsyncClient"
  id: "QueueAsyncClient"
  parent: "com.azure.storage.queue"
  children:
  - "com.azure.storage.queue.QueueAsyncClient.QueueAsyncClient(com.azure.storage.queue.implementation.AzureQueueStorageImpl,java.lang.String,java.lang.String,com.azure.storage.queue.QueueServiceVersion)"
  - "com.azure.storage.queue.QueueAsyncClient.clearMessages()"
  - "com.azure.storage.queue.QueueAsyncClient.clearMessagesWithResponse()"
  - "com.azure.storage.queue.QueueAsyncClient.clearMessagesWithResponse(com.azure.core.util.Context)"
  - "com.azure.storage.queue.QueueAsyncClient.create()"
  - "com.azure.storage.queue.QueueAsyncClient.createWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.storage.queue.QueueAsyncClient.createWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  - "com.azure.storage.queue.QueueAsyncClient.delete()"
  - "com.azure.storage.queue.QueueAsyncClient.deleteMessage(java.lang.String,java.lang.String)"
  - "com.azure.storage.queue.QueueAsyncClient.deleteMessageWithResponse(java.lang.String,java.lang.String)"
  - "com.azure.storage.queue.QueueAsyncClient.deleteMessageWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.queue.QueueAsyncClient.deleteWithResponse()"
  - "com.azure.storage.queue.QueueAsyncClient.deleteWithResponse(com.azure.core.util.Context)"
  - "com.azure.storage.queue.QueueAsyncClient.generateSas(com.azure.storage.queue.sas.QueueServiceSasSignatureValues)"
  - "com.azure.storage.queue.QueueAsyncClient.getAccessPolicy()"
  - "com.azure.storage.queue.QueueAsyncClient.getAccountName()"
  - "com.azure.storage.queue.QueueAsyncClient.getHttpPipeline()"
  - "com.azure.storage.queue.QueueAsyncClient.getProperties()"
  - "com.azure.storage.queue.QueueAsyncClient.getPropertiesWithResponse()"
  - "com.azure.storage.queue.QueueAsyncClient.getPropertiesWithResponse(com.azure.core.util.Context)"
  - "com.azure.storage.queue.QueueAsyncClient.getQueueName()"
  - "com.azure.storage.queue.QueueAsyncClient.getQueueUrl()"
  - "com.azure.storage.queue.QueueAsyncClient.getServiceVersion()"
  - "com.azure.storage.queue.QueueAsyncClient.peekMessage()"
  - "com.azure.storage.queue.QueueAsyncClient.peekMessages(java.lang.Integer)"
  - "com.azure.storage.queue.QueueAsyncClient.peekMessagesWithOptionalTimeout(java.lang.Integer,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.queue.QueueAsyncClient.receiveMessage()"
  - "com.azure.storage.queue.QueueAsyncClient.receiveMessages(java.lang.Integer)"
  - "com.azure.storage.queue.QueueAsyncClient.receiveMessages(java.lang.Integer,java.time.Duration)"
  - "com.azure.storage.queue.QueueAsyncClient.receiveMessagesWithOptionalTimeout(java.lang.Integer,java.time.Duration,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.queue.QueueAsyncClient.sendMessage(java.lang.String)"
  - "com.azure.storage.queue.QueueAsyncClient.sendMessageWithResponse(java.lang.String,java.time.Duration,java.time.Duration)"
  - "com.azure.storage.queue.QueueAsyncClient.sendMessageWithResponse(java.lang.String,java.time.Duration,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.queue.QueueAsyncClient.setAccessPolicy(java.lang.Iterable<com.azure.storage.queue.models.QueueSignedIdentifier>)"
  - "com.azure.storage.queue.QueueAsyncClient.setAccessPolicyWithResponse(java.lang.Iterable<com.azure.storage.queue.models.QueueSignedIdentifier>)"
  - "com.azure.storage.queue.QueueAsyncClient.setAccessPolicyWithResponse(java.lang.Iterable<com.azure.storage.queue.models.QueueSignedIdentifier>,com.azure.core.util.Context)"
  - "com.azure.storage.queue.QueueAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.storage.queue.QueueAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.storage.queue.QueueAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  - "com.azure.storage.queue.QueueAsyncClient.updateMessage(java.lang.String,java.lang.String,java.lang.String,java.time.Duration)"
  - "com.azure.storage.queue.QueueAsyncClient.updateMessageWithResponse(java.lang.String,java.lang.String,java.lang.String,java.time.Duration)"
  - "com.azure.storage.queue.QueueAsyncClient.updateMessageWithResponse(java.lang.String,java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)"
  langs:
  - "java"
  name: "QueueAsyncClient"
  nameWithType: "QueueAsyncClient"
  fullName: "com.azure.storage.queue.QueueAsyncClient"
  type: "Class"
  package: "com.azure.storage.queue"
  summary: "This class provides a client that contains all the operations for interacting with a queue in Azure Storage Queue. Operations allowed by the client are creating and deleting the queue, retrieving and updating metadata and access policies of the queue, and enqueuing, dequeuing, peeking, updating, and deleting messages.\n\n**Instantiating an Asynchronous Queue Client**\n\n```java\nQueueAsyncClient client = new QueueClientBuilder()\n     .connectionString(\"connectionstring\")\n     .endpoint(\"endpoint\")\n     .buildAsyncClient();\n```\n\nView <xref uid=\"com.azure.storage.queue.QueueClientBuilder\" data-throw-if-not-resolved=\"false\">this</xref> for additional ways to construct the client."
  syntax:
    content: "public final class QueueAsyncClient"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.queue.QueueAsyncClient.QueueAsyncClient(com.azure.storage.queue.implementation.AzureQueueStorageImpl,java.lang.String,java.lang.String,com.azure.storage.queue.QueueServiceVersion)"
  id: "QueueAsyncClient(com.azure.storage.queue.implementation.AzureQueueStorageImpl,java.lang.String,java.lang.String,com.azure.storage.queue.QueueServiceVersion)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "QueueAsyncClient(AzureQueueStorageImpl client, String queueName, String accountName, QueueServiceVersion serviceVersion)"
  nameWithType: "QueueAsyncClient.QueueAsyncClient(AzureQueueStorageImpl client, String queueName, String accountName, QueueServiceVersion serviceVersion)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.QueueAsyncClient(AzureQueueStorageImpl client, String queueName, String accountName, QueueServiceVersion serviceVersion)"
  overload: "com.azure.storage.queue.QueueAsyncClient.QueueAsyncClient*"
  type: "Constructor"
  package: "com.azure.storage.queue"
  summary: "Creates a QueueAsyncClient that sends requests to the storage queue service at <xref uid=\"com.azure.storage.queue.QueueAsyncClient.getQueueUrl()\" data-throw-if-not-resolved=\"false\">endpoint</xref>. Each service call goes through the <xref uid=\"\" data-throw-if-not-resolved=\"false\">pipeline</xref>."
  syntax:
    content: " QueueAsyncClient(AzureQueueStorageImpl client, String queueName, String accountName, QueueServiceVersion serviceVersion)"
    parameters:
    - id: "client"
      type: "com.azure.storage.queue.implementation.AzureQueueStorageImpl"
      description: "Client that interacts with the service interfaces"
    - id: "queueName"
      type: "java.lang.String"
      description: "Name of the queue"
    - id: "accountName"
      type: "java.lang.String"
    - id: "serviceVersion"
      type: "com.azure.storage.queue.QueueServiceVersion"
- uid: "com.azure.storage.queue.QueueAsyncClient.clearMessages()"
  id: "clearMessages()"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "clearMessages()"
  nameWithType: "QueueAsyncClient.clearMessages()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.clearMessages()"
  overload: "com.azure.storage.queue.QueueAsyncClient.clearMessages*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Deletes all messages in the queue.\n\n**Code Samples**\n\nClear the messages\n\n```java\nclient.clearMessages().subscribe(\n     response -> System.out.println(\"Clearing messages completed.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/clear-messages"
  syntax:
    content: "public Mono<Void> clearMessages()"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "An empty response"
- uid: "com.azure.storage.queue.QueueAsyncClient.clearMessagesWithResponse()"
  id: "clearMessagesWithResponse()"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "clearMessagesWithResponse()"
  nameWithType: "QueueAsyncClient.clearMessagesWithResponse()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.clearMessagesWithResponse()"
  overload: "com.azure.storage.queue.QueueAsyncClient.clearMessagesWithResponse*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Deletes all messages in the queue.\n\n**Code Samples**\n\nClear the messages\n\n```java\nclient.clearMessagesWithResponse().doOnSuccess(\n     response -> System.out.println(\"Clearing messages completed with status code: \" + response.getStatusCode())\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/clear-messages"
  syntax:
    content: "public Mono<Response<Void>> clearMessagesWithResponse()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "A response that only contains headers and response status code"
- uid: "com.azure.storage.queue.QueueAsyncClient.clearMessagesWithResponse(com.azure.core.util.Context)"
  id: "clearMessagesWithResponse(com.azure.core.util.Context)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "clearMessagesWithResponse(Context context)"
  nameWithType: "QueueAsyncClient.clearMessagesWithResponse(Context context)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.clearMessagesWithResponse(Context context)"
  overload: "com.azure.storage.queue.QueueAsyncClient.clearMessagesWithResponse*"
  type: "Method"
  package: "com.azure.storage.queue"
  syntax:
    content: " Mono<Response<Void>> clearMessagesWithResponse(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
- uid: "com.azure.storage.queue.QueueAsyncClient.create()"
  id: "create()"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "create()"
  nameWithType: "QueueAsyncClient.create()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.create()"
  overload: "com.azure.storage.queue.QueueAsyncClient.create*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Creates a new queue.\n\n**Code Samples**\n\nCreate a queue\n\n```java\nclient.create().subscribe(\n     response -> {\n     },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete creating the queue!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-queue4"
  syntax:
    content: "public Mono<Void> create()"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "An empty response"
- uid: "com.azure.storage.queue.QueueAsyncClient.createWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  id: "createWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "createWithResponse(Map<String,String> metadata)"
  nameWithType: "QueueAsyncClient.createWithResponse(Map<String,String> metadata)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.createWithResponse(Map<String,String> metadata)"
  overload: "com.azure.storage.queue.QueueAsyncClient.createWithResponse*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Creates a new queue.\n\n**Code Samples**\n\nCreate a queue with metadata \"queue:metadataMap\"\n\n```java\nclient.createWithResponse(Collections.singletonMap(\"queue\", \"metadataMap\")).subscribe(\n     response -> System.out.println(\"Complete creating the queue with status code:\" + response.getStatusCode()),\n     error -> System.err.print(error.toString())\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-queue4"
  syntax:
    content: "public Mono<Response<Void>> createWithResponse(Map<String,String> metadata)"
    parameters:
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Metadata to associate with the queue"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "A response that only contains headers and response status code"
- uid: "com.azure.storage.queue.QueueAsyncClient.createWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  id: "createWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "createWithResponse(Map<String,String> metadata, Context context)"
  nameWithType: "QueueAsyncClient.createWithResponse(Map<String,String> metadata, Context context)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.createWithResponse(Map<String,String> metadata, Context context)"
  overload: "com.azure.storage.queue.QueueAsyncClient.createWithResponse*"
  type: "Method"
  package: "com.azure.storage.queue"
  syntax:
    content: " Mono<Response<Void>> createWithResponse(Map<String,String> metadata, Context context)"
    parameters:
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
- uid: "com.azure.storage.queue.QueueAsyncClient.delete()"
  id: "delete()"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "delete()"
  nameWithType: "QueueAsyncClient.delete()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.delete()"
  overload: "com.azure.storage.queue.QueueAsyncClient.delete*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Permanently deletes the queue.\n\n**Code Samples**\n\nDelete a queue\n\n```java\nclient.delete().doOnSuccess(\n     response -> System.out.println(\"Deleting the queue completed.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-queue3"
  syntax:
    content: "public Mono<Void> delete()"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "An empty response"
- uid: "com.azure.storage.queue.QueueAsyncClient.deleteMessage(java.lang.String,java.lang.String)"
  id: "deleteMessage(java.lang.String,java.lang.String)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "deleteMessage(String messageId, String popReceipt)"
  nameWithType: "QueueAsyncClient.deleteMessage(String messageId, String popReceipt)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.deleteMessage(String messageId, String popReceipt)"
  overload: "com.azure.storage.queue.QueueAsyncClient.deleteMessage*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Deletes the specified message in the queue\n\n**Code Samples**\n\nDelete the first message\n\n```java\nclient.receiveMessage().subscribe(\n     message -> {\n         client.deleteMessage(message.getMessageId(), message.getPopReceipt()).subscribe(\n             response -> {\n             },\n             deleteError -> System.err.print(deleteError.toString()),\n             () -> System.out.println(\"Complete deleting the message!\")\n         );\n     },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete receiving the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-message2"
  syntax:
    content: "public Mono<Void> deleteMessage(String messageId, String popReceipt)"
    parameters:
    - id: "messageId"
      type: "java.lang.String"
      description: "Id of the message to deleted"
    - id: "popReceipt"
      type: "java.lang.String"
      description: "Unique identifier that must match for the message to be deleted"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "An empty response"
- uid: "com.azure.storage.queue.QueueAsyncClient.deleteMessageWithResponse(java.lang.String,java.lang.String)"
  id: "deleteMessageWithResponse(java.lang.String,java.lang.String)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "deleteMessageWithResponse(String messageId, String popReceipt)"
  nameWithType: "QueueAsyncClient.deleteMessageWithResponse(String messageId, String popReceipt)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.deleteMessageWithResponse(String messageId, String popReceipt)"
  overload: "com.azure.storage.queue.QueueAsyncClient.deleteMessageWithResponse*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Deletes the specified message in the queue\n\n**Code Samples**\n\nDelete the first message\n\n```java\nclient.receiveMessage().subscribe(\n     message -> {\n         client.deleteMessageWithResponse(message.getMessageId(), message.getPopReceipt())\n             .subscribe(\n                 response -> System.out.println(\"Complete deleting the message with status code: \"\n                     + response.getStatusCode()),\n                 deleteError -> System.err.print(deleteError.toString()),\n                 () -> System.out.println(\"Complete deleting the message!\")\n             );\n     },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete receiving the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-message2"
  syntax:
    content: "public Mono<Response<Void>> deleteMessageWithResponse(String messageId, String popReceipt)"
    parameters:
    - id: "messageId"
      type: "java.lang.String"
      description: "Id of the message to deleted"
    - id: "popReceipt"
      type: "java.lang.String"
      description: "Unique identifier that must match for the message to be deleted"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "A response that only contains headers and response status code"
- uid: "com.azure.storage.queue.QueueAsyncClient.deleteMessageWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "deleteMessageWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "deleteMessageWithResponse(String messageId, String popReceipt, Context context)"
  nameWithType: "QueueAsyncClient.deleteMessageWithResponse(String messageId, String popReceipt, Context context)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.deleteMessageWithResponse(String messageId, String popReceipt, Context context)"
  overload: "com.azure.storage.queue.QueueAsyncClient.deleteMessageWithResponse*"
  type: "Method"
  package: "com.azure.storage.queue"
  syntax:
    content: " Mono<Response<Void>> deleteMessageWithResponse(String messageId, String popReceipt, Context context)"
    parameters:
    - id: "messageId"
      type: "java.lang.String"
    - id: "popReceipt"
      type: "java.lang.String"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
- uid: "com.azure.storage.queue.QueueAsyncClient.deleteWithResponse()"
  id: "deleteWithResponse()"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "deleteWithResponse()"
  nameWithType: "QueueAsyncClient.deleteWithResponse()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.deleteWithResponse()"
  overload: "com.azure.storage.queue.QueueAsyncClient.deleteWithResponse*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Permanently deletes the queue.\n\n**Code Samples**\n\nDelete a queue\n\n```java\nclient.deleteWithResponse().subscribe(\n     response -> System.out.println(\"Deleting the queue completed with status code: \" + response.getStatusCode())\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-queue3"
  syntax:
    content: "public Mono<Response<Void>> deleteWithResponse()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "A response that only contains headers and response status code"
- uid: "com.azure.storage.queue.QueueAsyncClient.deleteWithResponse(com.azure.core.util.Context)"
  id: "deleteWithResponse(com.azure.core.util.Context)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "deleteWithResponse(Context context)"
  nameWithType: "QueueAsyncClient.deleteWithResponse(Context context)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.deleteWithResponse(Context context)"
  overload: "com.azure.storage.queue.QueueAsyncClient.deleteWithResponse*"
  type: "Method"
  package: "com.azure.storage.queue"
  syntax:
    content: " Mono<Response<Void>> deleteWithResponse(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
- uid: "com.azure.storage.queue.QueueAsyncClient.generateSas(com.azure.storage.queue.sas.QueueServiceSasSignatureValues)"
  id: "generateSas(com.azure.storage.queue.sas.QueueServiceSasSignatureValues)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "generateSas(QueueServiceSasSignatureValues queueServiceSasSignatureValues)"
  nameWithType: "QueueAsyncClient.generateSas(QueueServiceSasSignatureValues queueServiceSasSignatureValues)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.generateSas(QueueServiceSasSignatureValues queueServiceSasSignatureValues)"
  overload: "com.azure.storage.queue.QueueAsyncClient.generateSas*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Generates a service sas for the queue using the specified <xref uid=\"com.azure.storage.queue.sas.QueueServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">QueueServiceSasSignatureValues</xref> Note : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\">StorageSharedKeyCredential</xref>\n\nSee <xref uid=\"com.azure.storage.queue.sas.QueueServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">QueueServiceSasSignatureValues</xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n QueueSasPermission permission = new QueueSasPermission().setReadPermission(true);\n \n QueueServiceSasSignatureValues values = new QueueServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n \n client.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  syntax:
    content: "public String generateSas(QueueServiceSasSignatureValues queueServiceSasSignatureValues)"
    parameters:
    - id: "queueServiceSasSignatureValues"
      type: "com.azure.storage.queue.sas.QueueServiceSasSignatureValues"
      description: "<xref uid=\"com.azure.storage.queue.sas.QueueServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">QueueServiceSasSignatureValues</xref>"
    return:
      type: "java.lang.String"
      description: "A <code>String</code> representing all SAS query parameters."
- uid: "com.azure.storage.queue.QueueAsyncClient.getAccessPolicy()"
  id: "getAccessPolicy()"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "getAccessPolicy()"
  nameWithType: "QueueAsyncClient.getAccessPolicy()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getAccessPolicy()"
  overload: "com.azure.storage.queue.QueueAsyncClient.getAccessPolicy*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Retrieves stored access policies specified on the queue.\n\n**Code Samples**\n\nList the stored access policies\n\n```java\nclient.getAccessPolicy()\n     .subscribe(result -> System.out.printf(\"Access policy %s allows these permissions: %s\",\n         result.getId(), result.getAccessPolicy().getPermissions()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-acl"
  syntax:
    content: "public PagedFlux<QueueSignedIdentifier> getAccessPolicy()"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.queue.models.QueueSignedIdentifier>"
      description: "The stored access policies specified on the queue."
- uid: "com.azure.storage.queue.QueueAsyncClient.getAccountName()"
  id: "getAccountName()"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "getAccountName()"
  nameWithType: "QueueAsyncClient.getAccountName()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getAccountName()"
  overload: "com.azure.storage.queue.QueueAsyncClient.getAccountName*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Get associated account name."
  syntax:
    content: "public String getAccountName()"
    return:
      type: "java.lang.String"
      description: "account name associated with this storage resource."
- uid: "com.azure.storage.queue.QueueAsyncClient.getHttpPipeline()"
  id: "getHttpPipeline()"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "getHttpPipeline()"
  nameWithType: "QueueAsyncClient.getHttpPipeline()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getHttpPipeline()"
  overload: "com.azure.storage.queue.QueueAsyncClient.getHttpPipeline*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Gets the <xref uid=\"\" data-throw-if-not-resolved=\"false\">HttpPipeline</xref> powering this client."
  syntax:
    content: "public HttpPipeline getHttpPipeline()"
    return:
      type: "com.azure.core.http.HttpPipeline"
      description: "The pipeline."
- uid: "com.azure.storage.queue.QueueAsyncClient.getProperties()"
  id: "getProperties()"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "getProperties()"
  nameWithType: "QueueAsyncClient.getProperties()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getProperties()"
  overload: "com.azure.storage.queue.QueueAsyncClient.getProperties*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Retrieves metadata and approximate message count of the queue.\n\n**Code Samples**\n\nGet the properties of the queue\n\n```java\nclient.getProperties()\n     .subscribe(properties -> {\n         System.out.printf(\"Metadata: %s, Approximate message count: %d\", properties.getMetadata(),\n             properties.getApproximateMessagesCount());\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-metadata"
  syntax:
    content: "public Mono<QueueProperties> getProperties()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.queue.models.QueueProperties>"
      description: "A response containing a <xref uid=\"com.azure.storage.queue.models.QueueProperties\" data-throw-if-not-resolved=\"false\">QueueProperties</xref> value which contains the metadata and approximate\n messages count of the queue."
- uid: "com.azure.storage.queue.QueueAsyncClient.getPropertiesWithResponse()"
  id: "getPropertiesWithResponse()"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "getPropertiesWithResponse()"
  nameWithType: "QueueAsyncClient.getPropertiesWithResponse()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getPropertiesWithResponse()"
  overload: "com.azure.storage.queue.QueueAsyncClient.getPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Retrieves metadata and approximate message count of the queue.\n\n**Code Samples**\n\nGet the properties of the queue\n\n```java\nclient.getPropertiesWithResponse()\n     .subscribe(response -> {\n         QueueProperties properties = response.getValue();\n         System.out.printf(\"Metadata: %s, Approximate message count: %d\", properties.getMetadata(),\n             properties.getApproximateMessagesCount());\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-metadata"
  syntax:
    content: "public Mono<Response<QueueProperties>> getPropertiesWithResponse()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.queue.models.QueueProperties>>"
      description: "A response containing a <xref uid=\"com.azure.storage.queue.models.QueueProperties\" data-throw-if-not-resolved=\"false\">QueueProperties</xref> value which contains the metadata and approximate\n messages count of the queue."
- uid: "com.azure.storage.queue.QueueAsyncClient.getPropertiesWithResponse(com.azure.core.util.Context)"
  id: "getPropertiesWithResponse(com.azure.core.util.Context)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "getPropertiesWithResponse(Context context)"
  nameWithType: "QueueAsyncClient.getPropertiesWithResponse(Context context)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getPropertiesWithResponse(Context context)"
  overload: "com.azure.storage.queue.QueueAsyncClient.getPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.storage.queue"
  syntax:
    content: " Mono<Response<QueueProperties>> getPropertiesWithResponse(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.queue.models.QueueProperties>>"
- uid: "com.azure.storage.queue.QueueAsyncClient.getQueueName()"
  id: "getQueueName()"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "getQueueName()"
  nameWithType: "QueueAsyncClient.getQueueName()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getQueueName()"
  overload: "com.azure.storage.queue.QueueAsyncClient.getQueueName*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Get the queue name of the client.\n\n**Code Samples**\n\n```java\nString queueName = client.getQueueName();\n System.out.println(\"The name of the queue is \" + queueName);\n```"
  syntax:
    content: "public String getQueueName()"
    return:
      type: "java.lang.String"
      description: "The name of the queue."
- uid: "com.azure.storage.queue.QueueAsyncClient.getQueueUrl()"
  id: "getQueueUrl()"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "getQueueUrl()"
  nameWithType: "QueueAsyncClient.getQueueUrl()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getQueueUrl()"
  overload: "com.azure.storage.queue.QueueAsyncClient.getQueueUrl*"
  type: "Method"
  package: "com.azure.storage.queue"
  syntax:
    content: "public String getQueueUrl()"
    return:
      type: "java.lang.String"
      description: "the URL of the storage queue"
- uid: "com.azure.storage.queue.QueueAsyncClient.getServiceVersion()"
  id: "getServiceVersion()"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "getServiceVersion()"
  nameWithType: "QueueAsyncClient.getServiceVersion()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getServiceVersion()"
  overload: "com.azure.storage.queue.QueueAsyncClient.getServiceVersion*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Gets the service version the client is using."
  syntax:
    content: "public QueueServiceVersion getServiceVersion()"
    return:
      type: "com.azure.storage.queue.QueueServiceVersion"
      description: "the service version the client is using."
- uid: "com.azure.storage.queue.QueueAsyncClient.peekMessage()"
  id: "peekMessage()"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "peekMessage()"
  nameWithType: "QueueAsyncClient.peekMessage()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.peekMessage()"
  overload: "com.azure.storage.queue.QueueAsyncClient.peekMessage*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Peeks the first message in the queue. Peeked messages don't contain the necessary information needed to interact with the message nor will it hide messages from other operations on the queue.\n\n**Code Samples**\n\nPeek the first message\n\n```java\nclient.peekMessage().subscribe(\n     peekMessages -> System.out.println(\"The message got from peek operation: \" + peekMessages.getMessageText()),\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete peeking the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/peek-messages"
  syntax:
    content: "public Mono<PeekedMessageItem> peekMessage()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.queue.models.PeekedMessageItem>"
      description: "A <xref uid=\"com.azure.storage.queue.models.PeekedMessageItem\" data-throw-if-not-resolved=\"false\">PeekedMessageItem</xref> that contains metadata about the message."
- uid: "com.azure.storage.queue.QueueAsyncClient.peekMessages(java.lang.Integer)"
  id: "peekMessages(java.lang.Integer)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "peekMessages(Integer maxMessages)"
  nameWithType: "QueueAsyncClient.peekMessages(Integer maxMessages)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.peekMessages(Integer maxMessages)"
  overload: "com.azure.storage.queue.QueueAsyncClient.peekMessages*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Peek messages from the front of the queue up to the maximum number of messages. Peeked messages don't contain the necessary information needed to interact with the message nor will it hide messages from other operations on the queue.\n\n**Code Samples**\n\nPeek up to the first five messages\n\n```java\nclient.peekMessages(5).subscribe(\n     peekMessage -> System.out.printf(\"Peeked message %s has been received %d times\",\n         peekMessage.getMessageId(), peekMessage.getDequeueCount()),\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete peeking the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/peek-messages"
  syntax:
    content: "public PagedFlux<PeekedMessageItem> peekMessages(Integer maxMessages)"
    parameters:
    - id: "maxMessages"
      type: "java.lang.Integer"
      description: "Optional. Maximum number of messages to peek, if there are less messages exist in the queue\n than requested all the messages will be peeked. If left empty only 1 message will be peeked, the allowed range is\n 1 to 32 messages."
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.queue.models.PeekedMessageItem>"
      description: "Up to <code>maxMessages</code> <xref uid=\"com.azure.storage.queue.models.PeekedMessageItem\" data-throw-if-not-resolved=\"false\">PeekedMessages</xref> from the queue. Each PeekedMessage\n contains metadata about the message."
- uid: "com.azure.storage.queue.QueueAsyncClient.peekMessagesWithOptionalTimeout(java.lang.Integer,java.time.Duration,com.azure.core.util.Context)"
  id: "peekMessagesWithOptionalTimeout(java.lang.Integer,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "peekMessagesWithOptionalTimeout(Integer maxMessages, Duration timeout, Context context)"
  nameWithType: "QueueAsyncClient.peekMessagesWithOptionalTimeout(Integer maxMessages, Duration timeout, Context context)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.peekMessagesWithOptionalTimeout(Integer maxMessages, Duration timeout, Context context)"
  overload: "com.azure.storage.queue.QueueAsyncClient.peekMessagesWithOptionalTimeout*"
  type: "Method"
  package: "com.azure.storage.queue"
  syntax:
    content: " PagedFlux<PeekedMessageItem> peekMessagesWithOptionalTimeout(Integer maxMessages, Duration timeout, Context context)"
    parameters:
    - id: "maxMessages"
      type: "java.lang.Integer"
    - id: "timeout"
      type: "java.time.Duration"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.queue.models.PeekedMessageItem>"
- uid: "com.azure.storage.queue.QueueAsyncClient.receiveMessage()"
  id: "receiveMessage()"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "receiveMessage()"
  nameWithType: "QueueAsyncClient.receiveMessage()"
  fullName: "com.azure.storage.queue.QueueAsyncClient.receiveMessage()"
  overload: "com.azure.storage.queue.QueueAsyncClient.receiveMessage*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Retrieves the first message in the queue and hides it from other operations for 30 seconds.\n\n**Code Samples**\n\nDequeue a message\n\n```java\nclient.receiveMessage().subscribe(\n     message -> System.out.println(\"The message got from getMessages operation: \"\n         + message.getMessageText()),\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete receiving the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-messages"
  syntax:
    content: "public Mono<QueueMessageItem> receiveMessage()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.queue.models.QueueMessageItem>"
      description: "The first <xref uid=\"com.azure.storage.queue.models.QueueMessageItem\" data-throw-if-not-resolved=\"false\">QueueMessageItem</xref> in the queue, it contains <xref uid=\"com.azure.storage.queue.models.QueueMessageItem.getMessageId()\" data-throw-if-not-resolved=\"false\">messageId</xref> and <xref uid=\"com.azure.storage.queue.models.QueueMessageItem.getPopReceipt()\" data-throw-if-not-resolved=\"false\">popReceipt</xref> used to interact with the message,\n additionally it contains other metadata about the message."
- uid: "com.azure.storage.queue.QueueAsyncClient.receiveMessages(java.lang.Integer)"
  id: "receiveMessages(java.lang.Integer)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "receiveMessages(Integer maxMessages)"
  nameWithType: "QueueAsyncClient.receiveMessages(Integer maxMessages)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.receiveMessages(Integer maxMessages)"
  overload: "com.azure.storage.queue.QueueAsyncClient.receiveMessages*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Retrieves up to the maximum number of messages from the queue and hides them from other operations for 30 seconds.\n\n**Code Samples**\n\nDequeue up to 5 messages\n\n```java\nclient.receiveMessages(5).subscribe(\n     message -> System.out.println(\"The message got from getMessages operation: \"\n         + message.getMessageText()),\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete receiving the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-messages"
  syntax:
    content: "public PagedFlux<QueueMessageItem> receiveMessages(Integer maxMessages)"
    parameters:
    - id: "maxMessages"
      type: "java.lang.Integer"
      description: "Optional. Maximum number of messages to get, if there are less messages exist in the queue\n than requested all the messages will be returned. If left empty only 1 message will be retrieved, the allowed\n range is 1 to 32 messages."
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.queue.models.QueueMessageItem>"
      description: "Up to <code>maxMessages</code> <xref uid=\"com.azure.storage.queue.models.QueueMessageItem\" data-throw-if-not-resolved=\"false\">ReceiveMessageItem</xref> from the queue.\n Each DequeuedMessage contains <xref uid=\"com.azure.storage.queue.models.QueueMessageItem.getMessageId()\" data-throw-if-not-resolved=\"false\">messageId</xref> and\n <xref uid=\"com.azure.storage.queue.models.QueueMessageItem.getPopReceipt()\" data-throw-if-not-resolved=\"false\">popReceipt</xref> used to interact with the message and\n other metadata about the message."
- uid: "com.azure.storage.queue.QueueAsyncClient.receiveMessages(java.lang.Integer,java.time.Duration)"
  id: "receiveMessages(java.lang.Integer,java.time.Duration)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "receiveMessages(Integer maxMessages, Duration visibilityTimeout)"
  nameWithType: "QueueAsyncClient.receiveMessages(Integer maxMessages, Duration visibilityTimeout)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.receiveMessages(Integer maxMessages, Duration visibilityTimeout)"
  overload: "com.azure.storage.queue.QueueAsyncClient.receiveMessages*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Retrieves up to the maximum number of messages from the queue and hides them from other operations for the timeout period.\n\n**Code Samples**\n\nDequeue up to 5 messages and give them a 60 second timeout period\n\n```java\nclient.receiveMessages(5, Duration.ofSeconds(60))\n     .subscribe(\n         message -> System.out.println(\"The message got from getMessages operation: \"\n             + message.getMessageText()),\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete receiving the message!\")\n     );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-messages"
  syntax:
    content: "public PagedFlux<QueueMessageItem> receiveMessages(Integer maxMessages, Duration visibilityTimeout)"
    parameters:
    - id: "maxMessages"
      type: "java.lang.Integer"
      description: "Optional. Maximum number of messages to get, if there are less messages exist in the queue\n than requested all the messages will be returned. If left empty only 1 message will be retrieved, the allowed\n range is 1 to 32 messages."
    - id: "visibilityTimeout"
      type: "java.time.Duration"
      description: "Optional. The timeout period for how long the message is invisible in the queue. If left\n empty the dequeued messages will be invisible for 30 seconds. The timeout must be between 1 second and 7 days."
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.queue.models.QueueMessageItem>"
      description: "Up to <code>maxMessages</code> <xref uid=\"com.azure.storage.queue.models.QueueMessageItem\" data-throw-if-not-resolved=\"false\">DequeuedMessages</xref> from the queue. Each DeqeuedMessage\n contains <xref uid=\"com.azure.storage.queue.models.QueueMessageItem.getMessageId()\" data-throw-if-not-resolved=\"false\">messageId</xref> and\n <xref uid=\"com.azure.storage.queue.models.QueueMessageItem.getPopReceipt()\" data-throw-if-not-resolved=\"false\">popReceipt</xref>\n used to interact with the message and other metadata about the message."
- uid: "com.azure.storage.queue.QueueAsyncClient.receiveMessagesWithOptionalTimeout(java.lang.Integer,java.time.Duration,java.time.Duration,com.azure.core.util.Context)"
  id: "receiveMessagesWithOptionalTimeout(java.lang.Integer,java.time.Duration,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "receiveMessagesWithOptionalTimeout(Integer maxMessages, Duration visibilityTimeout, Duration timeout, Context context)"
  nameWithType: "QueueAsyncClient.receiveMessagesWithOptionalTimeout(Integer maxMessages, Duration visibilityTimeout, Duration timeout, Context context)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.receiveMessagesWithOptionalTimeout(Integer maxMessages, Duration visibilityTimeout, Duration timeout, Context context)"
  overload: "com.azure.storage.queue.QueueAsyncClient.receiveMessagesWithOptionalTimeout*"
  type: "Method"
  package: "com.azure.storage.queue"
  syntax:
    content: " PagedFlux<QueueMessageItem> receiveMessagesWithOptionalTimeout(Integer maxMessages, Duration visibilityTimeout, Duration timeout, Context context)"
    parameters:
    - id: "maxMessages"
      type: "java.lang.Integer"
    - id: "visibilityTimeout"
      type: "java.time.Duration"
    - id: "timeout"
      type: "java.time.Duration"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.queue.models.QueueMessageItem>"
- uid: "com.azure.storage.queue.QueueAsyncClient.sendMessage(java.lang.String)"
  id: "sendMessage(java.lang.String)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "sendMessage(String messageText)"
  nameWithType: "QueueAsyncClient.sendMessage(String messageText)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.sendMessage(String messageText)"
  overload: "com.azure.storage.queue.QueueAsyncClient.sendMessage*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Enqueues a message that has a time-to-live of 7 days and is instantly visible.\n\n**Code Samples**\n\nEnqueue a message of \"Hello, Azure\"\n\n```java\nclient.sendMessage(\"Hello, Azure\").subscribe(\n     response -> {\n     },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete enqueuing the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-message"
  syntax:
    content: "public Mono<SendMessageResult> sendMessage(String messageText)"
    parameters:
    - id: "messageText"
      type: "java.lang.String"
      description: "Message text"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.queue.models.SendMessageResult>"
      description: "A <xref uid=\"com.azure.storage.queue.models.SendMessageResult\" data-throw-if-not-resolved=\"false\">SendMessageResult</xref> value that contains the <xref uid=\"com.azure.storage.queue.models.SendMessageResult.getMessageId()\" data-throw-if-not-resolved=\"false\">messageId</xref>\n and <xref uid=\"com.azure.storage.queue.models.SendMessageResult.getPopReceipt()\" data-throw-if-not-resolved=\"false\">popReceipt</xref> that are used to interact with the message\n and other metadata about the enqueued message."
- uid: "com.azure.storage.queue.QueueAsyncClient.sendMessageWithResponse(java.lang.String,java.time.Duration,java.time.Duration)"
  id: "sendMessageWithResponse(java.lang.String,java.time.Duration,java.time.Duration)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "sendMessageWithResponse(String messageText, Duration visibilityTimeout, Duration timeToLive)"
  nameWithType: "QueueAsyncClient.sendMessageWithResponse(String messageText, Duration visibilityTimeout, Duration timeToLive)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.sendMessageWithResponse(String messageText, Duration visibilityTimeout, Duration timeToLive)"
  overload: "com.azure.storage.queue.QueueAsyncClient.sendMessageWithResponse*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Enqueues a message with a given time-to-live and a timeout period where the message is invisible in the queue.\n\n**Code Samples**\n\nAdd a message of \"Hello, Azure\" that has a timeout of 5 seconds\n\n```java\nclient.sendMessageWithResponse(\"Hello, Azure\",\n     Duration.ofSeconds(5), null).subscribe(\n         response -> System.out.printf(\"Message %s expires at %s\", response.getValue().getMessageId(),\n             response.getValue().getExpirationTime()),\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete enqueuing the message!\")\n );\n```\n\nAdd a message of \"Goodbye, Azure\" that has a time to live of 5 seconds\n\n```java\nclient.sendMessageWithResponse(\"Goodbye, Azure\",\n     null, Duration.ofSeconds(5)).subscribe(\n         response -> System.out.printf(\"Message %s expires at %s\", response.getValue().getMessageId(),\n             response.getValue().getExpirationTime()),\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete enqueuing the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-message"
  syntax:
    content: "public Mono<Response<SendMessageResult>> sendMessageWithResponse(String messageText, Duration visibilityTimeout, Duration timeToLive)"
    parameters:
    - id: "messageText"
      type: "java.lang.String"
      description: "Message text"
    - id: "visibilityTimeout"
      type: "java.time.Duration"
      description: "Optional. The timeout period for how long the message is invisible in the queue. If\n unset the value will default to 0 and the message will be instantly visible. The timeout must be between 0\n seconds and 7 days."
    - id: "timeToLive"
      type: "java.time.Duration"
      description: "Optional. How long the message will stay alive in the queue. If unset the value will default to\n 7 days, if -1 is passed the message will not expire. The time to live must be -1 or any positive number."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.queue.models.SendMessageResult>>"
      description: "A <xref uid=\"com.azure.storage.queue.models.SendMessageResult\" data-throw-if-not-resolved=\"false\">SendMessageResult</xref> value that contains the <xref uid=\"com.azure.storage.queue.models.SendMessageResult.getMessageId()\" data-throw-if-not-resolved=\"false\">messageId</xref>\n and <xref uid=\"com.azure.storage.queue.models.SendMessageResult.getPopReceipt()\" data-throw-if-not-resolved=\"false\">popReceipt</xref> that are used to interact with the message\n and other metadata about the enqueued message."
- uid: "com.azure.storage.queue.QueueAsyncClient.sendMessageWithResponse(java.lang.String,java.time.Duration,java.time.Duration,com.azure.core.util.Context)"
  id: "sendMessageWithResponse(java.lang.String,java.time.Duration,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "sendMessageWithResponse(String messageText, Duration visibilityTimeout, Duration timeToLive, Context context)"
  nameWithType: "QueueAsyncClient.sendMessageWithResponse(String messageText, Duration visibilityTimeout, Duration timeToLive, Context context)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.sendMessageWithResponse(String messageText, Duration visibilityTimeout, Duration timeToLive, Context context)"
  overload: "com.azure.storage.queue.QueueAsyncClient.sendMessageWithResponse*"
  type: "Method"
  package: "com.azure.storage.queue"
  syntax:
    content: " Mono<Response<SendMessageResult>> sendMessageWithResponse(String messageText, Duration visibilityTimeout, Duration timeToLive, Context context)"
    parameters:
    - id: "messageText"
      type: "java.lang.String"
    - id: "visibilityTimeout"
      type: "java.time.Duration"
    - id: "timeToLive"
      type: "java.time.Duration"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.queue.models.SendMessageResult>>"
- uid: "com.azure.storage.queue.QueueAsyncClient.setAccessPolicy(java.lang.Iterable<com.azure.storage.queue.models.QueueSignedIdentifier>)"
  id: "setAccessPolicy(java.lang.Iterable<com.azure.storage.queue.models.QueueSignedIdentifier>)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "setAccessPolicy(Iterable<QueueSignedIdentifier> permissions)"
  nameWithType: "QueueAsyncClient.setAccessPolicy(Iterable<QueueSignedIdentifier> permissions)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.setAccessPolicy(Iterable<QueueSignedIdentifier> permissions)"
  overload: "com.azure.storage.queue.QueueAsyncClient.setAccessPolicy*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Sets stored access policies on the queue.\n\n**Code Samples**\n\nSet a read only stored access policy\n\n```java\nQueueAccessPolicy accessPolicy = new QueueAccessPolicy().setPermissions(\"r\")\n     .setStartsOn(OffsetDateTime.now(ZoneOffset.UTC))\n     .setExpiresOn(OffsetDateTime.now(ZoneOffset.UTC).plusDays(10));\n \n QueueSignedIdentifier permission = new QueueSignedIdentifier().setId(\"mypolicy\").setAccessPolicy(accessPolicy);\n client.setAccessPolicy(Collections.singletonList(permission))\n     .subscribe(response -> System.out.println(\"Setting access policies completed.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-acl"
  syntax:
    content: "public Mono<Void> setAccessPolicy(Iterable<QueueSignedIdentifier> permissions)"
    parameters:
    - id: "permissions"
      type: "java.lang.Iterable<com.azure.storage.queue.models.QueueSignedIdentifier>"
      description: "Access policies to set on the queue"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "An empty response"
- uid: "com.azure.storage.queue.QueueAsyncClient.setAccessPolicyWithResponse(java.lang.Iterable<com.azure.storage.queue.models.QueueSignedIdentifier>)"
  id: "setAccessPolicyWithResponse(java.lang.Iterable<com.azure.storage.queue.models.QueueSignedIdentifier>)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "setAccessPolicyWithResponse(Iterable<QueueSignedIdentifier> permissions)"
  nameWithType: "QueueAsyncClient.setAccessPolicyWithResponse(Iterable<QueueSignedIdentifier> permissions)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.setAccessPolicyWithResponse(Iterable<QueueSignedIdentifier> permissions)"
  overload: "com.azure.storage.queue.QueueAsyncClient.setAccessPolicyWithResponse*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Sets stored access policies on the queue.\n\n**Code Samples**\n\nSet a read only stored access policy\n\n```java\nQueueAccessPolicy accessPolicy = new QueueAccessPolicy().setPermissions(\"r\")\n     .setStartsOn(OffsetDateTime.now(ZoneOffset.UTC))\n     .setExpiresOn(OffsetDateTime.now(ZoneOffset.UTC).plusDays(10));\n \n QueueSignedIdentifier permission = new QueueSignedIdentifier().setId(\"mypolicy\").setAccessPolicy(accessPolicy);\n client.setAccessPolicyWithResponse(Collections.singletonList(permission))\n     .subscribe(response -> System.out.printf(\"Setting access policies completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-acl"
  syntax:
    content: "public Mono<Response<Void>> setAccessPolicyWithResponse(Iterable<QueueSignedIdentifier> permissions)"
    parameters:
    - id: "permissions"
      type: "java.lang.Iterable<com.azure.storage.queue.models.QueueSignedIdentifier>"
      description: "Access policies to set on the queue"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "A response that only contains headers and response status code"
- uid: "com.azure.storage.queue.QueueAsyncClient.setAccessPolicyWithResponse(java.lang.Iterable<com.azure.storage.queue.models.QueueSignedIdentifier>,com.azure.core.util.Context)"
  id: "setAccessPolicyWithResponse(java.lang.Iterable<com.azure.storage.queue.models.QueueSignedIdentifier>,com.azure.core.util.Context)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "setAccessPolicyWithResponse(Iterable<QueueSignedIdentifier> permissions, Context context)"
  nameWithType: "QueueAsyncClient.setAccessPolicyWithResponse(Iterable<QueueSignedIdentifier> permissions, Context context)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.setAccessPolicyWithResponse(Iterable<QueueSignedIdentifier> permissions, Context context)"
  overload: "com.azure.storage.queue.QueueAsyncClient.setAccessPolicyWithResponse*"
  type: "Method"
  package: "com.azure.storage.queue"
  syntax:
    content: " Mono<Response<Void>> setAccessPolicyWithResponse(Iterable<QueueSignedIdentifier> permissions, Context context)"
    parameters:
    - id: "permissions"
      type: "java.lang.Iterable<com.azure.storage.queue.models.QueueSignedIdentifier>"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
- uid: "com.azure.storage.queue.QueueAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  id: "setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "setMetadata(Map<String,String> metadata)"
  nameWithType: "QueueAsyncClient.setMetadata(Map<String,String> metadata)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.setMetadata(Map<String,String> metadata)"
  overload: "com.azure.storage.queue.QueueAsyncClient.setMetadata*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Sets the metadata of the queue. Passing in a `null` value for metadata will clear the metadata associated with the queue.\n\n**Code Samples**\n\nSet the queue's metadata to \"queue:metadataMap\"\n\n```java\nclient.setMetadata(Collections.singletonMap(\"queue\", \"metadataMap\"))\n     .subscribe(response -> System.out.println(\"Setting metadata completed.\"));\n```\n\nClear the queue's metadata\n\n```java\nclient.setMetadata(null)\n     .subscribe(response -> System.out.println(\"Clearing metadata completed.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-metadata"
  syntax:
    content: "public Mono<Void> setMetadata(Map<String,String> metadata)"
    parameters:
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Metadata to set on the queue"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "A response that only contains headers and response status code"
- uid: "com.azure.storage.queue.QueueAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  id: "setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "setMetadataWithResponse(Map<String,String> metadata)"
  nameWithType: "QueueAsyncClient.setMetadataWithResponse(Map<String,String> metadata)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.setMetadataWithResponse(Map<String,String> metadata)"
  overload: "com.azure.storage.queue.QueueAsyncClient.setMetadataWithResponse*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Sets the metadata of the queue. Passing in a `null` value for metadata will clear the metadata associated with the queue.\n\n**Code Samples**\n\nSet the queue's metadata to \"queue:metadataMap\"\n\n```java\nclient.setMetadataWithResponse(Collections.singletonMap(\"queue\", \"metadataMap\"))\n     .subscribe(response -> System.out.printf(\"Setting metadata completed with status code %d\",\n         response.getStatusCode()));\n```\n\nClear the queue's metadata\n\n```java\nclient.setMetadataWithResponse(null)\n     .subscribe(response -> System.out.printf(\"Clearing metadata completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-metadata"
  syntax:
    content: "public Mono<Response<Void>> setMetadataWithResponse(Map<String,String> metadata)"
    parameters:
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Metadata to set on the queue"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "A response that only contains headers and response status code"
- uid: "com.azure.storage.queue.QueueAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  id: "setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "setMetadataWithResponse(Map<String,String> metadata, Context context)"
  nameWithType: "QueueAsyncClient.setMetadataWithResponse(Map<String,String> metadata, Context context)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.setMetadataWithResponse(Map<String,String> metadata, Context context)"
  overload: "com.azure.storage.queue.QueueAsyncClient.setMetadataWithResponse*"
  type: "Method"
  package: "com.azure.storage.queue"
  syntax:
    content: " Mono<Response<Void>> setMetadataWithResponse(Map<String,String> metadata, Context context)"
    parameters:
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
- uid: "com.azure.storage.queue.QueueAsyncClient.updateMessage(java.lang.String,java.lang.String,java.lang.String,java.time.Duration)"
  id: "updateMessage(java.lang.String,java.lang.String,java.lang.String,java.time.Duration)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "updateMessage(String messageId, String popReceipt, String messageText, Duration visibilityTimeout)"
  nameWithType: "QueueAsyncClient.updateMessage(String messageId, String popReceipt, String messageText, Duration visibilityTimeout)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.updateMessage(String messageId, String popReceipt, String messageText, Duration visibilityTimeout)"
  overload: "com.azure.storage.queue.QueueAsyncClient.updateMessage*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Updates the specific message in the queue with a new message and resets the visibility timeout.\n\n**Code Samples**\n\nDequeue the first message and update it to \"Hello again, Azure\" and hide it for 5 seconds\n\n```java\nclient.receiveMessage().subscribe(\n     message -> {\n         client.updateMessage(\"newText\", message.getMessageId(),\n             message.getPopReceipt(), null).subscribe(\n                 response -> {\n                 },\n                 updateError -> System.err.print(updateError.toString()),\n                 () -> System.out.println(\"Complete updating the message!\")\n         );\n     },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete receiving the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/update-message"
  syntax:
    content: "public Mono<UpdateMessageResult> updateMessage(String messageId, String popReceipt, String messageText, Duration visibilityTimeout)"
    parameters:
    - id: "messageId"
      type: "java.lang.String"
      description: "Id of the message to update"
    - id: "popReceipt"
      type: "java.lang.String"
      description: "Unique identifier that must match for the message to be updated"
    - id: "messageText"
      type: "java.lang.String"
      description: "Updated value for the message"
    - id: "visibilityTimeout"
      type: "java.time.Duration"
      description: "The timeout period for how long the message is invisible in the queue in seconds. The\n timeout period must be between 1 second and 7 days."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.queue.models.UpdateMessageResult>"
      description: "A <xref uid=\"com.azure.storage.queue.models.UpdateMessageResult\" data-throw-if-not-resolved=\"false\">UpdateMessageResult</xref> that contains the new\n <xref uid=\"com.azure.storage.queue.models.UpdateMessageResult.getPopReceipt()\" data-throw-if-not-resolved=\"false\">popReceipt</xref> to interact with the message,\n additionally contains the updated metadata about the message."
- uid: "com.azure.storage.queue.QueueAsyncClient.updateMessageWithResponse(java.lang.String,java.lang.String,java.lang.String,java.time.Duration)"
  id: "updateMessageWithResponse(java.lang.String,java.lang.String,java.lang.String,java.time.Duration)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "updateMessageWithResponse(String messageId, String popReceipt, String messageText, Duration visibilityTimeout)"
  nameWithType: "QueueAsyncClient.updateMessageWithResponse(String messageId, String popReceipt, String messageText, Duration visibilityTimeout)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.updateMessageWithResponse(String messageId, String popReceipt, String messageText, Duration visibilityTimeout)"
  overload: "com.azure.storage.queue.QueueAsyncClient.updateMessageWithResponse*"
  type: "Method"
  package: "com.azure.storage.queue"
  summary: "Updates the specific message in the queue with a new message and resets the visibility timeout.\n\n**Code Samples**\n\nDequeue the first message and update it to \"Hello again, Azure\" and hide it for 5 seconds\n\n```java\nclient.receiveMessage().subscribe(\n     message -> {\n         client.updateMessageWithResponse(message.getMessageId(), message.getPopReceipt(), \"newText\",\n             null).subscribe(\n                 response -> System.out.println(\"Complete updating the message with status code:\"\n                     + response.getStatusCode()),\n                 updateError -> System.err.print(updateError.toString()),\n                 () -> System.out.println(\"Complete updating the message!\")\n         );\n     },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete receiving the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/update-message"
  syntax:
    content: "public Mono<Response<UpdateMessageResult>> updateMessageWithResponse(String messageId, String popReceipt, String messageText, Duration visibilityTimeout)"
    parameters:
    - id: "messageId"
      type: "java.lang.String"
      description: "Id of the message to update"
    - id: "popReceipt"
      type: "java.lang.String"
      description: "Unique identifier that must match for the message to be updated"
    - id: "messageText"
      type: "java.lang.String"
      description: "Updated value for the message"
    - id: "visibilityTimeout"
      type: "java.time.Duration"
      description: "The timeout period for how long the message is invisible in the queue in seconds. The\n timeout period must be between 1 second and 7 days."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.queue.models.UpdateMessageResult>>"
      description: "A <xref uid=\"com.azure.storage.queue.models.UpdateMessageResult\" data-throw-if-not-resolved=\"false\">UpdateMessageResult</xref> that contains the new\n <xref uid=\"com.azure.storage.queue.models.UpdateMessageResult.getPopReceipt()\" data-throw-if-not-resolved=\"false\">popReceipt</xref> to interact with the message,\n additionally contains the updated metadata about the message."
- uid: "com.azure.storage.queue.QueueAsyncClient.updateMessageWithResponse(java.lang.String,java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)"
  id: "updateMessageWithResponse(java.lang.String,java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.queue.QueueAsyncClient"
  langs:
  - "java"
  name: "updateMessageWithResponse(String messageId, String popReceipt, String messageText, Duration visibilityTimeout, Context context)"
  nameWithType: "QueueAsyncClient.updateMessageWithResponse(String messageId, String popReceipt, String messageText, Duration visibilityTimeout, Context context)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.updateMessageWithResponse(String messageId, String popReceipt, String messageText, Duration visibilityTimeout, Context context)"
  overload: "com.azure.storage.queue.QueueAsyncClient.updateMessageWithResponse*"
  type: "Method"
  package: "com.azure.storage.queue"
  syntax:
    content: " Mono<Response<UpdateMessageResult>> updateMessageWithResponse(String messageId, String popReceipt, String messageText, Duration visibilityTimeout, Context context)"
    parameters:
    - id: "messageId"
      type: "java.lang.String"
    - id: "popReceipt"
      type: "java.lang.String"
    - id: "messageText"
      type: "java.lang.String"
    - id: "visibilityTimeout"
      type: "java.time.Duration"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.queue.models.UpdateMessageResult>>"
references:
- uid: "com.azure.storage.queue.implementation.AzureQueueStorageImpl"
  name: "AzureQueueStorageImpl"
  nameWithType: "AzureQueueStorageImpl"
  fullName: "com.azure.storage.queue.implementation.AzureQueueStorageImpl"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.storage.queue.QueueServiceVersion"
  name: "QueueServiceVersion"
  nameWithType: "QueueServiceVersion"
  fullName: "com.azure.storage.queue.QueueServiceVersion"
- uid: "com.azure.storage.queue.QueueAsyncClient.QueueAsyncClient*"
  name: "QueueAsyncClient"
  nameWithType: "QueueAsyncClient.QueueAsyncClient"
  fullName: "com.azure.storage.queue.QueueAsyncClient.QueueAsyncClient"
  package: "com.azure.storage.queue"
- uid: "com.azure.storage.queue.QueueAsyncClient.getQueueUrl*"
  name: "getQueueUrl"
  nameWithType: "QueueAsyncClient.getQueueUrl"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getQueueUrl"
  package: "com.azure.storage.queue"
- uid: "com.azure.storage.queue.QueueAsyncClient.getServiceVersion*"
  name: "getServiceVersion"
  nameWithType: "QueueAsyncClient.getServiceVersion"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getServiceVersion"
  package: "com.azure.storage.queue"
- uid: "com.azure.core.http.HttpPipeline"
  spec.java:
  - uid: "com.azure.core.http.HttpPipeline"
    name: "HttpPipeline"
    fullName: "com.azure.core.http.HttpPipeline"
- uid: "com.azure.storage.queue.QueueAsyncClient.getHttpPipeline*"
  name: "getHttpPipeline"
  nameWithType: "QueueAsyncClient.getHttpPipeline"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getHttpPipeline"
  package: "com.azure.storage.queue"
- uid: "reactor.core.publisher.Mono<java.lang.Void>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.queue.QueueAsyncClient.create*"
  name: "create"
  nameWithType: "QueueAsyncClient.create"
  fullName: "com.azure.storage.queue.QueueAsyncClient.create"
  package: "com.azure.storage.queue"
- uid: "java.util.Map<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.queue.QueueAsyncClient.createWithResponse*"
  name: "createWithResponse"
  nameWithType: "QueueAsyncClient.createWithResponse"
  fullName: "com.azure.storage.queue.QueueAsyncClient.createWithResponse"
  package: "com.azure.storage.queue"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "com.azure.storage.queue.QueueAsyncClient.delete*"
  name: "delete"
  nameWithType: "QueueAsyncClient.delete"
  fullName: "com.azure.storage.queue.QueueAsyncClient.delete"
  package: "com.azure.storage.queue"
- uid: "com.azure.storage.queue.QueueAsyncClient.deleteWithResponse*"
  name: "deleteWithResponse"
  nameWithType: "QueueAsyncClient.deleteWithResponse"
  fullName: "com.azure.storage.queue.QueueAsyncClient.deleteWithResponse"
  package: "com.azure.storage.queue"
- uid: "reactor.core.publisher.Mono<com.azure.storage.queue.models.QueueProperties>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.queue.models.QueueProperties"
    name: "QueueProperties"
    fullName: "com.azure.storage.queue.models.QueueProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.queue.QueueAsyncClient.getProperties*"
  name: "getProperties"
  nameWithType: "QueueAsyncClient.getProperties"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getProperties"
  package: "com.azure.storage.queue"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.queue.models.QueueProperties>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.queue.models.QueueProperties"
    name: "QueueProperties"
    fullName: "com.azure.storage.queue.models.QueueProperties"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.queue.QueueAsyncClient.getPropertiesWithResponse*"
  name: "getPropertiesWithResponse"
  nameWithType: "QueueAsyncClient.getPropertiesWithResponse"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getPropertiesWithResponse"
  package: "com.azure.storage.queue"
- uid: "com.azure.storage.queue.QueueAsyncClient.setMetadata*"
  name: "setMetadata"
  nameWithType: "QueueAsyncClient.setMetadata"
  fullName: "com.azure.storage.queue.QueueAsyncClient.setMetadata"
  package: "com.azure.storage.queue"
- uid: "com.azure.storage.queue.QueueAsyncClient.setMetadataWithResponse*"
  name: "setMetadataWithResponse"
  nameWithType: "QueueAsyncClient.setMetadataWithResponse"
  fullName: "com.azure.storage.queue.QueueAsyncClient.setMetadataWithResponse"
  package: "com.azure.storage.queue"
- uid: "com.azure.core.http.rest.PagedFlux<com.azure.storage.queue.models.QueueSignedIdentifier>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.queue.models.QueueSignedIdentifier"
    name: "QueueSignedIdentifier"
    fullName: "com.azure.storage.queue.models.QueueSignedIdentifier"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.queue.QueueAsyncClient.getAccessPolicy*"
  name: "getAccessPolicy"
  nameWithType: "QueueAsyncClient.getAccessPolicy"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getAccessPolicy"
  package: "com.azure.storage.queue"
- uid: "java.lang.Iterable<com.azure.storage.queue.models.QueueSignedIdentifier>"
  spec.java:
  - uid: "java.lang.Iterable"
    name: "Iterable"
    fullName: "java.lang.Iterable"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.queue.models.QueueSignedIdentifier"
    name: "QueueSignedIdentifier"
    fullName: "com.azure.storage.queue.models.QueueSignedIdentifier"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.queue.QueueAsyncClient.setAccessPolicy*"
  name: "setAccessPolicy"
  nameWithType: "QueueAsyncClient.setAccessPolicy"
  fullName: "com.azure.storage.queue.QueueAsyncClient.setAccessPolicy"
  package: "com.azure.storage.queue"
- uid: "com.azure.storage.queue.QueueAsyncClient.setAccessPolicyWithResponse*"
  name: "setAccessPolicyWithResponse"
  nameWithType: "QueueAsyncClient.setAccessPolicyWithResponse"
  fullName: "com.azure.storage.queue.QueueAsyncClient.setAccessPolicyWithResponse"
  package: "com.azure.storage.queue"
- uid: "com.azure.storage.queue.QueueAsyncClient.clearMessages*"
  name: "clearMessages"
  nameWithType: "QueueAsyncClient.clearMessages"
  fullName: "com.azure.storage.queue.QueueAsyncClient.clearMessages"
  package: "com.azure.storage.queue"
- uid: "com.azure.storage.queue.QueueAsyncClient.clearMessagesWithResponse*"
  name: "clearMessagesWithResponse"
  nameWithType: "QueueAsyncClient.clearMessagesWithResponse"
  fullName: "com.azure.storage.queue.QueueAsyncClient.clearMessagesWithResponse"
  package: "com.azure.storage.queue"
- uid: "reactor.core.publisher.Mono<com.azure.storage.queue.models.SendMessageResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.queue.models.SendMessageResult"
    name: "SendMessageResult"
    fullName: "com.azure.storage.queue.models.SendMessageResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.queue.QueueAsyncClient.sendMessage*"
  name: "sendMessage"
  nameWithType: "QueueAsyncClient.sendMessage"
  fullName: "com.azure.storage.queue.QueueAsyncClient.sendMessage"
  package: "com.azure.storage.queue"
- uid: "java.time.Duration"
  spec.java:
  - uid: "java.time.Duration"
    name: "Duration"
    fullName: "java.time.Duration"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.queue.models.SendMessageResult>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.queue.models.SendMessageResult"
    name: "SendMessageResult"
    fullName: "com.azure.storage.queue.models.SendMessageResult"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.queue.QueueAsyncClient.sendMessageWithResponse*"
  name: "sendMessageWithResponse"
  nameWithType: "QueueAsyncClient.sendMessageWithResponse"
  fullName: "com.azure.storage.queue.QueueAsyncClient.sendMessageWithResponse"
  package: "com.azure.storage.queue"
- uid: "reactor.core.publisher.Mono<com.azure.storage.queue.models.QueueMessageItem>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.queue.models.QueueMessageItem"
    name: "QueueMessageItem"
    fullName: "com.azure.storage.queue.models.QueueMessageItem"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.queue.QueueAsyncClient.receiveMessage*"
  name: "receiveMessage"
  nameWithType: "QueueAsyncClient.receiveMessage"
  fullName: "com.azure.storage.queue.QueueAsyncClient.receiveMessage"
  package: "com.azure.storage.queue"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "com.azure.core.http.rest.PagedFlux<com.azure.storage.queue.models.QueueMessageItem>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.queue.models.QueueMessageItem"
    name: "QueueMessageItem"
    fullName: "com.azure.storage.queue.models.QueueMessageItem"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.queue.QueueAsyncClient.receiveMessages*"
  name: "receiveMessages"
  nameWithType: "QueueAsyncClient.receiveMessages"
  fullName: "com.azure.storage.queue.QueueAsyncClient.receiveMessages"
  package: "com.azure.storage.queue"
- uid: "com.azure.storage.queue.QueueAsyncClient.receiveMessagesWithOptionalTimeout*"
  name: "receiveMessagesWithOptionalTimeout"
  nameWithType: "QueueAsyncClient.receiveMessagesWithOptionalTimeout"
  fullName: "com.azure.storage.queue.QueueAsyncClient.receiveMessagesWithOptionalTimeout"
  package: "com.azure.storage.queue"
- uid: "reactor.core.publisher.Mono<com.azure.storage.queue.models.PeekedMessageItem>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.queue.models.PeekedMessageItem"
    name: "PeekedMessageItem"
    fullName: "com.azure.storage.queue.models.PeekedMessageItem"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.queue.QueueAsyncClient.peekMessage*"
  name: "peekMessage"
  nameWithType: "QueueAsyncClient.peekMessage"
  fullName: "com.azure.storage.queue.QueueAsyncClient.peekMessage"
  package: "com.azure.storage.queue"
- uid: "com.azure.core.http.rest.PagedFlux<com.azure.storage.queue.models.PeekedMessageItem>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.queue.models.PeekedMessageItem"
    name: "PeekedMessageItem"
    fullName: "com.azure.storage.queue.models.PeekedMessageItem"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.queue.QueueAsyncClient.peekMessages*"
  name: "peekMessages"
  nameWithType: "QueueAsyncClient.peekMessages"
  fullName: "com.azure.storage.queue.QueueAsyncClient.peekMessages"
  package: "com.azure.storage.queue"
- uid: "com.azure.storage.queue.QueueAsyncClient.peekMessagesWithOptionalTimeout*"
  name: "peekMessagesWithOptionalTimeout"
  nameWithType: "QueueAsyncClient.peekMessagesWithOptionalTimeout"
  fullName: "com.azure.storage.queue.QueueAsyncClient.peekMessagesWithOptionalTimeout"
  package: "com.azure.storage.queue"
- uid: "reactor.core.publisher.Mono<com.azure.storage.queue.models.UpdateMessageResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.queue.models.UpdateMessageResult"
    name: "UpdateMessageResult"
    fullName: "com.azure.storage.queue.models.UpdateMessageResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.queue.QueueAsyncClient.updateMessage*"
  name: "updateMessage"
  nameWithType: "QueueAsyncClient.updateMessage"
  fullName: "com.azure.storage.queue.QueueAsyncClient.updateMessage"
  package: "com.azure.storage.queue"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.queue.models.UpdateMessageResult>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.queue.models.UpdateMessageResult"
    name: "UpdateMessageResult"
    fullName: "com.azure.storage.queue.models.UpdateMessageResult"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.queue.QueueAsyncClient.updateMessageWithResponse*"
  name: "updateMessageWithResponse"
  nameWithType: "QueueAsyncClient.updateMessageWithResponse"
  fullName: "com.azure.storage.queue.QueueAsyncClient.updateMessageWithResponse"
  package: "com.azure.storage.queue"
- uid: "com.azure.storage.queue.QueueAsyncClient.deleteMessage*"
  name: "deleteMessage"
  nameWithType: "QueueAsyncClient.deleteMessage"
  fullName: "com.azure.storage.queue.QueueAsyncClient.deleteMessage"
  package: "com.azure.storage.queue"
- uid: "com.azure.storage.queue.QueueAsyncClient.deleteMessageWithResponse*"
  name: "deleteMessageWithResponse"
  nameWithType: "QueueAsyncClient.deleteMessageWithResponse"
  fullName: "com.azure.storage.queue.QueueAsyncClient.deleteMessageWithResponse"
  package: "com.azure.storage.queue"
- uid: "com.azure.storage.queue.QueueAsyncClient.getQueueName*"
  name: "getQueueName"
  nameWithType: "QueueAsyncClient.getQueueName"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getQueueName"
  package: "com.azure.storage.queue"
- uid: "com.azure.storage.queue.QueueAsyncClient.getAccountName*"
  name: "getAccountName"
  nameWithType: "QueueAsyncClient.getAccountName"
  fullName: "com.azure.storage.queue.QueueAsyncClient.getAccountName"
  package: "com.azure.storage.queue"
- uid: "com.azure.storage.queue.sas.QueueServiceSasSignatureValues"
  name: "QueueServiceSasSignatureValues"
  nameWithType: "QueueServiceSasSignatureValues"
  fullName: "com.azure.storage.queue.sas.QueueServiceSasSignatureValues"
- uid: "com.azure.storage.queue.QueueAsyncClient.generateSas*"
  name: "generateSas"
  nameWithType: "QueueAsyncClient.generateSas"
  fullName: "com.azure.storage.queue.QueueAsyncClient.generateSas"
  package: "com.azure.storage.queue"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.lang.Void"
  name: "Void"
  nameWithType: "Void"
  fullName: "java.lang.Void"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
- uid: "com.azure.core.http.rest.Response"
  name: "Response"
  nameWithType: "Response"
  fullName: "com.azure.core.http.rest.Response"
- uid: "com.azure.storage.queue.models.QueueProperties"
  name: "QueueProperties"
  nameWithType: "QueueProperties"
  fullName: "com.azure.storage.queue.models.QueueProperties"
- uid: "com.azure.core.http.rest.PagedFlux"
  name: "PagedFlux"
  nameWithType: "PagedFlux"
  fullName: "com.azure.core.http.rest.PagedFlux"
- uid: "com.azure.storage.queue.models.QueueSignedIdentifier"
  name: "QueueSignedIdentifier"
  nameWithType: "QueueSignedIdentifier"
  fullName: "com.azure.storage.queue.models.QueueSignedIdentifier"
- uid: "java.lang.Iterable"
  name: "Iterable"
  nameWithType: "Iterable"
  fullName: "java.lang.Iterable"
- uid: "com.azure.storage.queue.models.SendMessageResult"
  name: "SendMessageResult"
  nameWithType: "SendMessageResult"
  fullName: "com.azure.storage.queue.models.SendMessageResult"
- uid: "com.azure.storage.queue.models.QueueMessageItem"
  name: "QueueMessageItem"
  nameWithType: "QueueMessageItem"
  fullName: "com.azure.storage.queue.models.QueueMessageItem"
- uid: "com.azure.storage.queue.models.PeekedMessageItem"
  name: "PeekedMessageItem"
  nameWithType: "PeekedMessageItem"
  fullName: "com.azure.storage.queue.models.PeekedMessageItem"
- uid: "com.azure.storage.queue.models.UpdateMessageResult"
  name: "UpdateMessageResult"
  nameWithType: "UpdateMessageResult"
  fullName: "com.azure.storage.queue.models.UpdateMessageResult"
