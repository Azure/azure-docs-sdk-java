### YamlMime:JavaType
uid: "com.microsoft.azure.management.network.PacketCapture"
fullName: "com.microsoft.azure.management.network.PacketCapture"
name: "PacketCapture"
nameWithType: "PacketCapture"
summary: "Client-side representation of Packet capture object, associated with Network Watcher."
syntax: "public interface PacketCapture extends HasInner<PacketCaptureResultInner>, HasName, HasId, Indexable"
methods:
- uid: "com.microsoft.azure.management.network.PacketCapture.bytesToCapturePerPacket()"
  fullName: "com.microsoft.azure.management.network.PacketCapture.bytesToCapturePerPacket()"
  name: "bytesToCapturePerPacket()"
  nameWithType: "PacketCapture.bytesToCapturePerPacket()"
  modifiers:
  - "abstract"
  syntax: "public abstract int bytesToCapturePerPacket()"
  returns:
    description: "the number of bytes captured per packet, the remaining bytes are truncated."
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.PacketCapture.filters()"
  fullName: "com.microsoft.azure.management.network.PacketCapture.filters()"
  name: "filters()"
  nameWithType: "PacketCapture.filters()"
  modifiers:
  - "abstract"
  syntax: "public abstract List<PacketCaptureFilter> filters()"
  returns:
    description: "the filters value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.network.PacketCaptureFilter?alt=com.microsoft.azure.management.network.PacketCaptureFilter&text=PacketCaptureFilter\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.network.PacketCapture.getStatus()"
  fullName: "com.microsoft.azure.management.network.PacketCapture.getStatus()"
  name: "getStatus()"
  nameWithType: "PacketCapture.getStatus()"
  summary: "Query the status of a running packet capture session."
  modifiers:
  - "abstract"
  syntax: "public abstract PacketCaptureStatus getStatus()"
  desc: "Query the status of a running packet capture session."
  returns:
    description: "packet capture status"
    type: "<xref href=\"com.microsoft.azure.management.network.PacketCaptureStatus?alt=com.microsoft.azure.management.network.PacketCaptureStatus&text=PacketCaptureStatus\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.PacketCapture.getStatusAsync()"
  fullName: "com.microsoft.azure.management.network.PacketCapture.getStatusAsync()"
  name: "getStatusAsync()"
  nameWithType: "PacketCapture.getStatusAsync()"
  summary: "Query the status of a running packet capture session asynchronously."
  modifiers:
  - "abstract"
  syntax: "public abstract Observable<PacketCaptureStatus> getStatusAsync()"
  desc: "Query the status of a running packet capture session asynchronously."
  returns:
    description: "packet capture status"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.network.PacketCaptureStatus?alt=com.microsoft.azure.management.network.PacketCaptureStatus&text=PacketCaptureStatus\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.network.PacketCapture.provisioningState()"
  fullName: "com.microsoft.azure.management.network.PacketCapture.provisioningState()"
  name: "provisioningState()"
  nameWithType: "PacketCapture.provisioningState()"
  summary: "Get the provisioning state of the packet capture session."
  modifiers:
  - "abstract"
  syntax: "public abstract ProvisioningState provisioningState()"
  desc: "Get the provisioning state of the packet capture session."
  returns:
    description: "the provisioningState value"
    type: "<xref href=\"com.microsoft.azure.management.network.ProvisioningState?alt=com.microsoft.azure.management.network.ProvisioningState&text=ProvisioningState\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.PacketCapture.stop()"
  fullName: "com.microsoft.azure.management.network.PacketCapture.stop()"
  name: "stop()"
  nameWithType: "PacketCapture.stop()"
  summary: "Stops a specified packet capture session."
  modifiers:
  - "abstract"
  syntax: "public abstract void stop()"
  desc: "Stops a specified packet capture session."
- uid: "com.microsoft.azure.management.network.PacketCapture.stopAsync()"
  fullName: "com.microsoft.azure.management.network.PacketCapture.stopAsync()"
  name: "stopAsync()"
  nameWithType: "PacketCapture.stopAsync()"
  summary: "Stops a specified packet capture session asynchronously."
  modifiers:
  - "abstract"
  syntax: "public abstract Completable stopAsync()"
  desc: "Stops a specified packet capture session asynchronously."
  returns:
    description: "the handle to the REST call"
    type: "<xref href=\"rx.Completable?alt=rx.Completable&text=Completable\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.PacketCapture.storageLocation()"
  fullName: "com.microsoft.azure.management.network.PacketCapture.storageLocation()"
  name: "storageLocation()"
  nameWithType: "PacketCapture.storageLocation()"
  modifiers:
  - "abstract"
  syntax: "public abstract PacketCaptureStorageLocation storageLocation()"
  returns:
    description: "the storageLocation value"
    type: "<xref href=\"com.microsoft.azure.management.network.PacketCaptureStorageLocation?alt=com.microsoft.azure.management.network.PacketCaptureStorageLocation&text=PacketCaptureStorageLocation\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.PacketCapture.targetId()"
  fullName: "com.microsoft.azure.management.network.PacketCapture.targetId()"
  name: "targetId()"
  nameWithType: "PacketCapture.targetId()"
  modifiers:
  - "abstract"
  syntax: "public abstract String targetId()"
  returns:
    description: "the target id value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.PacketCapture.timeLimitInSeconds()"
  fullName: "com.microsoft.azure.management.network.PacketCapture.timeLimitInSeconds()"
  name: "timeLimitInSeconds()"
  nameWithType: "PacketCapture.timeLimitInSeconds()"
  modifiers:
  - "abstract"
  syntax: "public abstract int timeLimitInSeconds()"
  returns:
    description: "the maximum duration of the capture session in seconds"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.PacketCapture.totalBytesPerSession()"
  fullName: "com.microsoft.azure.management.network.PacketCapture.totalBytesPerSession()"
  name: "totalBytesPerSession()"
  nameWithType: "PacketCapture.totalBytesPerSession()"
  modifiers:
  - "abstract"
  syntax: "public abstract int totalBytesPerSession()"
  returns:
    description: "the maximum size of the capture output"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
desc: "Client-side representation of Packet capture object, associated with Network Watcher."
implements:
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.arm.models.HasId?alt=com.microsoft.azure.management.resources.fluentcore.arm.models.HasId&text=HasId\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.arm.models.HasName?alt=com.microsoft.azure.management.resources.fluentcore.arm.models.HasName&text=HasName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.HasInner?alt=com.microsoft.azure.management.resources.fluentcore.model.HasInner&text=HasInner\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.network.implementation.PacketCaptureResultInner?alt=com.microsoft.azure.management.network.implementation.PacketCaptureResultInner&text=PacketCaptureResultInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.Indexable?alt=com.microsoft.azure.management.resources.fluentcore.model.Indexable&text=Indexable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.microsoft.azure.management.network"
artifact: com.microsoft.azure:azure-mgmt-network:1.41.4
