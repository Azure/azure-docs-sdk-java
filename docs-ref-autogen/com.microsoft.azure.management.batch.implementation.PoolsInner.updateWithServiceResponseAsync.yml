### YamlMime:JavaMember
nameWithType: PoolsInner.updateWithServiceResponseAsync
type: method
members:
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  name: updateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  nameWithType: PoolsInner.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Pool properties that should be updated. Properties that are supplied will be updated, any property not supplied will be unchanged. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PoolInner object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.management.batch.PoolUpdateHeaders?alt=com.microsoft.azure.management.batch.PoolUpdateHeaders&text=PoolUpdateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of an existing pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<PoolInner, PoolUpdateHeaders>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.updateWithServiceResponseAsync(String,String,String,PoolInner)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch)
  name: updateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch)
  nameWithType: PoolsInner.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Pool properties that should be updated. Properties that are supplied will be updated, any property not supplied will be unchanged. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  - description: <p>The entity state (ETag) version of the pool to update. This value can be omitted or set to "*" to apply the operation unconditionally. </p>
    name: ifMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PoolInner object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.management.batch.PoolUpdateHeaders?alt=com.microsoft.azure.management.batch.PoolUpdateHeaders&text=PoolUpdateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of an existing pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<PoolInner, PoolUpdateHeaders>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.updateWithServiceResponseAsync(String,String,String,PoolInner,String)
uid: com.microsoft.azure.management.batch.implementation.PoolsInner.updateWithServiceResponseAsync*
fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
name: updateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
package: com.microsoft.azure.management.batch.implementation
metadata: {}
