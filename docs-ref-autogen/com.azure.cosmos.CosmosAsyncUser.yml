### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.CosmosAsyncUser
  id: CosmosAsyncUser
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos
  children:
  - com.azure.cosmos.CosmosAsyncUser.createPermission(com.azure.cosmos.models.CosmosPermissionProperties,com.azure.cosmos.models.CosmosPermissionRequestOptions)
  - com.azure.cosmos.CosmosAsyncUser.delete()
  - com.azure.cosmos.CosmosAsyncUser.getId()
  - com.azure.cosmos.CosmosAsyncUser.getPermission(java.lang.String)
  - com.azure.cosmos.CosmosAsyncUser.queryPermissions(java.lang.String)
  - com.azure.cosmos.CosmosAsyncUser.queryPermissions(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.CosmosAsyncUser.read()
  - com.azure.cosmos.CosmosAsyncUser.readAllPermissions()
  - com.azure.cosmos.CosmosAsyncUser.replace(com.azure.cosmos.models.CosmosUserProperties)
  - com.azure.cosmos.CosmosAsyncUser.upsertPermission(com.azure.cosmos.models.CosmosPermissionProperties,com.azure.cosmos.models.CosmosPermissionRequestOptions)
  langs:
  - java
  name: CosmosAsyncUser
  nameWithType: CosmosAsyncUser
  fullName: com.azure.cosmos.CosmosAsyncUser
  type: Class
  package: com.azure.cosmos
  summary: The type Cosmos async user.
  syntax:
    content: public class CosmosAsyncUser
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.CosmosAsyncUser.CosmosAsyncUser(java.lang.String,com.azure.cosmos.CosmosAsyncDatabase)
  id: CosmosAsyncUser(java.lang.String,com.azure.cosmos.CosmosAsyncDatabase)
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.CosmosAsyncUser
  langs:
  - java
  name: CosmosAsyncUser(String id, CosmosAsyncDatabase database)
  nameWithType: CosmosAsyncUser.CosmosAsyncUser(String id, CosmosAsyncDatabase database)
  fullName: com.azure.cosmos.CosmosAsyncUser.CosmosAsyncUser(String id, CosmosAsyncDatabase database)
  overload: com.azure.cosmos.CosmosAsyncUser.CosmosAsyncUser*
  type: Constructor
  package: com.azure.cosmos
  syntax:
    content: " CosmosAsyncUser(String id, CosmosAsyncDatabase database)"
    parameters:
    - id: id
      type: java.lang.String
    - id: database
      type: com.azure.cosmos.CosmosAsyncDatabase
- uid: com.azure.cosmos.CosmosAsyncUser.createPermission(com.azure.cosmos.models.CosmosPermissionProperties,com.azure.cosmos.models.CosmosPermissionRequestOptions)
  id: createPermission(com.azure.cosmos.models.CosmosPermissionProperties,com.azure.cosmos.models.CosmosPermissionRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.CosmosAsyncUser
  langs:
  - java
  name: createPermission(CosmosPermissionProperties permissionProperties, CosmosPermissionRequestOptions options)
  nameWithType: CosmosAsyncUser.createPermission(CosmosPermissionProperties permissionProperties, CosmosPermissionRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncUser.createPermission(CosmosPermissionProperties permissionProperties, CosmosPermissionRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncUser.createPermission*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Creates a permission.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the created permission. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosPermissionResponse> createPermission(CosmosPermissionProperties permissionProperties, CosmosPermissionRequestOptions options)
    parameters:
    - id: permissionProperties
      type: com.azure.cosmos.models.CosmosPermissionProperties
      description: the permission properties to create.
    - id: options
      type: com.azure.cosmos.models.CosmosPermissionRequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosPermissionResponse>
      description: an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the created permission or an error.
- uid: com.azure.cosmos.CosmosAsyncUser.delete()
  id: delete()
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.CosmosAsyncUser
  langs:
  - java
  name: delete()
  nameWithType: CosmosAsyncUser.delete()
  fullName: com.azure.cosmos.CosmosAsyncUser.delete()
  overload: com.azure.cosmos.CosmosAsyncUser.delete*
  type: Method
  package: com.azure.cosmos
  summary: Delete a cosmos user
  syntax:
    content: public Mono<CosmosUserResponse> delete()
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosUserResponse>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the deleted user or an error.
- uid: com.azure.cosmos.CosmosAsyncUser.getId()
  id: getId()
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.CosmosAsyncUser
  langs:
  - java
  name: getId()
  nameWithType: CosmosAsyncUser.getId()
  fullName: com.azure.cosmos.CosmosAsyncUser.getId()
  overload: com.azure.cosmos.CosmosAsyncUser.getId*
  type: Method
  package: com.azure.cosmos
  summary: Get the id of the <xref uid="com.azure.cosmos.CosmosAsyncUser" data-throw-if-not-resolved="false">CosmosAsyncUser</xref>
  syntax:
    content: public String getId()
    return:
      type: java.lang.String
      description: the id of the <xref uid="com.azure.cosmos.CosmosAsyncUser" data-throw-if-not-resolved="false">CosmosAsyncUser</xref>
- uid: com.azure.cosmos.CosmosAsyncUser.getPermission(java.lang.String)
  id: getPermission(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.CosmosAsyncUser
  langs:
  - java
  name: getPermission(String id)
  nameWithType: CosmosAsyncUser.getPermission(String id)
  fullName: com.azure.cosmos.CosmosAsyncUser.getPermission(String id)
  overload: com.azure.cosmos.CosmosAsyncUser.getPermission*
  type: Method
  package: com.azure.cosmos
  summary: Get cosmos permission without making a call to backend
  syntax:
    content: public CosmosAsyncPermission getPermission(String id)
    parameters:
    - id: id
      type: java.lang.String
      description: the id
    return:
      type: com.azure.cosmos.CosmosAsyncPermission
      description: the cosmos permission
- uid: com.azure.cosmos.CosmosAsyncUser.queryPermissions(java.lang.String)
  id: queryPermissions(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.CosmosAsyncUser
  langs:
  - java
  name: queryPermissions(String query)
  nameWithType: CosmosAsyncUser.queryPermissions(String query)
  fullName: com.azure.cosmos.CosmosAsyncUser.queryPermissions(String query)
  overload: com.azure.cosmos.CosmosAsyncUser.queryPermissions*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Query for permissions.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response pages of the obtained permissions. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosPermissionProperties> queryPermissions(String query)
    parameters:
    - id: query
      type: java.lang.String
      description: the query.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosPermissionProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the obtained permissions or
         an error.
- uid: com.azure.cosmos.CosmosAsyncUser.queryPermissions(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryPermissions(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.CosmosAsyncUser
  langs:
  - java
  name: queryPermissions(String query, CosmosQueryRequestOptions options)
  nameWithType: CosmosAsyncUser.queryPermissions(String query, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncUser.queryPermissions(String query, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncUser.queryPermissions*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Query for permissions.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response pages of the obtained permissions. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosPermissionProperties> queryPermissions(String query, CosmosQueryRequestOptions options)
    parameters:
    - id: query
      type: java.lang.String
      description: the query.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosPermissionProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the obtained permissions or
         an error.
- uid: com.azure.cosmos.CosmosAsyncUser.read()
  id: read()
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.CosmosAsyncUser
  langs:
  - java
  name: read()
  nameWithType: CosmosAsyncUser.read()
  fullName: com.azure.cosmos.CosmosAsyncUser.read()
  overload: com.azure.cosmos.CosmosAsyncUser.read*
  type: Method
  package: com.azure.cosmos
  summary: Reads a cosmos user
  syntax:
    content: public Mono<CosmosUserResponse> read()
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosUserResponse>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the read user or an error.
- uid: com.azure.cosmos.CosmosAsyncUser.readAllPermissions()
  id: readAllPermissions()
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.CosmosAsyncUser
  langs:
  - java
  name: readAllPermissions()
  nameWithType: CosmosAsyncUser.readAllPermissions()
  fullName: com.azure.cosmos.CosmosAsyncUser.readAllPermissions()
  overload: com.azure.cosmos.CosmosAsyncUser.readAllPermissions*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Reads all permissions.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response pages of the read permissions. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosPermissionProperties> readAllPermissions()
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosPermissionProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the read permissions or an
         error.
- uid: com.azure.cosmos.CosmosAsyncUser.replace(com.azure.cosmos.models.CosmosUserProperties)
  id: replace(com.azure.cosmos.models.CosmosUserProperties)
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.CosmosAsyncUser
  langs:
  - java
  name: replace(CosmosUserProperties userProperties)
  nameWithType: CosmosAsyncUser.replace(CosmosUserProperties userProperties)
  fullName: com.azure.cosmos.CosmosAsyncUser.replace(CosmosUserProperties userProperties)
  overload: com.azure.cosmos.CosmosAsyncUser.replace*
  type: Method
  package: com.azure.cosmos
  summary: Replace a cosmos user
  syntax:
    content: public Mono<CosmosUserResponse> replace(CosmosUserProperties userProperties)
    parameters:
    - id: userProperties
      type: com.azure.cosmos.models.CosmosUserProperties
      description: the user properties to use
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosUserResponse>
      description: a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the replaced user or an error.
- uid: com.azure.cosmos.CosmosAsyncUser.upsertPermission(com.azure.cosmos.models.CosmosPermissionProperties,com.azure.cosmos.models.CosmosPermissionRequestOptions)
  id: upsertPermission(com.azure.cosmos.models.CosmosPermissionProperties,com.azure.cosmos.models.CosmosPermissionRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.CosmosAsyncUser
  langs:
  - java
  name: upsertPermission(CosmosPermissionProperties permissionProperties, CosmosPermissionRequestOptions options)
  nameWithType: CosmosAsyncUser.upsertPermission(CosmosPermissionProperties permissionProperties, CosmosPermissionRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncUser.upsertPermission(CosmosPermissionProperties permissionProperties, CosmosPermissionRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncUser.upsertPermission*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Upserts a permission.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the upserted permission. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosPermissionResponse> upsertPermission(CosmosPermissionProperties permissionProperties, CosmosPermissionRequestOptions options)
    parameters:
    - id: permissionProperties
      type: com.azure.cosmos.models.CosmosPermissionProperties
      description: the permission properties to upsert.
    - id: options
      type: com.azure.cosmos.models.CosmosPermissionRequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosPermissionResponse>
      description: an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the upserted permission or an error.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.CosmosAsyncDatabase
  name: CosmosAsyncDatabase
  nameWithType: CosmosAsyncDatabase
  fullName: com.azure.cosmos.CosmosAsyncDatabase
- uid: com.azure.cosmos.CosmosAsyncUser.CosmosAsyncUser*
  name: CosmosAsyncUser
  nameWithType: CosmosAsyncUser.CosmosAsyncUser
  fullName: com.azure.cosmos.CosmosAsyncUser.CosmosAsyncUser
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncUser.getId*
  name: getId
  nameWithType: CosmosAsyncUser.getId
  fullName: com.azure.cosmos.CosmosAsyncUser.getId
  package: com.azure.cosmos
- uid: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosUserResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosUserResponse
    name: CosmosUserResponse
    fullName: com.azure.cosmos.models.CosmosUserResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncUser.read*
  name: read
  nameWithType: CosmosAsyncUser.read
  fullName: com.azure.cosmos.CosmosAsyncUser.read
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosUserProperties
  name: CosmosUserProperties
  nameWithType: CosmosUserProperties
  fullName: com.azure.cosmos.models.CosmosUserProperties
- uid: com.azure.cosmos.CosmosAsyncUser.replace*
  name: replace
  nameWithType: CosmosAsyncUser.replace
  fullName: com.azure.cosmos.CosmosAsyncUser.replace
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncUser.delete*
  name: delete
  nameWithType: CosmosAsyncUser.delete
  fullName: com.azure.cosmos.CosmosAsyncUser.delete
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosPermissionProperties
  name: CosmosPermissionProperties
  nameWithType: CosmosPermissionProperties
  fullName: com.azure.cosmos.models.CosmosPermissionProperties
- uid: com.azure.cosmos.models.CosmosPermissionRequestOptions
  name: CosmosPermissionRequestOptions
  nameWithType: CosmosPermissionRequestOptions
  fullName: com.azure.cosmos.models.CosmosPermissionRequestOptions
- uid: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosPermissionResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosPermissionResponse
    name: CosmosPermissionResponse
    fullName: com.azure.cosmos.models.CosmosPermissionResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncUser.createPermission*
  name: createPermission
  nameWithType: CosmosAsyncUser.createPermission
  fullName: com.azure.cosmos.CosmosAsyncUser.createPermission
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncUser.upsertPermission*
  name: upsertPermission
  nameWithType: CosmosAsyncUser.upsertPermission
  fullName: com.azure.cosmos.CosmosAsyncUser.upsertPermission
  package: com.azure.cosmos
- uid: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosPermissionProperties>
  spec.java:
  - uid: com.azure.cosmos.util.CosmosPagedFlux
    name: CosmosPagedFlux
    fullName: com.azure.cosmos.util.CosmosPagedFlux
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosPermissionProperties
    name: CosmosPermissionProperties
    fullName: com.azure.cosmos.models.CosmosPermissionProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncUser.readAllPermissions*
  name: readAllPermissions
  nameWithType: CosmosAsyncUser.readAllPermissions
  fullName: com.azure.cosmos.CosmosAsyncUser.readAllPermissions
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncUser.queryPermissions*
  name: queryPermissions
  nameWithType: CosmosAsyncUser.queryPermissions
  fullName: com.azure.cosmos.CosmosAsyncUser.queryPermissions
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosQueryRequestOptions
  name: CosmosQueryRequestOptions
  nameWithType: CosmosQueryRequestOptions
  fullName: com.azure.cosmos.models.CosmosQueryRequestOptions
- uid: com.azure.cosmos.CosmosAsyncPermission
  name: CosmosAsyncPermission
  nameWithType: CosmosAsyncPermission
  fullName: com.azure.cosmos.CosmosAsyncPermission
- uid: com.azure.cosmos.CosmosAsyncUser.getPermission*
  name: getPermission
  nameWithType: CosmosAsyncUser.getPermission
  fullName: com.azure.cosmos.CosmosAsyncUser.getPermission
  package: com.azure.cosmos
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.cosmos.models.CosmosUserResponse
  name: CosmosUserResponse
  nameWithType: CosmosUserResponse
  fullName: com.azure.cosmos.models.CosmosUserResponse
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.cosmos.models.CosmosPermissionResponse
  name: CosmosPermissionResponse
  nameWithType: CosmosPermissionResponse
  fullName: com.azure.cosmos.models.CosmosPermissionResponse
- uid: com.azure.cosmos.util.CosmosPagedFlux
  name: CosmosPagedFlux
  nameWithType: CosmosPagedFlux
  fullName: com.azure.cosmos.util.CosmosPagedFlux
