### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders"
  id: "PathHttpHeaders"
  parent: "com.azure.storage.file.datalake.models"
  children:
  - "com.azure.storage.file.datalake.models.PathHttpHeaders.PathHttpHeaders()"
  - "com.azure.storage.file.datalake.models.PathHttpHeaders.getCacheControl()"
  - "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentDisposition()"
  - "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentEncoding()"
  - "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentLanguage()"
  - "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentMd5()"
  - "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentType()"
  - "com.azure.storage.file.datalake.models.PathHttpHeaders.getTransactionalContentHash()"
  - "com.azure.storage.file.datalake.models.PathHttpHeaders.setCacheControl(java.lang.String)"
  - "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentDisposition(java.lang.String)"
  - "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentEncoding(java.lang.String)"
  - "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentLanguage(java.lang.String)"
  - "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentMd5(byte[])"
  - "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentType(java.lang.String)"
  - "com.azure.storage.file.datalake.models.PathHttpHeaders.setTransactionalContentHash(byte[])"
  langs:
  - "java"
  name: "PathHttpHeaders"
  nameWithType: "PathHttpHeaders"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders"
  type: "Class"
  package: "com.azure.storage.file.datalake.models"
  summary: "Additional parameters for a set of operations, such as: Paths\\_create, Paths\\_update, Paths\\_flushData, Paths\\_appendData."
  syntax:
    content: "public final class PathHttpHeaders"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.PathHttpHeaders()"
  id: "PathHttpHeaders()"
  parent: "com.azure.storage.file.datalake.models.PathHttpHeaders"
  langs:
  - "java"
  name: "PathHttpHeaders()"
  nameWithType: "PathHttpHeaders.PathHttpHeaders()"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.PathHttpHeaders()"
  overload: "com.azure.storage.file.datalake.models.PathHttpHeaders.PathHttpHeaders*"
  type: "Constructor"
  package: "com.azure.storage.file.datalake.models"
  syntax:
    content: "public PathHttpHeaders()"
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.getCacheControl()"
  id: "getCacheControl()"
  parent: "com.azure.storage.file.datalake.models.PathHttpHeaders"
  langs:
  - "java"
  name: "getCacheControl()"
  nameWithType: "PathHttpHeaders.getCacheControl()"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.getCacheControl()"
  overload: "com.azure.storage.file.datalake.models.PathHttpHeaders.getCacheControl*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Get the cacheControl property: Optional. Sets the blob's cache control. If specified, this property is stored with the blob and returned with a read request."
  syntax:
    content: "public String getCacheControl()"
    return:
      type: "java.lang.String"
      description: "the cacheControl value."
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentDisposition()"
  id: "getContentDisposition()"
  parent: "com.azure.storage.file.datalake.models.PathHttpHeaders"
  langs:
  - "java"
  name: "getContentDisposition()"
  nameWithType: "PathHttpHeaders.getContentDisposition()"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentDisposition()"
  overload: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentDisposition*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Get the contentDisposition property: Optional. Sets the blob's Content-Disposition header."
  syntax:
    content: "public String getContentDisposition()"
    return:
      type: "java.lang.String"
      description: "the contentDisposition value."
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentEncoding()"
  id: "getContentEncoding()"
  parent: "com.azure.storage.file.datalake.models.PathHttpHeaders"
  langs:
  - "java"
  name: "getContentEncoding()"
  nameWithType: "PathHttpHeaders.getContentEncoding()"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentEncoding()"
  overload: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentEncoding*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Get the contentEncoding property: Optional. Sets the blob's content encoding. If specified, this property is stored with the blob and returned with a read request."
  syntax:
    content: "public String getContentEncoding()"
    return:
      type: "java.lang.String"
      description: "the contentEncoding value."
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentLanguage()"
  id: "getContentLanguage()"
  parent: "com.azure.storage.file.datalake.models.PathHttpHeaders"
  langs:
  - "java"
  name: "getContentLanguage()"
  nameWithType: "PathHttpHeaders.getContentLanguage()"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentLanguage()"
  overload: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentLanguage*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Get the contentLanguage property: Optional. Set the blob's content language. If specified, this property is stored with the blob and returned with a read request."
  syntax:
    content: "public String getContentLanguage()"
    return:
      type: "java.lang.String"
      description: "the contentLanguage value."
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentMd5()"
  id: "getContentMd5()"
  parent: "com.azure.storage.file.datalake.models.PathHttpHeaders"
  langs:
  - "java"
  name: "getContentMd5()"
  nameWithType: "PathHttpHeaders.getContentMd5()"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentMd5()"
  overload: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentMd5*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Get the contentMd5 property: Specify the transactional md5 for the body, to be validated by the service."
  syntax:
    content: "public byte[] getContentMd5()"
    return:
      type: "byte[]"
      description: "the contentMd5 value."
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentType()"
  id: "getContentType()"
  parent: "com.azure.storage.file.datalake.models.PathHttpHeaders"
  langs:
  - "java"
  name: "getContentType()"
  nameWithType: "PathHttpHeaders.getContentType()"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentType()"
  overload: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentType*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Get the contentType property: Optional. Sets the blob's content type. If specified, this property is stored with the blob and returned with a read request."
  syntax:
    content: "public String getContentType()"
    return:
      type: "java.lang.String"
      description: "the contentType value."
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.getTransactionalContentHash()"
  id: "getTransactionalContentHash()"
  parent: "com.azure.storage.file.datalake.models.PathHttpHeaders"
  langs:
  - "java"
  name: "getTransactionalContentHash()"
  nameWithType: "PathHttpHeaders.getTransactionalContentHash()"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.getTransactionalContentHash()"
  overload: "com.azure.storage.file.datalake.models.PathHttpHeaders.getTransactionalContentHash*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Get the transactionalContentHash property: Specify the transactional md5 for the body, to be validated by the service."
  syntax:
    content: "public byte[] getTransactionalContentHash()"
    return:
      type: "byte[]"
      description: "the transactionalContentHash value."
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.setCacheControl(java.lang.String)"
  id: "setCacheControl(java.lang.String)"
  parent: "com.azure.storage.file.datalake.models.PathHttpHeaders"
  langs:
  - "java"
  name: "setCacheControl(String cacheControl)"
  nameWithType: "PathHttpHeaders.setCacheControl(String cacheControl)"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.setCacheControl(String cacheControl)"
  overload: "com.azure.storage.file.datalake.models.PathHttpHeaders.setCacheControl*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Set the cacheControl property: Optional. Sets the blob's cache control. If specified, this property is stored with the blob and returned with a read request."
  syntax:
    content: "public PathHttpHeaders setCacheControl(String cacheControl)"
    parameters:
    - id: "cacheControl"
      type: "java.lang.String"
      description: "the cacheControl value to set."
    return:
      type: "com.azure.storage.file.datalake.models.PathHttpHeaders"
      description: "the PathHttpHeaders object itself."
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentDisposition(java.lang.String)"
  id: "setContentDisposition(java.lang.String)"
  parent: "com.azure.storage.file.datalake.models.PathHttpHeaders"
  langs:
  - "java"
  name: "setContentDisposition(String contentDisposition)"
  nameWithType: "PathHttpHeaders.setContentDisposition(String contentDisposition)"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentDisposition(String contentDisposition)"
  overload: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentDisposition*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Set the contentDisposition property: Optional. Sets the blob's Content-Disposition header."
  syntax:
    content: "public PathHttpHeaders setContentDisposition(String contentDisposition)"
    parameters:
    - id: "contentDisposition"
      type: "java.lang.String"
      description: "the contentDisposition value to set."
    return:
      type: "com.azure.storage.file.datalake.models.PathHttpHeaders"
      description: "the PathHttpHeaders object itself."
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentEncoding(java.lang.String)"
  id: "setContentEncoding(java.lang.String)"
  parent: "com.azure.storage.file.datalake.models.PathHttpHeaders"
  langs:
  - "java"
  name: "setContentEncoding(String contentEncoding)"
  nameWithType: "PathHttpHeaders.setContentEncoding(String contentEncoding)"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentEncoding(String contentEncoding)"
  overload: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentEncoding*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Set the contentEncoding property: Optional. Sets the blob's content encoding. If specified, this property is stored with the blob and returned with a read request."
  syntax:
    content: "public PathHttpHeaders setContentEncoding(String contentEncoding)"
    parameters:
    - id: "contentEncoding"
      type: "java.lang.String"
      description: "the contentEncoding value to set."
    return:
      type: "com.azure.storage.file.datalake.models.PathHttpHeaders"
      description: "the PathHttpHeaders object itself."
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentLanguage(java.lang.String)"
  id: "setContentLanguage(java.lang.String)"
  parent: "com.azure.storage.file.datalake.models.PathHttpHeaders"
  langs:
  - "java"
  name: "setContentLanguage(String contentLanguage)"
  nameWithType: "PathHttpHeaders.setContentLanguage(String contentLanguage)"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentLanguage(String contentLanguage)"
  overload: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentLanguage*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Set the contentLanguage property: Optional. Set the blob's content language. If specified, this property is stored with the blob and returned with a read request."
  syntax:
    content: "public PathHttpHeaders setContentLanguage(String contentLanguage)"
    parameters:
    - id: "contentLanguage"
      type: "java.lang.String"
      description: "the contentLanguage value to set."
    return:
      type: "com.azure.storage.file.datalake.models.PathHttpHeaders"
      description: "the PathHttpHeaders object itself."
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentMd5(byte[])"
  id: "setContentMd5(byte[])"
  parent: "com.azure.storage.file.datalake.models.PathHttpHeaders"
  langs:
  - "java"
  name: "setContentMd5(byte[] contentMd5)"
  nameWithType: "PathHttpHeaders.setContentMd5(byte[] contentMd5)"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentMd5(byte[] contentMd5)"
  overload: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentMd5*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Set the contentMd5 property: Specify the transactional md5 for the body, to be validated by the service."
  syntax:
    content: "public PathHttpHeaders setContentMd5(byte[] contentMd5)"
    parameters:
    - id: "contentMd5"
      type: "byte[]"
      description: "the contentMd5 value to set."
    return:
      type: "com.azure.storage.file.datalake.models.PathHttpHeaders"
      description: "the PathHttpHeaders object itself."
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentType(java.lang.String)"
  id: "setContentType(java.lang.String)"
  parent: "com.azure.storage.file.datalake.models.PathHttpHeaders"
  langs:
  - "java"
  name: "setContentType(String contentType)"
  nameWithType: "PathHttpHeaders.setContentType(String contentType)"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentType(String contentType)"
  overload: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentType*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Set the contentType property: Optional. Sets the blob's content type. If specified, this property is stored with the blob and returned with a read request."
  syntax:
    content: "public PathHttpHeaders setContentType(String contentType)"
    parameters:
    - id: "contentType"
      type: "java.lang.String"
      description: "the contentType value to set."
    return:
      type: "com.azure.storage.file.datalake.models.PathHttpHeaders"
      description: "the PathHttpHeaders object itself."
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.setTransactionalContentHash(byte[])"
  id: "setTransactionalContentHash(byte[])"
  parent: "com.azure.storage.file.datalake.models.PathHttpHeaders"
  langs:
  - "java"
  name: "setTransactionalContentHash(byte[] transactionalContentHash)"
  nameWithType: "PathHttpHeaders.setTransactionalContentHash(byte[] transactionalContentHash)"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.setTransactionalContentHash(byte[] transactionalContentHash)"
  overload: "com.azure.storage.file.datalake.models.PathHttpHeaders.setTransactionalContentHash*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Set the transactionalContentHash property: Specify the transactional md5 for the body, to be validated by the service."
  syntax:
    content: "public PathHttpHeaders setTransactionalContentHash(byte[] transactionalContentHash)"
    parameters:
    - id: "transactionalContentHash"
      type: "byte[]"
      description: "the transactionalContentHash value to\n set."
    return:
      type: "com.azure.storage.file.datalake.models.PathHttpHeaders"
      description: "the PathHttpHeaders object itself."
references:
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.PathHttpHeaders*"
  name: "PathHttpHeaders"
  nameWithType: "PathHttpHeaders.PathHttpHeaders"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.PathHttpHeaders"
  package: "com.azure.storage.file.datalake.models"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.getCacheControl*"
  name: "getCacheControl"
  nameWithType: "PathHttpHeaders.getCacheControl"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.getCacheControl"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.setCacheControl*"
  name: "setCacheControl"
  nameWithType: "PathHttpHeaders.setCacheControl"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.setCacheControl"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentEncoding*"
  name: "getContentEncoding"
  nameWithType: "PathHttpHeaders.getContentEncoding"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentEncoding"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentEncoding*"
  name: "setContentEncoding"
  nameWithType: "PathHttpHeaders.setContentEncoding"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentEncoding"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentLanguage*"
  name: "getContentLanguage"
  nameWithType: "PathHttpHeaders.getContentLanguage"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentLanguage"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentLanguage*"
  name: "setContentLanguage"
  nameWithType: "PathHttpHeaders.setContentLanguage"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentLanguage"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentDisposition*"
  name: "getContentDisposition"
  nameWithType: "PathHttpHeaders.getContentDisposition"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentDisposition"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentDisposition*"
  name: "setContentDisposition"
  nameWithType: "PathHttpHeaders.setContentDisposition"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentDisposition"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentType*"
  name: "getContentType"
  nameWithType: "PathHttpHeaders.getContentType"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentType"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentType*"
  name: "setContentType"
  nameWithType: "PathHttpHeaders.setContentType"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentType"
  package: "com.azure.storage.file.datalake.models"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentMd5*"
  name: "getContentMd5"
  nameWithType: "PathHttpHeaders.getContentMd5"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.getContentMd5"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentMd5*"
  name: "setContentMd5"
  nameWithType: "PathHttpHeaders.setContentMd5"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.setContentMd5"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.getTransactionalContentHash*"
  name: "getTransactionalContentHash"
  nameWithType: "PathHttpHeaders.getTransactionalContentHash"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.getTransactionalContentHash"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.PathHttpHeaders.setTransactionalContentHash*"
  name: "setTransactionalContentHash"
  nameWithType: "PathHttpHeaders.setTransactionalContentHash"
  fullName: "com.azure.storage.file.datalake.models.PathHttpHeaders.setTransactionalContentHash"
  package: "com.azure.storage.file.datalake.models"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
