### YamlMime:ManagedReference
items:
- uid: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport
  id: CosmosConfigurationSupport
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.config
  children:
  - com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.CosmosConfigurationSupport()
  - com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.cosmosMappingContext()
  - com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.expressionResolver(org.springframework.beans.factory.BeanFactory)
  - com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.getDatabaseName()
  - com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.getInitialEntitySet()
  - com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.getMappingBasePackages()
  - com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.scanForEntities(java.lang.String)
  langs:
  - java
  name: CosmosConfigurationSupport
  nameWithType: CosmosConfigurationSupport
  fullName: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport
  type: Class
  package: com.azure.spring.data.cosmos.config
  summary: A support class for cosmos configuration to scan beans and get initial entities
  syntax:
    content: public abstract class CosmosConfigurationSupport
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.CosmosConfigurationSupport()
  id: CosmosConfigurationSupport()
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport
  langs:
  - java
  name: CosmosConfigurationSupport()
  nameWithType: CosmosConfigurationSupport.CosmosConfigurationSupport()
  fullName: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.CosmosConfigurationSupport()
  overload: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.CosmosConfigurationSupport*
  type: Constructor
  package: com.azure.spring.data.cosmos.config
  syntax:
    content: public CosmosConfigurationSupport()
- uid: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.cosmosMappingContext()
  id: cosmosMappingContext()
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport
  langs:
  - java
  name: cosmosMappingContext()
  nameWithType: CosmosConfigurationSupport.cosmosMappingContext()
  fullName: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.cosmosMappingContext()
  overload: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.cosmosMappingContext*
  type: Method
  package: com.azure.spring.data.cosmos.config
  summary: Declare CosmosMappingContext bean.
  syntax:
    content: public CosmosMappingContext cosmosMappingContext()
    return:
      type: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext
      description: CosmosMappingContext bean
  exceptions:
  - type: java.lang.ClassNotFoundException
    description: if the class type is invalid
- uid: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.expressionResolver(org.springframework.beans.factory.BeanFactory)
  id: expressionResolver(org.springframework.beans.factory.BeanFactory)
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport
  langs:
  - java
  name: expressionResolver(BeanFactory beanFactory)
  nameWithType: CosmosConfigurationSupport.expressionResolver(BeanFactory beanFactory)
  fullName: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.expressionResolver(BeanFactory beanFactory)
  overload: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.expressionResolver*
  type: Method
  package: com.azure.spring.data.cosmos.config
  summary: Declare ExpressionResolver bean.
  syntax:
    content: public ExpressionResolver expressionResolver(BeanFactory beanFactory)
    parameters:
    - id: beanFactory
      type: org.springframework.beans.factory.BeanFactory
      description: used to initialize the embeddedValueResolver
    return:
      type: com.azure.spring.data.cosmos.common.ExpressionResolver
      description: ExpressionResolver bean
- uid: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.getDatabaseName()
  id: getDatabaseName()
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport
  langs:
  - java
  name: getDatabaseName()
  nameWithType: CosmosConfigurationSupport.getDatabaseName()
  fullName: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.getDatabaseName()
  overload: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.getDatabaseName*
  type: Method
  package: com.azure.spring.data.cosmos.config
  summary: Return the name of the database to connect to
  syntax:
    content: protected abstract String getDatabaseName()
    return:
      type: java.lang.String
      description: must not be null.
- uid: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.getInitialEntitySet()
  id: getInitialEntitySet()
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport
  langs:
  - java
  name: getInitialEntitySet()
  nameWithType: CosmosConfigurationSupport.getInitialEntitySet()
  fullName: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.getInitialEntitySet()
  overload: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.getInitialEntitySet*
  type: Method
  package: com.azure.spring.data.cosmos.config
  summary: Scan all base packages and get all beans
  syntax:
    content: protected Set<Class<?>> getInitialEntitySet()
    return:
      type: java.util.Set<java.lang.Class<?>>
      description: initial entity set
  exceptions:
  - type: java.lang.ClassNotFoundException
    description: if the class type is invalid
- uid: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.getMappingBasePackages()
  id: getMappingBasePackages()
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport
  langs:
  - java
  name: getMappingBasePackages()
  nameWithType: CosmosConfigurationSupport.getMappingBasePackages()
  fullName: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.getMappingBasePackages()
  overload: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.getMappingBasePackages*
  type: Method
  package: com.azure.spring.data.cosmos.config
  syntax:
    content: protected Collection<String> getMappingBasePackages()
    return:
      type: java.util.Collection<java.lang.String>
- uid: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.scanForEntities(java.lang.String)
  id: scanForEntities(java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport
  langs:
  - java
  name: scanForEntities(String basePackage)
  nameWithType: CosmosConfigurationSupport.scanForEntities(String basePackage)
  fullName: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.scanForEntities(String basePackage)
  overload: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.scanForEntities*
  type: Method
  package: com.azure.spring.data.cosmos.config
  summary: Scan all beans under the given base package
  syntax:
    content: protected Set<Class<?>> scanForEntities(String basePackage)
    parameters:
    - id: basePackage
      type: java.lang.String
      description: set the base location of beans
    return:
      type: java.util.Set<java.lang.Class<?>>
      description: initial entity set for found beans
  exceptions:
  - type: java.lang.ClassNotFoundException
    description: if the class type is invalid
references:
- uid: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.CosmosConfigurationSupport*
  name: CosmosConfigurationSupport
  nameWithType: CosmosConfigurationSupport.CosmosConfigurationSupport
  fullName: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.CosmosConfigurationSupport
  package: com.azure.spring.data.cosmos.config
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.getDatabaseName*
  name: getDatabaseName
  nameWithType: CosmosConfigurationSupport.getDatabaseName
  fullName: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.getDatabaseName
  package: com.azure.spring.data.cosmos.config
- uid: org.springframework.beans.factory.BeanFactory
  spec.java:
  - uid: org.springframework.beans.factory.BeanFactory
    name: BeanFactory
    fullName: org.springframework.beans.factory.BeanFactory
- uid: com.azure.spring.data.cosmos.common.ExpressionResolver
  name: ExpressionResolver
  nameWithType: ExpressionResolver
  fullName: com.azure.spring.data.cosmos.common.ExpressionResolver
- uid: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.expressionResolver*
  name: expressionResolver
  nameWithType: CosmosConfigurationSupport.expressionResolver
  fullName: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.expressionResolver
  package: com.azure.spring.data.cosmos.config
- uid: java.lang.ClassNotFoundException
  spec.java:
  - uid: java.lang.ClassNotFoundException
    name: ClassNotFoundException
    fullName: java.lang.ClassNotFoundException
- uid: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext
  name: CosmosMappingContext
  nameWithType: CosmosMappingContext
  fullName: com.azure.spring.data.cosmos.core.mapping.CosmosMappingContext
- uid: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.cosmosMappingContext*
  name: cosmosMappingContext
  nameWithType: CosmosConfigurationSupport.cosmosMappingContext
  fullName: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.cosmosMappingContext
  package: com.azure.spring.data.cosmos.config
- uid: java.util.Collection<java.lang.String>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.getMappingBasePackages*
  name: getMappingBasePackages
  nameWithType: CosmosConfigurationSupport.getMappingBasePackages
  fullName: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.getMappingBasePackages
  package: com.azure.spring.data.cosmos.config
- uid: java.util.Set<java.lang.Class<?>>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.getInitialEntitySet*
  name: getInitialEntitySet
  nameWithType: CosmosConfigurationSupport.getInitialEntitySet
  fullName: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.getInitialEntitySet
  package: com.azure.spring.data.cosmos.config
- uid: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.scanForEntities*
  name: scanForEntities
  nameWithType: CosmosConfigurationSupport.scanForEntities
  fullName: com.azure.spring.data.cosmos.config.CosmosConfigurationSupport.scanForEntities
  package: com.azure.spring.data.cosmos.config
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: java.util.Set
  name: Set
  nameWithType: Set
  fullName: java.util.Set
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
