### YamlMime:ManagedReference
items:
- uid: system.fabric._fabric_runtime
  id: _fabric_runtime
  parent: system.fabric
  children:
  - system.fabric._fabric_runtime.close()
  - system.fabric._fabric_runtime.create()
  - system.fabric._fabric_runtime.createAsync(Duration)
  - system.fabric._fabric_runtime.createAsync(Runnable,Duration)
  - system.fabric._fabric_runtime.getActivationContext()
  - system.fabric._fabric_runtime.getActivationContextAsync(Duration)
  - system.fabric._fabric_runtime.getNodeContext()
  - system.fabric._fabric_runtime.getNodeContextAsync(Duration)
  - system.fabric._fabric_runtime.registerServiceType(String,Class<?>)
  - system.fabric._fabric_runtime.registerServiceTypeAsync(String,Class<?>,Duration)
  - system.fabric._fabric_runtime.registerStatefulServiceFactory(String,StatefulServiceFactory)
  - system.fabric._fabric_runtime.registerStatefulServiceFactoryAsync(String,StatefulServiceFactory,Duration)
  - system.fabric._fabric_runtime.registerStatelessServiceFactory(String,StatelessServiceFactory)
  - system.fabric._fabric_runtime.registerStatelessServiceFactoryAsync(String,StatelessServiceFactory,Duration)
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: FabricRuntime
  nameWithType: FabricRuntime
  fullName: system.fabric.FabricRuntime
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 28
  package: system.fabric
  summary: "<p>Allows user created hosts to obtain their <xref uid=\"system.fabric._code_package_activation_context\" data-throw-if-not-resolved=\"false\">system.fabric.CodePackageActivationContext</xref>, well as to register the necessary service factories [ <xref uid=\"system.fabric._stateless_service_factory\" data-throw-if-not-resolved=\"false\">system.fabric.StatelessServiceFactory</xref>, <xref uid=\"system.fabric._stateful_service_factory\" data-throw-if-not-resolved=\"false\">system.fabric.StatefulServiceFactory</xref> ] or service types directly. </p>"
  syntax: &o1
    content: public class FabricRuntime
  inheritance:
  - java.lang.Object
  - AutoCloseable
- uid: system.fabric._fabric_runtime.close()
  id: close()
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: close()
  nameWithType: FabricRuntime.close()
  fullName: system.fabric.FabricRuntime.close()
  overload: system.fabric._fabric_runtime.close*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 409
  package: system.fabric
  summary: "<p>Closes the associated <xref uid=\"system.fabric._fabric_code_package_activation_context\" data-throw-if-not-resolved=\"false\">system.fabric.FabricCodePackageActivationContext</xref> instance and release the associated runtime pointer. </p>"
  syntax:
    content: public void close()
- uid: system.fabric._fabric_runtime.create()
  id: create()
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: create()
  nameWithType: FabricRuntime.create()
  fullName: system.fabric.FabricRuntime.create()
  overload: system.fabric._fabric_runtime.create*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 117
  package: system.fabric
  summary: "<p>Creates the <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.FabricRuntime</xref> object.</p>\r\n<p></p>"
  syntax:
    content: public static FabricRuntime create()
    return:
      type: system.fabric._fabric_runtime
      description: <p>A newly created <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricRuntime</xref> object. </p>
- uid: system.fabric._fabric_runtime.createAsync(Duration)
  id: createAsync(Duration)
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: createAsync(Duration timeout)
  nameWithType: FabricRuntime.createAsync(Duration timeout)
  fullName: system.fabric.FabricRuntime.createAsync(Duration timeout)
  overload: system.fabric._fabric_runtime.createAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 131
  package: system.fabric
  summary: "<p>Creates the <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.FabricRuntime</xref> object asynchronously with the specified timeout parameter.</p>\r\n<p></p>"
  syntax:
    content: public static CompletableFuture<FabricRuntime> createAsync(Duration timeout)
    parameters:
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException. </p>
    return:
      type: 9cdf14d0system.fabric._fabric_runtimea08ddfce
      description: <p>The task representing the asynchronous operation. </p>
- uid: system.fabric._fabric_runtime.createAsync(Runnable,Duration)
  id: createAsync(Runnable,Duration)
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: createAsync(Runnable fabricExitCallback, Duration timeout)
  nameWithType: FabricRuntime.createAsync(Runnable fabricExitCallback, Duration timeout)
  fullName: system.fabric.FabricRuntime.createAsync(Runnable fabricExitCallback, Duration timeout)
  overload: system.fabric._fabric_runtime.createAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 147
  package: system.fabric
  summary: "<p>Creates the <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.FabricRuntime</xref> object asynchronously with the specified callback function which will be executed if the underlying runtime terminates or exits for any reason.</p>\r\n<p></p>"
  syntax:
    content: public static CompletableFuture<FabricRuntime> createAsync(Runnable fabricExitCallback, Duration timeout)
    parameters:
    - id: fabricExitCallback
      type: 2b8852ea
      description: <p>The Action to be executed when the runtime exits or terminates. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException. </p>
    return:
      type: 9cdf14d0system.fabric._fabric_runtimea08ddfce
      description: <p>The task representing the asynchronous operation. </p>
- uid: system.fabric._fabric_runtime.getActivationContext()
  id: getActivationContext()
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: getActivationContext()
  nameWithType: FabricRuntime.getActivationContext()
  fullName: system.fabric.FabricRuntime.getActivationContext()
  overload: system.fabric._fabric_runtime.getActivationContext*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 157
  package: system.fabric
  summary: "<p>Retrieves the current <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.FabricRuntime</xref>'s <xref uid=\"system.fabric._code_package_activation_context\" data-throw-if-not-resolved=\"false\">system.fabric.CodePackageActivationContext</xref>.</p>\r\n<p></p>"
  syntax:
    content: public static FabricCodePackageActivationContext getActivationContext()
    return:
      type: system.fabric._fabric_code_package_activation_context
      description: <p>The activation context. </p>
- uid: system.fabric._fabric_runtime.getActivationContextAsync(Duration)
  id: getActivationContextAsync(Duration)
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: getActivationContextAsync(Duration timeout)
  nameWithType: FabricRuntime.getActivationContextAsync(Duration timeout)
  fullName: system.fabric.FabricRuntime.getActivationContextAsync(Duration timeout)
  overload: system.fabric._fabric_runtime.getActivationContextAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 171
  package: system.fabric
  summary: "<p>Retrieves the current <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.FabricRuntime</xref>â€™s <xref uid=\"system.fabric._code_package_activation_context\" data-throw-if-not-resolved=\"false\">system.fabric.CodePackageActivationContext</xref> asynchronously with the specified parameter.</p>\r\n<p></p>"
  syntax:
    content: public static CompletableFuture<FabricCodePackageActivationContext> getActivationContextAsync(Duration timeout)
    parameters:
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException </p>
    return:
      type: 9cdf14d0system.fabric._fabric_code_package_activation_contexta08ddfce
      description: <p>The task representing the asynchronous operation. </p>
- uid: system.fabric._fabric_runtime.getNodeContext()
  id: getNodeContext()
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: getNodeContext()
  nameWithType: FabricRuntime.getNodeContext()
  fullName: system.fabric.FabricRuntime.getNodeContext()
  overload: system.fabric._fabric_runtime.getNodeContext*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 185
  package: system.fabric
  summary: "<p>Gets the Node Context object that contains information about Fabric Node.</p>\r\n<p></p>"
  syntax:
    content: public static NodeContext getNodeContext()
    return:
      type: system.fabric._node_context
      description: <p>The node context. </p>
- uid: system.fabric._fabric_runtime.getNodeContextAsync(Duration)
  id: getNodeContextAsync(Duration)
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: getNodeContextAsync(Duration timeout)
  nameWithType: FabricRuntime.getNodeContextAsync(Duration timeout)
  fullName: system.fabric.FabricRuntime.getNodeContextAsync(Duration timeout)
  overload: system.fabric._fabric_runtime.getNodeContextAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 197
  package: system.fabric
  summary: "<p>Gets Node Context from Fabric Node asynchronously with timeout and cancellation token.</p>\r\n<p></p>"
  syntax:
    content: public static CompletableFuture<NodeContext> getNodeContextAsync(Duration timeout)
    parameters:
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException </p>
    return:
      type: 9cdf14d0system.fabric._node_contexta08ddfce
      description: <p>The task representing the asynchronous operation. </p>
- uid: system.fabric._fabric_runtime.registerServiceType(String,Class<?>)
  id: registerServiceType(String,Class<?>)
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: registerServiceType(String serviceTypeName, Class<?> serviceTypeImplementation)
  nameWithType: FabricRuntime.registerServiceType(String serviceTypeName, Class<?> serviceTypeImplementation)
  fullName: system.fabric.FabricRuntime.registerServiceType(String serviceTypeName, Class<?> serviceTypeImplementation)
  overload: system.fabric._fabric_runtime.registerServiceType*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 281
  package: system.fabric
  summary: "<p>Associates the specified serviceTypeName with the actual managed Type that implements it.</p>\r\n<p>\r\n  <b>Remarks:</b>Note that this mechanism for service type registration does not require a custom <xref uid=\"system.fabric._stateless_service_factory\" data-throw-if-not-resolved=\"false\">system.fabric.StatelessServiceFactory</xref> or <xref uid=\"system.fabric._stateful_service_factory\" data-throw-if-not-resolved=\"false\">system.fabric.StatefulServiceFactory</xref> to be provided at registration time. Service Fabric will generate one at runtime and utilize it automatically. If there is a need for a custom implementation of the factory, you can implement <xref uid=\"system.fabric._stateless_service_factory\" data-throw-if-not-resolved=\"false\">system.fabric.StatelessServiceFactory</xref> or <xref uid=\"system.fabric._stateful_service_factory\" data-throw-if-not-resolved=\"false\">system.fabric.StatefulServiceFactory</xref> and then provide those via the corresponding factory registration methods ( <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.FabricRuntime#registerStatelessServiceFactoryAsync(java.lang.String, system.fabric.StatelessServiceFactory, java.time.Duration)</xref> or <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.FabricRuntime#registerStatefulServiceFactoryAsync(java.lang.String, system.fabric.StatefulServiceFactory, java.time.Duration)</xref> ) </p>"
  syntax:
    content: public void registerServiceType(String serviceTypeName, Class<?> serviceTypeImplementation)
    parameters:
    - id: serviceTypeName
      type: "26831127"
      description: <p>The type name of the service type (as a string). This should match the type of the service group type as specified in the manifests and/or the CreateService command. </p>
    - id: serviceTypeImplementation
      type: a19781f8
      description: <p>The qualified service Type that implements the specified serviceTypeName. </p>
- uid: system.fabric._fabric_runtime.registerServiceTypeAsync(String,Class<?>,Duration)
  id: registerServiceTypeAsync(String,Class<?>,Duration)
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: registerServiceTypeAsync(String serviceTypeName, Class<?> serviceTypeImplementation, Duration timeout)
  nameWithType: FabricRuntime.registerServiceTypeAsync(String serviceTypeName, Class<?> serviceTypeImplementation, Duration timeout)
  fullName: system.fabric.FabricRuntime.registerServiceTypeAsync(String serviceTypeName, Class<?> serviceTypeImplementation, Duration timeout)
  overload: system.fabric._fabric_runtime.registerServiceTypeAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 313
  package: system.fabric
  summary: "<p>Asynchronously associates the specified serviceTypeName with the actual managed Type that implements it, with the specified timeout</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<?> registerServiceTypeAsync(String serviceTypeName, Class<?> serviceTypeImplementation, Duration timeout)
    parameters:
    - id: serviceTypeName
      type: "26831127"
      description: <p>The type name of the service type (as a string). This should match the type of the service group type as specified in the manifests and/or the CreateService command. </p>
    - id: serviceTypeImplementation
      type: a19781f8
      description: <p>The qualified service Type that implements the specified serviceTypeName. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException. </p>
    return:
      type: 16409f84
      description: <p>The task representing the asynchronous operation. </p>
- uid: system.fabric._fabric_runtime.registerStatefulServiceFactory(String,StatefulServiceFactory)
  id: registerStatefulServiceFactory(String,StatefulServiceFactory)
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: registerStatefulServiceFactory(String serviceTypeName, StatefulServiceFactory factory)
  nameWithType: FabricRuntime.registerStatefulServiceFactory(String serviceTypeName, StatefulServiceFactory factory)
  fullName: system.fabric.FabricRuntime.registerStatefulServiceFactory(String serviceTypeName, StatefulServiceFactory factory)
  overload: system.fabric._fabric_runtime.registerStatefulServiceFactory*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 243
  package: system.fabric
  summary: "<p>Registers the specified <xref uid=\"system.fabric._stateful_service_factory\" data-throw-if-not-resolved=\"false\">system.fabric.StatefulServiceFactory</xref> for the specified service type.</p>\r\n<p></p>"
  syntax:
    content: public void registerStatefulServiceFactory(String serviceTypeName, StatefulServiceFactory factory)
    parameters:
    - id: serviceTypeName
      type: "26831127"
      description: <p>The type name of the service type (as a string). This should match the type of the service group type as specified in the manifests and/or the CreateService command. </p>
    - id: factory
      type: system.fabric._stateful_service_factory
      description: <p>The <xref uid="system.fabric._stateful_service_factory" data-throw-if-not-resolved="false">system.fabric.StatefulServiceFactory</xref> which can create the specified service type. </p>
- uid: system.fabric._fabric_runtime.registerStatefulServiceFactoryAsync(String,StatefulServiceFactory,Duration)
  id: registerStatefulServiceFactoryAsync(String,StatefulServiceFactory,Duration)
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: registerStatefulServiceFactoryAsync(String serviceTypeName, StatefulServiceFactory factory, Duration timeout)
  nameWithType: FabricRuntime.registerStatefulServiceFactoryAsync(String serviceTypeName, StatefulServiceFactory factory, Duration timeout)
  fullName: system.fabric.FabricRuntime.registerStatefulServiceFactoryAsync(String serviceTypeName, StatefulServiceFactory factory, Duration timeout)
  overload: system.fabric._fabric_runtime.registerStatefulServiceFactoryAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 384
  package: system.fabric
  summary: "<p>Registers the specified <xref uid=\"system.fabric._stateful_service_factory\" data-throw-if-not-resolved=\"false\">system.fabric.StatefulServiceFactory</xref> for the specified service type with the specified timeout and cancellationToken.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<?> registerStatefulServiceFactoryAsync(String serviceTypeName, StatefulServiceFactory factory, Duration timeout)
    parameters:
    - id: serviceTypeName
      type: "26831127"
      description: <p>The type name of the service type (as a string). This should match the type of the service group type as specified in the manifests and/or the CreateService command. </p>
    - id: factory
      type: system.fabric._stateful_service_factory
      description: <p>The <xref uid="system.fabric._stateful_service_factory" data-throw-if-not-resolved="false">system.fabric.StatefulServiceFactory</xref> which can create the specified service type. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException. </p>
    return:
      type: 16409f84
      description: <p>The representing the asynchronous operation. </p>
- uid: system.fabric._fabric_runtime.registerStatelessServiceFactory(String,StatelessServiceFactory)
  id: registerStatelessServiceFactory(String,StatelessServiceFactory)
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: registerStatelessServiceFactory(String serviceTypeName, StatelessServiceFactory factory)
  nameWithType: FabricRuntime.registerStatelessServiceFactory(String serviceTypeName, StatelessServiceFactory factory)
  fullName: system.fabric.FabricRuntime.registerStatelessServiceFactory(String serviceTypeName, StatelessServiceFactory factory)
  overload: system.fabric._fabric_runtime.registerStatelessServiceFactory*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 217
  package: system.fabric
  summary: "<p>Registers the specified <xref uid=\"system.fabric._stateless_service_factory\" data-throw-if-not-resolved=\"false\">system.fabric.StatelessServiceFactory</xref> for the specified service type.</p>\r\n<p></p>"
  syntax:
    content: public void registerStatelessServiceFactory(String serviceTypeName, StatelessServiceFactory factory)
    parameters:
    - id: serviceTypeName
      type: "26831127"
      description: <p>The type name of the service type (as a string). This should match the type of the service group type as specified in the manifests and/or the CreateService command. </p>
    - id: factory
      type: system.fabric._stateless_service_factory
      description: <p>The <xref uid="system.fabric._stateless_service_factory" data-throw-if-not-resolved="false">system.fabric.StatelessServiceFactory</xref> which can create the specified service type. </p>
- uid: system.fabric._fabric_runtime.registerStatelessServiceFactoryAsync(String,StatelessServiceFactory,Duration)
  id: registerStatelessServiceFactoryAsync(String,StatelessServiceFactory,Duration)
  parent: system.fabric._fabric_runtime
  href: system.fabric._fabric_runtime.yml
  langs:
  - java
  name: registerStatelessServiceFactoryAsync(String serviceTypeName, StatelessServiceFactory factory, Duration timeout)
  nameWithType: FabricRuntime.registerStatelessServiceFactoryAsync(String serviceTypeName, StatelessServiceFactory factory, Duration timeout)
  fullName: system.fabric.FabricRuntime.registerStatelessServiceFactoryAsync(String serviceTypeName, StatelessServiceFactory factory, Duration timeout)
  overload: system.fabric._fabric_runtime.registerStatelessServiceFactoryAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricRuntime.java
    startLine: 349
  package: system.fabric
  summary: "<p>Asynchronously registers the specified <xref uid=\"system.fabric._stateless_service_factory\" data-throw-if-not-resolved=\"false\">system.fabric.StatelessServiceFactory</xref> for the specified service type, with the specified timeout and cancellationToken</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<?> registerStatelessServiceFactoryAsync(String serviceTypeName, StatelessServiceFactory factory, Duration timeout)
    parameters:
    - id: serviceTypeName
      type: "26831127"
      description: <p>The type name of the service type (as a string). This should match the type of the service group type as specified in the manifests and/or the CreateService command. </p>
    - id: factory
      type: system.fabric._stateless_service_factory
      description: <p>The <xref uid="system.fabric._stateless_service_factory" data-throw-if-not-resolved="false">system.fabric.StatelessServiceFactory</xref> which can create the specified service type. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException. </p>
    return:
      type: 16409f84
      description: <p>The task representing the asynchronous operation. </p>
references:
- uid: system.fabric._fabric_runtime.create*
  name: create
  nameWithType: FabricRuntime.create
  fullName: system.fabric.FabricRuntime.create
  package: system.fabric
- uid: e02a2de0
  spec.java:
  - name: Duration
    fullName: Duration
- uid: 9cdf14d0system.fabric._fabric_runtimea08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: system.fabric._fabric_runtime
    name: FabricRuntime
    fullName: system.fabric.FabricRuntime
    href: system.fabric._fabric_runtime.yml
  - name: '>'
    fullName: '>'
- uid: system.fabric._fabric_runtime.createAsync*
  name: createAsync
  nameWithType: FabricRuntime.createAsync
  fullName: system.fabric.FabricRuntime.createAsync
  package: system.fabric
- uid: 2b8852ea
  spec.java:
  - name: Runnable
    fullName: Runnable
- uid: system.fabric._fabric_runtime.getActivationContext*
  name: getActivationContext
  nameWithType: FabricRuntime.getActivationContext
  fullName: system.fabric.FabricRuntime.getActivationContext
  package: system.fabric
- uid: 9cdf14d0system.fabric._fabric_code_package_activation_contexta08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: system.fabric._fabric_code_package_activation_context
    name: FabricCodePackageActivationContext
    fullName: system.fabric.FabricCodePackageActivationContext
    href: system.fabric._fabric_code_package_activation_context.yml
  - name: '>'
    fullName: '>'
- uid: system.fabric._fabric_runtime.getActivationContextAsync*
  name: getActivationContextAsync
  nameWithType: FabricRuntime.getActivationContextAsync
  fullName: system.fabric.FabricRuntime.getActivationContextAsync
  package: system.fabric
- uid: system.fabric._fabric_runtime.getNodeContext*
  name: getNodeContext
  nameWithType: FabricRuntime.getNodeContext
  fullName: system.fabric.FabricRuntime.getNodeContext
  package: system.fabric
- uid: 9cdf14d0system.fabric._node_contexta08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: system.fabric._node_context
    name: NodeContext
    fullName: system.fabric.NodeContext
    href: system.fabric._node_context.yml
  - name: '>'
    fullName: '>'
- uid: system.fabric._fabric_runtime.getNodeContextAsync*
  name: getNodeContextAsync
  nameWithType: FabricRuntime.getNodeContextAsync
  fullName: system.fabric.FabricRuntime.getNodeContextAsync
  package: system.fabric
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: system.fabric._fabric_runtime.registerStatelessServiceFactory*
  name: registerStatelessServiceFactory
  nameWithType: FabricRuntime.registerStatelessServiceFactory
  fullName: system.fabric.FabricRuntime.registerStatelessServiceFactory
  package: system.fabric
- uid: system.fabric._fabric_runtime.registerStatefulServiceFactory*
  name: registerStatefulServiceFactory
  nameWithType: FabricRuntime.registerStatefulServiceFactory
  fullName: system.fabric.FabricRuntime.registerStatefulServiceFactory
  package: system.fabric
- uid: a19781f8
  spec.java:
  - name: Class<?>
    fullName: Class<?>
- uid: system.fabric._fabric_runtime.registerServiceType*
  name: registerServiceType
  nameWithType: FabricRuntime.registerServiceType
  fullName: system.fabric.FabricRuntime.registerServiceType
  package: system.fabric
- uid: 16409f84
  spec.java:
  - name: CompletableFuture<?>
    fullName: CompletableFuture<?>
- uid: system.fabric._fabric_runtime.registerServiceTypeAsync*
  name: registerServiceTypeAsync
  nameWithType: FabricRuntime.registerServiceTypeAsync
  fullName: system.fabric.FabricRuntime.registerServiceTypeAsync
  package: system.fabric
- uid: system.fabric._fabric_runtime.registerStatelessServiceFactoryAsync*
  name: registerStatelessServiceFactoryAsync
  nameWithType: FabricRuntime.registerStatelessServiceFactoryAsync
  fullName: system.fabric.FabricRuntime.registerStatelessServiceFactoryAsync
  package: system.fabric
- uid: system.fabric._fabric_runtime.registerStatefulServiceFactoryAsync*
  name: registerStatefulServiceFactoryAsync
  nameWithType: FabricRuntime.registerStatefulServiceFactoryAsync
  fullName: system.fabric.FabricRuntime.registerStatefulServiceFactoryAsync
  package: system.fabric
- uid: system.fabric._fabric_runtime.close*
  name: close
  nameWithType: FabricRuntime.close
  fullName: system.fabric.FabricRuntime.close
  package: system.fabric
- uid: system.fabric._fabric_code_package_activation_context
  parent: system.fabric
  href: system.fabric._fabric_code_package_activation_context.yml
  name: FabricCodePackageActivationContext
  nameWithType: FabricCodePackageActivationContext
  fullName: system.fabric.FabricCodePackageActivationContext
  type: Class
  summary: <p>Represents activation context for the Service Fabric service. This is valid for fabric activated service only. </p>
  syntax:
    content: public class FabricCodePackageActivationContext implements CodePackageActivationContext
- uid: system.fabric._node_context
  parent: system.fabric
  href: system.fabric._node_context.yml
  name: NodeContext
  nameWithType: NodeContext
  fullName: system.fabric.NodeContext
  type: Class
  summary: <p>Class to encapsulate a node context. </p>
  syntax:
    content: public class NodeContext
- uid: system.fabric._fabric_runtime
  parent: system.fabric
  href: system.fabric._fabric_runtime.yml
  name: FabricRuntime
  nameWithType: FabricRuntime
  fullName: system.fabric.FabricRuntime
  type: Class
  summary: <p>Allows user created hosts to obtain their <xref uid="system.fabric._code_package_activation_context" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext</xref>, well as to register the necessary service factories [ <xref uid="system.fabric._stateless_service_factory" data-throw-if-not-resolved="false">system.fabric.StatelessServiceFactory</xref>, <xref uid="system.fabric._stateful_service_factory" data-throw-if-not-resolved="false">system.fabric.StatefulServiceFactory</xref> ] or service types directly. </p>
  syntax: *o1
- uid: system.fabric._code_package_activation_context
  parent: system.fabric
  href: system.fabric._code_package_activation_context.yml
  name: CodePackageActivationContext
  nameWithType: CodePackageActivationContext
  fullName: system.fabric.CodePackageActivationContext
  type: Interface
  summary: <p>Represents activation context for the Service Fabric service. This is valid for fabric activated service only. </p>
  syntax:
    content: public interface CodePackageActivationContext
- uid: system.fabric._stateless_service_factory
  parent: system.fabric
  href: system.fabric._stateless_service_factory.yml
  name: StatelessServiceFactory
  nameWithType: StatelessServiceFactory
  fullName: system.fabric.StatelessServiceFactory
  type: Interface
  summary: >-
    <p>Represents a stateless service factory that is responsible for creating instances of a specific type of stateless service. </p>

    <p>

      <b>Remarks:</b>Stateless service factories are registered with the <xref uid="system.fabric._fabric_runtime" data-throw-if-not-resolved="false">system.fabric.FabricRuntime</xref> by service hosts via <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricRuntime#registerStatelessServiceFactory(java.lang.String,system.fabric.StatelessServiceFactory)</xref> or <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricRuntime#registerStatelessServiceFactoryAsync(java.lang.String,system.fabric.StatelessServiceFactory,java.time.Duration)</xref></p>
  syntax:
    content: public interface StatelessServiceFactory
- uid: system.fabric._stateful_service_factory
  parent: system.fabric
  href: system.fabric._stateful_service_factory.yml
  name: StatefulServiceFactory
  nameWithType: StatefulServiceFactory
  fullName: system.fabric.StatefulServiceFactory
  type: Interface
  summary: <p>Represents a stateful service factory that is responsible for creating replicas of a specific type of stateful service. Stateful service factories are registered with the <xref uid="system.fabric._fabric_runtime" data-throw-if-not-resolved="false">system.fabric.FabricRuntime</xref> by service hosts via <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricRuntime#registerStatefulServiceFactory(java.lang.String,system.fabric.StatefulServiceFactory)</xref> or <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricRuntime#registerStatefulServiceFactoryAsync(java.lang.String,system.fabric.StatefulServiceFactory,java.time.Duration)</xref></p>
  syntax:
    content: public interface StatefulServiceFactory
