### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor"
  id: "Executor"
  parent: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
  children:
  - "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor.afterPostRunAsync(boolean)"
  - "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor.beforeGroupExecute()"
  - "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor.executeWorkAsync()"
  - "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor.isHot()"
  langs:
  - "java"
  name: "ExecuteTask.Executor<T>"
  nameWithType: "ExecuteTask.Executor<T>"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor<T>"
  type: "Interface"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
  summary: "Represents a type that know how to execute a work that produces result of type <xref uid=\"T\" data-throw-if-not-resolved=\"false\">T</xref>.\n\nAn instance of <xref uid=\"com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask\" data-throw-if-not-resolved=\"false\">ExecuteTask</xref> wraps this type and invokes appropriate methods when ExecuteTask methods get called during TaskGroup invocation."
  syntax:
    content: "public static interface ExecuteTask.Executor<T>"
    typeParameters:
    - id: "T"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor.afterPostRunAsync(boolean)"
  id: "afterPostRunAsync(boolean)"
  parent: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor"
  langs:
  - "java"
  name: "afterPostRunAsync(boolean isGroupFaulted)"
  nameWithType: "ExecuteTask.Executor<T>.afterPostRunAsync(boolean isGroupFaulted)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor<T>.afterPostRunAsync(boolean isGroupFaulted)"
  overload: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor.afterPostRunAsync*"
  type: "Method"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
  summary: "Perform any action followed by the processing of work scheduled to be invoked (i.e. \"post run\") after \\{@link this\\#executeWorkAsync()\\}."
  syntax:
    content: "public abstract Completable afterPostRunAsync(boolean isGroupFaulted)"
    parameters:
    - id: "isGroupFaulted"
      type: "boolean"
      description: "true if one or more tasks in the group this work belongs\n                       to are in faulted state."
    return:
      type: "rx.Completable"
      description: "a completable represents the asynchronous action"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor.beforeGroupExecute()"
  id: "beforeGroupExecute()"
  parent: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor"
  langs:
  - "java"
  name: "beforeGroupExecute()"
  nameWithType: "ExecuteTask.Executor<T>.beforeGroupExecute()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor<T>.beforeGroupExecute()"
  overload: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor.beforeGroupExecute*"
  type: "Method"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
  summary: "The method that gets called before invoking all the tasks in the <xref uid=\"com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup\" data-throw-if-not-resolved=\"false\">TaskGroup</xref> that the parent <xref uid=\"com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask\" data-throw-if-not-resolved=\"false\">ExecuteTask</xref> belongs to."
  syntax:
    content: "public abstract void beforeGroupExecute()"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor.executeWorkAsync()"
  id: "executeWorkAsync()"
  parent: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor"
  langs:
  - "java"
  name: "executeWorkAsync()"
  nameWithType: "ExecuteTask.Executor<T>.executeWorkAsync()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor<T>.executeWorkAsync()"
  overload: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor.executeWorkAsync*"
  type: "Method"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
  summary: "Execute the work asynchronously."
  syntax:
    content: "public abstract Observable<T> executeWorkAsync()"
    return:
      type: "rx.Observable<T>"
      description: "the observable reference"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor.isHot()"
  id: "isHot()"
  parent: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor"
  langs:
  - "java"
  name: "isHot()"
  nameWithType: "ExecuteTask.Executor<T>.isHot()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor<T>.isHot()"
  overload: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor.isHot*"
  type: "Method"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
  syntax:
    content: "public abstract boolean isHot()"
    return:
      type: "boolean"
      description: "true if the observable returned by {@link this#executeWorkAsync()} is hot, false if it is\n cold observable."
references:
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor.beforeGroupExecute*"
  name: "beforeGroupExecute"
  nameWithType: "ExecuteTask.Executor<T>.beforeGroupExecute"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor<T>.beforeGroupExecute"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor.isHot*"
  name: "isHot"
  nameWithType: "ExecuteTask.Executor<T>.isHot"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor<T>.isHot"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
- uid: "rx.Observable<T>"
  spec.java:
  - uid: "rx.Observable"
    name: "Observable"
    fullName: "rx.Observable"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor.executeWorkAsync*"
  name: "executeWorkAsync"
  nameWithType: "ExecuteTask.Executor<T>.executeWorkAsync"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor<T>.executeWorkAsync"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
- uid: "rx.Completable"
  spec.java:
  - uid: "rx.Completable"
    name: "Completable"
    fullName: "rx.Completable"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor.afterPostRunAsync*"
  name: "afterPostRunAsync"
  nameWithType: "ExecuteTask.Executor<T>.afterPostRunAsync"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor<T>.afterPostRunAsync"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
- uid: "T"
  name: "T"
  nameWithType: "T"
  fullName: "T"
- uid: "rx.Observable"
  name: "Observable"
  nameWithType: "Observable"
  fullName: "rx.Observable"
