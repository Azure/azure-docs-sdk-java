### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderSymmetricKey.SecurityProviderSymmetricKey(byte[] symmetricKey, String registrationId)
  name: SecurityProviderSymmetricKey(byte[] symmetricKey, String registrationId)
  nameWithType: SecurityProviderSymmetricKey.SecurityProviderSymmetricKey(byte[] symmetricKey, String registrationId)
  parameters:
  - description: <p>Symmetric key to be used. For authenticating devices that are under an individual enrollment, this symmetric key is the same symmetric key that the enrollment has. For authenticating devices that are under a group enrollment, this symmetric key is derived from the enrollment group's symmetric key </p>
    name: symmetricKey
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>Registration ID to be used </p>
    name: registrationId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Constructor for Symmetric key security provider </p>
  syntax: public SecurityProviderSymmetricKey(byte[] symmetricKey, String registrationId)
  uid: com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderSymmetricKey.SecurityProviderSymmetricKey(byte [],String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderSymmetricKey.SecurityProviderSymmetricKey(String primaryKey, String secondaryKey, String registrationId)
  name: SecurityProviderSymmetricKey(String primaryKey, String secondaryKey, String registrationId)
  nameWithType: SecurityProviderSymmetricKey.SecurityProviderSymmetricKey(String primaryKey, String secondaryKey, String registrationId)
  parameters:
  - description: <p>Primary key to be used </p>
    name: primaryKey
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Secondary key to be used </p>
    name: secondaryKey
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Registration ID to be used </p>
    name: registrationId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Constructor for Symmetric key security provider that takes both keys </p>
  syntax: public SecurityProviderSymmetricKey(String primaryKey, String secondaryKey, String registrationId)
  uid: com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderSymmetricKey.SecurityProviderSymmetricKey(String,String,String)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider?alt=com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider&text=SecurityProvider" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider.getSSLContext()
methods:
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderSymmetricKey.ComputeDerivedSymmetricKey(byte[] enrollmentGroupSymmetricKey, String deviceId)
  name: ComputeDerivedSymmetricKey(byte[] enrollmentGroupSymmetricKey, String deviceId)
  nameWithType: SecurityProviderSymmetricKey.ComputeDerivedSymmetricKey(byte[] enrollmentGroupSymmetricKey, String deviceId)
  parameters:
  - description: <p>The primary or secondary key of the group enrollment for which a device is computing it's derived symmetric key. Must be a UTF-8 byte array. </p>
    name: enrollmentGroupSymmetricKey
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The Id of the particular device to compute the derived key for. The user is expected to decide what the deviceId should be prior to attempting to provision the device. </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InvalidKeyException?alt=InvalidKeyException&text=InvalidKeyException" data-throw-if-not-resolved="False"/>
    description: <p>If any exception occurs while initializing the HMAC with the provided key </p>
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
    description: <p>If your device does not support HMAC_SHA256 </p>
  returns:
    description: <p>The derived key, in base64 encoded bytes. </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Compute the derived symmetric key for authenticating your device based on it's group enrollment's symmetric key and from the device's registrationId. This step is only necessary for devices in group enrollments. Devices that are registered via an individual enrollment can use the individual enrollment's symmetric key directly. </p>
  syntax: public static byte [] ComputeDerivedSymmetricKey(byte[] enrollmentGroupSymmetricKey, String deviceId)
  uid: com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderSymmetricKey.ComputeDerivedSymmetricKey(byte [],String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderSymmetricKey.getRegistrationId()
  name: getRegistrationId()
  nameWithType: SecurityProviderSymmetricKey.getRegistrationId()
  exceptions:
  - type: <xref href="SecurityProviderException?alt=SecurityProviderException&text=SecurityProviderException" data-throw-if-not-resolved="False"/>
    description: <p>If registration id with the underlying implementation could not be retrieved </p>
  returns:
    description: <p>Returns the registration Id used needed for the service </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Unique id required for registration</p>

    <p></p>
  syntax: public String getRegistrationId()
  uid: com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderSymmetricKey.getRegistrationId()
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderSymmetricKey.getSecondaryKey()
  name: getSecondaryKey()
  nameWithType: SecurityProviderSymmetricKey.getSecondaryKey()
  returns:
    description: <p>Returns Secondary Key byte array </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Getter for Secondary key </p>
  syntax: public byte [] getSecondaryKey()
  uid: com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderSymmetricKey.getSecondaryKey()
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderSymmetricKey.getSymmetricKey()
  name: getSymmetricKey()
  nameWithType: SecurityProviderSymmetricKey.getSymmetricKey()
  returns:
    description: <p>Returns Symmetric Key byte array </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Getter for Symmetric key </p>
  syntax: public byte [] getSymmetricKey()
  uid: com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderSymmetricKey.getSymmetricKey()
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderSymmetricKey.HMACSignData(byte[] signature, byte[] base64DecodedKey)
  name: HMACSignData(byte[] signature, byte[] base64DecodedKey)
  nameWithType: SecurityProviderSymmetricKey.HMACSignData(byte[] signature, byte[] base64DecodedKey)
  parameters:
  - description: <p>Data to be signed </p>
    name: signature
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>Key used for signing </p>
    name: base64DecodedKey
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="SecurityProviderException?alt=SecurityProviderException&text=SecurityProviderException" data-throw-if-not-resolved="False"/>
    description: <p>If signing was not successful </p>
  returns:
    description: <p>Returns signed data </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Signs data using the provided base 64 decoded key using HMAC SHA 256 </p>
  syntax: public byte [] HMACSignData(byte[] signature, byte[] base64DecodedKey)
  uid: com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderSymmetricKey.HMACSignData(byte [],byte [])
nameWithType: SecurityProviderSymmetricKey
syntax: public class SecurityProviderSymmetricKey extends SecurityProvider
type: class
uid: com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderSymmetricKey
fullName: com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderSymmetricKey
name: SecurityProviderSymmetricKey
package: com.microsoft.azure.sdk.iot.provisioning.security
metadata: {}
