### YamlMime:JavaType
fields:
- field:
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.INVALID_REDIRECT_MSG
  name: INVALID_REDIRECT_MSG
  nameWithType: PublicClientApplicationConfiguration.INVALID_REDIRECT_MSG
  syntax: public static final String INVALID_REDIRECT_MSG= "Invalid, null, or malformed redirect_uri supplied"
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.INVALID_REDIRECT_MSG
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.authorizationInCurrentTask()
  name: authorizationInCurrentTask()
  nameWithType: PublicClientApplicationConfiguration.authorizationInCurrentTask()
  returns:
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  syntax: public Boolean authorizationInCurrentTask()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.authorizationInCurrentTask()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.checkIntentFilterAddedToAppManifestForBrokerFlow()
  name: checkIntentFilterAddedToAppManifestForBrokerFlow()
  nameWithType: PublicClientApplicationConfiguration.checkIntentFilterAddedToAppManifestForBrokerFlow()
  syntax: public void checkIntentFilterAddedToAppManifestForBrokerFlow()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.checkIntentFilterAddedToAppManifestForBrokerFlow()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.getAccountMode()
  name: getAccountMode()
  nameWithType: PublicClientApplicationConfiguration.getAccountMode()
  returns:
    description: <p>The AccountMode supported by this application. </p>
    type: <xref href="com.microsoft.identity.client.configuration.AccountMode?alt=com.microsoft.identity.client.configuration.AccountMode&text=AccountMode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the currently configured <xref uid="" data-throw-if-not-resolved="false" data-raw-source="AccountMode"></xref> for the PublicClientApplication.</p>

    <p></p>
  syntax: public AccountMode getAccountMode()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.getAccountMode()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.getAppContext()
  name: getAppContext()
  nameWithType: PublicClientApplicationConfiguration.getAppContext()
  returns:
    type: <xref href="Context?alt=Context&text=Context" data-throw-if-not-resolved="False"/>
  syntax: public Context getAppContext()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.getAppContext()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.getAuthorities()
  name: getAuthorities()
  nameWithType: PublicClientApplicationConfiguration.getAuthorities()
  returns:
    description: <p>The List of current Authorities. </p>
    type: <xref href="List%3CAuthority%3E?alt=List%3CAuthority%3E&text=List%3CAuthority%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the list of authorities configured by the developer for use with the PublicClientApplication.</p>

    <p></p>
  syntax: public List<Authority> getAuthorities()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.getAuthorities()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.getAuthorizationAgent()
  name: getAuthorizationAgent()
  nameWithType: PublicClientApplicationConfiguration.getAuthorizationAgent()
  returns:
    description: <p>The AuthorizationAgent to use. </p>
    type: <xref href="AuthorizationAgent?alt=AuthorizationAgent&text=AuthorizationAgent" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the currently configured <xref uid="" data-throw-if-not-resolved="false" data-raw-source="AuthorizationAgent"></xref> for the PublicClientApplication.</p>

    <p></p>
  syntax: public AuthorizationAgent getAuthorizationAgent()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.getAuthorizationAgent()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.getBrowserSafeList()
  name: getBrowserSafeList()
  nameWithType: PublicClientApplicationConfiguration.getBrowserSafeList()
  returns:
    description: <p>The list of browser which are allowed to use for auth flow. </p>
    type: <xref href="List%3CBrowserDescriptor%3E?alt=List%3CBrowserDescriptor%3E&text=List%3CBrowserDescriptor%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the list of browser safe list.</p>

    <p></p>
  syntax: public List<BrowserDescriptor> getBrowserSafeList()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.getBrowserSafeList()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.getClientCapabilities()
  name: getClientCapabilities()
  nameWithType: PublicClientApplicationConfiguration.getClientCapabilities()
  returns:
    description: <p>The capabilities supported by this application. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the currently configured capabilities for the PublicClientApplication.</p>

    <p></p>
  syntax: public String getClientCapabilities()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.getClientCapabilities()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.getClientId()
  name: getClientId()
  nameWithType: PublicClientApplicationConfiguration.getClientId()
  returns:
    description: <p>The configured clientId. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the currently configured client id for the PublicClientApplication.</p>

    <p></p>
  syntax: public String getClientId()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.getClientId()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.getDefaultAuthority()
  name: getDefaultAuthority()
  nameWithType: PublicClientApplicationConfiguration.getDefaultAuthority()
  returns:
    type: <xref href="Authority?alt=Authority&text=Authority" data-throw-if-not-resolved="False"/>
  syntax: public Authority getDefaultAuthority()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.getDefaultAuthority()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.getEnvironment()
  name: getEnvironment()
  nameWithType: PublicClientApplicationConfiguration.getEnvironment()
  returns:
    description: <p>The environment </p>
    type: <xref href="Environment?alt=Environment&text=Environment" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the environment (Production, PPE) that the public client application is registered in</p>

    <p></p>
  syntax: public Environment getEnvironment()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.getEnvironment()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.getHttpConfiguration()
  name: getHttpConfiguration()
  nameWithType: PublicClientApplicationConfiguration.getHttpConfiguration()
  returns:
    description: <p>The HttpConfiguration to use. </p>
    type: <xref href="com.microsoft.identity.client.configuration.HttpConfiguration?alt=com.microsoft.identity.client.configuration.HttpConfiguration&text=HttpConfiguration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the currently configured <xref uid="" data-throw-if-not-resolved="false" data-raw-source="HttpConfiguration"></xref> for the PublicClientApplication.</p>

    <p></p>
  syntax: public HttpConfiguration getHttpConfiguration()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.getHttpConfiguration()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.getIsSharedDevice()
  name: getIsSharedDevice()
  nameWithType: PublicClientApplicationConfiguration.getIsSharedDevice()
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean getIsSharedDevice()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.getIsSharedDevice()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.getLoggerConfiguration()
  name: getLoggerConfiguration()
  nameWithType: PublicClientApplicationConfiguration.getLoggerConfiguration()
  returns:
    description: <p>The LoggerConfiguration to use. </p>
    type: <xref href="com.microsoft.identity.client.configuration.LoggerConfiguration?alt=com.microsoft.identity.client.configuration.LoggerConfiguration&text=LoggerConfiguration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the currently configured <xref uid="" data-throw-if-not-resolved="false" data-raw-source="LoggerConfiguration"></xref> for the PublicClientApplication.</p>

    <p></p>
  syntax: public LoggerConfiguration getLoggerConfiguration()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.getLoggerConfiguration()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.getMultipleCloudsSupported()
  name: getMultipleCloudsSupported()
  nameWithType: PublicClientApplicationConfiguration.getMultipleCloudsSupported()
  returns:
    description: <p>The boolean indicator of whether multiple clouds are supported by this application. </p>
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Indicates whether the PublicClientApplication supports multiple clouds. Automatic redirection to the cloud associated with the authenticated user</p>

    <p></p>
  syntax: public Boolean getMultipleCloudsSupported()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.getMultipleCloudsSupported()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.getRedirectUri()
  name: getRedirectUri()
  nameWithType: PublicClientApplicationConfiguration.getRedirectUri()
  returns:
    description: <p>The redirectUri to use. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the currently configured redirect uri for the PublicClientApplication.</p>

    <p></p>
  syntax: public String getRedirectUri()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.getRedirectUri()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.getRequiredBrokerProtocolVersion()
  name: getRequiredBrokerProtocolVersion()
  nameWithType: PublicClientApplicationConfiguration.getRequiredBrokerProtocolVersion()
  returns:
    description: <p>String of broker protocol version </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Indicates the minimum required broker protocol version number.</p>

    <p></p>
  syntax: public String getRequiredBrokerProtocolVersion()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.getRequiredBrokerProtocolVersion()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.getTelemetryConfiguration()
  name: getTelemetryConfiguration()
  nameWithType: PublicClientApplicationConfiguration.getTelemetryConfiguration()
  returns:
    description: <p>The TelemetryConfiguration to use. </p>
    type: <xref href="TelemetryConfiguration?alt=TelemetryConfiguration&text=TelemetryConfiguration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the currently configured <xref uid="" data-throw-if-not-resolved="false" data-raw-source="TelemetryConfiguration"></xref> for the PublicClientApplication.</p>

    <p></p>
  syntax: public TelemetryConfiguration getTelemetryConfiguration()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.getTelemetryConfiguration()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.getUseBroker()
  name: getUseBroker()
  nameWithType: PublicClientApplicationConfiguration.getUseBroker()
  returns:
    description: <p>The boolean indicator of whether or not to use the broker. </p>
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Indicates whether the PublicClientApplication would like to leverage the broker if available. </p>

    <p>The client must have registered</p>

    <p></p>
  syntax: public Boolean getUseBroker()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.getUseBroker()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.isBrokerRedirectUri(final @NonNull String redirectUri, final @NonNull String packageName)
  name: isBrokerRedirectUri(final @NonNull String redirectUri, final @NonNull String packageName)
  nameWithType: PublicClientApplicationConfiguration.isBrokerRedirectUri(final @NonNull String redirectUri, final @NonNull String packageName)
  parameters:
  - name: redirectUri
    type: <xref href="final+%40NonNull+String?alt=final+%40NonNull+String&text=final+%40NonNull+String" data-throw-if-not-resolved="False"/>
  - name: packageName
    type: <xref href="final+%40NonNull+String?alt=final+%40NonNull+String&text=final+%40NonNull+String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public static boolean isBrokerRedirectUri(final @NonNull String redirectUri, final @NonNull String packageName)
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.isBrokerRedirectUri(final @NonNull String,final @NonNull String)
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.isDefaultAuthorityConfigured()
  name: isDefaultAuthorityConfigured()
  nameWithType: PublicClientApplicationConfiguration.isDefaultAuthorityConfigured()
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isDefaultAuthorityConfigured()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.isDefaultAuthorityConfigured()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.isPowerOptCheckForEnabled()
  name: isPowerOptCheckForEnabled()
  nameWithType: PublicClientApplicationConfiguration.isPowerOptCheckForEnabled()
  returns:
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  syntax: public Boolean isPowerOptCheckForEnabled()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.isPowerOptCheckForEnabled()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.isWebViewZoomControlsEnabled()
  name: isWebViewZoomControlsEnabled()
  nameWithType: PublicClientApplicationConfiguration.isWebViewZoomControlsEnabled()
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isWebViewZoomControlsEnabled()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.isWebViewZoomControlsEnabled()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.isWebViewZoomEnabled()
  name: isWebViewZoomEnabled()
  nameWithType: PublicClientApplicationConfiguration.isWebViewZoomEnabled()
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isWebViewZoomEnabled()
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.isWebViewZoomEnabled()
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.setClientId(final String clientId)
  name: setClientId(final String clientId)
  nameWithType: PublicClientApplicationConfiguration.setClientId(final String clientId)
  parameters:
  - name: clientId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the configured client id for the PublicClientApplication.</p>

    <p>@param The configured clientId. </p>
  syntax: public void setClientId(final String clientId)
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.setClientId(final String)
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.setPowerOptCheckEnabled(Boolean powerOptCheckEnabled)
  name: setPowerOptCheckEnabled(Boolean powerOptCheckEnabled)
  nameWithType: PublicClientApplicationConfiguration.setPowerOptCheckEnabled(Boolean powerOptCheckEnabled)
  parameters:
  - name: powerOptCheckEnabled
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  syntax: public void setPowerOptCheckEnabled(Boolean powerOptCheckEnabled)
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.setPowerOptCheckEnabled(Boolean)
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.setRedirectUri(@NonNull final String redirectUri)
  name: setRedirectUri(@NonNull final String redirectUri)
  nameWithType: PublicClientApplicationConfiguration.setRedirectUri(@NonNull final String redirectUri)
  parameters:
  - description: <p>The redirectUri to use. </p>
    name: redirectUri
    type: <xref href="%40NonNull+final+String?alt=%40NonNull+final+String&text=%40NonNull+final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the configured redirect uri for the PublicClientApplication.</p>

    <p></p>
  syntax: public void setRedirectUri(@NonNull final String redirectUri)
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.setRedirectUri(@NonNull final String)
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.setTokenCacheSecretKeys(@NonNull final byte[] rawKey)
  name: setTokenCacheSecretKeys(@NonNull final byte[] rawKey)
  nameWithType: PublicClientApplicationConfiguration.setTokenCacheSecretKeys(@NonNull final byte[] rawKey)
  parameters:
  - description: <p>The SecretKey to use in its primary encoding format. </p>
    name: rawKey
    type: <xref href="%40NonNull+final+byte+%5B%5D?alt=%40NonNull+final+byte+%5B%5D&text=%40NonNull+final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the secret key bytes to use when encrypting/decrypting cache entries. <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.security.spec.KeySpec"></xref> algorithm is AES.</p>

    <p></p>
  syntax: public void setTokenCacheSecretKeys(@NonNull final byte[] rawKey)
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.setTokenCacheSecretKeys(@NonNull final byte [])
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.setWebViewZoomControlsEnabled(boolean webViewZoomControlsEnabled)
  name: setWebViewZoomControlsEnabled(boolean webViewZoomControlsEnabled)
  nameWithType: PublicClientApplicationConfiguration.setWebViewZoomControlsEnabled(boolean webViewZoomControlsEnabled)
  parameters:
  - name: webViewZoomControlsEnabled
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public void setWebViewZoomControlsEnabled(boolean webViewZoomControlsEnabled)
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.setWebViewZoomControlsEnabled(boolean)
- fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration.setWebViewZoomEnabled(boolean webViewZoomEnabled)
  name: setWebViewZoomEnabled(boolean webViewZoomEnabled)
  nameWithType: PublicClientApplicationConfiguration.setWebViewZoomEnabled(boolean webViewZoomEnabled)
  parameters:
  - name: webViewZoomEnabled
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public void setWebViewZoomEnabled(boolean webViewZoomEnabled)
  uid: com.microsoft.identity.client.PublicClientApplicationConfiguration.setWebViewZoomEnabled(boolean)
nameWithType: PublicClientApplicationConfiguration
syntax: public class PublicClientApplicationConfiguration
type: class
uid: com.microsoft.identity.client.PublicClientApplicationConfiguration
fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration
name: PublicClientApplicationConfiguration
package: com.microsoft.identity.client
metadata: {}
