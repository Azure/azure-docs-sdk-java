### YamlMime:JavaMember
uid: "com.azure.storage.file.datalake.implementation.PathsImpl.leaseWithRestResponseAsync*"
fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.leaseWithRestResponseAsync"
name: "leaseWithRestResponseAsync"
nameWithType: "PathsImpl.leaseWithRestResponseAsync"
members:
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.leaseWithRestResponseAsync(com.azure.storage.file.datalake.implementation.models.PathLeaseAction,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.leaseWithRestResponseAsync(PathLeaseAction xMsLeaseAction, Context context)"
  name: "leaseWithRestResponseAsync(PathLeaseAction xMsLeaseAction, Context context)"
  nameWithType: "PathsImpl.leaseWithRestResponseAsync(PathLeaseAction xMsLeaseAction, Context context)"
  summary: "Lease Path Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests. For more information, see \\[Specifying Conditional Headers for Blob Service Operations\\](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations)."
  parameters:
  - description: "There are five lease actions: \"acquire\", \"break\", \"change\", \"renew\", and \"release\". Use \"acquire\" and specify the \"x-ms-proposed-lease-id\" and \"x-ms-lease-duration\" to acquire a new lease. Use \"break\" to break an existing lease. When a lease is broken, the lease break period is allowed to elapse, during which time no lease operation except break and release can be performed on the file. When a lease is successfully broken, the response indicates the interval in seconds until a new lease can be acquired. Use \"change\" and specify the current lease ID in \"x-ms-lease-id\" and the new lease ID in \"x-ms-proposed-lease-id\" to change the lease ID of an active lease. Use \"renew\" and specify the \"x-ms-lease-id\" to renew an existing lease. Use \"release\" and specify the \"x-ms-lease-id\" to release a lease. Possible values include: 'acquire', 'break', 'change', 'renew', 'release'."
    name: "xMsLeaseAction"
    type: "<xref href=\"com.azure.storage.file.datalake.implementation.models.PathLeaseAction?alt=com.azure.storage.file.datalake.implementation.models.PathLeaseAction&text=PathLeaseAction\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PathsLeaseResponse> leaseWithRestResponseAsync(PathLeaseAction xMsLeaseAction, Context context)"
  returns:
    description: "a Mono which performs the network request upon subscription."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.implementation.models.PathsLeaseResponse?alt=com.azure.storage.file.datalake.implementation.models.PathsLeaseResponse&text=PathsLeaseResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.leaseWithRestResponseAsync(com.azure.storage.file.datalake.implementation.models.PathLeaseAction,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.Integer,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.leaseWithRestResponseAsync(PathLeaseAction xMsLeaseAction, Integer xMsLeaseDuration, Integer xMsLeaseBreakPeriod, String proposedLeaseId, String requestId, Integer timeout, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  name: "leaseWithRestResponseAsync(PathLeaseAction xMsLeaseAction, Integer xMsLeaseDuration, Integer xMsLeaseBreakPeriod, String proposedLeaseId, String requestId, Integer timeout, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  nameWithType: "PathsImpl.leaseWithRestResponseAsync(PathLeaseAction xMsLeaseAction, Integer xMsLeaseDuration, Integer xMsLeaseBreakPeriod, String proposedLeaseId, String requestId, Integer timeout, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  summary: "Lease Path Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests. For more information, see \\[Specifying Conditional Headers for Blob Service Operations\\](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations)."
  parameters:
  - description: "There are five lease actions: \"acquire\", \"break\", \"change\", \"renew\", and \"release\". Use \"acquire\" and specify the \"x-ms-proposed-lease-id\" and \"x-ms-lease-duration\" to acquire a new lease. Use \"break\" to break an existing lease. When a lease is broken, the lease break period is allowed to elapse, during which time no lease operation except break and release can be performed on the file. When a lease is successfully broken, the response indicates the interval in seconds until a new lease can be acquired. Use \"change\" and specify the current lease ID in \"x-ms-lease-id\" and the new lease ID in \"x-ms-proposed-lease-id\" to change the lease ID of an active lease. Use \"renew\" and specify the \"x-ms-lease-id\" to renew an existing lease. Use \"release\" and specify the \"x-ms-lease-id\" to release a lease. Possible values include: 'acquire', 'break', 'change', 'renew', 'release'."
    name: "xMsLeaseAction"
    type: "<xref href=\"com.azure.storage.file.datalake.implementation.models.PathLeaseAction?alt=com.azure.storage.file.datalake.implementation.models.PathLeaseAction&text=PathLeaseAction\" data-throw-if-not-resolved=\"False\" />"
  - description: "The lease duration is required to acquire a lease, and specifies the duration of the lease in seconds.  The lease duration must be between 15 and 60 seconds or -1 for infinite lease."
    name: "xMsLeaseDuration"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  - description: "The lease break period duration is optional to break a lease, and  specifies the break period of the lease in seconds.  The lease break  duration must be between 0 and 60 seconds."
    name: "xMsLeaseBreakPeriod"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  - description: "Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor (String) for a list of valid GUID string formats."
    name: "proposedLeaseId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    name: "requestId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    name: "timeout"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation."
    name: "leaseAccessConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions?alt=com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions&text=LeaseAccessConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation."
    name: "modifiedAccessConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions?alt=com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions&text=ModifiedAccessConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PathsLeaseResponse> leaseWithRestResponseAsync(PathLeaseAction xMsLeaseAction, Integer xMsLeaseDuration, Integer xMsLeaseBreakPeriod, String proposedLeaseId, String requestId, Integer timeout, LeaseAccessConditions leaseAccessConditions, ModifiedAccessConditions modifiedAccessConditions, Context context)"
  returns:
    description: "a Mono which performs the network request upon subscription."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.implementation.models.PathsLeaseResponse?alt=com.azure.storage.file.datalake.implementation.models.PathsLeaseResponse&text=PathsLeaseResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.storage.file.datalake.implementation"
artifact: com.azure:azure-storage-file-datalake:12.4.1
