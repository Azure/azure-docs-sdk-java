### YamlMime:JavaMember
uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse*"
fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse"
name: "getAccessControlWithResponse"
nameWithType: "DataLakePathAsyncClient.getAccessControlWithResponse"
members:
- uid: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  fullName: "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions)"
  name: "getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakePathAsyncClient.getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions)"
  summary: "Returns the access control for a resource.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n boolean userPrincipalNameReturned = false;\n \n client.getAccessControlWithResponse(userPrincipalNameReturned, requestConditions).subscribe(\n     response -> System.out.printf(\"Access Control List: %s, Group: %s, Owner: %s, Permissions: %s\",\n         PathAccessControlEntry.serializeList(response.getValue().getAccessControlList()),\n         response.getValue().getGroup(), response.getValue().getOwner(), response.getValue().getPermissions()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/getproperties"
  parameters:
  - description: "When true, user identity values returned as User Principal Names. When false,\n user identity values returned as Azure Active Directory Object IDs. Default value is false."
    name: "userPrincipalNameReturned"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<PathAccessControl>> getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions)"
  returns:
    description: "A reactive response containing the resource access control."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathAccessControl?alt=com.azure.storage.file.datalake.models.PathAccessControl&text=PathAccessControl\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.storage.file.datalake"
artifact: com.azure:azure-storage-file-datalake:12.4.0
