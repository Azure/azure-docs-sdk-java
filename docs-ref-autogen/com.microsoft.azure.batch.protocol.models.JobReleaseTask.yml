### YamlMime:JavaType
uid: "com.microsoft.azure.batch.protocol.models.JobReleaseTask"
fullName: "com.microsoft.azure.batch.protocol.models.JobReleaseTask"
name: "JobReleaseTask"
nameWithType: "JobReleaseTask"
summary: "A Job Release Task to run on Job completion on any Compute Node where the Job has run. The Job Release Task runs when the Job ends, because of one of the following: The user calls the Terminate Job API, or the Delete Job API while the Job is still active, the Job's maximum wall clock time constraint is reached, and the Job is still active, or the Job's Job Manager Task completed, and the Job is configured to terminate when the Job Manager completes. The Job Release Task runs on each Node where Tasks of the Job have run and the Job Preparation Task ran and completed. If you reimage a Node after it has run the Job Preparation Task, and the Job ends without any further Tasks of the Job running on that Node (and hence the Job Preparation Task does not re-run), then the Job Release Task does not run on that Compute Node. If a Node reboots while the Job Release Task is still running, the Job Release Task runs again when the Compute Node starts up. The Job is not marked as complete until all Job Release Tasks have completed. The Job Release Task runs in the background. It does not occupy a scheduling slot; that is, it does not count towards the maxTasksPerNode limit specified on the Pool."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class JobReleaseTask"
constructors:
- "com.microsoft.azure.batch.protocol.models.JobReleaseTask.JobReleaseTask()"
methods:
- "com.microsoft.azure.batch.protocol.models.JobReleaseTask.commandLine()"
- "com.microsoft.azure.batch.protocol.models.JobReleaseTask.containerSettings()"
- "com.microsoft.azure.batch.protocol.models.JobReleaseTask.environmentSettings()"
- "com.microsoft.azure.batch.protocol.models.JobReleaseTask.id()"
- "com.microsoft.azure.batch.protocol.models.JobReleaseTask.maxWallClockTime()"
- "com.microsoft.azure.batch.protocol.models.JobReleaseTask.resourceFiles()"
- "com.microsoft.azure.batch.protocol.models.JobReleaseTask.retentionTime()"
- "com.microsoft.azure.batch.protocol.models.JobReleaseTask.userIdentity()"
- "com.microsoft.azure.batch.protocol.models.JobReleaseTask.withCommandLine(java.lang.String)"
- "com.microsoft.azure.batch.protocol.models.JobReleaseTask.withContainerSettings(com.microsoft.azure.batch.protocol.models.TaskContainerSettings)"
- "com.microsoft.azure.batch.protocol.models.JobReleaseTask.withEnvironmentSettings(java.util.List<com.microsoft.azure.batch.protocol.models.EnvironmentSetting>)"
- "com.microsoft.azure.batch.protocol.models.JobReleaseTask.withId(java.lang.String)"
- "com.microsoft.azure.batch.protocol.models.JobReleaseTask.withMaxWallClockTime(org.joda.time.Period)"
- "com.microsoft.azure.batch.protocol.models.JobReleaseTask.withResourceFiles(java.util.List<com.microsoft.azure.batch.protocol.models.ResourceFile>)"
- "com.microsoft.azure.batch.protocol.models.JobReleaseTask.withRetentionTime(org.joda.time.Period)"
- "com.microsoft.azure.batch.protocol.models.JobReleaseTask.withUserIdentity(com.microsoft.azure.batch.protocol.models.UserIdentity)"
type: "class"
metadata: {}
package: "com.microsoft.azure.batch.protocol.models"
artifact: com.microsoft.azure:azure-batch:8.0.0
