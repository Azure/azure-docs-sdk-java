### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.aad.adal.Logger.d(String tag, String message)
  name: d(String tag, String message)
  nameWithType: Logger.d(String tag, String message)
  parameters:
  - description: <p>tag for the log message </p>
    name: tag
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>body of the log message </p>
    name: message
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>

      <xrefsect id="deprecated_1_deprecated000006">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.logging.Logger#info(String, String, String)"></xref> instead. </p>

        </xrefdescription>

      </xrefsect>

    </p>

    <p>Logs debug message. </p>
  syntax: public static void d(String tag, String message)
  uid: com.microsoft.aad.adal.Logger.d(String,String)
- fullName: com.microsoft.aad.adal.Logger.e(String tag, String message)
  name: e(String tag, String message)
  nameWithType: Logger.e(String tag, String message)
  parameters:
  - description: <p>Tag for the log </p>
    name: tag
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Message to add to the log </p>
    name: message
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Logs error message.</p>

    <p></p>
  syntax: public static void e(String tag, String message)
  uid: com.microsoft.aad.adal.Logger.e(String,String)
- fullName: com.microsoft.aad.adal.Logger.e(String tag, String message, String additionalMessage, ADALError errorCode)
  name: e(String tag, String message, String additionalMessage, ADALError errorCode)
  nameWithType: Logger.e(String tag, String message, String additionalMessage, ADALError errorCode)
  parameters:
  - description: <p>tag for the log message </p>
    name: tag
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>body of the log message </p>
    name: message
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>additional parameters </p>
    name: additionalMessage
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>ADAL error code being logged </p>
    name: errorCode
    type: <xref href="com.microsoft.aad.adal.ADALError?alt=com.microsoft.aad.adal.ADALError&text=ADALError" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>

      <xrefsect id="deprecated_1_deprecated000013">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.logging.Logger#error(String, String, String, Throwable)"></xref> if the log message does not contain any PII information. use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.logging.Logger#errorPII(String, String, String, Throwable)"></xref> if the log message contains any PII information. </p>

        </xrefdescription>

      </xrefsect>

    </p>

    <p>Logs error message. </p>
  syntax: public static void e(String tag, String message, String additionalMessage, ADALError errorCode)
  uid: com.microsoft.aad.adal.Logger.e(String,String,String,ADALError)
- fullName: com.microsoft.aad.adal.Logger.e(String tag, String message, String additionalMessage, ADALError errorCode, Throwable throwable)
  name: e(String tag, String message, String additionalMessage, ADALError errorCode, Throwable throwable)
  nameWithType: Logger.e(String tag, String message, String additionalMessage, ADALError errorCode, Throwable throwable)
  parameters:
  - description: <p>Tag for the log </p>
    name: tag
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Message to add to the log </p>
    name: message
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>any additional parameters </p>
    name: additionalMessage
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>ADAL error code </p>
    name: errorCode
    type: <xref href="com.microsoft.aad.adal.ADALError?alt=com.microsoft.aad.adal.ADALError&text=ADALError" data-throw-if-not-resolved="False"/>
  - description: <p>Throwable </p>
    name: throwable
    type: <xref href="Throwable?alt=Throwable&text=Throwable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>

      <xrefsect id="deprecated_1_deprecated000014">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.logging.Logger#error(String, String, String, Throwable)"></xref> if the log message does not contain any PII information. use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.logging.Logger#errorPII(String, String, String, Throwable)"></xref> if the log message contains any PII information. </p>

        </xrefdescription>

      </xrefsect>

    </p>

    <p>Logs error message. </p>
  syntax: public static void e(String tag, String message, String additionalMessage, ADALError errorCode, Throwable throwable)
  uid: com.microsoft.aad.adal.Logger.e(String,String,String,ADALError,Throwable)
- fullName: com.microsoft.aad.adal.Logger.e(String tag, String message, Throwable throwable)
  name: e(String tag, String message, Throwable throwable)
  nameWithType: Logger.e(String tag, String message, Throwable throwable)
  parameters:
  - description: <p>Tag for the log </p>
    name: tag
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Message to add to the log </p>
    name: message
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Throwable </p>
    name: throwable
    type: <xref href="Throwable?alt=Throwable&text=Throwable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>

      <xrefsect id="deprecated_1_deprecated000015">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.logging.Logger#error(String, String, String, Throwable)"></xref> if the log message does not contain any PII information. use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.logging.Logger#errorPII(String, String, String, Throwable)"></xref> if the log message contains any PII information. </p>

        </xrefdescription>

      </xrefsect>

    </p>

    <p>Logs error message. </p>
  syntax: public static void e(String tag, String message, Throwable throwable)
  uid: com.microsoft.aad.adal.Logger.e(String,String,Throwable)
- fullName: com.microsoft.aad.adal.Logger.getCorrelationId()
  name: getCorrelationId()
  nameWithType: Logger.getCorrelationId()
  returns:
    description: <p>the correlation id for the logger. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getCorrelationId()
  uid: com.microsoft.aad.adal.Logger.getCorrelationId()
- fullName: com.microsoft.aad.adal.Logger.getInstance()
  name: getInstance()
  nameWithType: Logger.getInstance()
  returns:
    description: <p>The single instance of <xref uid="com.microsoft.aad.adal.Logger" data-throw-if-not-resolved="false" data-raw-source="Logger"></xref>. </p>
    type: <xref href="com.microsoft.aad.adal.Logger?alt=com.microsoft.aad.adal.Logger&text=Logger" data-throw-if-not-resolved="False"/>
  syntax: public static Logger getInstance()
  uid: com.microsoft.aad.adal.Logger.getInstance()
- fullName: com.microsoft.aad.adal.Logger.i(String tag, String message, String additionalMessage)
  name: i(String tag, String message, String additionalMessage)
  nameWithType: Logger.i(String tag, String message, String additionalMessage)
  parameters:
  - description: <p>tag for the log message </p>
    name: tag
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>body of the log message </p>
    name: message
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>additional parameters </p>
    name: additionalMessage
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>

      <xrefsect id="deprecated_1_deprecated000007">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.logging.Logger#info(String, String, String)"></xref> if the log message does not contain any PII information. use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.logging.Logger#infoPII(String, String, String)"></xref> if the log message contains any PII information. </p>

        </xrefdescription>

      </xrefsect>

    </p>

    <p>Logs informational message. </p>
  syntax: public static void i(String tag, String message, String additionalMessage)
  uid: com.microsoft.aad.adal.Logger.i(String,String,String)
- fullName: com.microsoft.aad.adal.Logger.i(String tag, String message, String additionalMessage, ADALError errorCode)
  name: i(String tag, String message, String additionalMessage, ADALError errorCode)
  nameWithType: Logger.i(String tag, String message, String additionalMessage, ADALError errorCode)
  parameters:
  - description: <p>tag for the log message </p>
    name: tag
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>body of the log message </p>
    name: message
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>additional parameters </p>
    name: additionalMessage
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>ADAL error code being logged </p>
    name: errorCode
    type: <xref href="com.microsoft.aad.adal.ADALError?alt=com.microsoft.aad.adal.ADALError&text=ADALError" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>

      <xrefsect id="deprecated_1_deprecated000008">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.logging.Logger#info(String, String, String)"></xref> if the log message does not contain any PII information. use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.logging.Logger#infoPII(String, String, String)"></xref> if the log message contains any PII information. </p>

        </xrefdescription>

      </xrefsect>

    </p>

    <p>Logs informational messages with error codes. </p>
  syntax: public static void i(String tag, String message, String additionalMessage, ADALError errorCode)
  uid: com.microsoft.aad.adal.Logger.i(String,String,String,ADALError)
- fullName: com.microsoft.aad.adal.Logger.setAndroidLogEnabled(final boolean androidLogEnabled)
  name: setAndroidLogEnabled(final boolean androidLogEnabled)
  nameWithType: Logger.setAndroidLogEnabled(final boolean androidLogEnabled)
  parameters:
  - description: <p>True if enabling the logcat logging, false otherwise. </p>
    name: androidLogEnabled
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enable/Disable the Android logcat logging. By default, the sdk disables it.</p>

    <p></p>
  syntax: public void setAndroidLogEnabled(final boolean androidLogEnabled)
  uid: com.microsoft.aad.adal.Logger.setAndroidLogEnabled(final boolean)
- fullName: com.microsoft.aad.adal.Logger.setCorrelationId(UUID correlation)
  name: setCorrelationId(UUID correlation)
  nameWithType: Logger.setCorrelationId(UUID correlation)
  parameters:
  - description: <p>Correlation ID to be used </p>
    name: correlation
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the correlation id for the logger.</p>

    <p></p>
  syntax: public static void setCorrelationId(UUID correlation)
  uid: com.microsoft.aad.adal.Logger.setCorrelationId(UUID)
- fullName: com.microsoft.aad.adal.Logger.setEnablePII(final boolean enablePII)
  name: setEnablePII(final boolean enablePII)
  nameWithType: Logger.setEnablePII(final boolean enablePII)
  parameters:
  - description: <p>True if enabling PII info to be logged, false otherwise. </p>
    name: enablePII
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>ADAL provides logging callbacks that assist in diagnostics. The callback has two parameters, message and additionalMessage. All user information is put into additionalMessage. ADAL will clear this data unless the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.logging.Logger#mAllowPii"></xref> is called with true. By default the library will not return any messages with user information in them.</p>

    <p></p>
  syntax: public void setEnablePII(final boolean enablePII)
  uid: com.microsoft.aad.adal.Logger.setEnablePII(final boolean)
- fullName: com.microsoft.aad.adal.Logger.setExternalLogger(ILogger externalLogger)
  name: setExternalLogger(ILogger externalLogger)
  nameWithType: Logger.setExternalLogger(ILogger externalLogger)
  parameters:
  - description: <p>The reference to the <xref uid="com.microsoft.aad.adal.Logger.ILogger" data-throw-if-not-resolved="false" data-raw-source="ILogger"></xref> that can output the logs to the designated places. </p>
    name: externalLogger
    type: <xref href="com.microsoft.aad.adal.Logger.ILogger?alt=com.microsoft.aad.adal.Logger.ILogger&text=Logger.ILogger" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the custom logger. Configures external logging to configure a callback that the sdk will use to pass each log message. Overriding the logger callback is not allowed.</p>

    <p></p>
  syntax: public synchronized void setExternalLogger(ILogger externalLogger)
  uid: com.microsoft.aad.adal.Logger.setExternalLogger(ILogger)
- fullName: com.microsoft.aad.adal.Logger.setLogLevel(final LogLevel logLevel)
  name: setLogLevel(final LogLevel logLevel)
  nameWithType: Logger.setLogLevel(final LogLevel logLevel)
  parameters:
  - description: <p>The <xref uid="com.microsoft.aad.adal.Logger.LogLevel" data-throw-if-not-resolved="false" data-raw-source="LogLevel"></xref> to be enabled for the diagnostic logging. </p>
    name: logLevel
    type: final <xref href="com.microsoft.aad.adal.Logger.LogLevel?alt=com.microsoft.aad.adal.Logger.LogLevel&text=Logger.LogLevel" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the log level for diagnostic purpose. By default, the sdk enables the verbose level logging.</p>

    <p></p>
  syntax: public void setLogLevel(final LogLevel logLevel)
  uid: com.microsoft.aad.adal.Logger.setLogLevel(final LogLevel)
- fullName: com.microsoft.aad.adal.Logger.v(String tag, String message)
  name: v(String tag, String message)
  nameWithType: Logger.v(String tag, String message)
  parameters:
  - description: <p>tag for the log message </p>
    name: tag
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>body of the log message </p>
    name: message
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>

      <xrefsect id="deprecated_1_deprecated000009">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.logging.Logger#verbose(String, String, String)"></xref> if the log message does not contain any PII information. use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.logging.Logger#verbosePII(String, String, String)"></xref> if the log message contains any PII information. </p>

        </xrefdescription>

      </xrefsect>

    </p>

    <p>Logs verbose message. </p>
  syntax: public static void v(String tag, String message)
  uid: com.microsoft.aad.adal.Logger.v(String,String)
- fullName: com.microsoft.aad.adal.Logger.v(String tag, String message, String additionalMessage, ADALError errorCode)
  name: v(String tag, String message, String additionalMessage, ADALError errorCode)
  nameWithType: Logger.v(String tag, String message, String additionalMessage, ADALError errorCode)
  parameters:
  - description: <p>tag for the log message </p>
    name: tag
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>body of the log message </p>
    name: message
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>additional parameters </p>
    name: additionalMessage
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>ADAL error code being logged </p>
    name: errorCode
    type: <xref href="com.microsoft.aad.adal.ADALError?alt=com.microsoft.aad.adal.ADALError&text=ADALError" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>

      <xrefsect id="deprecated_1_deprecated000010">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.logging.Logger#verbose(String, String, String)"></xref> if the log message does not contain any PII information. use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.logging.Logger#verbosePII(String, String, String)"></xref> if the log message contains any PII information. </p>

        </xrefdescription>

      </xrefsect>

    </p>

    <p>Logs verbose message with error code. </p>
  syntax: public static void v(String tag, String message, String additionalMessage, ADALError errorCode)
  uid: com.microsoft.aad.adal.Logger.v(String,String,String,ADALError)
- fullName: com.microsoft.aad.adal.Logger.w(String tag, String message)
  name: w(String tag, String message)
  nameWithType: Logger.w(String tag, String message)
  parameters:
  - description: <p>tag for the log message </p>
    name: tag
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>body of the log message </p>
    name: message
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>

      <xrefsect id="deprecated_1_deprecated000012">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.logging.Logger#warn(String, String, String)"></xref> if the log message does not contain any PII information. use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.logging.Logger#warnPII(String, String, String)"></xref> if the log message contains any PII information. </p>

        </xrefdescription>

      </xrefsect>

    </p>

    <p>Logs warning message. </p>
  syntax: public static void w(String tag, String message)
  uid: com.microsoft.aad.adal.Logger.w(String,String)
- fullName: com.microsoft.aad.adal.Logger.w(String tag, String message, String additionalMessage, ADALError errorCode)
  name: w(String tag, String message, String additionalMessage, ADALError errorCode)
  nameWithType: Logger.w(String tag, String message, String additionalMessage, ADALError errorCode)
  parameters:
  - description: <p>tag for the log message </p>
    name: tag
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>body of the log message </p>
    name: message
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>additional parameters </p>
    name: additionalMessage
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>ADAL error code being logged </p>
    name: errorCode
    type: <xref href="com.microsoft.aad.adal.ADALError?alt=com.microsoft.aad.adal.ADALError&text=ADALError" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>

      <xrefsect id="deprecated_1_deprecated000011">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.logging.Logger#warn(String, String, String)"></xref> if the log message does not contain any PII information. use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.logging.Logger#warnPII(String, String, String)"></xref> if the log message contains any PII information. </p>

        </xrefdescription>

      </xrefsect>

    </p>

    <p>Logs warning message. </p>
  syntax: public static void w(String tag, String message, String additionalMessage, ADALError errorCode)
  uid: com.microsoft.aad.adal.Logger.w(String,String,String,ADALError)
nameWithType: Logger
syntax: public class Logger
type: class
uid: com.microsoft.aad.adal.Logger
fullName: com.microsoft.aad.adal.Logger
name: Logger
package: com.microsoft.aad.adal
summary: '<p>Android log output can. If externalLogger is set, it will use that as well. Usage: Logger.v(tag, message, additionalMessage, errorCode) to log. Set custom logger: Logger.setExternalLogger(..); </p>'
metadata: {}
