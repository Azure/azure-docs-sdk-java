### YamlMime:JavaMember
nameWithType: ActorRuntime.registerActorAsync
type: method
members:
- fullName: microsoft.servicefabric.actors.runtime.ActorRuntime.registerActorAsync(Class<T> actorType, BiFunction<StatefulServiceContext, ActorTypeInformation, FabricActorService> actorServiceFactory, Duration timeout)
  name: registerActorAsync(Class<T> actorType, BiFunction<StatefulServiceContext, ActorTypeInformation, FabricActorService> actorServiceFactory, Duration timeout)
  nameWithType: ActorRuntime.registerActorAsync(Class<T> actorType, BiFunction<StatefulServiceContext, ActorTypeInformation, FabricActorService> actorServiceFactory, Duration timeout)
  parameters:
  - description: <p>The actor class implementing <xref uid="microsoft.servicefabric.actors.Actor" data-throw-if-not-resolved="false">Actor</xref> interface </p>
    name: actorType
    type: <xref href="Class%3CT%3E?alt=Class<T>&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Actor Service implementation to create Actor. See <xref uid="microsoft.servicefabric.actors.runtime.FabricActorService" data-throw-if-not-resolved="false">FabricActorService</xref></p>
    name: actorServiceFactory
    type: BiFunction&lt;<xref href="system.fabric.StatefulServiceContext?alt=system.fabric.StatefulServiceContext&text=StatefulServiceContext" data-throw-if-not-resolved="False"/>, <xref href="microsoft.servicefabric.actors.runtime.ActorTypeInformation?alt=microsoft.servicefabric.actors.runtime.ActorTypeInformation&text=ActorTypeInformation" data-throw-if-not-resolved="False"/>, <xref href="microsoft.servicefabric.actors.runtime.FabricActorService?alt=microsoft.servicefabric.actors.runtime.FabricActorService&text=FabricActorService" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>A timeout period after which the registration operation will be canceled. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous operation to register actor type with Service Fabric runtime. </p>
    type: static&lt;T extends <xref href="microsoft.servicefabric.actors.runtime.ActorBase?alt=microsoft.servicefabric.actors.runtime.ActorBase&text=ActorBase" data-throw-if-not-resolved="False"/>&gt; CompletableFuture&lt;?&gt;
  summary: >-
    <p>Registers an actor type with Service Fabric runtime.</p>

    <p></p>
  syntax: public static static<T extends ActorBase> CompletableFuture<?> registerActorAsync(Class<T> actorType, BiFunction<StatefulServiceContext, ActorTypeInformation, FabricActorService> actorServiceFactory, Duration timeout)
  uid: microsoft.servicefabric.actors.runtime.ActorRuntime.registerActorAsync(Class<T>,BiFunction<StatefulServiceContext, ActorTypeInformation, FabricActorService>,Duration)
- fullName: microsoft.servicefabric.actors.runtime.ActorRuntime.registerActorAsync(Class<T> actorType, Duration timeout)
  name: registerActorAsync(Class<T> actorType, Duration timeout)
  nameWithType: ActorRuntime.registerActorAsync(Class<T> actorType, Duration timeout)
  parameters:
  - description: <p>The actor class implementing <xref uid="microsoft.servicefabric.actors.Actor" data-throw-if-not-resolved="false">microsoft.servicefabric.actors.Actor</xref> interface </p>
    name: actorType
    type: <xref href="Class%3CT%3E?alt=Class<T>&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>A timeout period after which the registration operation will be canceled. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous operation to register actor type with Service Fabric runtime. </p>
    type: static&lt;T extends <xref href="microsoft.servicefabric.actors.runtime.ActorBase?alt=microsoft.servicefabric.actors.runtime.ActorBase&text=ActorBase" data-throw-if-not-resolved="False"/>&gt; CompletableFuture&lt;?&gt;
  summary: >-
    <p>Registers an actor type with Service Fabric runtime.</p>

    <p></p>
  syntax: public static static<T extends ActorBase> CompletableFuture<?> registerActorAsync(Class<T> actorType, Duration timeout)
  uid: microsoft.servicefabric.actors.runtime.ActorRuntime.registerActorAsync(Class<T>,Duration)
uid: microsoft.servicefabric.actors.runtime.ActorRuntime.registerActorAsync*
fullName: microsoft.servicefabric.actors.runtime.ActorRuntime.registerActorAsync(Class<T> actorType, BiFunction<StatefulServiceContext, ActorTypeInformation, FabricActorService> actorServiceFactory, Duration timeout)
name: registerActorAsync(Class<T> actorType, BiFunction<StatefulServiceContext, ActorTypeInformation, FabricActorService> actorServiceFactory, Duration timeout)
package: microsoft.servicefabric.actors.runtime
metadata: {}
