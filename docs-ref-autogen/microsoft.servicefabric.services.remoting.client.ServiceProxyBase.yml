### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.services.remoting.builder.ProxyBase?alt=microsoft.servicefabric.services.remoting.builder.ProxyBase&text=ProxyBase" data-throw-if-not-resolved="False"/>
inheritedMembers:
- microsoft.servicefabric.services.remoting.builder.ProxyBase.continueWith(CompletableFuture<Object>)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.getReturnValue(int,int,Object)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.invoke(int,int,Object)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.invokeAsync(int,int,Object,CancellationToken)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.ProxyBase()
methods:
- fullName: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.create(Class<T> serviceInterfaceType, URI serviceUri)
  name: create(Class<T> serviceInterfaceType, URI serviceUri)
  nameWithType: ServiceProxyBase.create(Class<T> serviceInterfaceType, URI serviceUri)
  parameters:
  - name: serviceInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  returns:
    type: static&lt;T extends <xref href="microsoft.servicefabric.services.remoting.Service?alt=microsoft.servicefabric.services.remoting.Service&text=Service" data-throw-if-not-resolved="False"/>&gt; T
  syntax: public static static<T extends Service> T create(Class<T> serviceInterfaceType, URI serviceUri)
  uid: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.create(Class<T>,URI)
- fullName: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.create(Class<T> serviceInterfaceType, URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName)
  name: create(Class<T> serviceInterfaceType, URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName)
  nameWithType: ServiceProxyBase.create(Class<T> serviceInterfaceType, URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName)
  parameters:
  - description: <p>Interface type that is being remoted </p>
    name: serviceInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Uri of the Service. </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>The Partition key that determines which service partition is responsible for handling requests from this service proxy </p>
    name: partitionKey
    type: <xref href="microsoft.servicefabric.services.client.ServicePartitionKey?alt=microsoft.servicefabric.services.client.ServicePartitionKey&text=ServicePartitionKey" data-throw-if-not-resolved="False"/>
  - description: <p>Determines which replica or instance of the service partition the client should connect to. </p>
    name: targetReplicaSelector
    type: <xref href="microsoft.servicefabric.services.communication.client.TargetReplicaSelector?alt=microsoft.servicefabric.services.communication.client.TargetReplicaSelector&text=TargetReplicaSelector" data-throw-if-not-resolved="False"/>
  - description: <p>This parameter is Optional if the service has a single communication listener. The endpoints from the service are of the form {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}. When the service exposes multiple endpoints, this parameter identifies which of those endpoints to use for the remoting communication.</p>
    name: listenerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The proxy that implement the interface that is being remoted. The returned object also implement <xref uid="microsoft.servicefabric.services.remoting.client.ServiceProxy" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.services.remoting.client.ServiceProxy"></xref> interface. </p>
    type: static&lt;T extends <xref href="microsoft.servicefabric.services.remoting.Service?alt=microsoft.servicefabric.services.remoting.Service&text=Service" data-throw-if-not-resolved="False"/>&gt; T
  summary: >-
    <p>Creates a proxy to communicate to the specified service using the remoted interface TServiceInterface that the service implements.</p>

    <p></p>
  syntax: public static static<T extends Service> T create(Class<T> serviceInterfaceType, URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName)
  uid: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.create(Class<T>,URI,ServicePartitionKey,TargetReplicaSelector,String)
- fullName: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.createRequestMessageBody(Object requestMessageBodyValue)
  name: createRequestMessageBody(Object requestMessageBodyValue)
  nameWithType: ServiceProxyBase.createRequestMessageBody(Object requestMessageBodyValue)
  parameters:
  - name: requestMessageBodyValue
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  syntax: protected Object createRequestMessageBody(Object requestMessageBodyValue)
  uid: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.createRequestMessageBody(Object)
- fullName: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.deserializeMessage(byte[] msgBodyValue)
  name: deserializeMessage(byte[] msgBodyValue)
  nameWithType: ServiceProxyBase.deserializeMessage(byte[] msgBodyValue)
  parameters:
  - name: msgBodyValue
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  syntax: protected Object deserializeMessage(byte[] msgBodyValue)
  uid: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.deserializeMessage(byte [])
- fullName: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.getResponseMessageBodyValue(Object responseMessageBody)
  name: getResponseMessageBodyValue(Object responseMessageBody)
  nameWithType: ServiceProxyBase.getResponseMessageBodyValue(Object responseMessageBody)
  parameters:
  - name: responseMessageBody
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  syntax: protected Object getResponseMessageBodyValue(Object responseMessageBody)
  uid: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.getResponseMessageBodyValue(Object)
- fullName: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.getServiceInterfaceType()
  name: getServiceInterfaceType()
  nameWithType: ServiceProxyBase.getServiceInterfaceType()
  overridden: microsoft.servicefabric.services.remoting.client.ServiceProxy.getServiceInterfaceType()
  returns:
    description: <p>Service interface type. </p>
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The interface type that is being remoted.</p>

    <p></p>
  syntax: public Class<?> getServiceInterfaceType()
  uid: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.getServiceInterfaceType()
- fullName: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.getServicePartitionClient()
  name: getServicePartitionClient()
  nameWithType: ServiceProxyBase.getServicePartitionClient()
  overridden: microsoft.servicefabric.services.remoting.client.ServiceProxy.getServicePartitionClient()
  returns:
    description: <p>ServicePartitionClient used by the ServiceProxy. </p>
    type: <xref href="microsoft.servicefabric.services.remoting.client.ServiceRemotingPartitionClient?alt=microsoft.servicefabric.services.remoting.client.ServiceRemotingPartitionClient&text=ServiceRemotingPartitionClient" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The service partition client used to send requests to the service.</p>

    <p></p>
  syntax: public ServiceRemotingPartitionClient getServicePartitionClient()
  uid: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.getServicePartitionClient()
- fullName: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.initialize(ServiceProxyGenerator serviceProxyGenerator, FabricServiceRemotingPartitionClient remotingPartitionClient)
  name: initialize(ServiceProxyGenerator serviceProxyGenerator, FabricServiceRemotingPartitionClient remotingPartitionClient)
  nameWithType: ServiceProxyBase.initialize(ServiceProxyGenerator serviceProxyGenerator, FabricServiceRemotingPartitionClient remotingPartitionClient)
  parameters:
  - description: <p>instance of the serviceProxyGenerator </p>
    name: serviceProxyGenerator
    type: <xref href="microsoft.servicefabric.services.remoting.builder.ServiceProxyGenerator?alt=microsoft.servicefabric.services.remoting.builder.ServiceProxyGenerator&text=ServiceProxyGenerator" data-throw-if-not-resolved="False"/>
  - description: <p>remotingPartitionClient used by Service proxy. </p>
    name: remotingPartitionClient
    type: <xref href="microsoft.servicefabric.services.remoting.client.FabricServiceRemotingPartitionClient?alt=microsoft.servicefabric.services.remoting.client.FabricServiceRemotingPartitionClient&text=FabricServiceRemotingPartitionClient" data-throw-if-not-resolved="False"/>
  summary: <p>Method to Initialize the service proxy instance. This is for internal use. </p>
  syntax: public void initialize(ServiceProxyGenerator serviceProxyGenerator, FabricServiceRemotingPartitionClient remotingPartitionClient)
  uid: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.initialize(ServiceProxyGenerator,FabricServiceRemotingPartitionClient)
- fullName: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.invoke(int interfaceId, int methodId, byte[] requestMsgBodyBytes)
  name: invoke(int interfaceId, int methodId, byte[] requestMsgBodyBytes)
  nameWithType: ServiceProxyBase.invoke(int interfaceId, int methodId, byte[] requestMsgBodyBytes)
  parameters:
  - name: interfaceId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - name: methodId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - name: requestMsgBodyBytes
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  syntax: protected void invoke(int interfaceId, int methodId, byte[] requestMsgBodyBytes)
  uid: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.invoke(int,int,byte [])
- fullName: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes, CancellationToken cancellationToken)
  name: invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes, CancellationToken cancellationToken)
  nameWithType: ServiceProxyBase.invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes, CancellationToken cancellationToken)
  parameters:
  - name: interfaceId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - name: methodId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - name: requestMsgBodyBytes
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3Cbyte%5B%5D%3E?alt=CompletableFuture%3Cbyte%5B%5D%3E&text=CompletableFuture%3Cbyte%5B%5D%3E" data-throw-if-not-resolved="False"/>
  syntax: protected CompletableFuture<byte[]> invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.invokeAsync(int,int,byte [],CancellationToken)
- fullName: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.serializeMessage(Object msgBodyValue)
  name: serializeMessage(Object msgBodyValue)
  nameWithType: ServiceProxyBase.serializeMessage(Object msgBodyValue)
  parameters:
  - name: msgBodyValue
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  syntax: protected byte [] serializeMessage(Object msgBodyValue)
  uid: microsoft.servicefabric.services.remoting.client.ServiceProxyBase.serializeMessage(Object)
nameWithType: ServiceProxyBase
syntax: public class ServiceProxyBase extends ProxyBase implements ServiceProxy
type: class
uid: microsoft.servicefabric.services.remoting.client.ServiceProxyBase
fullName: microsoft.servicefabric.services.remoting.client.ServiceProxyBase
name: ServiceProxyBase
package: microsoft.servicefabric.services.remoting.client
summary: <p>Provides the base implementation for the proxy to the remoted IService interfaces. </p>
metadata: {}
