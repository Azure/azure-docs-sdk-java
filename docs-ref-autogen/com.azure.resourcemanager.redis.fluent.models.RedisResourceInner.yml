### YamlMime:JavaType
uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner"
fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner"
name: "RedisResourceInner"
nameWithType: "RedisResourceInner"
summary: "A single Redis item in List or Get Operation."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.core.management.ProxyResource?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.core.management.Resource?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.core.management.ProxyResource.id()"
- "com.azure.core.management.ProxyResource.name()"
- "com.azure.core.management.ProxyResource.type()"
- "com.azure.core.management.Resource.location()"
- "com.azure.core.management.Resource.tags()"
- "com.azure.core.management.Resource.withLocation(java.lang.String)"
- "com.azure.core.management.Resource.withTags(java.util.Map<java.lang.String,java.lang.String>)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class RedisResourceInner extends Resource"
constructors:
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.RedisResourceInner()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.RedisResourceInner()"
  name: "RedisResourceInner()"
  nameWithType: "RedisResourceInner.RedisResourceInner()"
  syntax: "public RedisResourceInner()"
methods:
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.accessKeys()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.accessKeys()"
  name: "accessKeys()"
  nameWithType: "RedisResourceInner.accessKeys()"
  summary: "Get the accessKeys property: The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache."
  syntax: "public RedisAccessKeysInner accessKeys()"
  returns:
    description: "the accessKeys value."
    type: "<xref href=\"com.azure.resourcemanager.redis.fluent.models.RedisAccessKeysInner?alt=com.azure.resourcemanager.redis.fluent.models.RedisAccessKeysInner&text=RedisAccessKeysInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.enableNonSslPort()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.enableNonSslPort()"
  name: "enableNonSslPort()"
  nameWithType: "RedisResourceInner.enableNonSslPort()"
  summary: "Get the enableNonSslPort property: Specifies whether the non-ssl Redis server port (6379) is enabled."
  syntax: "public Boolean enableNonSslPort()"
  returns:
    description: "the enableNonSslPort value."
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.hostname()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.hostname()"
  name: "hostname()"
  nameWithType: "RedisResourceInner.hostname()"
  summary: "Get the hostname property: Redis host name."
  syntax: "public String hostname()"
  returns:
    description: "the hostname value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.identity()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.identity()"
  name: "identity()"
  nameWithType: "RedisResourceInner.identity()"
  summary: "Get the identity property: The identity of the resource."
  syntax: "public ManagedServiceIdentity identity()"
  returns:
    description: "the identity value."
    type: "<xref href=\"com.azure.resourcemanager.redis.models.ManagedServiceIdentity?alt=com.azure.resourcemanager.redis.models.ManagedServiceIdentity&text=ManagedServiceIdentity\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.instances()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.instances()"
  name: "instances()"
  nameWithType: "RedisResourceInner.instances()"
  summary: "Get the instances property: List of the Redis instances associated with the cache."
  syntax: "public List<RedisInstanceDetails> instances()"
  returns:
    description: "the instances value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.redis.models.RedisInstanceDetails?alt=com.azure.resourcemanager.redis.models.RedisInstanceDetails&text=RedisInstanceDetails\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.linkedServers()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.linkedServers()"
  name: "linkedServers()"
  nameWithType: "RedisResourceInner.linkedServers()"
  summary: "Get the linkedServers property: List of the linked servers associated with the cache."
  syntax: "public List<RedisLinkedServer> linkedServers()"
  returns:
    description: "the linkedServers value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.redis.models.RedisLinkedServer?alt=com.azure.resourcemanager.redis.models.RedisLinkedServer&text=RedisLinkedServer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.minimumTlsVersion()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.minimumTlsVersion()"
  name: "minimumTlsVersion()"
  nameWithType: "RedisResourceInner.minimumTlsVersion()"
  summary: "Get the minimumTlsVersion property: Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')."
  syntax: "public TlsVersion minimumTlsVersion()"
  returns:
    description: "the minimumTlsVersion value."
    type: "<xref href=\"com.azure.resourcemanager.redis.models.TlsVersion?alt=com.azure.resourcemanager.redis.models.TlsVersion&text=TlsVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.port()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.port()"
  name: "port()"
  nameWithType: "RedisResourceInner.port()"
  summary: "Get the port property: Redis non-SSL port."
  syntax: "public Integer port()"
  returns:
    description: "the port value."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.privateEndpointConnections()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.privateEndpointConnections()"
  name: "privateEndpointConnections()"
  nameWithType: "RedisResourceInner.privateEndpointConnections()"
  summary: "Get the privateEndpointConnections property: List of private endpoint connection associated with the specified redis cache."
  syntax: "public List<PrivateEndpointConnectionInner> privateEndpointConnections()"
  returns:
    description: "the privateEndpointConnections value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.redis.fluent.models.PrivateEndpointConnectionInner?alt=com.azure.resourcemanager.redis.fluent.models.PrivateEndpointConnectionInner&text=PrivateEndpointConnectionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.provisioningState()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.provisioningState()"
  name: "provisioningState()"
  nameWithType: "RedisResourceInner.provisioningState()"
  summary: "Get the provisioningState property: Redis instance provisioning status."
  syntax: "public ProvisioningState provisioningState()"
  returns:
    description: "the provisioningState value."
    type: "<xref href=\"com.azure.resourcemanager.redis.models.ProvisioningState?alt=com.azure.resourcemanager.redis.models.ProvisioningState&text=ProvisioningState\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.publicNetworkAccess()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.publicNetworkAccess()"
  name: "publicNetworkAccess()"
  nameWithType: "RedisResourceInner.publicNetworkAccess()"
  summary: "Get the publicNetworkAccess property: Whether or not public endpoint access is allowed for this cache. Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'."
  syntax: "public PublicNetworkAccess publicNetworkAccess()"
  returns:
    description: "the publicNetworkAccess value."
    type: "<xref href=\"com.azure.resourcemanager.redis.models.PublicNetworkAccess?alt=com.azure.resourcemanager.redis.models.PublicNetworkAccess&text=PublicNetworkAccess\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.redisConfiguration()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.redisConfiguration()"
  name: "redisConfiguration()"
  nameWithType: "RedisResourceInner.redisConfiguration()"
  summary: "Get the redisConfiguration property: All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc."
  syntax: "public RedisConfiguration redisConfiguration()"
  returns:
    description: "the redisConfiguration value."
    type: "<xref href=\"com.azure.resourcemanager.redis.models.RedisConfiguration?alt=com.azure.resourcemanager.redis.models.RedisConfiguration&text=RedisConfiguration\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.redisVersion()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.redisVersion()"
  name: "redisVersion()"
  nameWithType: "RedisResourceInner.redisVersion()"
  summary: "Get the redisVersion property: Redis version. Only major version will be used in PUT/PATCH request with current valid values: (4, 6)."
  syntax: "public String redisVersion()"
  returns:
    description: "the redisVersion value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.replicasPerMaster()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.replicasPerMaster()"
  name: "replicasPerMaster()"
  nameWithType: "RedisResourceInner.replicasPerMaster()"
  summary: "Get the replicasPerMaster property: The number of replicas to be created per primary."
  syntax: "public Integer replicasPerMaster()"
  returns:
    description: "the replicasPerMaster value."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.replicasPerPrimary()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.replicasPerPrimary()"
  name: "replicasPerPrimary()"
  nameWithType: "RedisResourceInner.replicasPerPrimary()"
  summary: "Get the replicasPerPrimary property: The number of replicas to be created per primary."
  syntax: "public Integer replicasPerPrimary()"
  returns:
    description: "the replicasPerPrimary value."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.shardCount()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.shardCount()"
  name: "shardCount()"
  nameWithType: "RedisResourceInner.shardCount()"
  summary: "Get the shardCount property: The number of shards to be created on a Premium Cluster Cache."
  syntax: "public Integer shardCount()"
  returns:
    description: "the shardCount value."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.sku()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.sku()"
  name: "sku()"
  nameWithType: "RedisResourceInner.sku()"
  summary: "Get the sku property: The SKU of the Redis cache to deploy."
  syntax: "public Sku sku()"
  returns:
    description: "the sku value."
    type: "<xref href=\"com.azure.resourcemanager.redis.models.Sku?alt=com.azure.resourcemanager.redis.models.Sku&text=Sku\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.sslPort()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.sslPort()"
  name: "sslPort()"
  nameWithType: "RedisResourceInner.sslPort()"
  summary: "Get the sslPort property: Redis SSL port."
  syntax: "public Integer sslPort()"
  returns:
    description: "the sslPort value."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.staticIp()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.staticIp()"
  name: "staticIp()"
  nameWithType: "RedisResourceInner.staticIp()"
  summary: "Get the staticIp property: Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default."
  syntax: "public String staticIp()"
  returns:
    description: "the staticIp value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.subnetId()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.subnetId()"
  name: "subnetId()"
  nameWithType: "RedisResourceInner.subnetId()"
  summary: "Get the subnetId property: The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}/Microsoft.\\{Network|ClassicNetwork\\}/VirtualNetworks/vnet1/subnets/subnet1."
  syntax: "public String subnetId()"
  returns:
    description: "the subnetId value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.tenantSettings()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.tenantSettings()"
  name: "tenantSettings()"
  nameWithType: "RedisResourceInner.tenantSettings()"
  summary: "Get the tenantSettings property: A dictionary of tenant settings."
  syntax: "public Map<String,String> tenantSettings()"
  returns:
    description: "the tenantSettings value."
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.validate()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.validate()"
  name: "validate()"
  nameWithType: "RedisResourceInner.validate()"
  summary: "Validates the instance."
  syntax: "public void validate()"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withEnableNonSslPort(java.lang.Boolean)"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withEnableNonSslPort(Boolean enableNonSslPort)"
  name: "withEnableNonSslPort(Boolean enableNonSslPort)"
  nameWithType: "RedisResourceInner.withEnableNonSslPort(Boolean enableNonSslPort)"
  summary: "Set the enableNonSslPort property: Specifies whether the non-ssl Redis server port (6379) is enabled."
  parameters:
  - description: "the enableNonSslPort value to set."
    name: "enableNonSslPort"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RedisResourceInner withEnableNonSslPort(Boolean enableNonSslPort)"
  returns:
    description: "the RedisResourceInner object itself."
    type: "<xref href=\"com.azure.resourcemanager.redis.fluent.models.RedisResourceInner?alt=com.azure.resourcemanager.redis.fluent.models.RedisResourceInner&text=RedisResourceInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withIdentity(com.azure.resourcemanager.redis.models.ManagedServiceIdentity)"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withIdentity(ManagedServiceIdentity identity)"
  name: "withIdentity(ManagedServiceIdentity identity)"
  nameWithType: "RedisResourceInner.withIdentity(ManagedServiceIdentity identity)"
  summary: "Set the identity property: The identity of the resource."
  parameters:
  - description: "the identity value to set."
    name: "identity"
    type: "<xref href=\"com.azure.resourcemanager.redis.models.ManagedServiceIdentity?alt=com.azure.resourcemanager.redis.models.ManagedServiceIdentity&text=ManagedServiceIdentity\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RedisResourceInner withIdentity(ManagedServiceIdentity identity)"
  returns:
    description: "the RedisResourceInner object itself."
    type: "<xref href=\"com.azure.resourcemanager.redis.fluent.models.RedisResourceInner?alt=com.azure.resourcemanager.redis.fluent.models.RedisResourceInner&text=RedisResourceInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withLocation(java.lang.String)"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withLocation(String location)"
  name: "withLocation(String location)"
  nameWithType: "RedisResourceInner.withLocation(String location)"
  overridden: "com.azure.core.management.Resource.withLocation(java.lang.String)"
  parameters:
  - name: "location"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RedisResourceInner withLocation(String location)"
  returns:
    type: "<xref href=\"com.azure.resourcemanager.redis.fluent.models.RedisResourceInner?alt=com.azure.resourcemanager.redis.fluent.models.RedisResourceInner&text=RedisResourceInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withMinimumTlsVersion(com.azure.resourcemanager.redis.models.TlsVersion)"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withMinimumTlsVersion(TlsVersion minimumTlsVersion)"
  name: "withMinimumTlsVersion(TlsVersion minimumTlsVersion)"
  nameWithType: "RedisResourceInner.withMinimumTlsVersion(TlsVersion minimumTlsVersion)"
  summary: "Set the minimumTlsVersion property: Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')."
  parameters:
  - description: "the minimumTlsVersion value to set."
    name: "minimumTlsVersion"
    type: "<xref href=\"com.azure.resourcemanager.redis.models.TlsVersion?alt=com.azure.resourcemanager.redis.models.TlsVersion&text=TlsVersion\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RedisResourceInner withMinimumTlsVersion(TlsVersion minimumTlsVersion)"
  returns:
    description: "the RedisResourceInner object itself."
    type: "<xref href=\"com.azure.resourcemanager.redis.fluent.models.RedisResourceInner?alt=com.azure.resourcemanager.redis.fluent.models.RedisResourceInner&text=RedisResourceInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withPublicNetworkAccess(com.azure.resourcemanager.redis.models.PublicNetworkAccess)"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess)"
  name: "withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess)"
  nameWithType: "RedisResourceInner.withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess)"
  summary: "Set the publicNetworkAccess property: Whether or not public endpoint access is allowed for this cache. Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'."
  parameters:
  - description: "the publicNetworkAccess value to set."
    name: "publicNetworkAccess"
    type: "<xref href=\"com.azure.resourcemanager.redis.models.PublicNetworkAccess?alt=com.azure.resourcemanager.redis.models.PublicNetworkAccess&text=PublicNetworkAccess\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RedisResourceInner withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess)"
  returns:
    description: "the RedisResourceInner object itself."
    type: "<xref href=\"com.azure.resourcemanager.redis.fluent.models.RedisResourceInner?alt=com.azure.resourcemanager.redis.fluent.models.RedisResourceInner&text=RedisResourceInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withRedisConfiguration(com.azure.resourcemanager.redis.models.RedisConfiguration)"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withRedisConfiguration(RedisConfiguration redisConfiguration)"
  name: "withRedisConfiguration(RedisConfiguration redisConfiguration)"
  nameWithType: "RedisResourceInner.withRedisConfiguration(RedisConfiguration redisConfiguration)"
  summary: "Set the redisConfiguration property: All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc."
  parameters:
  - description: "the redisConfiguration value to set."
    name: "redisConfiguration"
    type: "<xref href=\"com.azure.resourcemanager.redis.models.RedisConfiguration?alt=com.azure.resourcemanager.redis.models.RedisConfiguration&text=RedisConfiguration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RedisResourceInner withRedisConfiguration(RedisConfiguration redisConfiguration)"
  returns:
    description: "the RedisResourceInner object itself."
    type: "<xref href=\"com.azure.resourcemanager.redis.fluent.models.RedisResourceInner?alt=com.azure.resourcemanager.redis.fluent.models.RedisResourceInner&text=RedisResourceInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withRedisVersion(java.lang.String)"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withRedisVersion(String redisVersion)"
  name: "withRedisVersion(String redisVersion)"
  nameWithType: "RedisResourceInner.withRedisVersion(String redisVersion)"
  summary: "Set the redisVersion property: Redis version. Only major version will be used in PUT/PATCH request with current valid values: (4, 6)."
  parameters:
  - description: "the redisVersion value to set."
    name: "redisVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RedisResourceInner withRedisVersion(String redisVersion)"
  returns:
    description: "the RedisResourceInner object itself."
    type: "<xref href=\"com.azure.resourcemanager.redis.fluent.models.RedisResourceInner?alt=com.azure.resourcemanager.redis.fluent.models.RedisResourceInner&text=RedisResourceInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withReplicasPerMaster(java.lang.Integer)"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withReplicasPerMaster(Integer replicasPerMaster)"
  name: "withReplicasPerMaster(Integer replicasPerMaster)"
  nameWithType: "RedisResourceInner.withReplicasPerMaster(Integer replicasPerMaster)"
  summary: "Set the replicasPerMaster property: The number of replicas to be created per primary."
  parameters:
  - description: "the replicasPerMaster value to set."
    name: "replicasPerMaster"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RedisResourceInner withReplicasPerMaster(Integer replicasPerMaster)"
  returns:
    description: "the RedisResourceInner object itself."
    type: "<xref href=\"com.azure.resourcemanager.redis.fluent.models.RedisResourceInner?alt=com.azure.resourcemanager.redis.fluent.models.RedisResourceInner&text=RedisResourceInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withReplicasPerPrimary(java.lang.Integer)"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withReplicasPerPrimary(Integer replicasPerPrimary)"
  name: "withReplicasPerPrimary(Integer replicasPerPrimary)"
  nameWithType: "RedisResourceInner.withReplicasPerPrimary(Integer replicasPerPrimary)"
  summary: "Set the replicasPerPrimary property: The number of replicas to be created per primary."
  parameters:
  - description: "the replicasPerPrimary value to set."
    name: "replicasPerPrimary"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RedisResourceInner withReplicasPerPrimary(Integer replicasPerPrimary)"
  returns:
    description: "the RedisResourceInner object itself."
    type: "<xref href=\"com.azure.resourcemanager.redis.fluent.models.RedisResourceInner?alt=com.azure.resourcemanager.redis.fluent.models.RedisResourceInner&text=RedisResourceInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withShardCount(java.lang.Integer)"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withShardCount(Integer shardCount)"
  name: "withShardCount(Integer shardCount)"
  nameWithType: "RedisResourceInner.withShardCount(Integer shardCount)"
  summary: "Set the shardCount property: The number of shards to be created on a Premium Cluster Cache."
  parameters:
  - description: "the shardCount value to set."
    name: "shardCount"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RedisResourceInner withShardCount(Integer shardCount)"
  returns:
    description: "the RedisResourceInner object itself."
    type: "<xref href=\"com.azure.resourcemanager.redis.fluent.models.RedisResourceInner?alt=com.azure.resourcemanager.redis.fluent.models.RedisResourceInner&text=RedisResourceInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withSku(com.azure.resourcemanager.redis.models.Sku)"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withSku(Sku sku)"
  name: "withSku(Sku sku)"
  nameWithType: "RedisResourceInner.withSku(Sku sku)"
  summary: "Set the sku property: The SKU of the Redis cache to deploy."
  parameters:
  - description: "the sku value to set."
    name: "sku"
    type: "<xref href=\"com.azure.resourcemanager.redis.models.Sku?alt=com.azure.resourcemanager.redis.models.Sku&text=Sku\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RedisResourceInner withSku(Sku sku)"
  returns:
    description: "the RedisResourceInner object itself."
    type: "<xref href=\"com.azure.resourcemanager.redis.fluent.models.RedisResourceInner?alt=com.azure.resourcemanager.redis.fluent.models.RedisResourceInner&text=RedisResourceInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withStaticIp(java.lang.String)"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withStaticIp(String staticIp)"
  name: "withStaticIp(String staticIp)"
  nameWithType: "RedisResourceInner.withStaticIp(String staticIp)"
  summary: "Set the staticIp property: Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default."
  parameters:
  - description: "the staticIp value to set."
    name: "staticIp"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RedisResourceInner withStaticIp(String staticIp)"
  returns:
    description: "the RedisResourceInner object itself."
    type: "<xref href=\"com.azure.resourcemanager.redis.fluent.models.RedisResourceInner?alt=com.azure.resourcemanager.redis.fluent.models.RedisResourceInner&text=RedisResourceInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withSubnetId(java.lang.String)"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withSubnetId(String subnetId)"
  name: "withSubnetId(String subnetId)"
  nameWithType: "RedisResourceInner.withSubnetId(String subnetId)"
  summary: "Set the subnetId property: The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroupName\\}/Microsoft.\\{Network|ClassicNetwork\\}/VirtualNetworks/vnet1/subnets/subnet1."
  parameters:
  - description: "the subnetId value to set."
    name: "subnetId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RedisResourceInner withSubnetId(String subnetId)"
  returns:
    description: "the RedisResourceInner object itself."
    type: "<xref href=\"com.azure.resourcemanager.redis.fluent.models.RedisResourceInner?alt=com.azure.resourcemanager.redis.fluent.models.RedisResourceInner&text=RedisResourceInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withTags(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withTags(Map<String,String> tags)"
  name: "withTags(Map<String,String> tags)"
  nameWithType: "RedisResourceInner.withTags(Map<String,String> tags)"
  overridden: "com.azure.core.management.Resource.withTags(java.util.Map<java.lang.String,java.lang.String>)"
  parameters:
  - name: "tags"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public RedisResourceInner withTags(Map<String,String> tags)"
  returns:
    type: "<xref href=\"com.azure.resourcemanager.redis.fluent.models.RedisResourceInner?alt=com.azure.resourcemanager.redis.fluent.models.RedisResourceInner&text=RedisResourceInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withTenantSettings(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withTenantSettings(Map<String,String> tenantSettings)"
  name: "withTenantSettings(Map<String,String> tenantSettings)"
  nameWithType: "RedisResourceInner.withTenantSettings(Map<String,String> tenantSettings)"
  summary: "Set the tenantSettings property: A dictionary of tenant settings."
  parameters:
  - description: "the tenantSettings value to set."
    name: "tenantSettings"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public RedisResourceInner withTenantSettings(Map<String,String> tenantSettings)"
  returns:
    description: "the RedisResourceInner object itself."
    type: "<xref href=\"com.azure.resourcemanager.redis.fluent.models.RedisResourceInner?alt=com.azure.resourcemanager.redis.fluent.models.RedisResourceInner&text=RedisResourceInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withZones(java.util.List<java.lang.String>)"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.withZones(List<String> zones)"
  name: "withZones(List<String> zones)"
  nameWithType: "RedisResourceInner.withZones(List<String> zones)"
  summary: "Set the zones property: A list of availability zones denoting where the resource needs to come from."
  parameters:
  - description: "the zones value to set."
    name: "zones"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public RedisResourceInner withZones(List<String> zones)"
  returns:
    description: "the RedisResourceInner object itself."
    type: "<xref href=\"com.azure.resourcemanager.redis.fluent.models.RedisResourceInner?alt=com.azure.resourcemanager.redis.fluent.models.RedisResourceInner&text=RedisResourceInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.zones()"
  fullName: "com.azure.resourcemanager.redis.fluent.models.RedisResourceInner.zones()"
  name: "zones()"
  nameWithType: "RedisResourceInner.zones()"
  summary: "Get the zones property: A list of availability zones denoting where the resource needs to come from."
  syntax: "public List<String> zones()"
  returns:
    description: "the zones value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
metadata: {}
package: "com.azure.resourcemanager.redis.fluent.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-redis:2.14.0
