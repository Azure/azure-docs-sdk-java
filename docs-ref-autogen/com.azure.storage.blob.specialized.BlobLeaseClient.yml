### YamlMime:ManagedReference
items:
- uid: com.azure.storage.blob.specialized.BlobLeaseClient
  id: BlobLeaseClient
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized
  children:
  - com.azure.storage.blob.specialized.BlobLeaseClient.acquireLease(int)
  - com.azure.storage.blob.specialized.BlobLeaseClient.acquireLeaseWithResponse(int,com.azure.core.http.RequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobLeaseClient.breakLease()
  - com.azure.storage.blob.specialized.BlobLeaseClient.breakLeaseWithResponse(java.lang.Integer,com.azure.core.http.RequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobLeaseClient.changeLease(java.lang.String)
  - com.azure.storage.blob.specialized.BlobLeaseClient.changeLeaseWithResponse(java.lang.String,com.azure.core.http.RequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobLeaseClient.getAccountName()
  - com.azure.storage.blob.specialized.BlobLeaseClient.getLeaseId()
  - com.azure.storage.blob.specialized.BlobLeaseClient.getResourceUrl()
  - com.azure.storage.blob.specialized.BlobLeaseClient.releaseLease()
  - com.azure.storage.blob.specialized.BlobLeaseClient.releaseLeaseWithResponse(com.azure.core.http.RequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobLeaseClient.renewLease()
  - com.azure.storage.blob.specialized.BlobLeaseClient.renewLeaseWithResponse(com.azure.core.http.RequestConditions,java.time.Duration,com.azure.core.util.Context)
  langs:
  - java
  name: BlobLeaseClient
  nameWithType: BlobLeaseClient
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient
  type: Class
  package: com.azure.storage.blob.specialized
  summary: >-
    This class provides a client that contains all the leasing operations for <xref uid="com.azure.storage.blob.BlobContainerClient" data-throw-if-not-resolved="false">containers</xref> and <xref uid="com.azure.storage.blob.BlobClient" data-throw-if-not-resolved="false">blobs</xref>. This client acts as a supplement to those clients and only handles leasing operations.


    **Instantiating a BlobLeaseClient**


    ```java

    BlobLeaseClient blobLeaseClient = new BlobLeaseClientBuilder()
         .blobClient(blobClient)
         .buildClient();
    ```


    ```java

    BlobLeaseClient blobLeaseClient = new BlobLeaseClientBuilder()
         .containerClient(blobContainerClient)
         .buildClient();
    ```


    View <xref uid="com.azure.storage.blob.specialized.BlobLeaseClientBuilder" data-throw-if-not-resolved="false">this</xref> for additional ways to construct the client.


    For more information about leasing see the [container leasing][] or [blob leasing][] documentation.



    [container leasing]: https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container

    [blob leasing]: https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
  syntax:
    content: public final class BlobLeaseClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.BlobLeaseClient(com.azure.storage.blob.specialized.BlobLeaseAsyncClient)
  id: BlobLeaseClient(com.azure.storage.blob.specialized.BlobLeaseAsyncClient)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlobLeaseClient
  langs:
  - java
  name: BlobLeaseClient(BlobLeaseAsyncClient client)
  nameWithType: BlobLeaseClient.BlobLeaseClient(BlobLeaseAsyncClient client)
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.BlobLeaseClient(BlobLeaseAsyncClient client)
  overload: com.azure.storage.blob.specialized.BlobLeaseClient.BlobLeaseClient*
  type: Constructor
  package: com.azure.storage.blob.specialized
  syntax:
    content: " BlobLeaseClient(BlobLeaseAsyncClient client)"
    parameters:
    - id: client
      type: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.acquireLease(int)
  id: acquireLease(int)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlobLeaseClient
  langs:
  - java
  name: acquireLease(int duration)
  nameWithType: BlobLeaseClient.acquireLease(int duration)
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.acquireLease(int duration)
  overload: com.azure.storage.blob.specialized.BlobLeaseClient.acquireLease*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Acquires a lease for write and delete operations. The lease duration must be between 15 to 60 seconds or -1 for an infinite duration.


    **Code Samples**


    ```java

    System.out.printf("Lease ID is %s%n", client.acquireLease(60));

    ```
  syntax:
    content: public String acquireLease(int duration)
    parameters:
    - id: duration
      type: int
      description: The duration of the lease between 15 to 60 seconds or -1 for an infinite duration.
    return:
      type: java.lang.String
      description: The lease ID.
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.acquireLeaseWithResponse(int,com.azure.core.http.RequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: acquireLeaseWithResponse(int,com.azure.core.http.RequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlobLeaseClient
  langs:
  - java
  name: acquireLeaseWithResponse(int duration, RequestConditions modifiedRequestConditions, Duration timeout, Context context)
  nameWithType: BlobLeaseClient.acquireLeaseWithResponse(int duration, RequestConditions modifiedRequestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.acquireLeaseWithResponse(int duration, RequestConditions modifiedRequestConditions, Duration timeout, Context context)
  overload: com.azure.storage.blob.specialized.BlobLeaseClient.acquireLeaseWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Acquires a lease for write and delete operations. The lease duration must be between 15 to 60 seconds or -1 for an infinite duration.\n\n**Code Samples**\n\n```java\nRequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfModifiedSince(OffsetDateTime.now().minusDays(3));\n \n System.out.printf(\"Lease ID is %s%n\", client\n     .acquireLeaseWithResponse(60, modifiedRequestConditions, timeout, new Context(key, value))\n     .getValue());\n```"
  syntax:
    content: public Response<String> acquireLeaseWithResponse(int duration, RequestConditions modifiedRequestConditions, Duration timeout, Context context)
    parameters:
    - id: duration
      type: int
      description: The duration of the lease between 15 to 60 seconds or -1 for an infinite duration.
    - id: modifiedRequestConditions
      type: com.azure.core.http.RequestConditions
      description: >-
        Standard HTTP Access conditions related to the modification of data. ETag and
         LastModifiedTime are used to construct conditions related to when the resource was changed relative to the given
         request. The request will fail if the specified condition is not satisfied.
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.String>
      description: The lease ID.
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.breakLease()
  id: breakLease()
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlobLeaseClient
  langs:
  - java
  name: breakLease()
  nameWithType: BlobLeaseClient.breakLease()
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.breakLease()
  overload: com.azure.storage.blob.specialized.BlobLeaseClient.breakLease*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Breaks the previously acquired lease, if it exists.


    **Code Samples**


    ```java

    System.out.printf("The broken lease has %d seconds remaining on the lease", client.breakLease());

    ```
  syntax:
    content: public Integer breakLease()
    return:
      type: java.lang.Integer
      description: The remaining time in the broken lease in seconds.
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.breakLeaseWithResponse(java.lang.Integer,com.azure.core.http.RequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: breakLeaseWithResponse(java.lang.Integer,com.azure.core.http.RequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlobLeaseClient
  langs:
  - java
  name: breakLeaseWithResponse(Integer breakPeriodInSeconds, RequestConditions modifiedRequestConditions, Duration timeout, Context context)
  nameWithType: BlobLeaseClient.breakLeaseWithResponse(Integer breakPeriodInSeconds, RequestConditions modifiedRequestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.breakLeaseWithResponse(Integer breakPeriodInSeconds, RequestConditions modifiedRequestConditions, Duration timeout, Context context)
  overload: com.azure.storage.blob.specialized.BlobLeaseClient.breakLeaseWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Breaks the previously acquired lease, if it exists.\n\nIf `null` is passed for `breakPeriodInSeconds` a fixed duration lease will break after the remaining lease period elapses and an infinite lease will break immediately.\n\n**Code Samples**\n\n```java\nInteger retainLeaseInSeconds = 5;\n RequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n \n System.out.printf(\"The broken lease has %d seconds remaining on the lease\", client\n     .breakLeaseWithResponse(retainLeaseInSeconds, modifiedRequestConditions, timeout, new Context(key, value))\n     .getValue());\n```"
  syntax:
    content: public Response<Integer> breakLeaseWithResponse(Integer breakPeriodInSeconds, RequestConditions modifiedRequestConditions, Duration timeout, Context context)
    parameters:
    - id: breakPeriodInSeconds
      type: java.lang.Integer
      description: >-
        An optional duration, between 0 and 60 seconds, that the lease should continue before
         it is broken. If the break period is longer than the time remaining on the lease the remaining time on the lease
         is used. A new lease will not be available before the break period has expired, but the lease may be held for
         longer than the break period.
    - id: modifiedRequestConditions
      type: com.azure.core.http.RequestConditions
      description: >-
        Standard HTTP Access conditions related to the modification of data. ETag and
         LastModifiedTime are used to construct conditions related to when the resource was changed relative to the given
         request. The request will fail if the specified condition is not satisfied.
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Integer>
      description: The remaining time in the broken lease in seconds.
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.changeLease(java.lang.String)
  id: changeLease(java.lang.String)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlobLeaseClient
  langs:
  - java
  name: changeLease(String proposedId)
  nameWithType: BlobLeaseClient.changeLease(String proposedId)
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.changeLease(String proposedId)
  overload: com.azure.storage.blob.specialized.BlobLeaseClient.changeLease*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Changes the lease ID.


    **Code Samples**


    ```java

    System.out.printf("Changed lease ID is %s%n", client.changeLease("proposedId"));

    ```
  syntax:
    content: public String changeLease(String proposedId)
    parameters:
    - id: proposedId
      type: java.lang.String
      description: A new lease ID in a valid GUID format.
    return:
      type: java.lang.String
      description: The new lease ID.
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.changeLeaseWithResponse(java.lang.String,com.azure.core.http.RequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: changeLeaseWithResponse(java.lang.String,com.azure.core.http.RequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlobLeaseClient
  langs:
  - java
  name: changeLeaseWithResponse(String proposedId, RequestConditions modifiedRequestConditions, Duration timeout, Context context)
  nameWithType: BlobLeaseClient.changeLeaseWithResponse(String proposedId, RequestConditions modifiedRequestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.changeLeaseWithResponse(String proposedId, RequestConditions modifiedRequestConditions, Duration timeout, Context context)
  overload: com.azure.storage.blob.specialized.BlobLeaseClient.changeLeaseWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Changes the lease ID.\n\n**Code Samples**\n\n```java\nRequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n \n System.out.printf(\"Changed lease ID is %s%n\",\n     client.changeLeaseWithResponse(\"proposedId\", modifiedRequestConditions, timeout, new Context(key, value))\n         .getValue());\n```"
  syntax:
    content: public Response<String> changeLeaseWithResponse(String proposedId, RequestConditions modifiedRequestConditions, Duration timeout, Context context)
    parameters:
    - id: proposedId
      type: java.lang.String
      description: A new lease ID in a valid GUID format.
    - id: modifiedRequestConditions
      type: com.azure.core.http.RequestConditions
      description: >-
        Standard HTTP Access conditions related to the modification of data. ETag and
         LastModifiedTime are used to construct conditions related to when the resource was changed relative to the given
         request. The request will fail if the specified condition is not satisfied.
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.String>
      description: The new lease ID.
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.getAccountName()
  id: getAccountName()
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlobLeaseClient
  langs:
  - java
  name: getAccountName()
  nameWithType: BlobLeaseClient.getAccountName()
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.getAccountName()
  overload: com.azure.storage.blob.specialized.BlobLeaseClient.getAccountName*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: Get associated account name.
  syntax:
    content: public String getAccountName()
    return:
      type: java.lang.String
      description: account name associated with this storage resource.
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.getLeaseId()
  id: getLeaseId()
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlobLeaseClient
  langs:
  - java
  name: getLeaseId()
  nameWithType: BlobLeaseClient.getLeaseId()
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.getLeaseId()
  overload: com.azure.storage.blob.specialized.BlobLeaseClient.getLeaseId*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: Get the lease ID for this lease.
  syntax:
    content: public String getLeaseId()
    return:
      type: java.lang.String
      description: the lease ID.
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.getResourceUrl()
  id: getResourceUrl()
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlobLeaseClient
  langs:
  - java
  name: getResourceUrl()
  nameWithType: BlobLeaseClient.getResourceUrl()
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.getResourceUrl()
  overload: com.azure.storage.blob.specialized.BlobLeaseClient.getResourceUrl*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Gets the <xref uid="" data-throw-if-not-resolved="false">URL</xref> of the lease client.


    The lease will either be a container or blob URL depending on which the lease client is associated.
  syntax:
    content: public String getResourceUrl()
    return:
      type: java.lang.String
      description: URL of the lease client.
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.releaseLease()
  id: releaseLease()
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlobLeaseClient
  langs:
  - java
  name: releaseLease()
  nameWithType: BlobLeaseClient.releaseLease()
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.releaseLease()
  overload: com.azure.storage.blob.specialized.BlobLeaseClient.releaseLease*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Releases the previously acquired lease.


    **Code Samples**


    ```java

    client.releaseLease();
     System.out.println("Release lease completed");
    ```
  syntax:
    content: public void releaseLease()
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.releaseLeaseWithResponse(com.azure.core.http.RequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: releaseLeaseWithResponse(com.azure.core.http.RequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlobLeaseClient
  langs:
  - java
  name: releaseLeaseWithResponse(RequestConditions modifiedRequestConditions, Duration timeout, Context context)
  nameWithType: BlobLeaseClient.releaseLeaseWithResponse(RequestConditions modifiedRequestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.releaseLeaseWithResponse(RequestConditions modifiedRequestConditions, Duration timeout, Context context)
  overload: com.azure.storage.blob.specialized.BlobLeaseClient.releaseLeaseWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Releases the previously acquired lease.\n\n**Code Samples**\n\n```java\nRequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n \n System.out.printf(\"Release lease completed with status %d%n\",\n     client.releaseLeaseWithResponse(modifiedRequestConditions, timeout, new Context(key, value))\n         .getStatusCode());\n```"
  syntax:
    content: public Response<Void> releaseLeaseWithResponse(RequestConditions modifiedRequestConditions, Duration timeout, Context context)
    parameters:
    - id: modifiedRequestConditions
      type: com.azure.core.http.RequestConditions
      description: >-
        Standard HTTP Access conditions related to the modification of data. ETag and
         LastModifiedTime are used to construct conditions related to when the resource was changed relative to the given
         request. The request will fail if the specified condition is not satisfied.
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response containing status code and HTTP headers.
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.renewLease()
  id: renewLease()
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlobLeaseClient
  langs:
  - java
  name: renewLease()
  nameWithType: BlobLeaseClient.renewLease()
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.renewLease()
  overload: com.azure.storage.blob.specialized.BlobLeaseClient.renewLease*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Renews the previously acquired lease.


    **Code Samples**


    ```java

    System.out.printf("Renewed lease ID is %s%n", client.renewLease());

    ```
  syntax:
    content: public String renewLease()
    return:
      type: java.lang.String
      description: The renewed lease ID.
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.renewLeaseWithResponse(com.azure.core.http.RequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: renewLeaseWithResponse(com.azure.core.http.RequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlobLeaseClient
  langs:
  - java
  name: renewLeaseWithResponse(RequestConditions modifiedRequestConditions, Duration timeout, Context context)
  nameWithType: BlobLeaseClient.renewLeaseWithResponse(RequestConditions modifiedRequestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.renewLeaseWithResponse(RequestConditions modifiedRequestConditions, Duration timeout, Context context)
  overload: com.azure.storage.blob.specialized.BlobLeaseClient.renewLeaseWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Renews the previously-acquired lease.\n\n**Code Samples**\n\n```java\nRequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n \n System.out.printf(\"Renewed lease ID is %s%n\",\n     client.renewLeaseWithResponse(modifiedRequestConditions, timeout, new Context(key, value))\n         .getValue());\n```"
  syntax:
    content: public Response<String> renewLeaseWithResponse(RequestConditions modifiedRequestConditions, Duration timeout, Context context)
    parameters:
    - id: modifiedRequestConditions
      type: com.azure.core.http.RequestConditions
      description: >-
        Standard HTTP Access conditions related to the modification of data. ETag and
         LastModifiedTime are used to construct conditions related to when the resource was changed relative to the given
         request. The request will fail if the specified condition is not satisfied.
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.String>
      description: The renewed lease ID.
references:
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  name: BlobLeaseAsyncClient
  nameWithType: BlobLeaseAsyncClient
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.BlobLeaseClient*
  name: BlobLeaseClient
  nameWithType: BlobLeaseClient.BlobLeaseClient
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.BlobLeaseClient
  package: com.azure.storage.blob.specialized
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.getResourceUrl*
  name: getResourceUrl
  nameWithType: BlobLeaseClient.getResourceUrl
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.getResourceUrl
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.getLeaseId*
  name: getLeaseId
  nameWithType: BlobLeaseClient.getLeaseId
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.getLeaseId
  package: com.azure.storage.blob.specialized
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.acquireLease*
  name: acquireLease
  nameWithType: BlobLeaseClient.acquireLease
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.acquireLease
  package: com.azure.storage.blob.specialized
- uid: com.azure.core.http.RequestConditions
  spec.java:
  - uid: com.azure.core.http.RequestConditions
    name: RequestConditions
    fullName: com.azure.core.http.RequestConditions
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: com.azure.core.util.Context
  spec.java:
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
- uid: com.azure.core.http.rest.Response<java.lang.String>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.acquireLeaseWithResponse*
  name: acquireLeaseWithResponse
  nameWithType: BlobLeaseClient.acquireLeaseWithResponse
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.acquireLeaseWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.renewLease*
  name: renewLease
  nameWithType: BlobLeaseClient.renewLease
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.renewLease
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.renewLeaseWithResponse*
  name: renewLeaseWithResponse
  nameWithType: BlobLeaseClient.renewLeaseWithResponse
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.renewLeaseWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.releaseLease*
  name: releaseLease
  nameWithType: BlobLeaseClient.releaseLease
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.releaseLease
  package: com.azure.storage.blob.specialized
- uid: com.azure.core.http.rest.Response<java.lang.Void>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.releaseLeaseWithResponse*
  name: releaseLeaseWithResponse
  nameWithType: BlobLeaseClient.releaseLeaseWithResponse
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.releaseLeaseWithResponse
  package: com.azure.storage.blob.specialized
- uid: java.lang.Integer
  spec.java:
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.breakLease*
  name: breakLease
  nameWithType: BlobLeaseClient.breakLease
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.breakLease
  package: com.azure.storage.blob.specialized
- uid: com.azure.core.http.rest.Response<java.lang.Integer>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.breakLeaseWithResponse*
  name: breakLeaseWithResponse
  nameWithType: BlobLeaseClient.breakLeaseWithResponse
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.breakLeaseWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.changeLease*
  name: changeLease
  nameWithType: BlobLeaseClient.changeLease
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.changeLease
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.changeLeaseWithResponse*
  name: changeLeaseWithResponse
  nameWithType: BlobLeaseClient.changeLeaseWithResponse
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.changeLeaseWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.BlobLeaseClient.getAccountName*
  name: getAccountName
  nameWithType: BlobLeaseClient.getAccountName
  fullName: com.azure.storage.blob.specialized.BlobLeaseClient.getAccountName
  package: com.azure.storage.blob.specialized
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
