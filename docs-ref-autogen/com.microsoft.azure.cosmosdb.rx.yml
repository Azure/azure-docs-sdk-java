### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.cosmosdb.rx
  id: rx
  children:
  - com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient
  - com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder
  href: com.microsoft.azure.cosmosdb.rx.yml
  langs:
  - java
  name: com.microsoft.azure.cosmosdb.rx
  nameWithType: com.microsoft.azure.cosmosdb.rx
  fullName: com.microsoft.azure.cosmosdb.rx
  type: Namespace
  source:
    remote:
      path: sdk/src/main/java/com/microsoft/azure/cosmosdb/rx/AsyncDocumentClient.java
      branch: master
      repo: https://github.com/Azure/azure-cosmosdb-java
    path: sdk/src/main/java/com/microsoft/azure/cosmosdb/rx/AsyncDocumentClient.java
    startLine: 22
  summary: "<p>This package provides Rx interfaces for interacting with Azure Cosmos DB. </p>"
  syntax:
    content: package com.microsoft.azure.cosmosdb.rx
references:
- uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient
  parent: com.microsoft.azure.cosmosdb.rx
  href: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.yml
  name: AsyncDocumentClient
  nameWithType: AsyncDocumentClient
  fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient
  type: Interface
  summary: "<p>Provides a client-side logical representation of the Azure Cosmos DB database service. This async client is used to configure and execute requests against the service.</p>\r\n<p>\r\n  <xref uid=\"com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AsyncDocumentClient\"></xref> async APIs return <a href=\"https://github.com/ReactiveX/RxJava\">rxJava</a>'s<code>Observable \r\n    </code> , and so you can use rxJava <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Observable\"></xref> functionality. <b>The async <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Observable\"></xref> based APIs perform the requested operation only after subscription.</b></p>\r\n<p>The service client encapsulates the endpoint and credentials used to access the Cosmos DB service. </p>\r\n<p>To instantiate you can use the <xref uid=\"com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Builder\"></xref><pre><code>ConnectionPolicy connectionPolicy = new ConnectionPolicy();\r\n    connectionPolicy.setConnectionMode(ConnectionMode.Direct);\r\n    AsyncDocumentClient client = new AsyncDocumentClient.Builder()\r\n            .withServiceEndpoint(serviceEndpoint)\r\n            .withMasterKeyOrResourceToken(masterKey)\r\n            .withConnectionPolicy(connectionPolicy)\r\n            .withConsistencyLevel(ConsistencyLevel.Session)\r\n            .build();\r\n    </code></pre></p>"
  syntax:
    content: public interface AsyncDocumentClient
- uid: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder
  parent: com.microsoft.azure.cosmosdb.rx
  href: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder.yml
  name: AsyncDocumentClient.Builder
  nameWithType: AsyncDocumentClient.Builder
  fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder
  type: Class
  summary: "<p>Helper class to build <xref uid=\"com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AsyncDocumentClient\"></xref> instances as logical representation of the Azure Cosmos DB database service.</p>\r\n<p>\r\n  <pre>\r\n    <code>ConnectionPolicy connectionPolicy = new ConnectionPolicy();\r\n    connectionPolicy.setConnectionMode(ConnectionMode.Direct);\r\n    AsyncDocumentClient client = new AsyncDocumentClient.Builder()\r\n            .withServiceEndpoint(serviceEndpoint)\r\n            .withMasterKeyOrResourceToken(masterKey)\r\n            .withConnectionPolicy(connectionPolicy)\r\n            .withConsistencyLevel(ConsistencyLevel.Session)\r\n            .build();\r\n    </code>\r\n  </pre>\r\n</p>"
  syntax:
    content: public class Builder
