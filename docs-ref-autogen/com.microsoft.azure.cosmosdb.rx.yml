### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.cosmosdb.rx
  id: rx
  children:
  - com.microsoft.azure.cosmosdb.rx._async_document_client
  - com.microsoft.azure.cosmosdb.rx._async_document_client._builder
  href: com.microsoft.azure.cosmosdb.rx.yml
  langs:
  - java
  name: com.microsoft.azure.cosmosdb.rx
  nameWithType: com.microsoft.azure.cosmosdb.rx
  fullName: com.microsoft.azure.cosmosdb.rx
  type: Namespace
  source:
    remote:
      path: sdk/src/main/java/com/microsoft/azure/cosmosdb/rx/AsyncDocumentClient.java
      branch: master
      repo: https://github.com/Azure/azure-cosmosdb-java
    path: sdk/src/main/java/com/microsoft/azure/cosmosdb/rx/AsyncDocumentClient.java
    startLine: 22
  summary: "<p>This package provides Rx interfaces for interacting with Azure Cosmos DB. </p>"
  syntax:
    content: package com.microsoft.azure.cosmosdb.rx
references:
- uid: com.microsoft.azure.cosmosdb.rx._async_document_client
  parent: com.microsoft.azure.cosmosdb.rx
  href: com.microsoft.azure.cosmosdb.rx._async_document_client.yml
  name: AsyncDocumentClient
  nameWithType: AsyncDocumentClient
  fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient
  type: Interface
  summary: >-
    <p>Provides a client-side logical representation of the Azure Cosmos DB database service. This async client is used to configure and execute requests against the service.</p>

    <p>

      <xref uid="com.microsoft.azure.cosmosdb.rx._async_document_client" data-throw-if-not-resolved="false">AsyncDocumentClient</xref> async APIs return <a href="https://github.com/ReactiveX/RxJava">rxJava</a>'s<code>Observable 

        </code> , and so you can use rxJava <xref uid="" data-throw-if-not-resolved="false">Observable</xref> functionalities. <b>The async <xref uid="" data-throw-if-not-resolved="false">Observable</xref> based APIs perform the requested operation only after subscription.</b></p>

    <p>The service client encapsulates the endpoint and credentials used to access the Cosmos DB service.</p>

    <p>To instantiate you can use the <xref uid="com.microsoft.azure.cosmosdb.rx._async_document_client._builder" data-throw-if-not-resolved="false">Builder</xref><pre><code>AsyncDocumentClient client = new AsyncDocumentClient.Builder()

                .withServiceEndpoint(serviceEndpoint)

                .withMasterKey(masterKey)

                .withConnectionPolicy(ConnectionPolicy.GetDefault())

                .withConsistencyLevel(ConsistencyLevel.Session)

                .build();

        </code></pre></p>
  syntax:
    content: public interface AsyncDocumentClient
- uid: com.microsoft.azure.cosmosdb.rx._async_document_client._builder
  parent: com.microsoft.azure.cosmosdb.rx
  href: com.microsoft.azure.cosmosdb.rx._async_document_client._builder.yml
  name: AsyncDocumentClient.Builder
  nameWithType: AsyncDocumentClient.Builder
  fullName: com.microsoft.azure.cosmosdb.rx.AsyncDocumentClient.Builder
  type: Class
  summary: >-
    <p>Helper class to build <xref uid="com.microsoft.azure.cosmosdb.rx._async_document_client" data-throw-if-not-resolved="false">AsyncDocumentClient</xref> instances as logical representation of the Azure Cosmos DB database service.</p>

    <p>

      <pre>

        <code>AsyncDocumentClient client = new AsyncDocumentClient.Builder()

                .withServiceEndpoint(serviceEndpoint)

                .withMasterKeyOrResourceToken(masterKeyOrResourceToken)

                .withConnectionPolicy(ConnectionPolicy.GetDefault())

                .withConsistencyLevel(ConsistencyLevel.Session)

                .build();

        </code>

      </pre>

    </p>
  syntax:
    content: public class Builder
