### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.eventhubs.impl._reactor_dispatcher
  id: _reactor_dispatcher
  parent: com.microsoft.azure.eventhubs.impl
  children:
  - com.microsoft.azure.eventhubs.impl._reactor_dispatcher.invoke(final DispatchHandler)
  - com.microsoft.azure.eventhubs.impl._reactor_dispatcher.invoke(final int,final DispatchHandler)
  - com.microsoft.azure.eventhubs.impl._reactor_dispatcher.ReactorDispatcher(final Reactor)
  href: com.microsoft.azure.eventhubs.impl._reactor_dispatcher.yml
  langs:
  - java
  name: ReactorDispatcher
  nameWithType: ReactorDispatcher
  fullName: com.microsoft.azure.eventhubs.impl.ReactorDispatcher
  type: Class
  source:
    remote: &o0
      path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/ReactorDispatcher.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-java
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/ReactorDispatcher.java
    startLine: 29
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    <p>

      <xref uid="" data-throw-if-not-resolved="false">Reactor</xref> is not thread-safe - all calls to <xref uid="" data-throw-if-not-resolved="false">Proton</xref> API's should be - on the Reactor Thread. <xref uid="" data-throw-if-not-resolved="false">Reactor</xref> works out-of-box for all event driven API - ex: onReceive - which could raise upon onSocketRead. <xref uid="" data-throw-if-not-resolved="false">Reactor</xref> didn't support API's like Send() out-of-box - which could potentially run on different thread to that of Reactor. So, the following utility class is used to generate an Event to hook into <xref uid="" data-throw-if-not-resolved="false">Reactor</xref>'s event delegation pattern. It uses a <xref uid="" data-throw-if-not-resolved="false">Pipe</xref> as the IO on which Reactor Listens to. Cardinality: multiple <xref uid="com.microsoft.azure.eventhubs.impl._reactor_dispatcher" data-throw-if-not-resolved="false">ReactorDispatcher</xref>'s could be attached to 1 <xref uid="" data-throw-if-not-resolved="false">Reactor</xref>. Each <xref uid="com.microsoft.azure.eventhubs.impl._reactor_dispatcher" data-throw-if-not-resolved="false">ReactorDispatcher</xref> should be initialized Synchronously - as it calls API in <xref uid="" data-throw-if-not-resolved="false">Reactor</xref> which is not thread-safe. </p>
  syntax: &o1
    content: public class ReactorDispatcher
  inheritance:
  - java.lang.Object
- uid: com.microsoft.azure.eventhubs.impl._reactor_dispatcher.invoke(final DispatchHandler)
  id: invoke(final DispatchHandler)
  parent: com.microsoft.azure.eventhubs.impl._reactor_dispatcher
  href: com.microsoft.azure.eventhubs.impl._reactor_dispatcher.yml
  langs:
  - java
  name: invoke(final DispatchHandler timerCallback)
  nameWithType: ReactorDispatcher.invoke(final DispatchHandler timerCallback)
  fullName: void com.microsoft.azure.eventhubs.impl.ReactorDispatcher.invoke(final DispatchHandler timerCallback)
  overload: com.microsoft.azure.eventhubs.impl._reactor_dispatcher.invoke*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/ReactorDispatcher.java
    startLine: 55
  package: com.microsoft.azure.eventhubs.impl
  syntax:
    content: public void invoke(final DispatchHandler timerCallback)
    parameters:
    - id: timerCallback
      type: 93de0ef9com.microsoft.azure.eventhubs.impl._dispatch_handler
- uid: com.microsoft.azure.eventhubs.impl._reactor_dispatcher.invoke(final int,final DispatchHandler)
  id: invoke(final int,final DispatchHandler)
  parent: com.microsoft.azure.eventhubs.impl._reactor_dispatcher
  href: com.microsoft.azure.eventhubs.impl._reactor_dispatcher.yml
  langs:
  - java
  name: invoke(final int delay, final DispatchHandler timerCallback)
  nameWithType: ReactorDispatcher.invoke(final int delay, final DispatchHandler timerCallback)
  fullName: void com.microsoft.azure.eventhubs.impl.ReactorDispatcher.invoke(final int delay, final DispatchHandler timerCallback)
  overload: com.microsoft.azure.eventhubs.impl._reactor_dispatcher.invoke*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/ReactorDispatcher.java
    startLine: 62
  package: com.microsoft.azure.eventhubs.impl
  syntax:
    content: public void invoke(final int delay, final DispatchHandler timerCallback)
    parameters:
    - id: delay
      type: cd225469
    - id: timerCallback
      type: 93de0ef9com.microsoft.azure.eventhubs.impl._dispatch_handler
- uid: com.microsoft.azure.eventhubs.impl._reactor_dispatcher.ReactorDispatcher(final Reactor)
  id: ReactorDispatcher(final Reactor)
  parent: com.microsoft.azure.eventhubs.impl._reactor_dispatcher
  href: com.microsoft.azure.eventhubs.impl._reactor_dispatcher.yml
  langs:
  - java
  name: ReactorDispatcher(final Reactor reactor)
  nameWithType: ReactorDispatcher.ReactorDispatcher(final Reactor reactor)
  fullName: com.microsoft.azure.eventhubs.impl.ReactorDispatcher.ReactorDispatcher(final Reactor reactor)
  overload: com.microsoft.azure.eventhubs.impl._reactor_dispatcher.ReactorDispatcher*
  type: Constructor
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/ReactorDispatcher.java
    startLine: 35
  package: com.microsoft.azure.eventhubs.impl
  syntax:
    content: public ReactorDispatcher(final Reactor reactor)
    parameters:
    - id: reactor
      type: 723aaf67
references:
- uid: 723aaf67
  spec.java:
  - name: final Reactor
    fullName: final Reactor
- uid: com.microsoft.azure.eventhubs.impl._reactor_dispatcher.ReactorDispatcher*
  name: ReactorDispatcher
  nameWithType: ReactorDispatcher.ReactorDispatcher
  fullName: com.microsoft.azure.eventhubs.impl.ReactorDispatcher.ReactorDispatcher
  package: com.microsoft.azure.eventhubs.impl
- uid: 93de0ef9com.microsoft.azure.eventhubs.impl._dispatch_handler
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.eventhubs.impl._dispatch_handler
    name: DispatchHandler
    fullName: com.microsoft.azure.eventhubs.impl.DispatchHandler
    href: com.microsoft.azure.eventhubs.impl._dispatch_handler.yml
- uid: com.microsoft.azure.eventhubs.impl._reactor_dispatcher.invoke*
  name: invoke
  nameWithType: ReactorDispatcher.invoke
  fullName: void com.microsoft.azure.eventhubs.impl.ReactorDispatcher.invoke
  package: com.microsoft.azure.eventhubs.impl
- uid: cd225469
  spec.java:
  - name: final int
    fullName: final int
- uid: com.microsoft.azure.eventhubs.impl._dispatch_handler
  parent: com.microsoft.azure.eventhubs.impl
  href: com.microsoft.azure.eventhubs.impl._dispatch_handler.yml
  name: DispatchHandler
  nameWithType: DispatchHandler
  fullName: com.microsoft.azure.eventhubs.impl.DispatchHandler
  type: Class
  syntax:
    content: public class DispatchHandler
- uid: com.microsoft.azure.eventhubs.impl._reactor_dispatcher
  parent: com.microsoft.azure.eventhubs.impl
  href: com.microsoft.azure.eventhubs.impl._reactor_dispatcher.yml
  name: ReactorDispatcher
  nameWithType: ReactorDispatcher
  fullName: com.microsoft.azure.eventhubs.impl.ReactorDispatcher
  type: Class
  summary: >-
    <p>

      <xref uid="" data-throw-if-not-resolved="false">Reactor</xref> is not thread-safe - all calls to <xref uid="" data-throw-if-not-resolved="false">Proton</xref> API's should be - on the Reactor Thread. <xref uid="" data-throw-if-not-resolved="false">Reactor</xref> works out-of-box for all event driven API - ex: onReceive - which could raise upon onSocketRead. <xref uid="" data-throw-if-not-resolved="false">Reactor</xref> didn't support API's like Send() out-of-box - which could potentially run on different thread to that of Reactor. So, the following utility class is used to generate an Event to hook into <xref uid="" data-throw-if-not-resolved="false">Reactor</xref>'s event delegation pattern. It uses a <xref uid="" data-throw-if-not-resolved="false">Pipe</xref> as the IO on which Reactor Listens to. Cardinality: multiple <xref uid="com.microsoft.azure.eventhubs.impl._reactor_dispatcher" data-throw-if-not-resolved="false">ReactorDispatcher</xref>'s could be attached to 1 <xref uid="" data-throw-if-not-resolved="false">Reactor</xref>. Each <xref uid="com.microsoft.azure.eventhubs.impl._reactor_dispatcher" data-throw-if-not-resolved="false">ReactorDispatcher</xref> should be initialized Synchronously - as it calls API in <xref uid="" data-throw-if-not-resolved="false">Reactor</xref> which is not thread-safe. </p>
  syntax: *o1
