### YamlMime:JavaMember
nameWithType: Jobs.terminateWithServiceResponseAsync
type: method
members:
- fullName: com.microsoft.azure.batch.protocol.Jobs.terminateWithServiceResponseAsync(String jobId)
  name: terminateWithServiceResponseAsync(String jobId)
  nameWithType: Jobs.terminateWithServiceResponseAsync(String jobId)
  parameters:
  - description: <p>The ID of the job to terminate. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobTerminateHeaders?alt=com.microsoft.azure.batch.protocol.models.JobTerminateHeaders&text=JobTerminateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Terminates the specified job, marking it as completed. When a Terminate Job request is received, the Batch service sets the job to the terminating state. The Batch service then terminates any running tasks associated with the job and runs any required job release tasks. Then the job moves into the completed state. If there are any tasks in the job in the active state, they will remain in the active state. Once a job is terminated, new tasks cannot be added and any remaining active tasks will not be scheduled.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobTerminateHeaders>> terminateWithServiceResponseAsync(String jobId)
  uid: com.microsoft.azure.batch.protocol.Jobs.terminateWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.terminateWithServiceResponseAsync(String jobId, String terminateReason, JobTerminateOptions jobTerminateOptions)
  name: terminateWithServiceResponseAsync(String jobId, String terminateReason, JobTerminateOptions jobTerminateOptions)
  nameWithType: Jobs.terminateWithServiceResponseAsync(String jobId, String terminateReason, JobTerminateOptions jobTerminateOptions)
  parameters:
  - description: <p>The ID of the job to terminate. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The text you want to appear as the job's TerminateReason. The default is 'UserTerminate'. </p>
    name: terminateReason
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobTerminateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobTerminateOptions?alt=com.microsoft.azure.batch.protocol.models.JobTerminateOptions&text=JobTerminateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobTerminateHeaders?alt=com.microsoft.azure.batch.protocol.models.JobTerminateHeaders&text=JobTerminateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Terminates the specified job, marking it as completed. When a Terminate Job request is received, the Batch service sets the job to the terminating state. The Batch service then terminates any running tasks associated with the job and runs any required job release tasks. Then the job moves into the completed state. If there are any tasks in the job in the active state, they will remain in the active state. Once a job is terminated, new tasks cannot be added and any remaining active tasks will not be scheduled.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobTerminateHeaders>> terminateWithServiceResponseAsync(String jobId, String terminateReason, JobTerminateOptions jobTerminateOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.terminateWithServiceResponseAsync(String,String,JobTerminateOptions)
uid: com.microsoft.azure.batch.protocol.Jobs.terminateWithServiceResponseAsync*
fullName: com.microsoft.azure.batch.protocol.Jobs.terminateWithServiceResponseAsync(String jobId)
name: terminateWithServiceResponseAsync(String jobId)
package: com.microsoft.azure.batch.protocol
metadata: {}
