### YamlMime:ManagedReference
items:
- uid: "com.azure.core.http.rest.MissingRequiredAnnotationException"
  id: "MissingRequiredAnnotationException"
  parent: "com.azure.core.http.rest"
  children:
  - "com.azure.core.http.rest.MissingRequiredAnnotationException.MissingRequiredAnnotationException(java.lang.Class<? extends java.lang.annotation.Annotation>,java.lang.Class<?>)"
  - "com.azure.core.http.rest.MissingRequiredAnnotationException.MissingRequiredAnnotationException(java.lang.Class<? extends java.lang.annotation.Annotation>,java.lang.reflect.Method)"
  - "com.azure.core.http.rest.MissingRequiredAnnotationException.MissingRequiredAnnotationException(java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>>,java.lang.reflect.Method)"
  langs:
  - "java"
  name: "MissingRequiredAnnotationException"
  nameWithType: "MissingRequiredAnnotationException"
  fullName: "com.azure.core.http.rest.MissingRequiredAnnotationException"
  type: "Class"
  package: "com.azure.core.http.rest"
  summary: "An exception thrown when a Swagger interface is parsed and it is missing required annotations."
  syntax:
    content: " class MissingRequiredAnnotationException extends RuntimeException"
  inheritance:
  - "java.lang.Object"
  - "java.lang.Throwable"
  - "java.lang.Exception"
  - "java.lang.RuntimeException"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
  - "java.lang.Throwable.addSuppressed(java.lang.Throwable)"
  - "java.lang.Throwable.fillInStackTrace()"
  - "java.lang.Throwable.getCause()"
  - "java.lang.Throwable.getLocalizedMessage()"
  - "java.lang.Throwable.getMessage()"
  - "java.lang.Throwable.getStackTrace()"
  - "java.lang.Throwable.getSuppressed()"
  - "java.lang.Throwable.initCause(java.lang.Throwable)"
  - "java.lang.Throwable.printStackTrace()"
  - "java.lang.Throwable.printStackTrace(java.io.PrintStream)"
  - "java.lang.Throwable.printStackTrace(java.io.PrintWriter)"
  - "java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])"
  - "java.lang.Throwable.toString()"
- uid: "com.azure.core.http.rest.MissingRequiredAnnotationException.MissingRequiredAnnotationException(java.lang.Class<? extends java.lang.annotation.Annotation>,java.lang.Class<?>)"
  id: "MissingRequiredAnnotationException(java.lang.Class<? extends java.lang.annotation.Annotation>,java.lang.Class<?>)"
  parent: "com.azure.core.http.rest.MissingRequiredAnnotationException"
  langs:
  - "java"
  name: "MissingRequiredAnnotationException(Class<? extends Annotation> requiredAnnotation, Class<?> swaggerInterface)"
  nameWithType: "MissingRequiredAnnotationException.MissingRequiredAnnotationException(Class<? extends Annotation> requiredAnnotation, Class<?> swaggerInterface)"
  fullName: "com.azure.core.http.rest.MissingRequiredAnnotationException.MissingRequiredAnnotationException(Class<? extends Annotation> requiredAnnotation, Class<?> swaggerInterface)"
  overload: "com.azure.core.http.rest.MissingRequiredAnnotationException.MissingRequiredAnnotationException*"
  type: "Constructor"
  package: "com.azure.core.http.rest"
  summary: "Create a new MissingRequiredAnnotationException for the provided missing required annotation on the provided swaggerInterface."
  syntax:
    content: " MissingRequiredAnnotationException(Class<? extends Annotation> requiredAnnotation, Class<?> swaggerInterface)"
    parameters:
    - id: "requiredAnnotation"
      type: "java.lang.Class<? extends java.lang.annotation.Annotation>"
      description: "The annotation that is required."
    - id: "swaggerInterface"
      type: "java.lang.Class<?>"
      description: "The swagger interface that is missing the required annotation."
- uid: "com.azure.core.http.rest.MissingRequiredAnnotationException.MissingRequiredAnnotationException(java.lang.Class<? extends java.lang.annotation.Annotation>,java.lang.reflect.Method)"
  id: "MissingRequiredAnnotationException(java.lang.Class<? extends java.lang.annotation.Annotation>,java.lang.reflect.Method)"
  parent: "com.azure.core.http.rest.MissingRequiredAnnotationException"
  langs:
  - "java"
  name: "MissingRequiredAnnotationException(Class<? extends Annotation> requiredAnnotation, Method swaggerInterfaceMethod)"
  nameWithType: "MissingRequiredAnnotationException.MissingRequiredAnnotationException(Class<? extends Annotation> requiredAnnotation, Method swaggerInterfaceMethod)"
  fullName: "com.azure.core.http.rest.MissingRequiredAnnotationException.MissingRequiredAnnotationException(Class<? extends Annotation> requiredAnnotation, Method swaggerInterfaceMethod)"
  overload: "com.azure.core.http.rest.MissingRequiredAnnotationException.MissingRequiredAnnotationException*"
  type: "Constructor"
  package: "com.azure.core.http.rest"
  summary: "Create a new MissingRequiredAnnotationException for the provided missing required annotation on the provided swaggerInterface method."
  syntax:
    content: " MissingRequiredAnnotationException(Class<? extends Annotation> requiredAnnotation, Method swaggerInterfaceMethod)"
    parameters:
    - id: "requiredAnnotation"
      type: "java.lang.Class<? extends java.lang.annotation.Annotation>"
      description: "The annotation that is required."
    - id: "swaggerInterfaceMethod"
      type: "java.lang.reflect.Method"
      description: "The swagger interface method that is missing the required annotation."
- uid: "com.azure.core.http.rest.MissingRequiredAnnotationException.MissingRequiredAnnotationException(java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>>,java.lang.reflect.Method)"
  id: "MissingRequiredAnnotationException(java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>>,java.lang.reflect.Method)"
  parent: "com.azure.core.http.rest.MissingRequiredAnnotationException"
  langs:
  - "java"
  name: "MissingRequiredAnnotationException(List<Class<? extends Annotation>> requiredAnnotationOptions, Method swaggerInterfaceMethod)"
  nameWithType: "MissingRequiredAnnotationException.MissingRequiredAnnotationException(List<Class<? extends Annotation>> requiredAnnotationOptions, Method swaggerInterfaceMethod)"
  fullName: "com.azure.core.http.rest.MissingRequiredAnnotationException.MissingRequiredAnnotationException(List<Class<? extends Annotation>> requiredAnnotationOptions, Method swaggerInterfaceMethod)"
  overload: "com.azure.core.http.rest.MissingRequiredAnnotationException.MissingRequiredAnnotationException*"
  type: "Constructor"
  package: "com.azure.core.http.rest"
  summary: "Create a new MissingRequiredAnnotationException for the provided missing required annotation options on the provided swaggerInterface method."
  syntax:
    content: " MissingRequiredAnnotationException(List<Class<? extends Annotation>> requiredAnnotationOptions, Method swaggerInterfaceMethod)"
    parameters:
    - id: "requiredAnnotationOptions"
      type: "java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>>"
      description: "The options for the annotation that is required."
    - id: "swaggerInterfaceMethod"
      type: "java.lang.reflect.Method"
      description: "The swagger interface method that is missing the required annotation."
references:
- uid: "java.lang.Class<? extends java.lang.annotation.Annotation>"
  spec.java:
  - uid: "java.lang.Class"
    name: "Class"
    fullName: "java.lang.Class"
  - name: "<"
    fullName: "<"
  - uid: "? extends java.lang.annotation.Annotation"
    name: "Annotation"
    fullName: "? extends java.lang.annotation.Annotation"
  - name: ">"
    fullName: ">"
- uid: "java.lang.Class<?>"
  spec.java:
  - uid: "java.lang.Class"
    name: "Class"
    fullName: "java.lang.Class"
  - name: "<"
    fullName: "<"
  - uid: "?"
    name: "?"
    fullName: "?"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.http.rest.MissingRequiredAnnotationException.MissingRequiredAnnotationException*"
  name: "MissingRequiredAnnotationException"
  nameWithType: "MissingRequiredAnnotationException.MissingRequiredAnnotationException"
  fullName: "com.azure.core.http.rest.MissingRequiredAnnotationException.MissingRequiredAnnotationException"
  package: "com.azure.core.http.rest"
- uid: "java.lang.reflect.Method"
  spec.java:
  - uid: "java.lang.reflect.Method"
    name: "Method"
    fullName: "java.lang.reflect.Method"
- uid: "java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Class"
    name: "Class"
    fullName: "java.lang.Class"
  - name: "<"
    fullName: "<"
  - uid: "? extends java.lang.annotation.Annotation"
    name: "Annotation"
    fullName: "? extends java.lang.annotation.Annotation"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "java.lang.RuntimeException"
  name: "RuntimeException"
  nameWithType: "RuntimeException"
  fullName: "java.lang.RuntimeException"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Throwable.printStackTrace(java.io.PrintWriter)"
  name: "Throwable.printStackTrace(PrintWriter)"
  nameWithType: "Throwable.printStackTrace(PrintWriter)"
  fullName: "java.lang.Throwable.printStackTrace(java.io.PrintWriter)"
- uid: "java.lang.Throwable.getCause()"
  name: "Throwable.getCause()"
  nameWithType: "Throwable.getCause()"
  fullName: "java.lang.Throwable.getCause()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Throwable.addSuppressed(java.lang.Throwable)"
  name: "Throwable.addSuppressed(Throwable)"
  nameWithType: "Throwable.addSuppressed(Throwable)"
  fullName: "java.lang.Throwable.addSuppressed(java.lang.Throwable)"
- uid: "java.lang.Throwable.fillInStackTrace()"
  name: "Throwable.fillInStackTrace()"
  nameWithType: "Throwable.fillInStackTrace()"
  fullName: "java.lang.Throwable.fillInStackTrace()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Throwable.initCause(java.lang.Throwable)"
  name: "Throwable.initCause(Throwable)"
  nameWithType: "Throwable.initCause(Throwable)"
  fullName: "java.lang.Throwable.initCause(java.lang.Throwable)"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])"
  name: "Throwable.setStackTrace(StackTraceElement[])"
  nameWithType: "Throwable.setStackTrace(StackTraceElement[])"
  fullName: "java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])"
- uid: "java.lang.Throwable.toString()"
  name: "Throwable.toString()"
  nameWithType: "Throwable.toString()"
  fullName: "java.lang.Throwable.toString()"
- uid: "java.lang.Throwable.printStackTrace(java.io.PrintStream)"
  name: "Throwable.printStackTrace(PrintStream)"
  nameWithType: "Throwable.printStackTrace(PrintStream)"
  fullName: "java.lang.Throwable.printStackTrace(java.io.PrintStream)"
- uid: "java.lang.Throwable.getMessage()"
  name: "Throwable.getMessage()"
  nameWithType: "Throwable.getMessage()"
  fullName: "java.lang.Throwable.getMessage()"
- uid: "java.lang.Throwable.getSuppressed()"
  name: "Throwable.getSuppressed()"
  nameWithType: "Throwable.getSuppressed()"
  fullName: "java.lang.Throwable.getSuppressed()"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Throwable.getStackTrace()"
  name: "Throwable.getStackTrace()"
  nameWithType: "Throwable.getStackTrace()"
  fullName: "java.lang.Throwable.getStackTrace()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Throwable.getLocalizedMessage()"
  name: "Throwable.getLocalizedMessage()"
  nameWithType: "Throwable.getLocalizedMessage()"
  fullName: "java.lang.Throwable.getLocalizedMessage()"
- uid: "java.lang.Throwable.printStackTrace()"
  name: "Throwable.printStackTrace()"
  nameWithType: "Throwable.printStackTrace()"
  fullName: "java.lang.Throwable.printStackTrace()"
- uid: "java.lang.Class"
  name: "Class"
  nameWithType: "Class"
  fullName: "java.lang.Class"
- uid: "? extends java.lang.annotation.Annotation"
  name: "? extends Annotation"
  nameWithType: "? extends Annotation"
  fullName: "? extends java.lang.annotation.Annotation"
- uid: "?"
  name: "?"
  nameWithType: "?"
  fullName: "?"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
