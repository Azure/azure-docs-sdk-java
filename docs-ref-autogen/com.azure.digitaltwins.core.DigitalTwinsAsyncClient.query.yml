### YamlMime:JavaMember
uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.query*"
fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>query"
name: "<T>query"
nameWithType: "DigitalTwinsAsyncClient.<T>query"
members:
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>query(java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>query(String query, Class<T> clazz)"
  name: "<T>query(String query, Class<T> clazz)"
  nameWithType: "DigitalTwinsAsyncClient.<T>query(String query, Class<T> clazz)"
  summary: "Query digital twins.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\ndigitalTwinsAsyncClient.query(\n     \"SELECT * FROM digitaltwins\",\n     BasicDigitalTwin.class)\n     .doOnNext(\n         basicTwin -> System.out.println(\"Retrieved digitalTwin query result with Id: \" + basicTwin.getId()))\n     .subscribe();\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\ndigitalTwinsAsyncClient.query(\n     \"SELECT * FROM digitaltwins\",\n     String.class)\n     .doOnNext(twinString -> System.out.println(\"Retrieved digitalTwin query result with Id: \" + twinString))\n     .subscribe();\n```\n\nNote that there may be a delay between before changes in your instance are reflected in queries. For more details on query limitations, see [Query limitations][]\n\n\n[Query limitations]: https://docs.microsoft.com/en-us/azure/digital-twins/how-to-query-graph#query-limitations"
  parameters:
  - description: "The query string, in SQL-like syntax."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to deserialize each queried digital twin into. Since the queried twins may not all\n              have the same model class, it is recommended to use a common denominator class such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref>."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PagedFlux<T> <T>query(String query, Class<T> clazz)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of deserialized digital twins."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>query(java.lang.String,java.lang.Class<T>,com.azure.digitaltwins.core.models.QueryOptions)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>query(String query, Class<T> clazz, QueryOptions options)"
  name: "<T>query(String query, Class<T> clazz, QueryOptions options)"
  nameWithType: "DigitalTwinsAsyncClient.<T>query(String query, Class<T> clazz, QueryOptions options)"
  summary: "Query digital twins.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\ndigitalTwinsAsyncClient.query(\n     \"SELECT * FROM digitaltwins\",\n     BasicDigitalTwin.class,\n     new QueryOptions().setMaxItemsPerPage(5))\n     .doOnNext(\n         basicTwin -> System.out.println(\"Retrieved digitalTwin query result with Id: \" + basicTwin.getId()))\n     .subscribe();\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\ndigitalTwinsAsyncClient.query(\n     \"SELECT * FROM digitaltwins\",\n     String.class,\n     new QueryOptions().setMaxItemsPerPage(5))\n     .doOnNext(twinString -> System.out.println(\"Retrieved digitalTwin query result with Id: \" + twinString))\n     .subscribe();\n```\n\nNote that there may be a delay between before changes in your instance are reflected in queries. For more details on query limitations, see [Query limitations][]\n\n\n[Query limitations]: https://docs.microsoft.com/en-us/azure/digital-twins/how-to-query-graph#query-limitations"
  parameters:
  - description: "The query string, in SQL-like syntax."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to deserialize each queried digital twin into. Since the queried twins may not all\n              have the same model class, it is recommended to use a common denominator class such as <xref uid=\"com.azure.digitaltwins.core.BasicDigitalTwin\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicDigitalTwin\"></xref>."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.QueryOptions?alt=com.azure.digitaltwins.core.models.QueryOptions&text=QueryOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<T> <T>query(String query, Class<T> clazz, QueryOptions options)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of deserialized digital twins."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.digitaltwins.core"
artifact: com.azure:azure-digitaltwins-core:1.0.1
