### YamlMime:JavaType
uid: "com.microsoft.cognitiveservices.speech.diagnostics.logging.EventLogger"
fullName: "com.microsoft.cognitiveservices.speech.diagnostics.logging.EventLogger"
name: "EventLogger"
nameWithType: "EventLogger"
summary: "A static class to control event-based SDK logging."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"java.lang.Object.clone()?alt=java.lang.Object.clone&text=clone\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.equals(java.lang.Object)?alt=java.lang.Object.equals&text=equals\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.finalize()?alt=java.lang.Object.finalize&text=finalize\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.getClass()?alt=java.lang.Object.getClass&text=getClass\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.hashCode()?alt=java.lang.Object.hashCode&text=hashCode\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.notify()?alt=java.lang.Object.notify&text=notify\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.notifyAll()?alt=java.lang.Object.notifyAll&text=notifyAll\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.toString()?alt=java.lang.Object.toString&text=toString\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait()?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait(long)?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait(long,int)?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
syntax: "public final class **EventLogger**"
methods:
- uid: "com.microsoft.cognitiveservices.speech.diagnostics.logging.EventLogger.setCallback()"
  fullName: "com.microsoft.cognitiveservices.speech.diagnostics.logging.EventLogger.setCallback()"
  name: "setCallback()"
  nameWithType: "EventLogger.setCallback()"
  summary: "Unsets event message logging handler."
  modifiers:
  - "static"
  syntax: "public static void setCallback()"
  desc: "Unsets event message logging handler."
- uid: "com.microsoft.cognitiveservices.speech.diagnostics.logging.EventLogger.setCallback(com.microsoft.cognitiveservices.speech.diagnostics.logging.EventLogger.EventHandler)"
  fullName: "com.microsoft.cognitiveservices.speech.diagnostics.logging.EventLogger.setCallback(EventLogger.EventHandler handler)"
  name: "setCallback(EventLogger.EventHandler handler)"
  nameWithType: "EventLogger.setCallback(EventLogger.EventHandler handler)"
  summary: "Sets event message logging handler."
  modifiers:
  - "static"
  parameters:
  - description: "Event message handler. null to remove the handler from the logger\n <p>\n You can only subscribe once to the event. The event thread is a working thread of the SDK,\n so the log string should be copied somewhere for further processing by another thread, and return immediately\n from the handler. No heavy processing or network calls should be done in the handler subscribed to this event."
    name: "handler"
    type: "<xref href=\"com.microsoft.cognitiveservices.speech.diagnostics.logging.EventLogger.EventHandler?alt=com.microsoft.cognitiveservices.speech.diagnostics.logging.EventLogger.EventHandler&text=EventHandler\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static void setCallback(EventLogger.EventHandler handler)"
  desc: "Sets event message logging handler."
- uid: "com.microsoft.cognitiveservices.speech.diagnostics.logging.EventLogger.setFilters()"
  fullName: "com.microsoft.cognitiveservices.speech.diagnostics.logging.EventLogger.setFilters()"
  name: "setFilters()"
  nameWithType: "EventLogger.setFilters()"
  summary: "Clears filters for logging event messages."
  modifiers:
  - "static"
  syntax: "public static void setFilters()"
  desc: "Clears filters for logging event messages."
- uid: "com.microsoft.cognitiveservices.speech.diagnostics.logging.EventLogger.setFilters(java.lang.String[])"
  fullName: "com.microsoft.cognitiveservices.speech.diagnostics.logging.EventLogger.setFilters(String[] filters)"
  name: "setFilters(String[] filters)"
  nameWithType: "EventLogger.setFilters(String[] filters)"
  summary: "Sets filters for logging event messages."
  modifiers:
  - "static"
  parameters:
  - description: "Filters to use, or an empty list to remove previously set filters."
    name: "filters"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public static void setFilters(String[] filters)"
  desc: "Sets filters for logging event messages. Once filters are set, event logger will only be updated with log strings containing at least one of the strings specified by the filters. The match is case sensitive."
- uid: "com.microsoft.cognitiveservices.speech.diagnostics.logging.EventLogger.setLevel(com.microsoft.cognitiveservices.speech.diagnostics.logging.Level)"
  fullName: "com.microsoft.cognitiveservices.speech.diagnostics.logging.EventLogger.setLevel(Level level)"
  name: "setLevel(Level level)"
  nameWithType: "EventLogger.setLevel(Level level)"
  summary: "Sets the level of the messages to be captured by the logger."
  modifiers:
  - "static"
  parameters:
  - description: "Maximum level of detail to be captured by the logger."
    name: "level"
    type: "<xref href=\"com.microsoft.cognitiveservices.speech.diagnostics.logging.Level?alt=com.microsoft.cognitiveservices.speech.diagnostics.logging.Level&text=Level\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static void setLevel(Level level)"
  desc: "Sets the level of the messages to be captured by the logger."
type: "class"
desc: "A static class to control event-based SDK logging. Turning on logging while running your Speech SDK scenario provides detailed information from the SDK's core native components. If you report an issue to Microsoft, you may be asked to provide logs to help Microsoft diagnose the issue. Your application should not take dependency on particular log strings, as they may change from one SDK release to another without notice. Use EventLogger when you want to get access to new log strings as soon as they are available, and you need to further process them. For example, integrating Speech SDK logs with your existing logging collection system. Added in version 1.42.0\n\nEvent logging is a process wide construct. That means that if (for example) you have multiple speech recognizer objects running in parallel, you can only register one callback function to receive interleaved logs from all recognizers. You cannot register a separate callback for each recognizer."
metadata: {}
package: "com.microsoft.cognitiveservices.speech.diagnostics.logging"
artifact: com.microsoft.cognitiveservices.speech:client-sdk:1.42.0
