### YamlMime:JavaMember
nameWithType: ModuleClient.setMessageCallback
type: method
members:
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(MessageCallback callback, Object context)
  name: setMessageCallback(MessageCallback callback, Object context)
  nameWithType: ModuleClient.setMessageCallback(MessageCallback callback, Object context)
  parameters:
  - description: >-
      <p>the message callback. Can be<code>null 

          </code> . </p>
    name: callback
    type: <xref href="com.microsoft.azure.sdk.iot.device.MessageCallback?alt=com.microsoft.azure.sdk.iot.device.MessageCallback&text=MessageCallback" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the context to be passed to the callback. Can be<code>null 

          </code> .</p>
    name: context
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>if the callback is<code>null 

          </code> but a context is passed in. </p>
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if the callback is set after the client is closed. </p>
  returns:
    description: <p>itself, for fluent setting.</p>
    type: <xref href="com.microsoft.azure.sdk.iot.device.ModuleClient?alt=com.microsoft.azure.sdk.iot.device.ModuleClient&text=ModuleClient" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the message callback.</p>

    <p></p>
  syntax: public ModuleClient setMessageCallback(MessageCallback callback, Object context)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(MessageCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(String inputName, MessageCallback callback, Object context)
  name: setMessageCallback(String inputName, MessageCallback callback, Object context)
  nameWithType: ModuleClient.setMessageCallback(String inputName, MessageCallback callback, Object context)
  parameters:
  - description: <p>the input name channel to listen for. </p>
    name: inputName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the message callback. Can be<code>null 

          </code> . </p>
    name: callback
    type: <xref href="com.microsoft.azure.sdk.iot.device.MessageCallback?alt=com.microsoft.azure.sdk.iot.device.MessageCallback&text=MessageCallback" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the context to be passed to the callback. Can be<code>null 

          </code> .</p>
    name: context
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>this object, for fluent setting </p>
    type: <xref href="com.microsoft.azure.sdk.iot.device.ModuleClient?alt=com.microsoft.azure.sdk.iot.device.ModuleClient&text=ModuleClient" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the message callback to be fired when a telemetry message arrives on the specified input channel. All other messages will trigger the default message callback in setMessageCallback(MessageCallback callback, Object context). Any message that triggers this callback will not also trigger the default callback.</p>

    <p></p>
  syntax: public ModuleClient setMessageCallback(String inputName, MessageCallback callback, Object context)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(String,MessageCallback,Object)
uid: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback*
fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(MessageCallback callback, Object context)
name: setMessageCallback(MessageCallback callback, Object context)
package: com.microsoft.azure.sdk.iot.device
metadata: {}
