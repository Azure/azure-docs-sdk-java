### YamlMime:JavaMember
uid: "com.azure.storage.queue.QueueAsyncClient.receiveMessages*"
fullName: "com.azure.storage.queue.QueueAsyncClient.receiveMessages"
name: "receiveMessages"
nameWithType: "QueueAsyncClient.receiveMessages"
members:
- uid: "com.azure.storage.queue.QueueAsyncClient.receiveMessages(java.lang.Integer)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.receiveMessages(Integer maxMessages)"
  name: "receiveMessages(Integer maxMessages)"
  nameWithType: "QueueAsyncClient.receiveMessages(Integer maxMessages)"
  summary: "Retrieves up to the maximum number of messages from the queue and hides them from other operations for 30 seconds.\n\n**Code Samples**\n\nDequeue up to 5 messages\n\n```java\nclient.receiveMessages(5).subscribe(\n     message -> System.out.println(\"The message got from getMessages operation: \"\n         + message.getMessageText()),\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete receiving the message!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-messages"
  parameters:
  - description: "Optional. Maximum number of messages to get, if there are less messages exist in the queue\n than requested all the messages will be returned. If left empty only 1 message will be retrieved, the allowed\n range is 1 to 32 messages."
    name: "maxMessages"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<QueueMessageItem> receiveMessages(Integer maxMessages)"
  returns:
    description: "Up to <code>maxMessages</code> <xref uid=\"com.azure.storage.queue.models.QueueMessageItem\" data-throw-if-not-resolved=\"false\">ReceiveMessageItem</xref> from the queue.\n Each DequeuedMessage contains <xref uid=\"com.azure.storage.queue.models.QueueMessageItem.getMessageId()\" data-throw-if-not-resolved=\"false\">messageId</xref> and\n <xref uid=\"com.azure.storage.queue.models.QueueMessageItem.getPopReceipt()\" data-throw-if-not-resolved=\"false\">popReceipt</xref> used to interact with the message and\n other metadata about the message."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.QueueMessageItem?alt=com.azure.storage.queue.models.QueueMessageItem&text=QueueMessageItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueAsyncClient.receiveMessages(java.lang.Integer,java.time.Duration)"
  fullName: "com.azure.storage.queue.QueueAsyncClient.receiveMessages(Integer maxMessages, Duration visibilityTimeout)"
  name: "receiveMessages(Integer maxMessages, Duration visibilityTimeout)"
  nameWithType: "QueueAsyncClient.receiveMessages(Integer maxMessages, Duration visibilityTimeout)"
  summary: "Retrieves up to the maximum number of messages from the queue and hides them from other operations for the timeout period.\n\n**Code Samples**\n\nDequeue up to 5 messages and give them a 60 second timeout period\n\n```java\nclient.receiveMessages(5, Duration.ofSeconds(60))\n     .subscribe(\n         message -> System.out.println(\"The message got from getMessages operation: \"\n             + message.getMessageText()),\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete receiving the message!\")\n     );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-messages"
  parameters:
  - description: "Optional. Maximum number of messages to get, if there are less messages exist in the queue\n than requested all the messages will be returned. If left empty only 1 message will be retrieved, the allowed\n range is 1 to 32 messages."
    name: "maxMessages"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional. The timeout period for how long the message is invisible in the queue. If left\n empty the dequeued messages will be invisible for 30 seconds. The timeout must be between 1 second and 7 days."
    name: "visibilityTimeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<QueueMessageItem> receiveMessages(Integer maxMessages, Duration visibilityTimeout)"
  returns:
    description: "Up to <code>maxMessages</code> <xref uid=\"com.azure.storage.queue.models.QueueMessageItem\" data-throw-if-not-resolved=\"false\">DequeuedMessages</xref> from the queue. Each DeqeuedMessage\n contains <xref uid=\"com.azure.storage.queue.models.QueueMessageItem.getMessageId()\" data-throw-if-not-resolved=\"false\">messageId</xref> and\n <xref uid=\"com.azure.storage.queue.models.QueueMessageItem.getPopReceipt()\" data-throw-if-not-resolved=\"false\">popReceipt</xref>\n used to interact with the message and other metadata about the message."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.QueueMessageItem?alt=com.azure.storage.queue.models.QueueMessageItem&text=QueueMessageItem\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.storage.queue"
artifact: com.azure:azure-storage-queue:12.6.0
