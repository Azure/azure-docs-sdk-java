### YamlMime:JavaMember
uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.getRelationship*"
fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getRelationship"
name: "<T>getRelationship"
nameWithType: "DigitalTwinsAsyncClient.<T>getRelationship"
members:
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getRelationship(java.lang.String,java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>getRelationship(String digitalTwinId, String relationshipId, Class<T> clazz)"
  name: "<T>getRelationship(String digitalTwinId, String relationshipId, Class<T> clazz)"
  nameWithType: "DigitalTwinsAsyncClient.<T>getRelationship(String digitalTwinId, String relationshipId, Class<T> clazz)"
  summary: "Gets a relationship on a digital twin.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\ndigitalTwinsAsyncClient.getRelationship(\n     \"myDigitalTwinId\",\n     \"myRelationshipName\",\n     BasicRelationship.class)\n     .subscribe(retrievedRelationship -> System.out.println(\n         \"Retrieved relationship with Id: \"\n             + retrievedRelationship.getId() +\n             \" from: \" +\n             retrievedRelationship.getSourceId() +\n             \" to: \" + retrievedRelationship.getTargetId()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\ndigitalTwinsAsyncClient.getRelationship(\n     \"myDigitalTwinId\",\n     \"myRelationshipName\",\n     String.class)\n     .subscribe(retrievedRelationshipString ->\n         System.out.println(\"Retrieved relationship: \" + retrievedRelationshipString));\n```"
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the relationship to retrieve."
    name: "relationshipId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to deserialize the relationship into."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<T> <T>getRelationship(String digitalTwinId, String relationshipId, Class<T> clazz)"
  returns:
    description: "The deserialized relationship."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.digitaltwins.core"
artifact: com.azure:azure-digitaltwins-core:1.0.1
