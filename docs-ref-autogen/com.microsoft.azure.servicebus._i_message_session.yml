### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.servicebus._i_message_session
  id: _i_message_session
  parent: com.microsoft.azure.servicebus
  children:
  - com.microsoft.azure.servicebus._i_message_session.getLockedUntilUtc()
  - com.microsoft.azure.servicebus._i_message_session.getSessionId()
  - com.microsoft.azure.servicebus._i_message_session.getState()
  - com.microsoft.azure.servicebus._i_message_session.getStateAsync()
  - com.microsoft.azure.servicebus._i_message_session.renewSessionLock()
  - com.microsoft.azure.servicebus._i_message_session.renewSessionLockAsync()
  - com.microsoft.azure.servicebus._i_message_session.setState(byte [])
  - com.microsoft.azure.servicebus._i_message_session.setStateAsync(byte [])
  href: com.microsoft.azure.servicebus._i_message_session.yml
  langs:
  - java
  name: IMessageSession
  nameWithType: IMessageSession
  fullName: com.microsoft.azure.servicebus.IMessageSession
  type: Interface
  source:
    remote: &o0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSession.java
      branch: master
      repo: https://github.com/Azure/azure-service-bus-java
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSession.java
    startLine: 19
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Describes a Session object. <xref uid="com.microsoft.azure.servicebus._i_message_session" data-throw-if-not-resolved="false">IMessageSession</xref> can be used to perform operations on sessions. </p>

    <p>Service Bus Sessions, also called 'Groups' in the AMQP 1.0 protocol, are unbounded sequences of related messages. ServiceBus guarantees ordering of messages in a session. </p>

    <p>Any sender can create a session when submitting messages into a Topic or Queue by setting the <xref uid="" data-throw-if-not-resolved="false">Message#sessionId</xref> property on <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to some application defined unique identifier. At the AMQP 1.0 protocol level, this value maps to the group-id property. </p>

    <p>Sessions come into existence when there is at least one message with the session's SessionId in the Queue or Topic subscription. Once a Session exists, there is no defined moment or gesture for when the session expires or disappears. </p>
  syntax: &o5
    content: public interface IMessageSession extends IMessageReceiver
  inheritedMembers:
  - com.microsoft.azure.servicebus._i_message_receiver.abandon(UUID)
  - com.microsoft.azure.servicebus._i_message_receiver.abandon(UUID,Map<String, Object>)
  - com.microsoft.azure.servicebus._i_message_receiver.abandonAsync(UUID)
  - com.microsoft.azure.servicebus._i_message_receiver.abandonAsync(UUID,Map<String, Object>)
  - com.microsoft.azure.servicebus._i_closeable.close()
  - com.microsoft.azure.servicebus._i_closeable.closeAsync()
  - com.microsoft.azure.servicebus._i_message_receiver.complete(UUID)
  - com.microsoft.azure.servicebus._i_message_receiver.completeAsync(UUID)
  - com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID)
  - com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID,Map<String, Object>)
  - com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID,String,String)
  - com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID,String,String,Map<String, Object>)
  - com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID)
  - com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID,Map<String, Object>)
  - com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID,String,String)
  - com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID,String,String,Map<String, Object>)
  - com.microsoft.azure.servicebus._i_message_receiver.defer(UUID)
  - com.microsoft.azure.servicebus._i_message_receiver.defer(UUID,Map<String, Object>)
  - com.microsoft.azure.servicebus._i_message_receiver.deferAsync(UUID)
  - com.microsoft.azure.servicebus._i_message_receiver.deferAsync(UUID,Map<String, Object>)
  - com.microsoft.azure.servicebus._i_message_entity_client.getEntityPath()
  - com.microsoft.azure.servicebus._i_message_receiver.getPrefetchCount()
  - com.microsoft.azure.servicebus._i_message_receiver.getReceiveMode()
  - com.microsoft.azure.servicebus._i_message_browser.peek()
  - com.microsoft.azure.servicebus._i_message_browser.peek(long)
  - com.microsoft.azure.servicebus._i_message_browser.peekAsync()
  - com.microsoft.azure.servicebus._i_message_browser.peekAsync(long)
  - com.microsoft.azure.servicebus._i_message_browser.peekBatch(int)
  - com.microsoft.azure.servicebus._i_message_browser.peekBatch(long,int)
  - com.microsoft.azure.servicebus._i_message_browser.peekBatchAsync(int)
  - com.microsoft.azure.servicebus._i_message_browser.peekBatchAsync(long,int)
  - com.microsoft.azure.servicebus._i_message_receiver.receive()
  - com.microsoft.azure.servicebus._i_message_receiver.receive(Duration)
  - com.microsoft.azure.servicebus._i_message_receiver.receiveAsync()
  - com.microsoft.azure.servicebus._i_message_receiver.receiveAsync(Duration)
  - com.microsoft.azure.servicebus._i_message_receiver.receiveBatch(int)
  - com.microsoft.azure.servicebus._i_message_receiver.receiveBatch(int,Duration)
  - com.microsoft.azure.servicebus._i_message_receiver.receiveBatchAsync(int)
  - com.microsoft.azure.servicebus._i_message_receiver.receiveBatchAsync(int,Duration)
  - com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessage(long)
  - com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageAsync(long)
  - com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageBatch(Collection<Long>)
  - com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageBatchAsync(Collection<Long>)
  - com.microsoft.azure.servicebus._i_message_receiver.renewMessageLock(IMessage)
  - com.microsoft.azure.servicebus._i_message_receiver.renewMessageLockAsync(IMessage)
  - com.microsoft.azure.servicebus._i_message_receiver.setPrefetchCount(int)
- uid: com.microsoft.azure.servicebus._i_message_session.getLockedUntilUtc()
  id: getLockedUntilUtc()
  parent: com.microsoft.azure.servicebus._i_message_session
  href: com.microsoft.azure.servicebus._i_message_session.yml
  langs:
  - java
  name: getLockedUntilUtc()
  nameWithType: IMessageSession.getLockedUntilUtc()
  fullName: Instant com.microsoft.azure.servicebus.IMessageSession.getLockedUntilUtc()
  overload: com.microsoft.azure.servicebus._i_message_session.getLockedUntilUtc*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSession.java
    startLine: 29
  package: com.microsoft.azure.servicebus
  syntax:
    content: public Instant getLockedUntilUtc()
    return:
      type: 328f8254
      description: <p>Gets the time that the session identified by <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref> is locked until for this client. </p>
- uid: com.microsoft.azure.servicebus._i_message_session.getSessionId()
  id: getSessionId()
  parent: com.microsoft.azure.servicebus._i_message_session
  href: com.microsoft.azure.servicebus._i_message_session.yml
  langs:
  - java
  name: getSessionId()
  nameWithType: IMessageSession.getSessionId()
  fullName: String com.microsoft.azure.servicebus.IMessageSession.getSessionId()
  overload: com.microsoft.azure.servicebus._i_message_session.getSessionId*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSession.java
    startLine: 24
  package: com.microsoft.azure.servicebus
  syntax: &o1
    content: public String getSessionId()
    return:
      type: "26831127"
      description: <p>Gets the SessionId. </p>
- uid: com.microsoft.azure.servicebus._i_message_session.getState()
  id: getState()
  parent: com.microsoft.azure.servicebus._i_message_session
  href: com.microsoft.azure.servicebus._i_message_session.yml
  langs:
  - java
  name: getState()
  nameWithType: IMessageSession.getState()
  fullName: byte [] com.microsoft.azure.servicebus.IMessageSession.getState()
  overload: com.microsoft.azure.servicebus._i_message_session.getState*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSession.java
    startLine: 78
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Gets the session state.</p>

    <p></p>
  syntax: &o3
    content: public byte [] getState()
    return:
      type: ccd9418d
      description: <p>The session state </p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if get state failed. </p>
- uid: com.microsoft.azure.servicebus._i_message_session.getStateAsync()
  id: getStateAsync()
  parent: com.microsoft.azure.servicebus._i_message_session
  href: com.microsoft.azure.servicebus._i_message_session.yml
  langs:
  - java
  name: getStateAsync()
  nameWithType: IMessageSession.getStateAsync()
  fullName: CompletableFuture<byte[]> com.microsoft.azure.servicebus.IMessageSession.getStateAsync()
  overload: com.microsoft.azure.servicebus._i_message_session.getStateAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSession.java
    startLine: 85
  package: com.microsoft.azure.servicebus
  summary: <p>Asynchronously gets the session state. </p>
  syntax:
    content: public CompletableFuture<byte[]> getStateAsync()
    return:
      type: 5fe2dfa4
      description: <p>a CompletableFuture representing the pending session state retrieving. </p>
  see:
  - type: com.microsoft.azure.servicebus._i_message_session.getState()
    description: IMessageSession::getState
- uid: com.microsoft.azure.servicebus._i_message_session.renewSessionLock()
  id: renewSessionLock()
  parent: com.microsoft.azure.servicebus._i_message_session
  href: com.microsoft.azure.servicebus._i_message_session.yml
  langs:
  - java
  name: renewSessionLock()
  nameWithType: IMessageSession.renewSessionLock()
  fullName: void com.microsoft.azure.servicebus.IMessageSession.renewSessionLock()
  overload: com.microsoft.azure.servicebus._i_message_session.renewSessionLock*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSession.java
    startLine: 43
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Renews the lock on the session specified by the <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>. The lock will be renewed based on the setting specified on the entity. </p>

    <p>When you accept a session, the session is locked for this client instance by the service for a duration as specified during the Queue/Subscription creation. If processing of the session requires longer than this duration, the session-lock needs to be renewed. For each renewal, the session-lock is renewed by the entity's LockDuration. </p>

    <p>Renewal of session renews all the messages in the session as well. Each individual message need not be renewed.</p>

    <p></p>
  syntax: &o2
    content: public void renewSessionLock()
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if the renew failed. </p>
- uid: com.microsoft.azure.servicebus._i_message_session.renewSessionLockAsync()
  id: renewSessionLockAsync()
  parent: com.microsoft.azure.servicebus._i_message_session
  href: com.microsoft.azure.servicebus._i_message_session.yml
  langs:
  - java
  name: renewSessionLockAsync()
  nameWithType: IMessageSession.renewSessionLockAsync()
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageSession.renewSessionLockAsync()
  overload: com.microsoft.azure.servicebus._i_message_session.renewSessionLockAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSession.java
    startLine: 51
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Renews the lock on the session specified by the <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>. The lock will be renewed based on the setting specified on the entity.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> renewSessionLockAsync()
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending renew. </p>
  see:
  - type: com.microsoft.azure.servicebus._i_message_session.renewSessionLock()
    description: IMessageSession::renewSessionLock()
- uid: com.microsoft.azure.servicebus._i_message_session.setState(byte [])
  id: setState(byte [])
  parent: com.microsoft.azure.servicebus._i_message_session
  href: com.microsoft.azure.servicebus._i_message_session.yml
  langs:
  - java
  name: setState(byte[] state)
  nameWithType: IMessageSession.setState(byte[] state)
  fullName: void com.microsoft.azure.servicebus.IMessageSession.setState(byte[] state)
  overload: com.microsoft.azure.servicebus._i_message_session.setState*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSession.java
    startLine: 60
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Set a custom state on the session which can be later retrieved using <xref uid="com.microsoft.azure.servicebus._i_message_session.getState()" data-throw-if-not-resolved="false">IMessageSession#getState()</xref>.</p>

    <p></p>
  syntax: &o4
    content: public void setState(byte[] state)
    parameters:
    - id: state
      type: ccd9418d
      description: <p>The session state. </p>
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if the set state failed. </p>
- uid: com.microsoft.azure.servicebus._i_message_session.setStateAsync(byte [])
  id: setStateAsync(byte [])
  parent: com.microsoft.azure.servicebus._i_message_session
  href: com.microsoft.azure.servicebus._i_message_session.yml
  langs:
  - java
  name: setStateAsync(byte[] state)
  nameWithType: IMessageSession.setStateAsync(byte[] state)
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageSession.setStateAsync(byte[] state)
  overload: com.microsoft.azure.servicebus._i_message_session.setStateAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IMessageSession.java
    startLine: 69
  package: com.microsoft.azure.servicebus
  summary: >-
    <p>Asynchronously set a custom state on the session which can be later retrieved using <xref uid="com.microsoft.azure.servicebus._i_message_session.getState()" data-throw-if-not-resolved="false">IMessageSession#getState()</xref>.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> setStateAsync(byte[] state)
    parameters:
    - id: state
      type: ccd9418d
      description: <p>The session state. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending session state setting. </p>
  see:
  - type: com.microsoft.azure.servicebus._i_message_session.setState(byte [])
    description: IMessageSession::setState
references:
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.servicebus._i_message_session.getSessionId*
  name: getSessionId
  nameWithType: IMessageSession.getSessionId
  fullName: String com.microsoft.azure.servicebus.IMessageSession.getSessionId
  package: com.microsoft.azure.servicebus
- uid: 328f8254
  spec.java:
  - name: Instant
    fullName: Instant
- uid: com.microsoft.azure.servicebus._i_message_session.getLockedUntilUtc*
  name: getLockedUntilUtc
  nameWithType: IMessageSession.getLockedUntilUtc
  fullName: Instant com.microsoft.azure.servicebus.IMessageSession.getLockedUntilUtc
  package: com.microsoft.azure.servicebus
- uid: 8256ba40
  spec.java:
  - name: InterruptedException
    fullName: InterruptedException
- uid: 73fec9fb
  spec.java:
  - name: ServiceBusException
    fullName: ServiceBusException
- uid: com.microsoft.azure.servicebus._i_message_session.renewSessionLock*
  name: renewSessionLock
  nameWithType: IMessageSession.renewSessionLock
  fullName: void com.microsoft.azure.servicebus.IMessageSession.renewSessionLock
  package: com.microsoft.azure.servicebus
- uid: db03ee24
  spec.java:
  - name: CompletableFuture<Void>
    fullName: CompletableFuture<Void>
- uid: com.microsoft.azure.servicebus._i_message_session.renewSessionLockAsync*
  name: renewSessionLockAsync
  nameWithType: IMessageSession.renewSessionLockAsync
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageSession.renewSessionLockAsync
  package: com.microsoft.azure.servicebus
- uid: ccd9418d
  spec.java:
  - name: byte []
    fullName: byte []
- uid: com.microsoft.azure.servicebus._i_message_session.setState*
  name: setState
  nameWithType: IMessageSession.setState
  fullName: void com.microsoft.azure.servicebus.IMessageSession.setState
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus._i_message_session.setStateAsync*
  name: setStateAsync
  nameWithType: IMessageSession.setStateAsync
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageSession.setStateAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus._i_message_session.getState*
  name: getState
  nameWithType: IMessageSession.getState
  fullName: byte [] com.microsoft.azure.servicebus.IMessageSession.getState
  package: com.microsoft.azure.servicebus
- uid: 5fe2dfa4
  spec.java:
  - name: CompletableFuture<byte[]>
    fullName: CompletableFuture<byte[]>
- uid: com.microsoft.azure.servicebus._i_message_session.getStateAsync*
  name: getStateAsync
  nameWithType: IMessageSession.getStateAsync
  fullName: CompletableFuture<byte[]> com.microsoft.azure.servicebus.IMessageSession.getStateAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus._i_message_receiver.abandon(UUID)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: abandon(UUID lockToken)
  nameWithType: IMessageReceiver.abandon(UUID lockToken)
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.abandon(UUID lockToken)
  type: Method
  summary: >-
    <p>Abandon <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message</p>

    <p></p>
  syntax:
    content: public void abandon(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.abandon(UUID,Map<String, Object>)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: abandon(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: IMessageReceiver.abandon(UUID lockToken, Map<String, Object> propertiesToModify)
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.abandon(UUID lockToken, Map<String, Object> propertiesToModify)
  type: Method
  summary: >-
    <p>Abandon <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message</p>

    <p></p>
  syntax:
    content: public void abandon(UUID lockToken, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    - id: propertiesToModify
      type: e7b06046
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> properties to modify. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.abandonAsync(UUID)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: abandonAsync(UUID lockToken)
  nameWithType: IMessageReceiver.abandonAsync(UUID lockToken)
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(UUID lockToken)
  type: Method
  summary: >-
    <p>Asynchronously abandon <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> with lock token. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> abandonAsync(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending abandon. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.abandonAsync(UUID,Map<String, Object>)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: IMessageReceiver.abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  type: Method
  summary: >-
    <p>Asynchronously abandon <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> with lock token and updated message property. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    - id: propertiesToModify
      type: e7b06046
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> properties to modify. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending abandon. </p>
- uid: com.microsoft.azure.servicebus._i_closeable.close()
  parent: com.microsoft.azure.servicebus._i_closeable
  href: com.microsoft.azure.servicebus._i_closeable.yml
  name: close()
  nameWithType: ICloseable.close()
  fullName: void com.microsoft.azure.servicebus.ICloseable.close()
  type: Method
  summary: <p>Synchronously closes and disposes any resources associated with this object. Calling this method is equivalent of calling . This method blocks until this object is closed. </p>
  syntax:
    content: public void close()
- uid: com.microsoft.azure.servicebus._i_closeable.closeAsync()
  parent: com.microsoft.azure.servicebus._i_closeable
  href: com.microsoft.azure.servicebus._i_closeable.yml
  name: closeAsync()
  nameWithType: ICloseable.closeAsync()
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.ICloseable.closeAsync()
  type: Method
  summary: <p>Closes and disposes any resources associated with this object. An object cannot be used after it is closed. This is an asynchronous method that returns a CompletableFuture immediately. This object is completely closed when the returned CompletableFuture is completed. </p>
  syntax:
    content: public CompletableFuture<Void> closeAsync()
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the closing of this object. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.complete(UUID)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: complete(UUID lockToken)
  nameWithType: IMessageReceiver.complete(UUID lockToken)
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.complete(UUID lockToken)
  type: Method
  summary: >-
    <p>Completes a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> using its lock token. This will delete the message from the service.</p>

    <p></p>
  syntax:
    content: public void complete(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.completeAsync(UUID)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: completeAsync(UUID lockToken)
  nameWithType: IMessageReceiver.completeAsync(UUID lockToken)
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.completeAsync(UUID lockToken)
  type: Method
  summary: >-
    <p>Asynchronously completes a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> using its lock token. This will delete the message from the service.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> completeAsync(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending complete. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: deadLetter(UUID lockToken)
  nameWithType: IMessageReceiver.deadLetter(UUID lockToken)
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID lockToken)
  type: Method
  summary: >-
    <p>Moves a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue.</p>

    <p></p>
  syntax:
    content: public void deadLetter(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID,Map<String, Object>)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: IMessageReceiver.deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)
  type: Method
  summary: >-
    <p>Moves a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with modified message properties.</p>

    <p></p>
  syntax:
    content: public void deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    - id: propertiesToModify
      type: e7b06046
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> properties to modify. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID,String,String)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  nameWithType: IMessageReceiver.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  type: Method
  summary: >-
    <p>Moves a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description.</p>

    <p></p>
  syntax:
    content: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    - id: deadLetterReason
      type: "26831127"
      description: <p>The deadletter reason. </p>
    - id: deadLetterErrorDescription
      type: "26831127"
      description: <p>The deadletter error description. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.deadLetter(UUID,String,String,Map<String, Object>)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  nameWithType: IMessageReceiver.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  type: Method
  summary: >-
    <p>Moves a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description and modified properties.</p>

    <p></p>
  syntax:
    content: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    - id: deadLetterReason
      type: "26831127"
      description: <p>The deadletter reason. </p>
    - id: deadLetterErrorDescription
      type: "26831127"
      description: <p>The deadletter error description. </p>
    - id: propertiesToModify
      type: e7b06046
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> properties to modify. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: deadLetterAsync(UUID lockToken)
  nameWithType: IMessageReceiver.deadLetterAsync(UUID lockToken)
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID lockToken)
  type: Method
  summary: >-
    <p>Asynchronously moves a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending deadletter. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID,Map<String, Object>)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: IMessageReceiver.deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  type: Method
  summary: >-
    <p>Asynchronously moves a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with modified properties.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    - id: propertiesToModify
      type: e7b06046
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> properties to modify. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending deadletter. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID,String,String)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  nameWithType: IMessageReceiver.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  type: Method
  summary: >-
    <p>Asynchronously moves a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    - id: deadLetterReason
      type: "26831127"
      description: <p>The deadletter reason. </p>
    - id: deadLetterErrorDescription
      type: "26831127"
      description: <p>The deadletter error description. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending deadletter. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.deadLetterAsync(UUID,String,String,Map<String, Object>)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  nameWithType: IMessageReceiver.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  type: Method
  summary: >-
    <p>Asynchronously moves a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to the deadletter sub-queue with deadletter reason and error description and modified properties.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    - id: deadLetterReason
      type: "26831127"
      description: <p>The deadletter reason. </p>
    - id: deadLetterErrorDescription
      type: "26831127"
      description: <p>The deadletter error description. </p>
    - id: propertiesToModify
      type: e7b06046
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> properties to modify. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending deadletter. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.defer(UUID)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: defer(UUID lockToken)
  nameWithType: IMessageReceiver.defer(UUID lockToken)
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.defer(UUID lockToken)
  type: Method
  summary: >-
    <p>Defers a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> using its lock token. This will move message into deferred subqueue.</p>

    <p></p>
  syntax:
    content: public void defer(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.defer(UUID,Map<String, Object>)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: defer(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: IMessageReceiver.defer(UUID lockToken, Map<String, Object> propertiesToModify)
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.defer(UUID lockToken, Map<String, Object> propertiesToModify)
  type: Method
  summary: >-
    <p>Defers a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> using its lock token with modified message property. This will move message into deferred subqueue.</p>

    <p></p>
  syntax:
    content: public void defer(UUID lockToken, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    - id: propertiesToModify
      type: e7b06046
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> properties to modify. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.deferAsync(UUID)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: deferAsync(UUID lockToken)
  nameWithType: IMessageReceiver.deferAsync(UUID lockToken)
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(UUID lockToken)
  type: Method
  summary: >-
    <p>Asynchronously defers a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> using its lock token. This will move message into deferred subqueue.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> deferAsync(UUID lockToken)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending defer. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.deferAsync(UUID,Map<String, Object>)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: deferAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: IMessageReceiver.deferAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  type: Method
  summary: >-
    <p>Asynchronously defers a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> using its lock token with modified message propert. This will move message into deferred subqueue.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> deferAsync(UUID lockToken, Map<String, Object> propertiesToModify)
    parameters:
    - id: lockToken
      type: add9545a
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> lock token <xref uid="com.microsoft.azure.servicebus._message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    - id: propertiesToModify
      type: e7b06046
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> properties to modify. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending defer. </p>
- uid: com.microsoft.azure.servicebus._i_message_entity_client.getEntityPath()
  parent: com.microsoft.azure.servicebus._i_message_entity_client
  href: com.microsoft.azure.servicebus._i_message_entity_client.yml
  name: getEntityPath()
  nameWithType: IMessageEntityClient.getEntityPath()
  fullName: String com.microsoft.azure.servicebus.IMessageEntityClient.getEntityPath()
  type: Method
  summary: >-
    <p>Gets the path of the entity this client is sending messages to or receiving messages from.</p>

    <p></p>
  syntax:
    content: public String getEntityPath()
    return:
      type: "26831127"
      description: <p>path of the entity this client is connecting to </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.getPrefetchCount()
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: getPrefetchCount()
  nameWithType: IMessageReceiver.getPrefetchCount()
  fullName: int com.microsoft.azure.servicebus.IMessageReceiver.getPrefetchCount()
  type: Method
  summary: >-
    <p>Get the prefetch value set.</p>

    <p></p>
  syntax:
    content: public int getPrefetchCount()
    return:
      type: f75371fa
      description: <p>The set prefetch count value. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.getReceiveMode()
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: getReceiveMode()
  nameWithType: IMessageReceiver.getReceiveMode()
  fullName: ReceiveMode com.microsoft.azure.servicebus.IMessageReceiver.getReceiveMode()
  type: Method
  summary: >-
    <p>Get current receiver's <xref uid="com.microsoft.azure.servicebus._receive_mode" data-throw-if-not-resolved="false">ReceiveMode</xref>.</p>

    <p></p>
  syntax:
    content: public ReceiveMode getReceiveMode()
    return:
      type: com.microsoft.azure.servicebus._receive_mode
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._receive_mode" data-throw-if-not-resolved="false">ReceiveMode</xref>

        </p>
- uid: com.microsoft.azure.servicebus._i_message_browser.peek()
  parent: com.microsoft.azure.servicebus._i_message_browser
  href: com.microsoft.azure.servicebus._i_message_browser.yml
  name: peek()
  nameWithType: IMessageBrowser.peek()
  fullName: IMessage com.microsoft.azure.servicebus.IMessageBrowser.peek()
  type: Method
  summary: >-
    <p>reads next the active message without changing the state of the receiver or the message source. The first call to <xref uid="com.microsoft.azure.servicebus._i_message_browser.peek()" data-throw-if-not-resolved="false">IMessageBrowser#peek()</xref> fetches the first active message for this receiver. Each subsequent call fetches the subsequent message in the entity.</p>

    <p></p>
  syntax:
    content: public IMessage peek()
    return:
      type: com.microsoft.azure.servicebus._i_message
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> peeked </p>
- uid: com.microsoft.azure.servicebus._i_message_browser.peek(long)
  parent: com.microsoft.azure.servicebus._i_message_browser
  href: com.microsoft.azure.servicebus._i_message_browser.yml
  name: peek(long fromSequenceNumber)
  nameWithType: IMessageBrowser.peek(long fromSequenceNumber)
  fullName: IMessage com.microsoft.azure.servicebus.IMessageBrowser.peek(long fromSequenceNumber)
  type: Method
  summary: >-
    <p>Reads next the active message without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax:
    content: public IMessage peek(long fromSequenceNumber)
    parameters:
    - id: fromSequenceNumber
      type: 0364520f
      description: <p>The sequence number from where to read the message. </p>
    return:
      type: com.microsoft.azure.servicebus._i_message
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> peeked </p>
- uid: com.microsoft.azure.servicebus._i_message_browser.peekAsync()
  parent: com.microsoft.azure.servicebus._i_message_browser
  href: com.microsoft.azure.servicebus._i_message_browser.yml
  name: peekAsync()
  nameWithType: IMessageBrowser.peekAsync()
  fullName: CompletableFuture<IMessage> com.microsoft.azure.servicebus.IMessageBrowser.peekAsync()
  type: Method
  summary: >-
    <p>Asynchronously reads the active messages without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<IMessage> peekAsync()
    return:
      type: 9cdf14d0com.microsoft.azure.servicebus._i_messagea08ddfce
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> peeked </p>
- uid: com.microsoft.azure.servicebus._i_message_browser.peekAsync(long)
  parent: com.microsoft.azure.servicebus._i_message_browser
  href: com.microsoft.azure.servicebus._i_message_browser.yml
  name: peekAsync(long fromSequenceNumber)
  nameWithType: IMessageBrowser.peekAsync(long fromSequenceNumber)
  fullName: CompletableFuture<IMessage> com.microsoft.azure.servicebus.IMessageBrowser.peekAsync(long fromSequenceNumber)
  type: Method
  summary: >-
    <p>Asynchronously reads next the active message without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<IMessage> peekAsync(long fromSequenceNumber)
    parameters:
    - id: fromSequenceNumber
      type: 0364520f
      description: <p>The sequence number from where to read the message. </p>
    return:
      type: 9cdf14d0com.microsoft.azure.servicebus._i_messagea08ddfce
      description: <p>CompletableFuture that returns <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> peeked. </p>
- uid: com.microsoft.azure.servicebus._i_message_browser.peekBatch(int)
  parent: com.microsoft.azure.servicebus._i_message_browser
  href: com.microsoft.azure.servicebus._i_message_browser.yml
  name: peekBatch(int messageCount)
  nameWithType: IMessageBrowser.peekBatch(int messageCount)
  fullName: Collection<IMessage> com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(int messageCount)
  type: Method
  summary: >-
    <p>Reads next batch of the active messages without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax:
    content: public Collection<IMessage> peekBatch(int messageCount)
    parameters:
    - id: messageCount
      type: f75371fa
      description: <p>The number of messages. </p>
    return:
      type: 12ebb11acom.microsoft.azure.servicebus._i_messagea08ddfce
      description: <p>Batch of <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> peeked </p>
- uid: com.microsoft.azure.servicebus._i_message_browser.peekBatch(long,int)
  parent: com.microsoft.azure.servicebus._i_message_browser
  href: com.microsoft.azure.servicebus._i_message_browser.yml
  name: peekBatch(long fromSequenceNumber, int messageCount)
  nameWithType: IMessageBrowser.peekBatch(long fromSequenceNumber, int messageCount)
  fullName: Collection<IMessage> com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(long fromSequenceNumber, int messageCount)
  type: Method
  summary: >-
    <p>Reads next batch of the active messages without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax:
    content: public Collection<IMessage> peekBatch(long fromSequenceNumber, int messageCount)
    parameters:
    - id: fromSequenceNumber
      type: 0364520f
      description: <p>The sequence number from where to read the message. </p>
    - id: messageCount
      type: f75371fa
      description: <p>The number of messages. </p>
    return:
      type: 12ebb11acom.microsoft.azure.servicebus._i_messagea08ddfce
      description: <p>Batch of <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> peeked </p>
- uid: com.microsoft.azure.servicebus._i_message_browser.peekBatchAsync(int)
  parent: com.microsoft.azure.servicebus._i_message_browser
  href: com.microsoft.azure.servicebus._i_message_browser.yml
  name: peekBatchAsync(int messageCount)
  nameWithType: IMessageBrowser.peekBatchAsync(int messageCount)
  fullName: CompletableFuture<Collection<IMessage>> com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(int messageCount)
  type: Method
  summary: >-
    <p>Asynchronously reads the next batch of active messages without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Collection<IMessage>> peekBatchAsync(int messageCount)
    parameters:
    - id: messageCount
      type: f75371fa
      description: <p>The number of messages. </p>
    return:
      type: 9161dfdccom.microsoft.azure.servicebus._i_messagee7daa122
      description: <p>CompletableFuture that returns batch of <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> peeked. </p>
- uid: com.microsoft.azure.servicebus._i_message_browser.peekBatchAsync(long,int)
  parent: com.microsoft.azure.servicebus._i_message_browser
  href: com.microsoft.azure.servicebus._i_message_browser.yml
  name: peekBatchAsync(long fromSequenceNumber, int messageCount)
  nameWithType: IMessageBrowser.peekBatchAsync(long fromSequenceNumber, int messageCount)
  fullName: CompletableFuture<Collection<IMessage>> com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(long fromSequenceNumber, int messageCount)
  type: Method
  summary: >-
    <p>Asynchronously reads the next batch of active messages without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Collection<IMessage>> peekBatchAsync(long fromSequenceNumber, int messageCount)
    parameters:
    - id: fromSequenceNumber
      type: 0364520f
      description: <p>The sequence number from where to read the message. </p>
    - id: messageCount
      type: f75371fa
      description: <p>The number of messages. </p>
    return:
      type: 9161dfdccom.microsoft.azure.servicebus._i_messagee7daa122
      description: <p>CompletableFuture that returns batch of <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> peeked. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receive()
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: receive()
  nameWithType: IMessageReceiver.receive()
  fullName: IMessage com.microsoft.azure.servicebus.IMessageReceiver.receive()
  type: Method
  summary: >-
    <p>Receives a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> with default server wait time.</p>

    <p></p>
  syntax:
    content: public IMessage receive()
    return:
      type: com.microsoft.azure.servicebus._i_message
      description: <p>The received <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> or null if there is no message. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receive(Duration)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: receive(Duration serverWaitTime)
  nameWithType: IMessageReceiver.receive(Duration serverWaitTime)
  fullName: IMessage com.microsoft.azure.servicebus.IMessageReceiver.receive(Duration serverWaitTime)
  type: Method
  summary: >-
    <p>Receives a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> with specified server wait time.</p>

    <p></p>
  syntax:
    content: public IMessage receive(Duration serverWaitTime)
    parameters:
    - id: serverWaitTime
      type: e02a2de0
      description: <p>The server wait time </p>
    return:
      type: com.microsoft.azure.servicebus._i_message
      description: <p>The received <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> or null if there is no message. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveAsync()
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: receiveAsync()
  nameWithType: IMessageReceiver.receiveAsync()
  fullName: CompletableFuture<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveAsync()
  type: Method
  summary: >-
    <p>Receives a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> from Azure Service Bus.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<IMessage> receiveAsync()
    return:
      type: 9cdf14d0com.microsoft.azure.servicebus._i_messagea08ddfce
      description: <p>The message received. Returns null if no message is found </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveAsync(Duration)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: receiveAsync(Duration serverWaitTime)
  nameWithType: IMessageReceiver.receiveAsync(Duration serverWaitTime)
  fullName: CompletableFuture<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveAsync(Duration serverWaitTime)
  type: Method
  summary: >-
    <p>Receives a <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> from Azure Service Bus with server wait time.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<IMessage> receiveAsync(Duration serverWaitTime)
    parameters:
    - id: serverWaitTime
      type: e02a2de0
      description: <p>The time the client waits for receiving a message before it times out. </p>
    return:
      type: 9cdf14d0com.microsoft.azure.servicebus._i_messagea08ddfce
      description: <p>The message received. Returns null if no message is found </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveBatch(int)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: receiveBatch(int maxMessageCount)
  nameWithType: IMessageReceiver.receiveBatch(int maxMessageCount)
  fullName: Collection<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveBatch(int maxMessageCount)
  type: Method
  summary: >-
    <p>Receives a maximum of maxMessageCount <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> from Azure Service Bus.</p>

    <p></p>
  syntax:
    content: public Collection<IMessage> receiveBatch(int maxMessageCount)
    parameters:
    - id: maxMessageCount
      type: f75371fa
      description: <p>The maximum number of messages that will be received. </p>
    return:
      type: 12ebb11acom.microsoft.azure.servicebus._i_messagea08ddfce
      description: <p>List of messages received. Returns null if no message is found. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveBatch(int,Duration)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: receiveBatch(int maxMessageCount, Duration serverWaitTime)
  nameWithType: IMessageReceiver.receiveBatch(int maxMessageCount, Duration serverWaitTime)
  fullName: Collection<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveBatch(int maxMessageCount, Duration serverWaitTime)
  type: Method
  summary: >-
    <p>Receives a maximum of maxMessageCount <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> from Azure Service Bus with server wait time.</p>

    <p></p>
  syntax:
    content: public Collection<IMessage> receiveBatch(int maxMessageCount, Duration serverWaitTime)
    parameters:
    - id: maxMessageCount
      type: f75371fa
      description: <p>The maximum number of messages that will be received. </p>
    - id: serverWaitTime
      type: e02a2de0
      description: <p>The time the client waits for receiving a message before it times out. </p>
    return:
      type: 12ebb11acom.microsoft.azure.servicebus._i_messagea08ddfce
      description: <p>List of messages received. Returns null if no message is found. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveBatchAsync(int)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: receiveBatchAsync(int maxMessageCount)
  nameWithType: IMessageReceiver.receiveBatchAsync(int maxMessageCount)
  fullName: CompletableFuture<Collection<IMessage>> com.microsoft.azure.servicebus.IMessageReceiver.receiveBatchAsync(int maxMessageCount)
  type: Method
  summary: >-
    <p>Asynchronously receives a maximum of maxMessageCount <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> from the entity.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Collection<IMessage>> receiveBatchAsync(int maxMessageCount)
    parameters:
    - id: maxMessageCount
      type: f75371fa
      description: <p>The maximum number of messages that will be received. </p>
    return:
      type: 9161dfdccom.microsoft.azure.servicebus._i_messagee7daa122
      description: <p>a CompletableFuture representing the pending receive. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveBatchAsync(int,Duration)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: receiveBatchAsync(int maxMessageCount, Duration serverWaitTime)
  nameWithType: IMessageReceiver.receiveBatchAsync(int maxMessageCount, Duration serverWaitTime)
  fullName: CompletableFuture<Collection<IMessage>> com.microsoft.azure.servicebus.IMessageReceiver.receiveBatchAsync(int maxMessageCount, Duration serverWaitTime)
  type: Method
  summary: >-
    <p>Asynchronously receives a maximum of maxMessageCount <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> from Azure Service Bus with server wait time.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Collection<IMessage>> receiveBatchAsync(int maxMessageCount, Duration serverWaitTime)
    parameters:
    - id: maxMessageCount
      type: f75371fa
      description: <p>The maximum number of messages that will be received. </p>
    - id: serverWaitTime
      type: e02a2de0
      description: <p>The time the client waits for receiving a message before it times out. </p>
    return:
      type: 9161dfdccom.microsoft.azure.servicebus._i_messagee7daa122
      description: <p>a CompletableFuture representing the pending receive. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessage(long)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: receiveDeferredMessage(long sequenceNumber)
  nameWithType: IMessageReceiver.receiveDeferredMessage(long sequenceNumber)
  fullName: IMessage com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessage(long sequenceNumber)
  type: Method
  summary: >-
    <p>Receives a deferred <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref>. Deferred messages can only be received by using sequence number.</p>

    <p></p>
  syntax:
    content: public IMessage receiveDeferredMessage(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: 0364520f
      description: <p>The <xref uid="com.microsoft.azure.servicebus._message.getSequenceNumber()" data-throw-if-not-resolved="false">Message#getSequenceNumber()</xref>. </p>
    return:
      type: com.microsoft.azure.servicebus._i_message
      description: <p>The received <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> or null if there is no message for given sequence number. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageAsync(long)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: receiveDeferredMessageAsync(long sequenceNumber)
  nameWithType: IMessageReceiver.receiveDeferredMessageAsync(long sequenceNumber)
  fullName: CompletableFuture<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageAsync(long sequenceNumber)
  type: Method
  summary: >-
    <p>Asynchronously receives a specific deferred <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> identified by sequence number.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<IMessage> receiveDeferredMessageAsync(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: 0364520f
      description: <p>The sequence number of the message that will be received. </p>
    return:
      type: 9cdf14d0com.microsoft.azure.servicebus._i_messagea08ddfce
      description: <p>a CompletableFuture representing the pending receive. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageBatch(Collection<Long>)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: receiveDeferredMessageBatch(Collection<Long> sequenceNumbers)
  nameWithType: IMessageReceiver.receiveDeferredMessageBatch(Collection<Long> sequenceNumbers)
  fullName: Collection<IMessage> com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageBatch(Collection<Long> sequenceNumbers)
  type: Method
  summary: >-
    <p>Receives a batch of deferred <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref>.</p>

    <p></p>
  syntax:
    content: public Collection<IMessage> receiveDeferredMessageBatch(Collection<Long> sequenceNumbers)
    parameters:
    - id: sequenceNumbers
      type: f936a554
      description: <p>The sequence numbers of desired deferred messages. </p>
    return:
      type: 12ebb11acom.microsoft.azure.servicebus._i_messagea08ddfce
      description: <p>List of messages received. Returns null if no message is found. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.receiveDeferredMessageBatchAsync(Collection<Long>)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: receiveDeferredMessageBatchAsync(Collection<Long> sequenceNumbers)
  nameWithType: IMessageReceiver.receiveDeferredMessageBatchAsync(Collection<Long> sequenceNumbers)
  fullName: CompletableFuture<Collection<IMessage>> com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageBatchAsync(Collection<Long> sequenceNumbers)
  type: Method
  summary: >-
    <p>Asynchronously receives a set of deferred <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> from the entity.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Collection<IMessage>> receiveDeferredMessageBatchAsync(Collection<Long> sequenceNumbers)
    parameters:
    - id: sequenceNumbers
      type: f936a554
      description: <p>The sequence numbers of the message that will be received. </p>
    return:
      type: 9161dfdccom.microsoft.azure.servicebus._i_messagee7daa122
      description: <p>a CompletableFuture representing the pending receive. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.renewMessageLock(IMessage)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: renewMessageLock(IMessage message)
  nameWithType: IMessageReceiver.renewMessageLock(IMessage message)
  fullName: Instant com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLock(IMessage message)
  type: Method
  summary: >-
    <p>Renews the lock on the message specified by the lock token. The lock will be renewed based on the setting specified on the entity. When a message is received in <xref uid="com.microsoft.azure.servicebus._receive_mode.PEEKLOCK" data-throw-if-not-resolved="false">ReceiveMode#PEEKLOCK</xref> mode, the message is locked on the server for this receiver instance for a duration as specified during the Queue/Subscription creation (LockDuration). If processing of the message requires longer than this duration, the lock needs to be renewed. For each renewal, the lock is renewed by the entity's LockDuration.</p>

    <p></p>
  syntax:
    content: public Instant renewMessageLock(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus._i_message
      description: <p>The <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to be renewed </p>
    return:
      type: 328f8254
      description: <p>The new locked until UTC time. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.renewMessageLockAsync(IMessage)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: renewMessageLockAsync(IMessage message)
  nameWithType: IMessageReceiver.renewMessageLockAsync(IMessage message)
  fullName: CompletableFuture<Instant> com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLockAsync(IMessage message)
  type: Method
  summary: >-
    <p>Asynchronously renews the lock on the message specified by the lock token. The lock will be renewed based on the setting specified on the entity.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Instant> renewMessageLockAsync(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus._i_message
      description: <p>The <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to be renewed </p>
    return:
      type: 6666b360
      description: <p>a CompletableFuture representing the pending renew. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver.setPrefetchCount(int)
  parent: com.microsoft.azure.servicebus._i_message_receiver
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: setPrefetchCount(int prefetchCount)
  nameWithType: IMessageReceiver.setPrefetchCount(int prefetchCount)
  fullName: void com.microsoft.azure.servicebus.IMessageReceiver.setPrefetchCount(int prefetchCount)
  type: Method
  summary: >-
    <p>Set the prefetch count of the receiver. Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when and before the application asks for one using Receive. Setting a non-zero value prefetches PrefetchCount number of messages. Setting the value to zero turns prefetch off. For RECEIVEANDDELETE mode, the default value is 0. For PEEKLOCK mode, the default value is 100. </p>

    <p>The value cannot be set until the receiver is created.</p>

    <p></p>
  syntax:
    content: public void setPrefetchCount(int prefetchCount)
    parameters:
    - id: prefetchCount
      type: f75371fa
      description: <p>The desired prefetch count. </p>
- uid: com.microsoft.azure.servicebus._i_message_receiver
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus._i_message_receiver.yml
  name: IMessageReceiver
  nameWithType: IMessageReceiver
  fullName: com.microsoft.azure.servicebus.IMessageReceiver
  type: Interface
  summary: <p>Defines message receiver interface. The MessageReceiver can be used to receive messages from Queues and Subscriptions and acknowledge them. </p>
  syntax:
    content: public interface IMessageReceiver extends IMessageEntityClient,IMessageBrowser
- uid: com.microsoft.azure.servicebus._message_session
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus._message_session.yml
  name: MessageSession
  nameWithType: MessageSession
  fullName: com.microsoft.azure.servicebus.MessageSession
  type: Class
  syntax:
    content: public class MessageSession
- uid: com.microsoft.azure.servicebus._message_session.getSessionId()
  parent: com.microsoft.azure.servicebus._message_session
  href: com.microsoft.azure.servicebus._message_session.yml
  name: getSessionId()
  nameWithType: MessageSession.getSessionId()
  fullName: String com.microsoft.azure.servicebus.MessageSession.getSessionId()
  type: Method
  syntax:
    content: public String getSessionId()
    return:
      type: "26831127"
      description: <p>Gets the SessionId. </p>
- uid: com.microsoft.azure.servicebus._message_session.getLockedUntilUtc()
  parent: com.microsoft.azure.servicebus._message_session
  href: com.microsoft.azure.servicebus._message_session.yml
  name: getLockedUntilUtc()
  nameWithType: MessageSession.getLockedUntilUtc()
  fullName: Instant com.microsoft.azure.servicebus.MessageSession.getLockedUntilUtc()
  type: Method
  syntax:
    content: public Instant getLockedUntilUtc()
    return:
      type: 328f8254
      description: <p>Gets the time that the session identified by <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref> is locked until for this client. </p>
- uid: com.microsoft.azure.servicebus._i_message_session.getSessionId()
  parent: com.microsoft.azure.servicebus._i_message_session
  href: com.microsoft.azure.servicebus._i_message_session.yml
  name: getSessionId()
  nameWithType: IMessageSession.getSessionId()
  fullName: String com.microsoft.azure.servicebus.IMessageSession.getSessionId()
  type: Method
  syntax: *o1
- uid: com.microsoft.azure.servicebus._message_session.renewSessionLock()
  parent: com.microsoft.azure.servicebus._message_session
  href: com.microsoft.azure.servicebus._message_session.yml
  name: renewSessionLock()
  nameWithType: MessageSession.renewSessionLock()
  fullName: void com.microsoft.azure.servicebus.MessageSession.renewSessionLock()
  type: Method
  summary: >-
    <p>Renews the lock on the session specified by the <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>. The lock will be renewed based on the setting specified on the entity. </p>

    <p>When you accept a session, the session is locked for this client instance by the service for a duration as specified during the Queue/Subscription creation. If processing of the session requires longer than this duration, the session-lock needs to be renewed. For each renewal, the session-lock is renewed by the entity's LockDuration. </p>

    <p>Renewal of session renews all the messages in the session as well. Each individual message need not be renewed.</p>

    <p></p>
  syntax:
    content: public void renewSessionLock()
- uid: com.microsoft.azure.servicebus.primitives._service_bus_exception
  parent: com.microsoft.azure.servicebus.primitives
  href: com.microsoft.azure.servicebus.primitives._service_bus_exception.yml
  name: ServiceBusException
  nameWithType: ServiceBusException
  fullName: com.microsoft.azure.servicebus.primitives.ServiceBusException
  type: Class
  summary: <p>This is the base exception that service bus will generate for all error cases. </p>
  syntax:
    content: public class ServiceBusException
- uid: com.microsoft.azure.servicebus._message_session.renewSessionLockAsync()
  parent: com.microsoft.azure.servicebus._message_session
  href: com.microsoft.azure.servicebus._message_session.yml
  name: renewSessionLockAsync()
  nameWithType: MessageSession.renewSessionLockAsync()
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.MessageSession.renewSessionLockAsync()
  type: Method
  summary: >-
    <p>Renews the lock on the session specified by the <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>. The lock will be renewed based on the setting specified on the entity.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> renewSessionLockAsync()
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending renew. </p>
- uid: com.microsoft.azure.servicebus._i_message_session.renewSessionLock()
  parent: com.microsoft.azure.servicebus._i_message_session
  href: com.microsoft.azure.servicebus._i_message_session.yml
  name: renewSessionLock()
  nameWithType: IMessageSession.renewSessionLock()
  fullName: void com.microsoft.azure.servicebus.IMessageSession.renewSessionLock()
  type: Method
  summary: >-
    <p>Renews the lock on the session specified by the <xref uid="com.microsoft.azure.servicebus._i_message_session.getSessionId()" data-throw-if-not-resolved="false">IMessageSession#getSessionId()</xref>. The lock will be renewed based on the setting specified on the entity. </p>

    <p>When you accept a session, the session is locked for this client instance by the service for a duration as specified during the Queue/Subscription creation. If processing of the session requires longer than this duration, the session-lock needs to be renewed. For each renewal, the session-lock is renewed by the entity's LockDuration. </p>

    <p>Renewal of session renews all the messages in the session as well. Each individual message need not be renewed.</p>

    <p></p>
  syntax: *o2
- uid: com.microsoft.azure.servicebus._message_session.setState(byte [])
  parent: com.microsoft.azure.servicebus._message_session
  href: com.microsoft.azure.servicebus._message_session.yml
  name: setState(byte[] sessionState)
  nameWithType: MessageSession.setState(byte[] sessionState)
  fullName: void com.microsoft.azure.servicebus.MessageSession.setState(byte[] sessionState)
  type: Method
  summary: >-
    <p>Set a custom state on the session which can be later retrieved using <xref uid="com.microsoft.azure.servicebus._i_message_session.getState()" data-throw-if-not-resolved="false">IMessageSession#getState()</xref>.</p>

    <p></p>
  syntax:
    content: public void setState(byte[] sessionState)
    parameters:
    - id: state
      type: ccd9418d
      description: <p>The session state. </p>
- uid: com.microsoft.azure.servicebus._i_message_session.getState()
  parent: com.microsoft.azure.servicebus._i_message_session
  href: com.microsoft.azure.servicebus._i_message_session.yml
  name: getState()
  nameWithType: IMessageSession.getState()
  fullName: byte [] com.microsoft.azure.servicebus.IMessageSession.getState()
  type: Method
  summary: >-
    <p>Gets the session state.</p>

    <p></p>
  syntax: *o3
- uid: com.microsoft.azure.servicebus._message_session.setStateAsync(byte [])
  parent: com.microsoft.azure.servicebus._message_session
  href: com.microsoft.azure.servicebus._message_session.yml
  name: setStateAsync(byte[] sessionState)
  nameWithType: MessageSession.setStateAsync(byte[] sessionState)
  fullName: CompletableFuture<Void> com.microsoft.azure.servicebus.MessageSession.setStateAsync(byte[] sessionState)
  type: Method
  summary: >-
    <p>Asynchronously set a custom state on the session which can be later retrieved using <xref uid="com.microsoft.azure.servicebus._i_message_session.getState()" data-throw-if-not-resolved="false">IMessageSession#getState()</xref>.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> setStateAsync(byte[] sessionState)
    parameters:
    - id: state
      type: ccd9418d
      description: <p>The session state. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending session state setting. </p>
- uid: com.microsoft.azure.servicebus._i_message_session.setState(byte [])
  parent: com.microsoft.azure.servicebus._i_message_session
  href: com.microsoft.azure.servicebus._i_message_session.yml
  name: setState(byte[] state)
  nameWithType: IMessageSession.setState(byte[] state)
  fullName: void com.microsoft.azure.servicebus.IMessageSession.setState(byte[] state)
  type: Method
  summary: >-
    <p>Set a custom state on the session which can be later retrieved using <xref uid="com.microsoft.azure.servicebus._i_message_session.getState()" data-throw-if-not-resolved="false">IMessageSession#getState()</xref>.</p>

    <p></p>
  syntax: *o4
- uid: com.microsoft.azure.servicebus._message_session.getState()
  parent: com.microsoft.azure.servicebus._message_session
  href: com.microsoft.azure.servicebus._message_session.yml
  name: getState()
  nameWithType: MessageSession.getState()
  fullName: byte [] com.microsoft.azure.servicebus.MessageSession.getState()
  type: Method
  summary: >-
    <p>Gets the session state.</p>

    <p></p>
  syntax:
    content: public byte [] getState()
    return:
      type: ccd9418d
      description: <p>The session state </p>
- uid: com.microsoft.azure.servicebus._message_session.getStateAsync()
  parent: com.microsoft.azure.servicebus._message_session
  href: com.microsoft.azure.servicebus._message_session.yml
  name: getStateAsync()
  nameWithType: MessageSession.getStateAsync()
  fullName: CompletableFuture<byte[]> com.microsoft.azure.servicebus.MessageSession.getStateAsync()
  type: Method
  summary: <p>Asynchronously gets the session state. </p>
  syntax:
    content: public CompletableFuture<byte[]> getStateAsync()
    return:
      type: 5fe2dfa4
      description: <p>a CompletableFuture representing the pending session state retrieving. </p>
- uid: com.microsoft.azure.servicebus._i_message_session
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus._i_message_session.yml
  name: IMessageSession
  nameWithType: IMessageSession
  fullName: com.microsoft.azure.servicebus.IMessageSession
  type: Interface
  summary: >-
    <p>Describes a Session object. <xref uid="com.microsoft.azure.servicebus._i_message_session" data-throw-if-not-resolved="false">IMessageSession</xref> can be used to perform operations on sessions. </p>

    <p>Service Bus Sessions, also called 'Groups' in the AMQP 1.0 protocol, are unbounded sequences of related messages. ServiceBus guarantees ordering of messages in a session. </p>

    <p>Any sender can create a session when submitting messages into a Topic or Queue by setting the <xref uid="" data-throw-if-not-resolved="false">Message#sessionId</xref> property on <xref uid="com.microsoft.azure.servicebus._message" data-throw-if-not-resolved="false">Message</xref> to some application defined unique identifier. At the AMQP 1.0 protocol level, this value maps to the group-id property. </p>

    <p>Sessions come into existence when there is at least one message with the session's SessionId in the Queue or Topic subscription. Once a Session exists, there is no defined moment or gesture for when the session expires or disappears. </p>
  syntax: *o5
- uid: com.microsoft.azure.servicebus._message
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus._message.yml
  name: Message
  nameWithType: Message
  fullName: com.microsoft.azure.servicebus.Message
  type: Class
  syntax:
    content: public class Message
