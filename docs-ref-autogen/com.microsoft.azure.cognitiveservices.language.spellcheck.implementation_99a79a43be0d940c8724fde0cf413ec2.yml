### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2
  id: implementation_99a79a43be0d940c8724fde0cf413ec2
  parent: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation
  children:
  - com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.BingSpellCheckOperationsImpl(Retrofit,BingSpellCheckAPIImpl)
  - com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.spellChecker()
  - com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.spellChecker(String,SpellCheckerOptionalParameter)
  - com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.spellCheckerAsync(String,SpellCheckerOptionalParameter)
  - com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.spellCheckerAsync(String,SpellCheckerOptionalParameter,final ServiceCallback<SpellCheck>)
  - com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.spellCheckerWithServiceResponseAsync(String,SpellCheckerOptionalParameter)
  - com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.spellCheckerWithServiceResponseAsync(String,String,String,String,String,String,String,ActionType,String,String,String,String,String,String,String,String,String,String,String)
  href: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.yml
  langs:
  - java
  name: BingSpellCheckOperationsImpl
  nameWithType: BingSpellCheckOperationsImpl
  fullName: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation.BingSpellCheckOperationsImpl
  type: Class
  source:
    remote: &o0
      path: cognitiveservices/data-plane/language/bingspellcheck/src/main/java/com/microsoft/azure/cognitiveservices/language/spellcheck/implementation/BingSpellCheckOperationsImpl.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java
    path: cognitiveservices/data-plane/language/bingspellcheck/src/main/java/com/microsoft/azure/cognitiveservices/language/spellcheck/implementation/BingSpellCheckOperationsImpl.java
    startLine: 35
  package: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation
  summary: <p>An instance of this class provides access to all the operations defined in <xref uid="com.microsoft.azure.cognitiveservices.language.spellcheck._bing_spell_check_operations" data-throw-if-not-resolved="false">BingSpellCheckOperations</xref>. </p>
  syntax: &o1
    content: public class BingSpellCheckOperationsImpl implements BingSpellCheckOperations
  inheritance:
  - java.lang.Object
  - com.microsoft.azure.cognitiveservices.language.spellcheck._bing_spell_check_operations
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.BingSpellCheckOperationsImpl(Retrofit,BingSpellCheckAPIImpl)
  id: BingSpellCheckOperationsImpl(Retrofit,BingSpellCheckAPIImpl)
  parent: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2
  href: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.yml
  langs:
  - java
  name: BingSpellCheckOperationsImpl(Retrofit retrofit, BingSpellCheckAPIImpl client)
  nameWithType: BingSpellCheckOperationsImpl.BingSpellCheckOperationsImpl(Retrofit retrofit, BingSpellCheckAPIImpl client)
  fullName: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation.BingSpellCheckOperationsImpl.BingSpellCheckOperationsImpl(Retrofit retrofit, BingSpellCheckAPIImpl client)
  overload: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.BingSpellCheckOperationsImpl*
  type: Constructor
  source:
    remote: *o0
    path: cognitiveservices/data-plane/language/bingspellcheck/src/main/java/com/microsoft/azure/cognitiveservices/language/spellcheck/implementation/BingSpellCheckOperationsImpl.java
    startLine: 47
  package: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation
  summary: >-
    <p>Initializes an instance of <xref uid="com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2" data-throw-if-not-resolved="false">BingSpellCheckOperationsImpl</xref>.</p>

    <p></p>
  syntax:
    content: public BingSpellCheckOperationsImpl(Retrofit retrofit, BingSpellCheckAPIImpl client)
    parameters:
    - id: retrofit
      type: 964879b9
      description: <p>the Retrofit instance built from a Retrofit Builder. </p>
    - id: client
      type: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation._bing_spell_check_a_p_i_impl
      description: <p>the instance of the service client containing this operation class. </p>
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.spellChecker()
  id: spellChecker()
  parent: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2
  href: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.yml
  langs:
  - java
  name: spellChecker()
  nameWithType: BingSpellCheckOperationsImpl.spellChecker()
  fullName: BingSpellCheckOperationsSpellCheckerParameters com.microsoft.azure.cognitiveservices.language.spellcheck.implementation.BingSpellCheckOperationsImpl.spellChecker()
  overload: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.spellChecker*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/data-plane/language/bingspellcheck/src/main/java/com/microsoft/azure/cognitiveservices/language/spellcheck/implementation/BingSpellCheckOperationsImpl.java
    startLine: 194
  package: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation
  summary: >-
    <p>The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.</p>

    <p></p>
  syntax:
    content: public BingSpellCheckOperationsSpellCheckerParameters spellChecker()
    return:
      type: d39448e0
      description: <p>the first stage of the spellChecker call </p>
  overridden: com.microsoft.azure.cognitiveservices.language.spellcheck._bing_spell_check_operations.spellChecker()
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.spellChecker(String,SpellCheckerOptionalParameter)
  id: spellChecker(String,SpellCheckerOptionalParameter)
  parent: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2
  href: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.yml
  langs:
  - java
  name: spellChecker(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter)
  nameWithType: BingSpellCheckOperationsImpl.spellChecker(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter)
  fullName: SpellCheck com.microsoft.azure.cognitiveservices.language.spellcheck.implementation.BingSpellCheckOperationsImpl.spellChecker(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter)
  overload: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.spellChecker*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/data-plane/language/bingspellcheck/src/main/java/com/microsoft/azure/cognitiveservices/language/spellcheck/implementation/BingSpellCheckOperationsImpl.java
    startLine: 74
  package: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation
  summary: >-
    <p>The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.</p>

    <p></p>
  syntax:
    content: public SpellCheck spellChecker(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter)
    parameters:
    - id: text
      type: "26831127"
      description: <p>The text string to check for spelling and grammar errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. Because of the query string length limit, you'll typically use a POST request unless you're checking only short strings. </p>
    - id: spellCheckerOptionalParameter
      type: com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_checker_optional_parameter
      description: <p>the object representing the optional parameters to be set before calling this API </p>
    return:
      type: com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_check
      description: <p>the SpellCheck object if successful. </p>
  overridden: com.microsoft.azure.cognitiveservices.language.spellcheck._bing_spell_check_operations.spellChecker(String,SpellCheckerOptionalParameter)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: 00ad4777
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.spellCheckerAsync(String,SpellCheckerOptionalParameter)
  id: spellCheckerAsync(String,SpellCheckerOptionalParameter)
  parent: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2
  href: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.yml
  langs:
  - java
  name: spellCheckerAsync(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter)
  nameWithType: BingSpellCheckOperationsImpl.spellCheckerAsync(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter)
  fullName: Observable<SpellCheck> com.microsoft.azure.cognitiveservices.language.spellcheck.implementation.BingSpellCheckOperationsImpl.spellCheckerAsync(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter)
  overload: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.spellCheckerAsync*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/data-plane/language/bingspellcheck/src/main/java/com/microsoft/azure/cognitiveservices/language/spellcheck/implementation/BingSpellCheckOperationsImpl.java
    startLine: 99
  package: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation
  summary: >-
    <p>The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.</p>

    <p></p>
  syntax:
    content: public Observable<SpellCheck> spellCheckerAsync(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter)
    parameters:
    - id: text
      type: "26831127"
      description: <p>The text string to check for spelling and grammar errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. Because of the query string length limit, you'll typically use a POST request unless you're checking only short strings. </p>
    - id: spellCheckerOptionalParameter
      type: com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_checker_optional_parameter
      description: <p>the object representing the optional parameters to be set before calling this API </p>
    return:
      type: c2d0e8c6com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_checka08ddfce
      description: <p>the observable to the SpellCheck object </p>
  overridden: com.microsoft.azure.cognitiveservices.language.spellcheck._bing_spell_check_operations.spellCheckerAsync(String,SpellCheckerOptionalParameter)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.spellCheckerAsync(String,SpellCheckerOptionalParameter,final ServiceCallback<SpellCheck>)
  id: spellCheckerAsync(String,SpellCheckerOptionalParameter,final ServiceCallback<SpellCheck>)
  parent: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2
  href: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.yml
  langs:
  - java
  name: spellCheckerAsync(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter, final ServiceCallback<SpellCheck> serviceCallback)
  nameWithType: BingSpellCheckOperationsImpl.spellCheckerAsync(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter, final ServiceCallback<SpellCheck> serviceCallback)
  fullName: ServiceFuture<SpellCheck> com.microsoft.azure.cognitiveservices.language.spellcheck.implementation.BingSpellCheckOperationsImpl.spellCheckerAsync(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter, final ServiceCallback<SpellCheck> serviceCallback)
  overload: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.spellCheckerAsync*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/data-plane/language/bingspellcheck/src/main/java/com/microsoft/azure/cognitiveservices/language/spellcheck/implementation/BingSpellCheckOperationsImpl.java
    startLine: 87
  package: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation
  summary: >-
    <p>The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<SpellCheck> spellCheckerAsync(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter, final ServiceCallback<SpellCheck> serviceCallback)
    parameters:
    - id: text
      type: "26831127"
      description: <p>The text string to check for spelling and grammar errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. Because of the query string length limit, you'll typically use a POST request unless you're checking only short strings. </p>
    - id: spellCheckerOptionalParameter
      type: com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_checker_optional_parameter
      description: <p>the object representing the optional parameters to be set before calling this API </p>
    - id: serviceCallback
      type: 897eb10acom.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_checka08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: c522ce07com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_checka08ddfce
      description: <p>the <xref uid="" data-throw-if-not-resolved="false">ServiceFuture</xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.spellCheckerWithServiceResponseAsync(String,SpellCheckerOptionalParameter)
  id: spellCheckerWithServiceResponseAsync(String,SpellCheckerOptionalParameter)
  parent: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2
  href: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.yml
  langs:
  - java
  name: spellCheckerWithServiceResponseAsync(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter)
  nameWithType: BingSpellCheckOperationsImpl.spellCheckerWithServiceResponseAsync(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter)
  fullName: Observable<ServiceResponse<SpellCheck>> com.microsoft.azure.cognitiveservices.language.spellcheck.implementation.BingSpellCheckOperationsImpl.spellCheckerWithServiceResponseAsync(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter)
  overload: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.spellCheckerWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/data-plane/language/bingspellcheck/src/main/java/com/microsoft/azure/cognitiveservices/language/spellcheck/implementation/BingSpellCheckOperationsImpl.java
    startLine: 116
  package: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation
  summary: >-
    <p>The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponse<SpellCheck>> spellCheckerWithServiceResponseAsync(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter)
    parameters:
    - id: text
      type: "26831127"
      description: <p>The text string to check for spelling and grammar errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. Because of the query string length limit, you'll typically use a POST request unless you're checking only short strings. </p>
    - id: spellCheckerOptionalParameter
      type: com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_checker_optional_parameter
      description: <p>the object representing the optional parameters to be set before calling this API </p>
    return:
      type: fc480ba2com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_checke7daa122
      description: <p>the observable to the SpellCheck object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.spellCheckerWithServiceResponseAsync(String,String,String,String,String,String,String,ActionType,String,String,String,String,String,String,String,String,String,String,String)
  id: spellCheckerWithServiceResponseAsync(String,String,String,String,String,String,String,ActionType,String,String,String,String,String,String,String,String,String,String,String)
  parent: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2
  href: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.yml
  langs:
  - java
  name: spellCheckerWithServiceResponseAsync(String text, String acceptLanguage, String pragma, String userAgent, String clientId, String clientIp, String location, ActionType actionType, String appName, String countryCode, String clientMachineName, String docId, String market, String sessionId, String setLang, String userId, String mode, String preContextText, String postContextText)
  nameWithType: BingSpellCheckOperationsImpl.spellCheckerWithServiceResponseAsync(String text, String acceptLanguage, String pragma, String userAgent, String clientId, String clientIp, String location, ActionType actionType, String appName, String countryCode, String clientMachineName, String docId, String market, String sessionId, String setLang, String userId, String mode, String preContextText, String postContextText)
  fullName: Observable<ServiceResponse<SpellCheck>> com.microsoft.azure.cognitiveservices.language.spellcheck.implementation.BingSpellCheckOperationsImpl.spellCheckerWithServiceResponseAsync(String text, String acceptLanguage, String pragma, String userAgent, String clientId, String clientIp, String location, ActionType actionType, String appName, String countryCode, String clientMachineName, String docId, String market, String sessionId, String setLang, String userId, String mode, String preContextText, String postContextText)
  overload: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.spellCheckerWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: cognitiveservices/data-plane/language/bingspellcheck/src/main/java/com/microsoft/azure/cognitiveservices/language/spellcheck/implementation/BingSpellCheckOperationsImpl.java
    startLine: 167
  package: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation
  summary: >-
    <p>The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponse<SpellCheck>> spellCheckerWithServiceResponseAsync(String text, String acceptLanguage, String pragma, String userAgent, String clientId, String clientIp, String location, ActionType actionType, String appName, String countryCode, String clientMachineName, String docId, String market, String sessionId, String setLang, String userId, String mode, String preContextText, String postContextText)
    parameters:
    - id: text
      type: "26831127"
      description: <p>The text string to check for spelling and grammar errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. Because of the query string length limit, you'll typically use a POST request unless you're checking only short strings. </p>
    - id: acceptLanguage
      type: "26831127"
      description: <p>A comma-delimited list of one or more languages to use for user interface strings. The list is in decreasing order of preference. For additional information, including expected format, see [RFC2616](<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html</a>). This header and the setLang query parameter are mutually exclusive; do not specify both. If you set this header, you must also specify the cc query parameter. Bing will use the first supported language it finds from the list, and combine that language with the cc parameter value to determine the market to return results for. If the list does not include a supported language, Bing will find the closest language and market that supports the request, and may use an aggregated or default market for the results instead of a specified one. You should use this header and the cc query parameter only if you specify multiple languages; otherwise, you should use the mkt and setLang query parameters. A user interface string is a string that's used as a label in a user interface. There are very few user interface strings in the JSON response objects. Any links in the response objects to Bing.com properties will apply the specified language. </p>
    - id: pragma
      type: "26831127"
      description: '<p>By default, Bing returns cached content, if available. To prevent Bing from returning cached content, set the Pragma header to no-cache (for example, Pragma: no-cache). </p>'
    - id: userAgent
      type: "26831127"
      description: <p>The user agent originating the request. Bing uses the user agent to provide mobile users with an optimized experience. Although optional, you are strongly encouraged to always specify this header. The user-agent should be the same string that any commonly used browser would send. For information about user agents, see [RFC 2616](<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html</a>). </p>
    - id: clientId
      type: "26831127"
      description: "<p>Bing uses this header to provide users with consistent behavior across Bing API calls. Bing often flights new features and improvements, and it uses the client ID as a key for assigning traffic on different flights. If you do not use the same client ID for a user across multiple requests, then Bing may assign the user to multiple conflicting flights. Being assigned to multiple conflicting flights can lead to an inconsistent user experience. For example, if the second request has a different flight assignment than the first, the experience may be unexpected. Also, Bing can use the client ID to tailor web results to that client ID’s search history, providing a richer experience for the user. Bing also uses this header to help improve result rankings by analyzing the activity generated by a client ID. The relevance improvements help with better quality of results delivered by Bing APIs and in turn enables higher click-through rates for the API consumer. IMPORTANT: Although optional, you should consider this header required. Persisting the client ID across multiple requests for the same end user and device combination enables 1) the API consumer to receive a consistent user experience, and 2) higher click-through rates via better quality of results from the Bing APIs. Each user that uses your application on the device must have a unique, Bing generated client ID. If you do not include this header in the request, Bing generates an ID and returns it in the X-MSEdge-ClientID response header. The only time that you should NOT include this header in a request is the first time the user uses your app on that device. Use the client ID for each Bing API request that your app makes for this user on the device. Persist the client ID. To persist the ID in a browser app, use a persistent HTTP cookie to ensure the ID is used across all sessions. Do not use a session cookie. For other apps such as mobile apps, use the device's persistent storage to persist the ID. The next time the user uses your app on that device, get the client ID that you persisted. Bing responses may or may not include this header. If the response includes this header, capture the client ID and use it for all subsequent Bing requests for the user on that device. If you include the X-MSEdge-ClientID, you must not include cookies in the request. </p>"
    - id: clientIp
      type: "26831127"
      description: <p>The IPv4 or IPv6 address of the client device. The IP address is used to discover the user's location. Bing uses the location information to determine safe search behavior. Although optional, you are encouraged to always specify this header and the X-Search-Location header. Do not obfuscate the address (for example, by changing the last octet to 0). Obfuscating the address results in the location not being anywhere near the device's actual location, which may result in Bing serving erroneous results. </p>
    - id: location
      type: "26831127"
      description: "<p>A semicolon-delimited list of key/value pairs that describe the client's geographical location. Bing uses the location information to determine safe search behavior and to return relevant local content. Specify the key/value pair as &lt;key&gt;:&lt;value&gt;. The following are the keys that you use to specify the user's location. lat (required): The latitude of the client's location, in degrees. The latitude must be greater than or equal to -90.0 and less than or equal to +90.0. Negative values indicate southern latitudes and positive values indicate northern latitudes. long (required): The longitude of the client's location, in degrees. The longitude must be greater than or equal to -180.0 and less than or equal to +180.0. Negative values indicate western longitudes and positive values indicate eastern longitudes. re (required): The radius, in meters, which specifies the horizontal accuracy of the coordinates. Pass the value returned by the device's location service. Typical values might be 22m for GPS/Wi-Fi, 380m for cell tower triangulation, and 18,000m for reverse IP lookup. ts (optional): The UTC UNIX timestamp of when the client was at the location. (The UNIX timestamp is the number of seconds since January 1, 1970.) head (optional): The client's relative heading or direction of travel. Specify the direction of travel as degrees from 0 through 360, counting clockwise relative to true north. Specify this key only if the sp key is nonzero. sp (optional): The horizontal velocity (speed), in meters per second, that the client device is traveling. alt (optional): The altitude of the client device, in meters. are (optional): The radius, in meters, that specifies the vertical accuracy of the coordinates. Specify this key only if you specify the alt key. Although many of the keys are optional, the more information that you provide, the more accurate the location results are. Although optional, you are encouraged to always specify the user's geographical location. Providing the location is especially important if the client's IP address does not accurately reflect the user's physical location (for example, if the client uses VPN). For optimal results, you should include this header and the X-Search-ClientIP header, but at a minimum, you should include this header. </p>"
    - id: actionType
      type: com.microsoft.azure.cognitiveservices.language.spellcheck.models._action_type
      description: "<p>A string that's used by logging to determine whether the request is coming from an interactive session or a page load. The following are the possible values. 1) Edit—The request is from an interactive session 2) Load—The request is from a page load. Possible values include: 'Edit', 'Load' </p>"
    - id: appName
      type: "26831127"
      description: <p>The unique name of your app. The name must be known by Bing. Do not include this parameter unless you have previously contacted Bing to get a unique app name. To get a unique name, contact your Bing Business Development manager. </p>
    - id: countryCode
      type: "26831127"
      description: <p>A 2-character country code of the country where the results come from. This API supports only the United States market. If you specify this query parameter, it must be set to us. If you set this parameter, you must also specify the Accept-Language header. Bing uses the first supported language it finds from the languages list, and combine that language with the country code that you specify to determine the market to return results for. If the languages list does not include a supported language, Bing finds the closest language and market that supports the request, or it may use an aggregated or default market for the results instead of a specified one. You should use this query parameter and the Accept-Language query parameter only if you specify multiple languages; otherwise, you should use the mkt and setLang query parameters. This parameter and the mkt query parameter are mutually exclusive—do not specify both. </p>
    - id: clientMachineName
      type: "26831127"
      description: <p>A unique name of the device that the request is being made from. Generate a unique value for each device (the value is unimportant). The service uses the ID to help debug issues and improve the quality of corrections. </p>
    - id: docId
      type: "26831127"
      description: <p>A unique ID that identifies the document that the text belongs to. Generate a unique value for each document (the value is unimportant). The service uses the ID to help debug issues and improve the quality of corrections. </p>
    - id: market
      type: "26831127"
      description: <p>The market where the results come from. You are strongly encouraged to always specify the market, if known. Specifying the market helps Bing route the request and return an appropriate and optimal response. This parameter and the cc query parameter are mutually exclusive—do not specify both. </p>
    - id: sessionId
      type: "26831127"
      description: <p>A unique ID that identifies this user session. Generate a unique value for each user session (the value is unimportant). The service uses the ID to help debug issues and improve the quality of corrections </p>
    - id: setLang
      type: "26831127"
      description: <p>The language to use for user interface strings. Specify the language using the ISO 639-1 2-letter language code. For example, the language code for English is EN. The default is EN (English). Although optional, you should always specify the language. Typically, you set setLang to the same language specified by mkt unless the user wants the user interface strings displayed in a different language. This parameter and the Accept-Language header are mutually exclusive—do not specify both. A user interface string is a string that's used as a label in a user interface. There are few user interface strings in the JSON response objects. Also, any links to Bing.com properties in the response objects apply the specified language. </p>
    - id: userId
      type: "26831127"
      description: <p>A unique ID that identifies the user. Generate a unique value for each user (the value is unimportant). The service uses the ID to help debug issues and improve the quality of corrections. </p>
    - id: mode
      type: "26831127"
      description: "<p>The type of spelling and grammar checks to perform. The following are the possible values (the values are case insensitive). The default is Proof. 1) Proof—Finds most spelling and grammar mistakes. 2) Spell—Finds most spelling mistakes but does not find some of the grammar errors that Proof catches (for example, capitalization and repeated words). Possible values include: 'proof', 'spell' </p>"
    - id: preContextText
      type: "26831127"
      description: <p>A string that gives context to the text string. For example, the text string petal is valid. However, if you set preContextText to bike, the context changes and the text string becomes not valid. In this case, the API suggests that you change petal to pedal (as in bike pedal). This text is not checked for grammar or spelling errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. </p>
    - id: postContextText
      type: "26831127"
      description: <p>A string that gives context to the text string. For example, the text string read is valid. However, if you set postContextText to carpet, the context changes and the text string becomes not valid. In this case, the API suggests that you change read to red (as in red carpet). This text is not checked for grammar or spelling errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. </p>
    return:
      type: fc480ba2com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_checke7daa122
      description: <p>the observable to the SpellCheck object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
references:
- uid: 964879b9
  spec.java:
  - name: Retrofit
    fullName: Retrofit
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.BingSpellCheckOperationsImpl*
  name: BingSpellCheckOperationsImpl
  nameWithType: BingSpellCheckOperationsImpl.BingSpellCheckOperationsImpl
  fullName: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation.BingSpellCheckOperationsImpl.BingSpellCheckOperationsImpl
  package: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation
- uid: 3c87bd19
  spec.java:
  - name: IllegalArgumentException
    fullName: IllegalArgumentException
- uid: 00ad4777
  spec.java:
  - name: ErrorResponseException
    fullName: ErrorResponseException
- uid: 9b2a4515
  spec.java:
  - name: RuntimeException
    fullName: RuntimeException
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.spellChecker*
  name: spellChecker
  nameWithType: BingSpellCheckOperationsImpl.spellChecker
  fullName: SpellCheck com.microsoft.azure.cognitiveservices.language.spellcheck.implementation.BingSpellCheckOperationsImpl.spellChecker
  package: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation
- uid: 897eb10acom.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_checka08ddfce
  spec.java:
  - name: final ServiceCallback<
    fullName: final ServiceCallback<
  - uid: com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_check
    name: SpellCheck
    fullName: com.microsoft.azure.cognitiveservices.language.spellcheck.models.SpellCheck
    href: com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_check.yml
  - name: '>'
    fullName: '>'
- uid: c522ce07com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_checka08ddfce
  spec.java:
  - name: ServiceFuture<
    fullName: ServiceFuture<
  - uid: com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_check
    name: SpellCheck
    fullName: com.microsoft.azure.cognitiveservices.language.spellcheck.models.SpellCheck
    href: com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_check.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.spellCheckerAsync*
  name: spellCheckerAsync
  nameWithType: BingSpellCheckOperationsImpl.spellCheckerAsync
  fullName: ServiceFuture<SpellCheck> com.microsoft.azure.cognitiveservices.language.spellcheck.implementation.BingSpellCheckOperationsImpl.spellCheckerAsync
  package: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation
- uid: c2d0e8c6com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_checka08ddfce
  spec.java:
  - name: Observable<
    fullName: Observable<
  - uid: com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_check
    name: SpellCheck
    fullName: com.microsoft.azure.cognitiveservices.language.spellcheck.models.SpellCheck
    href: com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_check.yml
  - name: '>'
    fullName: '>'
- uid: fc480ba2com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_checke7daa122
  spec.java:
  - name: Observable<ServiceResponse<
    fullName: Observable<ServiceResponse<
  - uid: com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_check
    name: SpellCheck
    fullName: com.microsoft.azure.cognitiveservices.language.spellcheck.models.SpellCheck
    href: com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_check.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.spellCheckerWithServiceResponseAsync*
  name: spellCheckerWithServiceResponseAsync
  nameWithType: BingSpellCheckOperationsImpl.spellCheckerWithServiceResponseAsync
  fullName: Observable<ServiceResponse<SpellCheck>> com.microsoft.azure.cognitiveservices.language.spellcheck.implementation.BingSpellCheckOperationsImpl.spellCheckerWithServiceResponseAsync
  package: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation
- uid: d39448e0
  spec.java:
  - name: BingSpellCheckOperationsSpellCheckerParameters
    fullName: BingSpellCheckOperationsSpellCheckerParameters
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck._bing_spell_check_operations
  parent: com.microsoft.azure.cognitiveservices.language.spellcheck
  href: com.microsoft.azure.cognitiveservices.language.spellcheck._bing_spell_check_operations.yml
  name: BingSpellCheckOperations
  nameWithType: BingSpellCheckOperations
  fullName: com.microsoft.azure.cognitiveservices.language.spellcheck.BingSpellCheckOperations
  type: Interface
  summary: <p>An instance of this class provides access to all the operations defined in <xref uid="com.microsoft.azure.cognitiveservices.language.spellcheck._bing_spell_check_operations" data-throw-if-not-resolved="false">BingSpellCheckOperations</xref>. </p>
  syntax:
    content: public interface BingSpellCheckOperations
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation._bing_spell_check_a_p_i_impl
  parent: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation
  href: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation._bing_spell_check_a_p_i_impl.yml
  name: BingSpellCheckAPIImpl
  nameWithType: BingSpellCheckAPIImpl
  fullName: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation.BingSpellCheckAPIImpl
  type: Class
  summary: <p>Initializes a new instance of the <xref uid="com.microsoft.azure.cognitiveservices.language.spellcheck.implementation._bing_spell_check_a_p_i_impl" data-throw-if-not-resolved="false">BingSpellCheckAPIImpl</xref> class. </p>
  syntax:
    content: public class BingSpellCheckAPIImpl implements BingSpellCheckAPI
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2
  parent: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation
  href: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation_99a79a43be0d940c8724fde0cf413ec2.yml
  name: BingSpellCheckOperationsImpl
  nameWithType: BingSpellCheckOperationsImpl
  fullName: com.microsoft.azure.cognitiveservices.language.spellcheck.implementation.BingSpellCheckOperationsImpl
  type: Class
  summary: <p>An instance of this class provides access to all the operations defined in <xref uid="com.microsoft.azure.cognitiveservices.language.spellcheck._bing_spell_check_operations" data-throw-if-not-resolved="false">BingSpellCheckOperations</xref>. </p>
  syntax: *o1
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_check
  parent: com.microsoft.azure.cognitiveservices.language.spellcheck.models
  href: com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_check.yml
  name: SpellCheck
  nameWithType: SpellCheck
  fullName: com.microsoft.azure.cognitiveservices.language.spellcheck.models.SpellCheck
  type: Class
  summary: <p>The <xref uid="com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_check" data-throw-if-not-resolved="false">SpellCheck</xref> model. </p>
  syntax:
    content: public class SpellCheck
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck._bing_spell_check_operations.spellChecker(String,SpellCheckerOptionalParameter)
  parent: com.microsoft.azure.cognitiveservices.language.spellcheck._bing_spell_check_operations
  href: com.microsoft.azure.cognitiveservices.language.spellcheck._bing_spell_check_operations.yml
  name: spellChecker(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter)
  nameWithType: BingSpellCheckOperations.spellChecker(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter)
  fullName: SpellCheck com.microsoft.azure.cognitiveservices.language.spellcheck.BingSpellCheckOperations.spellChecker(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter)
  type: Method
  summary: >-
    <p>The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.</p>

    <p></p>
  syntax:
    content: public SpellCheck spellChecker(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter)
    parameters:
    - id: text
      type: "26831127"
      description: <p>The text string to check for spelling and grammar errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. Because of the query string length limit, you'll typically use a POST request unless you're checking only short strings. </p>
    - id: spellCheckerOptionalParameter
      type: com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_checker_optional_parameter
      description: <p>the object representing the optional parameters to be set before calling this API </p>
    return:
      type: com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_check
      description: <p>the SpellCheck object if successful. </p>
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_checker_optional_parameter
  parent: com.microsoft.azure.cognitiveservices.language.spellcheck.models
  href: com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_checker_optional_parameter.yml
  name: SpellCheckerOptionalParameter
  nameWithType: SpellCheckerOptionalParameter
  fullName: com.microsoft.azure.cognitiveservices.language.spellcheck.models.SpellCheckerOptionalParameter
  type: Class
  summary: <p>The <xref uid="com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_checker_optional_parameter" data-throw-if-not-resolved="false">SpellCheckerOptionalParameter</xref> model. </p>
  syntax:
    content: public class SpellCheckerOptionalParameter
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck._bing_spell_check_operations.spellCheckerAsync(String,SpellCheckerOptionalParameter)
  parent: com.microsoft.azure.cognitiveservices.language.spellcheck._bing_spell_check_operations
  href: com.microsoft.azure.cognitiveservices.language.spellcheck._bing_spell_check_operations.yml
  name: spellCheckerAsync(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter)
  nameWithType: BingSpellCheckOperations.spellCheckerAsync(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter)
  fullName: Observable<SpellCheck> com.microsoft.azure.cognitiveservices.language.spellcheck.BingSpellCheckOperations.spellCheckerAsync(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter)
  type: Method
  summary: >-
    <p>The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.</p>

    <p></p>
  syntax:
    content: public Observable<SpellCheck> spellCheckerAsync(String text, SpellCheckerOptionalParameter spellCheckerOptionalParameter)
    parameters:
    - id: text
      type: "26831127"
      description: <p>The text string to check for spelling and grammar errors. The combined length of the text string, preContextText string, and postContextText string may not exceed 10,000 characters. You may specify this parameter in the query string of a GET request or in the body of a POST request. Because of the query string length limit, you'll typically use a POST request unless you're checking only short strings. </p>
    - id: spellCheckerOptionalParameter
      type: com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_checker_optional_parameter
      description: <p>the object representing the optional parameters to be set before calling this API </p>
    return:
      type: c2d0e8c6com.microsoft.azure.cognitiveservices.language.spellcheck.models._spell_checka08ddfce
      description: <p>the observable to the SpellCheck object </p>
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck.models._action_type
  parent: com.microsoft.azure.cognitiveservices.language.spellcheck.models
  href: com.microsoft.azure.cognitiveservices.language.spellcheck.models._action_type.yml
  name: ActionType
  nameWithType: ActionType
  fullName: com.microsoft.azure.cognitiveservices.language.spellcheck.models.ActionType
  type: Class
  summary: <p>Defines values for <xref uid="com.microsoft.azure.cognitiveservices.language.spellcheck.models._action_type" data-throw-if-not-resolved="false">ActionType</xref>. </p>
  syntax:
    content: public class ActionType
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck._bing_spell_check_operations.spellChecker()
  parent: com.microsoft.azure.cognitiveservices.language.spellcheck._bing_spell_check_operations
  href: com.microsoft.azure.cognitiveservices.language.spellcheck._bing_spell_check_operations.yml
  name: spellChecker()
  nameWithType: BingSpellCheckOperations.spellChecker()
  fullName: BingSpellCheckOperationsSpellCheckerDefinitionStages.WithText com.microsoft.azure.cognitiveservices.language.spellcheck.BingSpellCheckOperations.spellChecker()
  type: Method
  summary: >-
    <p>The Bing Spell Check API lets you perform contextual grammar and spell checking. Bing has developed a web-based spell-checker that leverages machine learning and statistical machine translation to dynamically train a constantly evolving and highly contextual algorithm. The spell-checker is based on a massive corpus of web searches and documents.</p>

    <p></p>
  syntax:
    content: public BingSpellCheckOperationsSpellCheckerDefinitionStages.WithText spellChecker()
    return:
      type: 85feffa2
      description: <p>the first stage of the spellChecker call </p>
- uid: com.microsoft.azure.cognitiveservices.language.spellcheck.models._error_response_exception
  parent: com.microsoft.azure.cognitiveservices.language.spellcheck.models
  href: com.microsoft.azure.cognitiveservices.language.spellcheck.models._error_response_exception.yml
  name: ErrorResponseException
  nameWithType: ErrorResponseException
  fullName: com.microsoft.azure.cognitiveservices.language.spellcheck.models.ErrorResponseException
  type: Class
  summary: <p>Exception thrown for an invalid response with <xref uid="com.microsoft.azure.cognitiveservices.language.spellcheck.models._error_response" data-throw-if-not-resolved="false">ErrorResponse</xref> information. </p>
  syntax:
    content: public class ErrorResponseException
