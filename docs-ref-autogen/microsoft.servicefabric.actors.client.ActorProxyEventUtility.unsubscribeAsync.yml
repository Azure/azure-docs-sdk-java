### YamlMime:JavaMember
nameWithType: ActorProxyEventUtility.unsubscribeAsync
type: method
members:
- fullName: microsoft.servicefabric.actors.client.ActorProxyEventUtility.unsubscribeAsync(ActorEventPublisher actorProxy, TEvent subscriber)
  name: unsubscribeAsync(ActorEventPublisher actorProxy, TEvent subscriber)
  nameWithType: ActorProxyEventUtility.unsubscribeAsync(ActorEventPublisher actorProxy, TEvent subscriber)
  parameters:
  - description: <p>The actor that publishes the event. </p>
    name: actorProxy
    type: <xref href="microsoft.servicefabric.actors.ActorEventPublisher?alt=microsoft.servicefabric.actors.ActorEventPublisher&text=ActorEventPublisher%3CTActorEvents%3E" data-throw-if-not-resolved="False"/>
  - description: <p>The subscriber that receives the event. </p>
    name: subscriber
    type: <xref href="TEvent?alt=TEvent&text=TEvent" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=java.lang.IllegalArgumentException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous operation of un-subscribing from a published actor event. </p>
    type: static&lt;TEvent extends <xref href="microsoft.servicefabric.actors.ActorEvents?alt=microsoft.servicefabric.actors.ActorEvents&text=ActorEvents" data-throw-if-not-resolved="False"/>&gt; CompletableFuture&lt;?&gt;
  summary: >-
    <p>Unsubscribe from a published actor event.</p>

    <p>

    When actorProxy is not of type <xref uid="microsoft.servicefabric.actors.client.ActorProxy" data-throw-if-not-resolved="false">microsoft.servicefabric.actors.client.ActorProxy</xref></p>

    <p>When TEvent doesn't implement <xref uid="microsoft.servicefabric.actors.ActorEvents" data-throw-if-not-resolved="false">microsoft.servicefabric.actors.ActorEvents</xref></p>
  syntax: public static static<TEvent extends ActorEvents> CompletableFuture<?> unsubscribeAsync(ActorEventPublisher actorProxy, TEvent subscriber)
  uid: microsoft.servicefabric.actors.client.ActorProxyEventUtility.unsubscribeAsync(ActorEventPublisher,TEvent)
uid: microsoft.servicefabric.actors.client.ActorProxyEventUtility.unsubscribeAsync*
fullName: microsoft.servicefabric.actors.client.ActorProxyEventUtility.unsubscribeAsync(ActorEventPublisher actorProxy, TEvent subscriber)
name: unsubscribeAsync(ActorEventPublisher actorProxy, TEvent subscriber)
package: microsoft.servicefabric.actors.client
metadata: {}
