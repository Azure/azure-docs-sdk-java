### YamlMime:ManagedReference
items:
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory
  id: CosmosRepositoryFactory
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.repository.support
  children:
  - com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.<T,ID>getEntityInformation(java.lang.Class<T>)
  - com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.CosmosRepositoryFactory(com.azure.spring.data.cosmos.core.CosmosOperations)
  - com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.getQueryLookupStrategy(org.springframework.data.repository.query.QueryLookupStrategy.Key,org.springframework.data.repository.query.QueryMethodEvaluationContextProvider)
  - com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.getRepositoryBaseClass(org.springframework.data.repository.core.RepositoryMetadata)
  - com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.getTargetRepository(org.springframework.data.repository.core.RepositoryInformation)
  langs:
  - java
  name: CosmosRepositoryFactory
  nameWithType: CosmosRepositoryFactory
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory
  type: Class
  package: com.azure.spring.data.cosmos.repository.support
  summary: Factory class for cosmos repository contains application context and operations information
  syntax:
    content: public class CosmosRepositoryFactory extends RepositoryFactorySupport
  inheritance:
  - java.lang.Object
  - org.springframework.data.repository.core.support.RepositoryFactorySupport
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.<R>getTargetRepositoryViaReflection(java.lang.Class<?>,java.lang.Object...)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.<R>getTargetRepositoryViaReflection(org.springframework.data.repository.core.RepositoryInformation,java.lang.Object...)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.<T,ID>getEntityInformation(java.lang.Class<T>)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.<T>getRepository(java.lang.Class<T>)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.<T>getRepository(java.lang.Class<T>,java.lang.Object)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.<T>getRepository(java.lang.Class<T>,org.springframework.data.repository.core.support.RepositoryComposition.RepositoryFragments)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.addQueryCreationListener(org.springframework.data.repository.core.support.QueryCreationListener<?>)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.addRepositoryProxyPostProcessor(org.springframework.data.repository.core.support.RepositoryProxyPostProcessor)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.getProjectionFactory(java.lang.ClassLoader,org.springframework.beans.factory.BeanFactory)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.getQueryLookupStrategy(org.springframework.data.repository.query.QueryLookupStrategy.Key,org.springframework.data.repository.query.QueryMethodEvaluationContextProvider)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.getQueryMethods()
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepositoryBaseClass(org.springframework.data.repository.core.RepositoryMetadata)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepositoryFragments(org.springframework.data.repository.core.RepositoryMetadata)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepositoryInformation(org.springframework.data.repository.core.RepositoryMetadata,org.springframework.data.repository.core.support.RepositoryComposition.RepositoryFragments)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepositoryMetadata(java.lang.Class<?>)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.getTargetRepository(org.springframework.data.repository.core.RepositoryInformation)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.setBeanClassLoader(java.lang.ClassLoader)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.setBeanFactory(org.springframework.beans.factory.BeanFactory)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.setEvaluationContextProvider(org.springframework.data.repository.query.QueryMethodEvaluationContextProvider)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.setNamedQueries(org.springframework.data.repository.core.NamedQueries)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.setQueryLookupStrategyKey(org.springframework.data.repository.query.QueryLookupStrategy.Key)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.setRepositoryBaseClass(java.lang.Class<?>)
  - org.springframework.data.repository.core.support.RepositoryFactorySupport.validate(org.springframework.data.repository.core.RepositoryMetadata)
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.<T,ID>getEntityInformation(java.lang.Class<T>)
  id: <T,ID>getEntityInformation(java.lang.Class<T>)
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory
  langs:
  - java
  name: <T,ID>getEntityInformation(Class<T> domainType)
  nameWithType: CosmosRepositoryFactory.<T,ID>getEntityInformation(Class<T> domainType)
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.<T,ID>getEntityInformation(Class<T> domainType)
  overload: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.getEntityInformation*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: public EntityInformation<T,ID> <T,ID>getEntityInformation(Class<T> domainType)
    parameters:
    - id: domainType
      type: java.lang.Class<T>
    return:
      type: org.springframework.data.repository.core.EntityInformation<T,ID>
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.CosmosRepositoryFactory(com.azure.spring.data.cosmos.core.CosmosOperations)
  id: CosmosRepositoryFactory(com.azure.spring.data.cosmos.core.CosmosOperations)
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory
  langs:
  - java
  name: CosmosRepositoryFactory(CosmosOperations cosmosOperations)
  nameWithType: CosmosRepositoryFactory.CosmosRepositoryFactory(CosmosOperations cosmosOperations)
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.CosmosRepositoryFactory(CosmosOperations cosmosOperations)
  overload: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.CosmosRepositoryFactory*
  type: Constructor
  package: com.azure.spring.data.cosmos.repository.support
  summary: Initialization
  syntax:
    content: public CosmosRepositoryFactory(CosmosOperations cosmosOperations)
    parameters:
    - id: cosmosOperations
      type: com.azure.spring.data.cosmos.core.CosmosOperations
      description: for cosmosDb operations
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.getQueryLookupStrategy(org.springframework.data.repository.query.QueryLookupStrategy.Key,org.springframework.data.repository.query.QueryMethodEvaluationContextProvider)
  id: getQueryLookupStrategy(org.springframework.data.repository.query.QueryLookupStrategy.Key,org.springframework.data.repository.query.QueryMethodEvaluationContextProvider)
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory
  langs:
  - java
  name: getQueryLookupStrategy(QueryLookupStrategy.Key key, QueryMethodEvaluationContextProvider evaluationContextProvider)
  nameWithType: CosmosRepositoryFactory.getQueryLookupStrategy(QueryLookupStrategy.Key key, QueryMethodEvaluationContextProvider evaluationContextProvider)
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.getQueryLookupStrategy(QueryLookupStrategy.Key key, QueryMethodEvaluationContextProvider evaluationContextProvider)
  overload: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.getQueryLookupStrategy*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: protected Optional<QueryLookupStrategy> getQueryLookupStrategy(QueryLookupStrategy.Key key, QueryMethodEvaluationContextProvider evaluationContextProvider)
    parameters:
    - id: key
      type: org.springframework.data.repository.query.QueryLookupStrategy.Key
    - id: evaluationContextProvider
      type: org.springframework.data.repository.query.QueryMethodEvaluationContextProvider
    return:
      type: java.util.Optional<org.springframework.data.repository.query.QueryLookupStrategy>
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.getRepositoryBaseClass(org.springframework.data.repository.core.RepositoryMetadata)
  id: getRepositoryBaseClass(org.springframework.data.repository.core.RepositoryMetadata)
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory
  langs:
  - java
  name: getRepositoryBaseClass(RepositoryMetadata metadata)
  nameWithType: CosmosRepositoryFactory.getRepositoryBaseClass(RepositoryMetadata metadata)
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.getRepositoryBaseClass(RepositoryMetadata metadata)
  overload: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.getRepositoryBaseClass*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: protected Class<?> getRepositoryBaseClass(RepositoryMetadata metadata)
    parameters:
    - id: metadata
      type: org.springframework.data.repository.core.RepositoryMetadata
    return:
      type: java.lang.Class<?>
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.getTargetRepository(org.springframework.data.repository.core.RepositoryInformation)
  id: getTargetRepository(org.springframework.data.repository.core.RepositoryInformation)
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory
  langs:
  - java
  name: getTargetRepository(RepositoryInformation information)
  nameWithType: CosmosRepositoryFactory.getTargetRepository(RepositoryInformation information)
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.getTargetRepository(RepositoryInformation information)
  overload: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.getTargetRepository*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: protected Object getTargetRepository(RepositoryInformation information)
    parameters:
    - id: information
      type: org.springframework.data.repository.core.RepositoryInformation
    return:
      type: java.lang.Object
references:
- uid: com.azure.spring.data.cosmos.core.CosmosOperations
  name: CosmosOperations
  nameWithType: CosmosOperations
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.CosmosRepositoryFactory*
  name: CosmosRepositoryFactory
  nameWithType: CosmosRepositoryFactory.CosmosRepositoryFactory
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.CosmosRepositoryFactory
  package: com.azure.spring.data.cosmos.repository.support
- uid: org.springframework.data.repository.core.RepositoryMetadata
  spec.java:
  - uid: org.springframework.data.repository.core.RepositoryMetadata
    name: RepositoryMetadata
    fullName: org.springframework.data.repository.core.RepositoryMetadata
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.getRepositoryBaseClass*
  name: getRepositoryBaseClass
  nameWithType: CosmosRepositoryFactory.getRepositoryBaseClass
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.getRepositoryBaseClass
  package: com.azure.spring.data.cosmos.repository.support
- uid: org.springframework.data.repository.core.RepositoryInformation
  spec.java:
  - uid: org.springframework.data.repository.core.RepositoryInformation
    name: RepositoryInformation
    fullName: org.springframework.data.repository.core.RepositoryInformation
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.getTargetRepository*
  name: getTargetRepository
  nameWithType: CosmosRepositoryFactory.getTargetRepository
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.getTargetRepository
  package: com.azure.spring.data.cosmos.repository.support
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: org.springframework.data.repository.core.EntityInformation<T,ID>
  spec.java:
  - uid: org.springframework.data.repository.core.EntityInformation
    name: EntityInformation
    fullName: org.springframework.data.repository.core.EntityInformation
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: ','
    fullName: ','
  - uid: ID
    name: ID
    fullName: ID
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.getEntityInformation*
  name: <T,ID>getEntityInformation
  nameWithType: CosmosRepositoryFactory.<T,ID>getEntityInformation
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.<T,ID>getEntityInformation
  package: com.azure.spring.data.cosmos.repository.support
- uid: org.springframework.data.repository.query.QueryLookupStrategy.Key
  spec.java:
  - uid: org.springframework.data.repository.query.QueryLookupStrategy.Key
    name: Key
    fullName: org.springframework.data.repository.query.QueryLookupStrategy.Key
- uid: org.springframework.data.repository.query.QueryMethodEvaluationContextProvider
  spec.java:
  - uid: org.springframework.data.repository.query.QueryMethodEvaluationContextProvider
    name: QueryMethodEvaluationContextProvider
    fullName: org.springframework.data.repository.query.QueryMethodEvaluationContextProvider
- uid: java.util.Optional<org.springframework.data.repository.query.QueryLookupStrategy>
  spec.java:
  - uid: java.util.Optional
    name: Optional
    fullName: java.util.Optional
  - name: <
    fullName: <
  - uid: org.springframework.data.repository.query.QueryLookupStrategy
    name: QueryLookupStrategy
    fullName: org.springframework.data.repository.query.QueryLookupStrategy
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.getQueryLookupStrategy*
  name: getQueryLookupStrategy
  nameWithType: CosmosRepositoryFactory.getQueryLookupStrategy
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactory.getQueryLookupStrategy
  package: com.azure.spring.data.cosmos.repository.support
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport
  name: RepositoryFactorySupport
  nameWithType: RepositoryFactorySupport
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.setBeanFactory(org.springframework.beans.factory.BeanFactory)
  name: RepositoryFactorySupport.setBeanFactory(BeanFactory)
  nameWithType: RepositoryFactorySupport.setBeanFactory(BeanFactory)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.setBeanFactory(org.springframework.beans.factory.BeanFactory)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.setEvaluationContextProvider(org.springframework.data.repository.query.QueryMethodEvaluationContextProvider)
  name: RepositoryFactorySupport.setEvaluationContextProvider(QueryMethodEvaluationContextProvider)
  nameWithType: RepositoryFactorySupport.setEvaluationContextProvider(QueryMethodEvaluationContextProvider)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.setEvaluationContextProvider(org.springframework.data.repository.query.QueryMethodEvaluationContextProvider)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.setBeanClassLoader(java.lang.ClassLoader)
  name: RepositoryFactorySupport.setBeanClassLoader(ClassLoader)
  nameWithType: RepositoryFactorySupport.setBeanClassLoader(ClassLoader)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.setBeanClassLoader(java.lang.ClassLoader)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.<R>getTargetRepositoryViaReflection(java.lang.Class<?>,java.lang.Object...)
  name: RepositoryFactorySupport.<R>getTargetRepositoryViaReflection(Class<?>,Object)
  nameWithType: RepositoryFactorySupport.<R>getTargetRepositoryViaReflection(Class<?>,Object)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.<R>getTargetRepositoryViaReflection(java.lang.Class<?>,java.lang.Object...)
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.getProjectionFactory(java.lang.ClassLoader,org.springframework.beans.factory.BeanFactory)
  name: RepositoryFactorySupport.getProjectionFactory(ClassLoader,BeanFactory)
  nameWithType: RepositoryFactorySupport.getProjectionFactory(ClassLoader,BeanFactory)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.getProjectionFactory(java.lang.ClassLoader,org.springframework.beans.factory.BeanFactory)
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepositoryInformation(org.springframework.data.repository.core.RepositoryMetadata,org.springframework.data.repository.core.support.RepositoryComposition.RepositoryFragments)
  name: RepositoryFactorySupport.getRepositoryInformation(RepositoryMetadata,RepositoryComposition.RepositoryFragments)
  nameWithType: RepositoryFactorySupport.getRepositoryInformation(RepositoryMetadata,RepositoryComposition.RepositoryFragments)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepositoryInformation(org.springframework.data.repository.core.RepositoryMetadata,org.springframework.data.repository.core.support.RepositoryComposition.RepositoryFragments)
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.<R>getTargetRepositoryViaReflection(org.springframework.data.repository.core.RepositoryInformation,java.lang.Object...)
  name: RepositoryFactorySupport.<R>getTargetRepositoryViaReflection(RepositoryInformation,Object)
  nameWithType: RepositoryFactorySupport.<R>getTargetRepositoryViaReflection(RepositoryInformation,Object)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.<R>getTargetRepositoryViaReflection(org.springframework.data.repository.core.RepositoryInformation,java.lang.Object...)
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.getQueryMethods()
  name: RepositoryFactorySupport.getQueryMethods()
  nameWithType: RepositoryFactorySupport.getQueryMethods()
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.getQueryMethods()
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.<T>getRepository(java.lang.Class<T>,org.springframework.data.repository.core.support.RepositoryComposition.RepositoryFragments)
  name: RepositoryFactorySupport.<T>getRepository(Class<T>,RepositoryComposition.RepositoryFragments)
  nameWithType: RepositoryFactorySupport.<T>getRepository(Class<T>,RepositoryComposition.RepositoryFragments)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.<T>getRepository(java.lang.Class<T>,org.springframework.data.repository.core.support.RepositoryComposition.RepositoryFragments)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepositoryBaseClass(org.springframework.data.repository.core.RepositoryMetadata)
  name: RepositoryFactorySupport.getRepositoryBaseClass(RepositoryMetadata)
  nameWithType: RepositoryFactorySupport.getRepositoryBaseClass(RepositoryMetadata)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepositoryBaseClass(org.springframework.data.repository.core.RepositoryMetadata)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.addRepositoryProxyPostProcessor(org.springframework.data.repository.core.support.RepositoryProxyPostProcessor)
  name: RepositoryFactorySupport.addRepositoryProxyPostProcessor(RepositoryProxyPostProcessor)
  nameWithType: RepositoryFactorySupport.addRepositoryProxyPostProcessor(RepositoryProxyPostProcessor)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.addRepositoryProxyPostProcessor(org.springframework.data.repository.core.support.RepositoryProxyPostProcessor)
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.setRepositoryBaseClass(java.lang.Class<?>)
  name: RepositoryFactorySupport.setRepositoryBaseClass(Class<?>)
  nameWithType: RepositoryFactorySupport.setRepositoryBaseClass(Class<?>)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.setRepositoryBaseClass(java.lang.Class<?>)
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.<T,ID>getEntityInformation(java.lang.Class<T>)
  name: RepositoryFactorySupport.<T,ID>getEntityInformation(Class<T>)
  nameWithType: RepositoryFactorySupport.<T,ID>getEntityInformation(Class<T>)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.<T,ID>getEntityInformation(java.lang.Class<T>)
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepositoryFragments(org.springframework.data.repository.core.RepositoryMetadata)
  name: RepositoryFactorySupport.getRepositoryFragments(RepositoryMetadata)
  nameWithType: RepositoryFactorySupport.getRepositoryFragments(RepositoryMetadata)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepositoryFragments(org.springframework.data.repository.core.RepositoryMetadata)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.validate(org.springframework.data.repository.core.RepositoryMetadata)
  name: RepositoryFactorySupport.validate(RepositoryMetadata)
  nameWithType: RepositoryFactorySupport.validate(RepositoryMetadata)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.validate(org.springframework.data.repository.core.RepositoryMetadata)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.setQueryLookupStrategyKey(org.springframework.data.repository.query.QueryLookupStrategy.Key)
  name: RepositoryFactorySupport.setQueryLookupStrategyKey(QueryLookupStrategy.Key)
  nameWithType: RepositoryFactorySupport.setQueryLookupStrategyKey(QueryLookupStrategy.Key)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.setQueryLookupStrategyKey(org.springframework.data.repository.query.QueryLookupStrategy.Key)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.<T>getRepository(java.lang.Class<T>,java.lang.Object)
  name: RepositoryFactorySupport.<T>getRepository(Class<T>,Object)
  nameWithType: RepositoryFactorySupport.<T>getRepository(Class<T>,Object)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.<T>getRepository(java.lang.Class<T>,java.lang.Object)
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.addQueryCreationListener(org.springframework.data.repository.core.support.QueryCreationListener<?>)
  name: RepositoryFactorySupport.addQueryCreationListener(QueryCreationListener<?>)
  nameWithType: RepositoryFactorySupport.addQueryCreationListener(QueryCreationListener<?>)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.addQueryCreationListener(org.springframework.data.repository.core.support.QueryCreationListener<?>)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.getQueryLookupStrategy(org.springframework.data.repository.query.QueryLookupStrategy.Key,org.springframework.data.repository.query.QueryMethodEvaluationContextProvider)
  name: RepositoryFactorySupport.getQueryLookupStrategy(QueryLookupStrategy.Key,QueryMethodEvaluationContextProvider)
  nameWithType: RepositoryFactorySupport.getQueryLookupStrategy(QueryLookupStrategy.Key,QueryMethodEvaluationContextProvider)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.getQueryLookupStrategy(org.springframework.data.repository.query.QueryLookupStrategy.Key,org.springframework.data.repository.query.QueryMethodEvaluationContextProvider)
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.getTargetRepository(org.springframework.data.repository.core.RepositoryInformation)
  name: RepositoryFactorySupport.getTargetRepository(RepositoryInformation)
  nameWithType: RepositoryFactorySupport.getTargetRepository(RepositoryInformation)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.getTargetRepository(org.springframework.data.repository.core.RepositoryInformation)
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.<T>getRepository(java.lang.Class<T>)
  name: RepositoryFactorySupport.<T>getRepository(Class<T>)
  nameWithType: RepositoryFactorySupport.<T>getRepository(Class<T>)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.<T>getRepository(java.lang.Class<T>)
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.setNamedQueries(org.springframework.data.repository.core.NamedQueries)
  name: RepositoryFactorySupport.setNamedQueries(NamedQueries)
  nameWithType: RepositoryFactorySupport.setNamedQueries(NamedQueries)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.setNamedQueries(org.springframework.data.repository.core.NamedQueries)
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepositoryMetadata(java.lang.Class<?>)
  name: RepositoryFactorySupport.getRepositoryMetadata(Class<?>)
  nameWithType: RepositoryFactorySupport.getRepositoryMetadata(Class<?>)
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepositoryMetadata(java.lang.Class<?>)
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: org.springframework.data.repository.core.EntityInformation
  name: EntityInformation
  nameWithType: EntityInformation
  fullName: org.springframework.data.repository.core.EntityInformation
- uid: T,ID
  name: T,ID
  nameWithType: T,ID
  fullName: T,ID
- uid: java.util.Optional
  name: Optional
  nameWithType: Optional
  fullName: java.util.Optional
- uid: org.springframework.data.repository.query.QueryLookupStrategy
  name: QueryLookupStrategy
  nameWithType: QueryLookupStrategy
  fullName: org.springframework.data.repository.query.QueryLookupStrategy
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.
  name: RepositoryFactorySupport.
  nameWithType: RepositoryFactorySupport.
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.
- uid: R>getTargetRepositoryViaReflection(java.lang.Class
  name: R>getTargetRepositoryViaReflection(Class
  nameWithType: R>getTargetRepositoryViaReflection(Class
  fullName: R>getTargetRepositoryViaReflection(java.lang.Class
- uid: ?>,java.lang.Object...)
  name: ?>,Object)
  nameWithType: ?>,Object)
  fullName: ?>,java.lang.Object...)
- uid: R>getTargetRepositoryViaReflection(org.springframework.data.repository.core.RepositoryInformation,java.lang.Object...)
  name: R>getTargetRepositoryViaReflection(RepositoryInformation,Object)
  nameWithType: R>getTargetRepositoryViaReflection(RepositoryInformation,Object)
  fullName: R>getTargetRepositoryViaReflection(org.springframework.data.repository.core.RepositoryInformation,java.lang.Object...)
- uid: T>getRepository(java.lang.Class
  name: T>getRepository(Class
  nameWithType: T>getRepository(Class
  fullName: T>getRepository(java.lang.Class
- uid: T>,org.springframework.data.repository.core.support.RepositoryComposition.RepositoryFragments)
  name: T>,RepositoryComposition.RepositoryFragments)
  nameWithType: T>,RepositoryComposition.RepositoryFragments)
  fullName: T>,org.springframework.data.repository.core.support.RepositoryComposition.RepositoryFragments)
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.setRepositoryBaseClass(java.lang.Class
  name: RepositoryFactorySupport.setRepositoryBaseClass(Class
  nameWithType: RepositoryFactorySupport.setRepositoryBaseClass(Class
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.setRepositoryBaseClass(java.lang.Class
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: T,ID>getEntityInformation(java.lang.Class
  name: T,ID>getEntityInformation(Class
  nameWithType: T,ID>getEntityInformation(Class
  fullName: T,ID>getEntityInformation(java.lang.Class
- uid: T>)
  name: T>)
  nameWithType: T>)
  fullName: T>)
- uid: T>,java.lang.Object)
  name: T>,Object)
  nameWithType: T>,Object)
  fullName: T>,java.lang.Object)
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.addQueryCreationListener(org.springframework.data.repository.core.support.QueryCreationListener
  name: RepositoryFactorySupport.addQueryCreationListener(QueryCreationListener
  nameWithType: RepositoryFactorySupport.addQueryCreationListener(QueryCreationListener
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.addQueryCreationListener(org.springframework.data.repository.core.support.QueryCreationListener
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepositoryMetadata(java.lang.Class
  name: RepositoryFactorySupport.getRepositoryMetadata(Class
  nameWithType: RepositoryFactorySupport.getRepositoryMetadata(Class
  fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepositoryMetadata(java.lang.Class
