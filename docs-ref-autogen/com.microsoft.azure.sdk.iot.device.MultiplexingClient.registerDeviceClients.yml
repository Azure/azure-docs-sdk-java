### YamlMime:JavaMember
uid: "com.microsoft.azure.sdk.iot.device.MultiplexingClient.registerDeviceClients*"
fullName: "com.microsoft.azure.sdk.iot.device.MultiplexingClient.registerDeviceClients"
name: "registerDeviceClients"
nameWithType: "MultiplexingClient.registerDeviceClients"
members:
- uid: "com.microsoft.azure.sdk.iot.device.MultiplexingClient.registerDeviceClients(java.lang.Iterable<com.microsoft.azure.sdk.iot.device.DeviceClient>)"
  fullName: "com.microsoft.azure.sdk.iot.device.MultiplexingClient.registerDeviceClients(Iterable<DeviceClient> deviceClients)"
  name: "registerDeviceClients(Iterable<DeviceClient> deviceClients)"
  nameWithType: "MultiplexingClient.registerDeviceClients(Iterable<DeviceClient> deviceClients)"
  summary: "Register multiple device clients to this multiplexing client. This method may be called before or after opening the multiplexed connection.\n\nUp to <xref uid=\"com.microsoft.azure.sdk.iot.device.MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#MAX_MULTIPLEX_DEVICE_COUNT_AMQPS\"></xref> devices can be registered on a multiplexed AMQPS connection, and up to <xref uid=\"com.microsoft.azure.sdk.iot.device.MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS_WS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#MAX_MULTIPLEX_DEVICE_COUNT_AMQPS_WS\"></xref> devices can be registered on a multiplexed AMQPS\\_WS connection.\n\nA device client can be unregistered using <xref uid=\"com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(com.microsoft.azure.sdk.iot.device.DeviceClient)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#unregisterDeviceClient(DeviceClient)\"></xref>, <xref uid=\"com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(com.microsoft.azure.sdk.iot.device.DeviceClient,long)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#unregisterDeviceClient(DeviceClient, long)\"></xref>, <xref uid=\"com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClients(java.lang.Iterable<com.microsoft.azure.sdk.iot.device.DeviceClient>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#unregisterDeviceClients(Iterable)\"></xref>, or <xref uid=\"com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClients(java.lang.Iterable<com.microsoft.azure.sdk.iot.device.DeviceClient>,long)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#unregisterDeviceClients(Iterable, long)\"></xref>. A device client will not be unregistered automatically if it encounters a non-retryable exception, so users are responsible for unregistering a device client when they no longer want it in this multiplexing client.\n\nIf the multiplexing client is already open, then these device clients will automatically be opened, too. If the multiplexing client is not open yet, then these device clients will not be opened until <xref uid=\"com.microsoft.azure.sdk.iot.device.MultiplexingClient.open()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MultiplexingClient#open()\"></xref> is called.\n\nIf the multiplexed connection is already open, then this call will asynchronously add each device client to the multiplexed connection, and then will block until all registrations have been completed.\n\nAny proxy settings set to the provided device clients will be overwritten by the proxy settings of this multiplexing client.\n\nThe registered device clients must use the same transport protocol (AMQPS or AMQPS\\_WS) that this multiplexing client uses.\n\nEach registered device client may have its own retry policy and its own SAS token expiry time, separate from every other registered device client.\n\nThe registered device clients must use symmetric key based authentication.\n\nThe registered device clients must belong to the same IoT Hub as all previously registered device clients.\n\nIf any of these device clients are already registered to this multiplexing client, then then this method will not do anything to that particular device client. All other provided device clients will still be registered though.\n\nAny subscriptions (twin, methods, cloud to device messages) set on these device clients from when it was previously registered to any multiplexing client will need to be set again as subscriptions and their callbacks are not preserved."
  parameters:
  - description: "The device clients to associate with this multiplexing client."
    name: "deviceClients"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.device.DeviceClient?alt=com.microsoft.azure.sdk.iot.device.DeviceClient&text=DeviceClient\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void registerDeviceClients(Iterable<DeviceClient> deviceClients)"
  exceptions:
  - description: "If the thread gets interrupted while waiting for the registration to succeed. This\n will never be thrown if the multiplexing client is not open yet."
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "If the thread gets interrupted while waiting for the registration to succeed. This\n will never be thrown if the multiplexing client is not open yet."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientException?alt=com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientException&text=MultiplexingClientException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.MultiplexingClient.registerDeviceClients(java.lang.Iterable<com.microsoft.azure.sdk.iot.device.DeviceClient>,long)"
  fullName: "com.microsoft.azure.sdk.iot.device.MultiplexingClient.registerDeviceClients(Iterable<DeviceClient> deviceClients, long timeoutMilliseconds)"
  name: "registerDeviceClients(Iterable<DeviceClient> deviceClients, long timeoutMilliseconds)"
  nameWithType: "MultiplexingClient.registerDeviceClients(Iterable<DeviceClient> deviceClients, long timeoutMilliseconds)"
  summary: "Register multiple device clients to this multiplexing client. This method may be called before or after opening the multiplexed connection.\n\nUp to <xref uid=\"com.microsoft.azure.sdk.iot.device.MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#MAX_MULTIPLEX_DEVICE_COUNT_AMQPS\"></xref> devices can be registered on a multiplexed AMQPS connection, and up to <xref uid=\"com.microsoft.azure.sdk.iot.device.MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS_WS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#MAX_MULTIPLEX_DEVICE_COUNT_AMQPS_WS\"></xref> devices can be registered on a multiplexed AMQPS\\_WS connection.\n\nA device client can be unregistered using <xref uid=\"com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(com.microsoft.azure.sdk.iot.device.DeviceClient)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#unregisterDeviceClient(DeviceClient)\"></xref>, <xref uid=\"com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(com.microsoft.azure.sdk.iot.device.DeviceClient,long)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#unregisterDeviceClient(DeviceClient, long)\"></xref>, <xref uid=\"com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClients(java.lang.Iterable<com.microsoft.azure.sdk.iot.device.DeviceClient>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#unregisterDeviceClients(Iterable)\"></xref>, or <xref uid=\"com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClients(java.lang.Iterable<com.microsoft.azure.sdk.iot.device.DeviceClient>,long)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#unregisterDeviceClients(Iterable, long)\"></xref>. A device client will not be unregistered automatically if it encounters a non-retryable exception, so users are responsible for unregistering a device client when they no longer want it in this multiplexing client.\n\nIf the multiplexing client is already open, then these device clients will automatically be opened, too. If the multiplexing client is not open yet, then these device clients will not be opened until <xref uid=\"com.microsoft.azure.sdk.iot.device.MultiplexingClient.open()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MultiplexingClient#open()\"></xref> is called.\n\nIf the multiplexed connection is already open, then this call will asynchronously add each device client to the multiplexed connection, and then will block until all registrations have been completed.\n\nAny proxy settings set to the provided device clients will be overwritten by the proxy settings of this multiplexing client.\n\nThe registered device clients must use the same transport protocol (AMQPS or AMQPS\\_WS) that this multiplexing client uses.\n\nEach registered device client may have its own retry policy and its own SAS token expiry time, separate from every other registered device client.\n\nThe registered device clients must use symmetric key based authentication.\n\nThe registered device clients must belong to the same IoT Hub as all previously registered device clients.\n\nIf any of these device clients are already registered to this multiplexing client, then then this method will not do anything to that particular device client. All other provided device clients will still be registered though.\n\nAny subscriptions (twin, methods, cloud to device messages) set on these device clients from when it was previously registered to any multiplexing client will need to be set again as subscriptions and their callbacks are not preserved."
  parameters:
  - description: "The device clients to associate with this multiplexing client."
    name: "deviceClients"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.device.DeviceClient?alt=com.microsoft.azure.sdk.iot.device.DeviceClient&text=DeviceClient\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "How long (in milliseconds) to let this operation wait for all registrations to complete. If this threshold is passed, a <xref uid=\"com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientDeviceRegistrationTimeoutException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientDeviceRegistrationTimeoutException\"></xref> is thrown."
    name: "timeoutMilliseconds"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void registerDeviceClients(Iterable<DeviceClient> deviceClients, long timeoutMilliseconds)"
  exceptions:
  - description: "If the thread gets interrupted while waiting for the registration to succeed. This\n will never be thrown if the multiplexing client is not open yet."
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - description: "If the thread gets interrupted while waiting for the registration to succeed. This\n will never be thrown if the multiplexing client is not open yet."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientException?alt=com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientException&text=MultiplexingClientException\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.microsoft.azure.sdk.iot.device"
artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.30.1
