### YamlMime:JavaType
uid: "com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity"
fullName: "com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity<T>"
name: "BasicCosmosPersistentEntity<T>"
nameWithType: "BasicCosmosPersistentEntity<T>"
summary: "Simple value object to capture information of <xref uid=\"com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPersistentProperty\"></xref>s."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"org.springframework.data.mapping.model.BasicPersistentEntity\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.<A>findAnnotation(java.lang.Class<A>)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.<A>isAnnotationPresent(java.lang.Class<A>)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.<B>getPropertyAccessor(B)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.<B>getPropertyPathAccessor(B)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.addAssociation(org.springframework.data.mapping.Association<P>)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.addPersistentProperty(P)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.doWithAssociations(org.springframework.data.mapping.AssociationHandler<P>)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.doWithAssociations(org.springframework.data.mapping.SimpleAssociationHandler)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.doWithProperties(org.springframework.data.mapping.PropertyHandler<P>)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.doWithProperties(org.springframework.data.mapping.SimplePropertyHandler)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.getEvaluationContext(java.lang.Object)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.getFallbackIsNewStrategy()"
- "org.springframework.data.mapping.model.BasicPersistentEntity.getIdProperty()"
- "org.springframework.data.mapping.model.BasicPersistentEntity.getIdentifierAccessor(java.lang.Object)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.getName()"
- "org.springframework.data.mapping.model.BasicPersistentEntity.getPersistenceConstructor()"
- "org.springframework.data.mapping.model.BasicPersistentEntity.getPersistentProperties(java.lang.Class<? extends java.lang.annotation.Annotation>)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.getPersistentProperty(java.lang.String)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.getType()"
- "org.springframework.data.mapping.model.BasicPersistentEntity.getTypeAlias()"
- "org.springframework.data.mapping.model.BasicPersistentEntity.getTypeInformation()"
- "org.springframework.data.mapping.model.BasicPersistentEntity.getVersionProperty()"
- "org.springframework.data.mapping.model.BasicPersistentEntity.hasIdProperty()"
- "org.springframework.data.mapping.model.BasicPersistentEntity.hasVersionProperty()"
- "org.springframework.data.mapping.model.BasicPersistentEntity.isConstructorArgument(org.springframework.data.mapping.PersistentProperty<?>)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.isIdProperty(org.springframework.data.mapping.PersistentProperty<?>)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.isImmutable()"
- "org.springframework.data.mapping.model.BasicPersistentEntity.isNew(java.lang.Object)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.isVersionProperty(org.springframework.data.mapping.PersistentProperty<?>)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.iterator()"
- "org.springframework.data.mapping.model.BasicPersistentEntity.requiresPropertyPopulation()"
- "org.springframework.data.mapping.model.BasicPersistentEntity.returnPropertyIfBetterIdPropertyCandidateOrNull(P)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.setEvaluationContextProvider(org.springframework.data.spel.EvaluationContextProvider)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.setPersistentPropertyAccessorFactory(org.springframework.data.mapping.model.PersistentPropertyAccessorFactory)"
- "org.springframework.data.mapping.model.BasicPersistentEntity.verify()"
syntax: "public class BasicCosmosPersistentEntity<T> extends BasicPersistentEntity<T,CosmosPersistentProperty> implements CosmosPersistentEntity<T>, ApplicationContextAware"
constructors:
- "com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity.BasicCosmosPersistentEntity(org.springframework.data.util.TypeInformation<T>)"
methods:
- "com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity.getCollection()"
- "com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity.getContainer()"
- "com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity.getLanguage()"
- "com.azure.spring.data.cosmos.core.mapping.BasicCosmosPersistentEntity.setApplicationContext(org.springframework.context.ApplicationContext)"
type: "class"
typeParameters:
- name: "T"
implements:
- "<xref href=\"com.azure.spring.data.cosmos.core.mapping.CosmosPersistentEntity?alt=com.azure.spring.data.cosmos.core.mapping.CosmosPersistentEntity&text=CosmosPersistentEntity\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"org.springframework.context.ApplicationContextAware?alt=org.springframework.context.ApplicationContextAware&text=ApplicationContextAware\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.spring.data.cosmos.core.mapping"
artifact: com.azure:azure-spring-data-cosmos:3.3.0
