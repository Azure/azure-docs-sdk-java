### YamlMime:JavaMember
nameWithType: ModuleClient.sendEvent
type: method
members:
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEvent(Message message)
  name: sendEvent(Message message)
  nameWithType: ModuleClient.sendEvent(Message message)
  parameters:
  - name: message
    type: <xref href="com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message" data-throw-if-not-resolved="False"/>
  syntax: public void sendEvent(Message message)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEvent(Message)
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEvent(Message message, String outputName)
  name: sendEvent(Message message, String outputName)
  nameWithType: ModuleClient.sendEvent(Message message, String outputName)
  parameters:
  - description: <p>the message to be sent. </p>
    name: message
    type: <xref href="com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message" data-throw-if-not-resolved="False"/>
  - description: <p>the outputName to route the message to</p>
    name: outputName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the operation is interrupted while waiting on the telemetry to be acknowledged by the service. </p>
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if the client has not been opened yet or is already closed. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the request is rejected by the service for any reason of if the synchronous operation times out. </p>
  summary: >-
    <p>Synchronously sends a message to to a particular outputName.</p>

    <p></p>
  syntax: public void sendEvent(Message message, String outputName)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEvent(Message,String)
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEvent(Message message, String outputName, int timeoutMilliseconds)
  name: sendEvent(Message message, String outputName, int timeoutMilliseconds)
  nameWithType: ModuleClient.sendEvent(Message message, String outputName, int timeoutMilliseconds)
  parameters:
  - description: <p>the message to be sent. </p>
    name: message
    type: <xref href="com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message" data-throw-if-not-resolved="False"/>
  - description: <p>the outputName to route the message to </p>
    name: outputName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of milliseconds to wait for the service to acknowledge this message. If 0, then it will wait indefinitely.</p>
    name: timeoutMilliseconds
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the operation is interrupted while waiting on the telemetry to be acknowledged by the service. </p>
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if the client has not been opened yet or is already closed. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the request is rejected by the service for any reason of if the synchronous operation times out. </p>
  summary: >-
    <p>Synchronously sends a message to to a particular outputName.</p>

    <p></p>
  syntax: public void sendEvent(Message message, String outputName, int timeoutMilliseconds)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEvent(Message,String,int)
uid: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEvent*
fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEvent
name: sendEvent(Message message)
package: com.microsoft.azure.sdk.iot.device
metadata: {}
