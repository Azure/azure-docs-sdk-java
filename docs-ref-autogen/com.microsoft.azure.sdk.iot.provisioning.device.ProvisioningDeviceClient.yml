### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient"
fullName: "com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient"
name: "ProvisioningDeviceClient"
nameWithType: "ProvisioningDeviceClient"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class ProvisioningDeviceClient"
methods:
- uid: "com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient.closeNow()"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient.closeNow()"
  name: "closeNow()"
  nameWithType: "ProvisioningDeviceClient.closeNow()"
  summary: "Closes all the executors opened by the client if they have not already closed."
  syntax: "public void closeNow()"
  desc: "Closes all the executors opened by the client if they have not already closed."
- uid: "com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient.create(java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClientTransportProtocol,com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider)"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient.create(String globalEndpoint, String idScope, ProvisioningDeviceClientTransportProtocol protocol, SecurityProvider securityProvider)"
  name: "create(String globalEndpoint, String idScope, ProvisioningDeviceClientTransportProtocol protocol, SecurityProvider securityProvider)"
  nameWithType: "ProvisioningDeviceClient.create(String globalEndpoint, String idScope, ProvisioningDeviceClientTransportProtocol protocol, SecurityProvider securityProvider)"
  summary: "Creates an instance of Provisioning<wbr>Device<wbr>Client"
  modifiers:
  - "static"
  parameters:
  - description: "global endpoint for the service to connect to. Cannot be <code>null</code>."
    name: "globalEndpoint"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "IdScope for the instance of the service hosted by you. Cannot be <code>null</code>."
    name: "idScope"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Protocol to communicate with the service onto. Cannot be <code>null</code>."
    name: "protocol"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClientTransportProtocol?alt=com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClientTransportProtocol&text=ProvisioningDeviceClientTransportProtocol\" data-throw-if-not-resolved=\"False\" />"
  - description: "Security Provider for X509 or TPM flow. Cannot be <code>null</code>."
    name: "securityProvider"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider?alt=com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider&text=SecurityProvider\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static ProvisioningDeviceClient create(String globalEndpoint, String idScope, ProvisioningDeviceClientTransportProtocol protocol, SecurityProvider securityProvider)"
  exceptions:
  - description: "if any of the underlying API calls fail to process."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.device.internal.exceptions.ProvisioningDeviceClientException?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.exceptions.ProvisioningDeviceClientException&text=ProvisioningDeviceClientException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Creates an instance of ProvisioningDeviceClient"
  returns:
    description: "An instance of ProvisioningDeviceClient"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient?alt=com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient&text=ProvisioningDeviceClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient.registerDevice(com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClientRegistrationCallback,java.lang.Object)"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient.registerDevice(ProvisioningDeviceClientRegistrationCallback provisioningDeviceClientRegistrationCallback, Object context)"
  name: "registerDevice(ProvisioningDeviceClientRegistrationCallback provisioningDeviceClientRegistrationCallback, Object context)"
  nameWithType: "ProvisioningDeviceClient.registerDevice(ProvisioningDeviceClientRegistrationCallback provisioningDeviceClientRegistrationCallback, Object context)"
  summary: "Register's a device with the service and provides you with iothub uri and the registered device."
  parameters:
  - description: "Callback where you can retrieve the status of registration like iothub uri and the registered device or\n                                                     any exception that was caused during registration process. Cannot be <code>null</code>."
    name: "provisioningDeviceClientRegistrationCallback"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClientRegistrationCallback?alt=com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClientRegistrationCallback&text=ProvisioningDeviceClientRegistrationCallback\" data-throw-if-not-resolved=\"False\" />"
  - description: "Context for the callback. Can be <code>null</code>."
    name: "context"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void registerDevice(ProvisioningDeviceClientRegistrationCallback provisioningDeviceClientRegistrationCallback, Object context)"
  exceptions:
  - description: "if any of the underlying API calls fail to process."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.device.internal.exceptions.ProvisioningDeviceClientException?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.exceptions.ProvisioningDeviceClientException&text=ProvisioningDeviceClientException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Register's a device with the service and provides you with iothub uri and the registered device."
- uid: "com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient.registerDevice(com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClientRegistrationCallback,java.lang.Object,com.microsoft.azure.sdk.iot.provisioning.device.AdditionalData)"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient.registerDevice(ProvisioningDeviceClientRegistrationCallback provisioningDeviceClientRegistrationCallback, Object context, AdditionalData additionalData)"
  name: "registerDevice(ProvisioningDeviceClientRegistrationCallback provisioningDeviceClientRegistrationCallback, Object context, AdditionalData additionalData)"
  nameWithType: "ProvisioningDeviceClient.registerDevice(ProvisioningDeviceClientRegistrationCallback provisioningDeviceClientRegistrationCallback, Object context, AdditionalData additionalData)"
  summary: "Register's a device with the service and provides you with iothub uri and the registered device."
  parameters:
  - description: "Callback where you can retrieve the status of registration like iothub uri and the registered device or\n                                                     any exception that was caused during registration process. Cannot be <code>null</code>."
    name: "provisioningDeviceClientRegistrationCallback"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClientRegistrationCallback?alt=com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClientRegistrationCallback&text=ProvisioningDeviceClientRegistrationCallback\" data-throw-if-not-resolved=\"False\" />"
  - description: "Context for the callback. Can be <code>null</code>."
    name: "context"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional data for device registration."
    name: "additionalData"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.device.AdditionalData?alt=com.microsoft.azure.sdk.iot.provisioning.device.AdditionalData&text=AdditionalData\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void registerDevice(ProvisioningDeviceClientRegistrationCallback provisioningDeviceClientRegistrationCallback, Object context, AdditionalData additionalData)"
  exceptions:
  - description: "if any of the underlying API calls fail to process."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.device.internal.exceptions.ProvisioningDeviceClientException?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.exceptions.ProvisioningDeviceClientException&text=ProvisioningDeviceClientException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Register's a device with the service and provides you with iothub uri and the registered device."
type: "class"
metadata: {}
package: "com.microsoft.azure.sdk.iot.provisioning.device"
artifact: com.microsoft.azure.sdk.iot.provisioning:provisioning-device-client:1.8.4
