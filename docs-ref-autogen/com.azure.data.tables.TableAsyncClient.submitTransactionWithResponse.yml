### YamlMime:JavaMember
uid: "com.azure.data.tables.TableAsyncClient.submitTransactionWithResponse*"
fullName: "com.azure.data.tables.TableAsyncClient.submitTransactionWithResponse"
name: "submitTransactionWithResponse"
nameWithType: "TableAsyncClient.submitTransactionWithResponse"
members:
- uid: "com.azure.data.tables.TableAsyncClient.submitTransactionWithResponse(java.util.List<com.azure.data.tables.models.TableTransactionAction>)"
  fullName: "com.azure.data.tables.TableAsyncClient.submitTransactionWithResponse(List<TableTransactionAction> transactionActions)"
  name: "submitTransactionWithResponse(List<TableTransactionAction> transactionActions)"
  nameWithType: "TableAsyncClient.submitTransactionWithResponse(List<TableTransactionAction> transactionActions)"
  summary: "Executes all <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"actions\"></xref> within the list inside a transaction. When the call completes, either all <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"actions\"></xref> in the transaction will succeed, or if a failure occurs, all <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"actions\"></xref> in the transaction will be rolled back. Each <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"action\"></xref> must operate on a distinct row key. Attempting to pass multiple <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"actions\"></xref> that share the same row key will cause an error.\n\n**Code Samples**\n\nSubmits a transaction that contains multiple <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"actions\"></xref> to be applied to <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> on a table. Prints out details of the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref> for the operation, as well as each <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"action\"></xref>'s corresponding <xref uid=\"Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP\n response\"></xref>.\n\n```java\nList<TableTransactionAction> myTransactionActions = new ArrayList<>();\n\n String myPartitionKey = \"markers\";\n String myFirstEntityRowKey = \"m001\";\n String mySecondEntityRowKey = \"m002\";\n\n TableEntity myFirstEntity = new TableEntity(myPartitionKey, myFirstEntityRowKey)\n     .addProperty(\"Type\", \"Dry\")\n     .addProperty(\"Color\", \"Red\");\n\n myTransactionActions.add(new TableTransactionAction(TableTransactionActionType.CREATE, myFirstEntity));\n\n System.out.printf(\"Added create action for entity with partition key '%s', and row key '%s'.%n\", myPartitionKey,\n     myFirstEntityRowKey);\n\n TableEntity mySecondEntity = new TableEntity(myPartitionKey, mySecondEntityRowKey)\n     .addProperty(\"Type\", \"Wet\")\n     .addProperty(\"Color\", \"Blue\");\n\n myTransactionActions.add(new TableTransactionAction(TableTransactionActionType.CREATE, mySecondEntity));\n\n System.out.printf(\"Added create action for entity with partition key '%s', and row key '%s'.%n\", myPartitionKey,\n     mySecondEntityRowKey);\n\n tableAsyncClient.submitTransactionWithResponse(myTransactionActions)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(response -> {\n         System.out.printf(\"Response successful with status code: %d. The ordered response status codes of the\"\n             + \" submitted actions are:\", response.getStatusCode());\n\n         response.getValue().getTransactionActionResponses().forEach(tableTransactionActionResponse ->\n             System.out.printf(\"%n%d\", tableTransactionActionResponse.getStatusCode()));\n     });\n```\n\nShows how to handle a transaction with a failing <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"action\"></xref> via the provided <xref uid=\"com.azure.data.tables.models.TableTransactionFailedException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"exception\"></xref>, which contains the index of the first failing action in the transaction.\n\n```java\ntableAsyncClient.submitTransactionWithResponse(myTransactionActions)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .doOnError(TableTransactionFailedException.class, e -> {\n         // If the transaction fails, the resulting exception contains the index of the first action that failed.\n         int failedActionIndex = e.getFailedTransactionActionIndex();\n         // You can use this index to modify the offending action or remove it from the list of actions to send\n         // in the transaction, for example.\n         transactionActions.remove(failedActionIndex);\n         // And then retry submitting the transaction.\n     })\n     .subscribe(response -> {\n         System.out.printf(\"Response successful with status code: %d. The ordered response status codes of the\"\n             + \" submitted actions are:\", response.getStatusCode());\n\n         response.getValue().getTransactionActionResponses().forEach(tableTransactionActionResponse ->\n             System.out.printf(\"%n%d\", tableTransactionActionResponse.getStatusCode()));\n     });\n```"
  parameters:
  - description: "A <xref uid=\"java.util.List\" data-throw-if-not-resolved=\"false\" data-raw-source=\"List\"></xref> of <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"transaction actions\"></xref> to perform on\n <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> in a table."
    name: "transactionActions"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.tables.models.TableTransactionAction?alt=com.azure.data.tables.models.TableTransactionAction&text=TableTransactionAction\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<TableTransactionResult>> submitTransactionWithResponse(List<TableTransactionAction> transactionActions)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref> produced for the transaction itself. The\n response's value will contain a <xref uid=\"java.util.List\" data-throw-if-not-resolved=\"false\" data-raw-source=\"List\"></xref> of <xref uid=\"com.azure.data.tables.models.TableTransactionActionResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"sub-responses\"></xref> that\n correspond to each <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"action\"></xref> in the transaction."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.tables.models.TableTransactionResult?alt=com.azure.data.tables.models.TableTransactionResult&text=TableTransactionResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.data.tables"
artifact: com.azure:azure-data-tables:12.2.1
