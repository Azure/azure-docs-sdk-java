### YamlMime:ManagedReference
items:
- uid: system.fabric
  id: fabric
  children:
  - system.fabric._cancellation_token
  - system.fabric._cancellation_token_source
  - system.fabric._claims_credentials
  - system.fabric._code_package
  - system.fabric._code_package_activation_context
  - system.fabric._configuration_package
  - system.fabric._credential_type
  - system.fabric._data_package
  - system.fabric._encryption_utility
  - system.fabric._epoch
  - system.fabric._fabric_client
  - system.fabric._fabric_client_role
  - system.fabric._fabric_client_settings
  - system.fabric._fabric_code_package_activation_context
  - system.fabric._fabric_error_code
  - system.fabric._fabric_replicator
  - system.fabric._fabric_runtime
  - system.fabric._fault_type
  - system.fabric._gateway_information
  - system.fabric._int64_range_partition_information
  - system.fabric._load_metric
  - system.fabric._move_cost
  - system.fabric._named_partition_information
  - system.fabric._node_context
  - system.fabric._node_id
  - system.fabric._none_security_credentials
  - system.fabric._observable
  - system.fabric._observer
  - system.fabric._operation
  - system.fabric._operation_data
  - system.fabric._operation_data_stream
  - system.fabric._operation_stream
  - system.fabric._operation_stream2
  - system.fabric._operation_type
  - system.fabric._package_added_event_args
  - system.fabric._package_modified_event_args
  - system.fabric._package_removed_event_args
  - system.fabric._package_sharing_policy
  - system.fabric._package_sharing_policy_list
  - system.fabric._package_sharing_policy_scope
  - system.fabric._partition_access_status
  - system.fabric._primary_replicator
  - system.fabric._protection_level
  - system.fabric._replica_information
  - system.fabric._replica_open_mode
  - system.fabric._replica_role
  - system.fabric._replica_set_configuration
  - system.fabric._replica_set_quorum_mode
  - system.fabric._replica_status
  - system.fabric._replicator
  - system.fabric._replicator_settings
  - system.fabric._resolved_service_endpoint
  - system.fabric._resolved_service_partition
  - system.fabric._security_credentials
  - system.fabric._sequence_number
  - system.fabric._service_context
  - system.fabric._service_endpoint_role
  - system.fabric._service_initialization_parameters
  - system.fabric._service_partition
  - system.fabric._service_partition_information
  - system.fabric._service_partition_kind
  - system.fabric._singleton_partition_information
  - system.fabric._state_provider
  - system.fabric._state_replicator
  - system.fabric._state_replicator2
  - system.fabric._stateful_service_context
  - system.fabric._stateful_service_factory
  - system.fabric._stateful_service_failover_settings
  - system.fabric._stateful_service_initialization_parameters
  - system.fabric._stateful_service_partition
  - system.fabric._stateful_service_replica
  - system.fabric._stateless_service_factory
  - system.fabric._stateless_service_initialization_parameters
  - system.fabric._stateless_service_instance
  - system.fabric._stateless_service_partition
  - system.fabric._windows_credentials
  - system.fabric._x509_credentials
  - system.fabric._x509_credentials2
  - system.fabric._x509_find_type
  - system.fabric._x509_name
  - system.fabric._x509_store_location
  href: system.fabric.yml
  langs:
  - java
  name: system.fabric
  nameWithType: system.fabric
  fullName: system.fabric
  type: Namespace
  source:
    remote:
      path: src/prod/src/java/system.fabric/src/system/fabric/CancellationToken.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/CancellationToken.java
  syntax:
    content: package system.fabric
references:
- uid: system.fabric.client
- uid: system.fabric.description
  href: system.fabric.description.yml
  name: system.fabric.description
  nameWithType: system.fabric.description
  fullName: system.fabric.description
  type: Namespace
  syntax:
    content: package system.fabric.description
- uid: system.fabric.exception
  href: system.fabric.exception.yml
  name: system.fabric.exception
  nameWithType: system.fabric.exception
  fullName: system.fabric.exception
  type: Namespace
  syntax:
    content: package system.fabric.exception
- uid: system.fabric.health
  href: system.fabric.health.yml
  name: system.fabric.health
  nameWithType: system.fabric.health
  fullName: system.fabric.health
  type: Namespace
  syntax:
    content: package system.fabric.health
- uid: system.fabric.image_store
- uid: system.fabric.internal
- uid: system.fabric.interop
- uid: system.fabric.property
- uid: system.fabric.query
  href: system.fabric.query.yml
  name: system.fabric.query
  nameWithType: system.fabric.query
  fullName: system.fabric.query
  type: Namespace
  syntax:
    content: package system.fabric.query
- uid: system.fabric.repair
- uid: system.fabric.security
- uid: system.fabric.upgrade
- uid: system.fabric._cancellation_token
  parent: system.fabric
  href: system.fabric._cancellation_token.yml
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: system.fabric.CancellationToken
  type: Class
  summary: <p>A <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">CancellationToken</xref> is used to propagate notification that operations should be canceled. You create a cancellation token by instantiating a <xref uid="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource</xref> object, which manages cancellation tokens retrieved from its <xref uid="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#getToken()</xref> method. You then pass the cancellation token to any number of operations that should receive notice of cancellation. The token cannot be used to initiate cancellation. When the owning object calls <xref uid="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#cancel()</xref>, the cancelled property on the cancellation token is set to true. The objects that receive the notification can respond in whatever manner is appropriate. </p>
  syntax:
    content: public class CancellationToken
- uid: system.fabric._cancellation_token_source
  parent: system.fabric
  href: system.fabric._cancellation_token_source.yml
  name: CancellationTokenSource
  nameWithType: CancellationTokenSource
  fullName: system.fabric.CancellationTokenSource
  type: Class
  summary: <p>A <xref uid="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false">CancellationTokenSource</xref> is used to create <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object and manage it. </p>
  syntax:
    content: public class CancellationTokenSource
- uid: system.fabric._claims_credentials
  parent: system.fabric
  href: system.fabric._claims_credentials.yml
  name: ClaimsCredentials
  nameWithType: ClaimsCredentials
  fullName: system.fabric.ClaimsCredentials
  type: Class
  summary: <p>Represents the claim based security credential acquired from STS (security token service). </p>
  syntax:
    content: public class ClaimsCredentials extends SecurityCredentials
- uid: system.fabric._code_package
  parent: system.fabric
  href: system.fabric._code_package.yml
  name: CodePackage
  nameWithType: CodePackage
  fullName: system.fabric.CodePackage
  type: Class
  summary: <p>Represents the code package definition. </p>
  syntax:
    content: public class CodePackage
- uid: system.fabric._code_package_activation_context
  parent: system.fabric
  href: system.fabric._code_package_activation_context.yml
  name: CodePackageActivationContext
  nameWithType: CodePackageActivationContext
  fullName: system.fabric.CodePackageActivationContext
  type: Interface
  summary: <p>Represents activation context for the Service Fabric service. This is valid for fabric activated service only. </p>
  syntax:
    content: public interface CodePackageActivationContext
- uid: system.fabric._configuration_package
  parent: system.fabric
  href: system.fabric._configuration_package.yml
  name: ConfigurationPackage
  nameWithType: ConfigurationPackage
  fullName: system.fabric.ConfigurationPackage
  type: Class
  summary: <p>Represents a configuration package. </p>
  syntax:
    content: public class ConfigurationPackage
- uid: system.fabric._credential_type
  parent: system.fabric
  href: system.fabric._credential_type.yml
  name: CredentialType
  nameWithType: CredentialType
  fullName: system.fabric.CredentialType
  type: Enum
  syntax:
    content: public enum CredentialType
- uid: system.fabric._data_package
  parent: system.fabric
  href: system.fabric._data_package.yml
  name: DataPackage
  nameWithType: DataPackage
  fullName: system.fabric.DataPackage
  type: Class
  summary: <p>Defines a data package of an application. </p>
  syntax:
    content: public class DataPackage
- uid: system.fabric._encryption_utility
  parent: system.fabric
  href: system.fabric._encryption_utility.yml
  name: EncryptionUtility
  nameWithType: EncryptionUtility
  fullName: system.fabric.EncryptionUtility
  type: Class
  summary: <p>Utility class to perform encryption and decryption operations. </p>
  syntax:
    content: public class EncryptionUtility
- uid: system.fabric._epoch
  parent: system.fabric
  href: system.fabric._epoch.yml
  name: Epoch
  nameWithType: Epoch
  fullName: system.fabric.Epoch
  type: Class
  summary: >-
    <p>Represents the current version of the partition in Service Fabric. </p>

    <p>

      <b>Remarks:</b>An <xref uid="system.fabric._epoch" data-throw-if-not-resolved="false">Epoch</xref> is a configuration number for the partition as a whole. When the configuration of the replica set changes, for example when the Primary replica changes, the operations that are replicated from the new Primary replica are said to be a new <xref uid="system.fabric._epoch" data-throw-if-not-resolved="false">Epoch</xref> from the ones which were sent by the old Primary replica. The fact that the Primary has changed is not directly visible to Secondary replicas, which are usually unaffected by the failure that affected the original Primary replica. To track that the Primary replica has changed has to be communicated to the Secondary replica. This communication occurs via the <xref uid="system.fabric._state_provider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false">system.fabric.StateProvider#updateEpochAsync(system.fabric.Epoch, system.fabric.SequenceNumber, system.fabric.CancellationToken)</xref> method. Most services can ignore the details of the inner fields of the <xref uid="system.fabric._epoch" data-throw-if-not-resolved="false">Epoch</xref> as it is usually sufficient to know that the <xref uid="system.fabric._epoch" data-throw-if-not-resolved="false">Epoch</xref> has changed and to compare Epochs to determine relative ordering of operations and events in the system. Comparison operations are provided for this purpose. </p>
  syntax:
    content: public class Epoch
- uid: system.fabric._fabric_client
  parent: system.fabric
  href: system.fabric._fabric_client.yml
  name: FabricClient
  nameWithType: FabricClient
  fullName: system.fabric.FabricClient
  type: Class
  summary: >-
    <p>Client for a Service Fabric cluster. </p>

    <p>

      <b>Remarks:</b>It is highly recommended that you share FabricClients as much as possible. This is because the <xref uid="system.fabric._fabric_client" data-throw-if-not-resolved="false">FabricClient</xref> has multiple optimizations such as caching and batching that you would not be able to fully utilize otherwise. </p>
  syntax:
    content: public class FabricClient
- uid: system.fabric._fabric_client_role
  parent: system.fabric
  href: system.fabric._fabric_client_role.yml
  name: FabricClientRole
  nameWithType: FabricClientRole
  fullName: system.fabric.FabricClientRole
  type: Enum
  summary: <p>Represents the fabric client security role. </p>
  syntax:
    content: public enum FabricClientRole
- uid: system.fabric._fabric_client_settings
  parent: system.fabric
  href: system.fabric._fabric_client_settings.yml
  name: FabricClientSettings
  nameWithType: FabricClientSettings
  fullName: system.fabric.FabricClientSettings
  type: Class
  summary: <p>Represents the configuration settings for the <xref uid="system.fabric._fabric_client" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref> class. </p>
  syntax:
    content: public class FabricClientSettings
- uid: system.fabric._fabric_code_package_activation_context
  parent: system.fabric
  href: system.fabric._fabric_code_package_activation_context.yml
  name: FabricCodePackageActivationContext
  nameWithType: FabricCodePackageActivationContext
  fullName: system.fabric.FabricCodePackageActivationContext
  type: Class
  summary: <p>Represents activation context for the Service Fabric service. This is valid for fabric activated service only. </p>
  syntax:
    content: public class FabricCodePackageActivationContext implements CodePackageActivationContext
- uid: system.fabric._fabric_error_code
  parent: system.fabric
  href: system.fabric._fabric_error_code.yml
  name: FabricErrorCode
  nameWithType: FabricErrorCode
  fullName: system.fabric.FabricErrorCode
  type: Enum
  syntax:
    content: public enum FabricErrorCode
- uid: system.fabric._fabric_replicator
  parent: system.fabric
  href: system.fabric._fabric_replicator.yml
  name: FabricReplicator
  nameWithType: FabricReplicator
  fullName: system.fabric.FabricReplicator
  type: Class
  summary: >-
    <p>Replicates state for high availability and reliability. </p>

    <p>

      <b>Remarks:</b>Provides the default implementation of the <xref uid="system.fabric._state_replicator" data-throw-if-not-resolved="false">system.fabric.StateReplicator</xref>, <xref uid="system.fabric._replicator" data-throw-if-not-resolved="false">system.fabric.Replicator</xref>, and <xref uid="system.fabric._primary_replicator" data-throw-if-not-resolved="false">system.fabric.PrimaryReplicator</xref> interfaces, which user services can use, along with their implementation of the <xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">system.fabric.StateProvider</xref> interface. An instance of the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref> class is obtained via the <xref uid="system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)" data-throw-if-not-resolved="false">system.fabric.StatefulServicePartition#createReplicator( system.fabric.StateProvider, system.fabric.ReplicatorSettings)</xref> method, which can be cast to <xref uid="system.fabric._state_replicator" data-throw-if-not-resolved="false">system.fabric.StateReplicator</xref> for use. </p>
  syntax:
    content: public class FabricReplicator implements Replicator
- uid: system.fabric._fabric_runtime
  parent: system.fabric
  href: system.fabric._fabric_runtime.yml
  name: FabricRuntime
  nameWithType: FabricRuntime
  fullName: system.fabric.FabricRuntime
  type: Class
  summary: <p>Allows user created hosts to obtain their <xref uid="system.fabric._code_package_activation_context" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext</xref>, well as to register the necessary service factories [ <xref uid="system.fabric._stateless_service_factory" data-throw-if-not-resolved="false">system.fabric.StatelessServiceFactory</xref>, <xref uid="system.fabric._stateful_service_factory" data-throw-if-not-resolved="false">system.fabric.StatefulServiceFactory</xref> ] or service types directly. </p>
  syntax:
    content: public class FabricRuntime
- uid: system.fabric._fault_type
  parent: system.fabric
  href: system.fabric._fault_type.yml
  name: FaultType
  nameWithType: FaultType
  fullName: system.fabric.FaultType
  type: Enum
  summary: >-
    <p>Indicates the type of fault that a service reports: invalid, transient or permanent. </p>

    <p>

      <b>Remarks : </b> Services can report faults during runtime by using the <xref uid="system.fabric._service_partition.reportFault(FaultType)" data-throw-if-not-resolved="false">system.fabric.ServicePartition#reportFault(FaultType)</xref> method to indicate the type of fault. </p>
  syntax:
    content: public enum FaultType
- uid: system.fabric._gateway_information
  parent: system.fabric
  href: system.fabric._gateway_information.yml
  name: GatewayInformation
  nameWithType: GatewayInformation
  fullName: system.fabric.GatewayInformation
  type: Class
  summary: <p>Contains information identifying a Service Fabric node in the cluster. </p>
  syntax:
    content: public class GatewayInformation
- uid: system.fabric._int64_range_partition_information
  parent: system.fabric
  href: system.fabric._int64_range_partition_information.yml
  name: Int64RangePartitionInformation
  nameWithType: Int64RangePartitionInformation
  fullName: system.fabric.Int64RangePartitionInformation
  type: Class
  summary: <p>Represents the Information for Partition </p>
  syntax:
    content: public class Int64RangePartitionInformation extends ServicePartitionInformation
- uid: system.fabric._load_metric
  parent: system.fabric
  href: system.fabric._load_metric.yml
  name: LoadMetric
  nameWithType: LoadMetric
  fullName: system.fabric.LoadMetric
  type: Class
  syntax:
    content: public class LoadMetric
- uid: system.fabric._move_cost
  parent: system.fabric
  href: system.fabric._move_cost.yml
  name: MoveCost
  nameWithType: MoveCost
  fullName: system.fabric.MoveCost
  type: Enum
  syntax:
    content: public enum MoveCost
- uid: system.fabric._named_partition_information
  parent: system.fabric
  href: system.fabric._named_partition_information.yml
  name: NamedPartitionInformation
  nameWithType: NamedPartitionInformation
  fullName: system.fabric.NamedPartitionInformation
  type: Class
  summary: <p>Describes the partition information for the name as a string that is based on partition schemes. Services observe this type of <xref uid="system.fabric._service_partition_information" data-throw-if-not-resolved="false">system.fabric.ServicePartitionInformation</xref> when the service is created with the <xref uid="" data-throw-if-not-resolved="false">system.fabric.NamedPartitionInformation</xref> derives from the <xref uid="system.fabric._service_partition" data-throw-if-not-resolved="false">system.fabric.ServicePartition</xref> interface and is provided to services as part of the <xref uid="system.fabric._stateful_service_partition" data-throw-if-not-resolved="false">system.fabric.StatefulServicePartition</xref> or <xref uid="system.fabric._stateless_service_partition" data-throw-if-not-resolved="false">system.fabric.StatelessServicePartition</xref> interface, which is passed in during the stateful <xref uid="system.fabric._stateful_service_replica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)" data-throw-if-not-resolved="false">system.fabric.StatefulServiceReplica#openAsync(system.fabric.ReplicaOpenMode,system.fabric.StatefulServicePartition,system.fabric.CancellationToken                                        )</xref> or the stateless <xref uid="system.fabric._stateless_service_instance.openAsync(StatelessServicePartition,CancellationToken)" data-throw-if-not-resolved="false">system.fabric.StatelessServiceInstance#openAsync(system.fabric.StatelessServicePartition,system.fabric.CancellationToken)</xref>. </p>
  syntax:
    content: public class NamedPartitionInformation extends ServicePartitionInformation
- uid: system.fabric._node_context
  parent: system.fabric
  href: system.fabric._node_context.yml
  name: NodeContext
  nameWithType: NodeContext
  fullName: system.fabric.NodeContext
  type: Class
  summary: <p>Class to encapsulate a node context. </p>
  syntax:
    content: public class NodeContext
- uid: system.fabric._node_id
  parent: system.fabric
  href: system.fabric._node_id.yml
  name: NodeId
  nameWithType: NodeId
  fullName: system.fabric.NodeId
  type: Class
  summary: <p>Class to encapsulate a node ID </p>
  syntax:
    content: public class NodeId
- uid: system.fabric._none_security_credentials
  parent: system.fabric
  href: system.fabric._none_security_credentials.yml
  name: NoneSecurityCredentials
  nameWithType: NoneSecurityCredentials
  fullName: system.fabric.NoneSecurityCredentials
  type: Class
  summary: >-
    <p>

      <xref uid="system.fabric._security_credentials" data-throw-if-not-resolved="false">SecurityCredentials</xref> subtype for non-secure mode. </p>
  syntax:
    content: public class NoneSecurityCredentials extends SecurityCredentials
- uid: system.fabric._observable
  parent: system.fabric
  href: system.fabric._observable.yml
  name: Observable<T>
  nameWithType: Observable<T>
  fullName: system.fabric.Observable<T>
  type: Class
  summary: <p>This class represents an observable object </p>
  syntax:
    content: public class Observable<T>
    typeParameters:
    - type: 8ce1ecb9
      description: <p>Takes a template parameter T. </p>
- uid: system.fabric._observer
  parent: system.fabric
  href: system.fabric._observer.yml
  name: Observer<U>
  nameWithType: Observer<U>
  fullName: system.fabric.Observer<U>
  type: Interface
  summary: <p>A class can implement the <xref uid="system.fabric._observer" data-throw-if-not-resolved="false">Observer</xref> interface when it wants to be informed of changes in observable objects. </p>
  syntax:
    content: public interface Observer<U>
    typeParameters:
    - type: 6043614c
      description: >-
        <p>

          <xref uid="system.fabric._observer" data-throw-if-not-resolved="false">Observer</xref> class template parameter. </p>
- uid: system.fabric._operation
  parent: system.fabric
  href: system.fabric._operation.yml
  name: Operation
  nameWithType: Operation
  fullName: system.fabric.Operation
  type: Interface
  summary: >-
    <p>

      <b>Remarks:</b>

      <xref uid="" data-throw-if-not-resolved="false">system.fabric.Operation</xref> is the base interface that describes state changes that are delivered to a Secondary replica. They contain the <xref uid="system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false">system.fabric.StateReplicator#replicateAsync(OperationData, SequenceNumber, system.fabric.CancellationToken)</xref> and the sequence number and other identifying information. </p>
  syntax:
    content: public interface Operation
- uid: system.fabric._operation_data
  parent: system.fabric
  href: system.fabric._operation_data.yml
  name: OperationData
  nameWithType: OperationData
  fullName: system.fabric.OperationData
  type: Class
  syntax:
    content: public class OperationData
- uid: system.fabric._operation_data_stream
  parent: system.fabric
  href: system.fabric._operation_data_stream.yml
  name: OperationDataStream
  nameWithType: OperationDataStream
  fullName: system.fabric.OperationDataStream
  type: Interface
  summary: <p>An <xref uid="" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref> encapsulates a stream of <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">system.fabric.OperationData</xref> objects that are exchanged between Primary replica and Secondary replica. Objects that implement <xref uid="" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref> are used during the copy process. Both the copy context <xref uid="system.fabric._state_provider.getCopyContext()" data-throw-if-not-resolved="false">system.fabric.StateProvider#getCopyContext()</xref> method that is sent from the Secondary replica to the Primary replica and the copy state <xref uid="system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false">system.fabric.StateProvider#getCopyState(SequenceNumber, OperationDataStream)</xref> method implement the <xref uid="" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref> interface. </p>
  syntax:
    content: public interface OperationDataStream
- uid: system.fabric._operation_stream
  parent: system.fabric
  href: system.fabric._operation_stream.yml
  name: OperationStream
  nameWithType: OperationStream
  fullName: system.fabric.OperationStream
  type: Interface
  summary: >-
    <p>Represents a stream of replication or copy operations that are sent from the Primary to the Secondary replica. </p>

    <p>

      <b> Remarks:</b> The streams returned from <xref uid="system.fabric._state_replicator.getCopyStream()" data-throw-if-not-resolved="false">system.fabric.StateReplicator#getCopyStream()</xref> and <xref uid="system.fabric._state_replicator.getReplicationStream()" data-throw-if-not-resolved="false">system.fabric.StateReplicator#getReplicationStream()</xref> are objects that implement <xref uid="" data-throw-if-not-resolved="false">system.fabric.OperationStream</xref>. </p>
  syntax:
    content: public interface OperationStream
- uid: system.fabric._operation_stream2
  parent: system.fabric
  href: system.fabric._operation_stream2.yml
  name: OperationStream2
  nameWithType: OperationStream2
  fullName: system.fabric.OperationStream2
  type: Interface
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax:
    content: public interface OperationStream2 extends OperationStream
- uid: system.fabric._operation_type
  parent: system.fabric
  href: system.fabric._operation_type.yml
  name: OperationType
  nameWithType: OperationType
  fullName: system.fabric.OperationType
  type: Enum
  summary: <p>Specifies the type of operation that is received via the copy or replication stream. </p>
  syntax:
    content: public enum OperationType
- uid: system.fabric._package_added_event_args
  parent: system.fabric
  href: system.fabric._package_added_event_args.yml
  name: PackageAddedEventArgs<T>
  nameWithType: PackageAddedEventArgs<T>
  fullName: system.fabric.PackageAddedEventArgs<T>
  type: Class
  summary: <p>Describes a package added event. </p>
  syntax:
    content: public class PackageAddedEventArgs<T>
    typeParameters:
    - type: 8ce1ecb9
      description: <p>Type of the package being described. See <xref uid="system.fabric._code_package" data-throw-if-not-resolved="false">system.fabric.CodePackage</xref>, <xref uid="system.fabric._configuration_package" data-throw-if-not-resolved="false">system.fabric.ConfigurationPackage</xref> and <xref uid="system.fabric._data_package" data-throw-if-not-resolved="false">system.fabric.DataPackage</xref>. Also see <xref uid="system.fabric._code_package_activation_context.getCodePackageAddedEvent()" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext#getCodePackageAddedEvent()</xref>, <xref uid="system.fabric._code_package_activation_context.getConfigurationPackageAddedEvent()" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext#getConfigurationPackageAddedEvent()</xref> and <xref uid="system.fabric._code_package_activation_context.getDataPackageAddedEvent()" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext#getDataPackageAddedEvent()</xref>. </p>
- uid: system.fabric._package_modified_event_args
  parent: system.fabric
  href: system.fabric._package_modified_event_args.yml
  name: PackageModifiedEventArgs<T>
  nameWithType: PackageModifiedEventArgs<T>
  fullName: system.fabric.PackageModifiedEventArgs<T>
  type: Class
  summary: <p>Describes a package modified event. </p>
  syntax:
    content: public class PackageModifiedEventArgs<T>
    typeParameters:
    - type: 8ce1ecb9
      description: <p>Type of the package being described. See <xref uid="system.fabric._code_package" data-throw-if-not-resolved="false">system.fabric.CodePackage</xref>, <xref uid="system.fabric._configuration_package" data-throw-if-not-resolved="false">system.fabric.ConfigurationPackage</xref> and <xref uid="system.fabric._data_package" data-throw-if-not-resolved="false">system.fabric.DataPackage</xref>. Also see <xref uid="system.fabric._code_package_activation_context.getCodePackageRemovedEvent()" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext#getCodePackageRemovedEvent()</xref>, <xref uid="system.fabric._code_package_activation_context.getConfigurationPackageRemovedEvent()" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext#getConfigurationPackageRemovedEvent()</xref> and <xref uid="system.fabric._code_package_activation_context.getDataPackageRemovedEvent()" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext#getDataPackageRemovedEvent()</xref>. </p>
- uid: system.fabric._package_removed_event_args
  parent: system.fabric
  href: system.fabric._package_removed_event_args.yml
  name: PackageRemovedEventArgs<T>
  nameWithType: PackageRemovedEventArgs<T>
  fullName: system.fabric.PackageRemovedEventArgs<T>
  type: Class
  summary: <p>Describes a package removed event. </p>
  syntax:
    content: public class PackageRemovedEventArgs<T>
    typeParameters:
    - type: 8ce1ecb9
      description: <p>Type of the package being described. See <xref uid="system.fabric._code_package" data-throw-if-not-resolved="false">system.fabric.CodePackage</xref>, <xref uid="system.fabric._configuration_package" data-throw-if-not-resolved="false">system.fabric.ConfigurationPackage</xref> and <xref uid="system.fabric._data_package" data-throw-if-not-resolved="false">system.fabric.DataPackage</xref>. Also see <xref uid="system.fabric._code_package_activation_context.getCodePackageRemovedEvent()" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext#getCodePackageRemovedEvent()</xref>, <xref uid="system.fabric._code_package_activation_context.getConfigurationPackageRemovedEvent()" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext#getConfigurationPackageRemovedEvent()</xref> and <xref uid="system.fabric._code_package_activation_context.getDataPackageRemovedEvent()" data-throw-if-not-resolved="false">system.fabric.CodePackageActivationContext#getDataPackageRemovedEvent()</xref>. </p>
- uid: system.fabric._package_sharing_policy
  parent: system.fabric
  href: system.fabric._package_sharing_policy.yml
  name: PackageSharingPolicy
  nameWithType: PackageSharingPolicy
  fullName: system.fabric.PackageSharingPolicy
  type: Class
  summary: <p>Represents a policy for the package sharing. </p>
  syntax:
    content: public class PackageSharingPolicy
- uid: system.fabric._package_sharing_policy_list
  parent: system.fabric
  href: system.fabric._package_sharing_policy_list.yml
  name: PackageSharingPolicyList
  nameWithType: PackageSharingPolicyList
  fullName: system.fabric.PackageSharingPolicyList
  type: Class
  summary: <p>Represents a list of <xref uid="system.fabric._package_sharing_policy" data-throw-if-not-resolved="false">PackageSharingPolicy</xref> objects. </p>
  syntax:
    content: public class PackageSharingPolicyList
- uid: system.fabric._package_sharing_policy_scope
  parent: system.fabric
  href: system.fabric._package_sharing_policy_scope.yml
  name: PackageSharingPolicyScope
  nameWithType: PackageSharingPolicyScope
  fullName: system.fabric.PackageSharingPolicyScope
  type: Enum
  summary: <p>Represents the scope for the <xref uid="system.fabric._package_sharing_policy" data-throw-if-not-resolved="false">system.fabric.PackageSharingPolicy</xref></p>
  syntax:
    content: public enum PackageSharingPolicyScope
- uid: system.fabric._partition_access_status
  parent: system.fabric
  href: system.fabric._partition_access_status.yml
  name: PartitionAccessStatus
  nameWithType: PartitionAccessStatus
  fullName: system.fabric.PartitionAccessStatus
  type: Enum
  summary: >-
    <p>Enumerates the access status of the partition. </p>

    <p>

      <b>Remarks:</b>

      <xref uid="" data-throw-if-not-resolved="false">system.fabric.PartitionAccessStatus</xref> is used to check that a read or write operation is allowed. When service replicas handle a client request, they should verify that the system is in a state that allows processing. By checking the <xref uid="system.fabric._stateful_service_partition.getReadStatus()" data-throw-if-not-resolved="false">system.fabric.StatefulServicePartition#getReadStatus()</xref> or <xref uid="system.fabric._stateful_service_partition.getwriteStatus()" data-throw-if-not-resolved="false">system.fabric.StatefulServicePartition#getwriteStatus()</xref> as appropriate, the replica can be notified of conditions that prevent correct operation. Note that write operations might still see an exception from the replicator for one of these conditions, because the condition might change between the <xref uid="system.fabric._stateful_service_partition.getwriteStatus()" data-throw-if-not-resolved="false">system.fabric.StatefulServicePartition#getwriteStatus()</xref> check and the call to <xref uid="system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false">system.fabric.StateReplicator#replicateAsync(system.fabric.OperationData,system.fabric.SequenceNumber, system.fabric.CancellationToken)</xref>. </p>
  syntax:
    content: public enum PartitionAccessStatus
- uid: system.fabric._primary_replicator
  parent: system.fabric
  href: system.fabric._primary_replicator.yml
  name: PrimaryReplicator
  nameWithType: PrimaryReplicator
  fullName: system.fabric.PrimaryReplicator
  type: Interface
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax:
    content: public interface PrimaryReplicator
- uid: system.fabric._protection_level
  parent: system.fabric
  href: system.fabric._protection_level.yml
  name: ProtectionLevel
  nameWithType: ProtectionLevel
  fullName: system.fabric.ProtectionLevel
  type: Enum
  summary: <p>Enumerates how communication is protected. </p>
  syntax:
    content: public enum ProtectionLevel
- uid: system.fabric._replica_information
  parent: system.fabric
  href: system.fabric._replica_information.yml
  name: ReplicaInformation
  nameWithType: ReplicaInformation
  fullName: system.fabric.ReplicaInformation
  type: Class
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax:
    content: public class ReplicaInformation
- uid: system.fabric._replica_open_mode
  parent: system.fabric
  href: system.fabric._replica_open_mode.yml
  name: ReplicaOpenMode
  nameWithType: ReplicaOpenMode
  fullName: system.fabric.ReplicaOpenMode
  type: Enum
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax:
    content: public enum ReplicaOpenMode
- uid: system.fabric._replica_role
  parent: system.fabric
  href: system.fabric._replica_role.yml
  name: ReplicaRole
  nameWithType: ReplicaRole
  fullName: system.fabric.ReplicaRole
  type: Enum
  summary: >-
    <p>Indicates the role of a stateful service replica. </p>

    <p>

      <b>Remarks:</b>Service Fabric requires different behaviors from a service replica depending on what role it currently performs. </p>
  syntax:
    content: public enum ReplicaRole
- uid: system.fabric._replica_set_configuration
  parent: system.fabric
  href: system.fabric._replica_set_configuration.yml
  name: ReplicaSetConfiguration
  nameWithType: ReplicaSetConfiguration
  fullName: system.fabric.ReplicaSetConfiguration
  type: Class
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax:
    content: public class ReplicaSetConfiguration
- uid: system.fabric._replica_set_quorum_mode
  parent: system.fabric
  href: system.fabric._replica_set_quorum_mode.yml
  name: ReplicaSetQuorumMode
  nameWithType: ReplicaSetQuorumMode
  fullName: system.fabric.ReplicaSetQuorumMode
  type: Enum
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax:
    content: public enum ReplicaSetQuorumMode
- uid: system.fabric._replica_status
  parent: system.fabric
  href: system.fabric._replica_status.yml
  name: ReplicaStatus
  nameWithType: ReplicaStatus
  fullName: system.fabric.ReplicaStatus
  type: Enum
  syntax:
    content: public enum ReplicaStatus
- uid: system.fabric._replicator
  parent: system.fabric
  href: system.fabric._replicator.yml
  name: Replicator
  nameWithType: Replicator
  fullName: system.fabric.Replicator
  type: Interface
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax:
    content: public interface Replicator extends PrimaryReplicator
- uid: system.fabric._replicator_settings
  parent: system.fabric
  href: system.fabric._replicator_settings.yml
  name: ReplicatorSettings
  nameWithType: ReplicatorSettings
  fullName: system.fabric.ReplicatorSettings
  type: Class
  summary: <p>Allows a stateful replica to configure the <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref> when creating it <xref uid="system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)" data-throw-if-not-resolved="false">system.fabric.StatefulServicePartition#createReplicator(system.fabric.StateProvider,system.fabric.ReplicatorSettings)</xref></p>
  syntax:
    content: public class ReplicatorSettings
- uid: system.fabric._resolved_service_endpoint
  parent: system.fabric
  href: system.fabric._resolved_service_endpoint.yml
  name: ResolvedServiceEndpoint
  nameWithType: ResolvedServiceEndpoint
  fullName: system.fabric.ResolvedServiceEndpoint
  type: Class
  summary: <p>Represents a resolved service endpoint, which contains information about service partition replica role and the address it listens to. </p>
  syntax:
    content: public class ResolvedServiceEndpoint
- uid: system.fabric._resolved_service_partition
  parent: system.fabric
  href: system.fabric._resolved_service_partition.yml
  name: ResolvedServicePartition
  nameWithType: ResolvedServicePartition
  fullName: system.fabric.ResolvedServicePartition
  type: Class
  summary: >-
    <p>Represents a data structure that contains information on the partitioning and set of endpoints to which the specified Service partition listens.</p>

    <p></p>
  syntax:
    content: public class ResolvedServicePartition
- uid: system.fabric._security_credentials
  parent: system.fabric
  href: system.fabric._security_credentials.yml
  name: SecurityCredentials
  nameWithType: SecurityCredentials
  fullName: system.fabric.SecurityCredentials
  type: Class
  summary: <p>An abstract base class for types that represent security credentials. </p>
  syntax:
    content: public class SecurityCredentials
- uid: system.fabric._sequence_number
  parent: system.fabric
  href: system.fabric._sequence_number.yml
  name: SequenceNumber
  nameWithType: SequenceNumber
  fullName: system.fabric.SequenceNumber
  type: Class
  summary: <p>Long, represents the last sequence number (LSN) of the operation. </p>
  syntax:
    content: public class SequenceNumber
- uid: system.fabric._service_context
  parent: system.fabric
  href: system.fabric._service_context.yml
  name: ServiceContext
  nameWithType: ServiceContext
  fullName: system.fabric.ServiceContext
  type: Class
  summary: <p>Represents the service context that the service is operating under. </p>
  syntax:
    content: public class ServiceContext
- uid: system.fabric._service_endpoint_role
  parent: system.fabric
  href: system.fabric._service_endpoint_role.yml
  name: ServiceEndpointRole
  nameWithType: ServiceEndpointRole
  fullName: system.fabric.ServiceEndpointRole
  type: Enum
  summary: >-
    <p>Enumerates the kinds of possible roles of a service endpoint.</p>

    <p></p>
  syntax:
    content: public enum ServiceEndpointRole
- uid: system.fabric._service_initialization_parameters
  parent: system.fabric
  href: system.fabric._service_initialization_parameters.yml
  name: ServiceInitializationParameters
  nameWithType: ServiceInitializationParameters
  fullName: system.fabric.ServiceInitializationParameters
  type: Class
  summary: >-
    <p>

      <b>Remarks:</b>Derived types define initialization data that are specific to stateless and stateful services. </p>
  syntax:
    content: public class ServiceInitializationParameters
- uid: system.fabric._service_partition
  parent: system.fabric
  href: system.fabric._service_partition.yml
  name: ServicePartition
  nameWithType: ServicePartition
  fullName: system.fabric.ServicePartition
  type: Interface
  summary: <p>Provides information to the service about the partition to which it belongs and provides methods for the service to interact with the system during runtime. </p>
  syntax:
    content: public interface ServicePartition
- uid: system.fabric._service_partition_information
  parent: system.fabric
  href: system.fabric._service_partition_information.yml
  name: ServicePartitionInformation
  nameWithType: ServicePartitionInformation
  fullName: system.fabric.ServicePartitionInformation
  type: Class
  summary: >-
    <p>Represents the base class for describing partitions. </p>

    <p>

      <b>Remarks:</b>

      <xref uid="system.fabric._int64_range_partition_information" data-throw-if-not-resolved="false">system.fabric.Int64RangePartitionInformation</xref>, <xref uid="system.fabric._named_partition_information" data-throw-if-not-resolved="false">system.fabric.NamedPartitionInformation</xref>, and <xref uid="system.fabric._singleton_partition_information" data-throw-if-not-resolved="false">system.fabric.SingletonPartitionInformation</xref> all derive from this type. </p>
  syntax:
    content: public class ServicePartitionInformation
- uid: system.fabric._service_partition_kind
  parent: system.fabric
  href: system.fabric._service_partition_kind.yml
  name: ServicePartitionKind
  nameWithType: ServicePartitionKind
  fullName: system.fabric.ServicePartitionKind
  type: Enum
  summary: >-
    <p>Indicates the type of partitioning scheme that is used. </p>

    <p>

      <b>Remarks:</b>

      <xref uid="" data-throw-if-not-resolved="false">system.fabric.ServicePartitionKind</xref> defines the value of the kind property of the <xref uid="system.fabric._service_partition_information" data-throw-if-not-resolved="false">system.fabric.ServicePartitionInformation</xref> class. </p>
  syntax:
    content: public enum ServicePartitionKind
- uid: system.fabric._singleton_partition_information
  parent: system.fabric
  href: system.fabric._singleton_partition_information.yml
  name: SingletonPartitionInformation
  nameWithType: SingletonPartitionInformation
  fullName: system.fabric.SingletonPartitionInformation
  type: Class
  summary: <p>Indicates that the service is Singleton-partitioned, effectively non-partitioned or with one partition only, and uses the partition scheme of a Singleton service. </p>
  syntax:
    content: public class SingletonPartitionInformation extends ServicePartitionInformation
- uid: system.fabric._stateful_service_context
  parent: system.fabric
  href: system.fabric._stateful_service_context.yml
  name: StatefulServiceContext
  nameWithType: StatefulServiceContext
  fullName: system.fabric.StatefulServiceContext
  type: Class
  summary: <p>Represents the service context that the stateful service is operating under. </p>
  syntax:
    content: public class StatefulServiceContext extends ServiceContext
- uid: system.fabric._stateful_service_factory
  parent: system.fabric
  href: system.fabric._stateful_service_factory.yml
  name: StatefulServiceFactory
  nameWithType: StatefulServiceFactory
  fullName: system.fabric.StatefulServiceFactory
  type: Interface
  summary: <p>Represents a stateful service factory that is responsible for creating replicas of a specific type of stateful service. Stateful service factories are registered with the <xref uid="system.fabric._fabric_runtime" data-throw-if-not-resolved="false">system.fabric.FabricRuntime</xref> by service hosts via <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricRuntime#registerStatefulServiceFactory(java.lang.String,system.fabric.StatefulServiceFactory)</xref> or <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricRuntime#registerStatefulServiceFactoryAsync(java.lang.String,system.fabric.StatefulServiceFactory,java.time.Duration)</xref></p>
  syntax:
    content: public interface StatefulServiceFactory
- uid: system.fabric._stateful_service_failover_settings
  parent: system.fabric
  href: system.fabric._stateful_service_failover_settings.yml
  name: StatefulServiceFailoverSettings
  nameWithType: StatefulServiceFailoverSettings
  fullName: system.fabric.StatefulServiceFailoverSettings
  type: Class
  syntax:
    content: public class StatefulServiceFailoverSettings
- uid: system.fabric._stateful_service_initialization_parameters
  parent: system.fabric
  href: system.fabric._stateful_service_initialization_parameters.yml
  name: StatefulServiceInitializationParameters
  nameWithType: StatefulServiceInitializationParameters
  fullName: system.fabric.StatefulServiceInitializationParameters
  type: Class
  summary: <p>Defines service initialization parameters for a stateful service. </p>
  syntax:
    content: public class StatefulServiceInitializationParameters extends ServiceInitializationParameters
- uid: system.fabric._stateful_service_partition
  parent: system.fabric
  href: system.fabric._stateful_service_partition.yml
  name: StatefulServicePartition
  nameWithType: StatefulServicePartition
  fullName: system.fabric.StatefulServicePartition
  type: Interface
  syntax:
    content: public interface StatefulServicePartition extends ServicePartition
- uid: system.fabric._stateful_service_replica
  parent: system.fabric
  href: system.fabric._stateful_service_replica.yml
  name: StatefulServiceReplica
  nameWithType: StatefulServiceReplica
  fullName: system.fabric.StatefulServiceReplica
  type: Interface
  summary: >-
    <p>Defines behavior that governs the lifecycle of a replica, such as startup, initialization, role changes, and shutdown. </p>

    <p>

      <b>Remarks:</b>Stateful service types must implement this interface. The logic of a stateful service type includes behavior that is invoked on Primary replicas and behavior that is invoked on Secondary replicas. If the service author wants to make use of the provided <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref>, then the service must also implement <xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">system.fabric.StateProvider</xref> to use the implementation of <xref uid="system.fabric._state_replicator" data-throw-if-not-resolved="false">system.fabric.StateReplicator</xref> that is provided by <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref></p>
  syntax:
    content: public interface StatefulServiceReplica
- uid: system.fabric._stateless_service_factory
  parent: system.fabric
  href: system.fabric._stateless_service_factory.yml
  name: StatelessServiceFactory
  nameWithType: StatelessServiceFactory
  fullName: system.fabric.StatelessServiceFactory
  type: Interface
  summary: >-
    <p>Represents a stateless service factory that is responsible for creating instances of a specific type of stateless service. </p>

    <p>

      <b>Remarks:</b>Stateless service factories are registered with the <xref uid="system.fabric._fabric_runtime" data-throw-if-not-resolved="false">system.fabric.FabricRuntime</xref> by service hosts via <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricRuntime#registerStatelessServiceFactory(java.lang.String,system.fabric.StatelessServiceFactory)</xref> or <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricRuntime#registerStatelessServiceFactoryAsync(java.lang.String,system.fabric.StatelessServiceFactory,java.time.Duration)</xref></p>
  syntax:
    content: public interface StatelessServiceFactory
- uid: system.fabric._stateless_service_initialization_parameters
  parent: system.fabric
  href: system.fabric._stateless_service_initialization_parameters.yml
  name: StatelessServiceInitializationParameters
  nameWithType: StatelessServiceInitializationParameters
  fullName: system.fabric.StatelessServiceInitializationParameters
  type: Class
  summary: <p>Defines service initialization parameters for a stateless service. </p>
  syntax:
    content: public class StatelessServiceInitializationParameters extends ServiceInitializationParameters
- uid: system.fabric._stateless_service_instance
  parent: system.fabric
  href: system.fabric._stateless_service_instance.yml
  name: StatelessServiceInstance
  nameWithType: StatelessServiceInstance
  fullName: system.fabric.StatelessServiceInstance
  type: Interface
  summary: <p>Stateless services are those which have no state that requires management by Service Fabric. Stateless service types must implement this interface. </p>
  syntax:
    content: public interface StatelessServiceInstance
- uid: system.fabric._stateless_service_partition
  parent: system.fabric
  href: system.fabric._stateless_service_partition.yml
  name: StatelessServicePartition
  nameWithType: StatelessServicePartition
  fullName: system.fabric.StatelessServicePartition
  type: Interface
  summary: >-
    <p>Represents a partition that is associated with a stateless service instance. </p>

    <p>

      <b>Remarks:</b>Provided to a stateless service as a parameter to the <xref uid="system.fabric._service_partition" data-throw-if-not-resolved="false">system.fabric.ServicePartition</xref>. </p>
  syntax:
    content: public interface StatelessServicePartition extends ServicePartition
- uid: system.fabric._state_provider
  parent: system.fabric
  href: system.fabric._state_provider.yml
  name: StateProvider
  nameWithType: StateProvider
  fullName: system.fabric.StateProvider
  type: Interface
  summary: <p>Defines the behavior that a service must implement to interact with the <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">FabricReplicator</xref>. </p>
  syntax:
    content: public interface StateProvider
- uid: system.fabric._state_replicator
  parent: system.fabric
  href: system.fabric._state_replicator.yml
  name: StateReplicator
  nameWithType: StateReplicator
  fullName: system.fabric.StateReplicator
  type: Interface
  summary: <p>Exposes replication related functions of the <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">FabricReplicator</xref> class that are used by <xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">StateProvider</xref> to replicate state to ensure high availability. </p>
  syntax:
    content: public interface StateReplicator
- uid: system.fabric._state_replicator2
  parent: system.fabric
  href: system.fabric._state_replicator2.yml
  name: StateReplicator2
  nameWithType: StateReplicator2
  fullName: system.fabric.StateReplicator2
  type: Interface
  summary: <p>Exposes replication-related functions of the <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref> class that are used by <xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">system.fabric.StateProvider</xref> to replicate state to ensure high availability. </p>
  syntax:
    content: public interface StateReplicator2 extends StateReplicator
- uid: system.fabric._windows_credentials
  parent: system.fabric
  href: system.fabric._windows_credentials.yml
  name: WindowsCredentials
  nameWithType: WindowsCredentials
  fullName: system.fabric.WindowsCredentials
  type: Class
  summary: <p>Represents the active directory domain credential. </p>
  syntax:
    content: public class WindowsCredentials extends SecurityCredentials
- uid: system.fabric._x509_credentials
  parent: system.fabric
  href: system.fabric._x509_credentials.yml
  name: X509Credentials
  nameWithType: X509Credentials
  fullName: system.fabric.X509Credentials
  type: Class
  summary: <p>Specifies the security credentials that are based upon X.509 certificates which are located in Windows certificate store. </p>
  syntax:
    content: public class X509Credentials extends SecurityCredentials
- uid: system.fabric._x509_credentials2
  parent: system.fabric
  href: system.fabric._x509_credentials2.yml
  name: X509Credentials2
  nameWithType: X509Credentials2
  fullName: system.fabric.X509Credentials2
  type: Class
  summary: <p>Specifies the security credentials that are based upon X.509 certificates which are specified using the certificate path. </p>
  syntax:
    content: public class X509Credentials2 extends SecurityCredentials
- uid: system.fabric._x509_find_type
  parent: system.fabric
  href: system.fabric._x509_find_type.yml
  name: X509FindType
  nameWithType: X509FindType
  fullName: system.fabric.X509FindType
  type: Enum
  summary: <p>Specifies the type of value the <xref uid="system.fabric._x509_credentials.getFindType()" data-throw-if-not-resolved="false">system.fabric.X509Credentials#getFindType()</xref> method searches for. </p>
  syntax:
    content: public enum X509FindType
- uid: system.fabric._x509_name
  parent: system.fabric
  href: system.fabric._x509_name.yml
  name: X509Name
  nameWithType: X509Name
  fullName: system.fabric.X509Name
  type: Class
  summary: <p>A type to identify X509 certificate with subject common name or DNS name. </p>
  syntax:
    content: public class X509Name
- uid: system.fabric._x509_store_location
  parent: system.fabric
  href: system.fabric._x509_store_location.yml
  name: X509StoreLocation
  nameWithType: X509StoreLocation
  fullName: system.fabric.X509StoreLocation
  type: Enum
  summary: <p>Defines a class to represent a store location in the certificate provider. </p>
  syntax:
    content: public enum X509StoreLocation
