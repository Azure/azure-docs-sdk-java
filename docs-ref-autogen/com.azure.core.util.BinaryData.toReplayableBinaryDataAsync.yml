### YamlMime:JavaMember
uid: "com.azure.core.util.BinaryData.toReplayableBinaryDataAsync*"
fullName: "com.azure.core.util.BinaryData.toReplayableBinaryDataAsync"
name: "toReplayableBinaryDataAsync"
nameWithType: "BinaryData.toReplayableBinaryDataAsync"
members:
- uid: "com.azure.core.util.BinaryData.toReplayableBinaryDataAsync()"
  fullName: "com.azure.core.util.BinaryData.toReplayableBinaryDataAsync()"
  name: "toReplayableBinaryDataAsync()"
  nameWithType: "BinaryData.toReplayableBinaryDataAsync()"
  summary: "Converts the <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> into a <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> that is replayable, i.e. content can be consumed repeatedly using all accessors including <xref uid=\"com.azure.core.util.BinaryData.toStream()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#toStream()\"></xref> and <xref uid=\"com.azure.core.util.BinaryData.toFluxByteBuffer()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#toFluxByteBuffer()\"></xref>\n\nA <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> that is already replayable is returned as is. Otherwise techniques like marking and resetting a stream or buffering in memory are employed to assure replayability.\n\nReplayability does not imply thread-safety. The caller must not use data accessors of returned <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> simultaneously.\n\n```java\nMono.fromCallable(() -> binaryDataProducer())\n     .flatMap(binaryData -> {\n         if (binaryData.isReplayable()) {\n             return Mono.just(binaryData);\n         } else  {\n             return binaryData.toReplayableBinaryDataAsync();\n         }\n     })\n     .flatMap(replayableBinaryData ->\n         fluxConsumer(replayableBinaryData.toFluxByteBuffer())\n             .then(fluxConsumer(replayableBinaryData.toFluxByteBuffer())))\n     .subscribe();\n```"
  syntax: "public Mono<BinaryData> toReplayableBinaryDataAsync()"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> representing the replayable <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.core.util"
artifact: com.azure:azure-core:1.30.0
