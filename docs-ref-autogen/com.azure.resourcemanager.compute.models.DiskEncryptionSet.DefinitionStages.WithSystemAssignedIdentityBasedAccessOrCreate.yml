### YamlMime:JavaType
uid: "com.azure.resourcemanager.compute.models.DiskEncryptionSet.DefinitionStages.WithSystemAssignedIdentityBasedAccessOrCreate"
fullName: "com.azure.resourcemanager.compute.models.DiskEncryptionSet.DefinitionStages.WithSystemAssignedIdentityBasedAccessOrCreate"
name: "DiskEncryptionSet.DefinitionStages.WithSystemAssignedIdentityBasedAccessOrCreate"
nameWithType: "DiskEncryptionSet.DefinitionStages.WithSystemAssignedIdentityBasedAccessOrCreate"
summary: "The stage of the System Assigned Managed Service Identity enabled disk encryption set allowing to set access methods for the key vault."
syntax: "public static interface DiskEncryptionSet.DefinitionStages.WithSystemAssignedIdentityBasedAccessOrCreate extends DiskEncryptionSet.DefinitionStages.WithCreate"
methods:
- uid: "com.azure.resourcemanager.compute.models.DiskEncryptionSet.DefinitionStages.WithSystemAssignedIdentityBasedAccessOrCreate.withRoleBasedAccessToCurrentKeyVault()"
  fullName: "com.azure.resourcemanager.compute.models.DiskEncryptionSet.DefinitionStages.WithSystemAssignedIdentityBasedAccessOrCreate.withRoleBasedAccessToCurrentKeyVault()"
  name: "withRoleBasedAccessToCurrentKeyVault()"
  nameWithType: "DiskEncryptionSet.DefinitionStages.WithSystemAssignedIdentityBasedAccessOrCreate.withRoleBasedAccessToCurrentKeyVault()"
  summary: "Specifies that disk encryption set's system assigned identity should have the RBAC based access with default <xref uid=\"com.azure.resourcemanager.authorization.models.BuiltInRole.KEY_VAULT_CRYPTO_SERVICE_ENCRYPTION_USER\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BuiltInRole#KEY_VAULT_CRYPTO_SERVICE_ENCRYPTION_USER\"></xref> on the current Azure key vault that's associated with it."
  modifiers:
  - "abstract"
  syntax: "public abstract DiskEncryptionSet.DefinitionStages.WithCreate withRoleBasedAccessToCurrentKeyVault()"
  desc: "Specifies that disk encryption set's system assigned identity should have the RBAC based access with default <xref uid=\"com.azure.resourcemanager.authorization.models.BuiltInRole.KEY_VAULT_CRYPTO_SERVICE_ENCRYPTION_USER\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BuiltInRole#KEY_VAULT_CRYPTO_SERVICE_ENCRYPTION_USER\"></xref> on the current Azure key vault that's associated with it.\n\nOnly works for key vaults that use the 'Azure role-based access control' permission model.\n\nIf you prefer Access Policy based access for Azure Key Vault (like the examples from Portal or CLI), instead of calling this method, you may want to call Vault-related methods after creating the <xref uid=\"com.azure.resourcemanager.compute.models.DiskEncryptionSet\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DiskEncryptionSet\"></xref> instance."
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"com.azure.resourcemanager.compute.models.DiskEncryptionSet.DefinitionStages.WithCreate?alt=com.azure.resourcemanager.compute.models.DiskEncryptionSet.DefinitionStages.WithCreate&text=WithCreate\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.compute.models.DiskEncryptionSet.DefinitionStages.WithSystemAssignedIdentityBasedAccessOrCreate.withRoleBasedAccessToCurrentKeyVault(com.azure.resourcemanager.authorization.models.BuiltInRole)"
  fullName: "com.azure.resourcemanager.compute.models.DiskEncryptionSet.DefinitionStages.WithSystemAssignedIdentityBasedAccessOrCreate.withRoleBasedAccessToCurrentKeyVault(BuiltInRole builtInRole)"
  name: "withRoleBasedAccessToCurrentKeyVault(BuiltInRole builtInRole)"
  nameWithType: "DiskEncryptionSet.DefinitionStages.WithSystemAssignedIdentityBasedAccessOrCreate.withRoleBasedAccessToCurrentKeyVault(BuiltInRole builtInRole)"
  summary: "Specifies that disk encryption set's system assigned identity should have the given RBAC based access (described by the role) on the current Azure key vault that's associated with it."
  modifiers:
  - "abstract"
  parameters:
  - description: "access role to assigned to the disk encryption set's local identity"
    name: "builtInRole"
    type: "<xref href=\"com.azure.resourcemanager.authorization.models.BuiltInRole?alt=com.azure.resourcemanager.authorization.models.BuiltInRole&text=BuiltInRole\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract DiskEncryptionSet.DefinitionStages.WithCreate withRoleBasedAccessToCurrentKeyVault(BuiltInRole builtInRole)"
  desc: "Specifies that disk encryption set's system assigned identity should have the given RBAC based access (described by the role) on the current Azure key vault that's associated with it.\n\nOnly works for key vaults that use the 'Azure role-based access control' permission model.\n\nIf you prefer Access Policy based access for Azure Key Vault (like the examples from Portal or CLI), instead of calling this method, you may want to call Vault-related methods after creating the <xref uid=\"com.azure.resourcemanager.compute.models.DiskEncryptionSet\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DiskEncryptionSet\"></xref> instance."
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"com.azure.resourcemanager.compute.models.DiskEncryptionSet.DefinitionStages.WithCreate?alt=com.azure.resourcemanager.compute.models.DiskEncryptionSet.DefinitionStages.WithCreate&text=WithCreate\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
desc: "The stage of the System Assigned Managed Service Identity enabled disk encryption set allowing to set access methods for the key vault."
implements:
- "<xref href=\"com.azure.resourcemanager.compute.models.DiskEncryptionSet.DefinitionStages.WithCreate?alt=com.azure.resourcemanager.compute.models.DiskEncryptionSet.DefinitionStages.WithCreate&text=WithCreate\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.resourcemanager.compute.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-compute:2.19.0
