### YamlMime:JavaType
uid: "com.azure.containers.containerregistry.ContainerRepositoryAsync"
fullName: "com.azure.containers.containerregistry.ContainerRepositoryAsync"
name: "ContainerRepositoryAsync"
nameWithType: "ContainerRepositoryAsync"
summary: "This class provides helper methods for operations on a given repository in Azure Container Registry."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ContainerRepositoryAsync"
methods:
- uid: "com.azure.containers.containerregistry.ContainerRepositoryAsync.delete()"
  fullName: "com.azure.containers.containerregistry.ContainerRepositoryAsync.delete()"
  name: "delete()"
  nameWithType: "ContainerRepositoryAsync.delete()"
  summary: "Delete the repository in the Azure Container Registry for the given <xref uid=\"com.azure.containers.containerregistry.ContainerRepositoryAsync.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  syntax: "public Mono<Void> delete()"
  desc: "Delete the repository in the Azure Container Registry for the given <xref uid=\"com.azure.containers.containerregistry.ContainerRepositoryAsync.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\n**Code Samples**\n\nDelete the repository.\n\n```java\nclient.delete().subscribe(response -> {\n     System.out.printf(\"Successfully initiated delete of the repository.\");\n }, error -> {\n     System.out.println(\"Failed to initiate a delete of the repository.\");\n });\n```"
  returns:
    description: "It returns the count of the tags and artifacts that are deleted as part of the repository delete."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.ContainerRepositoryAsync.deleteWithResponse()"
  fullName: "com.azure.containers.containerregistry.ContainerRepositoryAsync.deleteWithResponse()"
  name: "deleteWithResponse()"
  nameWithType: "ContainerRepositoryAsync.deleteWithResponse()"
  summary: "Delete the repository in the Azure Container Registry for the given <xref uid=\"com.azure.containers.containerregistry.ContainerRepositoryAsync.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  syntax: "public Mono<Response<Void>> deleteWithResponse()"
  desc: "Delete the repository in the Azure Container Registry for the given <xref uid=\"com.azure.containers.containerregistry.ContainerRepositoryAsync.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\n**Code Samples**\n\nDelete the repository.\n\n```java\nclient.deleteWithResponse().subscribe(response -> {\n     System.out.printf(\"Successfully initiated delete of the repository.\");\n }, error -> {\n     System.out.println(\"Failed to initiate a delete of the repository.\");\n });\n```"
  returns:
    description: "A REST response containing the result of the repository delete operation. It returns the count of the tags and\n artifacts that are deleted as part of the repository delete."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.containers.containerregistry.ContainerRepositoryAsync.getArtifact(java.lang.String)"
  fullName: "com.azure.containers.containerregistry.ContainerRepositoryAsync.getArtifact(String tagOrDigest)"
  name: "getArtifact(String tagOrDigest)"
  nameWithType: "ContainerRepositoryAsync.getArtifact(String tagOrDigest)"
  summary: "Creates a new instance of <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RegistryArtifactAsync\"></xref> object for the specified artifact."
  parameters:
  - description: "Either a tag or digest that uniquely identifies the artifact."
    name: "tagOrDigest"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RegistryArtifactAsync getArtifact(String tagOrDigest)"
  desc: "Creates a new instance of <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RegistryArtifactAsync\"></xref> object for the specified artifact."
  returns:
    description: "A new <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RegistryArtifactAsync\"></xref> object for the desired repository."
    type: "<xref href=\"com.azure.containers.containerregistry.RegistryArtifactAsync?alt=com.azure.containers.containerregistry.RegistryArtifactAsync&text=RegistryArtifactAsync\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.containers.containerregistry.ContainerRepositoryAsync.getName()"
  fullName: "com.azure.containers.containerregistry.ContainerRepositoryAsync.getName()"
  name: "getName()"
  nameWithType: "ContainerRepositoryAsync.getName()"
  summary: "Gets the Azure Container Registry service endpoint for the current instance."
  syntax: "public String getName()"
  desc: "Gets the Azure Container Registry service endpoint for the current instance."
  returns:
    description: "The service endpoint for the current instance."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.containers.containerregistry.ContainerRepositoryAsync.getProperties()"
  fullName: "com.azure.containers.containerregistry.ContainerRepositoryAsync.getProperties()"
  name: "getProperties()"
  nameWithType: "ContainerRepositoryAsync.getProperties()"
  summary: "Gets the <xref uid=\"com.azure.containers.containerregistry.models.ContainerRepositoryProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with the given <xref uid=\"com.azure.containers.containerregistry.ContainerRepositoryAsync.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  syntax: "public Mono<ContainerRepositoryProperties> getProperties()"
  desc: "Gets the <xref uid=\"com.azure.containers.containerregistry.models.ContainerRepositoryProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with the given <xref uid=\"com.azure.containers.containerregistry.ContainerRepositoryAsync.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\n**Code Samples**\n\nGet the properties for the given repository.\n\n```java\nclient.getProperties().subscribe(response -> {\n     System.out.printf(\"Name:%s,\", response.getName());\n });\n```"
  returns:
    description: "The <xref uid=\"com.azure.containers.containerregistry.models.ContainerRepositoryProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with the given <xref uid=\"com.azure.containers.containerregistry.ContainerRepositoryAsync.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ContainerRepositoryProperties?alt=com.azure.containers.containerregistry.models.ContainerRepositoryProperties&text=ContainerRepositoryProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.ContainerRepositoryAsync.getPropertiesWithResponse()"
  fullName: "com.azure.containers.containerregistry.ContainerRepositoryAsync.getPropertiesWithResponse()"
  name: "getPropertiesWithResponse()"
  nameWithType: "ContainerRepositoryAsync.getPropertiesWithResponse()"
  summary: "Gets the <xref uid=\"com.azure.containers.containerregistry.models.ContainerRepositoryProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with the given <xref uid=\"com.azure.containers.containerregistry.ContainerRepositoryAsync.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  syntax: "public Mono<Response<ContainerRepositoryProperties>> getPropertiesWithResponse()"
  desc: "Gets the <xref uid=\"com.azure.containers.containerregistry.models.ContainerRepositoryProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with the given <xref uid=\"com.azure.containers.containerregistry.ContainerRepositoryAsync.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\n**Code Samples**\n\nGet the properties for the given repository.\n\n```java\nclient.getPropertiesWithResponse().subscribe(response -> {\n     final ContainerRepositoryProperties properties = response.getValue();\n     System.out.printf(\"Name:%s,\", properties.getName());\n });\n```"
  returns:
    description: "A REST response with the <xref uid=\"com.azure.containers.containerregistry.models.ContainerRepositoryProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with the given <xref uid=\"com.azure.containers.containerregistry.ContainerRepositoryAsync.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ContainerRepositoryProperties?alt=com.azure.containers.containerregistry.models.ContainerRepositoryProperties&text=ContainerRepositoryProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.containers.containerregistry.ContainerRepositoryAsync.getRegistryEndpoint()"
  fullName: "com.azure.containers.containerregistry.ContainerRepositoryAsync.getRegistryEndpoint()"
  name: "getRegistryEndpoint()"
  nameWithType: "ContainerRepositoryAsync.getRegistryEndpoint()"
  summary: "Gets the Azure Container Registry name for the current instance."
  syntax: "public String getRegistryEndpoint()"
  desc: "Gets the Azure Container Registry name for the current instance."
  returns:
    description: "Return the registry name."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.containers.containerregistry.ContainerRepositoryAsync.listManifestProperties()"
  fullName: "com.azure.containers.containerregistry.ContainerRepositoryAsync.listManifestProperties()"
  name: "listManifestProperties()"
  nameWithType: "ContainerRepositoryAsync.listManifestProperties()"
  summary: "Fetches all the artifacts associated with the given <xref uid=\"com.azure.containers.containerregistry.ContainerRepositoryAsync.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  syntax: "public PagedFlux<ArtifactManifestProperties> listManifestProperties()"
  desc: "Fetches all the artifacts associated with the given <xref uid=\"com.azure.containers.containerregistry.ContainerRepositoryAsync.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\nIf you would like to specify the order in which the tags are returned please use the overload that takes in the options parameter <xref uid=\"com.azure.containers.containerregistry.ContainerRepositoryAsync.listManifestProperties(com.azure.containers.containerregistry.models.ArtifactManifestOrder)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#listManifestProperties(ArtifactManifestOrder)\"></xref> listManifestProperties\\} No assumptions on the order can be made if no options are provided to the service.\n\n**Code Samples**\n\nRetrieve all artifacts associated with the given repository.\n\n```java\nclient.listManifestProperties().byPage(10)\n     .subscribe(ManifestPropertiesPagedResponse -> {\n         ManifestPropertiesPagedResponse.getValue().stream().forEach(\n             ManifestProperties -> System.out.println(ManifestProperties.getDigest()));\n     });\n```"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of ManifestProperties for all the artifacts in the given repository."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties?alt=com.azure.containers.containerregistry.models.ArtifactManifestProperties&text=ArtifactManifestProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.ContainerRepositoryAsync.listManifestProperties(com.azure.containers.containerregistry.models.ArtifactManifestOrder)"
  fullName: "com.azure.containers.containerregistry.ContainerRepositoryAsync.listManifestProperties(ArtifactManifestOrder order)"
  name: "listManifestProperties(ArtifactManifestOrder order)"
  nameWithType: "ContainerRepositoryAsync.listManifestProperties(ArtifactManifestOrder order)"
  summary: "Fetches all the artifacts associated with the given <xref uid=\"com.azure.containers.containerregistry.ContainerRepositoryAsync.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  parameters:
  - description: "The order in which the artifacts are returned by the service."
    name: "order"
    type: "<xref href=\"com.azure.containers.containerregistry.models.ArtifactManifestOrder?alt=com.azure.containers.containerregistry.models.ArtifactManifestOrder&text=ArtifactManifestOrder\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<ArtifactManifestProperties> listManifestProperties(ArtifactManifestOrder order)"
  desc: "Fetches all the artifacts associated with the given <xref uid=\"com.azure.containers.containerregistry.ContainerRepositoryAsync.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\nThe method supports options to select the order in which the artifacts are returned by the service. Currently the service supports an ascending or descending order based on the last updated time for the artifacts. No assumptions on the order can be made if no options are provided to the service.\n\n**Code Samples**\n\nRetrieve all artifacts associated with the given repository from the most recently updated to the last.\n\n```java\nclient.listManifestProperties(ArtifactManifestOrder.LAST_UPDATED_ON_DESCENDING).byPage(10)\n     .subscribe(ManifestPropertiesPagedResponse -> {\n         ManifestPropertiesPagedResponse.getValue().stream().forEach(\n             ManifestProperties -> System.out.println(ManifestProperties.getDigest()));\n     });\n```"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of the artifacts for the given repository in the order specified by the options."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties?alt=com.azure.containers.containerregistry.models.ArtifactManifestProperties&text=ArtifactManifestProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.ContainerRepositoryAsync.updateProperties(com.azure.containers.containerregistry.models.ContainerRepositoryProperties)"
  fullName: "com.azure.containers.containerregistry.ContainerRepositoryAsync.updateProperties(ContainerRepositoryProperties repositoryProperties)"
  name: "updateProperties(ContainerRepositoryProperties repositoryProperties)"
  nameWithType: "ContainerRepositoryAsync.updateProperties(ContainerRepositoryProperties repositoryProperties)"
  summary: "Update the repository properties <xref uid=\"com.azure.containers.containerregistry.models.ContainerRepositoryProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContainerRepositoryProperties\"></xref> of the given <xref uid=\"com.azure.containers.containerregistry.ContainerRepositoryAsync.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.containers.containerregistry.models.ContainerRepositoryProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"writeable properties\"></xref> that need to be updated for the repository."
    name: "repositoryProperties"
    type: "<xref href=\"com.azure.containers.containerregistry.models.ContainerRepositoryProperties?alt=com.azure.containers.containerregistry.models.ContainerRepositoryProperties&text=ContainerRepositoryProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ContainerRepositoryProperties> updateProperties(ContainerRepositoryProperties repositoryProperties)"
  desc: "Update the repository properties <xref uid=\"com.azure.containers.containerregistry.models.ContainerRepositoryProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContainerRepositoryProperties\"></xref> of the given <xref uid=\"com.azure.containers.containerregistry.ContainerRepositoryAsync.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>. These properties set the update, delete and retrieve options of the repository.\n\n**Code Samples**\n\nUpdate the writeable properties for the given repository.\n\n```java\nContainerRepositoryProperties properties = getRepositoryProperties();\n client.updateProperties(properties).subscribe();\n```"
  returns:
    description: "The completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ContainerRepositoryProperties?alt=com.azure.containers.containerregistry.models.ContainerRepositoryProperties&text=ContainerRepositoryProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.ContainerRepositoryAsync.updatePropertiesWithResponse(com.azure.containers.containerregistry.models.ContainerRepositoryProperties)"
  fullName: "com.azure.containers.containerregistry.ContainerRepositoryAsync.updatePropertiesWithResponse(ContainerRepositoryProperties repositoryProperties)"
  name: "updatePropertiesWithResponse(ContainerRepositoryProperties repositoryProperties)"
  nameWithType: "ContainerRepositoryAsync.updatePropertiesWithResponse(ContainerRepositoryProperties repositoryProperties)"
  summary: "Update the repository properties <xref uid=\"com.azure.containers.containerregistry.models.ContainerRepositoryProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContainerRepositoryProperties\"></xref> of the given <xref uid=\"com.azure.containers.containerregistry.ContainerRepositoryAsync.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.containers.containerregistry.models.ContainerRepositoryProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository properties\"></xref> that need to be updated for the repository."
    name: "repositoryProperties"
    type: "<xref href=\"com.azure.containers.containerregistry.models.ContainerRepositoryProperties?alt=com.azure.containers.containerregistry.models.ContainerRepositoryProperties&text=ContainerRepositoryProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ContainerRepositoryProperties>> updatePropertiesWithResponse(ContainerRepositoryProperties repositoryProperties)"
  desc: "Update the repository properties <xref uid=\"com.azure.containers.containerregistry.models.ContainerRepositoryProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContainerRepositoryProperties\"></xref> of the given <xref uid=\"com.azure.containers.containerregistry.ContainerRepositoryAsync.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>. These properties set the update, delete and retrieve options of the repository.\n\n**Code Samples**\n\nUpdate the writeable properties for the given repository.\n\n```java\nContainerRepositoryProperties properties = getRepositoryProperties();\n client.updatePropertiesWithResponse(properties).subscribe();\n```"
  returns:
    description: "The updated <xref uid=\"com.azure.containers.containerregistry.models.ContainerRepositoryProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository properties \"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ContainerRepositoryProperties?alt=com.azure.containers.containerregistry.models.ContainerRepositoryProperties&text=ContainerRepositoryProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "This class provides helper methods for operations on a given repository in Azure Container Registry. Operations included are listing, retrieving, deleting, setting writeable properties.\n\n**Instantiating an asynchronous Container Repository Helper class**\n\n```java\nContainerRepositoryAsync repositoryAsyncClient = new ContainerRegistryClientBuilder()\n     .endpoint(endpoint)\n     .credential(credential)\n     .audience(ContainerRegistryAudience.AZURE_RESOURCE_MANAGER_PUBLIC_CLOUD)\n     .buildAsyncClient()\n     .getRepository(repository);\n```"
metadata: {}
package: "com.azure.containers.containerregistry"
artifact: com.azure:azure-containers-containerregistry:1.0.7
