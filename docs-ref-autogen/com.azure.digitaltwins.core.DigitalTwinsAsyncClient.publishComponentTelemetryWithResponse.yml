### YamlMime:JavaMember
uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishComponentTelemetryWithResponse*"
fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishComponentTelemetryWithResponse"
name: "publishComponentTelemetryWithResponse"
nameWithType: "DigitalTwinsAsyncClient.publishComponentTelemetryWithResponse"
members:
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishComponentTelemetryWithResponse(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,com.azure.digitaltwins.core.models.PublishComponentTelemetryOptions)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String messageId, Object payload, PublishComponentTelemetryOptions options)"
  name: "publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String messageId, Object payload, PublishComponentTelemetryOptions options)"
  nameWithType: "DigitalTwinsAsyncClient.publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String messageId, Object payload, PublishComponentTelemetryOptions options)"
  summary: "Publishes telemetry from a digital twin's component\n\n**Code Samples**\n\nA strongly typed object such as <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Hashtable\"></xref> can be provided as the input parameter for the telemetry payload.\n\n```java\nDictionary<String, Integer> telemetryPayload = new Hashtable<>();\n telemetryPayload.put(\"Telemetry1\", 5);\n \n digitalTwinsAsyncClient.publishComponentTelemetryWithResponse(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     UUID.randomUUID().toString(),\n     telemetryPayload,\n     new PublishComponentTelemetryOptions().setTimestamp(OffsetDateTime.now(ZoneId.systemDefault())))\n     .subscribe(responseObject ->\n         System.out.println(\n             \"Received publish component telemetry operation response with HTTP status code: \" +\n             responseObject.getStatusCode()));\n```\n\nOr alternatively String can be used as input type to construct the json string telemetry payload:\n\n```java\ndigitalTwinsAsyncClient.publishComponentTelemetryWithResponse(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     UUID.randomUUID().toString(),\n     \"{\\\"Telemetry1\\\": 5}\",\n     new PublishComponentTelemetryOptions().setTimestamp(OffsetDateTime.now(ZoneId.systemDefault())))\n     .subscribe(responseString ->\n         System.out.println(\n             \"Received publish component telemetry operation response with HTTP status code: \" +\n             responseString.getStatusCode()));\n```\n\nThe result is then consumed by one or many destination endpoints (subscribers) defined under <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsEventRoute\"></xref> These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed."
  parameters:
  - description: "The Id of the digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the DTDL component."
    name: "componentName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages. Defaults to a random UUID if argument is null."
    name: "messageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application/json telemetry payload to be sent. payload can be a raw json string or a strongly typed object like a Dictionary."
    name: "payload"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.PublishComponentTelemetryOptions?alt=com.azure.digitaltwins.core.models.PublishComponentTelemetryOptions&text=PublishComponentTelemetryOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String messageId, Object payload, PublishComponentTelemetryOptions options)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing an empty mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.digitaltwins.core"
artifact: com.azure:azure-digitaltwins-core:1.0.1
