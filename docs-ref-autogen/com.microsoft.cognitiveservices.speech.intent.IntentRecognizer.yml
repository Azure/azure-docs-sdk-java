### YamlMime:JavaType
uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer"
fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer"
name: "IntentRecognizer"
nameWithType: "IntentRecognizer"
summary: "Performs intent recognition on the speech input."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer?alt=com.microsoft.cognitiveservices.speech.Recognizer&text=Recognizer\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer.canceledSetCallback(long)?alt=com.microsoft.cognitiveservices.speech.Recognizer.canceledSetCallback&text=canceledSetCallback\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer.close()?alt=com.microsoft.cognitiveservices.speech.Recognizer.close&text=close\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer.dispose(boolean)?alt=com.microsoft.cognitiveservices.speech.Recognizer.dispose&text=dispose\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer.doAsyncRecognitionAction(java.lang.Runnable)?alt=com.microsoft.cognitiveservices.speech.Recognizer.doAsyncRecognitionAction&text=doAsyncRecognitionAction\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer.getImpl()?alt=com.microsoft.cognitiveservices.speech.Recognizer.getImpl&text=getImpl\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer.getPropertyBagFromRecognizerHandle(com.microsoft.cognitiveservices.speech.util.SafeHandle,com.microsoft.cognitiveservices.speech.util.IntRef)?alt=com.microsoft.cognitiveservices.speech.Recognizer.getPropertyBagFromRecognizerHandle&text=getPropertyBagFromRecognizerHandle\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer.recognize()?alt=com.microsoft.cognitiveservices.speech.Recognizer.recognize&text=recognize\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer.recognizedSetCallback(long)?alt=com.microsoft.cognitiveservices.speech.Recognizer.recognizedSetCallback&text=recognizedSetCallback\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer.recognizingSetCallback(long)?alt=com.microsoft.cognitiveservices.speech.Recognizer.recognizingSetCallback&text=recognizingSetCallback\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer.sessionStartedEventCallback(long)?alt=com.microsoft.cognitiveservices.speech.Recognizer.sessionStartedEventCallback&text=sessionStartedEventCallback\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer.sessionStartedSetCallback(long)?alt=com.microsoft.cognitiveservices.speech.Recognizer.sessionStartedSetCallback&text=sessionStartedSetCallback\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer.sessionStoppedEventCallback(long)?alt=com.microsoft.cognitiveservices.speech.Recognizer.sessionStoppedEventCallback&text=sessionStoppedEventCallback\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer.sessionStoppedSetCallback(long)?alt=com.microsoft.cognitiveservices.speech.Recognizer.sessionStoppedSetCallback&text=sessionStoppedSetCallback\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer.speechEndDetectedEventCallback(long)?alt=com.microsoft.cognitiveservices.speech.Recognizer.speechEndDetectedEventCallback&text=speechEndDetectedEventCallback\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer.speechEndDetectedSetCallback(long)?alt=com.microsoft.cognitiveservices.speech.Recognizer.speechEndDetectedSetCallback&text=speechEndDetectedSetCallback\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer.speechStartDetectedEventCallback(long)?alt=com.microsoft.cognitiveservices.speech.Recognizer.speechStartDetectedEventCallback&text=speechStartDetectedEventCallback\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer.speechStartDetectedSetCallback(long)?alt=com.microsoft.cognitiveservices.speech.Recognizer.speechStartDetectedSetCallback&text=speechStartDetectedSetCallback\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer.startContinuousRecognition(com.microsoft.cognitiveservices.speech.util.SafeHandle)?alt=com.microsoft.cognitiveservices.speech.Recognizer.startContinuousRecognition&text=startContinuousRecognition\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer.startKeywordRecognition(com.microsoft.cognitiveservices.speech.util.SafeHandle,com.microsoft.cognitiveservices.speech.util.SafeHandle)?alt=com.microsoft.cognitiveservices.speech.Recognizer.startKeywordRecognition&text=startKeywordRecognition\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer.stopContinuousRecognition(com.microsoft.cognitiveservices.speech.util.SafeHandle)?alt=com.microsoft.cognitiveservices.speech.Recognizer.stopContinuousRecognition&text=stopContinuousRecognition\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.cognitiveservices.speech.Recognizer.stopKeywordRecognition(com.microsoft.cognitiveservices.speech.util.SafeHandle)?alt=com.microsoft.cognitiveservices.speech.Recognizer.stopKeywordRecognition&text=stopKeywordRecognition\" data-throw-if-not-resolved=\"False\" />"
- classRef: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"java.lang.Object.clone()?alt=java.lang.Object.clone&text=clone\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.equals(java.lang.Object)?alt=java.lang.Object.equals&text=equals\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.finalize()?alt=java.lang.Object.finalize&text=finalize\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.getClass()?alt=java.lang.Object.getClass&text=getClass\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.hashCode()?alt=java.lang.Object.hashCode&text=hashCode\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.notify()?alt=java.lang.Object.notify&text=notify\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.notifyAll()?alt=java.lang.Object.notifyAll&text=notifyAll\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.toString()?alt=java.lang.Object.toString&text=toString\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait()?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait(long)?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait(long,int)?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
syntax: "public final class **IntentRecognizer**</br> extends <xref href=\"com.microsoft.cognitiveservices.speech.Recognizer?alt=com.microsoft.cognitiveservices.speech.Recognizer&text=Recognizer\" data-throw-if-not-resolved=\"False\" />"
constructors:
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.IntentRecognizer(com.microsoft.cognitiveservices.speech.EmbeddedSpeechConfig)"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.IntentRecognizer(EmbeddedSpeechConfig embeddedSpeechConfig)"
  name: "IntentRecognizer(EmbeddedSpeechConfig embeddedSpeechConfig)"
  nameWithType: "IntentRecognizer.IntentRecognizer(EmbeddedSpeechConfig embeddedSpeechConfig)"
  summary: "Creates a new instance of an intent recognizer with embedded speech configuration."
  parameters:
  - description: "embedded speech configuration."
    name: "embeddedSpeechConfig"
    type: "<xref href=\"com.microsoft.cognitiveservices.speech.EmbeddedSpeechConfig?alt=com.microsoft.cognitiveservices.speech.EmbeddedSpeechConfig&text=EmbeddedSpeechConfig\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public IntentRecognizer(EmbeddedSpeechConfig embeddedSpeechConfig)"
  desc: "Creates a new instance of an intent recognizer with embedded speech configuration."
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.IntentRecognizer(com.microsoft.cognitiveservices.speech.EmbeddedSpeechConfig,com.microsoft.cognitiveservices.speech.audio.AudioConfig)"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.IntentRecognizer(EmbeddedSpeechConfig embeddedSpeechConfig, AudioConfig audioConfig)"
  name: "IntentRecognizer(EmbeddedSpeechConfig embeddedSpeechConfig, AudioConfig audioConfig)"
  nameWithType: "IntentRecognizer.IntentRecognizer(EmbeddedSpeechConfig embeddedSpeechConfig, AudioConfig audioConfig)"
  summary: "Creates a new instance of an intent recognizer with embedded speech configuration."
  parameters:
  - description: "embedded speech configuration."
    name: "embeddedSpeechConfig"
    type: "<xref href=\"com.microsoft.cognitiveservices.speech.EmbeddedSpeechConfig?alt=com.microsoft.cognitiveservices.speech.EmbeddedSpeechConfig&text=EmbeddedSpeechConfig\" data-throw-if-not-resolved=\"False\" />"
  - description: "audio configuration."
    name: "audioConfig"
    type: "<xref href=\"com.microsoft.cognitiveservices.speech.audio.AudioConfig?alt=com.microsoft.cognitiveservices.speech.audio.AudioConfig&text=AudioConfig\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public IntentRecognizer(EmbeddedSpeechConfig embeddedSpeechConfig, AudioConfig audioConfig)"
  desc: "Creates a new instance of an intent recognizer with embedded speech configuration."
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.IntentRecognizer(com.microsoft.cognitiveservices.speech.SpeechConfig)"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.IntentRecognizer(SpeechConfig speechConfig)"
  name: "IntentRecognizer(SpeechConfig speechConfig)"
  nameWithType: "IntentRecognizer.IntentRecognizer(SpeechConfig speechConfig)"
  summary: "Creates a new instance of an intent recognizer."
  parameters:
  - description: "speech configuration."
    name: "speechConfig"
    type: "<xref href=\"com.microsoft.cognitiveservices.speech.SpeechConfig?alt=com.microsoft.cognitiveservices.speech.SpeechConfig&text=SpeechConfig\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public IntentRecognizer(SpeechConfig speechConfig)"
  desc: "Creates a new instance of an intent recognizer."
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.IntentRecognizer(com.microsoft.cognitiveservices.speech.SpeechConfig,com.microsoft.cognitiveservices.speech.audio.AudioConfig)"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.IntentRecognizer(SpeechConfig speechConfig, AudioConfig audioConfig)"
  name: "IntentRecognizer(SpeechConfig speechConfig, AudioConfig audioConfig)"
  nameWithType: "IntentRecognizer.IntentRecognizer(SpeechConfig speechConfig, AudioConfig audioConfig)"
  summary: "Creates a new instance of an intent recognizer."
  parameters:
  - description: "speech configuration."
    name: "speechConfig"
    type: "<xref href=\"com.microsoft.cognitiveservices.speech.SpeechConfig?alt=com.microsoft.cognitiveservices.speech.SpeechConfig&text=SpeechConfig\" data-throw-if-not-resolved=\"False\" />"
  - description: "audio configuration."
    name: "audioConfig"
    type: "<xref href=\"com.microsoft.cognitiveservices.speech.audio.AudioConfig?alt=com.microsoft.cognitiveservices.speech.audio.AudioConfig&text=AudioConfig\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public IntentRecognizer(SpeechConfig speechConfig, AudioConfig audioConfig)"
  desc: "Creates a new instance of an intent recognizer."
fields:
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.canceled"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.canceled"
  name: "canceled"
  nameWithType: "IntentRecognizer.canceled"
  summary: "The event canceled signals that the intent recognition was canceled."
  modifiers:
  - "final"
  field:
    type: "<xref href=\"com.microsoft.cognitiveservices.speech.util.EventHandlerImpl?alt=com.microsoft.cognitiveservices.speech.util.EventHandlerImpl&text=EventHandlerImpl\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.cognitiveservices.speech.intent.IntentRecognitionCanceledEventArgs?alt=com.microsoft.cognitiveservices.speech.intent.IntentRecognitionCanceledEventArgs&text=IntentRecognitionCanceledEventArgs\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public final EventHandlerImpl<IntentRecognitionCanceledEventArgs> canceled"
  desc: "The event canceled signals that the intent recognition was canceled."
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.recognized"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.recognized"
  name: "recognized"
  nameWithType: "IntentRecognizer.recognized"
  summary: "The event recognized signals that a final recognition result is received."
  modifiers:
  - "final"
  field:
    type: "<xref href=\"com.microsoft.cognitiveservices.speech.util.EventHandlerImpl?alt=com.microsoft.cognitiveservices.speech.util.EventHandlerImpl&text=EventHandlerImpl\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.cognitiveservices.speech.intent.IntentRecognitionEventArgs?alt=com.microsoft.cognitiveservices.speech.intent.IntentRecognitionEventArgs&text=IntentRecognitionEventArgs\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public final EventHandlerImpl<IntentRecognitionEventArgs> recognized"
  desc: "The event recognized signals that a final recognition result is received."
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.recognizing"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.recognizing"
  name: "recognizing"
  nameWithType: "IntentRecognizer.recognizing"
  summary: "The event recognizing signals that an intermediate recognition result is received."
  modifiers:
  - "final"
  field:
    type: "<xref href=\"com.microsoft.cognitiveservices.speech.util.EventHandlerImpl?alt=com.microsoft.cognitiveservices.speech.util.EventHandlerImpl&text=EventHandlerImpl\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.cognitiveservices.speech.intent.IntentRecognitionEventArgs?alt=com.microsoft.cognitiveservices.speech.intent.IntentRecognitionEventArgs&text=IntentRecognitionEventArgs\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public final EventHandlerImpl<IntentRecognitionEventArgs> recognizing"
  desc: "The event recognizing signals that an intermediate recognition result is received."
methods:
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.addAllIntents(com.microsoft.cognitiveservices.speech.intent.LanguageUnderstandingModel)"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.addAllIntents(LanguageUnderstandingModel model)"
  name: "addAllIntents(LanguageUnderstandingModel model)"
  nameWithType: "IntentRecognizer.addAllIntents(LanguageUnderstandingModel model)"
  summary: "Adds all intents from the specified Language Understanding Model."
  parameters:
  - description: "The language understanding model containing the intents."
    name: "model"
    type: "<xref href=\"com.microsoft.cognitiveservices.speech.intent.LanguageUnderstandingModel?alt=com.microsoft.cognitiveservices.speech.intent.LanguageUnderstandingModel&text=LanguageUnderstandingModel\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void addAllIntents(LanguageUnderstandingModel model)"
  desc: "Adds all intents from the specified Language Understanding Model."
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.addAllIntents(com.microsoft.cognitiveservices.speech.intent.LanguageUnderstandingModel,java.lang.String)"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.addAllIntents(LanguageUnderstandingModel model, String intentId)"
  name: "addAllIntents(LanguageUnderstandingModel model, String intentId)"
  nameWithType: "IntentRecognizer.addAllIntents(LanguageUnderstandingModel model, String intentId)"
  summary: "Adds all intents from the specified Language Understanding Model."
  parameters:
  - description: "The language understanding model containing the intents."
    name: "model"
    type: "<xref href=\"com.microsoft.cognitiveservices.speech.intent.LanguageUnderstandingModel?alt=com.microsoft.cognitiveservices.speech.intent.LanguageUnderstandingModel&text=LanguageUnderstandingModel\" data-throw-if-not-resolved=\"False\" />"
  - description: "A custom id String to be returned in the IntentRecognitionResult's getIntentId() method."
    name: "intentId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void addAllIntents(LanguageUnderstandingModel model, String intentId)"
  desc: "Adds all intents from the specified Language Understanding Model."
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.addIntent(com.microsoft.cognitiveservices.speech.intent.LanguageUnderstandingModel,java.lang.String)"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.addIntent(LanguageUnderstandingModel model, String intentName)"
  name: "addIntent(LanguageUnderstandingModel model, String intentName)"
  nameWithType: "IntentRecognizer.addIntent(LanguageUnderstandingModel model, String intentName)"
  summary: "Adds a single intent by name from the specified Language Understanding Model."
  parameters:
  - description: "The language understanding model containing the intent."
    name: "model"
    type: "<xref href=\"com.microsoft.cognitiveservices.speech.intent.LanguageUnderstandingModel?alt=com.microsoft.cognitiveservices.speech.intent.LanguageUnderstandingModel&text=LanguageUnderstandingModel\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the single intent to be included from the language understanding model."
    name: "intentName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void addIntent(LanguageUnderstandingModel model, String intentName)"
  desc: "Adds a single intent by name from the specified Language Understanding Model."
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.addIntent(com.microsoft.cognitiveservices.speech.intent.LanguageUnderstandingModel,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.addIntent(LanguageUnderstandingModel model, String intentName, String intentId)"
  name: "addIntent(LanguageUnderstandingModel model, String intentName, String intentId)"
  nameWithType: "IntentRecognizer.addIntent(LanguageUnderstandingModel model, String intentName, String intentId)"
  summary: "Adds a single intent by name from the specified Language Understanding Model."
  parameters:
  - description: "The language understanding model containing the intent."
    name: "model"
    type: "<xref href=\"com.microsoft.cognitiveservices.speech.intent.LanguageUnderstandingModel?alt=com.microsoft.cognitiveservices.speech.intent.LanguageUnderstandingModel&text=LanguageUnderstandingModel\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the single intent to be included from the language understanding model."
    name: "intentName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "A custom id String to be returned in the IntentRecognitionResult's getIntentId() method."
    name: "intentId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void addIntent(LanguageUnderstandingModel model, String intentName, String intentId)"
  desc: "Adds a single intent by name from the specified Language Understanding Model."
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.addIntent(java.lang.String)"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.addIntent(String simplePhrase)"
  name: "addIntent(String simplePhrase)"
  nameWithType: "IntentRecognizer.addIntent(String simplePhrase)"
  summary: "Adds a simple phrase that may be spoken by the user, indicating a specific user intent."
  parameters:
  - description: "The phrase corresponding to the intent."
    name: "simplePhrase"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void addIntent(String simplePhrase)"
  desc: "Adds a simple phrase that may be spoken by the user, indicating a specific user intent."
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.addIntent(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.addIntent(String simplePhrase, String intentId)"
  name: "addIntent(String simplePhrase, String intentId)"
  nameWithType: "IntentRecognizer.addIntent(String simplePhrase, String intentId)"
  summary: "Adds a simple phrase that may be spoken by the user, indicating a specific user intent."
  parameters:
  - description: "The phrase corresponding to the intent."
    name: "simplePhrase"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "A custom id String to be returned in the IntentRecognitionResult's getIntentId() method."
    name: "intentId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void addIntent(String simplePhrase, String intentId)"
  desc: "Adds a simple phrase that may be spoken by the user, indicating a specific user intent."
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.applyLanguageModels(java.util.Collection<com.microsoft.cognitiveservices.speech.intent.LanguageUnderstandingModel>)"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.applyLanguageModels(Collection<LanguageUnderstandingModel> collection)"
  name: "applyLanguageModels(Collection<LanguageUnderstandingModel> collection)"
  nameWithType: "IntentRecognizer.applyLanguageModels(Collection<LanguageUnderstandingModel> collection)"
  summary: "Takes a collection of language understanding models, makes a copy of them, and applies them to the recognizer."
  parameters:
  - description: "A collection of shared pointers to LanguageUnderstandingModels."
    name: "collection"
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.cognitiveservices.speech.intent.LanguageUnderstandingModel?alt=com.microsoft.cognitiveservices.speech.intent.LanguageUnderstandingModel&text=LanguageUnderstandingModel\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public boolean applyLanguageModels(Collection<LanguageUnderstandingModel> collection)"
  exceptions:
  - description: "If the collection passed is null."
    type: "<xref href=\"java.lang.NullPointerException?alt=java.lang.NullPointerException&text=NullPointerException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Takes a collection of language understanding models, makes a copy of them, and applies them to the recognizer. This application takes effect at different times depending on the LanguageUnderstandingModel type. PatternMatchingModels will become active immediately whereas LanguageUnderstandingModels utilizing the LUIS service will become active immediately unless the recognizer is in the middle of intent recognition in which case it will take effect after the next Recognized event. This replaces any previously applied models."
  returns:
    description: "True if the application of the models takes effect immediately. Otherwise false."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.dispose(boolean)"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.dispose(boolean disposing)"
  name: "dispose(boolean disposing)"
  nameWithType: "IntentRecognizer.dispose(boolean disposing)"
  summary: "This method performs cleanup of resources."
  modifiers:
  - "protected"
  overridden: "com.microsoft.cognitiveservices.speech.Recognizer.dispose(boolean)"
  parameters:
  - name: "disposing"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected void dispose(boolean disposing)"
  desc: "This method performs cleanup of resources. The Boolean parameter disposing indicates whether the method is called from Dispose (if disposing is true) or from the finalizer (if disposing is false). Derived classes should override this method to dispose resource if needed."
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.getAuthorizationToken()"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.getAuthorizationToken()"
  name: "getAuthorizationToken()"
  nameWithType: "IntentRecognizer.getAuthorizationToken()"
  summary: "Gets the authorization token used to communicate with the service."
  syntax: "public String getAuthorizationToken()"
  desc: "Gets the authorization token used to communicate with the service."
  returns:
    description: "Authorization token."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.getProperties()"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.getProperties()"
  name: "getProperties()"
  nameWithType: "IntentRecognizer.getProperties()"
  summary: "The collection of properties and their values defined for this Intent<wbr>Recognizer."
  syntax: "public PropertyCollection getProperties()"
  desc: "The collection of properties and their values defined for this IntentRecognizer."
  returns:
    description: "The collection of properties and their values defined for this IntentRecognizer."
    type: "<xref href=\"com.microsoft.cognitiveservices.speech.PropertyCollection?alt=com.microsoft.cognitiveservices.speech.PropertyCollection&text=PropertyCollection\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.getRecoImpl()"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.getRecoImpl()"
  name: "getRecoImpl()"
  nameWithType: "IntentRecognizer.getRecoImpl()"
  summary: "Only for testing"
  syntax: "public SafeHandle getRecoImpl()"
  desc: "Only for testing"
  returns:
    description: "only used for testing."
    type: "<xref href=\"com.microsoft.cognitiveservices.speech.util.SafeHandle?alt=com.microsoft.cognitiveservices.speech.util.SafeHandle&text=SafeHandle\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.getSpeechRecognitionLanguage()"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.getSpeechRecognitionLanguage()"
  name: "getSpeechRecognitionLanguage()"
  nameWithType: "IntentRecognizer.getSpeechRecognitionLanguage()"
  summary: "Gets the spoken language of recognition."
  syntax: "public String getSpeechRecognitionLanguage()"
  desc: "Gets the spoken language of recognition."
  returns:
    description: "the spoken language of recognition."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.recognizeOnceAsync()"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.recognizeOnceAsync()"
  name: "recognizeOnceAsync()"
  nameWithType: "IntentRecognizer.recognizeOnceAsync()"
  summary: "Starts intent recognition, and returns after a single utterance is recognized."
  syntax: "public Future<IntentRecognitionResult> recognizeOnceAsync()"
  desc: "Starts intent recognition, and returns after a single utterance is recognized. The end of a single utterance is determined by listening for silence at the end or until a maximum of 15 seconds of audio is processed. The task returns the recognition text as result. Note: Since recognizeOnceAsync() returns only a single utterance, it is suitable only for single shot recognition like command or query. For long-running multi-utterance recognition, use startContinuousRecognitionAsync() instead."
  returns:
    description: "A task representing the recognition operation. The task returns a value of\n <code>IntentRecognitionResult</code>"
    type: "<xref href=\"java.util.concurrent.Future?alt=java.util.concurrent.Future&text=Future\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.cognitiveservices.speech.intent.IntentRecognitionResult?alt=com.microsoft.cognitiveservices.speech.intent.IntentRecognitionResult&text=IntentRecognitionResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.recognizeOnceAsync(java.lang.String)"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.recognizeOnceAsync(String text)"
  name: "recognizeOnceAsync(String text)"
  nameWithType: "IntentRecognizer.recognizeOnceAsync(String text)"
  summary: "Performs intent recognition, and generates a result from the text passed in."
  parameters:
  - description: "The text to be recognized for intent."
    name: "text"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Future<IntentRecognitionResult> recognizeOnceAsync(String text)"
  desc: "Performs intent recognition, and generates a result from the text passed in. This is useful for testing and other times when the speech input is not tied to the IntentRecognizer. Note: The Intent Service does not currently support this so it is only valid for offline pattern matching or exact matching intents."
  returns:
    description: "A task representing the recognition operation. The task returns\n a value of <xref uid=\"com.microsoft.cognitiveservices.speech.intent.IntentRecognitionResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IntentRecognitionResult\"></xref>."
    type: "<xref href=\"java.util.concurrent.Future?alt=java.util.concurrent.Future&text=Future\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.cognitiveservices.speech.intent.IntentRecognitionResult?alt=com.microsoft.cognitiveservices.speech.intent.IntentRecognitionResult&text=IntentRecognitionResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.setAuthorizationToken(java.lang.String)"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.setAuthorizationToken(String token)"
  name: "setAuthorizationToken(String token)"
  nameWithType: "IntentRecognizer.setAuthorizationToken(String token)"
  summary: "Sets the authorization token used to communicate with the service."
  parameters:
  - description: "Authorization token."
    name: "token"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setAuthorizationToken(String token)"
  desc: "Sets the authorization token used to communicate with the service. Note: The caller needs to ensure that the authorization token is valid. Before the authorization token expires, the caller needs to refresh it by calling this setter with a new valid token. Otherwise, the recognizer will encounter errors during recognition."
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.startContinuousRecognitionAsync()"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.startContinuousRecognitionAsync()"
  name: "startContinuousRecognitionAsync()"
  nameWithType: "IntentRecognizer.startContinuousRecognitionAsync()"
  summary: "Starts speech recognition on a continuous audio stream, until stop<wbr>Continuous<wbr>Recognition<wbr>Async() is called."
  syntax: "public Future<Void> startContinuousRecognitionAsync()"
  desc: "Starts speech recognition on a continuous audio stream, until stopContinuousRecognitionAsync() is called. User must subscribe to events to receive recognition results."
  returns:
    description: "A task representing the asynchronous operation that starts the recognition."
    type: "<xref href=\"java.util.concurrent.Future?alt=java.util.concurrent.Future&text=Future\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.startKeywordRecognitionAsync(com.microsoft.cognitiveservices.speech.KeywordRecognitionModel)"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.startKeywordRecognitionAsync(KeywordRecognitionModel model)"
  name: "startKeywordRecognitionAsync(KeywordRecognitionModel model)"
  nameWithType: "IntentRecognizer.startKeywordRecognitionAsync(KeywordRecognitionModel model)"
  summary: "Configures the recognizer with the given keyword model."
  parameters:
  - description: "The keyword recognition model that specifies the keyword to be recognized."
    name: "model"
    type: "<xref href=\"com.microsoft.cognitiveservices.speech.KeywordRecognitionModel?alt=com.microsoft.cognitiveservices.speech.KeywordRecognitionModel&text=KeywordRecognitionModel\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Future<Void> startKeywordRecognitionAsync(KeywordRecognitionModel model)"
  desc: "Configures the recognizer with the given keyword model. After calling this method, the recognizer is listening for the keyword to start the recognition. Call stopKeywordRecognitionAsync() to end the keyword initiated recognition. User must subscribe to events to receive recognition results."
  returns:
    description: "A task representing the asynchronous operation that starts the recognition."
    type: "<xref href=\"java.util.concurrent.Future?alt=java.util.concurrent.Future&text=Future\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.stopContinuousRecognitionAsync()"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.stopContinuousRecognitionAsync()"
  name: "stopContinuousRecognitionAsync()"
  nameWithType: "IntentRecognizer.stopContinuousRecognitionAsync()"
  summary: "Stops a running recognition operation as soon as possible and immediately requests a result based on the the input that has been processed so far."
  syntax: "public Future<Void> stopContinuousRecognitionAsync()"
  desc: "Stops a running recognition operation as soon as possible and immediately requests a result based on the the input that has been processed so far. This works for all recognition operations, not just continuous ones, and facilitates the use of push-to-talk or \"finish now\" buttons for manual audio endpointing."
  returns:
    description: "A future that will complete when input processing has been stopped. Result generation, if applicable for the input provided, may happen after this task completes and should be handled with the appropriate event."
    type: "<xref href=\"java.util.concurrent.Future?alt=java.util.concurrent.Future&text=Future\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.stopKeywordRecognitionAsync()"
  fullName: "com.microsoft.cognitiveservices.speech.intent.IntentRecognizer.stopKeywordRecognitionAsync()"
  name: "stopKeywordRecognitionAsync()"
  nameWithType: "IntentRecognizer.stopKeywordRecognitionAsync()"
  summary: "Ends the keyword initiated recognition."
  syntax: "public Future<Void> stopKeywordRecognitionAsync()"
  desc: "Ends the keyword initiated recognition."
  returns:
    description: "A task representing the asynchronous operation that stops the recognition."
    type: "<xref href=\"java.util.concurrent.Future?alt=java.util.concurrent.Future&text=Future\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Performs intent recognition on the speech input. It returns both recognized text and recognized intent. Note: close() must be called in order to release underlying resources held by the object."
metadata: {}
package: "com.microsoft.cognitiveservices.speech.intent"
artifact: com.microsoft.cognitiveservices.speech:client-sdk:1.24.2
