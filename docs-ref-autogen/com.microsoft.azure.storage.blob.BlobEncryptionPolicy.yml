### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.storage.blob.BlobEncryptionPolicy
  id: BlobEncryptionPolicy
  parent: com.microsoft.azure.storage.blob
  children:
  - com.microsoft.azure.storage.blob.BlobEncryptionPolicy.BlobEncryptionPolicy(IKey,IKeyResolver)
  - com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKey()
  - com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKeyResolver()
  - com.microsoft.azure.storage.blob.BlobEncryptionPolicy.keyResolver
  - com.microsoft.azure.storage.blob.BlobEncryptionPolicy.keyWrapper
  - com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKey(IKey)
  - com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKeyResolver(IKeyResolver)
  href: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.yml
  langs:
  - java
  name: BlobEncryptionPolicy
  nameWithType: BlobEncryptionPolicy
  fullName: com.microsoft.azure.storage.blob.BlobEncryptionPolicy
  type: Class
  source:
    remote: &o0
      path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/BlobEncryptionPolicy.java
      branch: legacy-master
      repo: https://github.com/azure/azure-storage-java
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/BlobEncryptionPolicy.java
    startLine: 44
  package: com.microsoft.azure.storage.blob
  summary: "<p>Represents a blob encryption policy that is used to perform envelope encryption/decryption of Azure blobs. </p>"
  syntax: &o1
    content: public class BlobEncryptionPolicy
  inheritance:
  - java.lang.Object
- uid: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.BlobEncryptionPolicy(IKey,IKeyResolver)
  id: BlobEncryptionPolicy(IKey,IKeyResolver)
  parent: com.microsoft.azure.storage.blob.BlobEncryptionPolicy
  href: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.yml
  langs:
  - java
  name: BlobEncryptionPolicy(IKey key, IKeyResolver keyResolver)
  nameWithType: BlobEncryptionPolicy.BlobEncryptionPolicy(IKey key, IKeyResolver keyResolver)
  fullName: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.BlobEncryptionPolicy(IKey key, IKeyResolver keyResolver)
  overload: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.BlobEncryptionPolicy*
  type: Constructor
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/BlobEncryptionPolicy.java
    startLine: 70
  package: com.microsoft.azure.storage.blob
  summary: "<p>Initializes a new instance of the <xref uid=\"com.microsoft.azure.storage.blob.BlobEncryptionPolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobEncryptionPolicy\"></xref> class with the specified key and resolver. </p>\r\n<p>If the generated policy is intended to be used for encryption, users are expected to provide a key at the minimum. The absence of key will cause an exception to be thrown during encryption. If the generated policy is intended to be used for decryption, users can provide a keyResolver. The client library will - 1. Invoke the key resolver if specified to get the key. 2. If resolver is not specified but a key is specified, match the key id on the key and use it.</p>\r\n<p></p>"
  syntax:
    content: public BlobEncryptionPolicy(IKey key, IKeyResolver keyResolver)
    parameters:
    - id: key
      type: com.microsoft.azure.keyvault.core.IKey
      description: <p>An object of type <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IKey"></xref> that is used to wrap/unwrap the content encryption key. </p>
    - id: keyResolver
      type: com.microsoft.azure.keyvault.core.IKeyResolver
      description: <p>The key resolver used to select the correct key for decrypting existing blobs. </p>
- uid: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKey()
  id: getKey()
  parent: com.microsoft.azure.storage.blob.BlobEncryptionPolicy
  href: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.yml
  langs:
  - java
  name: getKey()
  nameWithType: BlobEncryptionPolicy.getKey()
  fullName: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKey()
  overload: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKey*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/BlobEncryptionPolicy.java
    startLine: 80
  package: com.microsoft.azure.storage.blob
  summary: "<p>Gets the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IKey\"></xref> that is used to wrap/unwrap the content key during encryption.</p>\r\n<p></p>"
  syntax:
    content: public IKey getKey()
    return:
      type: com.microsoft.azure.keyvault.core.IKey
      description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IKey"></xref> object. </p>
- uid: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKeyResolver()
  id: getKeyResolver()
  parent: com.microsoft.azure.storage.blob.BlobEncryptionPolicy
  href: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.yml
  langs:
  - java
  name: getKeyResolver()
  nameWithType: BlobEncryptionPolicy.getKeyResolver()
  fullName: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKeyResolver()
  overload: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKeyResolver*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/BlobEncryptionPolicy.java
    startLine: 89
  package: com.microsoft.azure.storage.blob
  summary: "<p>Gets the key resolver used to select the correct key for decrypting existing blobs.</p>\r\n<p></p>"
  syntax:
    content: public IKeyResolver getKeyResolver()
    return:
      type: com.microsoft.azure.keyvault.core.IKeyResolver
      description: <p>A resolver that returns an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IKey"></xref> given a keyId. </p>
- uid: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.keyResolver
  id: keyResolver
  parent: com.microsoft.azure.storage.blob.BlobEncryptionPolicy
  href: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.yml
  langs:
  - java
  name: keyResolver
  nameWithType: BlobEncryptionPolicy.keyResolver
  fullName: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.keyResolver
  type: Field
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/BlobEncryptionPolicy.java
    startLine: 49
  package: com.microsoft.azure.storage.blob
  summary: "<p>The <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IKeyResolver\"></xref> used to select the correct key for decrypting existing blobs. </p>"
  syntax:
    content: public IKeyResolver keyResolver
    return:
      type: com.microsoft.azure.keyvault.core.IKeyResolver
- uid: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.keyWrapper
  id: keyWrapper
  parent: com.microsoft.azure.storage.blob.BlobEncryptionPolicy
  href: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.yml
  langs:
  - java
  name: keyWrapper
  nameWithType: BlobEncryptionPolicy.keyWrapper
  fullName: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.keyWrapper
  type: Field
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/BlobEncryptionPolicy.java
    startLine: 54
  package: com.microsoft.azure.storage.blob
  summary: "<p>An object of type <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IKey\"></xref> that is used to wrap/unwrap the content key during encryption. </p>"
  syntax:
    content: public IKey keyWrapper
    return:
      type: com.microsoft.azure.keyvault.core.IKey
- uid: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKey(IKey)
  id: setKey(IKey)
  parent: com.microsoft.azure.storage.blob.BlobEncryptionPolicy
  href: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.yml
  langs:
  - java
  name: setKey(IKey key)
  nameWithType: BlobEncryptionPolicy.setKey(IKey key)
  fullName: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKey(IKey key)
  overload: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKey*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/BlobEncryptionPolicy.java
    startLine: 99
  package: com.microsoft.azure.storage.blob
  summary: "<p>Sets the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IKey\"></xref> that is used to wrap/unwrap the content key during encryption.</p>\r\n<p></p>"
  syntax:
    content: public void setKey(IKey key)
    parameters:
    - id: key
      type: com.microsoft.azure.keyvault.core.IKey
      description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IKey"></xref> object. </p>
- uid: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKeyResolver(IKeyResolver)
  id: setKeyResolver(IKeyResolver)
  parent: com.microsoft.azure.storage.blob.BlobEncryptionPolicy
  href: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.yml
  langs:
  - java
  name: setKeyResolver(IKeyResolver keyResolver)
  nameWithType: BlobEncryptionPolicy.setKeyResolver(IKeyResolver keyResolver)
  fullName: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKeyResolver(IKeyResolver keyResolver)
  overload: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKeyResolver*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/BlobEncryptionPolicy.java
    startLine: 109
  package: com.microsoft.azure.storage.blob
  summary: "<p>Sets the key resolver used to select the correct key for decrypting existing blobs.</p>\r\n<p></p>"
  syntax:
    content: public void setKeyResolver(IKeyResolver keyResolver)
    parameters:
    - id: keyResolver
      type: com.microsoft.azure.keyvault.core.IKeyResolver
      description: <p>A resolver that returns an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IKey"></xref> given a keyId. </p>
references:
- uid: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.BlobEncryptionPolicy*
  name: BlobEncryptionPolicy
  nameWithType: BlobEncryptionPolicy.BlobEncryptionPolicy
  fullName: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.BlobEncryptionPolicy
  package: com.microsoft.azure.storage.blob
- uid: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKey*
  name: getKey
  nameWithType: BlobEncryptionPolicy.getKey
  fullName: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKey
  package: com.microsoft.azure.storage.blob
- uid: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKeyResolver*
  name: getKeyResolver
  nameWithType: BlobEncryptionPolicy.getKeyResolver
  fullName: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKeyResolver
  package: com.microsoft.azure.storage.blob
- uid: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKey*
  name: setKey
  nameWithType: BlobEncryptionPolicy.setKey
  fullName: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKey
  package: com.microsoft.azure.storage.blob
- uid: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKeyResolver*
  name: setKeyResolver
  nameWithType: BlobEncryptionPolicy.setKeyResolver
  fullName: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKeyResolver
  package: com.microsoft.azure.storage.blob
- uid: com.microsoft.azure.keyvault.core.IKeyResolver
  parent: com.microsoft.azure.keyvault.core
  href: com.microsoft.azure.keyvault.core.IKeyResolver.yml
  name: IKeyResolver
  nameWithType: IKeyResolver
  fullName: com.microsoft.azure.keyvault.core.IKeyResolver
  type: Interface
  summary: "<p>Interface for representing key resolving operations with the Microsoft Azure Key Vault libraries. </p>"
  syntax:
    content: public interface IKeyResolver
- uid: com.microsoft.azure.keyvault.core.IKey
  parent: com.microsoft.azure.keyvault.core
  href: com.microsoft.azure.keyvault.core.IKey.yml
  name: IKey
  nameWithType: IKey
  fullName: com.microsoft.azure.keyvault.core.IKey
  type: Interface
  summary: "<p>Interface for representing cryptographic keys with the Microsoft Azure Key Vault libraries. </p>"
  syntax:
    content: public interface IKey
- uid: com.microsoft.azure.storage.blob.BlobEncryptionPolicy
  parent: com.microsoft.azure.storage.blob
  href: com.microsoft.azure.storage.blob.BlobEncryptionPolicy.yml
  name: BlobEncryptionPolicy
  nameWithType: BlobEncryptionPolicy
  fullName: com.microsoft.azure.storage.blob.BlobEncryptionPolicy
  type: Class
  summary: "<p>Represents a blob encryption policy that is used to perform envelope encryption/decryption of Azure blobs. </p>"
  syntax: *o1
- uid: com.microsoft.azure.storage.StorageException
  parent: com.microsoft.azure.storage
  href: com.microsoft.azure.storage.StorageException.yml
  name: StorageException
  nameWithType: StorageException
  fullName: com.microsoft.azure.storage.StorageException
  type: Class
  summary: "<p>Represents an exception for the Microsoft Azure storage service. </p>"
  syntax:
    content: public class StorageException
- uid: com.microsoft.azure.storage.blob.CloudBlob
  parent: com.microsoft.azure.storage.blob
  href: com.microsoft.azure.storage.blob.CloudBlob.yml
  name: CloudBlob
  nameWithType: CloudBlob
  fullName: com.microsoft.azure.storage.blob.CloudBlob
  type: Class
  summary: "<p>Represents a Microsoft Azure blob. This is the base class for the <xref uid=\"com.microsoft.azure.storage.blob.CloudBlockBlob\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CloudBlockBlob\"></xref> and <xref uid=\"com.microsoft.azure.storage.blob.CloudPageBlob\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CloudPageBlob\"></xref> classes. </p>"
  syntax:
    content: public class CloudBlob
- uid: com.microsoft.azure.storage.blob.BlobRequestOptions
  parent: com.microsoft.azure.storage.blob
  href: com.microsoft.azure.storage.blob.BlobRequestOptions.yml
  name: BlobRequestOptions
  nameWithType: BlobRequestOptions
  fullName: com.microsoft.azure.storage.blob.BlobRequestOptions
  type: Class
  summary: "<p>Represents a set of options that may be specified on a request. </p>"
  syntax:
    content: public class BlobRequestOptions
