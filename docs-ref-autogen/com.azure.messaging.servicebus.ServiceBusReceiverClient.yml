### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient
  id: ServiceBusReceiverClient
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus
  children:
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon(com.azure.messaging.servicebus.ServiceBusReceivedMessage)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon(com.azure.messaging.servicebus.ServiceBusReceivedMessage,com.azure.messaging.servicebus.models.AbandonOptions)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.close()
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.commitTransaction(com.azure.messaging.servicebus.ServiceBusTransactionContext)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.complete(com.azure.messaging.servicebus.ServiceBusReceivedMessage)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.complete(com.azure.messaging.servicebus.ServiceBusReceivedMessage,com.azure.messaging.servicebus.models.CompleteOptions)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.createTransaction()
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(com.azure.messaging.servicebus.ServiceBusReceivedMessage)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(com.azure.messaging.servicebus.ServiceBusReceivedMessage,com.azure.messaging.servicebus.models.DeadLetterOptions)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(com.azure.messaging.servicebus.ServiceBusReceivedMessage)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(com.azure.messaging.servicebus.ServiceBusReceivedMessage,com.azure.messaging.servicebus.models.DeferOptions)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.getEntityPath()
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.getFullyQualifiedNamespace()
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.getSessionState()
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.peekMessage()
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.peekMessage(long)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.peekMessages(int)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.peekMessages(int,long)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage(long)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch(java.lang.Iterable<java.lang.Long>)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveMessages(int)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveMessages(int,java.time.Duration)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock(com.azure.messaging.servicebus.ServiceBusReceivedMessage)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock(com.azure.messaging.servicebus.ServiceBusReceivedMessage,java.time.Duration,java.util.function.Consumer<java.lang.Throwable>)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.renewSessionLock()
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.renewSessionLock(java.time.Duration,java.util.function.Consumer<java.lang.Throwable>)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.rollbackTransaction(com.azure.messaging.servicebus.ServiceBusTransactionContext)
  - com.azure.messaging.servicebus.ServiceBusReceiverClient.setSessionState(byte[])
  langs:
  - java
  name: ServiceBusReceiverClient
  nameWithType: ServiceBusReceiverClient
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient
  type: Class
  package: com.azure.messaging.servicebus
  summary: "A **synchronous** receiver responsible for receiving <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">ServiceBusReceivedMessage</xref> from a specific queue or topic on Azure Service Bus.\n\n**Create an instance of receiver**\n\n```java\nServiceBusReceiverClient receiver = new ServiceBusClientBuilder()\n     .connectionString(\n         \"Endpoint={servicebus-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key}\")\n     .receiver()\n     .queueName(\"<< QUEUE NAME >>\")\n     .buildClient();\n \n // Use the receiver and finally close it.\n receiver.close();\n```"
  syntax:
    content: public final class ServiceBusReceiverClient implements AutoCloseable
  inheritance:
  - java.lang.Object
  implements:
  - java.lang.AutoCloseable
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.ServiceBusReceiverClient(com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient,java.time.Duration)
  id: ServiceBusReceiverClient(com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient,java.time.Duration)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: ServiceBusReceiverClient(ServiceBusReceiverAsyncClient asyncClient, Duration operationTimeout)
  nameWithType: ServiceBusReceiverClient.ServiceBusReceiverClient(ServiceBusReceiverAsyncClient asyncClient, Duration operationTimeout)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.ServiceBusReceiverClient(ServiceBusReceiverAsyncClient asyncClient, Duration operationTimeout)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.ServiceBusReceiverClient*
  type: Constructor
  package: com.azure.messaging.servicebus
  summary: Creates a synchronous receiver given its asynchronous counterpart.
  syntax:
    content: " ServiceBusReceiverClient(ServiceBusReceiverAsyncClient asyncClient, Duration operationTimeout)"
    parameters:
    - id: asyncClient
      type: com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient
      description: Asynchronous receiver.
    - id: operationTimeout
      type: java.time.Duration
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon(com.azure.messaging.servicebus.ServiceBusReceivedMessage)
  id: abandon(com.azure.messaging.servicebus.ServiceBusReceivedMessage)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: abandon(ServiceBusReceivedMessage message)
  nameWithType: ServiceBusReceiverClient.abandon(ServiceBusReceivedMessage message)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon(ServiceBusReceivedMessage message)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Abandons a <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref>. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message.
  syntax:
    content: public void abandon(ServiceBusReceivedMessage message)
    parameters:
    - id: message
      type: com.azure.messaging.servicebus.ServiceBusReceivedMessage
      description: The <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref> to perform this operation.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon(com.azure.messaging.servicebus.ServiceBusReceivedMessage,com.azure.messaging.servicebus.models.AbandonOptions)
  id: abandon(com.azure.messaging.servicebus.ServiceBusReceivedMessage,com.azure.messaging.servicebus.models.AbandonOptions)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: abandon(ServiceBusReceivedMessage message, AbandonOptions options)
  nameWithType: ServiceBusReceiverClient.abandon(ServiceBusReceivedMessage message, AbandonOptions options)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon(ServiceBusReceivedMessage message, AbandonOptions options)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Abandons a <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref> and updates the message's properties. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message.
  syntax:
    content: public void abandon(ServiceBusReceivedMessage message, AbandonOptions options)
    parameters:
    - id: message
      type: com.azure.messaging.servicebus.ServiceBusReceivedMessage
      description: The <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref> to perform this operation.
    - id: options
      type: com.azure.messaging.servicebus.models.AbandonOptions
      description: The options to set while abandoning the message.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.close()
  id: close()
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: close()
  nameWithType: ServiceBusReceiverClient.close()
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.close()
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.close*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Disposes of the consumer by closing the underlying links to the service.
  syntax:
    content: public void close()
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.commitTransaction(com.azure.messaging.servicebus.ServiceBusTransactionContext)
  id: commitTransaction(com.azure.messaging.servicebus.ServiceBusTransactionContext)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: commitTransaction(ServiceBusTransactionContext transactionContext)
  nameWithType: ServiceBusReceiverClient.commitTransaction(ServiceBusTransactionContext transactionContext)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.commitTransaction(ServiceBusTransactionContext transactionContext)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.commitTransaction*
  type: Method
  package: com.azure.messaging.servicebus
  summary: "Commits the transaction and all the operations associated with it.\n\n**Creating and using a transaction**\n\n```java\nServiceBusTransactionContext transaction = receiver.createTransaction();\n \n // Process messages and associate operations with the transaction.\n ServiceBusReceivedMessage deferredMessage = receiver.receiveDeferredMessage(sequenceNumber);\n receiver.complete(deferredMessage, new CompleteOptions().setTransactionContext(transaction));\n receiver.abandon(receivedMessage, new AbandonOptions().setTransactionContext(transaction));\n receiver.commitTransaction(transaction);\n```"
  syntax:
    content: public void commitTransaction(ServiceBusTransactionContext transactionContext)
    parameters:
    - id: transactionContext
      type: com.azure.messaging.servicebus.ServiceBusTransactionContext
      description: The transaction to be commit.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.complete(com.azure.messaging.servicebus.ServiceBusReceivedMessage)
  id: complete(com.azure.messaging.servicebus.ServiceBusReceivedMessage)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: complete(ServiceBusReceivedMessage message)
  nameWithType: ServiceBusReceiverClient.complete(ServiceBusReceivedMessage message)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.complete(ServiceBusReceivedMessage message)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.complete*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Completes a <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref>. This will delete the message from the service.
  syntax:
    content: public void complete(ServiceBusReceivedMessage message)
    parameters:
    - id: message
      type: com.azure.messaging.servicebus.ServiceBusReceivedMessage
      description: The <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref> to perform this operation.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.complete(com.azure.messaging.servicebus.ServiceBusReceivedMessage,com.azure.messaging.servicebus.models.CompleteOptions)
  id: complete(com.azure.messaging.servicebus.ServiceBusReceivedMessage,com.azure.messaging.servicebus.models.CompleteOptions)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: complete(ServiceBusReceivedMessage message, CompleteOptions options)
  nameWithType: ServiceBusReceiverClient.complete(ServiceBusReceivedMessage message, CompleteOptions options)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.complete(ServiceBusReceivedMessage message, CompleteOptions options)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.complete*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Completes a <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref>. This will delete the message from the service.
  syntax:
    content: public void complete(ServiceBusReceivedMessage message, CompleteOptions options)
    parameters:
    - id: message
      type: com.azure.messaging.servicebus.ServiceBusReceivedMessage
      description: The <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref> to perform this operation.
    - id: options
      type: com.azure.messaging.servicebus.models.CompleteOptions
      description: Options used to complete the message.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.createTransaction()
  id: createTransaction()
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: createTransaction()
  nameWithType: ServiceBusReceiverClient.createTransaction()
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.createTransaction()
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.createTransaction*
  type: Method
  package: com.azure.messaging.servicebus
  summary: "Starts a new transaction on Service Bus. The <xref uid=\"com.azure.messaging.servicebus.ServiceBusTransactionContext\" data-throw-if-not-resolved=\"false\">ServiceBusTransactionContext</xref> should be passed along to all operations that need to be in this transaction.\n\n**Creating and using a transaction**\n\n```java\nServiceBusTransactionContext transaction = receiver.createTransaction();\n \n // Process messages and associate operations with the transaction.\n ServiceBusReceivedMessage deferredMessage = receiver.receiveDeferredMessage(sequenceNumber);\n receiver.complete(deferredMessage, new CompleteOptions().setTransactionContext(transaction));\n receiver.abandon(receivedMessage, new AbandonOptions().setTransactionContext(transaction));\n receiver.commitTransaction(transaction);\n```"
  syntax:
    content: public ServiceBusTransactionContext createTransaction()
    return:
      type: com.azure.messaging.servicebus.ServiceBusTransactionContext
      description: A new <xref uid="com.azure.messaging.servicebus.ServiceBusTransactionContext" data-throw-if-not-resolved="false">ServiceBusTransactionContext</xref>.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(com.azure.messaging.servicebus.ServiceBusReceivedMessage)
  id: deadLetter(com.azure.messaging.servicebus.ServiceBusReceivedMessage)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: deadLetter(ServiceBusReceivedMessage message)
  nameWithType: ServiceBusReceiverClient.deadLetter(ServiceBusReceivedMessage message)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(ServiceBusReceivedMessage message)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Moves a <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref> to the dead-letter sub-queue.
  syntax:
    content: public void deadLetter(ServiceBusReceivedMessage message)
    parameters:
    - id: message
      type: com.azure.messaging.servicebus.ServiceBusReceivedMessage
      description: The <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref> to perform this operation.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(com.azure.messaging.servicebus.ServiceBusReceivedMessage,com.azure.messaging.servicebus.models.DeadLetterOptions)
  id: deadLetter(com.azure.messaging.servicebus.ServiceBusReceivedMessage,com.azure.messaging.servicebus.models.DeadLetterOptions)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: deadLetter(ServiceBusReceivedMessage message, DeadLetterOptions options)
  nameWithType: ServiceBusReceiverClient.deadLetter(ServiceBusReceivedMessage message, DeadLetterOptions options)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter(ServiceBusReceivedMessage message, DeadLetterOptions options)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Moves a <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref> to the dead-letter sub-queue with dead-letter reason, error description, and/or modified properties.
  syntax:
    content: public void deadLetter(ServiceBusReceivedMessage message, DeadLetterOptions options)
    parameters:
    - id: message
      type: com.azure.messaging.servicebus.ServiceBusReceivedMessage
      description: The <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref> to perform this operation.
    - id: options
      type: com.azure.messaging.servicebus.models.DeadLetterOptions
      description: Options used to dead-letter the message.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(com.azure.messaging.servicebus.ServiceBusReceivedMessage)
  id: defer(com.azure.messaging.servicebus.ServiceBusReceivedMessage)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: defer(ServiceBusReceivedMessage message)
  nameWithType: ServiceBusReceiverClient.defer(ServiceBusReceivedMessage message)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(ServiceBusReceivedMessage message)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Defers a <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref>. This will move message into the deferred subqueue.
  syntax:
    content: public void defer(ServiceBusReceivedMessage message)
    parameters:
    - id: message
      type: com.azure.messaging.servicebus.ServiceBusReceivedMessage
      description: The <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref> to perform this operation.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(com.azure.messaging.servicebus.ServiceBusReceivedMessage,com.azure.messaging.servicebus.models.DeferOptions)
  id: defer(com.azure.messaging.servicebus.ServiceBusReceivedMessage,com.azure.messaging.servicebus.models.DeferOptions)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: defer(ServiceBusReceivedMessage message, DeferOptions options)
  nameWithType: ServiceBusReceiverClient.defer(ServiceBusReceivedMessage message, DeferOptions options)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer(ServiceBusReceivedMessage message, DeferOptions options)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Defers a <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref> using its lock token with modified message property. This will move message into the deferred sub-queue.
  syntax:
    content: public void defer(ServiceBusReceivedMessage message, DeferOptions options)
    parameters:
    - id: message
      type: com.azure.messaging.servicebus.ServiceBusReceivedMessage
      description: The <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref> to perform this operation.
    - id: options
      type: com.azure.messaging.servicebus.models.DeferOptions
      description: Options used to defer the message.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.getEntityPath()
  id: getEntityPath()
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: getEntityPath()
  nameWithType: ServiceBusReceiverClient.getEntityPath()
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.getEntityPath()
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.getEntityPath*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets the Service Bus resource this client interacts with.
  syntax:
    content: public String getEntityPath()
    return:
      type: java.lang.String
      description: The Service Bus resource this client interacts with.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.getFullyQualifiedNamespace()
  id: getFullyQualifiedNamespace()
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: getFullyQualifiedNamespace()
  nameWithType: ServiceBusReceiverClient.getFullyQualifiedNamespace()
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.getFullyQualifiedNamespace()
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.getFullyQualifiedNamespace*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets the fully qualified Service Bus namespace that the connection is associated with. This is likely similar to `{yournamespace}.servicebus.windows.net`.
  syntax:
    content: public String getFullyQualifiedNamespace()
    return:
      type: java.lang.String
      description: The fully qualified Service Bus namespace that the connection is associated with.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.getSessionState()
  id: getSessionState()
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: getSessionState()
  nameWithType: ServiceBusReceiverClient.getSessionState()
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.getSessionState()
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.getSessionState*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets the state of the session if this receiver is a session receiver.
  syntax:
    content: public byte[] getSessionState()
    return:
      type: byte[]
      description: The session state or null if there is no state set for the session.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekMessage()
  id: peekMessage()
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: peekMessage()
  nameWithType: ServiceBusReceiverClient.peekMessage()
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekMessage()
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekMessage*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Reads the next active message without changing the state of the receiver or the message source. The first call to `peekMessage()` fetches the first active message for this receiver. Each subsequent call fetches the subsequent message in the entity.
  syntax:
    content: public ServiceBusReceivedMessage peekMessage()
    return:
      type: com.azure.messaging.servicebus.ServiceBusReceivedMessage
      description: A peeked <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref>.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekMessage(long)
  id: peekMessage(long)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: peekMessage(long sequenceNumber)
  nameWithType: ServiceBusReceiverClient.peekMessage(long sequenceNumber)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekMessage(long sequenceNumber)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekMessage*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Starting from the given sequence number, reads next the active message without changing the state of the receiver or the message source.
  syntax:
    content: public ServiceBusReceivedMessage peekMessage(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: long
      description: The sequence number from where to read the message.
    return:
      type: com.azure.messaging.servicebus.ServiceBusReceivedMessage
      description: A peeked <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref>.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekMessages(int)
  id: peekMessages(int)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: peekMessages(int maxMessages)
  nameWithType: ServiceBusReceiverClient.peekMessages(int maxMessages)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekMessages(int maxMessages)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekMessages*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Reads the next batch of active messages without changing the state of the receiver or the message source.
  syntax:
    content: public IterableStream<ServiceBusReceivedMessage> peekMessages(int maxMessages)
    parameters:
    - id: maxMessages
      type: int
      description: The maximum number of messages to peek.
    return:
      type: com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessage>
      description: An <xref uid="com.azure.core.util.IterableStream" data-throw-if-not-resolved="false">IterableStream</xref> of <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">messages</xref> that are peeked.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekMessages(int,long)
  id: peekMessages(int,long)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: peekMessages(int maxMessages, long sequenceNumber)
  nameWithType: ServiceBusReceiverClient.peekMessages(int maxMessages, long sequenceNumber)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekMessages(int maxMessages, long sequenceNumber)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekMessages*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Starting from the given sequence number, reads the next batch of active messages without changing the state of the receiver or the message source.
  syntax:
    content: public IterableStream<ServiceBusReceivedMessage> peekMessages(int maxMessages, long sequenceNumber)
    parameters:
    - id: maxMessages
      type: int
      description: The number of messages.
    - id: sequenceNumber
      type: long
      description: The sequence number from where to start reading messages.
    return:
      type: com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessage>
      description: An <xref uid="com.azure.core.util.IterableStream" data-throw-if-not-resolved="false">IterableStream</xref> of <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">messages</xref> peeked.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage(long)
  id: receiveDeferredMessage(long)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: receiveDeferredMessage(long sequenceNumber)
  nameWithType: ServiceBusReceiverClient.receiveDeferredMessage(long sequenceNumber)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage(long sequenceNumber)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Receives a deferred <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">message</xref>. Deferred messages can only be received by using sequence number.
  syntax:
    content: public ServiceBusReceivedMessage receiveDeferredMessage(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: long
      description: >-
        The <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage.getSequenceNumber()" data-throw-if-not-resolved="false">sequence number</xref> of the
             message.
    return:
      type: com.azure.messaging.servicebus.ServiceBusReceivedMessage
      description: A deferred message with the matching <code>sequenceNumber</code>.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch(java.lang.Iterable<java.lang.Long>)
  id: receiveDeferredMessageBatch(java.lang.Iterable<java.lang.Long>)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: receiveDeferredMessageBatch(Iterable<Long> sequenceNumbers)
  nameWithType: ServiceBusReceiverClient.receiveDeferredMessageBatch(Iterable<Long> sequenceNumbers)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch(Iterable<Long> sequenceNumbers)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Receives a batch of deferred <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">messages</xref>. Deferred messages can only be received by using sequence number.
  syntax:
    content: public IterableStream<ServiceBusReceivedMessage> receiveDeferredMessageBatch(Iterable<Long> sequenceNumbers)
    parameters:
    - id: sequenceNumbers
      type: java.lang.Iterable<java.lang.Long>
      description: The sequence numbers of the deferred messages.
    return:
      type: com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessage>
      description: An <xref uid="com.azure.core.util.IterableStream" data-throw-if-not-resolved="false">IterableStream</xref> of deferred <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">messages</xref>.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveMessages(int)
  id: receiveMessages(int)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: receiveMessages(int maxMessages)
  nameWithType: ServiceBusReceiverClient.receiveMessages(int maxMessages)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveMessages(int maxMessages)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveMessages*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Receives an iterable stream of <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">messages</xref> from the Service Bus entity. The receive operation will wait for a default 1 minute for receiving a message before it times out. You can it override by using <xref uid="com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveMessages(int,java.time.Duration)" data-throw-if-not-resolved="false">#receiveMessages(int, Duration)</xref>.
  syntax:
    content: public IterableStream<ServiceBusReceivedMessage> receiveMessages(int maxMessages)
    parameters:
    - id: maxMessages
      type: int
      description: The maximum number of messages to receive.
    return:
      type: com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessage>
      description: An <xref uid="com.azure.core.util.IterableStream" data-throw-if-not-resolved="false">IterableStream</xref> of at most <code>maxMessages</code> messages from the Service Bus entity.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveMessages(int,java.time.Duration)
  id: receiveMessages(int,java.time.Duration)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: receiveMessages(int maxMessages, Duration maxWaitTime)
  nameWithType: ServiceBusReceiverClient.receiveMessages(int maxMessages, Duration maxWaitTime)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveMessages(int maxMessages, Duration maxWaitTime)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveMessages*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Receives an iterable stream of <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">messages</xref> from the Service Bus entity. The default receive mode is <xref uid="com.azure.messaging.servicebus.models.ServiceBusReceiveMode.PEEK_LOCK" data-throw-if-not-resolved="false">ServiceBusReceiveMode#PEEK_LOCK</xref> unless it is changed during creation of <xref uid="com.azure.messaging.servicebus.ServiceBusReceiverClient" data-throw-if-not-resolved="false">ServiceBusReceiverClient</xref> using <xref uid="" data-throw-if-not-resolved="false">ServiceBusReceiverClientBuilder#receiveMode(ServiceBusReceiveMode)</xref>.
  syntax:
    content: public IterableStream<ServiceBusReceivedMessage> receiveMessages(int maxMessages, Duration maxWaitTime)
    parameters:
    - id: maxMessages
      type: int
      description: The maximum number of messages to receive.
    - id: maxWaitTime
      type: java.time.Duration
      description: The time the client waits for receiving a message before it times out.
    return:
      type: com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessage>
      description: An <xref uid="com.azure.core.util.IterableStream" data-throw-if-not-resolved="false">IterableStream</xref> of at most <code>maxMessages</code> messages from the Service Bus entity.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock(com.azure.messaging.servicebus.ServiceBusReceivedMessage)
  id: renewMessageLock(com.azure.messaging.servicebus.ServiceBusReceivedMessage)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: renewMessageLock(ServiceBusReceivedMessage message)
  nameWithType: ServiceBusReceiverClient.renewMessageLock(ServiceBusReceivedMessage message)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock(ServiceBusReceivedMessage message)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Renews the lock on the specified message. The lock will be renewed based on the setting specified on the entity. When a message is received in <xref uid="com.azure.messaging.servicebus.models.ServiceBusReceiveMode.PEEK_LOCK" data-throw-if-not-resolved="false">ServiceBusReceiveMode#PEEK_LOCK</xref> mode, the message is locked on the server for this receiver instance for a duration as specified during the Queue creation (LockDuration). If processing of the message requires longer than this duration, the lock needs to be renewed. For each renewal, the lock is reset to the entity's LockDuration value.
  syntax:
    content: public OffsetDateTime renewMessageLock(ServiceBusReceivedMessage message)
    parameters:
    - id: message
      type: com.azure.messaging.servicebus.ServiceBusReceivedMessage
      description: The <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref> to perform lock renewal.
    return:
      type: java.time.OffsetDateTime
      description: The new expiration time for the message.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock(com.azure.messaging.servicebus.ServiceBusReceivedMessage,java.time.Duration,java.util.function.Consumer<java.lang.Throwable>)
  id: renewMessageLock(com.azure.messaging.servicebus.ServiceBusReceivedMessage,java.time.Duration,java.util.function.Consumer<java.lang.Throwable>)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: renewMessageLock(ServiceBusReceivedMessage message, Duration maxLockRenewalDuration, Consumer<Throwable> onError)
  nameWithType: ServiceBusReceiverClient.renewMessageLock(ServiceBusReceivedMessage message, Duration maxLockRenewalDuration, Consumer<Throwable> onError)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock(ServiceBusReceivedMessage message, Duration maxLockRenewalDuration, Consumer<Throwable> onError)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Starts the auto lock renewal for a message with the given lock.
  syntax:
    content: public void renewMessageLock(ServiceBusReceivedMessage message, Duration maxLockRenewalDuration, Consumer<Throwable> onError)
    parameters:
    - id: message
      type: com.azure.messaging.servicebus.ServiceBusReceivedMessage
      description: The <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref> to perform auto-lock renewal.
    - id: maxLockRenewalDuration
      type: java.time.Duration
      description: Maximum duration to keep renewing the lock token.
    - id: onError
      type: java.util.function.Consumer<java.lang.Throwable>
      description: A function to call when an error occurs during lock renewal.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewSessionLock()
  id: renewSessionLock()
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: renewSessionLock()
  nameWithType: ServiceBusReceiverClient.renewSessionLock()
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewSessionLock()
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewSessionLock*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Sets the state of the session if this receiver is a session receiver.
  syntax:
    content: public OffsetDateTime renewSessionLock()
    return:
      type: java.time.OffsetDateTime
      description: The next expiration time for the session lock.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewSessionLock(java.time.Duration,java.util.function.Consumer<java.lang.Throwable>)
  id: renewSessionLock(java.time.Duration,java.util.function.Consumer<java.lang.Throwable>)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: renewSessionLock(Duration maxLockRenewalDuration, Consumer<Throwable> onError)
  nameWithType: ServiceBusReceiverClient.renewSessionLock(Duration maxLockRenewalDuration, Consumer<Throwable> onError)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewSessionLock(Duration maxLockRenewalDuration, Consumer<Throwable> onError)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewSessionLock*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Starts the auto lock renewal for the session that this receiver works for.
  syntax:
    content: public void renewSessionLock(Duration maxLockRenewalDuration, Consumer<Throwable> onError)
    parameters:
    - id: maxLockRenewalDuration
      type: java.time.Duration
      description: Maximum duration to keep renewing the session.
    - id: onError
      type: java.util.function.Consumer<java.lang.Throwable>
      description: A function to call when an error occurs during lock renewal.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.rollbackTransaction(com.azure.messaging.servicebus.ServiceBusTransactionContext)
  id: rollbackTransaction(com.azure.messaging.servicebus.ServiceBusTransactionContext)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: rollbackTransaction(ServiceBusTransactionContext transactionContext)
  nameWithType: ServiceBusReceiverClient.rollbackTransaction(ServiceBusTransactionContext transactionContext)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.rollbackTransaction(ServiceBusTransactionContext transactionContext)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.rollbackTransaction*
  type: Method
  package: com.azure.messaging.servicebus
  summary: "Rollbacks the transaction given and all operations associated with it.\n\n**Creating and using a transaction**\n\n```java\nServiceBusTransactionContext transaction = receiver.createTransaction();\n \n // Process messages and associate operations with the transaction.\n ServiceBusReceivedMessage deferredMessage = receiver.receiveDeferredMessage(sequenceNumber);\n receiver.complete(deferredMessage, new CompleteOptions().setTransactionContext(transaction));\n receiver.abandon(receivedMessage, new AbandonOptions().setTransactionContext(transaction));\n receiver.commitTransaction(transaction);\n```"
  syntax:
    content: public void rollbackTransaction(ServiceBusTransactionContext transactionContext)
    parameters:
    - id: transactionContext
      type: com.azure.messaging.servicebus.ServiceBusTransactionContext
      description: The transaction to be rollback.
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.setSessionState(byte[])
  id: setSessionState(byte[])
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.ServiceBusReceiverClient
  langs:
  - java
  name: setSessionState(byte[] sessionState)
  nameWithType: ServiceBusReceiverClient.setSessionState(byte[] sessionState)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.setSessionState(byte[] sessionState)
  overload: com.azure.messaging.servicebus.ServiceBusReceiverClient.setSessionState*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Sets the state of the session if this receiver is a session receiver.
  syntax:
    content: public void setSessionState(byte[] sessionState)
    parameters:
    - id: sessionState
      type: byte[]
      description: State to set on the session.
references:
- uid: com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient
  name: ServiceBusReceiverAsyncClient
  nameWithType: ServiceBusReceiverAsyncClient
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.ServiceBusReceiverClient*
  name: ServiceBusReceiverClient
  nameWithType: ServiceBusReceiverClient.ServiceBusReceiverClient
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.ServiceBusReceiverClient
  package: com.azure.messaging.servicebus
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.getFullyQualifiedNamespace*
  name: getFullyQualifiedNamespace
  nameWithType: ServiceBusReceiverClient.getFullyQualifiedNamespace
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.getFullyQualifiedNamespace
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.getEntityPath*
  name: getEntityPath
  nameWithType: ServiceBusReceiverClient.getEntityPath
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.getEntityPath
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusReceivedMessage
  name: ServiceBusReceivedMessage
  nameWithType: ServiceBusReceivedMessage
  fullName: com.azure.messaging.servicebus.ServiceBusReceivedMessage
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon*
  name: abandon
  nameWithType: ServiceBusReceiverClient.abandon
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.abandon
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.models.AbandonOptions
  name: AbandonOptions
  nameWithType: AbandonOptions
  fullName: com.azure.messaging.servicebus.models.AbandonOptions
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.complete*
  name: complete
  nameWithType: ServiceBusReceiverClient.complete
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.complete
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.models.CompleteOptions
  name: CompleteOptions
  nameWithType: CompleteOptions
  fullName: com.azure.messaging.servicebus.models.CompleteOptions
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer*
  name: defer
  nameWithType: ServiceBusReceiverClient.defer
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.defer
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.models.DeferOptions
  name: DeferOptions
  nameWithType: DeferOptions
  fullName: com.azure.messaging.servicebus.models.DeferOptions
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter*
  name: deadLetter
  nameWithType: ServiceBusReceiverClient.deadLetter
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.deadLetter
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.models.DeadLetterOptions
  name: DeadLetterOptions
  nameWithType: DeadLetterOptions
  fullName: com.azure.messaging.servicebus.models.DeadLetterOptions
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.getSessionState*
  name: getSessionState
  nameWithType: ServiceBusReceiverClient.getSessionState
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.getSessionState
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekMessage*
  name: peekMessage
  nameWithType: ServiceBusReceiverClient.peekMessage
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekMessage
  package: com.azure.messaging.servicebus
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.core.util.IterableStream<com.azure.messaging.servicebus.ServiceBusReceivedMessage>
  spec.java:
  - uid: com.azure.core.util.IterableStream
    name: IterableStream
    fullName: com.azure.core.util.IterableStream
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.ServiceBusReceivedMessage
    name: ServiceBusReceivedMessage
    fullName: com.azure.messaging.servicebus.ServiceBusReceivedMessage
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekMessages*
  name: peekMessages
  nameWithType: ServiceBusReceiverClient.peekMessages
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.peekMessages
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveMessages*
  name: receiveMessages
  nameWithType: ServiceBusReceiverClient.receiveMessages
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveMessages
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage*
  name: receiveDeferredMessage
  nameWithType: ServiceBusReceiverClient.receiveDeferredMessage
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessage
  package: com.azure.messaging.servicebus
- uid: java.lang.Iterable<java.lang.Long>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch*
  name: receiveDeferredMessageBatch
  nameWithType: ServiceBusReceiverClient.receiveDeferredMessageBatch
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.receiveDeferredMessageBatch
  package: com.azure.messaging.servicebus
- uid: java.time.OffsetDateTime
  spec.java:
  - uid: java.time.OffsetDateTime
    name: OffsetDateTime
    fullName: java.time.OffsetDateTime
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock*
  name: renewMessageLock
  nameWithType: ServiceBusReceiverClient.renewMessageLock
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewMessageLock
  package: com.azure.messaging.servicebus
- uid: java.util.function.Consumer<java.lang.Throwable>
  spec.java:
  - uid: java.util.function.Consumer
    name: Consumer
    fullName: java.util.function.Consumer
  - name: <
    fullName: <
  - uid: java.lang.Throwable
    name: Throwable
    fullName: java.lang.Throwable
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewSessionLock*
  name: renewSessionLock
  nameWithType: ServiceBusReceiverClient.renewSessionLock
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.renewSessionLock
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.setSessionState*
  name: setSessionState
  nameWithType: ServiceBusReceiverClient.setSessionState
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.setSessionState
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusTransactionContext
  name: ServiceBusTransactionContext
  nameWithType: ServiceBusTransactionContext
  fullName: com.azure.messaging.servicebus.ServiceBusTransactionContext
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.createTransaction*
  name: createTransaction
  nameWithType: ServiceBusReceiverClient.createTransaction
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.createTransaction
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.commitTransaction*
  name: commitTransaction
  nameWithType: ServiceBusReceiverClient.commitTransaction
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.commitTransaction
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.rollbackTransaction*
  name: rollbackTransaction
  nameWithType: ServiceBusReceiverClient.rollbackTransaction
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.rollbackTransaction
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusReceiverClient.close*
  name: close
  nameWithType: ServiceBusReceiverClient.close
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverClient.close
  package: com.azure.messaging.servicebus
- uid: java.lang.AutoCloseable
  name: AutoCloseable
  nameWithType: AutoCloseable
  fullName: java.lang.AutoCloseable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.core.util.IterableStream
  name: IterableStream
  nameWithType: IterableStream
  fullName: com.azure.core.util.IterableStream
- uid: java.lang.Long
  name: Long
  nameWithType: Long
  fullName: java.lang.Long
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.function.Consumer
  name: Consumer
  nameWithType: Consumer
  fullName: java.util.function.Consumer
- uid: java.lang.Throwable
  name: Throwable
  nameWithType: Throwable
  fullName: java.lang.Throwable
