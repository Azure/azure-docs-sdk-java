### YamlMime:ManagedReference
items:
- uid: system.fabric.StatefulServicePartition
  id: StatefulServicePartition
  parent: system.fabric
  children:
  - system.fabric.StatefulServicePartition.createReplicator(StateProvider,ReplicatorSettings)
  - system.fabric.StatefulServicePartition.getReadStatus()
  - system.fabric.StatefulServicePartition.getwriteStatus()
  - system.fabric.StatefulServicePartition.reportReplicaHealth(HealthInformation)
  href: system.fabric.StatefulServicePartition.yml
  langs:
  - java
  name: StatefulServicePartition
  nameWithType: StatefulServicePartition
  fullName: system.fabric.StatefulServicePartition
  type: Interface
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
    startLine: 5
  package: system.fabric
  syntax:
    content: public interface StatefulServicePartition extends ServicePartition
  inheritedMembers:
  - system.fabric.ServicePartition.getPartitionInfo()
  - system.fabric.ServicePartition.reportFault(FaultType)
  - system.fabric.ServicePartition.reportLoad(Collection<LoadMetric>)
  - system.fabric.ServicePartition.reportMoveCost(MoveCost)
  - system.fabric.ServicePartition.reportPartitionHealth(HealthInformation)
- uid: system.fabric.StatefulServicePartition.createReplicator(StateProvider,ReplicatorSettings)
  id: createReplicator(StateProvider,ReplicatorSettings)
  parent: system.fabric.StatefulServicePartition
  href: system.fabric.StatefulServicePartition.yml
  langs:
  - java
  name: createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)
  nameWithType: StatefulServicePartition.createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)
  fullName: system.fabric.StatefulServicePartition.createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)
  overload: system.fabric.StatefulServicePartition.createReplicator*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
    startLine: 51
  package: system.fabric
  summary: "<p>Creates a <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref> with the specified settings and returns it to the replica.</p>\r\n<p>\r\n  <b>Remarks:</b>This method should be used to create a <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref> to service as the <xref uid=\"system.fabric.StateReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateReplicator\"></xref> for a stateful service that implements <xref uid=\"system.fabric.StateProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateProvider\"></xref>. </p>"
  syntax:
    content: public FabricReplicator createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)
    parameters:
    - id: stateProvider
      type: system.fabric.StateProvider
      description: <p>The <xref uid="system.fabric.StateProvider" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StateProvider"></xref> with which the returned <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref> should be associated. This is often the same object that implements <xref uid="system.fabric.StatefulServiceReplica" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatefulServiceReplica"></xref>, but certain services might be factored differently. </p>
    - id: replicatorSettings
      type: system.fabric.ReplicatorSettings
      description: >-
        <p>

          <xref uid="system.fabric.ReplicatorSettings" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ReplicatorSettings"></xref> with which the returned <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref> should be configured. </p>
    return:
      type: system.fabric.FabricReplicator
      description: <p>Returns <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="FabricReplicator"></xref>. </p>
- uid: system.fabric.StatefulServicePartition.getReadStatus()
  id: getReadStatus()
  parent: system.fabric.StatefulServicePartition
  href: system.fabric.StatefulServicePartition.yml
  langs:
  - java
  name: getReadStatus()
  nameWithType: StatefulServicePartition.getReadStatus()
  fullName: system.fabric.StatefulServicePartition.getReadStatus()
  overload: system.fabric.StatefulServicePartition.getReadStatus*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
    startLine: 17
  package: system.fabric
  summary: "<p>Used to check the readiness of the replica in regard to read operations.</p>\r\n<p>\r\n  <b>Remarks:</b>The readStatus should be checked before the replica is servicing a customer request that is a read operation. </p>"
  syntax:
    content: public PartitionAccessStatus getReadStatus()
    return:
      type: system.fabric.PartitionAccessStatus
      description: >-
        <p>

          <xref uid="system.fabric.PartitionAccessStatus" data-throw-if-not-resolved="false" data-raw-source="system.fabric.PartitionAccessStatus"></xref>. </p>
  exceptions:
  - type: 4b752876
    description: <p>This indicates that the partition object is closed. The replica/replicator/instance has either been closed or is about to be closed. </p>
- uid: system.fabric.StatefulServicePartition.getwriteStatus()
  id: getwriteStatus()
  parent: system.fabric.StatefulServicePartition
  href: system.fabric.StatefulServicePartition.yml
  langs:
  - java
  name: getwriteStatus()
  nameWithType: StatefulServicePartition.getwriteStatus()
  fullName: system.fabric.StatefulServicePartition.getwriteStatus()
  overload: system.fabric.StatefulServicePartition.getwriteStatus*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
    startLine: 30
  package: system.fabric
  summary: "<p>Used to check the readiness of the partition in regard to write operations.</p>\r\n<p>\r\n  <b>Remarks:</b>The WriteStatus should be checked before the replica services a customer request that is a write operation. </p>"
  syntax:
    content: public PartitionAccessStatus getwriteStatus()
    return:
      type: system.fabric.PartitionAccessStatus
      description: >-
        <p>

          <xref uid="system.fabric.PartitionAccessStatus" data-throw-if-not-resolved="false" data-raw-source="system.fabric.PartitionAccessStatus"></xref>. </p>
  exceptions:
  - type: 4b752876
    description: <p>This indicates that the partition object is closed. The replica/replicator/instance has either been closed or is about to be closed. </p>
- uid: system.fabric.StatefulServicePartition.reportReplicaHealth(HealthInformation)
  id: reportReplicaHealth(HealthInformation)
  parent: system.fabric.StatefulServicePartition
  href: system.fabric.StatefulServicePartition.yml
  langs:
  - java
  name: reportReplicaHealth(HealthInformation healthInfo)
  nameWithType: StatefulServicePartition.reportReplicaHealth(HealthInformation healthInfo)
  fullName: system.fabric.StatefulServicePartition.reportReplicaHealth(HealthInformation healthInfo)
  overload: system.fabric.StatefulServicePartition.reportReplicaHealth*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/StatefulServicePartition.java
    startLine: 59
  package: system.fabric
  summary: "<p>Reports health of the current replica associated with this partition.</p>\r\n<p></p>"
  syntax:
    content: public void reportReplicaHealth(HealthInformation healthInfo)
    parameters:
    - id: healthInfo
      type: system.fabric.health.HealthInformation
      description: <p>Health information that is to be reported. </p>
references:
- uid: 4b752876
  spec.java:
  - name: system.fabric.exception.FabricObjectClosedException
    fullName: system.fabric.exception.FabricObjectClosedException
- uid: system.fabric.StatefulServicePartition.getReadStatus*
  name: getReadStatus
  nameWithType: StatefulServicePartition.getReadStatus
  fullName: system.fabric.StatefulServicePartition.getReadStatus
  package: system.fabric
- uid: system.fabric.StatefulServicePartition.getwriteStatus*
  name: getwriteStatus
  nameWithType: StatefulServicePartition.getwriteStatus
  fullName: system.fabric.StatefulServicePartition.getwriteStatus
  package: system.fabric
- uid: system.fabric.StatefulServicePartition.createReplicator*
  name: createReplicator
  nameWithType: StatefulServicePartition.createReplicator
  fullName: system.fabric.StatefulServicePartition.createReplicator
  package: system.fabric
- uid: system.fabric.StatefulServicePartition.reportReplicaHealth*
  name: reportReplicaHealth
  nameWithType: StatefulServicePartition.reportReplicaHealth
  fullName: system.fabric.StatefulServicePartition.reportReplicaHealth
  package: system.fabric
- uid: system.fabric.ServicePartition.getPartitionInfo()
  parent: system.fabric.ServicePartition
  href: system.fabric.ServicePartition.yml
  name: getPartitionInfo()
  nameWithType: ServicePartition.getPartitionInfo()
  fullName: system.fabric.ServicePartition.getPartitionInfo()
  type: Method
  summary: "<p>Provides access to the <xref uid=\"system.fabric.ServicePartitionInformation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.ServicePartitionInformation\"></xref> of the service, which contains the partition type and ID.</p>\r\n<p></p>"
  syntax:
    content: public ServicePartitionInformation getPartitionInfo()
    return:
      type: system.fabric.ServicePartitionInformation
      description: <p>Returns <xref uid="system.fabric.ServicePartitionInformation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ServicePartitionInformation"></xref>. </p>
- uid: system.fabric.ServicePartition.reportFault(FaultType)
  parent: system.fabric.ServicePartition
  href: system.fabric.ServicePartition.yml
  name: reportFault(FaultType faultType)
  nameWithType: ServicePartition.reportFault(FaultType faultType)
  fullName: system.fabric.ServicePartition.reportFault(FaultType faultType)
  type: Method
  summary: "<p>Reports the load for a set of load balancing metrics. The load can be reported at any time via the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref> of <xref uid=\"system.fabric.LoadMetric\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LoadMetric\"></xref> method and provides one or more properties of the <xref uid=\"system.fabric.LoadMetric\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.LoadMetric\"></xref> method.</p>\r\n<p>\r\n  <b>Remarks:</b>A fault is typically reported when the service code encounters some issue from which it cannot recover. </p>"
  syntax:
    content: public void reportFault(FaultType faultType)
    parameters:
    - id: faultType
      type: system.fabric.FaultType
      description: <p>The <xref uid="system.fabric.LoadMetric" data-throw-if-not-resolved="false" data-raw-source="system.fabric.LoadMetric"></xref> that the service has encountered. </p>
- uid: system.fabric.ServicePartition.reportLoad(Collection<LoadMetric>)
  parent: system.fabric.ServicePartition
  href: system.fabric.ServicePartition.yml
  name: reportLoad(Collection<LoadMetric> metrics)
  nameWithType: ServicePartition.reportLoad(Collection<LoadMetric> metrics)
  fullName: system.fabric.ServicePartition.reportLoad(Collection<LoadMetric> metrics)
  type: Method
  summary: "<p>Reports the load for a set of load balancing metrics. The load can be reported at any time via the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref> of <xref uid=\"system.fabric.LoadMetric\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LoadMetric\"></xref> method and provides one or more properties of the <xref uid=\"system.fabric.LoadMetric\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.LoadMetric\"></xref> method.</p>\r\n<p>\r\n  <b>Remarks:</b>The reported metrics should correspond to those that are provided in the service load metric description as a part of the service description that is used to create the service. Load metrics that are not present in the description are ignored. Reporting custom metrics allows Service Fabric to balance services that are based on additional custom information. </p>"
  syntax:
    content: public void reportLoad(Collection<LoadMetric> metrics)
    parameters:
    - id: metrics
      type: 12ebb11asystem.fabric.LoadMetrica08ddfce
      description: <p>collection of <xref uid="system.fabric.LoadMetric" data-throw-if-not-resolved="false" data-raw-source="system.fabric.LoadMetric"></xref> to report the load for. </p>
- uid: system.fabric.ServicePartition.reportMoveCost(MoveCost)
  parent: system.fabric.ServicePartition
  href: system.fabric.ServicePartition.yml
  name: reportMoveCost(MoveCost moveCost)
  nameWithType: ServicePartition.reportMoveCost(MoveCost moveCost)
  fullName: system.fabric.ServicePartition.reportMoveCost(MoveCost moveCost)
  type: Method
  summary: "<p>Reports the move cost for a replica.</p>\r\n<p>\r\n  <b>Remarks:</b>Services can report move cost of a replica using this method. While the Service Fabric Resource Balances searches for the best balance in the cluster, it examines both load information and move cost of each replica. Resource balances will prefer to move replicas with lower cost in order to achieve balance. </p>"
  syntax:
    content: public void reportMoveCost(MoveCost moveCost)
    parameters:
    - id: moveCost
      type: system.fabric.MoveCost
      description: <p>The reported <xref uid="system.fabric.MoveCost" data-throw-if-not-resolved="false" data-raw-source="system.fabric.MoveCost"></xref>. </p>
- uid: system.fabric.ServicePartition.reportPartitionHealth(HealthInformation)
  parent: system.fabric.ServicePartition
  href: system.fabric.ServicePartition.yml
  name: reportPartitionHealth(HealthInformation healthInfo)
  nameWithType: ServicePartition.reportPartitionHealth(HealthInformation healthInfo)
  fullName: system.fabric.ServicePartition.reportPartitionHealth(HealthInformation healthInfo)
  type: Method
  summary: "<p>Reports current partition health.</p>\r\n<p></p>"
  syntax:
    content: public void reportPartitionHealth(HealthInformation healthInfo)
    parameters:
    - id: healthInfo
      type: system.fabric.health.HealthInformation
      description: <p>is <xref uid="" data-throw-if-not-resolved="false" data-raw-source="HealthInformation"></xref></p>
- uid: system.fabric.ServicePartition
  parent: system.fabric
  href: system.fabric.ServicePartition.yml
  name: ServicePartition
  nameWithType: ServicePartition
  fullName: system.fabric.ServicePartition
  type: Interface
  summary: "<p>Provides information to the service about the partition to which it belongs and provides methods for the service to interact with the system during runtime. </p>"
  syntax:
    content: public interface ServicePartition
- uid: system.fabric.PartitionAccessStatus
  parent: system.fabric
  href: system.fabric.PartitionAccessStatus.yml
  name: PartitionAccessStatus
  nameWithType: PartitionAccessStatus
  fullName: system.fabric.PartitionAccessStatus
  type: Enum
  summary: "<p>Enumerates the access status of the partition. </p>\r\n<p>\r\n  <b>Remarks:</b>\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.PartitionAccessStatus\"></xref> is used to check that a read or write operation is allowed. When service replicas handle a client request, they should verify that the system is in a state that allows processing. By checking the <xref uid=\"system.fabric.StatefulServicePartition.getReadStatus()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StatefulServicePartition#getReadStatus()\"></xref> or <xref uid=\"system.fabric.StatefulServicePartition.getwriteStatus()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StatefulServicePartition#getwriteStatus()\"></xref> as appropriate, the replica can be notified of conditions that prevent correct operation. Note that write operations might still see an exception from the replicator for one of these conditions, because the condition might change between the <xref uid=\"system.fabric.StatefulServicePartition.getwriteStatus()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StatefulServicePartition#getwriteStatus()\"></xref> check and the call to <xref uid=\"system.fabric.StateReplicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateReplicator#replicateAsync(system.fabric.OperationData,system.fabric.SequenceNumber, system.fabric.CancellationToken)\"></xref>. </p>"
  syntax:
    content: public enum PartitionAccessStatus
- uid: system.fabric.FabricReplicator
  parent: system.fabric
  href: system.fabric.FabricReplicator.yml
  name: FabricReplicator
  nameWithType: FabricReplicator
  fullName: system.fabric.FabricReplicator
  type: Class
  summary: "<p>Replicates state for high availability and reliability. </p>\r\n<p>\r\n  <b>Remarks:</b>Provides the default implementation of the <xref uid=\"system.fabric.StateReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateReplicator\"></xref>, <xref uid=\"system.fabric.Replicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Replicator\"></xref>, and <xref uid=\"system.fabric.PrimaryReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.PrimaryReplicator\"></xref> interfaces, which user services can use, along with their implementation of the <xref uid=\"system.fabric.StateProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateProvider\"></xref> interface. An instance of the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref> class is obtained via the <xref uid=\"system.fabric.StatefulServicePartition.createReplicator(StateProvider,ReplicatorSettings)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StatefulServicePartition#createReplicator( system.fabric.StateProvider, system.fabric.ReplicatorSettings)\"></xref> method, which can be cast to <xref uid=\"system.fabric.StateReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateReplicator\"></xref> for use. </p>"
  syntax:
    content: public class FabricReplicator implements Replicator
- uid: system.fabric.StateProvider
  parent: system.fabric
  href: system.fabric.StateProvider.yml
  name: StateProvider
  nameWithType: StateProvider
  fullName: system.fabric.StateProvider
  type: Interface
  summary: "<p>Defines the behavior that a service must implement to interact with the <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FabricReplicator\"></xref>. </p>"
  syntax:
    content: public interface StateProvider
- uid: system.fabric.ReplicatorSettings
  parent: system.fabric
  href: system.fabric.ReplicatorSettings.yml
  name: ReplicatorSettings
  nameWithType: ReplicatorSettings
  fullName: system.fabric.ReplicatorSettings
  type: Class
  summary: "<p>Allows a stateful replica to configure the <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref> when creating it <xref uid=\"system.fabric.StatefulServicePartition.createReplicator(StateProvider,ReplicatorSettings)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StatefulServicePartition#createReplicator(system.fabric.StateProvider,system.fabric.ReplicatorSettings)\"></xref></p>"
  syntax:
    content: public class ReplicatorSettings
- uid: system.fabric.StatefulServiceReplica
  parent: system.fabric
  href: system.fabric.StatefulServiceReplica.yml
  name: StatefulServiceReplica
  nameWithType: StatefulServiceReplica
  fullName: system.fabric.StatefulServiceReplica
  type: Interface
  summary: "<p>Defines behavior that governs the lifecycle of a replica, such as startup, initialization, role changes, and shutdown. </p>\r\n<p>\r\n  <b>Remarks:</b>Stateful service types must implement this interface. The logic of a stateful service type includes behavior that is invoked on Primary replicas and behavior that is invoked on Secondary replicas. If the service author wants to make use of the provided <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref>, then the service must also implement <xref uid=\"system.fabric.StateProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateProvider\"></xref> to use the implementation of <xref uid=\"system.fabric.StateReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateReplicator\"></xref> that is provided by <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref></p>"
  syntax:
    content: public interface StatefulServiceReplica
- uid: system.fabric.StateReplicator
  parent: system.fabric
  href: system.fabric.StateReplicator.yml
  name: StateReplicator
  nameWithType: StateReplicator
  fullName: system.fabric.StateReplicator
  type: Interface
  summary: "<p>Exposes replication related functions of the <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FabricReplicator\"></xref> class that are used by <xref uid=\"system.fabric.StateProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StateProvider\"></xref> to replicate state to ensure high availability. </p>"
  syntax:
    content: public interface StateReplicator
- uid: system.fabric.health.HealthInformation
  parent: system.fabric.health
  href: system.fabric.health.HealthInformation.yml
  name: HealthInformation
  nameWithType: HealthInformation
  fullName: system.fabric.health.HealthInformation
  type: Class
  summary: "<p>Contains the health information about the entity. This information is included in the health report. It is also provided as part of the health event. </p>"
  syntax:
    content: public class HealthInformation
