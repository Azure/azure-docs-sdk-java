### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
  id: "DataLakeRequestConditions"
  parent: "com.azure.storage.file.datalake.models"
  children:
  - "com.azure.storage.file.datalake.models.DataLakeRequestConditions.DataLakeRequestConditions()"
  - "com.azure.storage.file.datalake.models.DataLakeRequestConditions.getLeaseId()"
  - "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfMatch(java.lang.String)"
  - "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfModifiedSince(java.time.OffsetDateTime)"
  - "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfNoneMatch(java.lang.String)"
  - "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfUnmodifiedSince(java.time.OffsetDateTime)"
  - "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setLeaseId(java.lang.String)"
  langs:
  - "java"
  name: "DataLakeRequestConditions"
  nameWithType: "DataLakeRequestConditions"
  fullName: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
  type: "Class"
  package: "com.azure.storage.file.datalake.models"
  summary: "This class contains values which will restrict the successful operation of a variety of requests to the conditions present. These conditions are entirely optional. The entire object or any of its properties may be set to null when passed to a method to indicate that those conditions are not desired. Please refer to the type of each field for more information on those particular access conditions."
  syntax:
    content: "public class DataLakeRequestConditions extends RequestConditions"
  inheritance:
  - "java.lang.Object"
  - "com.azure.core.http.MatchConditions"
  - "com.azure.core.http.RequestConditions"
  inheritedMembers:
  - "com.azure.core.http.MatchConditions.getIfMatch()"
  - "com.azure.core.http.MatchConditions.getIfNoneMatch()"
  - "com.azure.core.http.RequestConditions.getIfModifiedSince()"
  - "com.azure.core.http.RequestConditions.getIfUnmodifiedSince()"
  - "com.azure.core.http.RequestConditions.setIfMatch(java.lang.String)"
  - "com.azure.core.http.RequestConditions.setIfModifiedSince(java.time.OffsetDateTime)"
  - "com.azure.core.http.RequestConditions.setIfNoneMatch(java.lang.String)"
  - "com.azure.core.http.RequestConditions.setIfUnmodifiedSince(java.time.OffsetDateTime)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.DataLakeRequestConditions()"
  id: "DataLakeRequestConditions()"
  parent: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
  langs:
  - "java"
  name: "DataLakeRequestConditions()"
  nameWithType: "DataLakeRequestConditions.DataLakeRequestConditions()"
  fullName: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.DataLakeRequestConditions()"
  overload: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.DataLakeRequestConditions*"
  type: "Constructor"
  package: "com.azure.storage.file.datalake.models"
  syntax:
    content: "public DataLakeRequestConditions()"
- uid: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.getLeaseId()"
  id: "getLeaseId()"
  parent: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
  langs:
  - "java"
  name: "getLeaseId()"
  nameWithType: "DataLakeRequestConditions.getLeaseId()"
  fullName: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.getLeaseId()"
  overload: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.getLeaseId*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Gets the lease ID that blobs and containers must match."
  syntax:
    content: "public String getLeaseId()"
    return:
      type: "java.lang.String"
      description: "The lease ID that blobs and containers must match."
- uid: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfMatch(java.lang.String)"
  id: "setIfMatch(java.lang.String)"
  parent: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
  langs:
  - "java"
  name: "setIfMatch(String ifMatch)"
  nameWithType: "DataLakeRequestConditions.setIfMatch(String ifMatch)"
  fullName: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfMatch(String ifMatch)"
  overload: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfMatch*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Optionally limit requests to resources that match the passed ETag."
  syntax:
    content: "public DataLakeRequestConditions setIfMatch(String ifMatch)"
    parameters:
    - id: "ifMatch"
      type: "java.lang.String"
      description: "ETag that resources must match."
    return:
      type: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
      description: "The updated DataLakeRequestConditions object."
- uid: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfModifiedSince(java.time.OffsetDateTime)"
  id: "setIfModifiedSince(java.time.OffsetDateTime)"
  parent: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
  langs:
  - "java"
  name: "setIfModifiedSince(OffsetDateTime ifModifiedSince)"
  nameWithType: "DataLakeRequestConditions.setIfModifiedSince(OffsetDateTime ifModifiedSince)"
  fullName: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfModifiedSince(OffsetDateTime ifModifiedSince)"
  overload: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfModifiedSince*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Optionally limit requests to resources that have only been modified since the passed <xref uid=\"\" data-throw-if-not-resolved=\"false\">datetime</xref>."
  syntax:
    content: "public DataLakeRequestConditions setIfModifiedSince(OffsetDateTime ifModifiedSince)"
    parameters:
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "The datetime that resources must have been modified since."
    return:
      type: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
      description: "The updated DataLakeRequestConditions object."
- uid: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfNoneMatch(java.lang.String)"
  id: "setIfNoneMatch(java.lang.String)"
  parent: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
  langs:
  - "java"
  name: "setIfNoneMatch(String ifNoneMatch)"
  nameWithType: "DataLakeRequestConditions.setIfNoneMatch(String ifNoneMatch)"
  fullName: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfNoneMatch(String ifNoneMatch)"
  overload: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfNoneMatch*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Optionally limit requests to resources that do not match the passed ETag."
  syntax:
    content: "public DataLakeRequestConditions setIfNoneMatch(String ifNoneMatch)"
    parameters:
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "ETag that resources must not match."
    return:
      type: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
      description: "The updated DataLakeRequestConditions object."
- uid: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfUnmodifiedSince(java.time.OffsetDateTime)"
  id: "setIfUnmodifiedSince(java.time.OffsetDateTime)"
  parent: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
  langs:
  - "java"
  name: "setIfUnmodifiedSince(OffsetDateTime ifUnmodifiedSince)"
  nameWithType: "DataLakeRequestConditions.setIfUnmodifiedSince(OffsetDateTime ifUnmodifiedSince)"
  fullName: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfUnmodifiedSince(OffsetDateTime ifUnmodifiedSince)"
  overload: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfUnmodifiedSince*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Optionally limit requests to resources that have remained unmodified since the passed <xref uid=\"\" data-throw-if-not-resolved=\"false\">datetime</xref>."
  syntax:
    content: "public DataLakeRequestConditions setIfUnmodifiedSince(OffsetDateTime ifUnmodifiedSince)"
    parameters:
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "The datetime that resources must have remained unmodified since."
    return:
      type: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
      description: "The updated DataLakeRequestConditions object."
- uid: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setLeaseId(java.lang.String)"
  id: "setLeaseId(java.lang.String)"
  parent: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
  langs:
  - "java"
  name: "setLeaseId(String leaseId)"
  nameWithType: "DataLakeRequestConditions.setLeaseId(String leaseId)"
  fullName: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setLeaseId(String leaseId)"
  overload: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setLeaseId*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Optionally limits requests to blobs and containers that match the lease ID."
  syntax:
    content: "public DataLakeRequestConditions setLeaseId(String leaseId)"
    parameters:
    - id: "leaseId"
      type: "java.lang.String"
      description: "Lease ID that blobs and containers must match."
    return:
      type: "com.azure.storage.file.datalake.models.DataLakeRequestConditions"
      description: "The updated DataLakeRequestConditions object."
references:
- uid: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.DataLakeRequestConditions*"
  name: "DataLakeRequestConditions"
  nameWithType: "DataLakeRequestConditions.DataLakeRequestConditions"
  fullName: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.DataLakeRequestConditions"
  package: "com.azure.storage.file.datalake.models"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfMatch*"
  name: "setIfMatch"
  nameWithType: "DataLakeRequestConditions.setIfMatch"
  fullName: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfMatch"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfNoneMatch*"
  name: "setIfNoneMatch"
  nameWithType: "DataLakeRequestConditions.setIfNoneMatch"
  fullName: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfNoneMatch"
  package: "com.azure.storage.file.datalake.models"
- uid: "java.time.OffsetDateTime"
  spec.java:
  - uid: "java.time.OffsetDateTime"
    name: "OffsetDateTime"
    fullName: "java.time.OffsetDateTime"
- uid: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfModifiedSince*"
  name: "setIfModifiedSince"
  nameWithType: "DataLakeRequestConditions.setIfModifiedSince"
  fullName: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfModifiedSince"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfUnmodifiedSince*"
  name: "setIfUnmodifiedSince"
  nameWithType: "DataLakeRequestConditions.setIfUnmodifiedSince"
  fullName: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setIfUnmodifiedSince"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.getLeaseId*"
  name: "getLeaseId"
  nameWithType: "DataLakeRequestConditions.getLeaseId"
  fullName: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.getLeaseId"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setLeaseId*"
  name: "setLeaseId"
  nameWithType: "DataLakeRequestConditions.setLeaseId"
  fullName: "com.azure.storage.file.datalake.models.DataLakeRequestConditions.setLeaseId"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.core.http.RequestConditions"
  name: "RequestConditions"
  nameWithType: "RequestConditions"
  fullName: "com.azure.core.http.RequestConditions"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "com.azure.core.http.RequestConditions.getIfModifiedSince()"
  name: "RequestConditions.getIfModifiedSince()"
  nameWithType: "RequestConditions.getIfModifiedSince()"
  fullName: "com.azure.core.http.RequestConditions.getIfModifiedSince()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "com.azure.core.http.RequestConditions.setIfNoneMatch(java.lang.String)"
  name: "RequestConditions.setIfNoneMatch(String)"
  nameWithType: "RequestConditions.setIfNoneMatch(String)"
  fullName: "com.azure.core.http.RequestConditions.setIfNoneMatch(java.lang.String)"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "com.azure.core.http.RequestConditions.setIfModifiedSince(java.time.OffsetDateTime)"
  name: "RequestConditions.setIfModifiedSince(OffsetDateTime)"
  nameWithType: "RequestConditions.setIfModifiedSince(OffsetDateTime)"
  fullName: "com.azure.core.http.RequestConditions.setIfModifiedSince(java.time.OffsetDateTime)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.core.http.RequestConditions.setIfMatch(java.lang.String)"
  name: "RequestConditions.setIfMatch(String)"
  nameWithType: "RequestConditions.setIfMatch(String)"
  fullName: "com.azure.core.http.RequestConditions.setIfMatch(java.lang.String)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "com.azure.core.http.RequestConditions.setIfUnmodifiedSince(java.time.OffsetDateTime)"
  name: "RequestConditions.setIfUnmodifiedSince(OffsetDateTime)"
  nameWithType: "RequestConditions.setIfUnmodifiedSince(OffsetDateTime)"
  fullName: "com.azure.core.http.RequestConditions.setIfUnmodifiedSince(java.time.OffsetDateTime)"
- uid: "com.azure.core.http.RequestConditions.getIfUnmodifiedSince()"
  name: "RequestConditions.getIfUnmodifiedSince()"
  nameWithType: "RequestConditions.getIfUnmodifiedSince()"
  fullName: "com.azure.core.http.RequestConditions.getIfUnmodifiedSince()"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "com.azure.core.http.MatchConditions.getIfNoneMatch()"
  name: "MatchConditions.getIfNoneMatch()"
  nameWithType: "MatchConditions.getIfNoneMatch()"
  fullName: "com.azure.core.http.MatchConditions.getIfNoneMatch()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.azure.core.http.MatchConditions.getIfMatch()"
  name: "MatchConditions.getIfMatch()"
  nameWithType: "MatchConditions.getIfMatch()"
  fullName: "com.azure.core.http.MatchConditions.getIfMatch()"
