### YamlMime:ManagedReference
items:
- uid: com.azure.storage.blob.batch.BlobBatch
  id: BlobBatch
  artifact: com.azure:azure-storage-blob-batch:12.6.0
  parent: com.azure.storage.blob.batch
  children:
  - com.azure.storage.blob.batch.BlobBatch.deleteBlob(java.lang.String)
  - com.azure.storage.blob.batch.BlobBatch.deleteBlob(java.lang.String,com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.batch.BlobBatch.deleteBlob(java.lang.String,java.lang.String)
  - com.azure.storage.blob.batch.BlobBatch.deleteBlob(java.lang.String,java.lang.String,com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier(com.azure.storage.blob.batch.options.BlobBatchSetBlobAccessTierOptions)
  - com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier(java.lang.String,com.azure.storage.blob.models.AccessTier)
  - com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier(java.lang.String,com.azure.storage.blob.models.AccessTier,java.lang.String)
  - com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier(java.lang.String,java.lang.String,com.azure.storage.blob.models.AccessTier)
  - com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier(java.lang.String,java.lang.String,com.azure.storage.blob.models.AccessTier,java.lang.String)
  langs:
  - java
  name: BlobBatch
  nameWithType: BlobBatch
  fullName: com.azure.storage.blob.batch.BlobBatch
  type: Class
  package: com.azure.storage.blob.batch
  summary: >-
    This class allows for batching of multiple Azure Storage operations in a single request via <xref uid="com.azure.storage.blob.batch.BlobBatchClient.submitBatch(com.azure.storage.blob.batch.BlobBatch)" data-throw-if-not-resolved="false">BlobBatchClient#submitBatch(BlobBatch)</xref> or <xref uid="com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatch(com.azure.storage.blob.batch.BlobBatch)" data-throw-if-not-resolved="false">BlobBatchAsyncClient#submitBatch(BlobBatch)</xref>.


    Azure Storage Blob batches are homogeneous which means a <xref uid="com.azure.storage.blob.batch.BlobBatch.deleteBlob(java.lang.String)" data-throw-if-not-resolved="false">delete</xref> and <xref uid="com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier(java.lang.String,com.azure.storage.blob.models.AccessTier)" data-throw-if-not-resolved="false">set tier</xref> are not allowed to be in the same batch.


    ```java

    try {
         Response<Void> deleteResponse = batch.deleteBlob("{url of blob}");
         Response<Void> setTierResponse = batch.setBlobAccessTier("{url of another blob}", AccessTier.HOT);
     } catch (UnsupportedOperationException ex) {
         System.err.printf("This will fail as Azure Storage Blob batch operations are homogeneous. Exception: %s%n",
             ex.getMessage());
     }
    ```


    Please refer to the [Azure Docs][] for more information.



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/blob-batch
  syntax:
    content: public final class BlobBatch
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.blob.batch.BlobBatch.BlobBatch(java.lang.String,com.azure.core.http.HttpPipeline)
  id: BlobBatch(java.lang.String,com.azure.core.http.HttpPipeline)
  artifact: com.azure:azure-storage-blob-batch:12.6.0
  parent: com.azure.storage.blob.batch.BlobBatch
  langs:
  - java
  name: BlobBatch(String accountUrl, HttpPipeline pipeline)
  nameWithType: BlobBatch.BlobBatch(String accountUrl, HttpPipeline pipeline)
  fullName: com.azure.storage.blob.batch.BlobBatch.BlobBatch(String accountUrl, HttpPipeline pipeline)
  overload: com.azure.storage.blob.batch.BlobBatch.BlobBatch*
  type: Constructor
  package: com.azure.storage.blob.batch
  syntax:
    content: " BlobBatch(String accountUrl, HttpPipeline pipeline)"
    parameters:
    - id: accountUrl
      type: java.lang.String
    - id: pipeline
      type: com.azure.core.http.HttpPipeline
- uid: com.azure.storage.blob.batch.BlobBatch.deleteBlob(java.lang.String)
  id: deleteBlob(java.lang.String)
  artifact: com.azure:azure-storage-blob-batch:12.6.0
  parent: com.azure.storage.blob.batch.BlobBatch
  langs:
  - java
  name: deleteBlob(String blobUrl)
  nameWithType: BlobBatch.deleteBlob(String blobUrl)
  fullName: com.azure.storage.blob.batch.BlobBatch.deleteBlob(String blobUrl)
  overload: com.azure.storage.blob.batch.BlobBatch.deleteBlob*
  type: Method
  package: com.azure.storage.blob.batch
  summary: >-
    Adds a delete blob operation to the batch.


    **Code sample**


    ```java

    Response<Void> deleteResponse = batch.deleteBlob("{url of blob}");

    ```
  syntax:
    content: public Response<Void> deleteBlob(String blobUrl)
    parameters:
    - id: blobUrl
      type: java.lang.String
      description: URL of the blob. Blob name must be encoded to UTF-8.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: >-
        a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> that will be used to associate this operation to the response when the batch is
         submitted.
- uid: com.azure.storage.blob.batch.BlobBatch.deleteBlob(java.lang.String,com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions)
  id: deleteBlob(java.lang.String,com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions)
  artifact: com.azure:azure-storage-blob-batch:12.6.0
  parent: com.azure.storage.blob.batch.BlobBatch
  langs:
  - java
  name: deleteBlob(String blobUrl, DeleteSnapshotsOptionType deleteOptions, BlobRequestConditions blobRequestConditions)
  nameWithType: BlobBatch.deleteBlob(String blobUrl, DeleteSnapshotsOptionType deleteOptions, BlobRequestConditions blobRequestConditions)
  fullName: com.azure.storage.blob.batch.BlobBatch.deleteBlob(String blobUrl, DeleteSnapshotsOptionType deleteOptions, BlobRequestConditions blobRequestConditions)
  overload: com.azure.storage.blob.batch.BlobBatch.deleteBlob*
  type: Method
  package: com.azure.storage.blob.batch
  summary: "Adds a delete blob operation to the batch.\n\n**Code sample**\n\n```java\nBlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(\"{lease ID}\");\n \n Response<Void> deleteResponse = batch.deleteBlob(\"{url of blob}\", DeleteSnapshotsOptionType.INCLUDE,\n     blobRequestConditions);\n```"
  syntax:
    content: public Response<Void> deleteBlob(String blobUrl, DeleteSnapshotsOptionType deleteOptions, BlobRequestConditions blobRequestConditions)
    parameters:
    - id: blobUrl
      type: java.lang.String
      description: URL of the blob. Blob name must be encoded to UTF-8.
    - id: deleteOptions
      type: com.azure.storage.blob.models.DeleteSnapshotsOptionType
      description: Delete options for the blob and its snapshots.
    - id: blobRequestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: Additional access conditions that must be met to allow this operation.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: >-
        a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> that will be used to associate this operation to the response when the batch is
         submitted.
- uid: com.azure.storage.blob.batch.BlobBatch.deleteBlob(java.lang.String,java.lang.String)
  id: deleteBlob(java.lang.String,java.lang.String)
  artifact: com.azure:azure-storage-blob-batch:12.6.0
  parent: com.azure.storage.blob.batch.BlobBatch
  langs:
  - java
  name: deleteBlob(String containerName, String blobName)
  nameWithType: BlobBatch.deleteBlob(String containerName, String blobName)
  fullName: com.azure.storage.blob.batch.BlobBatch.deleteBlob(String containerName, String blobName)
  overload: com.azure.storage.blob.batch.BlobBatch.deleteBlob*
  type: Method
  package: com.azure.storage.blob.batch
  summary: >-
    Adds a delete blob operation to the batch.


    **Code sample**


    ```java

    Response<Void> deleteResponse = batch.deleteBlob("{container name}", "{blob name}");

    ```
  syntax:
    content: public Response<Void> deleteBlob(String containerName, String blobName)
    parameters:
    - id: containerName
      type: java.lang.String
      description: The container of the blob.
    - id: blobName
      type: java.lang.String
      description: The name of the blob.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: >-
        a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> that will be used to associate this operation to the response when the batch is
         submitted.
- uid: com.azure.storage.blob.batch.BlobBatch.deleteBlob(java.lang.String,java.lang.String,com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions)
  id: deleteBlob(java.lang.String,java.lang.String,com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions)
  artifact: com.azure:azure-storage-blob-batch:12.6.0
  parent: com.azure.storage.blob.batch.BlobBatch
  langs:
  - java
  name: deleteBlob(String containerName, String blobName, DeleteSnapshotsOptionType deleteOptions, BlobRequestConditions blobRequestConditions)
  nameWithType: BlobBatch.deleteBlob(String containerName, String blobName, DeleteSnapshotsOptionType deleteOptions, BlobRequestConditions blobRequestConditions)
  fullName: com.azure.storage.blob.batch.BlobBatch.deleteBlob(String containerName, String blobName, DeleteSnapshotsOptionType deleteOptions, BlobRequestConditions blobRequestConditions)
  overload: com.azure.storage.blob.batch.BlobBatch.deleteBlob*
  type: Method
  package: com.azure.storage.blob.batch
  summary: "Adds a delete blob operation to the batch.\n\n**Code sample**\n\n```java\nBlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(\"{lease ID}\");\n \n Response<Void> deleteResponse = batch.deleteBlob(\"{container name}\", \"{blob name}\",\n     DeleteSnapshotsOptionType.INCLUDE, blobRequestConditions);\n```"
  syntax:
    content: public Response<Void> deleteBlob(String containerName, String blobName, DeleteSnapshotsOptionType deleteOptions, BlobRequestConditions blobRequestConditions)
    parameters:
    - id: containerName
      type: java.lang.String
      description: The container of the blob.
    - id: blobName
      type: java.lang.String
      description: The name of the blob.
    - id: deleteOptions
      type: com.azure.storage.blob.models.DeleteSnapshotsOptionType
      description: Delete options for the blob and its snapshots.
    - id: blobRequestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: Additional access conditions that must be met to allow this operation.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: >-
        a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> that will be used to associate this operation to the response when the batch is
         submitted.
- uid: com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier(com.azure.storage.blob.batch.options.BlobBatchSetBlobAccessTierOptions)
  id: setBlobAccessTier(com.azure.storage.blob.batch.options.BlobBatchSetBlobAccessTierOptions)
  artifact: com.azure:azure-storage-blob-batch:12.6.0
  parent: com.azure.storage.blob.batch.BlobBatch
  langs:
  - java
  name: setBlobAccessTier(BlobBatchSetBlobAccessTierOptions options)
  nameWithType: BlobBatch.setBlobAccessTier(BlobBatchSetBlobAccessTierOptions options)
  fullName: com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier(BlobBatchSetBlobAccessTierOptions options)
  overload: com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier*
  type: Method
  package: com.azure.storage.blob.batch
  summary: >-
    Adds a set tier operation to the batch.


    **Code sample**


    ```java

    Response<Void> setTierResponse = batch.setBlobAccessTier(
         new BlobBatchSetBlobAccessTierOptions("{url of blob}", AccessTier.HOT).setLeaseId("{lease ID}"));
    ```
  syntax:
    content: public Response<Void> setBlobAccessTier(BlobBatchSetBlobAccessTierOptions options)
    parameters:
    - id: options
      type: com.azure.storage.blob.batch.options.BlobBatchSetBlobAccessTierOptions
      description: <xref uid="com.azure.storage.blob.batch.options.BlobBatchSetBlobAccessTierOptions" data-throw-if-not-resolved="false">BlobBatchSetBlobAccessTierOptions</xref>
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: >-
        a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> that will be used to associate this operation to the response when the batch is
         submitted.
- uid: com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier(java.lang.String,com.azure.storage.blob.models.AccessTier)
  id: setBlobAccessTier(java.lang.String,com.azure.storage.blob.models.AccessTier)
  artifact: com.azure:azure-storage-blob-batch:12.6.0
  parent: com.azure.storage.blob.batch.BlobBatch
  langs:
  - java
  name: setBlobAccessTier(String blobUrl, AccessTier accessTier)
  nameWithType: BlobBatch.setBlobAccessTier(String blobUrl, AccessTier accessTier)
  fullName: com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier(String blobUrl, AccessTier accessTier)
  overload: com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier*
  type: Method
  package: com.azure.storage.blob.batch
  summary: >-
    Adds a set tier operation to the batch.


    **Code sample**


    ```java

    Response<Void> setTierResponse = batch.setBlobAccessTier("{url of blob}", AccessTier.HOT);

    ```
  syntax:
    content: public Response<Void> setBlobAccessTier(String blobUrl, AccessTier accessTier)
    parameters:
    - id: blobUrl
      type: java.lang.String
      description: URL of the blob. Blob name must be encoded to UTF-8.
    - id: accessTier
      type: com.azure.storage.blob.models.AccessTier
      description: The tier to set on the blob.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: >-
        a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> that will be used to associate this operation to the response when the batch is
         submitted.
- uid: com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier(java.lang.String,com.azure.storage.blob.models.AccessTier,java.lang.String)
  id: setBlobAccessTier(java.lang.String,com.azure.storage.blob.models.AccessTier,java.lang.String)
  artifact: com.azure:azure-storage-blob-batch:12.6.0
  parent: com.azure.storage.blob.batch.BlobBatch
  langs:
  - java
  name: setBlobAccessTier(String blobUrl, AccessTier accessTier, String leaseId)
  nameWithType: BlobBatch.setBlobAccessTier(String blobUrl, AccessTier accessTier, String leaseId)
  fullName: com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier(String blobUrl, AccessTier accessTier, String leaseId)
  overload: com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier*
  type: Method
  package: com.azure.storage.blob.batch
  summary: >-
    Adds a set tier operation to the batch.


    **Code sample**


    ```java

    Response<Void> setTierResponse = batch.setBlobAccessTier("{url of blob}", AccessTier.HOT, "{lease ID}");

    ```
  syntax:
    content: public Response<Void> setBlobAccessTier(String blobUrl, AccessTier accessTier, String leaseId)
    parameters:
    - id: blobUrl
      type: java.lang.String
      description: URL of the blob. Blob name must be encoded to UTF-8.
    - id: accessTier
      type: com.azure.storage.blob.models.AccessTier
      description: The tier to set on the blob.
    - id: leaseId
      type: java.lang.String
      description: The lease ID the active lease on the blob must match.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: >-
        a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> that will be used to associate this operation to the response when the batch is
         submitted.
- uid: com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier(java.lang.String,java.lang.String,com.azure.storage.blob.models.AccessTier)
  id: setBlobAccessTier(java.lang.String,java.lang.String,com.azure.storage.blob.models.AccessTier)
  artifact: com.azure:azure-storage-blob-batch:12.6.0
  parent: com.azure.storage.blob.batch.BlobBatch
  langs:
  - java
  name: setBlobAccessTier(String containerName, String blobName, AccessTier accessTier)
  nameWithType: BlobBatch.setBlobAccessTier(String containerName, String blobName, AccessTier accessTier)
  fullName: com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier(String containerName, String blobName, AccessTier accessTier)
  overload: com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier*
  type: Method
  package: com.azure.storage.blob.batch
  summary: >-
    Adds a set tier operation to the batch.


    **Code sample**


    ```java

    Response<Void> setTierResponse = batch.setBlobAccessTier("{container name}", "{blob name}", AccessTier.HOT);

    ```
  syntax:
    content: public Response<Void> setBlobAccessTier(String containerName, String blobName, AccessTier accessTier)
    parameters:
    - id: containerName
      type: java.lang.String
      description: The container of the blob.
    - id: blobName
      type: java.lang.String
      description: The name of the blob.
    - id: accessTier
      type: com.azure.storage.blob.models.AccessTier
      description: The tier to set on the blob.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: >-
        a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> that will be used to associate this operation to the response when the batch is
         submitted.
- uid: com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier(java.lang.String,java.lang.String,com.azure.storage.blob.models.AccessTier,java.lang.String)
  id: setBlobAccessTier(java.lang.String,java.lang.String,com.azure.storage.blob.models.AccessTier,java.lang.String)
  artifact: com.azure:azure-storage-blob-batch:12.6.0
  parent: com.azure.storage.blob.batch.BlobBatch
  langs:
  - java
  name: setBlobAccessTier(String containerName, String blobName, AccessTier accessTier, String leaseId)
  nameWithType: BlobBatch.setBlobAccessTier(String containerName, String blobName, AccessTier accessTier, String leaseId)
  fullName: com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier(String containerName, String blobName, AccessTier accessTier, String leaseId)
  overload: com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier*
  type: Method
  package: com.azure.storage.blob.batch
  summary: >-
    Adds a set tier operation to the batch.


    **Code sample**


    ```java

    Response<Void> setTierResponse = batch.setBlobAccessTier("{container name}", "{blob name}", AccessTier.HOT,
         "{lease ID}");
    ```
  syntax:
    content: public Response<Void> setBlobAccessTier(String containerName, String blobName, AccessTier accessTier, String leaseId)
    parameters:
    - id: containerName
      type: java.lang.String
      description: The container of the blob.
    - id: blobName
      type: java.lang.String
      description: The name of the blob.
    - id: accessTier
      type: com.azure.storage.blob.models.AccessTier
      description: The tier to set on the blob.
    - id: leaseId
      type: java.lang.String
      description: The lease ID the active lease on the blob must match.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: >-
        a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> that will be used to associate this operation to the response when the batch is
         submitted.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: com.azure.storage.blob.batch.BlobBatch.BlobBatch*
  name: BlobBatch
  nameWithType: BlobBatch.BlobBatch
  fullName: com.azure.storage.blob.batch.BlobBatch.BlobBatch
  package: com.azure.storage.blob.batch
- uid: com.azure.core.http.rest.Response<java.lang.Void>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.batch.BlobBatch.deleteBlob*
  name: deleteBlob
  nameWithType: BlobBatch.deleteBlob
  fullName: com.azure.storage.blob.batch.BlobBatch.deleteBlob
  package: com.azure.storage.blob.batch
- uid: com.azure.storage.blob.models.DeleteSnapshotsOptionType
  spec.java:
  - uid: com.azure.storage.blob.models.DeleteSnapshotsOptionType
    name: DeleteSnapshotsOptionType
    fullName: com.azure.storage.blob.models.DeleteSnapshotsOptionType
- uid: com.azure.storage.blob.models.BlobRequestConditions
  spec.java:
  - uid: com.azure.storage.blob.models.BlobRequestConditions
    name: BlobRequestConditions
    fullName: com.azure.storage.blob.models.BlobRequestConditions
- uid: com.azure.storage.blob.models.AccessTier
  spec.java:
  - uid: com.azure.storage.blob.models.AccessTier
    name: AccessTier
    fullName: com.azure.storage.blob.models.AccessTier
- uid: com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier*
  name: setBlobAccessTier
  nameWithType: BlobBatch.setBlobAccessTier
  fullName: com.azure.storage.blob.batch.BlobBatch.setBlobAccessTier
  package: com.azure.storage.blob.batch
- uid: com.azure.storage.blob.batch.options.BlobBatchSetBlobAccessTierOptions
  name: BlobBatchSetBlobAccessTierOptions
  nameWithType: BlobBatchSetBlobAccessTierOptions
  fullName: com.azure.storage.blob.batch.options.BlobBatchSetBlobAccessTierOptions
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
