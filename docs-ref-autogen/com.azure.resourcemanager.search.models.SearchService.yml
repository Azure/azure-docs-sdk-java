### YamlMime:JavaType
uid: "com.azure.resourcemanager.search.models.SearchService"
fullName: "com.azure.resourcemanager.search.models.SearchService"
name: "SearchService"
nameWithType: "SearchService"
summary: "An immutable client-side representation of an Azure Cognitive Search service."
syntax: "public interface SearchService extends GroupableResource<SearchServiceManager,SearchServiceInner>, Refreshable<SearchService>, Updatable<SearchService.Update>"
methods:
- uid: "com.azure.resourcemanager.search.models.SearchService.createQueryKey(java.lang.String)"
  fullName: "com.azure.resourcemanager.search.models.SearchService.createQueryKey(String name)"
  name: "createQueryKey(String name)"
  nameWithType: "SearchService.createQueryKey(String name)"
  summary: "Regenerates either the primary or secondary admin API key."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the new query API key."
    name: "name"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract QueryKey createQueryKey(String name)"
  desc: "Regenerates either the primary or secondary admin API key.\n\nYou can only regenerate one key at a time."
  returns:
    description: "the &lt;QueryKey&gt; object if successful"
    type: "<xref href=\"com.azure.resourcemanager.search.models.QueryKey?alt=com.azure.resourcemanager.search.models.QueryKey&text=QueryKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.search.models.SearchService.createQueryKeyAsync(java.lang.String)"
  fullName: "com.azure.resourcemanager.search.models.SearchService.createQueryKeyAsync(String name)"
  name: "createQueryKeyAsync(String name)"
  nameWithType: "SearchService.createQueryKeyAsync(String name)"
  summary: "Regenerates either the primary or secondary admin API key."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the new query API key."
    name: "name"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract Mono<QueryKey> createQueryKeyAsync(String name)"
  desc: "Regenerates either the primary or secondary admin API key.\n\nYou can only regenerate one key at a time."
  returns:
    description: "a representation of the future computation of this call"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.resourcemanager.search.models.QueryKey?alt=com.azure.resourcemanager.search.models.QueryKey&text=QueryKey\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.search.models.SearchService.deleteQueryKey(java.lang.String)"
  fullName: "com.azure.resourcemanager.search.models.SearchService.deleteQueryKey(String key)"
  name: "deleteQueryKey(String key)"
  nameWithType: "SearchService.deleteQueryKey(String key)"
  summary: "Deletes the specified query key."
  modifiers:
  - "abstract"
  parameters:
  - description: "The query key to be deleted. Query keys are identified by value, not by name."
    name: "key"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract void deleteQueryKey(String key)"
  desc: "Deletes the specified query key.\n\nUnlike admin keys, query keys are not regenerated. The process for regenerating a query key is to delete and then recreate it."
- uid: "com.azure.resourcemanager.search.models.SearchService.deleteQueryKeyAsync(java.lang.String)"
  fullName: "com.azure.resourcemanager.search.models.SearchService.deleteQueryKeyAsync(String key)"
  name: "deleteQueryKeyAsync(String key)"
  nameWithType: "SearchService.deleteQueryKeyAsync(String key)"
  summary: "Deletes the specified query key."
  modifiers:
  - "abstract"
  parameters:
  - description: "The query key to be deleted. Query keys are identified by value, not by name."
    name: "key"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract Mono<Void> deleteQueryKeyAsync(String key)"
  desc: "Deletes the specified query key.\n\nUnlike admin keys, query keys are not regenerated. The process for regenerating a query key is to delete and then recreate it."
  returns:
    description: "a representation of the future computation of this call"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.resourcemanager.search.models.SearchService.getAdminKeys()"
  fullName: "com.azure.resourcemanager.search.models.SearchService.getAdminKeys()"
  name: "getAdminKeys()"
  nameWithType: "SearchService.getAdminKeys()"
  summary: "The primary and secondary admin API keys for the specified Azure Search service."
  modifiers:
  - "abstract"
  syntax: "public abstract AdminKeys getAdminKeys()"
  desc: "The primary and secondary admin API keys for the specified Azure Search service."
  returns:
    description: "the AdminKeys object if successful"
    type: "<xref href=\"com.azure.resourcemanager.search.models.AdminKeys?alt=com.azure.resourcemanager.search.models.AdminKeys&text=AdminKeys\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.search.models.SearchService.getAdminKeysAsync()"
  fullName: "com.azure.resourcemanager.search.models.SearchService.getAdminKeysAsync()"
  name: "getAdminKeysAsync()"
  nameWithType: "SearchService.getAdminKeysAsync()"
  summary: "The primary and secondary admin API keys for the specified Azure Search service."
  modifiers:
  - "abstract"
  syntax: "public abstract Mono<AdminKeys> getAdminKeysAsync()"
  desc: "The primary and secondary admin API keys for the specified Azure Search service."
  returns:
    description: "a representation of the future computation of this call"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.resourcemanager.search.models.AdminKeys?alt=com.azure.resourcemanager.search.models.AdminKeys&text=AdminKeys\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.search.models.SearchService.hostingMode()"
  fullName: "com.azure.resourcemanager.search.models.SearchService.hostingMode()"
  name: "hostingMode()"
  nameWithType: "SearchService.hostingMode()"
  summary: "The hosting mode value."
  modifiers:
  - "abstract"
  syntax: "public abstract HostingMode hostingMode()"
  desc: "The hosting mode value.\n\nApplicable only for the standard3 SKU. You can set this property to enable up to 3 high density partitions that allow up to 1000 indexes, which is much higher than the maximum indexes allowed for any other SKU. For the standard3 SKU, the value is either 'default' or 'highDensity'. For all other SKUs, this value must be 'default'."
  returns:
    description: "the hosting mode value."
    type: "<xref href=\"com.azure.resourcemanager.search.models.HostingMode?alt=com.azure.resourcemanager.search.models.HostingMode&text=HostingMode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.search.models.SearchService.listQueryKeys()"
  fullName: "com.azure.resourcemanager.search.models.SearchService.listQueryKeys()"
  name: "listQueryKeys()"
  nameWithType: "SearchService.listQueryKeys()"
  summary: "Returns the list of query API keys for the given Azure Search service."
  modifiers:
  - "abstract"
  syntax: "public abstract PagedIterable<QueryKey> listQueryKeys()"
  desc: "Returns the list of query API keys for the given Azure Search service."
  returns:
    description: "the List&lt;QueryKey&gt; object if successful"
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.search.models.QueryKey?alt=com.azure.resourcemanager.search.models.QueryKey&text=QueryKey\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.search.models.SearchService.listQueryKeysAsync()"
  fullName: "com.azure.resourcemanager.search.models.SearchService.listQueryKeysAsync()"
  name: "listQueryKeysAsync()"
  nameWithType: "SearchService.listQueryKeysAsync()"
  summary: "Returns the list of query API keys for the given Azure Search service."
  modifiers:
  - "abstract"
  syntax: "public abstract PagedFlux<QueryKey> listQueryKeysAsync()"
  desc: "Returns the list of query API keys for the given Azure Search service."
  returns:
    description: "the observable to the List&lt;QueryKey&gt; object"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.search.models.QueryKey?alt=com.azure.resourcemanager.search.models.QueryKey&text=QueryKey\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.search.models.SearchService.partitionCount()"
  fullName: "com.azure.resourcemanager.search.models.SearchService.partitionCount()"
  name: "partitionCount()"
  nameWithType: "SearchService.partitionCount()"
  modifiers:
  - "abstract"
  syntax: "public abstract int partitionCount()"
  returns:
    description: "the number of partitions used by the service"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.search.models.SearchService.provisioningState()"
  fullName: "com.azure.resourcemanager.search.models.SearchService.provisioningState()"
  name: "provisioningState()"
  nameWithType: "SearchService.provisioningState()"
  summary: "The state of the last provisioning operation performed on the Search service."
  modifiers:
  - "abstract"
  syntax: "public abstract ProvisioningState provisioningState()"
  desc: "The state of the last provisioning operation performed on the Search service.\n\nProvisioning is an intermediate state that occurs while service capacity is being established. After capacity is set up, provisioningState changes to either 'succeeded' or 'failed'. Client applications can poll provisioning status (the recommended polling interval is from 30 seconds to one minute) by using the Get Search Service operation to see when an operation is completed. If you are using the free service, this value tends to come back as 'succeeded' directly in the call to Create Search service. This is because the free service uses capacity that is already set up."
  returns:
    description: "the provisioning state of the resource"
    type: "<xref href=\"com.azure.resourcemanager.search.models.ProvisioningState?alt=com.azure.resourcemanager.search.models.ProvisioningState&text=ProvisioningState\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.search.models.SearchService.regenerateAdminKeys(com.azure.resourcemanager.search.models.AdminKeyKind)"
  fullName: "com.azure.resourcemanager.search.models.SearchService.regenerateAdminKeys(AdminKeyKind keyKind)"
  name: "regenerateAdminKeys(AdminKeyKind keyKind)"
  nameWithType: "SearchService.regenerateAdminKeys(AdminKeyKind keyKind)"
  summary: "Regenerates either the primary or secondary admin API key."
  modifiers:
  - "abstract"
  parameters:
  - description: "specifies which key to regenerate"
    name: "keyKind"
    type: "<xref href=\"com.azure.resourcemanager.search.models.AdminKeyKind?alt=com.azure.resourcemanager.search.models.AdminKeyKind&text=AdminKeyKind\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract AdminKeys regenerateAdminKeys(AdminKeyKind keyKind)"
  desc: "Regenerates either the primary or secondary admin API key.\n\nYou can only regenerate one key at a time."
  returns:
    description: "the AdminKeys object if successful"
    type: "<xref href=\"com.azure.resourcemanager.search.models.AdminKeys?alt=com.azure.resourcemanager.search.models.AdminKeys&text=AdminKeys\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.search.models.SearchService.regenerateAdminKeysAsync(com.azure.resourcemanager.search.models.AdminKeyKind)"
  fullName: "com.azure.resourcemanager.search.models.SearchService.regenerateAdminKeysAsync(AdminKeyKind keyKind)"
  name: "regenerateAdminKeysAsync(AdminKeyKind keyKind)"
  nameWithType: "SearchService.regenerateAdminKeysAsync(AdminKeyKind keyKind)"
  summary: "Regenerates either the primary or secondary admin API key."
  modifiers:
  - "abstract"
  parameters:
  - description: "Specifies which key to regenerate"
    name: "keyKind"
    type: "<xref href=\"com.azure.resourcemanager.search.models.AdminKeyKind?alt=com.azure.resourcemanager.search.models.AdminKeyKind&text=AdminKeyKind\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Mono<AdminKeys> regenerateAdminKeysAsync(AdminKeyKind keyKind)"
  desc: "Regenerates either the primary or secondary admin API key. You can only regenerate one key at a time."
  returns:
    description: "a representation of the future computation of this call"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.resourcemanager.search.models.AdminKeys?alt=com.azure.resourcemanager.search.models.AdminKeys&text=AdminKeys\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.search.models.SearchService.replicaCount()"
  fullName: "com.azure.resourcemanager.search.models.SearchService.replicaCount()"
  name: "replicaCount()"
  nameWithType: "SearchService.replicaCount()"
  modifiers:
  - "abstract"
  syntax: "public abstract int replicaCount()"
  returns:
    description: "the number of replicas used by the service"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.search.models.SearchService.sku()"
  fullName: "com.azure.resourcemanager.search.models.SearchService.sku()"
  name: "sku()"
  nameWithType: "SearchService.sku()"
  modifiers:
  - "abstract"
  syntax: "public abstract Sku sku()"
  returns:
    description: "the SKU type of the service"
    type: "<xref href=\"com.azure.resourcemanager.search.models.Sku?alt=com.azure.resourcemanager.search.models.Sku&text=Sku\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.search.models.SearchService.status()"
  fullName: "com.azure.resourcemanager.search.models.SearchService.status()"
  name: "status()"
  nameWithType: "SearchService.status()"
  summary: "The status of the Search service."
  modifiers:
  - "abstract"
  syntax: "public abstract SearchServiceStatus status()"
  desc: "The status of the Search service.\n\nPossible values include: 'running': the Search service is running and no provisioning operations are underway. 'provisioning': the Search service is being provisioned or scaled up or down. 'deleting': the Search service is being deleted. 'degraded': the Search service is degraded. This can occur when the underlying search units are not healthy. The Search service is most likely operational, but performance might be slow and some requests might be dropped. 'disabled': the Search service is disabled. In this state, the service will reject all API requests. 'error': the Search service is in an error state. If your service is in the degraded, disabled, or error states, it means the Azure Search team is actively investigating the underlying issue. Dedicated services in these states are still chargeable based on the number of search units provisioned."
  returns:
    description: "the status of the service"
    type: "<xref href=\"com.azure.resourcemanager.search.models.SearchServiceStatus?alt=com.azure.resourcemanager.search.models.SearchServiceStatus&text=SearchServiceStatus\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.search.models.SearchService.statusDetails()"
  fullName: "com.azure.resourcemanager.search.models.SearchService.statusDetails()"
  name: "statusDetails()"
  nameWithType: "SearchService.statusDetails()"
  modifiers:
  - "abstract"
  syntax: "public abstract String statusDetails()"
  returns:
    description: "the details of the status."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
type: "interface"
desc: "An immutable client-side representation of an Azure Cognitive Search service."
implements:
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.arm.models.GroupableResource?alt=com.azure.resourcemanager.resources.fluentcore.arm.models.GroupableResource&text=GroupableResource\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.search.SearchServiceManager?alt=com.azure.resourcemanager.search.SearchServiceManager&text=SearchServiceManager\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.resourcemanager.search.fluent.models.SearchServiceInner?alt=com.azure.resourcemanager.search.fluent.models.SearchServiceInner&text=SearchServiceInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.model.Refreshable?alt=com.azure.resourcemanager.resources.fluentcore.model.Refreshable&text=Refreshable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.search.models.SearchService?alt=com.azure.resourcemanager.search.models.SearchService&text=SearchService\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.model.Updatable?alt=com.azure.resourcemanager.resources.fluentcore.model.Updatable&text=Updatable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.search.models.SearchService.Update?alt=com.azure.resourcemanager.search.models.SearchService.Update&text=Update\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.resourcemanager.search.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-search:2.19.0
