### YamlMime:ManagedReference
items:
- uid: system.fabric.StatelessServiceInstance
  id: StatelessServiceInstance
  parent: system.fabric
  children:
  - system.fabric.StatelessServiceInstance.abort()
  - system.fabric.StatelessServiceInstance.closeAsync(CancellationToken)
  - system.fabric.StatelessServiceInstance.initialize(StatelessServiceInitializationParameters)
  - system.fabric.StatelessServiceInstance.openAsync(StatelessServicePartition,CancellationToken)
  href: system.fabric.StatelessServiceInstance.yml
  langs:
  - java
  name: StatelessServiceInstance
  nameWithType: StatelessServiceInstance
  fullName: system.fabric.StatelessServiceInstance
  type: Interface
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/StatelessServiceInstance.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/StatelessServiceInstance.java
    startLine: 17
  package: system.fabric
  summary: "<p>Stateless services are those which have no state that requires management by Service Fabric. Stateless service types must implement this interface. </p>"
  syntax:
    content: public interface StatelessServiceInstance
- uid: system.fabric.StatelessServiceInstance.abort()
  id: abort()
  parent: system.fabric.StatelessServiceInstance
  href: system.fabric.StatelessServiceInstance.yml
  langs:
  - java
  name: abort()
  nameWithType: StatelessServiceInstance.abort()
  fullName: system.fabric.StatelessServiceInstance.abort()
  overload: system.fabric.StatelessServiceInstance.abort*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/StatelessServiceInstance.java
    startLine: 64
  package: system.fabric
  summary: "<p>Terminates this instance ungracefully with this synchronous method call. </p>\r\n<p>\r\n  <b>Remarks:</b>Examples of ungraceful termination are lease loss and, in response to the service, the use of <xref uid=\"system.fabric.ServicePartition.reportFault(FaultType)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.ServicePartition#reportFault(FaultType)\"></xref> to report a <xref uid=\"system.fabric.FaultType.Permanent\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FaultType#Permanent\"></xref> fault. When the service instance receives this method, it should immediately release and clean up all references and return. </p>"
  syntax:
    content: public void abort()
- uid: system.fabric.StatelessServiceInstance.closeAsync(CancellationToken)
  id: closeAsync(CancellationToken)
  parent: system.fabric.StatelessServiceInstance
  href: system.fabric.StatelessServiceInstance.yml
  langs:
  - java
  name: closeAsync(CancellationToken cancellationToken)
  nameWithType: StatelessServiceInstance.closeAsync(CancellationToken cancellationToken)
  fullName: system.fabric.StatelessServiceInstance.closeAsync(CancellationToken cancellationToken)
  overload: system.fabric.StatelessServiceInstance.closeAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/StatelessServiceInstance.java
    startLine: 53
  package: system.fabric
  summary: "<p>Closes this service instance gracefully when the service instance is being shut down.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<?> closeAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: >-
        <p>

          <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>Returns <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref>. </p>
- uid: system.fabric.StatelessServiceInstance.initialize(StatelessServiceInitializationParameters)
  id: initialize(StatelessServiceInitializationParameters)
  parent: system.fabric.StatelessServiceInstance
  href: system.fabric.StatelessServiceInstance.yml
  langs:
  - java
  name: initialize(StatelessServiceInitializationParameters initializationParameters)
  nameWithType: StatelessServiceInstance.initialize(StatelessServiceInitializationParameters initializationParameters)
  fullName: system.fabric.StatelessServiceInstance.initialize(StatelessServiceInitializationParameters initializationParameters)
  overload: system.fabric.StatelessServiceInstance.initialize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/StatelessServiceInstance.java
    startLine: 24
  package: system.fabric
  summary: "<p>Initializes a newly created service instance.</p>\r\n<p></p>"
  syntax:
    content: public void initialize(StatelessServiceInitializationParameters initializationParameters)
    parameters:
    - id: initializationParameters
      type: system.fabric.StatelessServiceInitializationParameters
      description: <p>The <xref uid="system.fabric.StatelessServiceInitializationParameters" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatelessServiceInitializationParameters"></xref> for this service. </p>
- uid: system.fabric.StatelessServiceInstance.openAsync(StatelessServicePartition,CancellationToken)
  id: openAsync(StatelessServicePartition,CancellationToken)
  parent: system.fabric.StatelessServiceInstance
  href: system.fabric.StatelessServiceInstance.yml
  langs:
  - java
  name: openAsync(StatelessServicePartition partition, CancellationToken cancellationToken)
  nameWithType: StatelessServiceInstance.openAsync(StatelessServicePartition partition, CancellationToken cancellationToken)
  fullName: system.fabric.StatelessServiceInstance.openAsync(StatelessServicePartition partition, CancellationToken cancellationToken)
  overload: system.fabric.StatelessServiceInstance.openAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/StatelessServiceInstance.java
    startLine: 43
  package: system.fabric
  summary: "<p>Opens an initialized service instance so that it can be contacted by clients.</p>\r\n<p>\r\n  <b>Remarks:</b>Opening an instance stateless service indicates that the service is now resolvable and discoverable by service clients. The string that is returned is the address of this service instance. The address is associated with the service name via Service Fabric naming and returned to clients that resolve the service. </p>"
  syntax:
    content: public CompletableFuture<String> openAsync(StatelessServicePartition partition, CancellationToken cancellationToken)
    parameters:
    - id: partition
      type: system.fabric.StatelessServicePartition
      description: <p>The <xref uid="system.fabric.StatelessServicePartition" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatelessServicePartition"></xref> that this instance is associated with </p>
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: >-
        <p>

          <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 06be942d
      description: <p>Returns <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> of type <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.lang.String"></xref>. </p>
references:
- uid: system.fabric.StatelessServiceInstance.initialize*
  name: initialize
  nameWithType: StatelessServiceInstance.initialize
  fullName: system.fabric.StatelessServiceInstance.initialize
  package: system.fabric
- uid: 06be942d
  spec.java:
  - name: CompletableFuture<String>
    fullName: CompletableFuture<String>
- uid: system.fabric.StatelessServiceInstance.openAsync*
  name: openAsync
  nameWithType: StatelessServiceInstance.openAsync
  fullName: system.fabric.StatelessServiceInstance.openAsync
  package: system.fabric
- uid: 16409f84
  spec.java:
  - name: CompletableFuture<?>
    fullName: CompletableFuture<?>
- uid: system.fabric.StatelessServiceInstance.closeAsync*
  name: closeAsync
  nameWithType: StatelessServiceInstance.closeAsync
  fullName: system.fabric.StatelessServiceInstance.closeAsync
  package: system.fabric
- uid: system.fabric.StatelessServiceInstance.abort*
  name: abort
  nameWithType: StatelessServiceInstance.abort
  fullName: system.fabric.StatelessServiceInstance.abort
  package: system.fabric
- uid: microsoft.servicefabric.services.runtime.StatelessServiceInstanceAdapter
- uid: system.fabric.StatelessServiceInitializationParameters
  parent: system.fabric
  href: system.fabric.StatelessServiceInitializationParameters.yml
  name: StatelessServiceInitializationParameters
  nameWithType: StatelessServiceInitializationParameters
  fullName: system.fabric.StatelessServiceInitializationParameters
  type: Class
  summary: "<p>Defines service initialization parameters for a stateless service. </p>"
  syntax:
    content: public class StatelessServiceInitializationParameters extends ServiceInitializationParameters
- uid: system.fabric.StatelessServicePartition
  parent: system.fabric
  href: system.fabric.StatelessServicePartition.yml
  name: StatelessServicePartition
  nameWithType: StatelessServicePartition
  fullName: system.fabric.StatelessServicePartition
  type: Interface
  summary: "<p>Represents a partition that is associated with a stateless service instance. </p>\r\n<p>\r\n  <b>Remarks:</b>Provided to a stateless service as a parameter to the <xref uid=\"system.fabric.ServicePartition\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.ServicePartition\"></xref>. </p>"
  syntax:
    content: public interface StatelessServicePartition
- uid: system.fabric.CancellationToken
  parent: system.fabric
  href: system.fabric.CancellationToken.yml
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: system.fabric.CancellationToken
  type: Class
  summary: "<p>A CancellationToken is used to propagate notification that operations should be canceled. You create a cancellation token by instantiating a <xref uid=\"system.fabric.CancellationTokenSource\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.CancellationTokenSource\"></xref> object, which manages cancellation tokens retrieved from its <xref uid=\"system.fabric.CancellationTokenSource.getToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.CancellationTokenSource#getToken()\"></xref> method. You then pass the cancellation token to any number of operations that should receive notice of cancellation. The token cannot be used to initiate cancellation. When the owning object calls <xref uid=\"system.fabric.CancellationTokenSource.cancel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.CancellationTokenSource#cancel()\"></xref>, the cancelled property on the cancellation token is set to true. The objects that receive the notification can respond in whatever manner is appropriate. </p>"
  syntax:
    content: public class CancellationToken
- uid: system.fabric.ServicePartition.reportFault(FaultType)
  parent: system.fabric.ServicePartition
  href: system.fabric.ServicePartition.yml
  name: reportFault(FaultType faultType)
  nameWithType: ServicePartition.reportFault(FaultType faultType)
  fullName: system.fabric.ServicePartition.reportFault(FaultType faultType)
  type: Method
  summary: "<p>Reports the load for a set of load balancing metrics. The load can be reported at any time via the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref> of <xref uid=\"system.fabric.LoadMetric\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LoadMetric\"></xref> method and provides one or more properties of the <xref uid=\"system.fabric.LoadMetric\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.LoadMetric\"></xref> method.</p>\r\n<p>\r\n  <b>Remarks:</b>A fault is typically reported when the service code encounters some issue from which it cannot recover. </p>"
  syntax:
    content: public void reportFault(FaultType faultType)
    parameters:
    - id: faultType
      type: system.fabric.FaultType
      description: <p>The <xref uid="system.fabric.LoadMetric" data-throw-if-not-resolved="false" data-raw-source="system.fabric.LoadMetric"></xref> that the service has encountered. </p>
- uid: system.fabric.FaultType.Permanent
  parent: system.fabric.FaultType
  href: system.fabric.FaultType.yml
  name: Permanent
  nameWithType: FaultType.Permanent
  fullName: system.fabric.FaultType.Permanent
  type: Field
  summary: "<p>A permanent fault is a fault that the replica cannot recover from. This type of fault indicates that the replica can make no further progress and should be removed and replaced. </p>\r\n<p>\r\n  <b>Remarks : </b> An example of a permanent fault would be a persistent stateful service that tries to write information to disk and determines that the disk had been removed or was unusable. Calling <xref uid=\"system.fabric.ServicePartition.reportFault(FaultType)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.ServicePartition#reportFault(system.fabric.FaultType)\"></xref> and reporting a permanent fault result in the service to be Aborted via StatefulServiceReplica <xref uid=\"system.fabric.StatefulServiceReplica.abort()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StatefulServiceReplica#abort()\"></xref> or StatelessServiceInstance <xref uid=\"system.fabric.StatelessServiceInstance.abort()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StatelessServiceInstance#abort()\"></xref> without a chance to gracefully clean up state or complete operations. Therefore, if any cleanup or other long-running work is necessary, it should be performed before <xref uid=\"system.fabric.ServicePartition.reportFault(FaultType)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.ServicePartition#reportFault(system.fabric.FaultType)\"></xref> is called. Note that the distinction between permanent and transient faults is useful mainly for persistent stateful services. Other than the call sequence, the effects on other service types are the same: the replica or instance is removed, all state at that replica or instance is lost, and the replica or instance is recreated, potentially in a different location. </p>"
  syntax:
    content: public Permanent=(1)
