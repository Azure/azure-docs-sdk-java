### YamlMime:JavaMember
uid: "com.azure.core.util.BinaryData.isReplayable*"
fullName: "com.azure.core.util.BinaryData.isReplayable"
name: "isReplayable"
nameWithType: "BinaryData.isReplayable"
members:
- uid: "com.azure.core.util.BinaryData.isReplayable()"
  fullName: "com.azure.core.util.BinaryData.isReplayable()"
  name: "isReplayable()"
  nameWithType: "BinaryData.isReplayable()"
  summary: "Returns a flag indicating whether the content can be repeatedly consumed using all accessors including <xref uid=\"com.azure.core.util.BinaryData.toStream()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#toStream()\"></xref> and <xref uid=\"com.azure.core.util.BinaryData.toFluxByteBuffer()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#toFluxByteBuffer()\"></xref>\n\nReplayability does not imply thread-safety. The caller must not use data accessors simultaneously regardless of what this method returns.\n\n```java\nBinaryData binaryData = binaryDataProducer();\n\n if (!binaryData.isReplayable()) {\n     binaryData = binaryData.toReplayableBinaryData();\n }\n\n streamConsumer(binaryData.toStream());\n streamConsumer(binaryData.toStream());\n```\n\n```java\nMono.fromCallable(() -> binaryDataProducer())\n     .flatMap(binaryData -> {\n         if (binaryData.isReplayable()) {\n             return Mono.just(binaryData);\n         } else  {\n             return binaryData.toReplayableBinaryDataAsync();\n         }\n     })\n     .flatMap(replayableBinaryData ->\n         fluxConsumer(replayableBinaryData.toFluxByteBuffer())\n             .then(fluxConsumer(replayableBinaryData.toFluxByteBuffer())))\n     .subscribe();\n```"
  syntax: "public boolean isReplayable()"
  returns:
    description: "a flag indicating whether the content can be repeatedly consumed using all accessors."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.core.util"
artifact: com.azure:azure-core:1.31.0
