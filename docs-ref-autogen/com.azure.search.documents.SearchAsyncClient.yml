### YamlMime:ManagedReference
items:
- uid: com.azure.search.documents.SearchAsyncClient
  id: SearchAsyncClient
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents
  children:
  - com.azure.search.documents.SearchAsyncClient.<T>getDocument(java.lang.String,java.lang.Class<T>)
  - com.azure.search.documents.SearchAsyncClient.<T>getDocumentWithResponse(java.lang.String,java.lang.Class<T>,java.util.List<java.lang.String>)
  - com.azure.search.documents.SearchAsyncClient.autocomplete(java.lang.String,java.lang.String)
  - com.azure.search.documents.SearchAsyncClient.autocomplete(java.lang.String,java.lang.String,com.azure.search.documents.models.AutocompleteOptions)
  - com.azure.search.documents.SearchAsyncClient.deleteDocuments(java.lang.Iterable<?>)
  - com.azure.search.documents.SearchAsyncClient.deleteDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions)
  - com.azure.search.documents.SearchAsyncClient.getDocumentCount()
  - com.azure.search.documents.SearchAsyncClient.getDocumentCountWithResponse()
  - com.azure.search.documents.SearchAsyncClient.getEndpoint()
  - com.azure.search.documents.SearchAsyncClient.getIndexName()
  - com.azure.search.documents.SearchAsyncClient.indexDocuments(com.azure.search.documents.indexes.models.IndexDocumentsBatch<?>)
  - com.azure.search.documents.SearchAsyncClient.indexDocumentsWithResponse(com.azure.search.documents.indexes.models.IndexDocumentsBatch<?>,com.azure.search.documents.models.IndexDocumentsOptions)
  - com.azure.search.documents.SearchAsyncClient.mergeDocuments(java.lang.Iterable<?>)
  - com.azure.search.documents.SearchAsyncClient.mergeDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions)
  - com.azure.search.documents.SearchAsyncClient.mergeOrUploadDocuments(java.lang.Iterable<?>)
  - com.azure.search.documents.SearchAsyncClient.mergeOrUploadDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions)
  - com.azure.search.documents.SearchAsyncClient.search(java.lang.String)
  - com.azure.search.documents.SearchAsyncClient.search(java.lang.String,com.azure.search.documents.models.SearchOptions)
  - com.azure.search.documents.SearchAsyncClient.suggest(java.lang.String,java.lang.String)
  - com.azure.search.documents.SearchAsyncClient.suggest(java.lang.String,java.lang.String,com.azure.search.documents.models.SuggestOptions)
  - com.azure.search.documents.SearchAsyncClient.uploadDocuments(java.lang.Iterable<?>)
  - com.azure.search.documents.SearchAsyncClient.uploadDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions)
  langs:
  - java
  name: SearchAsyncClient
  nameWithType: SearchAsyncClient
  fullName: com.azure.search.documents.SearchAsyncClient
  type: Class
  package: com.azure.search.documents
  summary: This class provides a client that contains the operations for querying an index and uploading, merging, or deleting documents in an Azure Cognitive Search service.
  syntax:
    content: public final class SearchAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.search.documents.SearchAsyncClient.<T>getDocument(java.lang.String,java.lang.Class<T>)
  id: <T>getDocument(java.lang.String,java.lang.Class<T>)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: <T>getDocument(String key, Class<T> modelClass)
  nameWithType: SearchAsyncClient.<T>getDocument(String key, Class<T> modelClass)
  fullName: com.azure.search.documents.SearchAsyncClient.<T>getDocument(String key, Class<T> modelClass)
  overload: com.azure.search.documents.SearchAsyncClient.getDocument*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Retrieves a document from the Azure Cognitive Search index.


    View [naming rules][] for guidelines on constructing valid document keys.


    **Code Sample**


    Get dynamic SearchDocument.


    ```java

    searchAsyncClient.getDocument("hotelId", SearchDocument.class)
         .subscribe(result -> {
             for (Map.Entry<String, Object> keyValuePair : result.entrySet()) {
                 System.out.printf("Document key %s, Document value %s", keyValuePair.getKey(),
                     keyValuePair.getValue());
             }
         });
    ```



    [naming rules]: https://docs.microsoft.com/rest/api/searchservice/Naming-rules
  syntax:
    content: public Mono<T> <T>getDocument(String key, Class<T> modelClass)
    parameters:
    - id: key
      type: java.lang.String
      description: The key of the document to retrieve.
    - id: modelClass
      type: java.lang.Class<T>
      description: The model class converts to.
    return:
      type: reactor.core.publisher.Mono<T>
      description: the document object
- uid: com.azure.search.documents.SearchAsyncClient.<T>getDocumentWithResponse(java.lang.String,java.lang.Class<T>,java.util.List<java.lang.String>)
  id: <T>getDocumentWithResponse(java.lang.String,java.lang.Class<T>,java.util.List<java.lang.String>)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: <T>getDocumentWithResponse(String key, Class<T> modelClass, List<String> selectedFields)
  nameWithType: SearchAsyncClient.<T>getDocumentWithResponse(String key, Class<T> modelClass, List<String> selectedFields)
  fullName: com.azure.search.documents.SearchAsyncClient.<T>getDocumentWithResponse(String key, Class<T> modelClass, List<String> selectedFields)
  overload: com.azure.search.documents.SearchAsyncClient.getDocumentWithResponse*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Retrieves a document from the Azure Cognitive Search index.


    View [naming rules][] for guidelines on constructing valid document keys.


    **Code Sample**


    Get dynamic SearchDocument.


    ```java

    searchAsyncClient.getDocumentWithResponse("hotelId", SearchDocument.class, null)
         .subscribe(resultResponse -> {
             System.out.println("The status code of the response is " + resultResponse.getStatusCode());
             for (Map.Entry<String, Object> keyValuePair : resultResponse.getValue().entrySet()) {
                 System.out.printf("Document key %s, Document value %s", keyValuePair.getKey(),
                     keyValuePair.getValue());
             }
         });
    ```



    [naming rules]: https://docs.microsoft.com/rest/api/searchservice/Naming-rules
  syntax:
    content: public Mono<Response<T>> <T>getDocumentWithResponse(String key, Class<T> modelClass, List<String> selectedFields)
    parameters:
    - id: key
      type: java.lang.String
      description: The key of the document to retrieve.
    - id: modelClass
      type: java.lang.Class<T>
      description: The model class converts to.
    - id: selectedFields
      type: java.util.List<java.lang.String>
      description: >-
        List of field names to retrieve for the document; Any field not retrieved will have null or
         default as its corresponding property value in the returned object.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<T>>
      description: a response containing the document object
- uid: com.azure.search.documents.SearchAsyncClient.SearchAsyncClient(java.lang.String,java.lang.String,com.azure.search.documents.SearchServiceVersion,com.azure.core.http.HttpPipeline)
  id: SearchAsyncClient(java.lang.String,java.lang.String,com.azure.search.documents.SearchServiceVersion,com.azure.core.http.HttpPipeline)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: SearchAsyncClient(String endpoint, String indexName, SearchServiceVersion serviceVersion, HttpPipeline httpPipeline)
  nameWithType: SearchAsyncClient.SearchAsyncClient(String endpoint, String indexName, SearchServiceVersion serviceVersion, HttpPipeline httpPipeline)
  fullName: com.azure.search.documents.SearchAsyncClient.SearchAsyncClient(String endpoint, String indexName, SearchServiceVersion serviceVersion, HttpPipeline httpPipeline)
  overload: com.azure.search.documents.SearchAsyncClient.SearchAsyncClient*
  type: Constructor
  package: com.azure.search.documents
  summary: Package private constructor to be used by <xref uid="com.azure.search.documents.SearchClientBuilder" data-throw-if-not-resolved="false">SearchClientBuilder</xref>
  syntax:
    content: " SearchAsyncClient(String endpoint, String indexName, SearchServiceVersion serviceVersion, HttpPipeline httpPipeline)"
    parameters:
    - id: endpoint
      type: java.lang.String
    - id: indexName
      type: java.lang.String
    - id: serviceVersion
      type: com.azure.search.documents.SearchServiceVersion
    - id: httpPipeline
      type: com.azure.core.http.HttpPipeline
- uid: com.azure.search.documents.SearchAsyncClient.autocomplete(java.lang.String,java.lang.String)
  id: autocomplete(java.lang.String,java.lang.String)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: autocomplete(String searchText, String suggesterName)
  nameWithType: SearchAsyncClient.autocomplete(String searchText, String suggesterName)
  fullName: com.azure.search.documents.SearchAsyncClient.autocomplete(String searchText, String suggesterName)
  overload: com.azure.search.documents.SearchAsyncClient.autocomplete*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Autocompletes incomplete query terms based on input text and matching terms in the index.


    **Code Sample**


    Autocomplete text from documents in service.


    ```java

    searchAsyncClient.autocomplete("searchText", "sg")
         .subscribe(result -> {
             System.out.printf("The complete term is %s", result.getText());
         });
    ```
  syntax:
    content: public AutocompletePagedFlux autocomplete(String searchText, String suggesterName)
    parameters:
    - id: searchText
      type: java.lang.String
      description: search text
    - id: suggesterName
      type: java.lang.String
      description: suggester name
    return:
      type: com.azure.search.documents.util.AutocompletePagedFlux
      description: auto complete result.
- uid: com.azure.search.documents.SearchAsyncClient.autocomplete(java.lang.String,java.lang.String,com.azure.search.documents.models.AutocompleteOptions)
  id: autocomplete(java.lang.String,java.lang.String,com.azure.search.documents.models.AutocompleteOptions)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: autocomplete(String searchText, String suggesterName, AutocompleteOptions autocompleteOptions)
  nameWithType: SearchAsyncClient.autocomplete(String searchText, String suggesterName, AutocompleteOptions autocompleteOptions)
  fullName: com.azure.search.documents.SearchAsyncClient.autocomplete(String searchText, String suggesterName, AutocompleteOptions autocompleteOptions)
  overload: com.azure.search.documents.SearchAsyncClient.autocomplete*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Autocompletes incomplete query terms based on input text and matching terms in the index.


    **Code Sample**


    Autocomplete text from documents in service with option.


    ```java

    searchAsyncClient.autocomplete("searchText", "sg",
         new AutocompleteOptions().setAutocompleteMode(AutocompleteMode.ONE_TERM_WITH_CONTEXT))
         .subscribe(result ->
             System.out.printf("The complete term is %s", result.getText())
         );
    ```
  syntax:
    content: public AutocompletePagedFlux autocomplete(String searchText, String suggesterName, AutocompleteOptions autocompleteOptions)
    parameters:
    - id: searchText
      type: java.lang.String
      description: search text
    - id: suggesterName
      type: java.lang.String
      description: suggester name
    - id: autocompleteOptions
      type: com.azure.search.documents.models.AutocompleteOptions
      description: autocomplete options
    return:
      type: com.azure.search.documents.util.AutocompletePagedFlux
      description: auto complete result.
- uid: com.azure.search.documents.SearchAsyncClient.deleteDocuments(java.lang.Iterable<?>)
  id: deleteDocuments(java.lang.Iterable<?>)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: deleteDocuments(Iterable<?> documents)
  nameWithType: SearchAsyncClient.deleteDocuments(Iterable<?> documents)
  fullName: com.azure.search.documents.SearchAsyncClient.deleteDocuments(Iterable<?> documents)
  overload: com.azure.search.documents.SearchAsyncClient.deleteDocuments*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Deletes a collection of documents from the target index.


    **Code Sample**


    Delete dynamic SearchDocument.


    ```java

    SearchDocument searchDocument = new SearchDocument();
     searchDocument.put("hotelId", "1");
     searchDocument.put("hotelName", "test");
     searchAsyncClient.deleteDocuments(Collections.singletonList(searchDocument))
         .subscribe(result -> {
             for (IndexingResult indexingResult : result.getResults()) {
                 System.out.printf("Does document with key %s delete successfully? %b%n", indexingResult.getKey(),
                     indexingResult.isSucceeded());
             }
         });
    ```
  syntax:
    content: public Mono<IndexDocumentsResult> deleteDocuments(Iterable<?> documents)
    parameters:
    - id: documents
      type: java.lang.Iterable<?>
      description: collection of documents to delete from the target Index. Fields other than the key are ignored.
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.models.IndexDocumentsResult>
      description: document index result.
- uid: com.azure.search.documents.SearchAsyncClient.deleteDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions)
  id: deleteDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: deleteDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options)
  nameWithType: SearchAsyncClient.deleteDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options)
  fullName: com.azure.search.documents.SearchAsyncClient.deleteDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options)
  overload: com.azure.search.documents.SearchAsyncClient.deleteDocumentsWithResponse*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Deletes a collection of documents from the target index.


    **Code Sample**


    Delete dynamic SearchDocument.


    ```java

    SearchDocument searchDocument = new SearchDocument();
     searchDocument.put("hotelId", "1");
     searchDocument.put("hotelName", "test");
     searchAsyncClient.deleteDocumentsWithResponse(Collections.singletonList(searchDocument), null)
         .subscribe(resultResponse -> {
             System.out.println("The status code of the response is " + resultResponse.getStatusCode());
             for (IndexingResult indexingResult : resultResponse.getValue().getResults()) {
                 System.out.printf("Does document with key %s delete successfully? %b%n", indexingResult.getKey(),
                     indexingResult.isSucceeded());
             }
         });
    ```
  syntax:
    content: public Mono<Response<IndexDocumentsResult>> deleteDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<?>
      description: collection of documents to delete from the target Index. Fields other than the key are ignored.
    - id: options
      type: com.azure.search.documents.models.IndexDocumentsOptions
      description: Options that allow specifying document indexing behavior.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>>
      description: response containing the document index result.
- uid: com.azure.search.documents.SearchAsyncClient.getDocumentCount()
  id: getDocumentCount()
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: getDocumentCount()
  nameWithType: SearchAsyncClient.getDocumentCount()
  fullName: com.azure.search.documents.SearchAsyncClient.getDocumentCount()
  overload: com.azure.search.documents.SearchAsyncClient.getDocumentCount*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Queries the number of documents in the search index.


    **Code Sample**


    Get document count.


    ```java

    searchAsyncClient.getDocumentCount()
         .subscribe(count -> System.out.printf("There are %d documents in service.", count));
    ```
  syntax:
    content: public Mono<Long> getDocumentCount()
    return:
      type: reactor.core.publisher.Mono<java.lang.Long>
      description: the number of documents.
- uid: com.azure.search.documents.SearchAsyncClient.getDocumentCountWithResponse()
  id: getDocumentCountWithResponse()
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: getDocumentCountWithResponse()
  nameWithType: SearchAsyncClient.getDocumentCountWithResponse()
  fullName: com.azure.search.documents.SearchAsyncClient.getDocumentCountWithResponse()
  overload: com.azure.search.documents.SearchAsyncClient.getDocumentCountWithResponse*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Queries the number of documents in the search index.


    **Code Sample**


    Get document count.


    ```java

    searchAsyncClient.getDocumentCountWithResponse()
         .subscribe(countResponse -> {
             System.out.println("The status code of the response is " + countResponse.getStatusCode());
             System.out.printf("There are %d documents in service.", countResponse.getValue());
         });
    ```
  syntax:
    content: public Mono<Response<Long>> getDocumentCountWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Long>>
      description: response containing the number of documents.
- uid: com.azure.search.documents.SearchAsyncClient.getEndpoint()
  id: getEndpoint()
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: getEndpoint()
  nameWithType: SearchAsyncClient.getEndpoint()
  fullName: com.azure.search.documents.SearchAsyncClient.getEndpoint()
  overload: com.azure.search.documents.SearchAsyncClient.getEndpoint*
  type: Method
  package: com.azure.search.documents
  summary: Gets the endpoint for the Azure Cognitive Search service.
  syntax:
    content: public String getEndpoint()
    return:
      type: java.lang.String
      description: the endpoint value.
- uid: com.azure.search.documents.SearchAsyncClient.getIndexName()
  id: getIndexName()
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: getIndexName()
  nameWithType: SearchAsyncClient.getIndexName()
  fullName: com.azure.search.documents.SearchAsyncClient.getIndexName()
  overload: com.azure.search.documents.SearchAsyncClient.getIndexName*
  type: Method
  package: com.azure.search.documents
  summary: Gets the name of the Azure Cognitive Search index.
  syntax:
    content: public String getIndexName()
    return:
      type: java.lang.String
      description: the indexName value.
- uid: com.azure.search.documents.SearchAsyncClient.indexDocuments(com.azure.search.documents.indexes.models.IndexDocumentsBatch<?>)
  id: indexDocuments(com.azure.search.documents.indexes.models.IndexDocumentsBatch<?>)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: indexDocuments(IndexDocumentsBatch<?> batch)
  nameWithType: SearchAsyncClient.indexDocuments(IndexDocumentsBatch<?> batch)
  fullName: com.azure.search.documents.SearchAsyncClient.indexDocuments(IndexDocumentsBatch<?> batch)
  overload: com.azure.search.documents.SearchAsyncClient.indexDocuments*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Sends a batch of upload, merge, and/or delete actions to the search index.


    **Code Sample**


    Index batch operation on dynamic SearchDocument.


    ```java

    SearchDocument searchDocument1 = new SearchDocument();
     searchDocument1.put("hotelId", "1");
     searchDocument1.put("hotelName", "test1");
     SearchDocument searchDocument2 = new SearchDocument();
     searchDocument2.put("hotelId", "2");
     searchDocument2.put("hotelName", "test2");
     IndexDocumentsBatch<SearchDocument> indexDocumentsBatch = new IndexDocumentsBatch<>();
     indexDocumentsBatch.addUploadActions(Collections.singletonList(searchDocument1));
     indexDocumentsBatch.addDeleteActions(Collections.singletonList(searchDocument2));
     searchAsyncClient.indexDocuments(indexDocumentsBatch)
         .subscribe(result -> {
             for (IndexingResult indexingResult : result.getResults()) {
                 System.out.printf("Does document with key %s finish successfully? %b%n", indexingResult.getKey(),
                     indexingResult.isSucceeded());
             }
         });
    ```
  syntax:
    content: public Mono<IndexDocumentsResult> indexDocuments(IndexDocumentsBatch<?> batch)
    parameters:
    - id: batch
      type: com.azure.search.documents.indexes.models.IndexDocumentsBatch<?>
      description: The batch of index actions
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.models.IndexDocumentsResult>
      description: Response containing the status of operations for all actions in the batch.
- uid: com.azure.search.documents.SearchAsyncClient.indexDocumentsWithResponse(com.azure.search.documents.indexes.models.IndexDocumentsBatch<?>,com.azure.search.documents.models.IndexDocumentsOptions)
  id: indexDocumentsWithResponse(com.azure.search.documents.indexes.models.IndexDocumentsBatch<?>,com.azure.search.documents.models.IndexDocumentsOptions)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: indexDocumentsWithResponse(IndexDocumentsBatch<?> batch, IndexDocumentsOptions options)
  nameWithType: SearchAsyncClient.indexDocumentsWithResponse(IndexDocumentsBatch<?> batch, IndexDocumentsOptions options)
  fullName: com.azure.search.documents.SearchAsyncClient.indexDocumentsWithResponse(IndexDocumentsBatch<?> batch, IndexDocumentsOptions options)
  overload: com.azure.search.documents.SearchAsyncClient.indexDocumentsWithResponse*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Sends a batch of upload, merge, and/or delete actions to the search index.


    **Code Sample**


    Index batch operation on dynamic SearchDocument.


    ```java

    SearchDocument searchDocument1 = new SearchDocument();
     searchDocument1.put("hotelId", "1");
     searchDocument1.put("hotelName", "test1");
     SearchDocument searchDocument2 = new SearchDocument();
     searchDocument2.put("hotelId", "2");
     searchDocument2.put("hotelName", "test2");
     IndexDocumentsBatch<SearchDocument> indexDocumentsBatch = new IndexDocumentsBatch<>();
     indexDocumentsBatch.addUploadActions(Collections.singletonList(searchDocument1));
     indexDocumentsBatch.addDeleteActions(Collections.singletonList(searchDocument2));
     searchAsyncClient.indexDocumentsWithResponse(indexDocumentsBatch, null)
         .subscribe(resultResponse -> {
             System.out.println("The status code of the response is " + resultResponse.getStatusCode());
             for (IndexingResult indexingResult : resultResponse.getValue().getResults()) {
                 System.out.printf("Does document with key %s finish successfully? %b%n", indexingResult.getKey(),
                     indexingResult.isSucceeded());
             }
         });
    ```
  syntax:
    content: public Mono<Response<IndexDocumentsResult>> indexDocumentsWithResponse(IndexDocumentsBatch<?> batch, IndexDocumentsOptions options)
    parameters:
    - id: batch
      type: com.azure.search.documents.indexes.models.IndexDocumentsBatch<?>
      description: The batch of index actions
    - id: options
      type: com.azure.search.documents.models.IndexDocumentsOptions
      description: Options that allow specifying document indexing behavior.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>>
      description: Response containing the status of operations for all actions in the batch
- uid: com.azure.search.documents.SearchAsyncClient.mergeDocuments(java.lang.Iterable<?>)
  id: mergeDocuments(java.lang.Iterable<?>)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: mergeDocuments(Iterable<?> documents)
  nameWithType: SearchAsyncClient.mergeDocuments(Iterable<?> documents)
  fullName: com.azure.search.documents.SearchAsyncClient.mergeDocuments(Iterable<?> documents)
  overload: com.azure.search.documents.SearchAsyncClient.mergeDocuments*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Merges a collection of documents with existing documents in the target index.


    If the type of the document contains non-nullable primitive-typed properties, these properties may not merge correctly. If you do not set such a property, it will automatically take its default value (for example, `0` for `int` or `false` for `boolean`), which will override the value of the property currently stored in the index, even if this was not your intent. For this reason, it is strongly recommended that you always declare primitive-typed properties with their class equivalents (for example, an integer property should be of type `Integer` instead of `int`).


    **Code Sample**


    Merge dynamic SearchDocument.


    ```java

    SearchDocument searchDocument = new SearchDocument();
     searchDocument.put("hotelName", "merge");
     searchAsyncClient.mergeDocuments(Collections.singletonList(searchDocument))
         .subscribe(result -> {
             for (IndexingResult indexingResult : result.getResults()) {
                 System.out.printf("Does document with key %s merge successfully? %b%n", indexingResult.getKey(),
                     indexingResult.isSucceeded());
             }
         });
    ```
  syntax:
    content: public Mono<IndexDocumentsResult> mergeDocuments(Iterable<?> documents)
    parameters:
    - id: documents
      type: java.lang.Iterable<?>
      description: collection of documents to be merged
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.models.IndexDocumentsResult>
      description: document index result
- uid: com.azure.search.documents.SearchAsyncClient.mergeDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions)
  id: mergeDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: mergeDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options)
  nameWithType: SearchAsyncClient.mergeDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options)
  fullName: com.azure.search.documents.SearchAsyncClient.mergeDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options)
  overload: com.azure.search.documents.SearchAsyncClient.mergeDocumentsWithResponse*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Merges a collection of documents with existing documents in the target index.


    If the type of the document contains non-nullable primitive-typed properties, these properties may not merge correctly. If you do not set such a property, it will automatically take its default value (for example, `0` for `int` or `false` for `boolean`), which will override the value of the property currently stored in the index, even if this was not your intent. For this reason, it is strongly recommended that you always declare primitive-typed properties with their class equivalents (for example, an integer property should be of type `Integer` instead of `int`).


    **Code Sample**


    Merge dynamic SearchDocument.


    ```java

    SearchDocument searchDocument = new SearchDocument();
     searchDocument.put("hotelName", "test");
     searchAsyncClient.mergeDocumentsWithResponse(Collections.singletonList(searchDocument), null)
         .subscribe(resultResponse -> {
             System.out.println("The status code of the response is " + resultResponse.getStatusCode());
             for (IndexingResult indexingResult : resultResponse.getValue().getResults()) {
                 System.out.printf("Does document with key %s merge successfully? %b%n", indexingResult.getKey(),
                     indexingResult.isSucceeded());
             }
         });
    ```
  syntax:
    content: public Mono<Response<IndexDocumentsResult>> mergeDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<?>
      description: collection of documents to be merged
    - id: options
      type: com.azure.search.documents.models.IndexDocumentsOptions
      description: Options that allow specifying document indexing behavior.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>>
      description: response containing the document index result.
- uid: com.azure.search.documents.SearchAsyncClient.mergeOrUploadDocuments(java.lang.Iterable<?>)
  id: mergeOrUploadDocuments(java.lang.Iterable<?>)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: mergeOrUploadDocuments(Iterable<?> documents)
  nameWithType: SearchAsyncClient.mergeOrUploadDocuments(Iterable<?> documents)
  fullName: com.azure.search.documents.SearchAsyncClient.mergeOrUploadDocuments(Iterable<?> documents)
  overload: com.azure.search.documents.SearchAsyncClient.mergeOrUploadDocuments*
  type: Method
  package: com.azure.search.documents
  summary: >-
    This action behaves like merge if a document with the given key already exists in the index. If the document does not exist, it behaves like upload with a new document.


    If the type of the document contains non-nullable primitive-typed properties, these properties may not merge correctly. If you do not set such a property, it will automatically take its default value (for example, `0` for `int` or `false` for `boolean`), which will override the value of the property currently stored in the index, even if this was not your intent. For this reason, it is strongly recommended that you always declare primitive-typed properties with their class equivalents (for example, an integer property should be of type `Integer` instead of `int`).


    **Code Sample**


    Merge or upload dynamic SearchDocument.


    ```java

    SearchDocument searchDocument = new SearchDocument();
     searchDocument.put("hotelId", "1");
     searchDocument.put("hotelName", "test");
     searchAsyncClient.mergeOrUploadDocuments(Collections.singletonList(searchDocument))
         .subscribe(result -> {
             for (IndexingResult indexingResult : result.getResults()) {
                 System.out.printf("Does document with key %s mergeOrUpload successfully? %b%n",
                     indexingResult.getKey(), indexingResult.isSucceeded());
             }
         });
    ```
  syntax:
    content: public Mono<IndexDocumentsResult> mergeOrUploadDocuments(Iterable<?> documents)
    parameters:
    - id: documents
      type: java.lang.Iterable<?>
      description: collection of documents to be merged, if exists, otherwise uploaded
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.models.IndexDocumentsResult>
      description: document index result
- uid: com.azure.search.documents.SearchAsyncClient.mergeOrUploadDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions)
  id: mergeOrUploadDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: mergeOrUploadDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options)
  nameWithType: SearchAsyncClient.mergeOrUploadDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options)
  fullName: com.azure.search.documents.SearchAsyncClient.mergeOrUploadDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options)
  overload: com.azure.search.documents.SearchAsyncClient.mergeOrUploadDocumentsWithResponse*
  type: Method
  package: com.azure.search.documents
  summary: >-
    This action behaves like merge if a document with the given key already exists in the index. If the document does not exist, it behaves like upload with a new document.


    If the type of the document contains non-nullable primitive-typed properties, these properties may not merge correctly. If you do not set such a property, it will automatically take its default value (for example, `0` for `int` or `false` for `boolean`), which will override the value of the property currently stored in the index, even if this was not your intent. For this reason, it is strongly recommended that you always declare primitive-typed properties with their class equivalents (for example, an integer property should be of type `Integer` instead of `int`).


    **Code Sample**


    Merge or upload dynamic SearchDocument.


    ```java

    SearchDocument searchDocument = new SearchDocument();
     searchDocument.put("hotelId", "1");
     searchDocument.put("hotelName", "test");
     searchAsyncClient.mergeOrUploadDocumentsWithResponse(Collections.singletonList(searchDocument), null)
         .subscribe(resultResponse -> {
             System.out.println("The status code of the response is " + resultResponse.getStatusCode());
             for (IndexingResult indexingResult : resultResponse.getValue().getResults()) {
                 System.out.printf("Does document with key %s mergeOrUpload successfully? %b%n",
                     indexingResult.getKey(), indexingResult.isSucceeded());
             }
         });
    ```
  syntax:
    content: public Mono<Response<IndexDocumentsResult>> mergeOrUploadDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<?>
      description: collection of documents to be merged, if exists, otherwise uploaded
    - id: options
      type: com.azure.search.documents.models.IndexDocumentsOptions
      description: Options that allow specifying document indexing behavior.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>>
      description: document index result
- uid: com.azure.search.documents.SearchAsyncClient.search(java.lang.String)
  id: search(java.lang.String)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: search(String searchText)
  nameWithType: SearchAsyncClient.search(String searchText)
  fullName: com.azure.search.documents.SearchAsyncClient.search(String searchText)
  overload: com.azure.search.documents.SearchAsyncClient.search*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Searches for documents in the Azure Cognitive Search index.


    If `searchText` is set to `null` or `"*"` all documents will be matched, see [simple query syntax in Azure Cognitive Search][] for more information about search query syntax.


    **Code Sample**


    Search text from documents in service.


    ```java

    SearchPagedFlux searchPagedFlux = searchAsyncClient.search("searchText");
     searchPagedFlux.getTotalCount().subscribe(
         count -> System.out.printf("There are around %d results.", count)
     );
     searchPagedFlux.byPage()
         .subscribe(resultRespones -> {
             for (SearchResult result: resultRespones.getValue()) {
                 SearchDocument searchDocument = result.getDocument(SearchDocument.class);
                 for (Map.Entry<String, Object> keyValuePair: searchDocument.entrySet()) {
                     System.out.printf("Document key %s, document value %s", keyValuePair.getKey(), keyValuePair.getValue());
                 }
             }
         });
    ```



    [simple query syntax in Azure Cognitive Search]: https://docs.microsoft.com/rest/api/searchservice/Simple-query-syntax-in-Azure-Search
  syntax:
    content: public SearchPagedFlux search(String searchText)
    parameters:
    - id: searchText
      type: java.lang.String
      description: A full-text search query expression.
    return:
      type: com.azure.search.documents.util.SearchPagedFlux
      description: >-
        A <xref uid="com.azure.search.documents.util.SearchPagedFlux" data-throw-if-not-resolved="false">SearchPagedFlux</xref> that iterates over <xref uid="com.azure.search.documents.models.SearchResult" data-throw-if-not-resolved="false">SearchResult</xref> objects and provides access to the
         <xref uid="com.azure.search.documents.util.SearchPagedResponse" data-throw-if-not-resolved="false">SearchPagedResponse</xref> object for each page containing HTTP response and count, facet, and coverage
         information.
- uid: com.azure.search.documents.SearchAsyncClient.search(java.lang.String,com.azure.search.documents.models.SearchOptions)
  id: search(java.lang.String,com.azure.search.documents.models.SearchOptions)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: search(String searchText, SearchOptions searchOptions)
  nameWithType: SearchAsyncClient.search(String searchText, SearchOptions searchOptions)
  fullName: com.azure.search.documents.SearchAsyncClient.search(String searchText, SearchOptions searchOptions)
  overload: com.azure.search.documents.SearchAsyncClient.search*
  type: Method
  package: com.azure.search.documents
  summary: "Searches for documents in the Azure Cognitive Search index.\n\nIf `searchText` is set to `null` or `\"*\"` all documents will be matched, see [simple query syntax in Azure Cognitive Search][] for more information about search query syntax.\n\n**Code Sample**\n\nSearch text from documents in service with option.\n\n```java\nSearchPagedFlux pagedFlux = searchAsyncClient.search(\"searchText\",\n     new SearchOptions().setOrderBy(\"hotelId desc\"));\n \n pagedFlux.getTotalCount().subscribe(count -> {\n     System.out.printf(\"There are around %d results.\", count);\n });\n \n pagedFlux.byPage()\n     .subscribe(searchResultResponse -> {\n         searchResultResponse.getValue().forEach(searchDocument -> {\n             for (Map.Entry<String, Object> keyValuePair\n                 : searchDocument.getDocument(SearchDocument.class).entrySet()) {\n                 System.out.printf(\"Document key %s, document value %s\", keyValuePair.getKey(),\n                     keyValuePair.getValue());\n             }\n         });\n     });\n```\n\n\n[simple query syntax in Azure Cognitive Search]: https://docs.microsoft.com/rest/api/searchservice/Simple-query-syntax-in-Azure-Search"
  syntax:
    content: public SearchPagedFlux search(String searchText, SearchOptions searchOptions)
    parameters:
    - id: searchText
      type: java.lang.String
      description: A full-text search query expression.
    - id: searchOptions
      type: com.azure.search.documents.models.SearchOptions
      description: Parameters to further refine the search query
    return:
      type: com.azure.search.documents.util.SearchPagedFlux
      description: >-
        A <xref uid="com.azure.search.documents.util.SearchPagedFlux" data-throw-if-not-resolved="false">SearchPagedFlux</xref> that iterates over <xref uid="com.azure.search.documents.models.SearchResult" data-throw-if-not-resolved="false">SearchResult</xref> objects and provides access to the
         <xref uid="com.azure.search.documents.util.SearchPagedResponse" data-throw-if-not-resolved="false">SearchPagedResponse</xref> object for each page containing HTTP response and count, facet, and coverage
         information.
- uid: com.azure.search.documents.SearchAsyncClient.suggest(java.lang.String,java.lang.String)
  id: suggest(java.lang.String,java.lang.String)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: suggest(String searchText, String suggesterName)
  nameWithType: SearchAsyncClient.suggest(String searchText, String suggesterName)
  fullName: com.azure.search.documents.SearchAsyncClient.suggest(String searchText, String suggesterName)
  overload: com.azure.search.documents.SearchAsyncClient.suggest*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Suggests documents in the index that match the given partial query.


    **Code Sample**


    Suggest text from documents in service.


    ```java

    searchAsyncClient.suggest("searchText", "sg")
         .subscribe(results -> {
             for (Map.Entry<String, Object> keyValuePair: results.getDocument(SearchDocument.class).entrySet()) {
                 System.out.printf("Document key %s, document value %s", keyValuePair.getKey(),
                     keyValuePair.getValue());
             }
         });
    ```
  syntax:
    content: public SuggestPagedFlux suggest(String searchText, String suggesterName)
    parameters:
    - id: searchText
      type: java.lang.String
      description: The search text on which to base suggestions
    - id: suggesterName
      type: java.lang.String
      description: >-
        The name of the suggester as specified in the suggesters collection that's part of the index
         definition
    return:
      type: com.azure.search.documents.util.SuggestPagedFlux
      description: >-
        A <xref uid="com.azure.search.documents.util.SuggestPagedFlux" data-throw-if-not-resolved="false">SuggestPagedFlux</xref> that iterates over <xref uid="com.azure.search.documents.models.SuggestResult" data-throw-if-not-resolved="false">SuggestResult</xref> objects and provides access to the
         <xref uid="com.azure.search.documents.util.SuggestPagedResponse" data-throw-if-not-resolved="false">SuggestPagedResponse</xref> object for each page containing HTTP response and coverage information.
- uid: com.azure.search.documents.SearchAsyncClient.suggest(java.lang.String,java.lang.String,com.azure.search.documents.models.SuggestOptions)
  id: suggest(java.lang.String,java.lang.String,com.azure.search.documents.models.SuggestOptions)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: suggest(String searchText, String suggesterName, SuggestOptions suggestOptions)
  nameWithType: SearchAsyncClient.suggest(String searchText, String suggesterName, SuggestOptions suggestOptions)
  fullName: com.azure.search.documents.SearchAsyncClient.suggest(String searchText, String suggesterName, SuggestOptions suggestOptions)
  overload: com.azure.search.documents.SearchAsyncClient.suggest*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Suggests documents in the index that match the given partial query.


    **Code Sample**


    Suggest text from documents in service with option.


    ```java

    searchAsyncClient.suggest("searchText", "sg",
         new SuggestOptions().setOrderBy("hotelId desc"))
         .subscribe(results -> {
             for (Map.Entry<String, Object> keyValuePair: results.getDocument(SearchDocument.class).entrySet()) {
                 System.out.printf("Document key %s, document value %s", keyValuePair.getKey(),
                     keyValuePair.getValue());
             }
         });
    ```
  syntax:
    content: public SuggestPagedFlux suggest(String searchText, String suggesterName, SuggestOptions suggestOptions)
    parameters:
    - id: searchText
      type: java.lang.String
      description: The search text on which to base suggestions
    - id: suggesterName
      type: java.lang.String
      description: >-
        The name of the suggester as specified in the suggesters collection that's part of the index
         definition
    - id: suggestOptions
      type: com.azure.search.documents.models.SuggestOptions
      description: Parameters to further refine the suggestion query.
    return:
      type: com.azure.search.documents.util.SuggestPagedFlux
      description: >-
        A <xref uid="com.azure.search.documents.util.SuggestPagedFlux" data-throw-if-not-resolved="false">SuggestPagedFlux</xref> that iterates over <xref uid="com.azure.search.documents.models.SuggestResult" data-throw-if-not-resolved="false">SuggestResult</xref> objects and provides access to the
         <xref uid="com.azure.search.documents.util.SuggestPagedResponse" data-throw-if-not-resolved="false">SuggestPagedResponse</xref> object for each page containing HTTP response and coverage information.
- uid: com.azure.search.documents.SearchAsyncClient.uploadDocuments(java.lang.Iterable<?>)
  id: uploadDocuments(java.lang.Iterable<?>)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: uploadDocuments(Iterable<?> documents)
  nameWithType: SearchAsyncClient.uploadDocuments(Iterable<?> documents)
  fullName: com.azure.search.documents.SearchAsyncClient.uploadDocuments(Iterable<?> documents)
  overload: com.azure.search.documents.SearchAsyncClient.uploadDocuments*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Uploads a collection of documents to the target index.


    **Code Sample**


    Upload dynamic SearchDocument.


    ```java

    SearchDocument searchDocument = new SearchDocument();
     searchDocument.put("hotelId", "1");
     searchDocument.put("hotelName", "test");
     searchAsyncClient.uploadDocuments(Collections.singletonList(searchDocument))
         .subscribe(result -> {
             for (IndexingResult indexingResult : result.getResults()) {
                 System.out.printf("Does document with key %s upload successfully? %b%n",
                     indexingResult.getKey(), indexingResult.isSucceeded());
             }
         });
    ```
  syntax:
    content: public Mono<IndexDocumentsResult> uploadDocuments(Iterable<?> documents)
    parameters:
    - id: documents
      type: java.lang.Iterable<?>
      description: collection of documents to upload to the target Index.
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.models.IndexDocumentsResult>
      description: The result of the document indexing actions.
- uid: com.azure.search.documents.SearchAsyncClient.uploadDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions)
  id: uploadDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions)
  artifact: com.azure:azure-search-documents:11.0.0
  parent: com.azure.search.documents.SearchAsyncClient
  langs:
  - java
  name: uploadDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options)
  nameWithType: SearchAsyncClient.uploadDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options)
  fullName: com.azure.search.documents.SearchAsyncClient.uploadDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options)
  overload: com.azure.search.documents.SearchAsyncClient.uploadDocumentsWithResponse*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Uploads a collection of documents to the target index.


    **Code Sample**


    Upload dynamic SearchDocument.


    ```java

    SearchDocument searchDocument = new SearchDocument();
     searchDocument.put("hotelId", "1");
     searchDocument.put("hotelName", "test");
     searchAsyncClient.uploadDocumentsWithResponse(Collections.singletonList(searchDocument), null)
         .subscribe(resultResponse -> {
             System.out.println("The status code of the response is " + resultResponse.getStatusCode());
             for (IndexingResult indexingResult : resultResponse.getValue().getResults()) {
                 System.out.printf("Does document with key %s upload successfully? %b%n", indexingResult.getKey(),
                     indexingResult.isSucceeded());
             }
         });
    ```
  syntax:
    content: public Mono<Response<IndexDocumentsResult>> uploadDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<?>
      description: collection of documents to upload to the target Index.
    - id: options
      type: com.azure.search.documents.models.IndexDocumentsOptions
      description: Options that allow specifying document indexing behavior.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>>
      description: A response containing the result of the document indexing actions.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.search.documents.SearchServiceVersion
  name: SearchServiceVersion
  nameWithType: SearchServiceVersion
  fullName: com.azure.search.documents.SearchServiceVersion
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: com.azure.search.documents.SearchAsyncClient.SearchAsyncClient*
  name: SearchAsyncClient
  nameWithType: SearchAsyncClient.SearchAsyncClient
  fullName: com.azure.search.documents.SearchAsyncClient.SearchAsyncClient
  package: com.azure.search.documents
- uid: com.azure.search.documents.SearchAsyncClient.getIndexName*
  name: getIndexName
  nameWithType: SearchAsyncClient.getIndexName
  fullName: com.azure.search.documents.SearchAsyncClient.getIndexName
  package: com.azure.search.documents
- uid: com.azure.search.documents.SearchAsyncClient.getEndpoint*
  name: getEndpoint
  nameWithType: SearchAsyncClient.getEndpoint
  fullName: com.azure.search.documents.SearchAsyncClient.getEndpoint
  package: com.azure.search.documents
- uid: java.lang.Iterable<?>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<com.azure.search.documents.models.IndexDocumentsResult>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.search.documents.models.IndexDocumentsResult
    name: IndexDocumentsResult
    fullName: com.azure.search.documents.models.IndexDocumentsResult
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.SearchAsyncClient.uploadDocuments*
  name: uploadDocuments
  nameWithType: SearchAsyncClient.uploadDocuments
  fullName: com.azure.search.documents.SearchAsyncClient.uploadDocuments
  package: com.azure.search.documents
- uid: com.azure.search.documents.models.IndexDocumentsOptions
  name: IndexDocumentsOptions
  nameWithType: IndexDocumentsOptions
  fullName: com.azure.search.documents.models.IndexDocumentsOptions
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.search.documents.models.IndexDocumentsResult
    name: IndexDocumentsResult
    fullName: com.azure.search.documents.models.IndexDocumentsResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.SearchAsyncClient.uploadDocumentsWithResponse*
  name: uploadDocumentsWithResponse
  nameWithType: SearchAsyncClient.uploadDocumentsWithResponse
  fullName: com.azure.search.documents.SearchAsyncClient.uploadDocumentsWithResponse
  package: com.azure.search.documents
- uid: com.azure.search.documents.SearchAsyncClient.mergeDocuments*
  name: mergeDocuments
  nameWithType: SearchAsyncClient.mergeDocuments
  fullName: com.azure.search.documents.SearchAsyncClient.mergeDocuments
  package: com.azure.search.documents
- uid: com.azure.search.documents.SearchAsyncClient.mergeDocumentsWithResponse*
  name: mergeDocumentsWithResponse
  nameWithType: SearchAsyncClient.mergeDocumentsWithResponse
  fullName: com.azure.search.documents.SearchAsyncClient.mergeDocumentsWithResponse
  package: com.azure.search.documents
- uid: com.azure.search.documents.SearchAsyncClient.mergeOrUploadDocuments*
  name: mergeOrUploadDocuments
  nameWithType: SearchAsyncClient.mergeOrUploadDocuments
  fullName: com.azure.search.documents.SearchAsyncClient.mergeOrUploadDocuments
  package: com.azure.search.documents
- uid: com.azure.search.documents.SearchAsyncClient.mergeOrUploadDocumentsWithResponse*
  name: mergeOrUploadDocumentsWithResponse
  nameWithType: SearchAsyncClient.mergeOrUploadDocumentsWithResponse
  fullName: com.azure.search.documents.SearchAsyncClient.mergeOrUploadDocumentsWithResponse
  package: com.azure.search.documents
- uid: com.azure.search.documents.SearchAsyncClient.deleteDocuments*
  name: deleteDocuments
  nameWithType: SearchAsyncClient.deleteDocuments
  fullName: com.azure.search.documents.SearchAsyncClient.deleteDocuments
  package: com.azure.search.documents
- uid: com.azure.search.documents.SearchAsyncClient.deleteDocumentsWithResponse*
  name: deleteDocumentsWithResponse
  nameWithType: SearchAsyncClient.deleteDocumentsWithResponse
  fullName: com.azure.search.documents.SearchAsyncClient.deleteDocumentsWithResponse
  package: com.azure.search.documents
- uid: com.azure.search.documents.indexes.models.IndexDocumentsBatch<?>
  spec.java:
  - uid: com.azure.search.documents.indexes.models.IndexDocumentsBatch
    name: IndexDocumentsBatch
    fullName: com.azure.search.documents.indexes.models.IndexDocumentsBatch
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.SearchAsyncClient.indexDocuments*
  name: indexDocuments
  nameWithType: SearchAsyncClient.indexDocuments
  fullName: com.azure.search.documents.SearchAsyncClient.indexDocuments
  package: com.azure.search.documents
- uid: com.azure.search.documents.SearchAsyncClient.indexDocumentsWithResponse*
  name: indexDocumentsWithResponse
  nameWithType: SearchAsyncClient.indexDocumentsWithResponse
  fullName: com.azure.search.documents.SearchAsyncClient.indexDocumentsWithResponse
  package: com.azure.search.documents
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<T>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.SearchAsyncClient.getDocument*
  name: <T>getDocument
  nameWithType: SearchAsyncClient.<T>getDocument
  fullName: com.azure.search.documents.SearchAsyncClient.<T>getDocument
  package: com.azure.search.documents
- uid: java.util.List<java.lang.String>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<T>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.SearchAsyncClient.getDocumentWithResponse*
  name: <T>getDocumentWithResponse
  nameWithType: SearchAsyncClient.<T>getDocumentWithResponse
  fullName: com.azure.search.documents.SearchAsyncClient.<T>getDocumentWithResponse
  package: com.azure.search.documents
- uid: reactor.core.publisher.Mono<java.lang.Long>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.SearchAsyncClient.getDocumentCount*
  name: getDocumentCount
  nameWithType: SearchAsyncClient.getDocumentCount
  fullName: com.azure.search.documents.SearchAsyncClient.getDocumentCount
  package: com.azure.search.documents
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Long>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.SearchAsyncClient.getDocumentCountWithResponse*
  name: getDocumentCountWithResponse
  nameWithType: SearchAsyncClient.getDocumentCountWithResponse
  fullName: com.azure.search.documents.SearchAsyncClient.getDocumentCountWithResponse
  package: com.azure.search.documents
- uid: com.azure.search.documents.util.SearchPagedFlux
  name: SearchPagedFlux
  nameWithType: SearchPagedFlux
  fullName: com.azure.search.documents.util.SearchPagedFlux
- uid: com.azure.search.documents.SearchAsyncClient.search*
  name: search
  nameWithType: SearchAsyncClient.search
  fullName: com.azure.search.documents.SearchAsyncClient.search
  package: com.azure.search.documents
- uid: com.azure.search.documents.models.SearchOptions
  name: SearchOptions
  nameWithType: SearchOptions
  fullName: com.azure.search.documents.models.SearchOptions
- uid: com.azure.search.documents.util.SuggestPagedFlux
  name: SuggestPagedFlux
  nameWithType: SuggestPagedFlux
  fullName: com.azure.search.documents.util.SuggestPagedFlux
- uid: com.azure.search.documents.SearchAsyncClient.suggest*
  name: suggest
  nameWithType: SearchAsyncClient.suggest
  fullName: com.azure.search.documents.SearchAsyncClient.suggest
  package: com.azure.search.documents
- uid: com.azure.search.documents.models.SuggestOptions
  name: SuggestOptions
  nameWithType: SuggestOptions
  fullName: com.azure.search.documents.models.SuggestOptions
- uid: com.azure.search.documents.util.AutocompletePagedFlux
  name: AutocompletePagedFlux
  nameWithType: AutocompletePagedFlux
  fullName: com.azure.search.documents.util.AutocompletePagedFlux
- uid: com.azure.search.documents.SearchAsyncClient.autocomplete*
  name: autocomplete
  nameWithType: SearchAsyncClient.autocomplete
  fullName: com.azure.search.documents.SearchAsyncClient.autocomplete
  package: com.azure.search.documents
- uid: com.azure.search.documents.models.AutocompleteOptions
  name: AutocompleteOptions
  nameWithType: AutocompleteOptions
  fullName: com.azure.search.documents.models.AutocompleteOptions
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: com.azure.search.documents.models.IndexDocumentsResult
  name: IndexDocumentsResult
  nameWithType: IndexDocumentsResult
  fullName: com.azure.search.documents.models.IndexDocumentsResult
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.search.documents.indexes.models.IndexDocumentsBatch
  name: IndexDocumentsBatch
  nameWithType: IndexDocumentsBatch
  fullName: com.azure.search.documents.indexes.models.IndexDocumentsBatch
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: java.lang.Long
  name: Long
  nameWithType: Long
  fullName: java.lang.Long
