### YamlMime:JavaType
uid: "com.azure.identity.ClientAssertionCredential"
fullName: "com.azure.identity.ClientAssertionCredential"
name: "ClientAssertionCredential"
nameWithType: "ClientAssertionCredential"
summary: "The ClientAssertionCredential acquires a token via client assertion and service principal authentication."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public class **ClientAssertionCredential**</br> implements <xref href=\"com.azure.core.credential.TokenCredential?alt=com.azure.core.credential.TokenCredential&text=TokenCredential\" data-throw-if-not-resolved=\"False\" />"
methods:
- uid: "com.azure.identity.ClientAssertionCredential.getToken(com.azure.core.credential.TokenRequestContext)"
  fullName: "com.azure.identity.ClientAssertionCredential.getToken(TokenRequestContext request)"
  name: "getToken(TokenRequestContext request)"
  nameWithType: "ClientAssertionCredential.getToken(TokenRequestContext request)"
  parameters:
  - name: "request"
    type: "<xref href=\"com.azure.core.credential.TokenRequestContext?alt=com.azure.core.credential.TokenRequestContext&text=TokenRequestContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AccessToken> getToken(TokenRequestContext request)"
  returns:
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.credential.AccessToken?alt=com.azure.core.credential.AccessToken&text=AccessToken\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.identity.ClientAssertionCredential.getTokenSync(com.azure.core.credential.TokenRequestContext)"
  fullName: "com.azure.identity.ClientAssertionCredential.getTokenSync(TokenRequestContext request)"
  name: "getTokenSync(TokenRequestContext request)"
  nameWithType: "ClientAssertionCredential.getTokenSync(TokenRequestContext request)"
  parameters:
  - name: "request"
    type: "<xref href=\"com.azure.core.credential.TokenRequestContext?alt=com.azure.core.credential.TokenRequestContext&text=TokenRequestContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AccessToken getTokenSync(TokenRequestContext request)"
  returns:
    type: "<xref href=\"com.azure.core.credential.AccessToken?alt=com.azure.core.credential.AccessToken&text=AccessToken\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "The ClientAssertionCredential acquires a token via client assertion and service principal authentication. This authentication method provides a secure and scalable way for client applications to access Azure resources without the need for users to provide their credentials. It is often used in scenarios where a client application needs to access Azure resources on behalf of a user, such as in a multi-tier application architecture. In this authentication method, the client application creates a JSON Web Token (JWT) that includes information about the service principal (such as its client ID and tenant ID) and signs it using a client secret. The client then sends this token to [Microsoft Entra ID][] as proof of its identity. Microsoft Entra ID verifies the token signature and checks that the service principal has the necessary permissions to access the requested Azure resource. If the token is valid and the service principal is authorized, Microsoft Entra ID issues an access token that the client application can use to access the requested resource. The ClientAssertionCredential acquires an access token with a client client assertion for a service principal/registered Microsoft Entra application. The tenantId, clientId, and clientAssertion of the service principal are required for this credential to acquire an access token. It can be used both in Azure-hosted and local development environments for authentication.\n\nAs a pre-requisite, a service principal is required to use this authentication mechanism. If you don't have a service principal, refer to [create a service principal with Azure CLI. ][create a service principal with Azure CLI.]\n\n**Sample: Construct a simple ClientAssertionCredential**\n\nThe following code sample demonstrates the creation of a <xref uid=\"com.azure.identity.ClientAssertionCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientAssertionCredential\"></xref>, using the <xref uid=\"com.azure.identity.ClientAssertionCredentialBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientAssertionCredentialBuilder\"></xref> to configure it. The `tenantId`, `clientId` and `certificate` parameters are required to create <xref uid=\"com.azure.identity.ClientAssertionCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientAssertionCredential\"></xref>. Once this credential is created, it may be passed into the builder of many of the Azure SDK for Java client builders as the 'credential' parameter.\n\n```java\nTokenCredential clientAssertionCredential = new ClientAssertionCredentialBuilder()\n     .tenantId(tenantId)\n     .clientId(clientId)\n     .clientAssertion(() -> \"<Client-Assertion>\")\n     .build();\n```\n\n**Sample: Construct a ClientAssertionCredential behind a proxy**\n\nThe following code sample demonstrates the creation of a <xref uid=\"com.azure.identity.ClientAssertionCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientAssertionCredential\"></xref>, using the <xref uid=\"com.azure.identity.ClientAssertionCredentialBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientAssertionCredentialBuilder\"></xref> to configure it. The `tenantId`, `clientId` and `clientAssertion` parameters are required to create <xref uid=\"com.azure.identity.ClientAssertionCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientAssertionCredential\"></xref>. THe `proxyOptions` can be optionally configured to target a proxy. Once this credential is created, it may be passed into the builder of many of the Azure SDK for Java client builders as the 'credential' parameter.\n\n```java\nTokenCredential assertionCredential = new ClientAssertionCredentialBuilder()\n     .tenantId(tenantId)\n     .clientId(clientId)\n     .clientAssertion(() -> \"<Client-Assertion>\")\n     .proxyOptions(new ProxyOptions(Type.HTTP, new InetSocketAddress(\"10.21.32.43\", 5465)))\n     .build();\n```\n\n\n[Microsoft Entra ID]: https://learn.microsoft.com/azure/active-directory/fundamentals/\n[create a service principal with Azure CLI.]: https://aka.ms/azsdk/java/identity/serviceprincipal/create/docs"
implements:
- "<xref href=\"com.azure.core.credential.TokenCredential?alt=com.azure.core.credential.TokenCredential&text=TokenCredential\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.identity"
artifact: com.azure:azure-identity:1.11.1
